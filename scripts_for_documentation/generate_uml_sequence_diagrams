import os
from datetime import datetime

# ---------------------------
# Configuration
# ---------------------------
OUTPUT_FOLDER = "generated_diagrams"
PLANTUML_JAR_PATH = "path/to/plantuml.jar"  # Update this with your PlantUML jar location
LOG_FILE_PATH = "app.log"  # Path to the structured log file (if using logs)
USE_LOGS = True  # Set to True if you want to parse interactions from logs

# ---------------------------
# Helper Functions
# ---------------------------

def ensure_folder(folder_name):
    """Ensure the output folder exists."""
    if not os.path.exists(folder_name):
        os.makedirs(folder_name)
    return folder_name


def get_timestamp():
    """Generate a timestamp for filenames."""
    return datetime.now().strftime("%Y%m%d_%H%M%S")


def log_file_action(action, file_path):
    """Log actions performed on files."""
    print(f"[{action.upper()}] {file_path}")


def render_plantuml(puml_file, output_format="svg"):
    """Render the PlantUML diagram."""
    output_file = puml_file.replace(".puml", f".{output_format}")
    try:
        os.system(f"java -jar {PLANTUML_JAR_PATH} -t{output_format} {puml_file}")
        log_file_action("rendered", output_file)
    except Exception as e:
        print(f"[ERROR] Failed to render {puml_file}: {e}")


# ---------------------------
# Sequence Diagram Generation
# ---------------------------

def generate_puml(title, interaction_steps, output_folder):
    """
    Generate a .puml file for the given interaction steps.
    Args:
        title (str): The title of the diagram.
        interaction_steps (list of dict): Each step includes "from", "to", "action", and optional "file".
        output_folder (str): The folder to save the .puml file.
    """
    ensure_folder(output_folder)
    timestamp = get_timestamp()
    file_name = f"{title.replace(' ', '_')}_{timestamp}.puml"
    file_path = os.path.join(output_folder, file_name)

    with open(file_path, "w") as f:
        f.write(f"@startuml\n")
        f.write(f"title {title}\n\n")

        # Add participants
        participants = set()
        for step in interaction_steps:
            participants.add(step["from"])
            participants.add(step["to"])

        for participant in participants:
            f.write(f'participant "{participant}"\n')

        f.write("\n")

        # Add interactions
        for step in interaction_steps:
            label = step["action"]
            if "file" in step:
                label += f" ({step['file']})"
            f.write(f'{step["from"]} -> {step["to"]} : {label}\n')

        f.write("\n@enduml\n")

    log_file_action("generated", file_path)
    return file_path


# ---------------------------
# Main Functionality
# ---------------------------

def generate_sequence_diagrams():
    """
    Generate all required sequence diagrams.
    """
    output_folder = ensure_folder(OUTPUT_FOLDER)

    # Define interaction templates
    interactions = [
        {
            "title": "Archive Task Interaction",
            "steps": [
                {"from": "User", "to": "Frontend", "action": "Click 'Archive Task' button"},
                {"from": "Frontend", "to": "Routes", "action": "POST /tasks/archive/<task_id>", "file": "routes.py"},
                {"from": "Routes", "to": "Service", "action": "TaskService.archive_task(task)", "file": "utils.py"},
                {"from": "Service", "to": "Database", "action": "Update task and subtasks (is_archived=True)", "file": "models.py"},
                {"from": "Database", "to": "Service", "action": "Save changes", "file": "models.py"},
                {"from": "Service", "to": "Routes", "action": "Return success", "file": "utils.py"},
                {"from": "Routes", "to": "Frontend", "action": "Redirect to task list", "file": "routes.py"},
            ],
        },
        {
            "title": "Unarchive Task Interaction",
            "steps": [
                {"from": "User", "to": "Frontend", "action": "Click 'Unarchive Task' button"},
                {"from": "Frontend", "to": "Routes", "action": "POST /tasks/unarchive/<task_id>", "file": "routes.py"},
                {"from": "Routes", "to": "Service", "action": "TaskService.unarchive_task(task)", "file": "utils.py"},
                {"from": "Service", "to": "Database", "action": "Update task and subtasks (is_archived=False)", "file": "models.py"},
                {"from": "Database", "to": "Service", "action": "Save changes", "file": "models.py"},
                {"from": "Service", "to": "Routes", "action": "Return success", "file": "utils.py"},
                {"from": "Routes", "to": "Frontend", "action": "Redirect to task list", "file": "routes.py"},
            ],
        },
        # Add more diagrams as needed...
    ]

    # Generate PUML files
    for interaction in interactions:
        puml_file = generate_puml(interaction["title"], interaction["steps"], output_folder)
        render_plantuml(puml_file, output_format="svg")

    print("\n[INFO] Sequence diagrams generated in:", output_folder)


# ---------------------------
# Entry Point
# ---------------------------

if __name__ == "__main__":
    generate_sequence_diagrams()