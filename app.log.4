2025-03-13 16:17:01,315 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-13 16:17:01,315 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 16:17:01,321 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-13 16:17:01,322 INFO: [cached since 3400s ago] {}
2025-03-13 16:17:01,322 INFO: [cached since 201.5s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-13 16:17:01,324 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 16:17:01,324 INFO: [cached since 3400s ago] {'param_1': 7}
2025-03-13 16:17:01,326 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:17:01,330 DEBUG: Tasks returned: [{'id': 430, 'name': 'No Epic', 'task_type': 'Epic', 'is_parent': False}, {'id': 393, 'name': 'List of ideas for new features, parameters to add', 'task_type': 'Epic', 'is_parent': False}, {'id': 327, 'name': '[UNIQUE feature] -\xa0Epic - AI-Powered PBI Refinement System', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 456, 'name': 'Search in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okrÂ´s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notification system', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 459, 'name': '[RESEARCH] - Step 1: Mapping out what each file does', 'task_type': 'Epic', 'is_parent': False}, {'id': 432, 'name': 'Roadmap view', 'task_type': 'Epic', 'is_parent': False}, {'id': 392, 'name': 'UI / UX Improvements', 'task_type': 'Epic', 'is_parent': False}, {'id': 465, 'name': 'Building from Scratch vs.\xa0Replicating Each Feature', 'task_type': 'Epic', 'is_parent': False}, {'id': 424, 'name': '[ISSUES] - Current issues/bugs', 'task_type': 'Epic', 'is_parent': False}, {'id': 460, 'name': '[PLANNING] - Step 2: Architecture & Migration Planning', 'task_type': 'Epic', 'is_parent': False}, {'id': 462, 'name': '[MIGRATION] - high-level roadmap Step 1 - 7', 'task_type': 'Epic', 'is_parent': False}]
2025-03-13 16:17:01,330 INFO: [cached since 3400s ago] {'param_1': 1}
2025-03-13 16:17:01,331 INFO: ROLLBACK
2025-03-13 16:17:01,331 INFO: 127.0.0.1 - - [13/Mar/2025 16:17:01] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=291&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 16:17:01,332 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:17:01,332 INFO: [cached since 3400s ago] {'param_1': 2}
2025-03-13 16:17:01,333 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:17:01,333 INFO: [cached since 3400s ago] {'param_1': 3}
2025-03-13 16:17:01,333 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:17:01,333 INFO: [cached since 3400s ago] {'param_1': 4}
2025-03-13 16:17:01,334 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:17:01,334 INFO: [cached since 3400s ago] {'param_1': 5}
2025-03-13 16:17:01,335 INFO: ROLLBACK
2025-03-13 16:17:01,335 INFO: 127.0.0.1 - - [13/Mar/2025 16:17:01] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 16:22:02,082 INFO: BEGIN (implicit)
2025-03-13 16:22:02,087 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 16:22:02,088 INFO: Entering list_tasks_json route...
2025-03-13 16:22:02,089 INFO: BEGIN (implicit)
2025-03-13 16:22:02,089 INFO: [cached since 3701s ago] {}
2025-03-13 16:22:02,090 INFO: BEGIN (implicit)
2025-03-13 16:22:02,090 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 16:22:02,091 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 16:22:02,092 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 16:22:02,095 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 16:22:02,095 INFO: [cached since 3701s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 16:22:02,097 INFO: [cached since 3701s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 16:22:02,112 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:02,123 INFO: [cached since 3701s ago] {'param_1': 1}
2025-03-13 16:22:02,122 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 16:22:02,121 INFO: ROLLBACK
2025-03-13 16:22:02,124 INFO: BEGIN (implicit)
2025-03-13 16:22:02,128 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 16:22:02,129 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:02] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 16:22:02,130 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:02,130 INFO: [cached since 3701s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 16:22:02,130 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 16:22:02,131 INFO: [cached since 3701s ago] {'param_1': 2}
2025-03-13 16:22:02,131 INFO: [cached since 3701s ago] {}
2025-03-13 16:22:02,132 INFO: BEGIN (implicit)
2025-03-13 16:22:02,134 INFO: ROLLBACK
2025-03-13 16:22:02,135 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:02,140 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 16:22:02,140 INFO: [cached since 3701s ago] {'param_1': 3}
2025-03-13 16:22:02,140 INFO: [cached since 3701s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 16:22:02,141 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:02] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 16:22:02,145 INFO: BEGIN (implicit)
2025-03-13 16:22:02,147 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:02,148 INFO: ROLLBACK
2025-03-13 16:22:02,149 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 16:22:02,149 INFO: [cached since 3701s ago] {'param_1': 4}
2025-03-13 16:22:02,149 INFO: [cached since 3701s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 16:22:02,149 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:02] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 16:22:02,151 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:02,152 INFO: [cached since 3701s ago] {'param_1': 5}
2025-03-13 16:22:02,154 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 16:22:02,154 INFO: [cached since 3701s ago] {}
2025-03-13 16:22:02,154 INFO: ROLLBACK
2025-03-13 16:22:02,155 INFO: ROLLBACK
2025-03-13 16:22:02,155 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:02] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 16:22:02,155 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:02] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 16:22:02,161 INFO: BEGIN (implicit)
2025-03-13 16:22:02,162 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 16:22:02,162 INFO: [cached since 3701s ago] {}
2025-03-13 16:22:02,163 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:02,164 INFO: [cached since 3701s ago] {'param_1': 1}
2025-03-13 16:22:02,166 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:02,166 INFO: [cached since 3701s ago] {'param_1': 2}
2025-03-13 16:22:02,169 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:02,169 INFO: [cached since 3701s ago] {'param_1': 3}
2025-03-13 16:22:02,172 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:02,172 INFO: [cached since 3701s ago] {'param_1': 4}
2025-03-13 16:22:02,175 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:02,176 INFO: [cached since 3701s ago] {'param_1': 5}
2025-03-13 16:22:02,178 INFO: ROLLBACK
2025-03-13 16:22:02,179 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:02] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 16:22:02,285 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 16:22:02,286 INFO: [cached since 3701s ago] {}
2025-03-13 16:22:02,290 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 16:22:02,290 INFO: [cached since 3701s ago] {}
2025-03-13 16:22:02,293 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 16:22:02,293 INFO: [cached since 3701s ago] {}
2025-03-13 16:22:02,300 INFO: ROLLBACK
2025-03-13 16:22:02,301 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:02] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 16:22:02,302 INFO: Entering list_tasks_json route...
2025-03-13 16:22:02,303 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 16:22:02,303 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 16:22:02,342 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 16:22:02,361 INFO: BEGIN (implicit)
2025-03-13 16:22:02,362 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 16:22:02,363 INFO: BEGIN (implicit)
2025-03-13 16:22:02,366 INFO: [cached since 3701s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 16:22:02,367 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 16:22:02,382 INFO: [cached since 3701s ago] {'pk_1': 19}
2025-03-13 16:22:02,407 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 16:22:02,407 INFO: [cached since 3701s ago] {}
2025-03-13 16:22:02,491 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 16:22:02,499 INFO: [cached since 3701s ago] {'param_1': 19}
2025-03-13 16:22:02,544 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:02,545 INFO: [cached since 3701s ago] {'param_1': 1}
2025-03-13 16:22:02,549 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:02,550 INFO: [cached since 3701s ago] {'param_1': 2}
2025-03-13 16:22:02,552 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:02,552 INFO: [cached since 3701s ago] {'param_1': 3}
2025-03-13 16:22:02,554 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:02,554 INFO: [cached since 3701s ago] {'param_1': 4}
2025-03-13 16:22:02,557 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:02,567 INFO: [cached since 3701s ago] {'param_1': 5}
2025-03-13 16:22:02,587 INFO: ROLLBACK
2025-03-13 16:22:02,591 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:02] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 16:22:02,729 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 16:22:02,730 INFO: [cached since 3701s ago] {}
2025-03-13 16:22:02,737 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 16:22:02,737 INFO: [cached since 3701s ago] {}
2025-03-13 16:22:02,739 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 16:22:02,739 INFO: [cached since 3701s ago] {}
2025-03-13 16:22:02,744 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:02] "GET /socket.io/?EIO=4&transport=websocket&sid=eThyQrdjv4GI30O3AAAy HTTP/1.1" 200 -
2025-03-13 16:22:02,783 INFO: ROLLBACK
2025-03-13 16:22:02,784 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:02] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 16:22:03,013 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:03] "GET /socket.io/?EIO=4&transport=polling&t=hz3ia75n HTTP/1.1" 200 -
2025-03-13 16:22:03,021 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:03] "POST /socket.io/?EIO=4&transport=polling&t=hz3ihzuh&sid=q1JhxdqJ3Q9_lc1mAAA0 HTTP/1.1" 200 -
2025-03-13 16:22:03,023 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:03] "GET /socket.io/?EIO=4&transport=polling&t=hz3iic5g&sid=q1JhxdqJ3Q9_lc1mAAA0 HTTP/1.1" 200 -
2025-03-13 16:22:03,090 INFO: BEGIN (implicit)
2025-03-13 16:22:03,091 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 16:22:03,091 INFO: [cached since 3702s ago] {}
2025-03-13 16:22:03,093 INFO: BEGIN (implicit)
2025-03-13 16:22:03,094 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 16:22:03,094 INFO: [cached since 3702s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 16:22:03,096 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:03,096 INFO: [cached since 3702s ago] {'param_1': 1}
2025-03-13 16:22:03,099 INFO: Entering list_tasks_json route...
2025-03-13 16:22:03,099 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 16:22:03,099 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 16:22:03,129 INFO: BEGIN (implicit)
2025-03-13 16:22:03,136 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 16:22:03,136 INFO: [cached since 3702s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 16:22:03,130 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:03,145 INFO: [cached since 3702s ago] {'param_1': 2}
2025-03-13 16:22:03,137 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:03] "GET /socket.io/?EIO=4&transport=polling&t=hz3krllb&sid=q1JhxdqJ3Q9_lc1mAAA0 HTTP/1.1" 200 -
2025-03-13 16:22:03,134 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 16:22:03,147 INFO: [cached since 3702s ago] {}
2025-03-13 16:22:03,144 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 16:22:03,146 INFO: ROLLBACK
2025-03-13 16:22:03,150 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:03,155 INFO: ROLLBACK
2025-03-13 16:22:03,158 INFO: BEGIN (implicit)
2025-03-13 16:22:03,164 INFO: [cached since 3702s ago] {'param_1': 3}
2025-03-13 16:22:03,168 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:03] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 16:22:03,170 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:03] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 16:22:03,172 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 16:22:03,177 INFO: [cached since 3702s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 16:22:03,183 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:03,187 INFO: [cached since 3702s ago] {'param_1': 4}
2025-03-13 16:22:03,192 INFO: BEGIN (implicit)
2025-03-13 16:22:03,193 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 16:22:03,193 INFO: [cached since 3702s ago] {'pk_1': 19}
2025-03-13 16:22:03,197 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 16:22:03,198 INFO: [cached since 3702s ago] {}
2025-03-13 16:22:03,198 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:03,199 INFO: [cached since 3702s ago] {'param_1': 5}
2025-03-13 16:22:03,201 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 16:22:03,202 INFO: [cached since 3702s ago] {'param_1': 19}
2025-03-13 16:22:03,207 INFO: ROLLBACK
2025-03-13 16:22:03,208 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:03,209 INFO: [cached since 3702s ago] {'param_1': 1}
2025-03-13 16:22:03,209 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:03] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 16:22:03,214 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:03,214 INFO: [cached since 3702s ago] {'param_1': 2}
2025-03-13 16:22:03,215 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:03,216 INFO: [cached since 3702s ago] {'param_1': 3}
2025-03-13 16:22:03,217 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:03,217 INFO: [cached since 3702s ago] {'param_1': 4}
2025-03-13 16:22:03,233 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:03,233 INFO: [cached since 3702s ago] {'param_1': 5}
2025-03-13 16:22:03,235 INFO: ROLLBACK
2025-03-13 16:22:03,235 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:03] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 16:22:03,364 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 16:22:03,364 INFO: [cached since 3702s ago] {}
2025-03-13 16:22:03,366 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 16:22:03,366 INFO: [cached since 3702s ago] {}
2025-03-13 16:22:03,367 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 16:22:03,367 INFO: [cached since 3702s ago] {}
2025-03-13 16:22:03,373 INFO: ROLLBACK
2025-03-13 16:22:03,373 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:03] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 16:22:54,301 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:54] "GET /socket.io/?EIO=4&transport=websocket&sid=q1JhxdqJ3Q9_lc1mAAA0 HTTP/1.1" 200 -
2025-03-13 16:22:54,556 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:54] "GET /socket.io/?EIO=4&transport=polling&t=i07a1hx5 HTTP/1.1" 200 -
2025-03-13 16:22:54,564 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:54] "POST /socket.io/?EIO=4&transport=polling&t=i07aa4an&sid=RLr8MAJ2dNSRUQjNAAA2 HTTP/1.1" 200 -
2025-03-13 16:22:54,566 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:54] "GET /socket.io/?EIO=4&transport=polling&t=i07aam36&sid=RLr8MAJ2dNSRUQjNAAA2 HTTP/1.1" 200 -
2025-03-13 16:22:54,582 INFO: BEGIN (implicit)
2025-03-13 16:22:54,584 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 16:22:54,585 INFO: [cached since 3753s ago] {}
2025-03-13 16:22:54,587 INFO: Entering list_tasks_json route...
2025-03-13 16:22:54,597 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:54,597 INFO: BEGIN (implicit)
2025-03-13 16:22:54,597 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 16:22:54,598 INFO: BEGIN (implicit)
2025-03-13 16:22:54,599 INFO: [cached since 3753s ago] {'param_1': 1}
2025-03-13 16:22:54,599 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 16:22:54,600 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 16:22:54,600 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 16:22:54,600 INFO: [cached since 3753s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 16:22:54,606 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 16:22:54,606 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:54,606 INFO: [cached since 3753s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 16:22:54,607 INFO: BEGIN (implicit)
2025-03-13 16:22:54,607 INFO: [cached since 3753s ago] {'param_1': 2}
2025-03-13 16:22:54,608 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 16:22:54,608 INFO: [cached since 3753s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 16:22:54,609 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 16:22:54,609 INFO: ROLLBACK
2025-03-13 16:22:54,609 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:54,609 INFO: [cached since 3753s ago] {}
2025-03-13 16:22:54,610 INFO: [cached since 3753s ago] {'param_1': 3}
2025-03-13 16:22:54,610 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:54] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 16:22:54,611 INFO: ROLLBACK
2025-03-13 16:22:54,614 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:54,614 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:54] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 16:22:54,617 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:54] "GET /socket.io/?EIO=4&transport=polling&t=i07bos6c&sid=RLr8MAJ2dNSRUQjNAAA2 HTTP/1.1" 200 -
2025-03-13 16:22:54,617 INFO: [cached since 3753s ago] {'param_1': 4}
2025-03-13 16:22:54,624 INFO: BEGIN (implicit)
2025-03-13 16:22:54,627 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 16:22:54,628 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:54,628 INFO: [cached since 3753s ago] {'pk_1': 19}
2025-03-13 16:22:54,628 INFO: [cached since 3753s ago] {'param_1': 5}
2025-03-13 16:22:54,631 INFO: ROLLBACK
2025-03-13 16:22:54,633 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 16:22:54,633 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:54] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 16:22:54,633 INFO: [cached since 3753s ago] {}
2025-03-13 16:22:54,640 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 16:22:54,640 INFO: [cached since 3753s ago] {'param_1': 19}
2025-03-13 16:22:54,643 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:54,643 INFO: [cached since 3753s ago] {'param_1': 1}
2025-03-13 16:22:54,648 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:54,648 INFO: [cached since 3754s ago] {'param_1': 2}
2025-03-13 16:22:54,649 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:54,649 INFO: [cached since 3754s ago] {'param_1': 3}
2025-03-13 16:22:54,650 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:54,651 INFO: [cached since 3754s ago] {'param_1': 4}
2025-03-13 16:22:54,651 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:54,651 INFO: [cached since 3754s ago] {'param_1': 5}
2025-03-13 16:22:54,652 INFO: ROLLBACK
2025-03-13 16:22:54,653 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:54] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 16:22:54,767 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 16:22:54,767 INFO: [cached since 3753s ago] {}
2025-03-13 16:22:54,769 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 16:22:54,769 INFO: [cached since 3753s ago] {}
2025-03-13 16:22:54,770 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 16:22:54,770 INFO: [cached since 3753s ago] {}
2025-03-13 16:22:54,775 INFO: ROLLBACK
2025-03-13 16:22:54,775 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:54] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 16:22:57,873 INFO: Fetching task details for Task ID 272.
2025-03-13 16:22:57,873 INFO: Fetching task with ID 272.
2025-03-13 16:22:57,874 INFO: BEGIN (implicit)
2025-03-13 16:22:57,874 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 16:22:57,874 INFO: [cached since 558.4s ago] {'pk_1': 272}
2025-03-13 16:22:57,879 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x113fa7410>, 'epic_priority': None, 'project_id': 7, 'id': 272, 'is_archived': False, 'contributor_id': 5, 'name': 'Implement a markdown text editor like notion', 'completed': False, 'estimate_type': 'story_points', 'sort_order': 2, 'story_points': 0, 'completed_date': None, 'description': '<p>Write your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p>', 'status': 'In Progress', 'time_estimate': None, 'parent_id': None, 'created_at': datetime.datetime(2025, 2, 10, 0, 28, 18, 300231), 'task_type': 'Epic', 'updated_at': datetime.datetime(2025, 3, 5, 16, 4, 29, 771061), 'priority': 'Medium'}
2025-03-13 16:22:57,879 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 16:22:57,880 INFO: [cached since 558.4s ago] {'pk_1': 7}
2025-03-13 16:22:57,881 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-13 16:22:57,882 INFO: [cached since 558.4s ago] {'pk_1': 5}
2025-03-13 16:22:57,884 INFO: Task ID 272 fetched with parent ID: None
2025-03-13 16:22:57,885 INFO: Task with ID 272 fetched successfully.
2025-03-13 16:22:57,886 DEBUG: Fetched Task Data: {'id': 272, 'name': 'Implement a markdown text editor like notion', 'description': '<p>Write your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p>', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'estimate_type': 'story_points', 'estimate': 0, 'status': 'In Progress', 'sort_order': 2, 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-03-05T16:04:29.771061', 'contributor_name': 'Fredrik Cederborg', 'parent': None}
2025-03-13 16:22:57,886 INFO: Task details fetched successfully for Task ID 272.
2025-03-13 16:22:57,887 INFO: ROLLBACK
2025-03-13 16:22:57,888 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:57] "GET /api/tasks/272 HTTP/1.1" 200 -
2025-03-13 16:22:58,068 INFO: BEGIN (implicit)
2025-03-13 16:22:58,068 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:58] "OPTIONS /tasks/available_tasks?task_type=Epic&exclude_task_id=272&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 16:22:58,069 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:58] "OPTIONS /tasks/available_tasks?task_type=Epic&exclude_task_id=272&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 16:22:58,069 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 16:22:58,070 INFO: [cached since 3757s ago] {'pk_1': 7}
2025-03-13 16:22:58,070 INFO: Entering available_tasks route...
2025-03-13 16:22:58,070 DEBUG: Query parameters: task_type=Epic, exclude_task_id=272, search_term=, project_id=None, limit=30, page=1
2025-03-13 16:22:58,071 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 16:22:58,071 INFO: [cached since 3757s ago] {}
2025-03-13 16:22:58,071 INFO: BEGIN (implicit)
2025-03-13 16:22:58,071 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 16:22:58,071 INFO: [cached since 558.6s ago] {'pk_1': 272}
2025-03-13 16:22:58,072 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 16:22:58,072 INFO: [cached since 3757s ago] {'param_1': 7}
2025-03-13 16:22:58,072 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 272, 'task_type': ['Epic']}
2025-03-13 16:22:58,072 INFO: Validating hierarchy for Task N/A
2025-03-13 16:22:58,073 INFO: Determining valid parent types for task_type: Epic
2025-03-13 16:22:58,073 INFO: No valid parents found for task_type: Epic
2025-03-13 16:22:58,073 INFO: ROLLBACK
2025-03-13 16:22:58,073 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:58,073 INFO: [cached since 3757s ago] {'param_1': 1}
2025-03-13 16:22:58,074 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:58] "GET /tasks/available_tasks?task_type=Epic&exclude_task_id=272&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 16:22:58,075 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:58,076 INFO: [cached since 3757s ago] {'param_1': 2}
2025-03-13 16:22:58,076 INFO: Entering available_tasks route...
2025-03-13 16:22:58,077 DEBUG: Query parameters: task_type=Epic, exclude_task_id=272, search_term=, project_id=None, limit=30, page=1
2025-03-13 16:22:58,077 INFO: BEGIN (implicit)
2025-03-13 16:22:58,078 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 16:22:58,078 INFO: [cached since 558.6s ago] {'pk_1': 272}
2025-03-13 16:22:58,080 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:58,080 INFO: [cached since 3757s ago] {'param_1': 3}
2025-03-13 16:22:58,080 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 272, 'task_type': ['Epic']}
2025-03-13 16:22:58,080 INFO: Validating hierarchy for Task N/A
2025-03-13 16:22:58,080 INFO: Determining valid parent types for task_type: Epic
2025-03-13 16:22:58,080 INFO: No valid parents found for task_type: Epic
2025-03-13 16:22:58,081 INFO: ROLLBACK
2025-03-13 16:22:58,081 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:58,081 INFO: [cached since 3757s ago] {'param_1': 4}
2025-03-13 16:22:58,081 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:58] "GET /tasks/available_tasks?task_type=Epic&exclude_task_id=272&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 16:22:58,082 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:58,083 INFO: [cached since 3757s ago] {'param_1': 5}
2025-03-13 16:22:58,084 INFO: ROLLBACK
2025-03-13 16:22:58,084 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:58] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 16:22:58,086 INFO: BEGIN (implicit)
2025-03-13 16:22:58,086 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 16:22:58,086 INFO: [cached since 3757s ago] {'pk_1': 7}
2025-03-13 16:22:58,087 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 16:22:58,088 INFO: [cached since 3757s ago] {}
2025-03-13 16:22:58,088 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 16:22:58,088 INFO: [cached since 3757s ago] {'param_1': 7}
2025-03-13 16:22:58,089 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:58,089 INFO: [cached since 3757s ago] {'param_1': 1}
2025-03-13 16:22:58,089 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:58,089 INFO: [cached since 3757s ago] {'param_1': 2}
2025-03-13 16:22:58,092 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:58,092 INFO: [cached since 3757s ago] {'param_1': 3}
2025-03-13 16:22:58,093 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:58,094 INFO: [cached since 3757s ago] {'param_1': 4}
2025-03-13 16:22:58,095 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:22:58,095 INFO: [cached since 3757s ago] {'param_1': 5}
2025-03-13 16:22:58,096 INFO: ROLLBACK
2025-03-13 16:22:58,098 INFO: 127.0.0.1 - - [13/Mar/2025 16:22:58] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 16:24:00,034 INFO: 127.0.0.1 - - [13/Mar/2025 16:24:00] "GET /socket.io/?EIO=4&transport=websocket&sid=RLr8MAJ2dNSRUQjNAAA2 HTTP/1.1" 200 -
2025-03-13 16:24:00,493 INFO: 127.0.0.1 - - [13/Mar/2025 16:24:00] "GET /socket.io/?EIO=4&transport=polling&t=i1m5kj15 HTTP/1.1" 200 -
2025-03-13 16:24:00,515 INFO: 127.0.0.1 - - [13/Mar/2025 16:24:00] "POST /socket.io/?EIO=4&transport=polling&t=i1m5xvs1&sid=VbadiHgkanJIhmLQAAA4 HTTP/1.1" 200 -
2025-03-13 16:24:00,521 INFO: 127.0.0.1 - - [13/Mar/2025 16:24:00] "GET /socket.io/?EIO=4&transport=polling&t=i1m5yjxb&sid=VbadiHgkanJIhmLQAAA4 HTTP/1.1" 200 -
2025-03-13 16:24:00,546 INFO: BEGIN (implicit)
2025-03-13 16:24:00,549 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 16:24:00,549 INFO: [cached since 3819s ago] {}
2025-03-13 16:24:00,552 INFO: BEGIN (implicit)
2025-03-13 16:24:00,557 INFO: Entering list_tasks_json route...
2025-03-13 16:24:00,558 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 16:24:00,561 INFO: BEGIN (implicit)
2025-03-13 16:24:00,565 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:24:00,570 INFO: [cached since 3819s ago] {'param_1': 1}
2025-03-13 16:24:00,566 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 16:24:00,568 INFO: [cached since 3819s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 16:24:00,569 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 16:24:00,574 INFO: [cached since 3819s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 16:24:00,571 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 16:24:00,568 INFO: 127.0.0.1 - - [13/Mar/2025 16:24:00] "GET /socket.io/?EIO=4&transport=polling&t=i1m6sdoh&sid=VbadiHgkanJIhmLQAAA4 HTTP/1.1" 200 -
2025-03-13 16:24:00,582 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:24:00,585 INFO: [cached since 3819s ago] {'param_1': 2}
2025-03-13 16:24:00,582 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 16:24:00,587 INFO: [cached since 3819s ago] {}
2025-03-13 16:24:00,584 INFO: ROLLBACK
2025-03-13 16:24:00,590 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 16:24:00,591 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:24:00,595 INFO: [cached since 3819s ago] {'param_1': 3}
2025-03-13 16:24:00,595 INFO: BEGIN (implicit)
2025-03-13 16:24:00,594 INFO: ROLLBACK
2025-03-13 16:24:00,595 INFO: 127.0.0.1 - - [13/Mar/2025 16:24:00] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 16:24:00,595 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 16:24:00,597 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:24:00,598 INFO: [cached since 3819s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 16:24:00,598 INFO: 127.0.0.1 - - [13/Mar/2025 16:24:00] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 16:24:00,598 INFO: [cached since 3819s ago] {'param_1': 4}
2025-03-13 16:24:00,603 INFO: BEGIN (implicit)
2025-03-13 16:24:00,603 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 16:24:00,603 INFO: [cached since 3819s ago] {'pk_1': 19}
2025-03-13 16:24:00,605 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:24:00,609 INFO: [cached since 3819s ago] {'param_1': 5}
2025-03-13 16:24:00,614 INFO: ROLLBACK
2025-03-13 16:24:00,615 INFO: 127.0.0.1 - - [13/Mar/2025 16:24:00] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 16:24:00,622 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 16:24:00,622 INFO: [cached since 3819s ago] {}
2025-03-13 16:24:00,625 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 16:24:00,626 INFO: [cached since 3819s ago] {'param_1': 19}
2025-03-13 16:24:00,648 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:24:00,649 INFO: [cached since 3820s ago] {'param_1': 1}
2025-03-13 16:24:00,692 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:24:00,697 INFO: [cached since 3820s ago] {'param_1': 2}
2025-03-13 16:24:00,705 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:24:00,706 INFO: [cached since 3820s ago] {'param_1': 3}
2025-03-13 16:24:00,727 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:24:00,727 INFO: [cached since 3820s ago] {'param_1': 4}
2025-03-13 16:24:00,764 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:24:00,765 INFO: [cached since 3820s ago] {'param_1': 5}
2025-03-13 16:24:00,769 INFO: ROLLBACK
2025-03-13 16:24:00,772 INFO: 127.0.0.1 - - [13/Mar/2025 16:24:00] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 16:24:00,907 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 16:24:00,911 INFO: [cached since 3820s ago] {}
2025-03-13 16:24:00,920 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 16:24:00,920 INFO: [cached since 3820s ago] {}
2025-03-13 16:24:00,921 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 16:24:00,921 INFO: [cached since 3820s ago] {}
2025-03-13 16:24:00,927 INFO: ROLLBACK
2025-03-13 16:24:00,928 INFO: 127.0.0.1 - - [13/Mar/2025 16:24:00] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 16:25:06,562 INFO: 127.0.0.1 - - [13/Mar/2025 16:25:06] "GET /socket.io/?EIO=4&transport=websocket&sid=VbadiHgkanJIhmLQAAA4 HTTP/1.1" 200 -
2025-03-13 16:27:11,746 INFO: 127.0.0.1 - - [13/Mar/2025 16:27:11] "GET /socket.io/?EIO=4&transport=polling&t=i5pq3vfh HTTP/1.1" 200 -
2025-03-13 16:27:11,770 INFO: BEGIN (implicit)
2025-03-13 16:27:11,775 INFO: BEGIN (implicit)
2025-03-13 16:27:11,777 INFO: BEGIN (implicit)
2025-03-13 16:27:11,781 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 16:27:11,784 INFO: Entering list_tasks_json route...
2025-03-13 16:27:11,786 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 16:27:11,797 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 16:27:11,799 INFO: 127.0.0.1 - - [13/Mar/2025 16:27:11] "POST /socket.io/?EIO=4&transport=polling&t=i5pqun5a&sid=RWfiYeM1Wprz-7RdAAA6 HTTP/1.1" 200 -
2025-03-13 16:27:11,800 INFO: [cached since 4011s ago] {}
2025-03-13 16:27:11,800 INFO: 127.0.0.1 - - [13/Mar/2025 16:27:11] "GET /socket.io/?EIO=4&transport=polling&t=i5pqvb6z&sid=RWfiYeM1Wprz-7RdAAA6 HTTP/1.1" 200 -
2025-03-13 16:27:11,800 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 16:27:11,800 INFO: [cached since 4011s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 16:27:11,800 INFO: [cached since 4011s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 16:27:11,802 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 16:27:11,806 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:27:11,811 INFO: [cached since 4011s ago] {'param_1': 1}
2025-03-13 16:27:11,811 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 16:27:11,812 INFO: ROLLBACK
2025-03-13 16:27:11,810 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 16:27:11,812 INFO: [cached since 4011s ago] {}
2025-03-13 16:27:11,813 INFO: BEGIN (implicit)
2025-03-13 16:27:11,813 INFO: 127.0.0.1 - - [13/Mar/2025 16:27:11] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 16:27:11,814 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 16:27:11,816 INFO: ROLLBACK
2025-03-13 16:27:11,817 INFO: [cached since 4011s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 16:27:11,819 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:27:11,822 INFO: BEGIN (implicit)
2025-03-13 16:27:11,822 INFO: 127.0.0.1 - - [13/Mar/2025 16:27:11] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 16:27:11,822 INFO: [cached since 4011s ago] {'param_1': 2}
2025-03-13 16:27:11,822 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 16:27:11,824 INFO: [cached since 4011s ago] {'pk_1': 19}
2025-03-13 16:27:11,827 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:27:11,830 INFO: [cached since 4011s ago] {'param_1': 3}
2025-03-13 16:27:11,832 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:27:11,832 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 16:27:11,833 INFO: [cached since 4011s ago] {'param_1': 4}
2025-03-13 16:27:11,833 INFO: [cached since 4011s ago] {}
2025-03-13 16:27:11,869 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:27:11,884 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 16:27:11,887 INFO: [cached since 4011s ago] {'param_1': 5}
2025-03-13 16:27:11,892 INFO: [cached since 4011s ago] {'param_1': 19}
2025-03-13 16:27:11,901 INFO: ROLLBACK
2025-03-13 16:27:11,902 INFO: 127.0.0.1 - - [13/Mar/2025 16:27:11] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 16:27:11,918 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:27:11,920 INFO: [cached since 4011s ago] {'param_1': 1}
2025-03-13 16:27:11,932 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:27:11,932 INFO: [cached since 4011s ago] {'param_1': 2}
2025-03-13 16:27:11,935 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:27:11,936 INFO: [cached since 4011s ago] {'param_1': 3}
2025-03-13 16:27:11,940 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:27:11,950 INFO: [cached since 4011s ago] {'param_1': 4}
2025-03-13 16:27:11,959 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:27:11,960 INFO: [cached since 4011s ago] {'param_1': 5}
2025-03-13 16:27:11,965 INFO: ROLLBACK
2025-03-13 16:27:11,966 INFO: 127.0.0.1 - - [13/Mar/2025 16:27:11] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 16:27:12,019 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 16:27:12,019 INFO: [cached since 4011s ago] {}
2025-03-13 16:27:12,021 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 16:27:12,021 INFO: [cached since 4011s ago] {}
2025-03-13 16:27:12,021 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 16:27:12,021 INFO: [cached since 4011s ago] {}
2025-03-13 16:27:12,026 INFO: ROLLBACK
2025-03-13 16:27:12,026 INFO: 127.0.0.1 - - [13/Mar/2025 16:27:12] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 16:27:17,356 INFO: Fetching task details for Task ID 272.
2025-03-13 16:27:17,357 INFO: Fetching task with ID 272.
2025-03-13 16:27:17,358 INFO: BEGIN (implicit)
2025-03-13 16:27:17,359 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 16:27:17,359 INFO: [cached since 817.9s ago] {'pk_1': 272}
2025-03-13 16:27:17,360 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x11403b4d0>, 'epic_priority': None, 'project_id': 7, 'id': 272, 'is_archived': False, 'contributor_id': 5, 'name': 'Implement a markdown text editor like notion', 'completed': False, 'estimate_type': 'story_points', 'sort_order': 2, 'story_points': 0, 'completed_date': None, 'description': '<p>Write your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p>', 'status': 'In Progress', 'time_estimate': None, 'parent_id': None, 'created_at': datetime.datetime(2025, 2, 10, 0, 28, 18, 300231), 'task_type': 'Epic', 'updated_at': datetime.datetime(2025, 3, 5, 16, 4, 29, 771061), 'priority': 'Medium'}
2025-03-13 16:27:17,361 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 16:27:17,362 INFO: [cached since 817.9s ago] {'pk_1': 7}
2025-03-13 16:27:17,364 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-13 16:27:17,364 INFO: [cached since 817.9s ago] {'pk_1': 5}
2025-03-13 16:27:17,365 INFO: Task ID 272 fetched with parent ID: None
2025-03-13 16:27:17,365 INFO: Task with ID 272 fetched successfully.
2025-03-13 16:27:17,366 DEBUG: Fetched Task Data: {'id': 272, 'name': 'Implement a markdown text editor like notion', 'description': '<p>Write your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p>', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'estimate_type': 'story_points', 'estimate': 0, 'status': 'In Progress', 'sort_order': 2, 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-03-05T16:04:29.771061', 'contributor_name': 'Fredrik Cederborg', 'parent': None}
2025-03-13 16:27:17,366 INFO: Task details fetched successfully for Task ID 272.
2025-03-13 16:27:17,366 INFO: ROLLBACK
2025-03-13 16:27:17,367 INFO: 127.0.0.1 - - [13/Mar/2025 16:27:17] "GET /api/tasks/272 HTTP/1.1" 200 -
2025-03-13 16:27:17,544 INFO: 127.0.0.1 - - [13/Mar/2025 16:27:17] "OPTIONS /tasks/available_tasks?task_type=Epic&exclude_task_id=272&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 16:27:17,545 INFO: BEGIN (implicit)
2025-03-13 16:27:17,546 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 16:27:17,546 INFO: 127.0.0.1 - - [13/Mar/2025 16:27:17] "OPTIONS /tasks/available_tasks?task_type=Epic&exclude_task_id=272&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 16:27:17,547 INFO: Entering available_tasks route...
2025-03-13 16:27:17,547 INFO: [cached since 4016s ago] {'pk_1': 7}
2025-03-13 16:27:17,548 DEBUG: Query parameters: task_type=Epic, exclude_task_id=272, search_term=, project_id=None, limit=30, page=1
2025-03-13 16:27:17,549 INFO: BEGIN (implicit)
2025-03-13 16:27:17,550 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 16:27:17,550 INFO: [cached since 818.1s ago] {'pk_1': 272}
2025-03-13 16:27:17,551 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 16:27:17,551 INFO: [cached since 4016s ago] {}
2025-03-13 16:27:17,553 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 272, 'task_type': ['Epic']}
2025-03-13 16:27:17,553 INFO: Validating hierarchy for Task N/A
2025-03-13 16:27:17,553 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 16:27:17,553 INFO: Determining valid parent types for task_type: Epic
2025-03-13 16:27:17,553 INFO: [cached since 4016s ago] {'param_1': 7}
2025-03-13 16:27:17,553 INFO: No valid parents found for task_type: Epic
2025-03-13 16:27:17,554 INFO: ROLLBACK
2025-03-13 16:27:17,554 INFO: 127.0.0.1 - - [13/Mar/2025 16:27:17] "GET /tasks/available_tasks?task_type=Epic&exclude_task_id=272&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 16:27:17,554 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:27:17,555 INFO: [cached since 4016s ago] {'param_1': 1}
2025-03-13 16:27:17,556 INFO: Entering available_tasks route...
2025-03-13 16:27:17,556 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:27:17,556 INFO: [cached since 4016s ago] {'param_1': 2}
2025-03-13 16:27:17,556 DEBUG: Query parameters: task_type=Epic, exclude_task_id=272, search_term=, project_id=None, limit=30, page=1
2025-03-13 16:27:17,557 INFO: BEGIN (implicit)
2025-03-13 16:27:17,557 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:27:17,558 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 16:27:17,558 INFO: [cached since 4016s ago] {'param_1': 3}
2025-03-13 16:27:17,558 INFO: [cached since 818.1s ago] {'pk_1': 272}
2025-03-13 16:27:17,559 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:27:17,559 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 272, 'task_type': ['Epic']}
2025-03-13 16:27:17,560 INFO: Validating hierarchy for Task N/A
2025-03-13 16:27:17,560 INFO: Determining valid parent types for task_type: Epic
2025-03-13 16:27:17,560 INFO: No valid parents found for task_type: Epic
2025-03-13 16:27:17,559 INFO: [cached since 4016s ago] {'param_1': 4}
2025-03-13 16:27:17,561 INFO: ROLLBACK
2025-03-13 16:27:17,562 INFO: 127.0.0.1 - - [13/Mar/2025 16:27:17] "GET /tasks/available_tasks?task_type=Epic&exclude_task_id=272&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 16:27:17,563 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:27:17,564 INFO: [cached since 4016s ago] {'param_1': 5}
2025-03-13 16:27:17,567 INFO: ROLLBACK
2025-03-13 16:27:17,569 INFO: 127.0.0.1 - - [13/Mar/2025 16:27:17] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 16:27:17,599 INFO: BEGIN (implicit)
2025-03-13 16:27:17,600 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 16:27:17,601 INFO: [cached since 4016s ago] {'pk_1': 7}
2025-03-13 16:27:17,602 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 16:27:17,602 INFO: [cached since 4016s ago] {}
2025-03-13 16:27:17,606 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 16:27:17,606 INFO: [cached since 4016s ago] {'param_1': 7}
2025-03-13 16:27:17,609 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:27:17,609 INFO: [cached since 4016s ago] {'param_1': 1}
2025-03-13 16:27:17,611 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:27:17,612 INFO: [cached since 4016s ago] {'param_1': 2}
2025-03-13 16:27:17,614 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:27:17,614 INFO: [cached since 4016s ago] {'param_1': 3}
2025-03-13 16:27:17,615 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:27:17,615 INFO: [cached since 4016s ago] {'param_1': 4}
2025-03-13 16:27:17,615 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:27:17,615 INFO: [cached since 4016s ago] {'param_1': 5}
2025-03-13 16:27:17,616 INFO: ROLLBACK
2025-03-13 16:27:17,616 INFO: 127.0.0.1 - - [13/Mar/2025 16:27:17] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 16:28:09,636 INFO: Application started in development mode
2025-03-13 16:28:09,637 DEBUG: This is a debug message from the api_routes module
2025-03-13 16:28:10,199 DEBUG: This is a debug message from the page_routes module
2025-03-13 16:28:10,207 INFO: Blueprints registered successfully
2025-03-13 16:28:10,233 INFO: [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2025-03-13 16:28:10,234 INFO: [33mPress CTRL+C to quit[0m
2025-03-13 16:28:10,234 INFO:  * Restarting with stat
2025-03-13 16:28:10,550 INFO: Application started in development mode
2025-03-13 16:28:10,550 DEBUG: This is a debug message from the api_routes module
2025-03-13 16:28:10,887 DEBUG: This is a debug message from the page_routes module
2025-03-13 16:28:10,895 INFO: Blueprints registered successfully
2025-03-13 16:28:10,908 WARNING:  * Debugger is active!
2025-03-13 16:28:10,918 INFO:  * Debugger PIN: 937-958-492
2025-03-13 16:28:13,766 INFO: 127.0.0.1 - - [13/Mar/2025 16:28:13] "GET /socket.io/?EIO=4&transport=polling&t=i71kxqpd HTTP/1.1" 200 -
2025-03-13 16:28:13,773 INFO: 127.0.0.1 - - [13/Mar/2025 16:28:13] "POST /socket.io/?EIO=4&transport=polling&t=i71l5y26&sid=w5Hi9y6TxTSDNHnoAAAA HTTP/1.1" 200 -
2025-03-13 16:28:13,776 INFO: 127.0.0.1 - - [13/Mar/2025 16:28:13] "GET /socket.io/?EIO=4&transport=polling&t=i71l7eqn&sid=w5Hi9y6TxTSDNHnoAAAA HTTP/1.1" 200 -
2025-03-13 16:28:25,105 INFO: 127.0.0.1 - - [13/Mar/2025 16:28:25] "GET /socket.io/?EIO=4&transport=websocket&sid=w5Hi9y6TxTSDNHnoAAAA HTTP/1.1" 200 -
2025-03-13 16:28:25,486 INFO: 127.0.0.1 - - [13/Mar/2025 16:28:25] "GET /socket.io/?EIO=4&transport=polling&t=i7amg3o6 HTTP/1.1" 200 -
2025-03-13 16:28:25,604 INFO: Entering list_tasks_json route...
2025-03-13 16:28:25,667 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 16:28:25,714 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 16:28:25,718 INFO: 127.0.0.1 - - [13/Mar/2025 16:28:25] "POST /socket.io/?EIO=4&transport=polling&t=i7anahxt&sid=Iz6xBY-CgDjQTGlNAAAC HTTP/1.1" 200 -
2025-03-13 16:28:25,720 INFO: 127.0.0.1 - - [13/Mar/2025 16:28:25] "GET /socket.io/?EIO=4&transport=polling&t=i7anbuoc&sid=Iz6xBY-CgDjQTGlNAAAC HTTP/1.1" 200 -
2025-03-13 16:28:25,731 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 16:28:25,780 INFO: select pg_catalog.version()
2025-03-13 16:28:25,780 INFO: [raw sql] {}
2025-03-13 16:28:25,783 INFO: select current_schema()
2025-03-13 16:28:25,783 INFO: [raw sql] {}
2025-03-13 16:28:25,793 INFO: show standard_conforming_strings
2025-03-13 16:28:25,793 INFO: [raw sql] {}
2025-03-13 16:28:25,793 INFO: BEGIN (implicit)
2025-03-13 16:28:25,793 INFO: BEGIN (implicit)
2025-03-13 16:28:25,793 INFO: BEGIN (implicit)
2025-03-13 16:28:25,795 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 16:28:25,795 INFO: BEGIN (implicit)
2025-03-13 16:28:25,800 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 16:28:25,800 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 16:28:25,801 INFO: [generated in 0.00592s] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 16:28:25,801 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 16:28:25,801 INFO: [generated in 0.00099s] {'param_1': 700, 'param_2': 0}
2025-03-13 16:28:25,801 INFO: [generated in 0.00054s] {}
2025-03-13 16:28:25,801 INFO: [cached since 0.006379s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 16:28:25,805 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:28:25,806 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 16:28:25,808 INFO: [generated in 0.00207s] {}
2025-03-13 16:28:25,808 INFO: [generated in 0.00248s] {'param_1': 1}
2025-03-13 16:28:25,807 INFO: ROLLBACK
2025-03-13 16:28:25,815 INFO: ROLLBACK
2025-03-13 16:28:25,816 INFO: 127.0.0.1 - - [13/Mar/2025 16:28:25] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 16:28:25,821 INFO: 127.0.0.1 - - [13/Mar/2025 16:28:25] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 16:28:25,828 INFO: BEGIN (implicit)
2025-03-13 16:28:25,829 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:28:25,829 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 16:28:25,829 INFO: [cached since 0.02417s ago] {'param_1': 2}
2025-03-13 16:28:25,829 INFO: [generated in 0.00018s] {'pk_1': 19}
2025-03-13 16:28:25,830 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:28:25,830 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 16:28:25,831 INFO: [cached since 0.03028s ago] {}
2025-03-13 16:28:25,831 INFO: [cached since 0.02563s ago] {'param_1': 3}
2025-03-13 16:28:25,832 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 16:28:25,832 INFO: [generated in 0.00013s] {'param_1': 19}
2025-03-13 16:28:25,832 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:28:25,832 INFO: [cached since 0.0274s ago] {'param_1': 4}
2025-03-13 16:28:25,833 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:28:25,833 INFO: [cached since 0.02778s ago] {'param_1': 1}
2025-03-13 16:28:25,833 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:28:25,833 INFO: [cached since 0.02821s ago] {'param_1': 5}
2025-03-13 16:28:25,834 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:28:25,834 INFO: [cached since 0.0286s ago] {'param_1': 2}
2025-03-13 16:28:25,835 INFO: ROLLBACK
2025-03-13 16:28:25,836 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:28:25,837 INFO: [cached since 0.0315s ago] {'param_1': 3}
2025-03-13 16:28:25,837 INFO: 127.0.0.1 - - [13/Mar/2025 16:28:25] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 16:28:25,838 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:28:25,839 INFO: [cached since 0.0335s ago] {'param_1': 4}
2025-03-13 16:28:25,841 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:28:25,841 INFO: [cached since 0.03587s ago] {'param_1': 5}
2025-03-13 16:28:25,844 INFO: ROLLBACK
2025-03-13 16:28:25,845 INFO: 127.0.0.1 - - [13/Mar/2025 16:28:25] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 16:28:25,945 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 16:28:25,946 INFO: [generated in 0.00022s] {}
2025-03-13 16:28:25,948 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 16:28:25,948 INFO: [generated in 0.00009s] {}
2025-03-13 16:28:25,949 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 16:28:25,950 INFO: [generated in 0.00010s] {}
2025-03-13 16:28:25,954 INFO: ROLLBACK
2025-03-13 16:28:25,954 INFO: 127.0.0.1 - - [13/Mar/2025 16:28:25] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 16:28:28,588 INFO: Fetching task details for Task ID 272.
2025-03-13 16:28:28,589 INFO: Fetching task with ID 272.
2025-03-13 16:28:28,590 INFO: BEGIN (implicit)
2025-03-13 16:28:28,592 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 16:28:28,592 INFO: [generated in 0.00039s] {'pk_1': 272}
2025-03-13 16:28:28,596 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x109d5e1b0>, 'epic_priority': None, 'project_id': 7, 'id': 272, 'is_archived': False, 'contributor_id': 5, 'name': 'Implement a markdown text editor like notion', 'completed': False, 'estimate_type': 'story_points', 'sort_order': 2, 'story_points': 0, 'completed_date': None, 'description': '<p>Write your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p>', 'status': 'In Progress', 'time_estimate': None, 'parent_id': None, 'created_at': datetime.datetime(2025, 2, 10, 0, 28, 18, 300231), 'task_type': 'Epic', 'updated_at': datetime.datetime(2025, 3, 5, 16, 4, 29, 771061), 'priority': 'Medium'}
2025-03-13 16:28:28,598 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 16:28:28,598 INFO: [generated in 0.00036s] {'pk_1': 7}
2025-03-13 16:28:28,601 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-13 16:28:28,601 INFO: [generated in 0.00036s] {'pk_1': 5}
2025-03-13 16:28:28,602 INFO: Task ID 272 fetched with parent ID: None
2025-03-13 16:28:28,602 INFO: Task with ID 272 fetched successfully.
2025-03-13 16:28:28,603 DEBUG: Fetched Task Data: {'id': 272, 'name': 'Implement a markdown text editor like notion', 'description': '<p>Write your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p>', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'estimate_type': 'story_points', 'estimate': 0, 'status': 'In Progress', 'sort_order': 2, 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-03-05T16:04:29.771061', 'contributor_name': 'Fredrik Cederborg', 'parent': None}
2025-03-13 16:28:28,603 INFO: Task details fetched successfully for Task ID 272.
2025-03-13 16:28:28,604 INFO: ROLLBACK
2025-03-13 16:28:28,605 INFO: 127.0.0.1 - - [13/Mar/2025 16:28:28] "GET /api/tasks/272 HTTP/1.1" 200 -
2025-03-13 16:28:28,783 INFO: 127.0.0.1 - - [13/Mar/2025 16:28:28] "OPTIONS /tasks/available_tasks?task_type=Epic&exclude_task_id=272&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 16:28:28,785 INFO: BEGIN (implicit)
2025-03-13 16:28:28,786 INFO: 127.0.0.1 - - [13/Mar/2025 16:28:28] "OPTIONS /tasks/available_tasks?task_type=Epic&exclude_task_id=272&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 16:28:28,786 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 16:28:28,786 INFO: Entering available_tasks route...
2025-03-13 16:28:28,787 INFO: [cached since 2.957s ago] {'pk_1': 7}
2025-03-13 16:28:28,787 DEBUG: Query parameters: task_type=Epic, exclude_task_id=272, search_term=, project_id=None, limit=30, page=1
2025-03-13 16:28:28,788 INFO: BEGIN (implicit)
2025-03-13 16:28:28,788 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 16:28:28,788 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 16:28:28,789 INFO: [cached since 2.988s ago] {}
2025-03-13 16:28:28,789 INFO: [cached since 0.1974s ago] {'pk_1': 272}
2025-03-13 16:28:28,790 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 16:28:28,790 INFO: [cached since 2.958s ago] {'param_1': 7}
2025-03-13 16:28:28,790 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:28:28,791 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 272, 'task_type': ['Epic']}
2025-03-13 16:28:28,791 INFO: Validating hierarchy for Task N/A
2025-03-13 16:28:28,791 INFO: Determining valid parent types for task_type: Epic
2025-03-13 16:28:28,791 INFO: [cached since 2.986s ago] {'param_1': 1}
2025-03-13 16:28:28,791 INFO: No valid parents found for task_type: Epic
2025-03-13 16:28:28,791 INFO: ROLLBACK
2025-03-13 16:28:28,792 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:28:28,792 INFO: 127.0.0.1 - - [13/Mar/2025 16:28:28] "GET /tasks/available_tasks?task_type=Epic&exclude_task_id=272&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 16:28:28,792 INFO: [cached since 2.987s ago] {'param_1': 2}
2025-03-13 16:28:28,793 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:28:28,793 INFO: Entering available_tasks route...
2025-03-13 16:28:28,793 INFO: [cached since 2.988s ago] {'param_1': 3}
2025-03-13 16:28:28,793 DEBUG: Query parameters: task_type=Epic, exclude_task_id=272, search_term=, project_id=None, limit=30, page=1
2025-03-13 16:28:28,794 INFO: BEGIN (implicit)
2025-03-13 16:28:28,794 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 16:28:28,794 INFO: [cached since 0.2027s ago] {'pk_1': 272}
2025-03-13 16:28:28,795 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:28:28,795 INFO: [cached since 2.99s ago] {'param_1': 4}
2025-03-13 16:28:28,796 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 272, 'task_type': ['Epic']}
2025-03-13 16:28:28,796 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:28:28,796 INFO: Validating hierarchy for Task N/A
2025-03-13 16:28:28,797 INFO: Determining valid parent types for task_type: Epic
2025-03-13 16:28:28,797 INFO: No valid parents found for task_type: Epic
2025-03-13 16:28:28,797 INFO: [cached since 2.992s ago] {'param_1': 5}
2025-03-13 16:28:28,797 INFO: ROLLBACK
2025-03-13 16:28:28,797 INFO: 127.0.0.1 - - [13/Mar/2025 16:28:28] "GET /tasks/available_tasks?task_type=Epic&exclude_task_id=272&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 16:28:28,799 INFO: ROLLBACK
2025-03-13 16:28:28,801 INFO: 127.0.0.1 - - [13/Mar/2025 16:28:28] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 16:28:28,806 INFO: BEGIN (implicit)
2025-03-13 16:28:28,807 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 16:28:28,808 INFO: [cached since 2.979s ago] {'pk_1': 7}
2025-03-13 16:28:28,809 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 16:28:28,809 INFO: [cached since 3.009s ago] {}
2025-03-13 16:28:28,813 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 16:28:28,814 INFO: [cached since 2.982s ago] {'param_1': 7}
2025-03-13 16:28:28,818 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:28:28,818 INFO: [cached since 3.013s ago] {'param_1': 1}
2025-03-13 16:28:28,826 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:28:28,826 INFO: [cached since 3.021s ago] {'param_1': 2}
2025-03-13 16:28:28,829 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:28:28,829 INFO: [cached since 3.024s ago] {'param_1': 3}
2025-03-13 16:28:28,832 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:28:28,832 INFO: [cached since 3.027s ago] {'param_1': 4}
2025-03-13 16:28:28,836 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:28:28,836 INFO: [cached since 3.031s ago] {'param_1': 5}
2025-03-13 16:28:28,838 INFO: ROLLBACK
2025-03-13 16:28:28,839 INFO: 127.0.0.1 - - [13/Mar/2025 16:28:28] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 16:31:59,412 INFO: 127.0.0.1 - - [13/Mar/2025 16:31:59] "GET /socket.io/?EIO=4&transport=websocket&sid=Iz6xBY-CgDjQTGlNAAAC HTTP/1.1" 200 -
2025-03-13 16:31:59,726 INFO: 127.0.0.1 - - [13/Mar/2025 16:31:59] "GET /socket.io/?EIO=4&transport=polling&t=ibvxjrn0 HTTP/1.1" 200 -
2025-03-13 16:31:59,752 INFO: BEGIN (implicit)
2025-03-13 16:31:59,754 INFO: BEGIN (implicit)
2025-03-13 16:31:59,756 INFO: Entering list_tasks_json route...
2025-03-13 16:31:59,757 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 16:31:59,767 INFO: [cached since 214s ago] {}
2025-03-13 16:31:59,759 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 16:31:59,758 INFO: 127.0.0.1 - - [13/Mar/2025 16:31:59] "POST /socket.io/?EIO=4&transport=polling&t=ibvyd0mm&sid=IEt6xfchg5X0E3TDAAAE HTTP/1.1" 200 -
2025-03-13 16:31:59,766 INFO: BEGIN (implicit)
2025-03-13 16:31:59,766 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 16:31:59,768 INFO: 127.0.0.1 - - [13/Mar/2025 16:31:59] "GET /socket.io/?EIO=4&transport=polling&t=ibvye4na&sid=IEt6xfchg5X0E3TDAAAE HTTP/1.1" 200 -
2025-03-13 16:31:59,768 INFO: [cached since 214s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 16:31:59,769 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 16:31:59,778 INFO: [cached since 214s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 16:31:59,771 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 16:31:59,776 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:31:59,795 INFO: [cached since 214s ago] {'param_1': 1}
2025-03-13 16:31:59,795 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 16:31:59,795 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 16:31:59,786 INFO: ROLLBACK
2025-03-13 16:31:59,796 INFO: BEGIN (implicit)
2025-03-13 16:31:59,796 INFO: [cached since 214s ago] {}
2025-03-13 16:31:59,797 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 16:31:59,797 INFO: 127.0.0.1 - - [13/Mar/2025 16:31:59] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 16:31:59,797 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:31:59,798 INFO: [cached since 214s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 16:31:59,798 INFO: [cached since 214s ago] {'param_1': 2}
2025-03-13 16:31:59,800 INFO: ROLLBACK
2025-03-13 16:31:59,806 INFO: 127.0.0.1 - - [13/Mar/2025 16:31:59] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 16:31:59,811 INFO: BEGIN (implicit)
2025-03-13 16:31:59,812 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:31:59,812 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 16:31:59,813 INFO: [cached since 214s ago] {'param_1': 3}
2025-03-13 16:31:59,813 INFO: [cached since 214s ago] {'pk_1': 19}
2025-03-13 16:31:59,816 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 16:31:59,816 INFO: [cached since 214.1s ago] {}
2025-03-13 16:31:59,818 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:31:59,818 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 16:31:59,818 INFO: [cached since 214s ago] {'param_1': 19}
2025-03-13 16:31:59,818 INFO: [cached since 214.1s ago] {'param_1': 4}
2025-03-13 16:31:59,819 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:31:59,820 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:31:59,820 INFO: [cached since 214.1s ago] {'param_1': 5}
2025-03-13 16:31:59,820 INFO: [cached since 214.1s ago] {'param_1': 1}
2025-03-13 16:31:59,822 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:31:59,823 INFO: [cached since 214.1s ago] {'param_1': 2}
2025-03-13 16:31:59,825 INFO: ROLLBACK
2025-03-13 16:31:59,835 INFO: 127.0.0.1 - - [13/Mar/2025 16:31:59] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 16:31:59,837 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:31:59,839 INFO: [cached since 214.1s ago] {'param_1': 3}
2025-03-13 16:31:59,841 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:31:59,842 INFO: [cached since 214.1s ago] {'param_1': 4}
2025-03-13 16:31:59,845 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:31:59,845 INFO: [cached since 214.1s ago] {'param_1': 5}
2025-03-13 16:31:59,848 INFO: ROLLBACK
2025-03-13 16:31:59,848 INFO: 127.0.0.1 - - [13/Mar/2025 16:31:59] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 16:31:59,999 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 16:32:00,000 INFO: [cached since 214.1s ago] {}
2025-03-13 16:32:00,002 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 16:32:00,002 INFO: [cached since 214.1s ago] {}
2025-03-13 16:32:00,004 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 16:32:00,004 INFO: [cached since 214.1s ago] {}
2025-03-13 16:32:00,016 INFO: ROLLBACK
2025-03-13 16:32:00,017 INFO: 127.0.0.1 - - [13/Mar/2025 16:32:00] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 16:32:02,466 INFO: Fetching task details for Task ID 475.
2025-03-13 16:32:02,467 INFO: Fetching task with ID 475.
2025-03-13 16:32:02,467 INFO: BEGIN (implicit)
2025-03-13 16:32:02,468 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 16:32:02,468 INFO: [cached since 213.9s ago] {'pk_1': 475}
2025-03-13 16:32:02,472 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x109d5f2f0>, 'epic_priority': None, 'project_id': 6, 'id': 475, 'is_archived': False, 'contributor_id': 5, 'name': 'Change absolute URL calls to being relative so it will work when going live', 'completed': False, 'estimate_type': 'story_points', 'sort_order': 1, 'story_points': 0, 'completed_date': None, 'description': None, 'status': 'Not Started', 'time_estimate': None, 'parent_id': None, 'created_at': datetime.datetime(2025, 3, 9, 10, 0, 26, 722609), 'task_type': 'User Story', 'updated_at': datetime.datetime(2025, 3, 9, 21, 43, 6, 94748), 'priority': None}
2025-03-13 16:32:02,474 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 16:32:02,475 INFO: [cached since 213.9s ago] {'pk_1': 6}
2025-03-13 16:32:02,476 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-13 16:32:02,477 INFO: [cached since 213.9s ago] {'pk_1': 5}
2025-03-13 16:32:02,478 INFO: Task ID 475 fetched with parent ID: None
2025-03-13 16:32:02,478 INFO: Task with ID 475 fetched successfully.
2025-03-13 16:32:02,478 DEBUG: Fetched Task Data: {'id': 475, 'name': 'Change absolute URL calls to being relative so it will work when going live', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'estimate_type': 'story_points', 'estimate': 0, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-03-09T10:00:26.722609', 'updated_at': '2025-03-09T21:43:06.094748', 'contributor_name': 'Fredrik Cederborg', 'parent': None}
2025-03-13 16:32:02,479 INFO: Task details fetched successfully for Task ID 475.
2025-03-13 16:32:02,479 INFO: ROLLBACK
2025-03-13 16:32:02,480 INFO: 127.0.0.1 - - [13/Mar/2025 16:32:02] "GET /api/tasks/475 HTTP/1.1" 200 -
2025-03-13 16:32:02,673 INFO: 127.0.0.1 - - [13/Mar/2025 16:32:02] "OPTIONS /tasks/available_tasks?task_type=User%20Story&exclude_task_id=475&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 16:32:02,674 INFO: BEGIN (implicit)
2025-03-13 16:32:02,675 INFO: 127.0.0.1 - - [13/Mar/2025 16:32:02] "OPTIONS /tasks/available_tasks?task_type=User%20Story&exclude_task_id=475&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 16:32:02,675 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 16:32:02,676 INFO: Entering available_tasks route...
2025-03-13 16:32:02,676 INFO: [cached since 216.9s ago] {'pk_1': 6}
2025-03-13 16:32:02,677 DEBUG: Query parameters: task_type=User Story, exclude_task_id=475, search_term=, project_id=None, limit=30, page=1
2025-03-13 16:32:02,677 INFO: BEGIN (implicit)
2025-03-13 16:32:02,678 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 16:32:02,679 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 16:32:02,679 INFO: [cached since 214.1s ago] {'pk_1': 475}
2025-03-13 16:32:02,679 INFO: [cached since 216.9s ago] {}
2025-03-13 16:32:02,681 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 16:32:02,682 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 475, 'task_type': ['User Story']}
2025-03-13 16:32:02,682 INFO: [cached since 216.9s ago] {'param_1': 6}
2025-03-13 16:32:02,683 INFO: Validating hierarchy for Task N/A
2025-03-13 16:32:02,683 INFO: Determining valid parent types for task_type: User Story
2025-03-13 16:32:02,684 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 475, 'task_type': ['Epic']}
2025-03-13 16:32:02,685 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:32:02,690 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-13 16:32:02,691 INFO: [cached since 216.9s ago] {'param_1': 1}
2025-03-13 16:32:02,693 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-13 16:32:02,693 INFO: [generated in 0.00035s] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-13 16:32:02,694 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:32:02,695 DEBUG: Tasks returned: [{'id': 430, 'name': 'No Epic', 'task_type': 'Epic', 'is_parent': False}, {'id': 393, 'name': 'List of ideas for new features, parameters to add', 'task_type': 'Epic', 'is_parent': False}, {'id': 327, 'name': '[UNIQUE feature] -\xa0Epic - AI-Powered PBI Refinement System', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 456, 'name': 'Search in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okrÂ´s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notification system', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 459, 'name': '[RESEARCH] - Step 1: Mapping out what each file does', 'task_type': 'Epic', 'is_parent': False}, {'id': 432, 'name': 'Roadmap view', 'task_type': 'Epic', 'is_parent': False}, {'id': 392, 'name': 'UI / UX Improvements', 'task_type': 'Epic', 'is_parent': False}, {'id': 465, 'name': 'Building from Scratch vs.\xa0Replicating Each Feature', 'task_type': 'Epic', 'is_parent': False}, {'id': 424, 'name': '[ISSUES] - Current issues/bugs', 'task_type': 'Epic', 'is_parent': False}, {'id': 460, 'name': '[PLANNING] - Step 2: Architecture & Migration Planning', 'task_type': 'Epic', 'is_parent': False}, {'id': 462, 'name': '[MIGRATION] - high-level roadmap Step 1 - 7', 'task_type': 'Epic', 'is_parent': False}]
2025-03-13 16:32:02,695 INFO: [cached since 216.9s ago] {'param_1': 2}
2025-03-13 16:32:02,697 INFO: ROLLBACK
2025-03-13 16:32:02,699 INFO: 127.0.0.1 - - [13/Mar/2025 16:32:02] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=475&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 16:32:02,700 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:32:02,701 INFO: Entering available_tasks route...
2025-03-13 16:32:02,701 INFO: [cached since 216.9s ago] {'param_1': 3}
2025-03-13 16:32:02,701 DEBUG: Query parameters: task_type=User Story, exclude_task_id=475, search_term=, project_id=None, limit=30, page=1
2025-03-13 16:32:02,702 INFO: BEGIN (implicit)
2025-03-13 16:32:02,703 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 16:32:02,703 INFO: [cached since 214.2s ago] {'pk_1': 475}
2025-03-13 16:32:02,703 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:32:02,703 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 475, 'task_type': ['User Story']}
2025-03-13 16:32:02,703 INFO: [cached since 216.9s ago] {'param_1': 4}
2025-03-13 16:32:02,703 INFO: Validating hierarchy for Task N/A
2025-03-13 16:32:02,704 INFO: Determining valid parent types for task_type: User Story
2025-03-13 16:32:02,704 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 475, 'task_type': ['Epic']}
2025-03-13 16:32:02,706 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-13 16:32:02,707 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:32:02,708 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-13 16:32:02,708 INFO: [cached since 216.9s ago] {'param_1': 5}
2025-03-13 16:32:02,708 INFO: [cached since 0.01542s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-13 16:32:02,709 INFO: ROLLBACK
2025-03-13 16:32:02,711 DEBUG: Tasks returned: [{'id': 430, 'name': 'No Epic', 'task_type': 'Epic', 'is_parent': False}, {'id': 393, 'name': 'List of ideas for new features, parameters to add', 'task_type': 'Epic', 'is_parent': False}, {'id': 327, 'name': '[UNIQUE feature] -\xa0Epic - AI-Powered PBI Refinement System', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 456, 'name': 'Search in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okrÂ´s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notification system', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 459, 'name': '[RESEARCH] - Step 1: Mapping out what each file does', 'task_type': 'Epic', 'is_parent': False}, {'id': 432, 'name': 'Roadmap view', 'task_type': 'Epic', 'is_parent': False}, {'id': 392, 'name': 'UI / UX Improvements', 'task_type': 'Epic', 'is_parent': False}, {'id': 465, 'name': 'Building from Scratch vs.\xa0Replicating Each Feature', 'task_type': 'Epic', 'is_parent': False}, {'id': 424, 'name': '[ISSUES] - Current issues/bugs', 'task_type': 'Epic', 'is_parent': False}, {'id': 460, 'name': '[PLANNING] - Step 2: Architecture & Migration Planning', 'task_type': 'Epic', 'is_parent': False}, {'id': 462, 'name': '[MIGRATION] - high-level roadmap Step 1 - 7', 'task_type': 'Epic', 'is_parent': False}]
2025-03-13 16:32:02,711 INFO: ROLLBACK
2025-03-13 16:32:02,711 INFO: 127.0.0.1 - - [13/Mar/2025 16:32:02] "GET /api/projects/6/contributors/manage HTTP/1.1" 200 -
2025-03-13 16:32:02,712 INFO: 127.0.0.1 - - [13/Mar/2025 16:32:02] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=475&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 16:32:02,716 INFO: BEGIN (implicit)
2025-03-13 16:32:02,717 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 16:32:02,717 INFO: [cached since 216.9s ago] {'pk_1': 6}
2025-03-13 16:32:02,719 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 16:32:02,719 INFO: [cached since 217s ago] {}
2025-03-13 16:32:02,720 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 16:32:02,720 INFO: [cached since 216.9s ago] {'param_1': 6}
2025-03-13 16:32:02,721 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:32:02,721 INFO: [cached since 217s ago] {'param_1': 1}
2025-03-13 16:32:02,722 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:32:02,722 INFO: [cached since 217s ago] {'param_1': 2}
2025-03-13 16:32:02,723 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:32:02,723 INFO: [cached since 217s ago] {'param_1': 3}
2025-03-13 16:32:02,724 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:32:02,724 INFO: [cached since 217s ago] {'param_1': 4}
2025-03-13 16:32:02,724 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 16:32:02,725 INFO: [cached since 217s ago] {'param_1': 5}
2025-03-13 16:32:02,725 INFO: ROLLBACK
2025-03-13 16:32:02,726 INFO: 127.0.0.1 - - [13/Mar/2025 16:32:02] "GET /api/projects/6/contributors/manage HTTP/1.1" 200 -
2025-03-13 16:43:05,494 INFO: 127.0.0.1 - - [13/Mar/2025 16:43:05] "GET /socket.io/?EIO=4&transport=websocket&sid=IEt6xfchg5X0E3TDAAAE HTTP/1.1" 200 -
2025-03-13 16:43:06,835 INFO: 127.0.0.1 - - [13/Mar/2025 16:43:06] "GET /socket.io/?EIO=4&transport=polling&t=iq6o8muc HTTP/1.1" 200 -
2025-03-13 16:43:06,842 INFO: 127.0.0.1 - - [13/Mar/2025 16:43:06] "POST /socket.io/?EIO=4&transport=polling&t=iq6olmxi&sid=Zq_xEwitmmAWBg8TAAAG HTTP/1.1" 200 -
2025-03-13 16:43:06,844 INFO: 127.0.0.1 - - [13/Mar/2025 16:43:06] "GET /socket.io/?EIO=4&transport=polling&t=iq6omzhm&sid=Zq_xEwitmmAWBg8TAAAG HTTP/1.1" 200 -
2025-03-13 17:04:36,935 INFO: 127.0.0.1 - - [13/Mar/2025 17:04:36] "GET /socket.io/?EIO=4&transport=websocket&sid=Zq_xEwitmmAWBg8TAAAG HTTP/1.1" 200 -
2025-03-13 17:04:37,708 INFO: 127.0.0.1 - - [13/Mar/2025 17:04:37] "GET /socket.io/?EIO=4&transport=polling&t=jhup0znu HTTP/1.1" 200 -
2025-03-13 17:04:37,882 INFO: BEGIN (implicit)
2025-03-13 17:04:37,903 INFO: Entering list_tasks_json route...
2025-03-13 17:04:37,906 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 17:04:37,904 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 17:04:37,912 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 17:04:37,913 INFO: [cached since 1598s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 17:04:37,915 INFO: 127.0.0.1 - - [13/Mar/2025 17:04:37] "POST /socket.io/?EIO=4&transport=polling&t=jhuqzbvv&sid=i8kYfv7CEQbNbe_rAAAI HTTP/1.1" 200 -
2025-03-13 17:04:37,906 INFO: BEGIN (implicit)
2025-03-13 17:04:37,934 INFO: BEGIN (implicit)
2025-03-13 17:04:37,936 INFO: 127.0.0.1 - - [13/Mar/2025 17:04:37] "GET /socket.io/?EIO=4&transport=polling&t=jhur1fkg&sid=i8kYfv7CEQbNbe_rAAAI HTTP/1.1" 200 -
2025-03-13 17:04:38,007 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 17:04:38,011 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 17:04:38,012 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:04:38,018 INFO: [cached since 1598s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 17:04:38,020 INFO: BEGIN (implicit)
2025-03-13 17:04:38,020 INFO: [cached since 1598s ago] {}
2025-03-13 17:04:38,021 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 17:04:38,023 INFO: [cached since 1598s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 17:04:38,095 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:04:38,096 INFO: [cached since 1598s ago] {'param_1': 1}
2025-03-13 17:04:38,098 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 17:04:38,155 INFO: [cached since 1598s ago] {}
2025-03-13 17:04:38,156 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:04:38,157 INFO: ROLLBACK
2025-03-13 17:04:38,157 INFO: [cached since 1598s ago] {'param_1': 2}
2025-03-13 17:04:38,178 INFO: ROLLBACK
2025-03-13 17:04:38,201 INFO: 127.0.0.1 - - [13/Mar/2025 17:04:38] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 17:04:38,202 INFO: 127.0.0.1 - - [13/Mar/2025 17:04:38] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 17:04:38,216 INFO: BEGIN (implicit)
2025-03-13 17:04:38,217 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:04:38,217 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 17:04:38,217 INFO: [cached since 1598s ago] {'param_1': 3}
2025-03-13 17:04:38,217 INFO: [cached since 1598s ago] {'pk_1': 19}
2025-03-13 17:04:38,220 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:04:38,221 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:04:38,222 INFO: [cached since 1598s ago] {}
2025-03-13 17:04:38,222 INFO: [cached since 1598s ago] {'param_1': 4}
2025-03-13 17:04:38,226 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 17:04:38,226 INFO: [cached since 1598s ago] {'param_1': 19}
2025-03-13 17:04:38,229 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:04:38,230 INFO: [cached since 1598s ago] {'param_1': 5}
2025-03-13 17:04:38,233 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:04:38,234 INFO: [cached since 1598s ago] {'param_1': 1}
2025-03-13 17:04:38,234 INFO: ROLLBACK
2025-03-13 17:04:38,235 INFO: 127.0.0.1 - - [13/Mar/2025 17:04:38] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 17:04:38,235 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:04:38,236 INFO: [cached since 1598s ago] {'param_1': 2}
2025-03-13 17:04:38,247 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:04:38,248 INFO: [cached since 1598s ago] {'param_1': 3}
2025-03-13 17:04:38,250 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:04:38,251 INFO: [cached since 1598s ago] {'param_1': 4}
2025-03-13 17:04:38,294 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:04:38,294 INFO: [cached since 1598s ago] {'param_1': 5}
2025-03-13 17:04:38,297 INFO: ROLLBACK
2025-03-13 17:04:38,298 INFO: 127.0.0.1 - - [13/Mar/2025 17:04:38] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 17:04:38,421 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 17:04:38,421 INFO: [cached since 1598s ago] {}
2025-03-13 17:04:38,423 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 17:04:38,423 INFO: [cached since 1598s ago] {}
2025-03-13 17:04:38,424 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 17:04:38,424 INFO: [cached since 1598s ago] {}
2025-03-13 17:04:38,428 INFO: ROLLBACK
2025-03-13 17:04:38,429 INFO: 127.0.0.1 - - [13/Mar/2025 17:04:38] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 17:04:40,322 INFO: Fetching task details for Task ID 430.
2025-03-13 17:04:40,322 INFO: Fetching task with ID 430.
2025-03-13 17:04:40,323 INFO: BEGIN (implicit)
2025-03-13 17:04:40,324 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 17:04:40,325 INFO: [cached since 1598s ago] {'pk_1': 430}
2025-03-13 17:04:40,328 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x109e2e6f0>, 'epic_priority': None, 'project_id': 7, 'id': 430, 'is_archived': False, 'contributor_id': 5, 'name': 'No Epic', 'completed': False, 'estimate_type': 'story_points', 'sort_order': 0, 'story_points': 0, 'completed_date': None, 'description': '<p>`console.log(\'Hello, World!\')``console.log(\'Hello, World!\')`**bold text**&gt; This is a quoteTest contentTest contentCurrently we have Tiptap editor installed, but after doing some research it turns out it can get really expensive when scaling up if we want to use the extensions that we need.<br><br>HereÂ´s a list of must have features.</p><ul><li><p>Drag handle</p></li><li><p>Toggles</p></li><li><p>Drop cursor</p></li><li><p>Code block</p></li><li><p></p></li></ul><p></p><p>What editor is notions editor built upon?</p><p>ChatGPT said:</p><p>Notion\'s editor is built upon <strong>ProseMirror</strong>, which is a highly extensible and customizable framework for building rich-text editors.</p><h3><strong>How Notion Uses ProseMirror</strong></h3><ol><li><p><strong>Block-Based Editing</strong> - Notion\'s document model is built around a block-based structure, which ProseMirror supports well.</p></li><li><p><strong>Collaborative Editing</strong> - Notion enhances ProseMirror with <strong>Operational Transforms (OT)</strong> or <strong>Conflict-Free Replicated Data Types (CRDTs)</strong> for real-time multi-user collaboration.</p></li><li><p><strong>Custom Extensions</strong> - Notion extends ProseMirror to support embedded content, database-like properties, and advanced block manipulation.</p></li><li><p><strong>Rich Formatting</strong> - ProseMirror provides the foundation for text styles, lists, code blocks, and interactive widgets.</p></li></ol><h3><strong>Alternatives to ProseMirror</strong></h3><p>Notion could have used:</p><ul><li><p><strong>Tiptap</strong> (a framework built on ProseMirror, similar to what you\'re using)</p></li><li><p><strong>Slate.js</strong> (another powerful rich-text editor framework)</p></li><li><p><strong>Lexical</strong> (Meta/Facebook\'s modern take on rich-text editing)</p></li></ul><p>Since you\'re working with <strong>Tiptap (which is based on ProseMirror)</strong>, you are already using something similar to Notionâs approach! ð</p><p>You said:</p><p>Is Lexical free?</p><p>ChatGPT said:</p><p>Yes, <strong>Lexical</strong> is completely <strong>free</strong> and <strong>open-source</strong>! ð</p><h3><strong>License &amp; Cost</strong></h3><ul><li><p><strong>Lexical</strong> is released under the <strong>MIT license</strong>, which means you can use, modify, and distribute it freely for both <strong>personal</strong> and <strong>commercial</strong> projects <strong>without restrictions</strong>.</p></li><li><p>You donât need to pay for it, and it has no hidden fees or licensing issues.</p></li></ul><h3><strong>Where to Get Lexical?</strong></h3><ul><li><p><strong>GitHub</strong>: <a target="_blank" rel="noopener noreferrer" href="https://github.com/facebook/lexical">https://github.com/facebook/lexical</a></p></li><li><p><strong>Official Website</strong>: <a target="_blank" rel="noopener noreferrer" href="https://lexical.dev/">https://lexical.dev/</a></p></li></ul><h3><strong>Why Use Lexical?</strong></h3><ul><li><p><strong>Ultra-lightweight &amp; fast</strong> â¡</p></li><li><p><strong>Better performance than ProseMirror or Slate.js</strong></p></li><li><p><strong>Modular and Extensible</strong></p></li><li><p><strong>Supports collaborative editing</strong></p></li><li><p><strong>Backed by Meta (Facebook)</strong></p></li></ul><p>If you\'re looking for a <strong>modern</strong>, <strong>efficient</strong>, and <strong>free</strong> alternative to ProseMirror/Tiptap, <strong>Lexical is a great choice!</strong> ð</p><p>You said:</p><p>If I understand it correctly TipTap can get quite expensive when scaling</p><p>ChatGPT said:</p><p>Yes, youâre right! <strong>Tiptap can become expensive at scale</strong>, depending on your use case. Hereâs why:</p><h3><strong>1ï¸â£ The Core Tiptap Editor is Free</strong></h3><ul><li><p><strong>Tiptap itself is open-source</strong> and free to use under the MIT license.</p></li><li><p>Itâs built on <strong>ProseMirror</strong>, which is also open-source.</p></li><li><p>You can self-host and use it without paying a cent.</p></li></ul><h3><strong>2ï¸â£ The Cost Comes from Tiptap Collaboration &amp; Cloud Services</strong></h3><p>Tiptap offers <strong>paid services</strong> that can get expensive as your usage scales:</p><ol><li><p><strong>Tiptap Collaboration Server (Hocuspocus)</strong></p><ul><li><p>Used for <strong>real-time collaboration</strong> (like Google Docs-style editing).</p></li><li><p>Free for self-hosting, <strong>but</strong>:</p><ul><li><p>You need to manage the infrastructure yourself.</p></li><li><p>If you use their hosted version, costs scale with users.</p></li></ul></li></ul></li><li><p><strong>Tiptap AI (Paid)</strong></p><ul><li><p>If you integrate AI-powered features (like text completion, summarization), youâll pay usage-based fees.</p></li></ul></li><li><p><strong>Tiptap Cloud (Paid)</strong></p><ul><li><p>Managed hosting for Tiptap-related services.</p></li><li><p>Pricing varies based on API calls and storage.</p></li></ul></li></ol><h3><strong>3ï¸â£ Hidden Scaling Costs</strong></h3><ul><li><p><strong>Hosting a ProseMirror-based editor like Tiptap requires a powerful backend</strong> for real-time editing &amp; syncing.</p></li><li><p><strong>If you handle large concurrent users, database read/writes &amp; WebSocket connections increase infrastructure costs.</strong></p></li><li><p><strong>Custom extensions</strong> (if you develop them in-house) require engineering time &amp; maintenance.</p></li></ul><h3><strong>Alternatives That May Scale Better</strong></h3><ul><li><p><strong>Lexical (by Meta)</strong> ð â Lighter &amp; built for performance.</p></li><li><p><strong>Slate.js</strong> ð â Fully customizable but less feature-rich.</p></li><li><p><strong>Quill.js</strong> ð â Great for simple use cases.</p></li></ul><h3><strong>Final Verdict</strong></h3><p>If youâre just using <strong>basic rich text editing</strong>, Tiptap is free and great. ð<br>But if you need <strong>real-time collaboration or AI features</strong>, it can get <strong>expensive</strong> as you scale.</p><p>Would you like recommendations on how to <strong>reduce scaling costs</strong> with Tiptap?</p><p>You said:</p><p>Yes</p><p>ChatGPT said:</p><h3><strong>How to Reduce Scaling Costs with Tiptap ð</strong></h3><p>If you\'re using Tiptap (or considering it) and want to <strong>keep costs low while scaling</strong>, hereâs how you can do it.</p><hr><h2><strong>1ï¸â£ Self-Host Instead of Using Tiptap Cloud</strong></h2><p>Tiptap provides <strong>Tiptap Cloud</strong> as a hosted service, but this can get expensive at scale. Instead:</p><ul><li><p><strong>Self-host</strong> the key components instead of paying for managed services.</p></li><li><p>Youâll need to set up:</p><ul><li><p><strong>Tiptap Core</strong> (Free, MIT license)</p></li><li><p><strong>ProseMirror</strong> (Tiptap is built on it, also free)</p></li><li><p><strong>Hocuspocus (Collaboration Server)</strong> â Instead of paying Tiptap for real-time editing, host it yourself on <strong>a cheap VPS like DigitalOcean or AWS Lightsail</strong>.</p></li></ul></li></ul><p>ð <strong>Guide</strong>: Self-hosting Hocuspocus</p><p><strong>ð° Potential Savings</strong>: No per-user fees, just hosting costs.</p><hr><h2><strong>2ï¸â£ Optimize WebSocket &amp; Real-Time Editing Costs</strong></h2><p>Real-time collaboration (like Google Docs-style editing) <strong>increases server load</strong> due to WebSocket connections.</p><ul><li><p><strong>Host Hocuspocus on a scalable infrastructure</strong> (Kubernetes, AWS ECS).</p></li><li><p><strong>Use Redis or PostgreSQL for persistence</strong> instead of in-memory storage.</p></li><li><p><strong>Limit real-time sync to active users only</strong> (disconnect inactive users).</p></li></ul><p><strong>ð° Potential Savings</strong>: Lower WebSocket usage = less server load.</p><hr><h2><strong>3ï¸â£ Avoid Tiptap AI (Use Open-Source AI)</strong></h2><p>Tiptap offers <strong>AI-powered suggestions, summarization, and completions</strong>, but they charge based on API usage. Instead:</p><ul><li><p><strong>Use open-source LLMs like GPT-4-All, Mistral, or Ollama</strong> instead of Tiptap AI.</p></li><li><p><strong>Host AI models yourself</strong> with Hugging Face models or OpenAI API proxies.</p></li></ul><p><strong>ð° Potential Savings</strong>: No per-token AI fees.</p><hr><h2><strong>4ï¸â£ Optimize Frontend Performance</strong></h2><p>Tiptap loads many dependencies, which <strong>increase bundle size</strong>. Reduce costs by:</p><ul><li><p><strong>Lazy-loading extensions</strong> (only load features users need).</p></li><li><p><strong>Tree-shaking unused dependencies</strong>.</p></li><li><p><strong>Using a CDN</strong> to serve assets (reduces direct server load).</p></li></ul><p><strong>ð° Potential Savings</strong>: Lower hosting and bandwidth costs.</p><hr><h2><strong>5ï¸â£ Alternative Open-Source Editors (If You Outgrow Tiptap)</strong></h2><p>If Tiptap costs <strong>too much</strong>, you can consider:</p><ul><li><p><strong>Lexical (by Meta)</strong> â Free, ultra-lightweight, great for scaling.</p></li><li><p><strong>Slate.js</strong> â Flexible and customizable.</p></li><li><p><strong>Quill.js</strong> â Good for simpler use cases.</p></li></ul><hr><h3><strong>ð Final Takeaway</strong></h3><p>If youâre using <strong>Tiptap for rich text only</strong>, itâs free.<br>But if you <strong>need real-time collaboration, AI, or cloud services</strong>, follow these tips to <strong>reduce costs</strong> and <strong>scale efficiently</strong>.</p><p>Would you like help setting up <strong>self-hosted Hocuspocus</strong> or <strong>AI alternatives</strong>? ð</p>', 'status': 'Not Started', 'time_estimate': None, 'parent_id': None, 'created_at': datetime.datetime(2025, 3, 5, 17, 10, 57, 543053), 'task_type': 'Epic', 'updated_at': datetime.datetime(2025, 3, 13, 12, 46, 58, 641501), 'priority': None}
2025-03-13 17:04:40,331 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 17:04:40,331 INFO: [cached since 1598s ago] {'pk_1': 7}
2025-03-13 17:04:40,333 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-13 17:04:40,333 INFO: [cached since 1598s ago] {'pk_1': 5}
2025-03-13 17:04:40,343 INFO: Task ID 430 fetched with parent ID: None
2025-03-13 17:04:40,344 INFO: Task with ID 430 fetched successfully.
2025-03-13 17:04:40,344 DEBUG: Fetched Task Data: {'id': 430, 'name': 'No Epic', 'description': '<p>`console.log(\'Hello, World!\')``console.log(\'Hello, World!\')`**bold text**&gt; This is a quoteTest contentTest contentCurrently we have Tiptap editor installed, but after doing some research it turns out it can get really expensive when scaling up if we want to use the extensions that we need.<br><br>HereÂ´s a list of must have features.</p><ul><li><p>Drag handle</p></li><li><p>Toggles</p></li><li><p>Drop cursor</p></li><li><p>Code block</p></li><li><p></p></li></ul><p></p><p>What editor is notions editor built upon?</p><p>ChatGPT said:</p><p>Notion\'s editor is built upon <strong>ProseMirror</strong>, which is a highly extensible and customizable framework for building rich-text editors.</p><h3><strong>How Notion Uses ProseMirror</strong></h3><ol><li><p><strong>Block-Based Editing</strong> - Notion\'s document model is built around a block-based structure, which ProseMirror supports well.</p></li><li><p><strong>Collaborative Editing</strong> - Notion enhances ProseMirror with <strong>Operational Transforms (OT)</strong> or <strong>Conflict-Free Replicated Data Types (CRDTs)</strong> for real-time multi-user collaboration.</p></li><li><p><strong>Custom Extensions</strong> - Notion extends ProseMirror to support embedded content, database-like properties, and advanced block manipulation.</p></li><li><p><strong>Rich Formatting</strong> - ProseMirror provides the foundation for text styles, lists, code blocks, and interactive widgets.</p></li></ol><h3><strong>Alternatives to ProseMirror</strong></h3><p>Notion could have used:</p><ul><li><p><strong>Tiptap</strong> (a framework built on ProseMirror, similar to what you\'re using)</p></li><li><p><strong>Slate.js</strong> (another powerful rich-text editor framework)</p></li><li><p><strong>Lexical</strong> (Meta/Facebook\'s modern take on rich-text editing)</p></li></ul><p>Since you\'re working with <strong>Tiptap (which is based on ProseMirror)</strong>, you are already using something similar to Notionâs approach! ð</p><p>You said:</p><p>Is Lexical free?</p><p>ChatGPT said:</p><p>Yes, <strong>Lexical</strong> is completely <strong>free</strong> and <strong>open-source</strong>! ð</p><h3><strong>License &amp; Cost</strong></h3><ul><li><p><strong>Lexical</strong> is released under the <strong>MIT license</strong>, which means you can use, modify, and distribute it freely for both <strong>personal</strong> and <strong>commercial</strong> projects <strong>without restrictions</strong>.</p></li><li><p>You donât need to pay for it, and it has no hidden fees or licensing issues.</p></li></ul><h3><strong>Where to Get Lexical?</strong></h3><ul><li><p><strong>GitHub</strong>: <a target="_blank" rel="noopener noreferrer" href="https://github.com/facebook/lexical">https://github.com/facebook/lexical</a></p></li><li><p><strong>Official Website</strong>: <a target="_blank" rel="noopener noreferrer" href="https://lexical.dev/">https://lexical.dev/</a></p></li></ul><h3><strong>Why Use Lexical?</strong></h3><ul><li><p><strong>Ultra-lightweight &amp; fast</strong> â¡</p></li><li><p><strong>Better performance than ProseMirror or Slate.js</strong></p></li><li><p><strong>Modular and Extensible</strong></p></li><li><p><strong>Supports collaborative editing</strong></p></li><li><p><strong>Backed by Meta (Facebook)</strong></p></li></ul><p>If you\'re looking for a <strong>modern</strong>, <strong>efficient</strong>, and <strong>free</strong> alternative to ProseMirror/Tiptap, <strong>Lexical is a great choice!</strong> ð</p><p>You said:</p><p>If I understand it correctly TipTap can get quite expensive when scaling</p><p>ChatGPT said:</p><p>Yes, youâre right! <strong>Tiptap can become expensive at scale</strong>, depending on your use case. Hereâs why:</p><h3><strong>1ï¸â£ The Core Tiptap Editor is Free</strong></h3><ul><li><p><strong>Tiptap itself is open-source</strong> and free to use under the MIT license.</p></li><li><p>Itâs built on <strong>ProseMirror</strong>, which is also open-source.</p></li><li><p>You can self-host and use it without paying a cent.</p></li></ul><h3><strong>2ï¸â£ The Cost Comes from Tiptap Collaboration &amp; Cloud Services</strong></h3><p>Tiptap offers <strong>paid services</strong> that can get expensive as your usage scales:</p><ol><li><p><strong>Tiptap Collaboration Server (Hocuspocus)</strong></p><ul><li><p>Used for <strong>real-time collaboration</strong> (like Google Docs-style editing).</p></li><li><p>Free for self-hosting, <strong>but</strong>:</p><ul><li><p>You need to manage the infrastructure yourself.</p></li><li><p>If you use their hosted version, costs scale with users.</p></li></ul></li></ul></li><li><p><strong>Tiptap AI (Paid)</strong></p><ul><li><p>If you integrate AI-powered features (like text completion, summarization), youâll pay usage-based fees.</p></li></ul></li><li><p><strong>Tiptap Cloud (Paid)</strong></p><ul><li><p>Managed hosting for Tiptap-related services.</p></li><li><p>Pricing varies based on API calls and storage.</p></li></ul></li></ol><h3><strong>3ï¸â£ Hidden Scaling Costs</strong></h3><ul><li><p><strong>Hosting a ProseMirror-based editor like Tiptap requires a powerful backend</strong> for real-time editing &amp; syncing.</p></li><li><p><strong>If you handle large concurrent users, database read/writes &amp; WebSocket connections increase infrastructure costs.</strong></p></li><li><p><strong>Custom extensions</strong> (if you develop them in-house) require engineering time &amp; maintenance.</p></li></ul><h3><strong>Alternatives That May Scale Better</strong></h3><ul><li><p><strong>Lexical (by Meta)</strong> ð â Lighter &amp; built for performance.</p></li><li><p><strong>Slate.js</strong> ð â Fully customizable but less feature-rich.</p></li><li><p><strong>Quill.js</strong> ð â Great for simple use cases.</p></li></ul><h3><strong>Final Verdict</strong></h3><p>If youâre just using <strong>basic rich text editing</strong>, Tiptap is free and great. ð<br>But if you need <strong>real-time collaboration or AI features</strong>, it can get <strong>expensive</strong> as you scale.</p><p>Would you like recommendations on how to <strong>reduce scaling costs</strong> with Tiptap?</p><p>You said:</p><p>Yes</p><p>ChatGPT said:</p><h3><strong>How to Reduce Scaling Costs with Tiptap ð</strong></h3><p>If you\'re using Tiptap (or considering it) and want to <strong>keep costs low while scaling</strong>, hereâs how you can do it.</p><hr><h2><strong>1ï¸â£ Self-Host Instead of Using Tiptap Cloud</strong></h2><p>Tiptap provides <strong>Tiptap Cloud</strong> as a hosted service, but this can get expensive at scale. Instead:</p><ul><li><p><strong>Self-host</strong> the key components instead of paying for managed services.</p></li><li><p>Youâll need to set up:</p><ul><li><p><strong>Tiptap Core</strong> (Free, MIT license)</p></li><li><p><strong>ProseMirror</strong> (Tiptap is built on it, also free)</p></li><li><p><strong>Hocuspocus (Collaboration Server)</strong> â Instead of paying Tiptap for real-time editing, host it yourself on <strong>a cheap VPS like DigitalOcean or AWS Lightsail</strong>.</p></li></ul></li></ul><p>ð <strong>Guide</strong>: Self-hosting Hocuspocus</p><p><strong>ð° Potential Savings</strong>: No per-user fees, just hosting costs.</p><hr><h2><strong>2ï¸â£ Optimize WebSocket &amp; Real-Time Editing Costs</strong></h2><p>Real-time collaboration (like Google Docs-style editing) <strong>increases server load</strong> due to WebSocket connections.</p><ul><li><p><strong>Host Hocuspocus on a scalable infrastructure</strong> (Kubernetes, AWS ECS).</p></li><li><p><strong>Use Redis or PostgreSQL for persistence</strong> instead of in-memory storage.</p></li><li><p><strong>Limit real-time sync to active users only</strong> (disconnect inactive users).</p></li></ul><p><strong>ð° Potential Savings</strong>: Lower WebSocket usage = less server load.</p><hr><h2><strong>3ï¸â£ Avoid Tiptap AI (Use Open-Source AI)</strong></h2><p>Tiptap offers <strong>AI-powered suggestions, summarization, and completions</strong>, but they charge based on API usage. Instead:</p><ul><li><p><strong>Use open-source LLMs like GPT-4-All, Mistral, or Ollama</strong> instead of Tiptap AI.</p></li><li><p><strong>Host AI models yourself</strong> with Hugging Face models or OpenAI API proxies.</p></li></ul><p><strong>ð° Potential Savings</strong>: No per-token AI fees.</p><hr><h2><strong>4ï¸â£ Optimize Frontend Performance</strong></h2><p>Tiptap loads many dependencies, which <strong>increase bundle size</strong>. Reduce costs by:</p><ul><li><p><strong>Lazy-loading extensions</strong> (only load features users need).</p></li><li><p><strong>Tree-shaking unused dependencies</strong>.</p></li><li><p><strong>Using a CDN</strong> to serve assets (reduces direct server load).</p></li></ul><p><strong>ð° Potential Savings</strong>: Lower hosting and bandwidth costs.</p><hr><h2><strong>5ï¸â£ Alternative Open-Source Editors (If You Outgrow Tiptap)</strong></h2><p>If Tiptap costs <strong>too much</strong>, you can consider:</p><ul><li><p><strong>Lexical (by Meta)</strong> â Free, ultra-lightweight, great for scaling.</p></li><li><p><strong>Slate.js</strong> â Flexible and customizable.</p></li><li><p><strong>Quill.js</strong> â Good for simpler use cases.</p></li></ul><hr><h3><strong>ð Final Takeaway</strong></h3><p>If youâre using <strong>Tiptap for rich text only</strong>, itâs free.<br>But if you <strong>need real-time collaboration, AI, or cloud services</strong>, follow these tips to <strong>reduce costs</strong> and <strong>scale efficiently</strong>.</p><p>Would you like help setting up <strong>self-hosted Hocuspocus</strong> or <strong>AI alternatives</strong>? ð</p>', 'task_type': 'Epic', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'estimate_type': 'story_points', 'estimate': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-03-05T17:10:57.543053', 'updated_at': '2025-03-13T12:46:58.641501', 'contributor_name': 'Fredrik Cederborg', 'parent': None}
2025-03-13 17:04:40,351 INFO: Task details fetched successfully for Task ID 430.
2025-03-13 17:04:40,352 INFO: ROLLBACK
2025-03-13 17:04:40,353 INFO: 127.0.0.1 - - [13/Mar/2025 17:04:40] "GET /api/tasks/430 HTTP/1.1" 200 -
2025-03-13 17:04:40,559 INFO: 127.0.0.1 - - [13/Mar/2025 17:04:40] "OPTIONS /tasks/available_tasks?task_type=Epic&exclude_task_id=430&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 17:04:40,561 INFO: 127.0.0.1 - - [13/Mar/2025 17:04:40] "OPTIONS /tasks/available_tasks?task_type=Epic&exclude_task_id=430&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 17:04:40,564 INFO: BEGIN (implicit)
2025-03-13 17:04:40,565 INFO: BEGIN (implicit)
2025-03-13 17:04:40,566 INFO: Entering available_tasks route...
2025-03-13 17:04:40,567 INFO: Entering available_tasks route...
2025-03-13 17:04:40,567 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 17:04:40,568 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 17:04:40,568 DEBUG: Query parameters: task_type=Epic, exclude_task_id=430, search_term=, project_id=None, limit=30, page=1
2025-03-13 17:04:40,568 DEBUG: Query parameters: task_type=Epic, exclude_task_id=430, search_term=, project_id=None, limit=30, page=1
2025-03-13 17:04:40,568 INFO: [cached since 1601s ago] {'pk_1': 7}
2025-03-13 17:04:40,569 INFO: [cached since 1601s ago] {'pk_1': 7}
2025-03-13 17:04:40,569 INFO: BEGIN (implicit)
2025-03-13 17:04:40,570 INFO: BEGIN (implicit)
2025-03-13 17:04:40,570 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 17:04:40,571 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 17:04:40,573 INFO: [cached since 1598s ago] {'pk_1': 430}
2025-03-13 17:04:40,572 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:04:40,573 INFO: [cached since 1601s ago] {}
2025-03-13 17:04:40,573 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:04:40,574 INFO: [cached since 1601s ago] {}
2025-03-13 17:04:40,571 INFO: [cached since 1598s ago] {'pk_1': 430}
2025-03-13 17:04:40,576 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 17:04:40,576 INFO: [cached since 1601s ago] {'param_1': 7}
2025-03-13 17:04:40,576 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 430, 'task_type': ['Epic']}
2025-03-13 17:04:40,577 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 430, 'task_type': ['Epic']}
2025-03-13 17:04:40,577 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 17:04:40,577 INFO: [cached since 1601s ago] {'param_1': 7}
2025-03-13 17:04:40,577 INFO: Validating hierarchy for Task N/A
2025-03-13 17:04:40,577 INFO: Validating hierarchy for Task N/A
2025-03-13 17:04:40,578 INFO: Determining valid parent types for task_type: Epic
2025-03-13 17:04:40,578 INFO: Determining valid parent types for task_type: Epic
2025-03-13 17:04:40,578 INFO: No valid parents found for task_type: Epic
2025-03-13 17:04:40,578 INFO: No valid parents found for task_type: Epic
2025-03-13 17:04:40,578 INFO: ROLLBACK
2025-03-13 17:04:40,579 INFO: ROLLBACK
2025-03-13 17:04:40,579 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:04:40,580 INFO: [cached since 1601s ago] {'param_1': 1}
2025-03-13 17:04:40,580 INFO: 127.0.0.1 - - [13/Mar/2025 17:04:40] "GET /tasks/available_tasks?task_type=Epic&exclude_task_id=430&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 17:04:40,580 INFO: 127.0.0.1 - - [13/Mar/2025 17:04:40] "GET /tasks/available_tasks?task_type=Epic&exclude_task_id=430&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 17:04:40,585 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:04:40,586 INFO: [cached since 1601s ago] {'param_1': 2}
2025-03-13 17:04:40,587 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:04:40,588 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:04:40,588 INFO: [cached since 1601s ago] {'param_1': 1}
2025-03-13 17:04:40,588 INFO: [cached since 1601s ago] {'param_1': 3}
2025-03-13 17:04:40,598 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:04:40,598 INFO: [cached since 1601s ago] {'param_1': 2}
2025-03-13 17:04:40,600 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:04:40,600 INFO: [cached since 1601s ago] {'param_1': 4}
2025-03-13 17:04:40,602 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:04:40,602 INFO: [cached since 1601s ago] {'param_1': 5}
2025-03-13 17:04:40,603 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:04:40,603 INFO: [cached since 1601s ago] {'param_1': 3}
2025-03-13 17:04:40,605 INFO: ROLLBACK
2025-03-13 17:04:40,606 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:04:40,607 INFO: [cached since 1601s ago] {'param_1': 4}
2025-03-13 17:04:40,609 INFO: 127.0.0.1 - - [13/Mar/2025 17:04:40] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 17:04:40,628 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:04:40,629 INFO: [cached since 1601s ago] {'param_1': 5}
2025-03-13 17:04:40,632 INFO: ROLLBACK
2025-03-13 17:04:40,633 INFO: 127.0.0.1 - - [13/Mar/2025 17:04:40] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 17:10:21,963 INFO: BEGIN (implicit)
2025-03-13 17:10:21,966 INFO: BEGIN (implicit)
2025-03-13 17:10:21,974 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:10:21,975 INFO: BEGIN (implicit)
2025-03-13 17:10:21,976 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:10:21,980 INFO: BEGIN (implicit)
2025-03-13 17:10:21,982 INFO: Entering list_tasks_json route...
2025-03-13 17:10:21,983 INFO: Entering list_tasks_json route...
2025-03-13 17:10:21,984 INFO: [cached since 1942s ago] {}
2025-03-13 17:10:21,984 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 17:10:21,985 INFO: [cached since 1942s ago] {}
2025-03-13 17:10:21,986 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 17:10:21,986 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 17:10:21,986 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 17:10:21,986 INFO: [cached since 1942s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 17:10:21,987 INFO: [cached since 1942s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 17:10:21,987 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 17:10:21,987 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 17:10:22,000 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 17:10:22,001 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:22,003 INFO: ROLLBACK
2025-03-13 17:10:22,004 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:22,004 INFO: ROLLBACK
2025-03-13 17:10:22,009 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 17:10:22,014 INFO: [cached since 1942s ago] {'param_1': 1}
2025-03-13 17:10:22,014 INFO: [cached since 1942s ago] {'param_1': 1}
2025-03-13 17:10:22,022 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:22] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 17:10:22,105 INFO: BEGIN (implicit)
2025-03-13 17:10:22,122 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:22,124 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:22] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 17:10:22,136 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:22,147 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 17:10:22,169 INFO: [cached since 1942s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 17:10:22,147 INFO: [cached since 1942s ago] {'param_1': 2}
2025-03-13 17:10:22,161 INFO: [cached since 1942s ago] {'param_1': 2}
2025-03-13 17:10:22,168 INFO: BEGIN (implicit)
2025-03-13 17:10:22,171 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 17:10:22,172 INFO: [cached since 1942s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 17:10:22,178 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 17:10:22,178 INFO: [cached since 1942s ago] {}
2025-03-13 17:10:22,179 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:22,181 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 17:10:22,189 INFO: [cached since 1942s ago] {}
2025-03-13 17:10:22,189 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:22,194 INFO: [cached since 1942s ago] {'param_1': 3}
2025-03-13 17:10:22,189 INFO: [cached since 1942s ago] {'param_1': 3}
2025-03-13 17:10:22,188 INFO: ROLLBACK
2025-03-13 17:10:22,196 INFO: ROLLBACK
2025-03-13 17:10:22,197 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:22,197 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:22] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 17:10:22,197 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:22] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 17:10:22,197 INFO: [cached since 1942s ago] {'param_1': 4}
2025-03-13 17:10:22,209 INFO: BEGIN (implicit)
2025-03-13 17:10:22,211 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:22,212 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 17:10:22,213 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:22,213 INFO: [cached since 1942s ago] {'param_1': 4}
2025-03-13 17:10:22,213 INFO: [cached since 1942s ago] {'pk_1': 19}
2025-03-13 17:10:22,214 INFO: [cached since 1942s ago] {'param_1': 5}
2025-03-13 17:10:22,221 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:10:22,222 INFO: [cached since 1942s ago] {}
2025-03-13 17:10:22,228 INFO: ROLLBACK
2025-03-13 17:10:22,229 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 17:10:22,230 INFO: [cached since 1942s ago] {'param_1': 19}
2025-03-13 17:10:22,232 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:22,232 INFO: [cached since 1942s ago] {'param_1': 5}
2025-03-13 17:10:22,233 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:22,234 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:22] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 17:10:22,234 INFO: [cached since 1942s ago] {'param_1': 1}
2025-03-13 17:10:22,235 INFO: ROLLBACK
2025-03-13 17:10:22,241 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:22] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 17:10:22,247 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:22,247 INFO: [cached since 1942s ago] {'param_1': 2}
2025-03-13 17:10:22,249 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:22,249 INFO: [cached since 1942s ago] {'param_1': 3}
2025-03-13 17:10:22,252 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:22,252 INFO: [cached since 1942s ago] {'param_1': 4}
2025-03-13 17:10:22,254 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:22,254 INFO: [cached since 1942s ago] {'param_1': 5}
2025-03-13 17:10:22,255 INFO: ROLLBACK
2025-03-13 17:10:22,256 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:22] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 17:10:22,349 INFO: BEGIN (implicit)
2025-03-13 17:10:22,350 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 17:10:22,350 INFO: [cached since 1942s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 17:10:22,352 INFO: BEGIN (implicit)
2025-03-13 17:10:22,353 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 17:10:22,353 INFO: [cached since 1942s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 17:10:22,534 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 17:10:22,537 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 17:10:22,537 INFO: [cached since 1943s ago] {}
2025-03-13 17:10:22,537 INFO: [cached since 1943s ago] {}
2025-03-13 17:10:22,554 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 17:10:22,557 INFO: [cached since 1943s ago] {}
2025-03-13 17:10:22,580 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 17:10:22,583 INFO: [cached since 1943s ago] {}
2025-03-13 17:10:22,583 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 17:10:22,623 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 17:10:22,657 INFO: [cached since 1943s ago] {}
2025-03-13 17:10:22,632 INFO: [cached since 1943s ago] {}
2025-03-13 17:10:22,628 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:22] "GET /socket.io/?EIO=4&transport=websocket&sid=i8kYfv7CEQbNbe_rAAAI HTTP/1.1" 200 -
2025-03-13 17:10:22,698 INFO: ROLLBACK
2025-03-13 17:10:22,699 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:22] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 17:10:22,725 INFO: ROLLBACK
2025-03-13 17:10:22,748 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:22] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 17:10:23,666 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:23] "GET /socket.io/?EIO=4&transport=polling&t=jp9nvfjf HTTP/1.1" 200 -
2025-03-13 17:10:23,720 INFO: Entering list_tasks_json route...
2025-03-13 17:10:23,720 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 17:10:23,721 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 17:10:23,763 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 17:10:23,765 INFO: BEGIN (implicit)
2025-03-13 17:10:23,770 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 17:10:23,770 INFO: [cached since 1944s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 17:10:23,765 INFO: BEGIN (implicit)
2025-03-13 17:10:23,769 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:23] "POST /socket.io/?EIO=4&transport=polling&t=jp9pb9iy&sid=B1l8PWZ9cJdclYNzAAAK HTTP/1.1" 200 -
2025-03-13 17:10:23,851 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 17:10:23,851 INFO: [cached since 1944s ago] {}
2025-03-13 17:10:23,767 INFO: BEGIN (implicit)
2025-03-13 17:10:23,768 INFO: BEGIN (implicit)
2025-03-13 17:10:23,846 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:10:23,857 INFO: [cached since 1944s ago] {}
2025-03-13 17:10:23,852 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 17:10:23,853 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 17:10:23,855 INFO: ROLLBACK
2025-03-13 17:10:23,853 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:23] "GET /socket.io/?EIO=4&transport=polling&t=jp9pd20o&sid=B1l8PWZ9cJdclYNzAAAK HTTP/1.1" 200 -
2025-03-13 17:10:23,857 INFO: [cached since 1944s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 17:10:23,857 INFO: [cached since 1944s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 17:10:23,859 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:23,860 INFO: [cached since 1944s ago] {'param_1': 1}
2025-03-13 17:10:23,860 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:23] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 17:10:23,864 INFO: ROLLBACK
2025-03-13 17:10:23,875 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:23,876 INFO: [cached since 1944s ago] {'param_1': 2}
2025-03-13 17:10:23,936 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:23,978 INFO: [cached since 1944s ago] {'param_1': 3}
2025-03-13 17:10:23,944 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:23] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 17:10:24,046 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:24,048 INFO: [cached since 1944s ago] {'param_1': 4}
2025-03-13 17:10:24,053 INFO: BEGIN (implicit)
2025-03-13 17:10:24,058 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 17:10:24,058 INFO: [cached since 1944s ago] {'pk_1': 19}
2025-03-13 17:10:24,061 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:24,062 INFO: [cached since 1944s ago] {'param_1': 5}
2025-03-13 17:10:24,073 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:10:24,088 INFO: [cached since 1944s ago] {}
2025-03-13 17:10:24,078 INFO: ROLLBACK
2025-03-13 17:10:24,130 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 17:10:24,130 INFO: [cached since 1944s ago] {'param_1': 19}
2025-03-13 17:10:24,136 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:24] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 17:10:24,145 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:24,146 INFO: [cached since 1944s ago] {'param_1': 1}
2025-03-13 17:10:24,256 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:24,256 INFO: [cached since 1944s ago] {'param_1': 2}
2025-03-13 17:10:24,260 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:24,261 INFO: [cached since 1944s ago] {'param_1': 3}
2025-03-13 17:10:24,262 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:24,263 INFO: [cached since 1944s ago] {'param_1': 4}
2025-03-13 17:10:24,267 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:24,268 INFO: [cached since 1944s ago] {'param_1': 5}
2025-03-13 17:10:24,271 INFO: ROLLBACK
2025-03-13 17:10:24,274 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:24] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 17:10:24,521 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 17:10:24,521 INFO: [cached since 1945s ago] {}
2025-03-13 17:10:24,526 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 17:10:24,526 INFO: [cached since 1945s ago] {}
2025-03-13 17:10:24,527 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 17:10:24,528 INFO: [cached since 1945s ago] {}
2025-03-13 17:10:24,536 INFO: ROLLBACK
2025-03-13 17:10:24,537 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:24] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 17:10:50,615 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:50] "GET /socket.io/?EIO=4&transport=websocket&sid=B1l8PWZ9cJdclYNzAAAK HTTP/1.1" 200 -
2025-03-13 17:10:51,042 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:51] "GET /socket.io/?EIO=4&transport=polling&t=jpurxz9x HTTP/1.1" 200 -
2025-03-13 17:10:51,086 INFO: BEGIN (implicit)
2025-03-13 17:10:51,087 INFO: BEGIN (implicit)
2025-03-13 17:10:51,102 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:10:51,102 INFO: [cached since 1971s ago] {}
2025-03-13 17:10:51,101 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 17:10:51,103 INFO: [cached since 1971s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 17:10:51,091 INFO: Entering list_tasks_json route...
2025-03-13 17:10:51,104 INFO: BEGIN (implicit)
2025-03-13 17:10:51,105 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 17:10:51,124 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 17:10:51,128 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:51,137 INFO: [cached since 1971s ago] {'param_1': 1}
2025-03-13 17:10:51,130 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:51] "POST /socket.io/?EIO=4&transport=polling&t=jputj3qw&sid=Kd7guQuXePP4p8M8AAAM HTTP/1.1" 200 -
2025-03-13 17:10:51,135 INFO: ROLLBACK
2025-03-13 17:10:51,136 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 17:10:51,137 INFO: [cached since 1971s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 17:10:51,140 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:51] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 17:10:51,142 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:51,161 INFO: [cached since 1971s ago] {'param_1': 2}
2025-03-13 17:10:51,143 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:51] "GET /socket.io/?EIO=4&transport=polling&t=jputkil0&sid=Kd7guQuXePP4p8M8AAAM HTTP/1.1" 200 -
2025-03-13 17:10:51,157 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 17:10:51,166 INFO: BEGIN (implicit)
2025-03-13 17:10:51,167 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 17:10:51,171 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:51,172 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 17:10:51,180 INFO: BEGIN (implicit)
2025-03-13 17:10:51,184 INFO: [cached since 1971s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 17:10:51,185 INFO: [cached since 1971s ago] {'param_1': 3}
2025-03-13 17:10:51,185 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 17:10:51,185 INFO: [cached since 1971s ago] {'pk_1': 19}
2025-03-13 17:10:51,187 INFO: [cached since 1971s ago] {}
2025-03-13 17:10:51,190 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:51,192 INFO: [cached since 1971s ago] {'param_1': 4}
2025-03-13 17:10:51,191 INFO: ROLLBACK
2025-03-13 17:10:51,194 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:10:51,195 INFO: [cached since 1971s ago] {}
2025-03-13 17:10:51,196 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:51,196 INFO: [cached since 1971s ago] {'param_1': 5}
2025-03-13 17:10:51,197 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:51] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 17:10:51,201 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 17:10:51,202 INFO: [cached since 1971s ago] {'param_1': 19}
2025-03-13 17:10:51,203 INFO: ROLLBACK
2025-03-13 17:10:51,204 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:51,204 INFO: [cached since 1971s ago] {'param_1': 1}
2025-03-13 17:10:51,204 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:51] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 17:10:51,208 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:51,208 INFO: [cached since 1971s ago] {'param_1': 2}
2025-03-13 17:10:51,214 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:51,214 INFO: [cached since 1971s ago] {'param_1': 3}
2025-03-13 17:10:51,219 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:51,220 INFO: [cached since 1971s ago] {'param_1': 4}
2025-03-13 17:10:51,222 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:51,222 INFO: [cached since 1971s ago] {'param_1': 5}
2025-03-13 17:10:51,223 INFO: ROLLBACK
2025-03-13 17:10:51,224 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:51] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 17:10:51,292 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 17:10:51,292 INFO: [cached since 1971s ago] {}
2025-03-13 17:10:51,297 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 17:10:51,297 INFO: [cached since 1971s ago] {}
2025-03-13 17:10:51,298 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 17:10:51,298 INFO: [cached since 1971s ago] {}
2025-03-13 17:10:51,303 INFO: ROLLBACK
2025-03-13 17:10:51,303 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:51] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 17:10:53,026 INFO: Fetching task details for Task ID 291.
2025-03-13 17:10:53,026 INFO: Fetching task with ID 291.
2025-03-13 17:10:53,027 INFO: BEGIN (implicit)
2025-03-13 17:10:53,027 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 17:10:53,027 INFO: [cached since 1970s ago] {'pk_1': 291}
2025-03-13 17:10:53,029 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x109dc6f30>, 'epic_priority': None, 'project_id': 7, 'id': 291, 'is_archived': False, 'contributor_id': 5, 'name': 'Add dropdowns in task list for changing: Assigned to, Priority and Status', 'completed': False, 'estimate_type': 'story_points', 'sort_order': 0, 'story_points': 0, 'completed_date': None, 'description': '<p>Write Description task description...</p>', 'status': 'In Progress', 'time_estimate': None, 'parent_id': None, 'created_at': datetime.datetime(2025, 2, 10, 9, 9, 52, 988609), 'task_type': 'User Story', 'updated_at': datetime.datetime(2025, 3, 8, 13, 26, 6, 404279), 'priority': 'Medium'}
2025-03-13 17:10:53,029 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 17:10:53,030 INFO: [cached since 1970s ago] {'pk_1': 7}
2025-03-13 17:10:53,031 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-13 17:10:53,031 INFO: [cached since 1970s ago] {'pk_1': 5}
2025-03-13 17:10:53,032 INFO: Task ID 291 fetched with parent ID: None
2025-03-13 17:10:53,032 INFO: Task with ID 291 fetched successfully.
2025-03-13 17:10:53,032 DEBUG: Fetched Task Data: {'id': 291, 'name': 'Add dropdowns in task list for changing: Assigned to, Priority and Status', 'description': '<p>Write Description task description...</p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'estimate_type': 'story_points', 'estimate': 0, 'status': 'In Progress', 'sort_order': 0, 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-03-08T13:26:06.404279', 'contributor_name': 'Fredrik Cederborg', 'parent': None}
2025-03-13 17:10:53,032 INFO: Task details fetched successfully for Task ID 291.
2025-03-13 17:10:53,032 INFO: ROLLBACK
2025-03-13 17:10:53,033 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:53] "GET /api/tasks/291 HTTP/1.1" 200 -
2025-03-13 17:10:53,204 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:53] "OPTIONS /tasks/available_tasks?task_type=User%20Story&exclude_task_id=291&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 17:10:53,207 INFO: BEGIN (implicit)
2025-03-13 17:10:53,209 INFO: Entering available_tasks route...
2025-03-13 17:10:53,210 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:53] "OPTIONS /tasks/available_tasks?task_type=User%20Story&exclude_task_id=291&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 17:10:53,211 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 17:10:53,212 INFO: BEGIN (implicit)
2025-03-13 17:10:53,212 DEBUG: Query parameters: task_type=User Story, exclude_task_id=291, search_term=, project_id=None, limit=30, page=1
2025-03-13 17:10:53,212 INFO: [cached since 1973s ago] {'pk_1': 7}
2025-03-13 17:10:53,213 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 17:10:53,214 INFO: BEGIN (implicit)
2025-03-13 17:10:53,214 INFO: Entering available_tasks route...
2025-03-13 17:10:53,214 INFO: [cached since 1973s ago] {'pk_1': 7}
2025-03-13 17:10:53,215 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 17:10:53,215 DEBUG: Query parameters: task_type=User Story, exclude_task_id=291, search_term=, project_id=None, limit=30, page=1
2025-03-13 17:10:53,216 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:10:53,217 INFO: [cached since 1973s ago] {}
2025-03-13 17:10:53,216 INFO: [cached since 1971s ago] {'pk_1': 291}
2025-03-13 17:10:53,216 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:10:53,218 INFO: [cached since 1973s ago] {}
2025-03-13 17:10:53,217 INFO: BEGIN (implicit)
2025-03-13 17:10:53,218 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 17:10:53,219 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 17:10:53,220 INFO: [cached since 1973s ago] {'param_1': 7}
2025-03-13 17:10:53,219 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 17:10:53,220 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 291, 'task_type': ['User Story']}
2025-03-13 17:10:53,219 INFO: [cached since 1971s ago] {'pk_1': 291}
2025-03-13 17:10:53,220 INFO: [cached since 1973s ago] {'param_1': 7}
2025-03-13 17:10:53,220 INFO: Validating hierarchy for Task N/A
2025-03-13 17:10:53,221 INFO: Determining valid parent types for task_type: User Story
2025-03-13 17:10:53,221 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 291, 'task_type': ['Epic']}
2025-03-13 17:10:53,221 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:53,221 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:53,221 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 291, 'task_type': ['User Story']}
2025-03-13 17:10:53,225 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-13 17:10:53,225 INFO: [cached since 1973s ago] {'param_1': 1}
2025-03-13 17:10:53,226 INFO: [cached since 1973s ago] {'param_1': 1}
2025-03-13 17:10:53,226 INFO: Validating hierarchy for Task N/A
2025-03-13 17:10:53,228 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-13 17:10:53,229 INFO: Determining valid parent types for task_type: User Story
2025-03-13 17:10:53,230 INFO: [cached since 1756s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-13 17:10:53,232 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:53,232 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:53,234 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 291, 'task_type': ['Epic']}
2025-03-13 17:10:53,235 INFO: [cached since 1973s ago] {'param_1': 2}
2025-03-13 17:10:53,243 DEBUG: Tasks returned: [{'id': 430, 'name': 'No Epic', 'task_type': 'Epic', 'is_parent': False}, {'id': 393, 'name': 'List of ideas for new features, parameters to add', 'task_type': 'Epic', 'is_parent': False}, {'id': 327, 'name': '[UNIQUE feature] -\xa0Epic - AI-Powered PBI Refinement System', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 456, 'name': 'Search in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okrÂ´s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notification system', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 459, 'name': '[RESEARCH] - Step 1: Mapping out what each file does', 'task_type': 'Epic', 'is_parent': False}, {'id': 432, 'name': 'Roadmap view', 'task_type': 'Epic', 'is_parent': False}, {'id': 392, 'name': 'UI / UX Improvements', 'task_type': 'Epic', 'is_parent': False}, {'id': 465, 'name': 'Building from Scratch vs.\xa0Replicating Each Feature', 'task_type': 'Epic', 'is_parent': False}, {'id': 424, 'name': '[ISSUES] - Current issues/bugs', 'task_type': 'Epic', 'is_parent': False}, {'id': 460, 'name': '[PLANNING] - Step 2: Architecture & Migration Planning', 'task_type': 'Epic', 'is_parent': False}, {'id': 462, 'name': '[MIGRATION] - high-level roadmap Step 1 - 7', 'task_type': 'Epic', 'is_parent': False}]
2025-03-13 17:10:53,244 INFO: [cached since 1973s ago] {'param_1': 2}
2025-03-13 17:10:53,244 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-13 17:10:53,247 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:53,248 INFO: ROLLBACK
2025-03-13 17:10:53,250 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-13 17:10:53,251 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:53,251 INFO: [cached since 1973s ago] {'param_1': 3}
2025-03-13 17:10:53,251 INFO: [cached since 1756s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-13 17:10:53,251 INFO: [cached since 1973s ago] {'param_1': 3}
2025-03-13 17:10:53,252 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:53] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=291&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 17:10:53,253 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:53,254 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:53,257 DEBUG: Tasks returned: [{'id': 430, 'name': 'No Epic', 'task_type': 'Epic', 'is_parent': False}, {'id': 393, 'name': 'List of ideas for new features, parameters to add', 'task_type': 'Epic', 'is_parent': False}, {'id': 327, 'name': '[UNIQUE feature] -\xa0Epic - AI-Powered PBI Refinement System', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 456, 'name': 'Search in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okrÂ´s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notification system', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 459, 'name': '[RESEARCH] - Step 1: Mapping out what each file does', 'task_type': 'Epic', 'is_parent': False}, {'id': 432, 'name': 'Roadmap view', 'task_type': 'Epic', 'is_parent': False}, {'id': 392, 'name': 'UI / UX Improvements', 'task_type': 'Epic', 'is_parent': False}, {'id': 465, 'name': 'Building from Scratch vs.\xa0Replicating Each Feature', 'task_type': 'Epic', 'is_parent': False}, {'id': 424, 'name': '[ISSUES] - Current issues/bugs', 'task_type': 'Epic', 'is_parent': False}, {'id': 460, 'name': '[PLANNING] - Step 2: Architecture & Migration Planning', 'task_type': 'Epic', 'is_parent': False}, {'id': 462, 'name': '[MIGRATION] - high-level roadmap Step 1 - 7', 'task_type': 'Epic', 'is_parent': False}]
2025-03-13 17:10:53,257 INFO: [cached since 1973s ago] {'param_1': 4}
2025-03-13 17:10:53,257 INFO: [cached since 1973s ago] {'param_1': 4}
2025-03-13 17:10:53,258 INFO: ROLLBACK
2025-03-13 17:10:53,259 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:53,259 INFO: [cached since 1973s ago] {'param_1': 5}
2025-03-13 17:10:53,260 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:10:53,262 INFO: ROLLBACK
2025-03-13 17:10:53,262 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:53] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=291&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 17:10:53,262 INFO: [cached since 1973s ago] {'param_1': 5}
2025-03-13 17:10:53,263 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:53] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 17:10:53,268 INFO: ROLLBACK
2025-03-13 17:10:53,270 INFO: 127.0.0.1 - - [13/Mar/2025 17:10:53] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 17:12:11,790 INFO: 127.0.0.1 - - [13/Mar/2025 17:12:11] "GET /socket.io/?EIO=4&transport=websocket&sid=Kd7guQuXePP4p8M8AAAM HTTP/1.1" 200 -
2025-03-13 17:12:12,557 INFO: 127.0.0.1 - - [13/Mar/2025 17:12:12] "GET /socket.io/?EIO=4&transport=polling&t=jrloedy1 HTTP/1.1" 200 -
2025-03-13 17:12:12,618 INFO: 127.0.0.1 - - [13/Mar/2025 17:12:12] "POST /socket.io/?EIO=4&transport=polling&t=jrlpmylz&sid=uWRXl7FuJHMR62wAAAAO HTTP/1.1" 200 -
2025-03-13 17:12:12,622 INFO: BEGIN (implicit)
2025-03-13 17:12:12,644 INFO: BEGIN (implicit)
2025-03-13 17:12:12,645 INFO: Entering list_tasks_json route...
2025-03-13 17:12:12,663 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:12:12,711 INFO: BEGIN (implicit)
2025-03-13 17:12:12,713 INFO: 127.0.0.1 - - [13/Mar/2025 17:12:12] "GET /socket.io/?EIO=4&transport=polling&t=jrlpn682&sid=uWRXl7FuJHMR62wAAAAO HTTP/1.1" 200 -
2025-03-13 17:12:12,717 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 17:12:12,722 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 17:12:12,723 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 17:12:12,735 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 17:12:12,735 INFO: [cached since 2053s ago] {}
2025-03-13 17:12:12,735 INFO: [cached since 2053s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 17:12:12,740 INFO: BEGIN (implicit)
2025-03-13 17:12:12,741 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 17:12:12,742 INFO: [cached since 2053s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 17:12:12,744 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 17:12:12,764 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:12:12,765 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 17:12:12,767 INFO: [cached since 2053s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 17:12:12,767 INFO: [cached since 2053s ago] {'param_1': 1}
2025-03-13 17:12:12,767 INFO: [cached since 2053s ago] {}
2025-03-13 17:12:12,774 INFO: ROLLBACK
2025-03-13 17:12:12,775 INFO: ROLLBACK
2025-03-13 17:12:12,776 INFO: 127.0.0.1 - - [13/Mar/2025 17:12:12] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 17:12:12,780 INFO: 127.0.0.1 - - [13/Mar/2025 17:12:12] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 17:12:12,806 INFO: BEGIN (implicit)
2025-03-13 17:12:12,806 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 17:12:12,806 INFO: [cached since 2053s ago] {'pk_1': 19}
2025-03-13 17:12:12,812 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:12:12,812 INFO: [cached since 2053s ago] {'param_1': 2}
2025-03-13 17:12:12,838 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:12:12,838 INFO: [cached since 2053s ago] {'param_1': 3}
2025-03-13 17:12:12,847 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:12:12,847 INFO: [cached since 2053s ago] {'param_1': 4}
2025-03-13 17:12:12,863 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:12:12,863 INFO: [cached since 2053s ago] {}
2025-03-13 17:12:12,894 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 17:12:12,894 INFO: [cached since 2053s ago] {'param_1': 19}
2025-03-13 17:12:12,896 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:12:12,906 INFO: [cached since 2053s ago] {'param_1': 5}
2025-03-13 17:12:12,922 INFO: ROLLBACK
2025-03-13 17:12:12,930 INFO: 127.0.0.1 - - [13/Mar/2025 17:12:12] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 17:12:12,942 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:12:12,942 INFO: [cached since 2053s ago] {'param_1': 1}
2025-03-13 17:12:12,952 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:12:12,952 INFO: [cached since 2053s ago] {'param_1': 2}
2025-03-13 17:12:12,954 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:12:12,955 INFO: [cached since 2053s ago] {'param_1': 3}
2025-03-13 17:12:12,956 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:12:12,956 INFO: [cached since 2053s ago] {'param_1': 4}
2025-03-13 17:12:12,959 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:12:12,959 INFO: [cached since 2053s ago] {'param_1': 5}
2025-03-13 17:12:12,962 INFO: ROLLBACK
2025-03-13 17:12:12,964 INFO: 127.0.0.1 - - [13/Mar/2025 17:12:12] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 17:12:13,063 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 17:12:13,064 INFO: [cached since 2053s ago] {}
2025-03-13 17:12:13,069 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 17:12:13,069 INFO: [cached since 2053s ago] {}
2025-03-13 17:12:13,071 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 17:12:13,071 INFO: [cached since 2053s ago] {}
2025-03-13 17:12:13,118 INFO: ROLLBACK
2025-03-13 17:12:13,121 INFO: 127.0.0.1 - - [13/Mar/2025 17:12:13] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 17:12:29,751 INFO: 127.0.0.1 - - [13/Mar/2025 17:12:29] "GET /socket.io/?EIO=4&transport=websocket&sid=uWRXl7FuJHMR62wAAAAO HTTP/1.1" 200 -
2025-03-13 17:12:30,546 INFO: BEGIN (implicit)
2025-03-13 17:12:30,553 INFO: 127.0.0.1 - - [13/Mar/2025 17:12:30] "GET /socket.io/?EIO=4&transport=polling&t=jrziacj6 HTTP/1.1" 200 -
2025-03-13 17:12:30,553 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:12:30,554 INFO: BEGIN (implicit)
2025-03-13 17:12:30,557 INFO: Entering list_tasks_json route...
2025-03-13 17:12:30,566 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 17:12:30,560 INFO: [cached since 2071s ago] {}
2025-03-13 17:12:30,560 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 17:12:30,577 INFO: [cached since 2071s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 17:12:30,562 INFO: 127.0.0.1 - - [13/Mar/2025 17:12:30] "POST /socket.io/?EIO=4&transport=polling&t=jrzktfzj&sid=6NeVhp4HULodX_agAAAQ HTTP/1.1" 200 -
2025-03-13 17:12:30,559 INFO: BEGIN (implicit)
2025-03-13 17:12:30,578 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 17:12:30,578 INFO: [cached since 2071s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 17:12:30,575 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 17:12:30,570 INFO: 127.0.0.1 - - [13/Mar/2025 17:12:30] "GET /socket.io/?EIO=4&transport=polling&t=jrzkwmpd&sid=6NeVhp4HULodX_agAAAQ HTTP/1.1" 200 -
2025-03-13 17:12:30,588 INFO: ROLLBACK
2025-03-13 17:12:30,592 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 17:12:30,600 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:12:30,603 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 17:12:30,605 INFO: 127.0.0.1 - - [13/Mar/2025 17:12:30] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 17:12:30,607 INFO: BEGIN (implicit)
2025-03-13 17:12:30,609 INFO: [cached since 2071s ago] {'param_1': 1}
2025-03-13 17:12:30,609 INFO: [cached since 2071s ago] {}
2025-03-13 17:12:30,611 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 17:12:30,615 INFO: ROLLBACK
2025-03-13 17:12:30,623 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:12:30,625 INFO: BEGIN (implicit)
2025-03-13 17:12:30,625 INFO: [cached since 2071s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 17:12:30,625 INFO: [cached since 2071s ago] {'param_1': 2}
2025-03-13 17:12:30,626 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 17:12:30,626 INFO: [cached since 2071s ago] {'pk_1': 19}
2025-03-13 17:12:30,626 INFO: 127.0.0.1 - - [13/Mar/2025 17:12:30] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 17:12:30,640 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:12:30,641 INFO: [cached since 2071s ago] {'param_1': 3}
2025-03-13 17:12:30,643 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:12:30,643 INFO: [cached since 2071s ago] {'param_1': 4}
2025-03-13 17:12:30,644 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:12:30,644 INFO: [cached since 2071s ago] {}
2025-03-13 17:12:30,646 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:12:30,646 INFO: [cached since 2071s ago] {'param_1': 5}
2025-03-13 17:12:30,651 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 17:12:30,653 INFO: [cached since 2071s ago] {'param_1': 19}
2025-03-13 17:12:30,655 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:12:30,656 INFO: [cached since 2071s ago] {'param_1': 1}
2025-03-13 17:12:30,659 INFO: ROLLBACK
2025-03-13 17:12:30,661 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:12:30,661 INFO: 127.0.0.1 - - [13/Mar/2025 17:12:30] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 17:12:30,663 INFO: [cached since 2071s ago] {'param_1': 2}
2025-03-13 17:12:30,707 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:12:30,708 INFO: [cached since 2071s ago] {'param_1': 3}
2025-03-13 17:12:30,724 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:12:30,724 INFO: [cached since 2071s ago] {'param_1': 4}
2025-03-13 17:12:30,726 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:12:30,726 INFO: [cached since 2071s ago] {'param_1': 5}
2025-03-13 17:12:30,729 INFO: ROLLBACK
2025-03-13 17:12:30,784 INFO: 127.0.0.1 - - [13/Mar/2025 17:12:30] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 17:12:31,046 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 17:12:31,046 INFO: [cached since 2071s ago] {}
2025-03-13 17:12:31,048 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 17:12:31,048 INFO: [cached since 2071s ago] {}
2025-03-13 17:12:31,049 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 17:12:31,049 INFO: [cached since 2071s ago] {}
2025-03-13 17:12:31,054 INFO: ROLLBACK
2025-03-13 17:12:31,055 INFO: 127.0.0.1 - - [13/Mar/2025 17:12:31] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 17:12:33,276 INFO: Fetching task details for Task ID 395.
2025-03-13 17:12:33,276 INFO: Fetching task with ID 395.
2025-03-13 17:12:33,277 INFO: BEGIN (implicit)
2025-03-13 17:12:33,277 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 17:12:33,277 INFO: [cached since 2071s ago] {'pk_1': 395}
2025-03-13 17:12:33,279 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x109dc4ad0>, 'epic_priority': None, 'project_id': 7, 'id': 395, 'is_archived': False, 'contributor_id': 5, 'name': 'Side menu', 'completed': False, 'estimate_type': 'story_points', 'sort_order': 2, 'story_points': 0, 'completed_date': None, 'description': '<ul><li><p>Settings</p></li><li><p>Contributors</p></li><li><p>Company</p><ul><li><p>Goals</p><ul><li><p>OKRÂ´s</p></li></ul></li><li><p>Sales</p></li><li><p>Financial (Rescricted access, (Super admin)</p></li><li><p>Market position</p></li><li><p>Market analysis</p></li><li><p>User metrics</p></li></ul></li><li><p>Projects</p></li><li><p></p></li></ul>', 'status': 'In Progress', 'time_estimate': None, 'parent_id': None, 'created_at': datetime.datetime(2025, 3, 5, 7, 43, 51, 220532), 'task_type': 'User Story', 'updated_at': datetime.datetime(2025, 3, 13, 13, 49, 27, 425658), 'priority': None}
2025-03-13 17:12:33,279 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 17:12:33,280 INFO: [cached since 2071s ago] {'pk_1': 7}
2025-03-13 17:12:33,281 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-13 17:12:33,281 INFO: [cached since 2071s ago] {'pk_1': 5}
2025-03-13 17:12:33,283 INFO: Task ID 395 fetched with parent ID: None
2025-03-13 17:12:33,284 INFO: Task with ID 395 fetched successfully.
2025-03-13 17:12:33,284 DEBUG: Fetched Task Data: {'id': 395, 'name': 'Side menu', 'description': '<ul><li><p>Settings</p></li><li><p>Contributors</p></li><li><p>Company</p><ul><li><p>Goals</p><ul><li><p>OKRÂ´s</p></li></ul></li><li><p>Sales</p></li><li><p>Financial (Rescricted access, (Super admin)</p></li><li><p>Market position</p></li><li><p>Market analysis</p></li><li><p>User metrics</p></li></ul></li><li><p>Projects</p></li><li><p></p></li></ul>', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'estimate_type': 'story_points', 'estimate': 0, 'status': 'In Progress', 'sort_order': 2, 'created_at': '2025-03-05T07:43:51.220532', 'updated_at': '2025-03-13T13:49:27.425658', 'contributor_name': 'Fredrik Cederborg', 'parent': None}
2025-03-13 17:12:33,284 INFO: Task details fetched successfully for Task ID 395.
2025-03-13 17:12:33,285 INFO: ROLLBACK
2025-03-13 17:12:33,285 INFO: 127.0.0.1 - - [13/Mar/2025 17:12:33] "GET /api/tasks/395 HTTP/1.1" 200 -
2025-03-13 17:12:33,477 INFO: 127.0.0.1 - - [13/Mar/2025 17:12:33] "OPTIONS /tasks/available_tasks?task_type=User%20Story&exclude_task_id=395&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 17:12:33,478 INFO: BEGIN (implicit)
2025-03-13 17:12:33,479 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 17:12:33,479 INFO: [cached since 2074s ago] {'pk_1': 7}
2025-03-13 17:12:33,482 INFO: 127.0.0.1 - - [13/Mar/2025 17:12:33] "OPTIONS /tasks/available_tasks?task_type=User%20Story&exclude_task_id=395&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 17:12:33,485 INFO: BEGIN (implicit)
2025-03-13 17:12:33,485 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 17:12:33,486 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:12:33,486 INFO: Entering available_tasks route...
2025-03-13 17:12:33,487 INFO: Entering available_tasks route...
2025-03-13 17:12:33,487 INFO: [cached since 2074s ago] {'pk_1': 7}
2025-03-13 17:12:33,487 INFO: [cached since 2074s ago] {}
2025-03-13 17:12:33,487 DEBUG: Query parameters: task_type=User Story, exclude_task_id=395, search_term=, project_id=None, limit=30, page=1
2025-03-13 17:12:33,487 DEBUG: Query parameters: task_type=User Story, exclude_task_id=395, search_term=, project_id=None, limit=30, page=1
2025-03-13 17:12:33,488 INFO: BEGIN (implicit)
2025-03-13 17:12:33,489 INFO: BEGIN (implicit)
2025-03-13 17:12:33,490 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 17:12:33,491 INFO: [cached since 2074s ago] {'param_1': 7}
2025-03-13 17:12:33,490 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 17:12:33,491 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 17:12:33,491 INFO: [cached since 2071s ago] {'pk_1': 395}
2025-03-13 17:12:33,490 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:12:33,492 INFO: [cached since 2074s ago] {}
2025-03-13 17:12:33,491 INFO: [cached since 2071s ago] {'pk_1': 395}
2025-03-13 17:12:33,493 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:12:33,494 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 17:12:33,495 INFO: [cached since 2074s ago] {'param_1': 1}
2025-03-13 17:12:33,495 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 395, 'task_type': ['User Story']}
2025-03-13 17:12:33,497 INFO: Validating hierarchy for Task N/A
2025-03-13 17:12:33,497 INFO: Determining valid parent types for task_type: User Story
2025-03-13 17:12:33,495 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 395, 'task_type': ['User Story']}
2025-03-13 17:12:33,498 INFO: Validating hierarchy for Task N/A
2025-03-13 17:12:33,498 INFO: Determining valid parent types for task_type: User Story
2025-03-13 17:12:33,497 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 395, 'task_type': ['Epic']}
2025-03-13 17:12:33,499 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 395, 'task_type': ['Epic']}
2025-03-13 17:12:33,508 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-13 17:12:33,510 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:12:33,515 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-13 17:12:33,496 INFO: [cached since 2074s ago] {'param_1': 7}
2025-03-13 17:12:33,516 INFO: [cached since 2074s ago] {'param_1': 2}
2025-03-13 17:12:33,516 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-13 17:12:33,518 INFO: [cached since 1857s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-13 17:12:33,517 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-13 17:12:33,518 INFO: [cached since 1857s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-13 17:12:33,521 DEBUG: Tasks returned: [{'id': 430, 'name': 'No Epic', 'task_type': 'Epic', 'is_parent': False}, {'id': 393, 'name': 'List of ideas for new features, parameters to add', 'task_type': 'Epic', 'is_parent': False}, {'id': 327, 'name': '[UNIQUE feature] -\xa0Epic - AI-Powered PBI Refinement System', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 456, 'name': 'Search in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okrÂ´s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notification system', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 459, 'name': '[RESEARCH] - Step 1: Mapping out what each file does', 'task_type': 'Epic', 'is_parent': False}, {'id': 432, 'name': 'Roadmap view', 'task_type': 'Epic', 'is_parent': False}, {'id': 392, 'name': 'UI / UX Improvements', 'task_type': 'Epic', 'is_parent': False}, {'id': 465, 'name': 'Building from Scratch vs.\xa0Replicating Each Feature', 'task_type': 'Epic', 'is_parent': False}, {'id': 424, 'name': '[ISSUES] - Current issues/bugs', 'task_type': 'Epic', 'is_parent': False}, {'id': 460, 'name': '[PLANNING] - Step 2: Architecture & Migration Planning', 'task_type': 'Epic', 'is_parent': False}, {'id': 462, 'name': '[MIGRATION] - high-level roadmap Step 1 - 7', 'task_type': 'Epic', 'is_parent': False}]
2025-03-13 17:12:33,522 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:12:33,525 DEBUG: Tasks returned: [{'id': 430, 'name': 'No Epic', 'task_type': 'Epic', 'is_parent': False}, {'id': 393, 'name': 'List of ideas for new features, parameters to add', 'task_type': 'Epic', 'is_parent': False}, {'id': 327, 'name': '[UNIQUE feature] -\xa0Epic - AI-Powered PBI Refinement System', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 456, 'name': 'Search in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okrÂ´s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notification system', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 459, 'name': '[RESEARCH] - Step 1: Mapping out what each file does', 'task_type': 'Epic', 'is_parent': False}, {'id': 432, 'name': 'Roadmap view', 'task_type': 'Epic', 'is_parent': False}, {'id': 392, 'name': 'UI / UX Improvements', 'task_type': 'Epic', 'is_parent': False}, {'id': 465, 'name': 'Building from Scratch vs.\xa0Replicating Each Feature', 'task_type': 'Epic', 'is_parent': False}, {'id': 424, 'name': '[ISSUES] - Current issues/bugs', 'task_type': 'Epic', 'is_parent': False}, {'id': 460, 'name': '[PLANNING] - Step 2: Architecture & Migration Planning', 'task_type': 'Epic', 'is_parent': False}, {'id': 462, 'name': '[MIGRATION] - high-level roadmap Step 1 - 7', 'task_type': 'Epic', 'is_parent': False}]
2025-03-13 17:12:33,526 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:12:33,532 INFO: [cached since 2074s ago] {'param_1': 1}
2025-03-13 17:12:33,528 INFO: ROLLBACK
2025-03-13 17:12:33,528 INFO: [cached since 2074s ago] {'param_1': 3}
2025-03-13 17:12:33,531 INFO: ROLLBACK
2025-03-13 17:12:33,534 INFO: 127.0.0.1 - - [13/Mar/2025 17:12:33] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=395&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 17:12:33,536 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:12:33,536 INFO: 127.0.0.1 - - [13/Mar/2025 17:12:33] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=395&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 17:12:33,537 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:12:33,538 INFO: [cached since 2074s ago] {'param_1': 4}
2025-03-13 17:12:33,540 INFO: [cached since 2074s ago] {'param_1': 2}
2025-03-13 17:12:33,544 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:12:33,544 INFO: [cached since 2074s ago] {'param_1': 3}
2025-03-13 17:12:33,545 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:12:33,548 INFO: [cached since 2074s ago] {'param_1': 5}
2025-03-13 17:12:33,547 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:12:33,550 INFO: [cached since 2074s ago] {'param_1': 4}
2025-03-13 17:12:33,557 INFO: ROLLBACK
2025-03-13 17:12:33,558 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:12:33,559 INFO: [cached since 2074s ago] {'param_1': 5}
2025-03-13 17:12:33,559 INFO: 127.0.0.1 - - [13/Mar/2025 17:12:33] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 17:12:33,562 INFO: ROLLBACK
2025-03-13 17:12:33,565 INFO: 127.0.0.1 - - [13/Mar/2025 17:12:33] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 17:13:49,052 INFO: 127.0.0.1 - - [13/Mar/2025 17:13:49] "GET /socket.io/?EIO=4&transport=websocket&sid=6NeVhp4HULodX_agAAAQ HTTP/1.1" 200 -
2025-03-13 17:13:49,969 INFO: 127.0.0.1 - - [13/Mar/2025 17:13:49] "GET /socket.io/?EIO=4&transport=polling&t=jtoryaxf HTTP/1.1" 200 -
2025-03-13 17:13:49,990 INFO: BEGIN (implicit)
2025-03-13 17:13:49,993 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:13:49,994 INFO: [cached since 2150s ago] {}
2025-03-13 17:13:50,001 INFO: BEGIN (implicit)
2025-03-13 17:13:50,004 INFO: BEGIN (implicit)
2025-03-13 17:13:50,026 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 17:13:50,026 INFO: [cached since 2150s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 17:13:50,028 INFO: Entering list_tasks_json route...
2025-03-13 17:13:50,028 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 17:13:50,018 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 17:13:50,034 INFO: [cached since 2150s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 17:13:50,030 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 17:13:50,048 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 17:13:50,087 INFO: [cached since 2150s ago] {}
2025-03-13 17:13:50,051 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:13:50,096 INFO: [cached since 2150s ago] {'param_1': 1}
2025-03-13 17:13:50,072 INFO: 127.0.0.1 - - [13/Mar/2025 17:13:50] "POST /socket.io/?EIO=4&transport=polling&t=jtour7r1&sid=b8aasJvgnT5sNIxYAAAS HTTP/1.1" 200 -
2025-03-13 17:13:50,096 INFO: ROLLBACK
2025-03-13 17:13:50,056 INFO: ROLLBACK
2025-03-13 17:13:50,101 INFO: 127.0.0.1 - - [13/Mar/2025 17:13:50] "GET /socket.io/?EIO=4&transport=polling&t=jtous46c&sid=b8aasJvgnT5sNIxYAAAS HTTP/1.1" 200 -
2025-03-13 17:13:50,094 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 17:13:50,117 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:13:50,124 INFO: 127.0.0.1 - - [13/Mar/2025 17:13:50] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 17:13:50,125 INFO: BEGIN (implicit)
2025-03-13 17:13:50,125 INFO: [cached since 2150s ago] {'param_1': 2}
2025-03-13 17:13:50,126 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 17:13:50,126 INFO: 127.0.0.1 - - [13/Mar/2025 17:13:50] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 17:13:50,127 INFO: [cached since 2150s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 17:13:50,132 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:13:50,132 INFO: [cached since 2150s ago] {'param_1': 3}
2025-03-13 17:13:50,144 INFO: BEGIN (implicit)
2025-03-13 17:13:50,144 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 17:13:50,144 INFO: [cached since 2150s ago] {'pk_1': 19}
2025-03-13 17:13:50,145 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:13:50,145 INFO: [cached since 2150s ago] {'param_1': 4}
2025-03-13 17:13:50,161 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:13:50,162 INFO: [cached since 2150s ago] {'param_1': 5}
2025-03-13 17:13:50,162 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:13:50,162 INFO: [cached since 2150s ago] {}
2025-03-13 17:13:50,196 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 17:13:50,196 INFO: [cached since 2150s ago] {'param_1': 19}
2025-03-13 17:13:50,202 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:13:50,203 INFO: [cached since 2150s ago] {'param_1': 1}
2025-03-13 17:13:50,211 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:13:50,212 INFO: [cached since 2150s ago] {'param_1': 2}
2025-03-13 17:13:50,219 INFO: ROLLBACK
2025-03-13 17:13:50,220 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:13:50,221 INFO: [cached since 2150s ago] {'param_1': 3}
2025-03-13 17:13:50,224 INFO: 127.0.0.1 - - [13/Mar/2025 17:13:50] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 17:13:50,227 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:13:50,227 INFO: [cached since 2150s ago] {'param_1': 4}
2025-03-13 17:13:50,232 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:13:50,233 INFO: [cached since 2150s ago] {'param_1': 5}
2025-03-13 17:13:50,239 INFO: ROLLBACK
2025-03-13 17:13:50,240 INFO: 127.0.0.1 - - [13/Mar/2025 17:13:50] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 17:13:50,377 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 17:13:50,377 INFO: [cached since 2150s ago] {}
2025-03-13 17:13:50,379 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 17:13:50,379 INFO: [cached since 2150s ago] {}
2025-03-13 17:13:50,380 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 17:13:50,380 INFO: [cached since 2150s ago] {}
2025-03-13 17:13:50,390 INFO: ROLLBACK
2025-03-13 17:13:50,390 INFO: 127.0.0.1 - - [13/Mar/2025 17:13:50] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 17:14:04,895 INFO: 127.0.0.1 - - [13/Mar/2025 17:14:04] "GET /socket.io/?EIO=4&transport=websocket&sid=b8aasJvgnT5sNIxYAAAS HTTP/1.1" 200 -
2025-03-13 17:14:05,418 INFO: 127.0.0.1 - - [13/Mar/2025 17:14:05] "GET /socket.io/?EIO=4&transport=polling&t=ju0rloup HTTP/1.1" 200 -
2025-03-13 17:14:05,475 INFO: 127.0.0.1 - - [13/Mar/2025 17:14:05] "POST /socket.io/?EIO=4&transport=polling&t=ju0sgqoi&sid=wAv_Wa7rjYhCP0W0AAAU HTTP/1.1" 200 -
2025-03-13 17:14:05,479 INFO: 127.0.0.1 - - [13/Mar/2025 17:14:05] "GET /socket.io/?EIO=4&transport=polling&t=ju0si63v&sid=wAv_Wa7rjYhCP0W0AAAU HTTP/1.1" 200 -
2025-03-13 17:14:05,505 INFO: BEGIN (implicit)
2025-03-13 17:14:05,505 INFO: BEGIN (implicit)
2025-03-13 17:14:05,506 INFO: Entering list_tasks_json route...
2025-03-13 17:14:05,508 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:14:05,512 INFO: BEGIN (implicit)
2025-03-13 17:14:05,522 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 17:14:05,524 INFO: [cached since 2166s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 17:14:05,523 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 17:14:05,523 INFO: [cached since 2166s ago] {}
2025-03-13 17:14:05,524 INFO: 127.0.0.1 - - [13/Mar/2025 17:14:05] "GET /socket.io/?EIO=4&transport=polling&t=ju0ttjvd&sid=wAv_Wa7rjYhCP0W0AAAU HTTP/1.1" 200 -
2025-03-13 17:14:05,526 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 17:14:05,524 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 17:14:05,539 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 17:14:05,539 INFO: [cached since 2166s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 17:14:05,543 INFO: ROLLBACK
2025-03-13 17:14:05,546 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:14:05,548 INFO: BEGIN (implicit)
2025-03-13 17:14:05,550 INFO: [cached since 2166s ago] {'param_1': 1}
2025-03-13 17:14:05,551 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 17:14:05,551 INFO: [cached since 2166s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 17:14:05,554 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 17:14:05,554 INFO: 127.0.0.1 - - [13/Mar/2025 17:14:05] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 17:14:05,554 INFO: [cached since 2166s ago] {}
2025-03-13 17:14:05,562 INFO: BEGIN (implicit)
2025-03-13 17:14:05,562 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 17:14:05,562 INFO: [cached since 2166s ago] {'pk_1': 19}
2025-03-13 17:14:05,563 INFO: ROLLBACK
2025-03-13 17:14:05,563 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:14:05,564 INFO: [cached since 2166s ago] {'param_1': 2}
2025-03-13 17:14:05,567 INFO: 127.0.0.1 - - [13/Mar/2025 17:14:05] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 17:14:05,571 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:14:05,572 INFO: [cached since 2166s ago] {'param_1': 3}
2025-03-13 17:14:05,575 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:14:05,575 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:14:05,576 INFO: [cached since 2166s ago] {'param_1': 4}
2025-03-13 17:14:05,576 INFO: [cached since 2166s ago] {}
2025-03-13 17:14:05,577 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:14:05,578 INFO: [cached since 2166s ago] {'param_1': 5}
2025-03-13 17:14:05,577 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 17:14:05,578 INFO: [cached since 2166s ago] {'param_1': 19}
2025-03-13 17:14:05,584 INFO: ROLLBACK
2025-03-13 17:14:05,585 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:14:05,586 INFO: [cached since 2166s ago] {'param_1': 1}
2025-03-13 17:14:05,587 INFO: 127.0.0.1 - - [13/Mar/2025 17:14:05] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 17:14:05,589 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:14:05,589 INFO: [cached since 2166s ago] {'param_1': 2}
2025-03-13 17:14:05,596 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:14:05,597 INFO: [cached since 2166s ago] {'param_1': 3}
2025-03-13 17:14:05,599 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:14:05,599 INFO: [cached since 2166s ago] {'param_1': 4}
2025-03-13 17:14:05,616 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:14:05,616 INFO: [cached since 2166s ago] {'param_1': 5}
2025-03-13 17:14:05,618 INFO: ROLLBACK
2025-03-13 17:14:05,620 INFO: 127.0.0.1 - - [13/Mar/2025 17:14:05] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 17:14:05,717 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 17:14:05,718 INFO: [cached since 2166s ago] {}
2025-03-13 17:14:05,719 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 17:14:05,720 INFO: [cached since 2166s ago] {}
2025-03-13 17:14:05,720 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 17:14:05,720 INFO: [cached since 2166s ago] {}
2025-03-13 17:14:05,726 INFO: ROLLBACK
2025-03-13 17:14:05,726 INFO: 127.0.0.1 - - [13/Mar/2025 17:14:05] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 17:14:07,729 INFO: Fetching task details for Task ID 327.
2025-03-13 17:14:07,729 INFO: Fetching task with ID 327.
2025-03-13 17:14:07,730 INFO: BEGIN (implicit)
2025-03-13 17:14:07,730 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 17:14:07,730 INFO: [cached since 2165s ago] {'pk_1': 327}
2025-03-13 17:14:07,736 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x109dc7050>, 'epic_priority': None, 'project_id': 6, 'id': 327, 'is_archived': False, 'contributor_id': 5, 'name': '[UNIQUE feature] -\xa0Epic - AI-Powered PBI Refinement System', 'completed': False, 'estimate_type': 'story_points', 'sort_order': 1, 'story_points': 42, 'completed_date': None, 'description': '<h2><strong>Description:&nbsp;</strong></h2><p><em>As a user,</em></p><p><em>I want to refine feature requests into structured PBIs with AI assistance</em></p><p><em>so that I can quickly generate well-defined Epics, User Stories, and Subtasks.</em></p><hr><p></p><p>AI assists in refining raw feature requests into</p><p>structured plans, generating PRDs, Epics, User Stories, Acceptance Criteria, and Edge Cases. AI also provides intelligent estimations based on historical data and improves accuracy over time.</p><p><br><strong>ð Final Order of Development</strong></p><p></p><p>1ï¸â£ <strong>AI API Integration &amp; Security (402)</strong></p><p>2ï¸â£ <strong>AI-Driven Questioning System (398)</strong></p><p>3ï¸â£ <strong>AI-Generated PBIs with Inline Editing (399)</strong></p><p>4ï¸â£ <strong>Full-Page AI-Powered PBI Refinement UI (397)</strong></p><p>5ï¸â£ <strong>AI-Generated Questions Based on Technical Docs (401)</strong></p><p>6ï¸â£ <strong>AI-Driven Story Point Estimation (400)</strong></p><p></p><p></p><p><strong>ð Why This Order?</strong></p><p></p><p>â <strong>Security First:</strong> Ensures safe API interactions before sending user data.</p><p>â <strong>Logical Progression:</strong> AI refines PBIs â Generates tasks â Provides accurate estimates.</p><p>â <strong>Minimizing Rework:</strong> No need to <strong>rebuild</strong> AI logic after UI changes.</p><p>â <strong>Incremental Value:</strong> Each completed step <strong>adds value</strong> without requiring the full system to be finished.</p><hr><p>## AI driven creation of Epics, User stories and Subtasks.<br><br>I have, on several occasions when we have discussed a new feature and outlined a high level plan asked you to create epics, user stories and subtasks for the feature. <br><br>You are very good at this and it saves a lot of time compared to writing them manually. <br><br>However, we could create a process of this and include some steps were we go through some exercises that will help increase the quality of the output. <br>IÂ´m thinking about:<br><br>1. Check PBIÂ´s against the list of key learnings &amp; takeaways for future development<br><br>After every session we do a retrospective where we summarize the session. One section of the summary is a list of key learnings &amp; takeaways for future development. Those should be appended to a complete list of key takeaways for future development.<br><br>Every time we create epics, user stories and subtasks for a new feature we should check them against this checklist of key learnings &amp; takeaways for future development. We can then include reminder notes about this in the tasks they are relevant for. This way we will reduce repeating mistakes, be aware of technical considerations we have to adhere to etc..<br><br>2. Maybe use frameworks like user story mapping<br><br>3. Any other ideas for increasing quality. <br><br>## Estimation:<br><br>I have also asked you to estimate the complexity of the tasks using story points. <br><br>### We have used this framework for estimation:<br><br>We estimate tasks using **story points** with the **Fibonacci scale** (1, 2, 3, 5, 8, 13, etc.) That allows us to gauge the **complexity, effort, and uncertainty** associated with each task.<br><br>GPT (You) will assess every feature based on:<br><br>1. **Complexity**: How difficult the task is (e.g., architecture, database relationships, etc.).<br>2. **Effort**: How much time and effort will be required to code, test, and debug.<br>3. **Uncertainty**: Any unknowns or potential challenges (e.g., interacting with new parts of the system, external factors).<br><br>### **Benchmarking**:<br><br>To give context to these estimates:<br><br>- **1-2 Points**: Minor changes like renaming variables, small bug fixes.<br>- **3-5 Points**: Moderate tasks, involving some new logic, minor database changes, and testing.<br>- **8+ Points**: More complex tasks, like introducing new models, changing relationships in the database, or modifying core app logic with potential unknowns.<br><br>### Typical output for a user story:<br><br>ð¢ User Story 1: Implement Parent Task Dropdown in Task Modal<br>As a user, I want to assign or change a parent task directly from the task modal, so that I can organize my tasks efficiently.<br><br>â Acceptance Criteria:<br><br>A dropdown appears in the task modal, listing all valid parent tasks.<br>Prevents selection of circular dependencies.<br>Updates the parent task dynamically upon selection.<br>Displays correct hierarchy after updates.<br>ð Estimation: 5 Story Points<br><br>Complexity: Moderate â Needs task filtering, validation logic, and UI integration.<br>Effort: Moderate â Requires API calls, handling UI state, and testing.<br>Uncertainty: Low â We understand the task relationships well.<br><br><br>This is all a part of a larger idea about how to streamline and improve the quality of the entire product development lifecycle and development process.<br><br>## MVP version<br>IÂ´ve been trying to figure out what would be the most valuable step to start building a feature for.<br><br>I think it is a feature that will allow you (AI) to submit these PBIÂ´s into the backlog of my project management tool and then be able to read them back from the tool.<br><br>So the first draft of the feature would be to create a function that can take a PBI and submit it to the db of the project management tool.<br><br>## Version 2:<br>Next step would be to create a function that can read the PBIs from the db and return them as a list.<br><br>## Version 3<br>To take the whole process of refining a simple feature idea or request into more detailed and actionable PBIÂ´s and integrate it into the project management tool.<br><br>### This would involve the following requirements:<br>- It needs to be a guided process, not just an inline chat.<br>- Both the user and the AI should follow the process.<br><br>To be further discussed....<br>I have a documented ideas in this notion file:<br><a target="_blank" rel="noopener noreferrer" href="https://www.notion.so/lacunamedia/Automating-task-creation-in-autoagile-191979257fc08007a001c3c2dc0a773f?pvs=4">https://www.notion.so/lacunamedia/Automating-task-creation-in-autoagile-191979257fc08007a001c3c2dc0a773f?pvs=4</a><br><br>## The development process:<br>Generating code for the feature based on the PBIÂ´s.<br>The process of you (AI) and me coding together is a process of itÂ´s own that we are working on a plan for optimizing. <br>See separate document: \'optimizing_our_development_process.md\' <br><br><br><br>How can we automate the whole process of:<br><br>1. Create Epics, User stories and subtasks from a refined feature request.<br>2. Script them into the database of autoagile<br>3. Allow AI to read the tasks<br><br><br>This is a great initiative that will systematize and automate the process of turning feature ideas into well-structured PBIs (Epics, User Stories, and Subtasks). Below is a structured approach to refining and implementing this system.<br><br>ð Summary of the Planned Process<br>We are aiming to automate the workflow of refining a feature request into actionable PBIs and integrating them directly into the project management tool. The long-term vision is to ensure quality, consistency, and efficiency in product development.<br><br>ð Proposed Steps for Automating AI-Driven PBI Creation<br>1ï¸â£ Create Epics, User Stories &amp; Subtasks from a Refined Feature Request<br>ð¹ Step 1: Validate PBIs Against "Key Learnings &amp; Takeaways"<br><br>After every session, we capture Key Learnings &amp; Takeaways for future development.<br>When generating new PBIs, we cross-check them against this checklist.<br>If relevant, reminder notes are added to tasks (e.g., âAvoid X issue seen in past developmentâ).<br>â Benefit: Prevent repeated mistakes, ensure technical consistency.<br><br>ð¹ Step 2: Use Frameworks to Improve PBI Quality<br><br>User Story Mapping: Break down the feature based on user journeys.<br>Impact Mapping: Understand the business &amp; user impact.<br>Jobs-to-Be-Done (JTBD): Define tasks based on what the user is trying to achieve.<br>BDD (Behavior-Driven Development) Scenarios: Define Acceptance Criteria in a structured format.<br>â Benefit: Increases clarity, prioritization, and alignment with user goals.<br><br>ð¹ Step 3: Automate AI-Driven PBI Generation<br><br>AI takes a high-level feature request and breaks it down into Epics, User Stories, and Subtasks.<br>AI adds relevant acceptance criteria and ensures no conflicting dependencies.<br>User can review &amp; refine before submitting to the backlog.<br>â Benefit: Reduces manual effort, ensures consistency.<br><br>2ï¸â£ Submit PBIs to the AutoAgile Database<br>ð¹ Step 4: Create API for AI to Submit PBIs<br><br>A POST API endpoint will allow AI to write PBIs into the project management system.<br>AI will assign metadata (e.g., priority, estimated effort, dependencies).<br>â Benefit: Ensures a structured backlog instead of scattered notes.<br><br>3ï¸â£ Allow AI to Read and Retrieve PBIs<br>ð¹ Step 5: Create API to Fetch PBIs<br><br>A GET API endpoint will allow AI to retrieve PBIs from the database.<br>This enables PBI iteration, tracking, and refinement.<br>â Benefit: AI can refine &amp; adjust PBIs dynamically over time.<br><br>4ï¸â£ Version 3: Full AI-Driven PBI Refinement Process<br>ð¹ Step 6: Create a Guided Process for PBI Refinement Instead of an inline chat, we build a structured UI to guide both the user and AI in refining PBIs.<br><br>Step 1: User provides initial feature request.<br>Step 2: AI asks clarifying questions (e.g., âIs this a new feature or an improvement?â).<br>Step 3: AI generates Epics, User Stories &amp; Subtasks.<br>Step 4: AI applies learnings from past development.<br>Step 5: User reviews &amp; refines before finalizing.<br>Step 6: PBIs are submitted to the backlog.<br>â Benefit: Ensures high-quality PBIs while keeping the user in control.<br><br>ð ï¸ Technical Implementation Plan<br>Phase 1 (MVP)<br>â Backend:<br><br>Create a POST /api/pbis endpoint to submit PBIs.<br>Store PBIs in the AutoAgile database.<br>â Frontend:<br><br>Simple form UI for submitting PBIs.<br>Allow users to review &amp; edit before submission.<br>â AI Integration:<br><br>AI generates PBIs using structured templates.<br>AI checks against the Key Learnings &amp; Takeaways.<br>Phase 2 (API Retrieval)<br>â Backend:<br><br>Create GET /api/pbis to fetch PBIs.<br>Support filtering by status, priority, and dependencies.<br>â Frontend:<br><br>Display PBIs in the backlog.<br>Allow users to edit, refine &amp; iterate on PBIs.<br>Phase 3 (Full AI-Driven Workflow)<br>â Backend:<br><br>Implement AI-powered iterative refinement.<br>Store AI-generated clarifying questions &amp; user responses.<br>â Frontend:<br><br>Guided multi-step process for refining PBIs.<br>Interactive user review step before final submission.<br>â AI Integration:<br><br>AI actively asks clarifying questions before generating PBIs.<br>AI learns from past PBIs and Key Learnings to improve over time.<br>ð Key Benefits of This System<br>â Automates repetitive work â AI breaks down features into PBIs.<br>â Ensures higher quality PBIs â AI cross-checks with Key Learnings.<br>â Prevents dependency issues â AI validates task relationships.<br>â Creates a structured backlog â PBIs are stored systematically.<br>â Streamlines estimation â AI assigns story points based on complexity.<br>â Saves developer time â Faster iteration &amp; execution of product features.<br><br>ð Next Steps<br>ð Would you like to start with Phase 1 (Submitting PBIs to the database)?<br>Or do you want to explore UI/UX ideas for the guided process first?<br><br>You said:<br>Does this require an integration to for example OpenAIÂ´s API or is it possible to create an Action in a custom GPT and when triggering that action the PBIÂ´s are submitted to the db? <br>ChatGPT said:<br>It does not necessarily require OpenAIâs API integration if we use Custom GPT Actions. Hereâs how both approaches would work:<br><br>1ï¸â£ Using Custom GPT Actions (No API Integration Needed)<br>â How It Works<br>Instead of calling an external API, we can define an Action in a Custom GPT that directly interacts with the database.<br><br>Trigger the Action<br><br>You (the user) initiate a request:<br>"Generate PBIs for the new feature and submit them to the backlog."<br>AI Generates PBIs<br><br>Based on the feature description, the AI structures Epics, User Stories, and Subtasks.<br>AI assigns story points, dependencies, and priority.<br>AI Executes the Action<br><br>The Custom GPT Action runs, submitting the generated PBIs directly into the project management toolâs database.<br>Confirmation &amp; Review<br><br>The system can return a confirmation message:<br>"PBIs have been submitted. Would you like to refine them further?"<br>â Whatâs Needed to Implement This?<br>Define a Custom GPT Action<br><br>The Action should be configured to execute a database query.<br>Example: "INSERT INTO pbis (title, description, type, priority, estimated_points) VALUES (...) "<br>Grant Secure Database Access<br><br>Custom GPT must be allowed to execute database operations securely.<br>We need a secure connection with proper authentication.<br>Ensure Query Execution is Reliable<br><br>Add error handling to prevent duplicate or incorrect entries.<br>Test &amp; Verify Data Submission<br><br>Run test cases to confirm PBIs are structured correctly in the backlog.<br>ð¥ Pros of Using Custom GPT Actions<br>â No External API Required â Runs fully within the GPT modelâs environment.<br>â Faster Development â No need for external API setup.<br>â Tighter Integration with AI â AI can validate &amp; refine PBIs before submission.<br>â More Secure â Data never leaves the controlled environment.<br><br>2ï¸â£ Using OpenAIâs API for External Integration<br>If you prefer a fully programmatic approach, you can call OpenAIâs API from your backend and integrate it with your project management tool.<br><br>â How It Works<br>Your backend sends a request to OpenAIâs API, asking it to generate PBIs.<br>OpenAIâs API returns structured PBIs (Epics, User Stories, Subtasks).<br>Your system validates the PBIs before inserting them into the database.<br>Your frontend retrieves and displays the PBIs in the backlog.<br>ð¥ Pros of OpenAIâs API Approach<br>â More Customization â You control prompts, data structure, and validation.<br>â Can Run in the Background â Ideal for scheduled task automation.<br>â Scales Better â Works well for large teams &amp; real-time AI interactions.<br><br>ð· Which Approach Should You Use?<br>ð¹ If you want a fast, no-setup solution, go with Custom GPT Actions.<br>ð¹ If you need more control, background processing, or external API calls, use OpenAIâs API.<br><br>ð Would you like help setting up a Custom GPT Action for submitting PBIs?<br><br>You said:<br>There is a price difference, right?<br>ChatGPT said:<br>Yes, there is a price difference between using Custom GPT Actions and OpenAIâs API integration. Hereâs the breakdown:<br><br>ð° Cost of Using Custom GPT Actions<br>â Free (if using within ChatGPT Pro)<br>â No additional API costs<br>â No per-token billing<br><br>Why?<br>Custom GPT Actions run within ChatGPTâs existing infrastructure. OpenAI doesnât charge per request for actions, but you must be on a ChatGPT Pro plan ($20/month).<br><br>However, if the Action connects to an external database or service that has costs (e.g., AWS, Firebase, Supabase, etc.), youâll still need to pay for that separately.<br><br>ð° Cost of Using OpenAIâs API<br>â Pay-per-use pricing<br>â Costs depend on model + token usage<br><br>Current API Pricing (as of 2024)<br>Model Input (per 1K tokens) Output (per 1K tokens)<br>GPT-4-turbo $0.01 $0.03<br>GPT-4 $0.03 $0.06<br>GPT-3.5-turbo $0.0015 $0.002<br>Estimated API Cost for PBI Generation<br>If generating 5-10 PBIs at a time, a request might use 500-1000 tokens.<br>Cost per request: $0.005 - $0.02 (GPT-4-turbo)<br>If you generate PBIs 100 times per day:<br>GPT-4-turbo: ~$0.50 - $2/day<br>GPT-4: ~$1.50 - $6/day<br>GPT-3.5-turbo: ~$0.15 - $0.40/day<br>Additional Costs<br>Database storage: If using Firebase, AWS, or another DB, there may be small storage costs.<br>API Requests: If your project management tool has an API, it may have rate limits or extra costs.<br>Which is Cheaper?<br>If you already use ChatGPT Pro â Custom GPT Actions = FREE<br>No additional API costs.<br>Ideal if you just need to generate &amp; submit PBIs without extra complexity.<br>If you need external processing â OpenAI API = Paid (but scalable)<br>More expensive, but fully customizable.<br>Better if you want background processing, bulk PBI creation, or integrations.<br>ð Best Recommendation?<br>If youâre cost-conscious and just need basic PBI creation &amp; submission, start with Custom GPT Actions (free).<br><br>If you later need scalability, automation, and background AI processing, you can move to OpenAIâs API.<br><br>Would you like help defining a Custom GPT Action for submitting PBIs? ð¥<br><br>You said:<br>I want to do both but start with the API integration because I think that is what will evolve into a valuable feature with the possibilities for controlling the process and integrating it into the UI of our project management app.<br>It would be great to have the GPT action a backup for keeping costs down.<br>ChatGPT said:<br>That sounds like a great strategy! ð¯<br>By starting with API integration, you can fully control the process, customize it to fit the UI of your project management app, and enable deeper automation.<br><br>Later, implementing a Custom GPT Action as a backup will allow on-demand PBI creation while keeping costs down for smaller use cases.<br><br>â Step-by-Step Plan for API Integration<br>We\'ll start by integrating OpenAIâs API to generate PBIs and store them in your project management toolâs database.<br><br>Phase 1: API-Based PBI Submission<br>1ï¸â£ Define API Endpoints<br><br>POST /api/pbis â Accepts AI-generated PBIs and stores them in the database.<br>GET /api/pbis â Retrieves PBIs from the backlog.<br>2ï¸â£ Implement AI-Powered PBI Generation<br><br>Use OpenAIâs API (GPT-4-turbo) to generate Epics, User Stories, and Subtasks.<br>Apply Key Learnings &amp; Takeaways from past development.<br>3ï¸â£ Store PBIs in the Project Management Tool<br><br>Save PBIs in the AutoAgile database.<br>Attach metadata like priority, dependencies, and estimation.<br>4ï¸â£ Expose PBIs in the UI<br><br>Display PBIs in the backlog inside your Next.js app.<br>Allow user review &amp; refinement before finalizing.<br>Phase 2: Backup Solution - Custom GPT Action<br>If API costs become high, allow users to manually trigger a GPT Action to generate PBIs without API calls.<br><br>1ï¸â£ Create a Custom GPT Action<br><br>Action: generate_pbIs(feature_description: str) â JSON<br>Returns structured PBIs to be manually entered into the backlog.<br>2ï¸â£ Integrate with Your UI<br><br>Offer an option like "Generate PBIs via GPT" in the UI.<br>If API usage is high, fallback to GPT Action instead of API calls.<br>ð Next Steps<br>Would you like to:<br>1ï¸â£ Start defining the OpenAI API integration (set up endpoints, API calls)?<br>2ï¸â£ Set up the Custom GPT Action as a backup?<br>3ï¸â£ Plan both in parallel and create a roadmap?<br><br>You said:<br>Not yet. First:<br>1. I want us to discuss how it would be inplemented in the UI and provide the optimal UX.<br>2. Could we benefit from drafting the architecture, sequence diagrams, user flows?<br>3. Before we start coding, I want you to create PBIÂ´s for the project and estimate complexity.<br>4. Create psql commands for creating the PBIÂ´s.<br><br>Lets go through these steps one by one.<br><br>ChatGPT said:<br>Thatâs a solid structured approach! ð<br>By focusing on UX, architecture, planning, and PBI creation before coding, weâll ensure a smooth implementation with fewer rewrites.<br><br>ð Step 1: UI &amp; UX Discussion<br>Before implementing API-based PBI generation, we need to design how users will interact with it inside the Project Management System (PMS).<br><br>ð¯ Key UX Considerations<br><br>â Where Should PBI Creation Happen?<br><br>Inside the Backlog View? (Best for structured planning)<br>Inside a Feature Request modal? (Good for quick task creation)<br>As a standalone "AI Assistant" panel? (Best for guided AI interaction)<br><br>â What Input Does the AI Need?<br><br>- Free-text Feature Description (User types in an idea)<br><br>- Structured Input (e.g., dropdowns for project, priority, complexity)<br><br>- Existing Tasks as Context (AI refines based on project backlog)<br><br>If we would start the process by asking the user to select item(s) from the backlog or create a new PBI, then we could keep the original feature idea/request and have the entire history saved.<br><br>I think the process should run the following way:<br>1. The user selects an item from the backlog or creates a new one.<br>2. AI asks a series of questions to gather more information about the feature, the goals, what problem it will solve, the expected outcome, etc..<br>Also, I think the AI would benefit from having access to the projectâs history, the projectâs goals, the projectâs vision, the technical documentation.<br>We have to discuss what questions the AI should ask and how the user should input the answers.<br><br>â How Should the Output Be Handled?<br>Yes - Inline Editing: User sees generated PBIs and edits them before submission.<br>No - One-Click Submit: AI submits PBIs automatically.<br>Yes - Step-by-Step Refinement: AI asks clarifying questions before finalizing.<br><br>â Should the User See a Live Preview?<br>Yes â A real-time preview of the PBIs as the AI generates them.<br>No â AI generates them first, then the user reviews before submission.<br><br>â How Will Users Trigger AI PBI Generation?<br>Yes - Button â "Generate PBIs from Feature Request"<br>Maybe - Shortcut Command â /generate_pbi &lt;feature&gt;<br>No - Automated Suggestion â When a new feature is created, AI offers to generate PBIs<br><br>Instead of 3: Automated Suggestion â When a new feature is created, AI offers to help with refining the feature request and informs the user about the possibility of generating PBIs and what the feature request should include to make it easier for the AI to generate relevant PBIs.<br><br><br>ð Suggested UI Flows<br><br>## Option 1: AI-Powered Backlog View<br>ð¡ Best for Teams Who Plan in Sprints 1ï¸â£ User navigates to the Backlog View.<br>2ï¸â£ Clicks â+ AI Generate PBIsâ â A modal opens.<br>3ï¸â£ User inputs a feature description and selects project, priority, estimation strategy.<br>4. AI asks clarifying questions about the feature.<br>5. AI generates Epics, User Stories, and Subtasks.<br>6. User reviews and edits before submitting.<br><br>â Pros<br><br>Integrated into existing planning workflow.<br>Structured &amp; controlled task creation.<br>â Cons<br><br>Requires users to be inside the backlog to use AI.<br><br>## Option 2: Feature Request Modal with AI Assistance<br>ð¡ Best for Users Adding New Ideas 1ï¸â£ User opens Feature Request modal.<br>2ï¸â£ Enters high-level feature description.<br>3ï¸â£ Clicks âGenerate PBIsâ â AI suggests tasks.<br>4ï¸â£ User reviews, edits, and approves.<br>5ï¸â£ PBIs are pushed to the backlog.<br><br>â Pros<br><br>Works naturally when defining new features.<br>Faster workflow for brainstorming ideas.<br>â Cons<br><br>Might lack full backlog context when generating PBIs.<br><br>## Option 3: Dedicated AI Assistant Panel<br>ð¡ Best for Advanced AI-Driven Planning 1ï¸â£ User opens an âAI Assistantâ panel.<br>2ï¸â£ AI asks clarifying questions about the feature.<br>3ï¸â£ AI generates Epics, User Stories, and Subtasks dynamically.<br>4ï¸â£ User modifies or approves PBIs.<br>5ï¸â£ PBIs are automatically pushed to the backlog.<br><br>â Pros<br>More structured, guided PBI refinement.<br>AI helps users refine vague ideas into structured tasks.<br><br>â Cons<br>More complex UI to implement.<br><br>IÂ´m leaning towards option 1 with the added step 4. AI asks clarifying questions about the feature.<br><br>ð Whatâs Next?<br>1ï¸â£ Which UI flow do you prefer (Backlog, Feature Request Modal, AI Assistant)?<br>2ï¸â£ Would you like wireframes/mockups before moving to architecture diagrams?<br><br>See my answers in the list above:<br><br>Thatâs a fantastic refinement of the process! The form-based approach for AI clarifying questions makes a lot of sense. It improves UX efficiency and keeps the process structured, ensuring users don\'t feel overwhelmed by an open-ended conversation.<br><br>ð Finalized UI/UX Approach<br>â Option 1: AI-Powered Backlog View (with Clarifying Questions &amp; Form Input)<br>ð¡ Best for Teams Who Plan in Sprints 1ï¸â£ User selects an existing item from the backlog or creates a new feature request.<br>2ï¸â£ Clicks â+ AI Generate PBIsâ â A modal opens.<br>3ï¸â£ User inputs a feature description and selects project, priority, estimation strategy.<br>4ï¸â£ AI presents clarifying questions in a form UI (instead of free-text chat).<br>5ï¸â£ User fills in answers in structured fields â This data is stored for future reference.<br>6ï¸â£ AI generates Epics, User Stories, and Subtasks dynamically.<br>7ï¸â£ User reviews and edits before submitting PBIs to the backlog.<br><br>ð Why This Works Best<br>â Keeps the original feature request history â Tracks context properly.<br>â AI doesnât rely on unstructured responses â User inputs structured answers via the form.<br>â Faster, structured refinement process â Reduces ambiguity in AI-generated PBIs.<br>â Guided yet flexible â AI only asks for details when necessary (conditional logic in the form).<br>â More efficient user experience â No need to manually structure long text responses.<br><br>ð Next Steps<br>1ï¸â£ Define the AI Clarifying Questions for the Form<br>We need to list the essential clarifying questions AI should ask. Some of these will be always required, and others will be conditional (depending on the feature type, project, etc.).<br><br>Example questions:<br><br>What problem does this feature solve? (Always required)<br>Who is the primary user? (Required for user-facing features)<br>What is the expected outcome? (Always required)<br>Are there existing related tasks or dependencies? (Optional)<br>Does this feature impact security or performance? (Conditional: Only if related to infrastructure)<br>Would you like me to draft a complete list of questions based on best practices?<br><br>2ï¸â£ Create Wireframes for the Modal<br>Since weâre using a form-based approach instead of a chat-like UI, we should create wireframes for:<br><br>The initial âAI Generate PBIsâ modal<br>The form layout for clarifying questions<br>The final PBI preview screen<br>Do you want Figma wireframes or a quick text-based UI flow first?<br><br>3ï¸â£ Technical Considerations<br>Would you like the AI-generated clarifying questions to be:<br><br>Fixed (predefined in the UI)? â Simpler, but less flexible.<br>Dynamically generated (AI decides what to ask)? â More flexible, but requires more logic.<br>ð Letâs finalize these details so we can move into architecture and implementation!<br><br><br>You said:<br>1. draft a complete list of questions based on best practices + what you consider being valuable to be able to provide the best quality PBIÂ´s.<br><br>2. I think it should be a separate full page instead of a modal. <br>On that page user should be able to select a PBI from a dropdown combobox with search functionality.<br>(We are using headless UI combobox for the parent task selector)<br>From each PBI, the user should be able to click a button to open that PBI on the AI refinement page.<br><br>If you can provide figma wireframes that would be fantastic.<br><br>3. LetÂ´s start with the fixed questions, and then maybe add dynamically generated if needed.<br>ChatGPT said:<br>ð Step 1: Complete List of AI Clarifying Questions for High-Quality PBIs<br>The goal is to ensure AI-generated PBIs are highly structured, relevant, and actionable. Below is a best-practice-based question framework that balances user intent, technical feasibility, and product strategy.<br><br>ð¢ General Questions (Always Required)<br>What problem does this feature solve? (Userâs pain point, why itâs needed)<br>What is the expected outcome or benefit? (How success is measured)<br>Who is the primary user? (Developers, admins, end-users, etc.)<br>What should the AI avoid when generating PBIs? (Redundant features, conflicting solutions, etc.)<br>Does this relate to an existing Epic or User Story? (Ensures PBIs are linked to relevant work)<br>ð¡ Questions Based on Feature Type<br>ð¹ For UI/UX Features<br>What are the key UI components or interactions?<br>Should it follow an existing design system? (Yes/No - If yes, specify the system)<br>Are there any accessibility considerations? (WCAG, ARIA, keyboard navigation, etc.)<br>ð¹ For Backend/API Features<br>Which services, endpoints, or database models will be impacted?<br>Are there security concerns (authentication, authorization, sensitive data)?<br>Does it require performance optimizations (caching, async processing, etc.)?<br>ð¹ For Automation or AI-Powered Features<br>Should the system make automatic decisions, or require human approval?<br>What are the key inputs and outputs?<br>Are there ethical concerns with automation (bias, transparency, etc.)?<br>ð¹ For Integrations<br>Which external service(s) will this integrate with?<br>Are there API rate limits or other constraints?<br>Should the system sync data in real-time or on a schedule?<br>ð¹ For Performance-Related Features<br>What is the current bottleneck? (DB queries, large payloads, front-end rendering, etc.)<br>Whatâs the performance expectation? (e.g., Reduce response time from 500ms â 100ms)<br>ð  Workflow &amp; Dependencies<br>Are there any preconditions before this can be implemented? (Feature flags, migrations, etc.)<br>Does it require collaboration across teams? (Design, DevOps, Security, etc.)<br>Are there known risks or potential blockers? (Legacy code dependencies, technical debt, etc.)<br>ð£ Estimation &amp; Prioritization<br>What is the priority level? (Critical, High, Medium, Low)<br>Whatâs the estimated impact? (Revenue, user retention, operational efficiency)<br>Are there any deadlines or time-sensitive constraints? (Launch dates, dependencies, etc.)<br>ð¡ Expected AI Output<br>Using these questions, AI should generate:<br><br>â Epics (High-level objectives)<br>â User Stories (Breaking down the work for users)<br>â Subtasks (Actionable development steps)<br>This structured input ensures AI can create high-quality, actionable PBIs instead of vague tasks.<br><br>ð Step 2: Wireframes - Full Page UI for AI Refinement<br>Iâll create Figma wireframes showcasing the full-page AI refinement process with:<br><br>Dropdown Combobox (Headless UI) to select an existing PBI.<br>AI-Powered Refinement Page (Clarifying Questions + PBI Generation).<br>Buttons to Open &amp; Edit PBIs in the System.<br>ð¹ Let me generate the wireframes and share them with you shortly. ð<br><br>ð Step 3: Fixed Questions First, Dynamic Later<br>â Weâll start with fixed questions (predefined in the UI) to keep the process structured. â If we later need more intelligent, adaptive AI prompts, we can introduce dynamic question generation.<br><br>ð¯ Next Steps<br>1ï¸â£ I\'ll generate and share the Figma wireframes.<br>2ï¸â£ Once we have UI approval, weâll define the API &amp; database structure.<br>3ï¸â£ Then, we move to implementation ð.<br><br>Let me work on the wireframes now! ð¨ð<br><br>You said:<br>A lot of the questions in step 1 could be answered by giving the AI access to technical doccumentation. <br>If the AI doesnÂ´t find the answer there, then the question should be asked. <br>ChatGPT said:<br>Thatâs a fantastic approach! ð By leveraging technical documentation, we can reduce user input fatigue and ensure AI-generated PBIs are as accurate as possible.<br><br>ð¹ Refining the AI Questioning Process<br>Instead of blindly asking all 25+ questions, we will implement a smart, two-step process:<br><br>Step 1: Auto-Extract Answers from Technical Documentation<br>ð Before asking the user anything, AI will try to find the answer from:<br><br>Projectâs API Documentation (Endpoints, models, authentication, rate limits).<br>Database Schema (Relationships, constraints, existing data models).<br>Projectâs Vision &amp; Goals (Product strategy, company objectives).<br>Past User Stories &amp; Epics (Ensuring consistency with previous PBIs).<br>Best Practices &amp; Key Learnings (Mistakes to avoid, past development issues).<br>Step 2: Ask Only the Unanswered Questions<br>ð If AI canât find an answer, it will only ask the missing information.<br><br>For example:<br><br>If API docs specify affected endpoints, AI skips âWhich endpoints will be impacted?â<br>If the database schema reveals relationships, AI skips âWhat data models are involved?â<br>If a past User Story addressed similar issues, AI suggests improvements instead of asking from scratch.<br>ð¹ UX Implementation: Full-Page AI Refinement Flow<br>â Step 1: User selects or creates a PBI.<br>â Step 2: AI scans project documentation for answers.<br>â Step 3: AI generates PBIs, showing:<br><br>ð¹ Pre-filled answers from documentation.<br>ð¹ Questions only for missing details.<br>â Step 4: User reviews &amp; refines before submitting.<br>This ensures: ð Less manual input â AI handles most of the work.<br>ð More accurate PBIs â AI cross-checks against existing docs.<br>ð Faster process â Users answer only what AI canât infer.<br><br>ð¹ Whatâs Next?<br>1ï¸â£ Figma Wireframes â Iâll create the UX flow for AI refinement.<br>2ï¸â£ Technical Documentation Strategy â We define:<br><br>ð Where &amp; how AI should access project documentation.<br>ð Which docs are needed for different PBI types.<br>3ï¸â£ Implementation Plan â Define how AI extracts, processes &amp; asks questions.<br>Would you like me to proceed with wireframes first or technical documentation strategy first? ð<br><br>You said:<br>AI Estimation is the next thing we should include, so donÂ´t bother asking the user for that.<br>ChatGPT said:<br>Got it! ð AI will automatically estimate Story Points instead of asking the user.<br><br>ð¹ How AI Will Estimate Story Points<br>Instead of manually entering estimates, AI will calculate complexity, effort, and uncertainty based on:<br><br>1ï¸â£ Complexity Analysis<br><br>Database impact â Does it involve schema changes? Complex relationships?<br>API impact â Are new endpoints needed? Major refactoring required?<br>Frontend impact â Is it a UI change or deep business logic?<br>Security concerns â Are there authentication/authorization risks?<br>2ï¸â£ Effort Calculation<br><br>Lines of code (LOC) prediction â Based on past PBIs of similar scope.<br>Number of components affected â More files = higher effort.<br>Testing needs â How much unit &amp; integration testing is required?<br>3ï¸â£ Uncertainty Rating<br><br>Does the AI find enough documentation?<br>Does this feature require new technology?<br>Does the feature involve high unknowns (e.g., 3rd party integrations)?<br>ð Estimation Output (Fibonacci Scale) AI will output a story point estimate (1, 2, 3, 5, 8, 13...) with reasoning:<br><br>ð¢ Low Complexity â 1-3 Points<br>ð¡ Moderate Complexity â 5-8 Points<br>ð´ High Complexity &amp; Unknowns â 13+ Points<br>ð¹ Next Steps<br>1ï¸â£ Figma Wireframes (Integrate AI estimation in UI).<br>2ï¸â£ Define Estimation Algorithm (How AI calculates effort).<br>3ï¸â£ Implement AI Estimation API (Story Point prediction).<br><br>Where should AI show the estimated Story Points?<br><br>Inside the PBI form? (User sees it before submission).<br>Only in the backlog? (After PBI is saved).<br>Let me know, and Iâll include it in the wireframes! ð<br><br>You said:<br>I want the AI estimation included in the task description and currently all tasks have a field for estimation where user can enter story points, instead of adding another field for AI estimate IÂ´m thinking we could indicate if estimation is set by AI or if it is human edited. What do you think?<br>ChatGPT said:<br>Thatâs a great approach! It keeps the UI clean while still allowing users to see whether the estimate was AI-generated or manually adjusted.<br><br>ð¹ How to Implement AI Estimation in the Task Description<br>1ï¸â£ Story Points Field Behavior:<br><br>AI auto-generates an initial estimate when a PBI is created.<br>The user can edit the estimate manually if they disagree.<br>If the user changes the AI estimate, we mark it as human-edited.<br>2ï¸â£ Indicating AI vs. Human Estimates:<br><br>AI-generated estimate â Display a small "AI" badge next to the number.<br>User-edited estimate â Display a "User Edited" label (or remove the AI badge).<br>3ï¸â£ Example UI Representations:<br><br>AI Estimate: Story Points: 5 (AI)<br>User-Edited: Story Points: 8 (User Edited)<br>ð¹ Backend &amp; Database Changes<br>Keep the existing story_points field.<br><br>Add a new field: is_ai_estimate (true/false)<br><br>true â AI-generated<br>false â Manually overridden<br>When AI sets the estimate, is_ai_estimate = true.<br><br>If a user changes the estimate, set is_ai_estimate = false.<br><br>ð¹ User Flow<br>1ï¸â£ AI suggests an estimate when the PBI is created.<br>2ï¸â£ User can keep it or edit it.<br>3ï¸â£ If edited, it switches from AI to user-edited.<br>4ï¸â£ The UI reflects whether the estimate is AI-generated or manually adjusted.<br><br>ð¹ Advantages of This Approach<br>â Minimal UI clutter â No extra fields.<br>â Users stay in control â AI assists but doesnât dictate.<br>â Clear distinction between AI-generated &amp; human-set values.<br>â Easy implementation â Just an extra is_ai_estimate field.<br><br>Next Steps<br>ð¹ Update PBI Creation Flow to auto-assign AI estimates.<br>ð¹ Modify UI to display AI/User-edited status.<br>ð¹ Ensure API updates is_ai_estimate correctly.<br><br>Would you like this logic to be included in the Figma wireframes? ð<br><br>You said:<br>Yes<br>ChatGPT said:<br>Great! Iâll now create Figma wireframes incorporating the AI Estimation Flow into the Task Refinement Page.<br><br>ð Wireframe Features<br>ð¹ Full-Page AI Refinement UI (instead of a modal)<br>ð¹ Dropdown Combobox for Selecting a PBI (Headless UI)<br>ð¹ Structured Form-Based AI Q&amp;A for refinement<br>ð¹ Story Points Section:<br><br>Shows AI-estimated points with an "AI" badge<br>Allows manual override (switching to "User Edited")<br>Iâll generate the wireframes now! ð Stay tuned. ð¨<br><br><br>Here is the wireframe for the AI-powered task refinement page! ð¨<br><br>Key Features in the Wireframe:<br>â Full-page layout for refining PBIs<br>â Dropdown combobox with search functionality to select a PBI<br>â AI-driven structured form where AI asks questions and users respond<br>â Story Points Estimation section:<br><br>Shows AI-generated values with an "AI" badge<br>Allows manual override, switching to a "User Edited" label<br>Would you like any modifications before we move forward with implementation? ð<br><br>You said:<br>Can you provide a text based UI description instead?<br>I just need the different components of the page that is needed and then I can do layout and design myself.<br>ChatGPT said:<br>AI-Powered Task Refinement Page - UI Structure<br>This page provides a structured interface for refining PBIs with AI assistance. Below is a breakdown of all the key UI components that should be included.<br><br>ð Main Components<br>1ï¸â£ Page Header (Fixed at the Top)<br>Title: "AI-Powered Task Refinement"<br>Back Button: Returns to the backlog view<br>Help Icon: Opens a tooltip explaining how AI refinement works<br>2ï¸â£ Task Selection Section<br>Label: "Select a PBI to refine"<br>Dropdown Combobox (Headless UI)<br>Allows searching and selecting an existing PBI<br>Displays title &amp; ID of each task<br>Optional: Show the task type (Epic, User Story, Subtask)<br>Button: "Open Task in AI Refinement"<br>3ï¸â£ AI-Assisted Refinement Form (Dynamic Based on Task)<br>Section Title: "Refinement Questions"<br>Questions Panel<br>AI provides structured questions based on the selected task<br>Questions should be grouped by categories (e.g., Goals, Technical Details, Dependencies)<br>Each question has:<br>A text input (for short answers) or a textarea (for detailed explanations)<br>Pre-filled values if available from technical documentation<br>AI-generated suggestions (editable)<br>Toggle: "Show AI Recommendations"<br>Expands a section with AI-generated recommendations for this task<br>4ï¸â£ AI Estimation &amp; Task Metadata<br>Label: "Estimation &amp; Task Metadata"<br>Story Points Field:<br>Displays the AI-estimated story points (default)<br>Allows manual override with a "User Edited" indicator<br>Additional Metadata:<br>Task Priority (Low, Medium, High)<br>Dependencies (Auto-detected &amp; user-editable)<br>Related Epics / Stories<br>5ï¸â£ Actions &amp; Submission<br>Primary Button: "Submit to Backlog"<br>Secondary Button: "Save Draft" (to store refinement progress without submitting)<br>AI Chat History Panel (Optional): Displays past AI interactions for reference<br>ð¡ Notes &amp; Considerations<br>Form should autosave periodically to prevent data loss<br>If the user switches tasks, ask for confirmation before discarding unsaved changes<br>AI should fetch relevant project documentation before asking unnecessary questions<br>Would you like to adjust any sections or add more details? ð<br><br>You said:<br>Some suggested changes:<br>1. It should be possible to add a parent task including all subtasks, in case the user has already worked on creating epic, user stories and subtasks. That way AI gets the whole feature description and can start over.<br>2. We alreadu use autosave with debounced and we also use websockets for real time updates.<br>3. We need a simple settings page where user can choose AI provider (OpenAI to start with) and input API credentials:<br>ChatGPT said:<br>Great suggestions! Hereâs the updated UI structure incorporating your changes:<br><br>ð AI-Powered Task Refinement Page - Updated UI Structure<br>This page enables users to refine PBIs with AI assistance, while ensuring flexibility for existing task hierarchies, real-time updates, and AI provider settings.<br><br>1ï¸â£ Page Header (Fixed at the Top)<br>Title: "AI-Powered Task Refinement"<br>Back Button: Returns to the backlog view<br>Help Icon: Opens a tooltip explaining how AI refinement works<br>2ï¸â£ Task Selection Section<br>Label: "Select a PBI or Parent Task to Refine"<br>Dropdown Combobox (Headless UI)<br>Searchable dropdown to select an individual task (PBI, User Story, or Subtask)<br>Checkbox: "Include all subtasks" (if a parent task is selected)<br>Optional: Show task type (Epic, User Story, Subtask)<br>Button: "Open in AI Refinement"<br>â New Feature: If a parent task is selected with "Include all subtasks," the AI receives the full feature breakdown instead of an isolated task.<br><br>3ï¸â£ AI-Assisted Refinement Form<br>Section Title: "AI-Powered Refinement Questions"<br>Questions Panel<br>AI generates structured questions based on the selected task(s)<br>Grouped Categories:<br>Feature Goals &amp; Outcomes<br>Technical Requirements<br>Dependencies &amp; Risks<br>Acceptance Criteria<br>Each question has:<br>A text input (for short answers) or a textarea (for detailed explanations)<br>Pre-filled values if available from technical documentation<br>AI-generated suggestions (editable)<br>Toggle: "Show AI Recommendations"<br>Expands a section with AI-generated recommendations for this task<br>â New Feature: If the user selects a parent task with subtasks, AI dynamically adjusts questions to consider the full hierarchy.<br><br>4ï¸â£ AI Estimation &amp; Task Metadata<br>Label: "Estimation &amp; Task Metadata"<br>Story Points Field:<br>AI-generated story points (default)<br>Allows manual override with a "User Edited" indicator<br>Additional Metadata:<br>Task Priority (Low, Medium, High)<br>Dependencies (Auto-detected &amp; user-editable)<br>Related Epics / Stories<br>â New Feature: Parent-child relationships are preserved, meaning AI-generated metadata accounts for linked tasks.<br><br>5ï¸â£ Real-Time Updates &amp; Autosave<br>WebSocket-Enabled: Any changes made instantly update other users in real-time<br>Debounced Autosave: Saves progress periodically to prevent data loss<br>Undo/Redo: Simple history tracking for user changes<br>â New Feature: Uses existing WebSocket + debounced autosave setup for seamless real-time updates.<br><br>6ï¸â£ Actions &amp; Submission<br>Primary Button: "Submit to Backlog"<br>Secondary Button: "Save Draft" (stores refinement progress without submitting)<br>AI Chat History Panel (Optional): Displays past AI interactions for reference<br>7ï¸â£ AI Provider Settings Page<br>Page Title: "AI Integration Settings"<br>Dropdown: "Select AI Provider" (Starting with OpenAI)<br>Future support for multiple providers (Anthropic, Azure, Local AI, etc.)<br>API Key Input Field<br>Test Connection Button (Validates API credentials)<br>Save Settings Button<br>â New Feature: Centralized AI provider settings so users can configure API credentials before using AI-powered refinement.<br><br>Final Thoughts<br>â Supports full feature refinement (Epics + Subtasks)<br>â Uses real-time WebSocket updates + autosave (no lost work)<br>â Gives users control over AI-generated estimations<br>â Modular AI provider integration for future flexibility<br><br>ð Would you like any additional refinements before we move forward?<br><br>You said:<br>How do we give AI permission to write in the database?<br>ChatGPT said:<br>Granting AI Permission to Write to the Database<br>For AI to write to the database, we need a secure and controlled mechanism to ensure data integrity, security, and prevent unauthorized access.<br><br>1ï¸â£ Recommended Approach: Secure API Endpoint<br>Instead of allowing AI direct access to the database, we expose a controlled API that the AI can interact with.<br><br>â Steps to Implement<br>Create an API Endpoint (e.g., /api/pbis)<br><br>Accepts AI-generated Epics, User Stories, Subtasks<br>Validates input before saving to DB<br>Use API Authentication<br><br>API Key or OAuth2 Token: AI must authenticate before sending requests.<br>Store AI credentials securely in environment variables.<br>Define Access Controls<br><br>Restrict AI to specific actions (e.g., insert PBIs, update fields)<br>Role-Based Access Control (RBAC): AI should have a limited DB role (e.g., ai_writer).<br>Validate AI-Generated Data<br><br>Enforce schema validation (e.g., JSON Schema)<br>Apply business rules (e.g., prevent circular dependencies)<br>Use an AI Service Account<br><br>AI interacts as a designated system user (not a superuser)<br>Logs all AI interactions for auditability<br>2ï¸â£ Backend Implementation<br>ð Create the API Route (/api/pbis)<br>python<br>Copy<br>Edit<br>from flask import Blueprint, request, jsonify<br>from models import db, PBI<br>from auth_middleware import verify_ai_auth<br><br>bp = Blueprint("ai_pbi_api", __name__)<br><br>@bp.route("/api/pbis", methods=["POST"])<br>@verify_ai_auth # â Require AI authentication<br>def create_pbi():<br>"""Handles AI-generated PBI creation"""<br><br>data = request.json<br>if not data:<br>return jsonify({"error": "No data provided"}), 400<br><br># â Validate input structure<br>required_fields = ["title", "description", "task_type", "priority"]<br>if not all(field in data for field in required_fields):<br>return jsonify({"error": "Missing required fields"}), 400<br><br># â Insert into database<br>new_pbi = PBI(<br>title=data["title"],<br>description=data["description"],<br>task_type=data["task_type"],<br>priority=data.get("priority", "Medium"),<br>estimated_points=data.get("estimated_points", None), # AI estimate<br>created_by="AI", # Track source<br>)<br><br>db.session.add(new_pbi)<br>db.session.commit()<br><br>return jsonify({"message": "PBI created successfully", "id": new_pbi.id}), 201<br>3ï¸â£ AI Authentication &amp; Security<br>ð Use API Keys to Restrict Access<br>Middleware for AI Authentication (auth_middleware.py):<br><br>python<br>Copy<br>Edit<br>from flask import request, jsonify<br>import os<br><br>VALID_AI_API_KEY = os.getenv("AI_API_KEY")<br><br>def verify_ai_auth(func):<br>"""Middleware to verify AI authentication"""<br>def wrapper(*args, **kwargs):<br>api_key = request.headers.get("X-API-Key")<br>if api_key != VALID_AI_API_KEY:<br>return jsonify({"error": "Unauthorized AI access"}), 403<br>return func(*args, **kwargs)<br>return wrapper<br>â AI must send a valid API key in the request headers:<br><br>json<br>Copy<br>Edit<br>{<br>"title": "Implement AI Task Refinement",<br>"description": "Break down AI task refinement into structured PBIs",<br>"task_type": "Epic",<br>"priority": "High",<br>"estimated_points": 8<br>}<br>ð¡ Security Best Practices<br><br>Rotate API Keys regularly<br>Use role-based permissions<br>Log all AI interactions for debugging &amp; auditing<br>Limit AIâs scope to only modifying PBIs (not users, projects, etc.)<br>4ï¸â£ PostgreSQL Database Role for AI<br>Instead of granting full DB access, create a limited-access AI role:<br><br>sql<br>Copy<br>Edit<br>-- Create a restricted AI role<br>CREATE ROLE ai_writer WITH LOGIN PASSWORD \'securepassword\';<br><br>-- Grant permission to insert PBIs but not delete them<br>GRANT INSERT, UPDATE ON pbis TO ai_writer;<br>5ï¸â£ WebSocket Integration (Optional)<br>If using real-time updates, AI should broadcast new PBIs:<br><br>python<br>Copy<br>Edit<br>from flask_socketio import emit<br><br>@bp.route("/api/pbis", methods=["POST"])<br>@verify_ai_auth<br>def create_pbi():<br>...<br>db.session.commit()<br><br># ð¥ Notify frontend in real-time<br>emit("pbi_created", {"id": new_pbi.id, "title": new_pbi.title}, broadcast=True)<br><br>return jsonify({"message": "PBI created successfully", "id": new_pbi.id}), 201<br>ð Final Summary<br>â API Gateway: AI writes via /api/pbis<br>â Secure Authentication: AI must provide an API key<br>â Database Role: AI is limited to inserting/updating PBIs only<br>â Schema Validation: Ensures AI submits valid data<br>â Real-Time Updates: WebSocket notifications for new PBIs<br>ð¯ Next Steps<br>Would you like:<br><br>To implement a similar API for retrieving PBIs? (GET /api/pbis)<br>AI role to have limited UPDATE access for task refinements?<br>A test script to verify AI authentication &amp; data submission?<br>You said:<br>IÂ´m saving you questions for later.<br><br>For now letÂ´s get back on track:<br><br>Can you rewrite the entire plan based on what we have agreed on so far and then move on to step 2.<br><br>1. [COMPLETED] I want us to discuss how it would be inplemented in the UI and provide the optimal UX.<br>2. Could we benefit from drafting the architecture, sequence diagrams, user flows?<br>3. Before we start coding, I want you to create PBIÂ´s for the project and estimate complexity.<br>4. Create psql commands for creating the PBIÂ´s.<br><br>Lets go through these steps one by one.<br>ChatGPT said:<br>AI-Powered PBI Generation &amp; Integration Plan<br>Overview<br>We are developing an AI-powered system that automates the generation and refinement of Epics, User Stories, and Subtasks in our Project Management System (PMS). The system will allow users to refine feature ideas through a structured, guided AI interaction and directly submit PBIs (Product Backlog Items) into the backlog.<br><br>â Phase 1: UI/UX Implementation Plan (Completed)<br>We have defined the best user experience (UX) strategy and identified how users will interact with the AI-driven PBI refinement system.<br><br>ð¹ UI/UX Key Decisions<br>Where PBI Creation Happens<br><br>Inside the Backlog View â AI-assisted refinement happens within the backlog planning workflow.<br>Standalone Full-Page PBI Refinement View â Instead of a modal, we will use a full-page AI refinement interface.<br>How the User Provides Input<br><br>Users select an existing PBI from a searchable combobox (Headless UI)<br>Users can also add a parent task, including all its subtasks, ensuring AI gets full context.<br>How AI Refines PBIs<br><br>AI asks structured, best-practice questions<br>AI accesses technical documentation before asking questions, avoiding redundant prompts.<br>Inline Editing: AI suggests PBIs, and the user can edit before finalizing.<br>Step-by-Step Refinement: AI refines tasks dynamically based on user responses.<br>How Users Trigger AI PBI Generation<br><br>Button: "Generate PBIs from Feature Request"<br>AI Guidance: AI offers to help refine a new feature request when a user creates a new PBI.<br>Shortcut Command: /generate_pbi &lt;feature&gt;<br>How AI Estimation Works<br><br>AI assigns story points based on complexity<br>The estimation field tracks whether it was set by AI or manually edited by the user.<br>Users can override AI estimates manually.<br>ð¹ Finalized UI Components for PBI Refinement Page<br>ð PBI Refinement Page (Full-Screen UI)<br>ð Searchable Dropdown (Combobox)<br><br>Users search &amp; select a PBI from the backlog.<br>Users can add a parent task + subtasks for AI to analyze.<br>ð AI Question Form<br><br>AI asks structured questions to refine the feature request.<br>AI auto-fills answers when possible (from project history/docs).<br>User fills in missing details manually.<br>ð AI-Generated PBIs Section<br><br>AI dynamically generates Epics, User Stories, and Subtasks.<br>PBIs appear in real-time as AI refines them.<br>Users can edit PBIs inline before submission.<br>ð AI Story Point Estimation<br><br>AI auto-assigns story points based on complexity.<br>Indicator shows if estimation was set by AI or edited by the user.<br>ð Autosave &amp; WebSockets<br><br>Debounced auto-save ensures changes are not lost.<br>WebSockets enable real-time updates across team members.<br>ð  Settings Page<br><br>AI Provider Selection: OpenAI (default)<br>API Key Input: Secure credentials storage for AI integration.<br>ð Phase 2: Architecture, Sequence Diagrams &amp; User Flows<br>Why Do We Need This?<br>Before coding, we should draft architectural diagrams to:<br><br>Visualize the AIâs role in the PMS system.<br>Map the user flow from input to AI-generated PBIs.<br>Ensure database integration is structured correctly.<br>Avoid unnecessary rewrites by planning dependencies.<br>ð Key Architectural Components<br>1ï¸â£ Frontend UI<br><br>Next.js React App<br>Full-page AI refinement view<br>Headless UI Combobox for PBI selection<br>Real-time UI updates via WebSockets<br>2ï¸â£ AI Processing<br><br>AI fetches context from technical documentation &amp; backlog<br>AI generates PBIs dynamically using structured rules<br>AI assigns story points automatically<br>AI questions the user only when necessary (context-aware questioning)<br>3ï¸â£ Backend API<br><br>/api/pbis â AI submits PBIs<br>/api/pbis/:id â Retrieve PBIs for AI refinement<br>Authentication middleware (API keys for AI)<br>WebSockets for real-time updates<br>4ï¸â£ Database Schema Changes<br><br>Track whether AI or user set story points<br>Store AI-generated questions &amp; answers for auditing<br>Link PBIs to their refined feature requests<br>ð Next Steps<br>1ï¸â£ Create High-Level Architecture Diagram<br>How the UI, AI processing, and backend interact<br>Illustrate AI refinement flow &amp; database interactions<br>2ï¸â£ Define Sequence Diagrams<br>User selects a feature request â AI processes it â PBIs are generated<br>AI refines questions dynamically based on available data<br>3ï¸â£ Map User Flows<br>Step-by-step process from selecting a PBI to AI refinement &amp; submission<br>Flowchart of AI interaction (when to ask, when to auto-fill answers)<br>Would you like me to generate initial architecture &amp; sequence diagrams now? ð<br><br>You said:<br>Yes, I would like that but you also need to know waht I use for backend, right?<br>Python / flask and postgreSQL. <br>ChatGPT said:<br>Yes, knowing that your backend is built with Python / Flask and PostgreSQL is crucial for designing the architecture and sequence diagrams effectively.<br><br>I will now generate the following:<br><br>1ï¸â£ High-Level Architecture Diagram â How the UI, AI processing, and backend interact.<br>2ï¸â£ Sequence Diagram â How a PBI is refined by AI and submitted to the database.<br>3ï¸â£ User Flow Diagram â How users interact with AI-driven PBI refinement.<br><br>Since we are using Flask for the backend, I will ensure that the API endpoints and WebSocket handling align with Flaskâs best practices. Iâll also consider PostgreSQL schema changes to store AI-generated PBIs effectively.<br><br>I will now generate these diagrams. Stay tuned! ð¨ð<br><br><br>Analysis errored<br>python<br>Always show details<br><br>Copy<br>import matplotlib.pyplot as plt<br>import matplotlib.patches as mpatches<br><br>def draw_architecture_diagram():<br>fig, ax = plt.subplots(figsize=(10, 6))<br><br># Title<br>ax.set_title("High-Level Architecture: AI-Driven PBI Refinement", fontsize=14, fontweight="bold")<br><br># Components<br>components = {<br>"Frontend (Next.js)": (0.2, 0.8),<br>"AI Processing (GPT-4 API)": (0.5, 0.8),<br>"Backend API (Flask)": (0.8, 0.8),<br>"PostgreSQL Database": (0.8, 0.5),<br>"WebSockets (Real-time Updates)": (0.5, 0.5)<br>}<br><br># Draw components<br>for label, (x, y) in components.items():<br>ax.add_patch(mpatches.FancyBboxPatch((x-0.1, y-0.05), 0.2, 0.1, boxstyle="round,pad=0.1", <br>facecolor="lightblue", edgecolor="black"))<br>ax.text(x, y, label, ha="center", va="center", fontsize=10, fontweight="bold")<br><br># Arrows<br>arrows = [<br>((0.2, 0.8), (0.5, 0.8)), # Frontend â AI Processing<br>((0.5, 0.8), (0.8, 0.8)), # AI Processing â Backend API<br>((0.8, 0.8), (0.8, 0.5)), # Backend API â PostgreSQL<br>((0.8, 0.5), (0.8, 0.8)), # PostgreSQL â Backend API<br>((0.8, 0.8), (0.5, 0.5)), # Backend API â WebSockets<br>((0.5, 0.5), (0.2, 0.8)) # WebSockets â Frontend<br>]<br><br>for start, end in arrows:<br>ax.annotate("", xy=end, xytext=start, arrowprops=dict(arrowstyle="-&gt;", lw=2))<br><br># Hide axes<br>ax.set_xticks([])<br>ax.set_yticks([])<br>ax.set_frame_on(False)<br><br># Show diagram<br>plt.show()<br><br># Draw the architecture diagram<br>draw_architecture_diagram()<br>I encountered an issue generating the architecture diagram. Let me try again. \u200b\u200b<br><br><br>Analysis errored<br>python<br>Always show details<br><br>Copy<br>import matplotlib.pyplot as plt<br>import matplotlib.patches as mpatches<br><br>def draw_architecture_diagram():<br>fig, ax = plt.subplots(figsize=(10, 6))<br><br># Title<br>ax.set_title("High-Level Architecture: AI-Driven PBI Refinement", fontsize=14, fontweight="bold")<br><br># Components<br>components = {<br>"Frontend (Next.js)": (0.2, 0.8),<br>"AI Processing (GPT-4 API)": (0.5, 0.8),<br>"Backend API (Flask)": (0.8, 0.8),<br>"PostgreSQL Database": (0.8, 0.5),<br>"WebSockets (Real-time Updates)": (0.5, 0.5)<br>}<br><br># Draw components<br>for label, (x, y) in components.items():<br>ax.add_patch(mpatches.FancyBboxPatch((x-0.1, y-0.05), 0.2, 0.1, boxstyle="round,pad=0.1", <br>facecolor="lightblue", edgecolor="black"))<br>ax.text(x, y, label, ha="center", va="center", fontsize=10, fontweight="bold")<br><br># Arrows<br>arrows = [<br>((0.2, 0.8), (0.5, 0.8)), # Frontend â AI Processing<br>((0.5, 0.8), (0.8, 0.8)), # AI Processing â Backend API<br>((0.8, 0.8), (0.8, 0.5)), # Backend API â PostgreSQL<br>((0.8, 0.5), (0.8, 0.8)), # PostgreSQL â Backend API<br>((0.8, 0.8), (0.5, 0.5)), # Backend API â WebSockets<br>((0.5, 0.5), (0.2, 0.8)) # WebSockets â Frontend<br>]<br><br>for start, end in arrows:<br>ax.annotate("", xy=end, xytext=start, arrowprops=dict(arrowstyle="-&gt;", lw=2))<br><br># Hide axes<br>ax.set_xticks([])<br>ax.set_yticks([])<br>ax.set_frame_on(False)<br><br># Show diagram<br>plt.show()<br><br># Draw the architecture diagram<br>draw_architecture_diagram()<br>I encountered an issue generating the architecture diagram. Instead, I\'ll describe it textually:<br><br>High-Level Architecture for AI-Driven PBI Refinement<br>This architecture integrates Next.js (Frontend), Flask (Backend API), PostgreSQL (Database), GPT-4 API, and WebSockets for real-time updates.<br><br>Components &amp; Flow:<br>Frontend (Next.js)<br><br>User selects a feature request from the backlog.<br>Inputs details and triggers AI-powered PBI generation.<br>Displays AI-generated Epics, User Stories, and Subtasks.<br>Supports real-time updates via WebSockets.<br>AI Processing (GPT-4 API)<br><br>Receives feature descriptions and additional context.<br>Generates structured PBIs based on predefined rules and user input.<br>Returns the refined tasks to the backend.<br>Backend API (Flask)<br><br>Routes API requests between frontend and AI service.<br>Validates and processes AI-generated PBIs.<br>Stores tasks in PostgreSQL.<br>Emits WebSocket events for real-time updates.<br>PostgreSQL Database<br><br>Stores all Epics, User Stories, and Subtasks.<br>Keeps track of AI-generated vs. user-edited PBIs.<br>Supports search and retrieval.<br>WebSockets (Flask-SocketIO)<br><br>Sends real-time updates when PBIs are refined or modified.<br>Ensures users see immediate changes.<br>Next, I will draft sequence diagrams and user flows for how the AI-powered PBI refinement process works. Stay tuned! ð \u200b\u200b<br><br>You said:<br>Please continue<br>ChatGPT said:<br>Step 2: Drafting Architecture, Sequence Diagrams, and User Flows<br>1ï¸â£ Sequence Diagram: AI-Driven PBI Refinement Process<br>Actors:<br>User: Interacts with the UI to refine and submit PBIs.<br>Frontend (Next.js): Sends user input to the backend and displays results.<br>Backend (Flask API): Processes requests and interacts with AI &amp; DB.<br>AI Service (GPT-4 API): Generates PBIs based on input.<br>PostgreSQL Database: Stores PBIs and project data.<br>ð ï¸ Step-by-Step Process (Refinement Flow)<br>1. User selects a PBI to refine<br>Opens the AI Refinement Page.<br>Selects an existing Feature Request from a searchable dropdown.<br>(Optional) Adds a parent task to include all subtasks.<br>2. AI Queries Additional Context<br>AI first searches project documentation (if available).<br>If AI finds missing information, it generates a set of questions.<br>User answers questions in a structured form UI.<br>AI refines its understanding.<br>3. AI Generates PBIs<br>AI generates:<br>Epics<br>User Stories<br>Subtasks<br>Assigns Story Points (AI estimation).<br>Saves metadata (dependencies, priorities, assignments).<br>4. User Reviews &amp; Modifies<br>The user can:<br>Edit task descriptions (inline).<br>Adjust AI estimations (AI tag remains visible).<br>Remove irrelevant PBIs.<br>5. PBIs are Auto-Saved &amp; Updated<br>Changes are debounced &amp; saved automatically.<br>WebSockets broadcast changes in real time to all users.<br>6. PBIs are Submitted to Backlog<br>When satisfied, the user confirms submission.<br>The system:<br>Inserts PBIs into PostgreSQL.<br>Marks them as ready for execution.<br>2ï¸â£ User Flow: AI-Powered Task Refinement<br>ð¢ User selects a feature request â ð¡ AI refines using project data â ð  User answers missing details â ðµ AI generates structured PBIs â ð£ User reviews &amp; submits<br><br>3ï¸â£ Key Backend API Endpoints<br>These will be implemented in Flask.<br><br>Endpoint Method Description<br>/api/pbis POST Submit AI-generated PBIs to the backlog<br>/api/pbis/refine POST AI generates/refines PBIs<br>/api/pbis/questions GET AI fetches clarification questions if required<br>/api/pbis/{pbi_id} PATCH Updates a PBI after user edits<br>/api/pbis/{pbi_id}/submit POST Confirms PBI submission<br>4ï¸â£ Database Schema Updates (PostgreSQL)<br>To support AI-powered task refinement, we add new fields:<br><br>sql<br>Copy<br>Edit<br>ALTER TABLE tasks ADD COLUMN ai_generated BOOLEAN DEFAULT FALSE;<br>ALTER TABLE tasks ADD COLUMN refinement_status TEXT DEFAULT \'Pending\';<br>ALTER TABLE tasks ADD COLUMN estimation_source TEXT DEFAULT \'User\';<br>5ï¸â£ Next Steps<br>âï¸ Architecture, API endpoints, and database updates are drafted.<br>â¡ï¸ Next: Move to Step 3 (Creating PBIs &amp; Estimating Complexity). ð<br><br>Let me know if you want any modifications before proceeding!<br><br>You said:<br>Where should we store the documentation?<br>Where in the UI should the user upload the documentation?<br>Is it possible to get the documentation automatically from an integration?<br>Like GitHub, VScode?<br>Provided that the documentation exist there.<br>Add a simple settings page where user can input API key and credentials.<br>ChatGPT said:<br>ð Storing &amp; Managing Documentation for AI-Powered PBI Refinement<br>To ensure AI can access relevant project documentation for refining PBIs, we need a structured way to store, retrieve, and update documentation. Below is the plan:<br><br>1ï¸â£ Where Should We Store Documentation?<br>Option 1: PostgreSQL (Best for Structured Documentation)<br>Store documentation as text in a dedicated table.<br>Allows version control and easy retrieval.<br>Can be indexed for faster AI retrieval.<br>Table: project_documentation<br>sql<br>Copy<br>Edit<br>CREATE TABLE project_documentation (<br>id SERIAL PRIMARY KEY,<br>project_id INT REFERENCES projects(id) ON DELETE CASCADE,<br>title TEXT NOT NULL,<br>content TEXT NOT NULL,<br>source TEXT DEFAULT \'Manual Upload\',<br>uploaded_by INT REFERENCES users(id),<br>created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP<br>);<br>â Pros:<br><br>AI can efficiently search and extract relevant details.<br>Allows tagging &amp; filtering by source (e.g., GitHub, VS Code, Manual Upload).<br>Option 2: External File Storage (Best for Large Documents)<br>Store Markdown, TXT, or PDF files in an S3 bucket (AWS, Firebase, etc.).<br>Only metadata is stored in PostgreSQL.<br>AI retrieves and processes the files when needed.<br>Table: documentation_files<br>sql<br>Copy<br>Edit<br>CREATE TABLE documentation_files (<br>id SERIAL PRIMARY KEY,<br>project_id INT REFERENCES projects(id) ON DELETE CASCADE,<br>file_url TEXT NOT NULL,<br>file_type TEXT NOT NULL CHECK (file_type IN (\'md\', \'txt\', \'pdf\')),<br>uploaded_by INT REFERENCES users(id),<br>created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP<br>);<br>â Pros:<br><br>Supports larger documents that may not fit in PostgreSQL.<br>Allows manual file uploads and auto-fetching from integrations.<br>2ï¸â£ Where in the UI Should the User Upload Documentation?<br>ð Dedicated "Documentation Management" Page (Settings)<br>Location: Inside Settings &gt; Documentation.<br>Features:<br>Upload Markdown, TXT, PDF files.<br>View &amp; Edit existing documentation.<br>Connect integrations (GitHub, VS Code, Notion, etc.).<br>Configure AI access permissions for each document.<br>3ï¸â£ Automatic Documentation Retrieval<br>â Can We Integrate with GitHub, VS Code, or Notion?<br>Yes! We can fetch project documentation automatically from these sources:<br><br>Integration Method Use Case<br>GitHub Fetch .md files via API Pull documentation from repos<br>VS Code Read local .md files Sync local project docs<br>Notion API connection Import structured docs<br>Google Drive API connection Fetch shared project docs<br>ð¡ Example: GitHub API Integration<br>Fetch .md documentation from a GitHub repo:<br><br>python<br>Copy<br>Edit<br>import requests<br><br>GITHUB_TOKEN = "your_personal_token"<br>REPO_OWNER = "your_username"<br>REPO_NAME = "your_project"<br><br>url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/docs"<br>headers = {"Authorization": f"token {GITHUB_TOKEN}"}<br><br>response = requests.get(url, headers=headers)<br>files = response.json()<br><br>for file in files:<br>if file["name"].endswith(".md"):<br>doc_content = requests.get(file["download_url"]).text<br>print("Fetched Documentation:", doc_content)<br>â Pros:<br><br>Automatically syncs up-to-date documentation from GitHub.<br>AI can use repo docs before asking the user for details.<br>4ï¸â£ Simple Settings Page for AI API &amp; Integrations<br>ð Location: Settings &gt; AI &amp; Integrations<br><br>â User Can:<br><br>Enter OpenAI API Key.<br>Connect GitHub Repo (OAuth or Token).<br>Enable Auto-Fetch from VS Code, Notion, Google Drive.<br>Set AI Access Rules (e.g., Allow AI to modify docs?).<br>ð§ Database Table: integration_settings<br>sql<br>Copy<br>Edit<br>CREATE TABLE integration_settings (<br>id SERIAL PRIMARY KEY,<br>user_id INT REFERENCES users(id),<br>integration_name TEXT NOT NULL,<br>api_key TEXT NOT NULL,<br>is_enabled BOOLEAN DEFAULT TRUE,<br>created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP<br>);<br>ð Next Steps<br>â Implement API endpoints for documentation storage &amp; retrieval.<br>â Build a simple settings page to manage AI API &amp; integrations.<br>â Set up GitHub/VS Code sync for fetching docs automatically.<br><br>Would you like mockups or wireframes for the settings page? ðIÂ´m still in planning mode, so letÂ´s continue.<br><br><br>## AI driven creation of Epics, User stories and Subtasks.<br><br>I have, on several occasions when we have discussed a new feature and outlined a high level plan asked you to create epics, user stories and subtasks for the feature. <br><br>You are very good at this and it saves a lot of time compared to writing them manually. <br><br>However, we could create a process of this and include some steps were we go through some exercises that will help increase the quality of the output. <br>IÂ´m thinking about:<br><br>1. Check PBIÂ´s against the list of key learnings &amp; takeaways for future development<br><br>After every session we do a retrospective where we summarize the session. One section of the summary is a list of key learnings &amp; takeaways for future development. Those should be appended to a complete list of key takeaways for future development.<br><br>Every time we create epics, user stories and subtasks for a new feature we should check them against this checklist of key learnings &amp; takeaways for future development. We can then include reminder notes about this in the tasks they are relevant for. This way we will reduce repeating mistakes, be aware of technical considerations we have to adhere to etc..<br><br>2. Maybe use frameworks like user story mapping<br><br>3. Any other ideas for increasing quality. <br><br>## Estimation:<br><br>I have also asked you to estimate the complexity of the tasks using story points. <br><br>### We have used this framework for estimation:<br><br>We estimate tasks using **story points** with the **Fibonacci scale** (1, 2, 3, 5, 8, 13, etc.) That allows us to gauge the **complexity, effort, and uncertainty** associated with each task.<br><br>GPT (You) will assess every feature based on:<br><br>1. **Complexity**: How difficult the task is (e.g., architecture, database relationships, etc.).<br>2. **Effort**: How much time and effort will be required to code, test, and debug.<br>3. **Uncertainty**: Any unknowns or potential challenges (e.g., interacting with new parts of the system, external factors).<br><br>### **Benchmarking**:<br><br>To give context to these estimates:<br><br>- **1-2 Points**: Minor changes like renaming variables, small bug fixes.<br>- **3-5 Points**: Moderate tasks, involving some new logic, minor database changes, and testing.<br>- **8+ Points**: More complex tasks, like introducing new models, changing relationships in the database, or modifying core app logic with potential unknowns.<br><br>### Typical output for a user story:<br><br>ð¢ User Story 1: Implement Parent Task Dropdown in Task Modal<br>As a user, I want to assign or change a parent task directly from the task modal, so that I can organize my tasks efficiently.<br><br>â Acceptance Criteria:<br><br>A dropdown appears in the task modal, listing all valid parent tasks.<br>Prevents selection of circular dependencies.<br>Updates the parent task dynamically upon selection.<br>Displays correct hierarchy after updates.<br>ð Estimation: 5 Story Points<br><br>Complexity: Moderate â Needs task filtering, validation logic, and UI integration.<br>Effort: Moderate â Requires API calls, handling UI state, and testing.<br>Uncertainty: Low â We understand the task relationships well.<br><br><br>This is all a part of a larger idea about how to streamline and improve the quality of the entire product development lifecycle and development process.<br><br>## MVP version<br>IÂ´ve been trying to figure out what would be the most valuable step to start building a feature for.<br><br>I think it is a feature that will allow you (AI) to submit these PBIÂ´s into the backlog of my project management tool and then be able to read them back from the tool.<br><br>So the first draft of the feature would be to create a function that can take a PBI and submit it to the db of the project management tool.<br><br>## Version 2:<br>Next step would be to create a function that can read the PBIs from the db and return them as a list.<br><br>## Version 3<br>To take the whole process of refining a simple feature idea or request into more detailed and actionable PBIÂ´s and integrate it into the project management tool.<br><br>### This would involve the following requirements:<br>- It needs to be a guided process, not just an inline chat.<br>- Both the user and the AI should follow the process.<br><br>To be further discussed....<br>I have a documented ideas in this notion file:<br><a target="_blank" rel="noopener noreferrer" href="https://www.notion.so/lacunamedia/Automating-task-creation-in-autoagile-191979257fc08007a001c3c2dc0a773f?pvs=4">https://www.notion.so/lacunamedia/Automating-task-creation-in-autoagile-191979257fc08007a001c3c2dc0a773f?pvs=4</a><br><br>## The development process:<br>Generating code for the feature based on the PBIÂ´s.<br>The process of you (AI) and me coding together is a process of itÂ´s own that we are working on a plan for optimizing. <br>See separate document: \'optimizing_our_development_process.md\' <br><br><br><br>How can we automate the whole process of:<br><br>1. Create Epics, User stories and subtasks from a refined feature request.<br>2. Script them into the database of autoagile<br>3. Allow AI to read the tasks<br><br><br>This is a great initiative that will systematize and automate the process of turning feature ideas into well-structured PBIs (Epics, User Stories, and Subtasks). Below is a structured approach to refining and implementing this system.<br><br>ð Summary of the Planned Process<br>We are aiming to automate the workflow of refining a feature request into actionable PBIs and integrating them directly into the project management tool. The long-term vision is to ensure quality, consistency, and efficiency in product development.<br><br>ð Proposed Steps for Automating AI-Driven PBI Creation<br>1ï¸â£ Create Epics, User Stories &amp; Subtasks from a Refined Feature Request<br>ð¹ Step 1: Validate PBIs Against "Key Learnings &amp; Takeaways"<br><br>After every session, we capture Key Learnings &amp; Takeaways for future development.<br>When generating new PBIs, we cross-check them against this checklist.<br>If relevant, reminder notes are added to tasks (e.g., âAvoid X issue seen in past developmentâ).<br>â Benefit: Prevent repeated mistakes, ensure technical consistency.<br><br>ð¹ Step 2: Use Frameworks to Improve PBI Quality<br><br>User Story Mapping: Break down the feature based on user journeys.<br>Impact Mapping: Understand the business &amp; user impact.<br>Jobs-to-Be-Done (JTBD): Define tasks based on what the user is trying to achieve.<br>BDD (Behavior-Driven Development) Scenarios: Define Acceptance Criteria in a structured format.<br>â Benefit: Increases clarity, prioritization, and alignment with user goals.<br><br>ð¹ Step 3: Automate AI-Driven PBI Generation<br><br>AI takes a high-level feature request and breaks it down into Epics, User Stories, and Subtasks.<br>AI adds relevant acceptance criteria and ensures no conflicting dependencies.<br>User can review &amp; refine before submitting to the backlog.<br>â Benefit: Reduces manual effort, ensures consistency.<br><br>2ï¸â£ Submit PBIs to the AutoAgile Database<br>ð¹ Step 4: Create API for AI to Submit PBIs<br><br>A POST API endpoint will allow AI to write PBIs into the project management system.<br>AI will assign metadata (e.g., priority, estimated effort, dependencies).<br>â Benefit: Ensures a structured backlog instead of scattered notes.<br><br>3ï¸â£ Allow AI to Read and Retrieve PBIs<br>ð¹ Step 5: Create API to Fetch PBIs<br><br>A GET API endpoint will allow AI to retrieve PBIs from the database.<br>This enables PBI iteration, tracking, and refinement.<br>â Benefit: AI can refine &amp; adjust PBIs dynamically over time.<br><br>4ï¸â£ Version 3: Full AI-Driven PBI Refinement Process<br>ð¹ Step 6: Create a Guided Process for PBI Refinement Instead of an inline chat, we build a structured UI to guide both the user and AI in refining PBIs.<br><br>Step 1: User provides initial feature request.<br>Step 2: AI asks clarifying questions (e.g., âIs this a new feature or an improvement?â).<br>Step 3: AI generates Epics, User Stories &amp; Subtasks.<br>Step 4: AI applies learnings from past development.<br>Step 5: User reviews &amp; refines before finalizing.<br>Step 6: PBIs are submitted to the backlog.<br>â Benefit: Ensures high-quality PBIs while keeping the user in control.<br><br>ð ï¸ Technical Implementation Plan<br>Phase 1 (MVP)<br>â Backend:<br><br>Create a POST /api/pbis endpoint to submit PBIs.<br>Store PBIs in the AutoAgile database.<br>â Frontend:<br><br>Simple form UI for submitting PBIs.<br>Allow users to review &amp; edit before submission.<br>â AI Integration:<br><br>AI generates PBIs using structured templates.<br>AI checks against the Key Learnings &amp; Takeaways.<br>Phase 2 (API Retrieval)<br>â Backend:<br><br>Create GET /api/pbis to fetch PBIs.<br>Support filtering by status, priority, and dependencies.<br>â Frontend:<br><br>Display PBIs in the backlog.<br>Allow users to edit, refine &amp; iterate on PBIs.<br>Phase 3 (Full AI-Driven Workflow)<br>â Backend:<br><br>Implement AI-powered iterative refinement.<br>Store AI-generated clarifying questions &amp; user responses.<br>â Frontend:<br><br>Guided multi-step process for refining PBIs.<br>Interactive user review step before final submission.<br>â AI Integration:<br><br>AI actively asks clarifying questions before generating PBIs.<br>AI learns from past PBIs and Key Learnings to improve over time.<br>ð Key Benefits of This System<br>â Automates repetitive work â AI breaks down features into PBIs.<br>â Ensures higher quality PBIs â AI cross-checks with Key Learnings.<br>â Prevents dependency issues â AI validates task relationships.<br>â Creates a structured backlog â PBIs are stored systematically.<br>â Streamlines estimation â AI assigns story points based on complexity.<br>â Saves developer time â Faster iteration &amp; execution of product features.<br><br>ð Next Steps<br>ð Would you like to start with Phase 1 (Submitting PBIs to the database)?<br>Or do you want to explore UI/UX ideas for the guided process first?<br><br>You said:<br>Does this require an integration to for example OpenAIÂ´s API or is it possible to create an Action in a custom GPT and when triggering that action the PBIÂ´s are submitted to the db? <br>ChatGPT said:<br>It does not necessarily require OpenAIâs API integration if we use Custom GPT Actions. Hereâs how both approaches would work:<br><br>1ï¸â£ Using Custom GPT Actions (No API Integration Needed)<br>â How It Works<br>Instead of calling an external API, we can define an Action in a Custom GPT that directly interacts with the database.<br><br>Trigger the Action<br><br>You (the user) initiate a request:<br>"Generate PBIs for the new feature and submit them to the backlog."<br>AI Generates PBIs<br><br>Based on the feature description, the AI structures Epics, User Stories, and Subtasks.<br>AI assigns story points, dependencies, and priority.<br>AI Executes the Action<br><br>The Custom GPT Action runs, submitting the generated PBIs directly into the project management toolâs database.<br>Confirmation &amp; Review<br><br>The system can return a confirmation message:<br>"PBIs have been submitted. Would you like to refine them further?"<br>â Whatâs Needed to Implement This?<br>Define a Custom GPT Action<br><br>The Action should be configured to execute a database query.<br>Example: "INSERT INTO pbis (title, description, type, priority, estimated_points) VALUES (...) "<br>Grant Secure Database Access<br><br>Custom GPT must be allowed to execute database operations securely.<br>We need a secure connection with proper authentication.<br>Ensure Query Execution is Reliable<br><br>Add error handling to prevent duplicate or incorrect entries.<br>Test &amp; Verify Data Submission<br><br>Run test cases to confirm PBIs are structured correctly in the backlog.<br>ð¥ Pros of Using Custom GPT Actions<br>â No External API Required â Runs fully within the GPT modelâs environment.<br>â Faster Development â No need for external API setup.<br>â Tighter Integration with AI â AI can validate &amp; refine PBIs before submission.<br>â More Secure â Data never leaves the controlled environment.<br><br>2ï¸â£ Using OpenAIâs API for External Integration<br>If you prefer a fully programmatic approach, you can call OpenAIâs API from your backend and integrate it with your project management tool.<br><br>â How It Works<br>Your backend sends a request to OpenAIâs API, asking it to generate PBIs.<br>OpenAIâs API returns structured PBIs (Epics, User Stories, Subtasks).<br>Your system validates the PBIs before inserting them into the database.<br>Your frontend retrieves and displays the PBIs in the backlog.<br>ð¥ Pros of OpenAIâs API Approach<br>â More Customization â You control prompts, data structure, and validation.<br>â Can Run in the Background â Ideal for scheduled task automation.<br>â Scales Better â Works well for large teams &amp; real-time AI interactions.<br><br>ð· Which Approach Should You Use?<br>ð¹ If you want a fast, no-setup solution, go with Custom GPT Actions.<br>ð¹ If you need more control, background processing, or external API calls, use OpenAIâs API.<br><br>ð Would you like help setting up a Custom GPT Action for submitting PBIs?<br><br>You said:<br>There is a price difference, right?<br>ChatGPT said:<br>Yes, there is a price difference between using Custom GPT Actions and OpenAIâs API integration. Hereâs the breakdown:<br><br>ð° Cost of Using Custom GPT Actions<br>â Free (if using within ChatGPT Pro)<br>â No additional API costs<br>â No per-token billing<br><br>Why?<br>Custom GPT Actions run within ChatGPTâs existing infrastructure. OpenAI doesnât charge per request for actions, but you must be on a ChatGPT Pro plan ($20/month).<br><br>However, if the Action connects to an external database or service that has costs (e.g., AWS, Firebase, Supabase, etc.), youâll still need to pay for that separately.<br><br>ð° Cost of Using OpenAIâs API<br>â Pay-per-use pricing<br>â Costs depend on model + token usage<br><br>Current API Pricing (as of 2024)<br>Model Input (per 1K tokens) Output (per 1K tokens)<br>GPT-4-turbo $0.01 $0.03<br>GPT-4 $0.03 $0.06<br>GPT-3.5-turbo $0.0015 $0.002<br>Estimated API Cost for PBI Generation<br>If generating 5-10 PBIs at a time, a request might use 500-1000 tokens.<br>Cost per request: $0.005 - $0.02 (GPT-4-turbo)<br>If you generate PBIs 100 times per day:<br>GPT-4-turbo: ~$0.50 - $2/day<br>GPT-4: ~$1.50 - $6/day<br>GPT-3.5-turbo: ~$0.15 - $0.40/day<br>Additional Costs<br>Database storage: If using Firebase, AWS, or another DB, there may be small storage costs.<br>API Requests: If your project management tool has an API, it may have rate limits or extra costs.<br>Which is Cheaper?<br>If you already use ChatGPT Pro â Custom GPT Actions = FREE<br>No additional API costs.<br>Ideal if you just need to generate &amp; submit PBIs without extra complexity.<br>If you need external processing â OpenAI API = Paid (but scalable)<br>More expensive, but fully customizable.<br>Better if you want background processing, bulk PBI creation, or integrations.<br>ð Best Recommendation?<br>If youâre cost-conscious and just need basic PBI creation &amp; submission, start with Custom GPT Actions (free).<br><br>If you later need scalability, automation, and background AI processing, you can move to OpenAIâs API.<br><br>Would you like help defining a Custom GPT Action for submitting PBIs? ð¥<br><br>You said:<br>I want to do both but start with the API integration because I think that is what will evolve into a valuable feature with the possibilities for controlling the process and integrating it into the UI of our project management app.<br>It would be great to have the GPT action a backup for keeping costs down.<br>ChatGPT said:<br>That sounds like a great strategy! ð¯<br>By starting with API integration, you can fully control the process, customize it to fit the UI of your project management app, and enable deeper automation.<br><br>Later, implementing a Custom GPT Action as a backup will allow on-demand PBI creation while keeping costs down for smaller use cases.<br><br>â Step-by-Step Plan for API Integration<br>We\'ll start by integrating OpenAIâs API to generate PBIs and store them in your project management toolâs database.<br><br>Phase 1: API-Based PBI Submission<br>1ï¸â£ Define API Endpoints<br><br>POST /api/pbis â Accepts AI-generated PBIs and stores them in the database.<br>GET /api/pbis â Retrieves PBIs from the backlog.<br>2ï¸â£ Implement AI-Powered PBI Generation<br><br>Use OpenAIâs API (GPT-4-turbo) to generate Epics, User Stories, and Subtasks.<br>Apply Key Learnings &amp; Takeaways from past development.<br>3ï¸â£ Store PBIs in the Project Management Tool<br><br>Save PBIs in the AutoAgile database.<br>Attach metadata like priority, dependencies, and estimation.<br>4ï¸â£ Expose PBIs in the UI<br><br>Display PBIs in the backlog inside your Next.js app.<br>Allow user review &amp; refinement before finalizing.<br>Phase 2: Backup Solution - Custom GPT Action<br>If API costs become high, allow users to manually trigger a GPT Action to generate PBIs without API calls.<br><br>1ï¸â£ Create a Custom GPT Action<br><br>Action: generate_pbIs(feature_description: str) â JSON<br>Returns structured PBIs to be manually entered into the backlog.<br>2ï¸â£ Integrate with Your UI<br><br>Offer an option like "Generate PBIs via GPT" in the UI.<br>If API usage is high, fallback to GPT Action instead of API calls.<br>ð Next Steps<br>Would you like to:<br>1ï¸â£ Start defining the OpenAI API integration (set up endpoints, API calls)?<br>2ï¸â£ Set up the Custom GPT Action as a backup?<br>3ï¸â£ Plan both in parallel and create a roadmap?<br><br>You said:<br>Not yet. First:<br>1. I want us to discuss how it would be inplemented in the UI and provide the optimal UX.<br>2. Could we benefit from drafting the architecture, sequence diagrams, user flows?<br>3. Before we start coding, I want you to create PBIÂ´s for the project and estimate complexity.<br>4. Create psql commands for creating the PBIÂ´s.<br><br>Lets go through these steps one by one.<br><br>ChatGPT said:<br>Thatâs a solid structured approach! ð<br>By focusing on UX, architecture, planning, and PBI creation before coding, weâll ensure a smooth implementation with fewer rewrites.<br><br>ð Step 1: UI &amp; UX Discussion<br>Before implementing API-based PBI generation, we need to design how users will interact with it inside the Project Management System (PMS).<br><br>ð¯ Key UX Considerations<br><br>â Where Should PBI Creation Happen?<br><br>Inside the Backlog View? (Best for structured planning)<br>Inside a Feature Request modal? (Good for quick task creation)<br>As a standalone "AI Assistant" panel? (Best for guided AI interaction)<br><br>â What Input Does the AI Need?<br><br>- Free-text Feature Description (User types in an idea)<br><br>- Structured Input (e.g., dropdowns for project, priority, complexity)<br><br>- Existing Tasks as Context (AI refines based on project backlog)<br><br>If we would start the process by asking the user to select item(s) from the backlog or create a new PBI, then we could keep the original feature idea/request and have the entire history saved.<br><br>I think the process should run the following way:<br>1. The user selects an item from the backlog or creates a new one.<br>2. AI asks a series of questions to gather more information about the feature, the goals, what problem it will solve, the expected outcome, etc..<br>Also, I think the AI would benefit from having access to the projectâs history, the projectâs goals, the projectâs vision, the technical documentation.<br>We have to discuss what questions the AI should ask and how the user should input the answers.<br><br>â How Should the Output Be Handled?<br>Yes - Inline Editing: User sees generated PBIs and edits them before submission.<br>No - One-Click Submit: AI submits PBIs automatically.<br>Yes - Step-by-Step Refinement: AI asks clarifying questions before finalizing.<br><br>â Should the User See a Live Preview?<br>Yes â A real-time preview of the PBIs as the AI generates them.<br>No â AI generates them first, then the user reviews before submission.<br><br>â How Will Users Trigger AI PBI Generation?<br>Yes - Button â "Generate PBIs from Feature Request"<br>Maybe - Shortcut Command â /generate_pbi &lt;feature&gt;<br>No - Automated Suggestion â When a new feature is created, AI offers to generate PBIs<br><br>Instead of 3: Automated Suggestion â When a new feature is created, AI offers to help with refining the feature request and informs the user about the possibility of generating PBIs and what the feature request should include to make it easier for the AI to generate relevant PBIs.<br><br><br>ð Suggested UI Flows<br><br>## Option 1: AI-Powered Backlog View<br>ð¡ Best for Teams Who Plan in Sprints 1ï¸â£ User navigates to the Backlog View.<br>2ï¸â£ Clicks â+ AI Generate PBIsâ â A modal opens.<br>3ï¸â£ User inputs a feature description and selects project, priority, estimation strategy.<br>4. AI asks clarifying questions about the feature.<br>5. AI generates Epics, User Stories, and Subtasks.<br>6. User reviews and edits before submitting.<br><br>â Pros<br><br>Integrated into existing planning workflow.<br>Structured &amp; controlled task creation.<br>â Cons<br><br>Requires users to be inside the backlog to use AI.<br><br>## Option 2: Feature Request Modal with AI Assistance<br>ð¡ Best for Users Adding New Ideas 1ï¸â£ User opens Feature Request modal.<br>2ï¸â£ Enters high-level feature description.<br>3ï¸â£ Clicks âGenerate PBIsâ â AI suggests tasks.<br>4ï¸â£ User reviews, edits, and approves.<br>5ï¸â£ PBIs are pushed to the backlog.<br><br>â Pros<br><br>Works naturally when defining new features.<br>Faster workflow for brainstorming ideas.<br>â Cons<br><br>Might lack full backlog context when generating PBIs.<br><br>## Option 3: Dedicated AI Assistant Panel<br>ð¡ Best for Advanced AI-Driven Planning 1ï¸â£ User opens an âAI Assistantâ panel.<br>2ï¸â£ AI asks clarifying questions about the feature.<br>3ï¸â£ AI generates Epics, User Stories, and Subtasks dynamically.<br>4ï¸â£ User modifies or approves PBIs.<br>5ï¸â£ PBIs are automatically pushed to the backlog.<br><br>â Pros<br>More structured, guided PBI refinement.<br>AI helps users refine vague ideas into structured tasks.<br><br>â Cons<br>More complex UI to implement.<br><br>IÂ´m leaning towards option 1 with the added step 4. AI asks clarifying questions about the feature.<br><br>ð Whatâs Next?<br>1ï¸â£ Which UI flow do you prefer (Backlog, Feature Request Modal, AI Assistant)?<br>2ï¸â£ Would you like wireframes/mockups before moving to architecture diagrams?<br><br>See my answers in the list above:<br><br>Thatâs a fantastic refinement of the process! The form-based approach for AI clarifying questions makes a lot of sense. It improves UX efficiency and keeps the process structured, ensuring users don\'t feel overwhelmed by an open-ended conversation.<br><br>ð Finalized UI/UX Approach<br>â Option 1: AI-Powered Backlog View (with Clarifying Questions &amp; Form Input)<br>ð¡ Best for Teams Who Plan in Sprints 1ï¸â£ User selects an existing item from the backlog or creates a new feature request.<br>2ï¸â£ Clicks â+ AI Generate PBIsâ â A modal opens.<br>3ï¸â£ User inputs a feature description and selects project, priority, estimation strategy.<br>4ï¸â£ AI presents clarifying questions in a form UI (instead of free-text chat).<br>5ï¸â£ User fills in answers in structured fields â This data is stored for future reference.<br>6ï¸â£ AI generates Epics, User Stories, and Subtasks dynamically.<br>7ï¸â£ User reviews and edits before submitting PBIs to the backlog.<br><br>ð Why This Works Best<br>â Keeps the original feature request history â Tracks context properly.<br>â AI doesnât rely on unstructured responses â User inputs structured answers via the form.<br>â Faster, structured refinement process â Reduces ambiguity in AI-generated PBIs.<br>â Guided yet flexible â AI only asks for details when necessary (conditional logic in the form).<br>â More efficient user experience â No need to manually structure long text responses.<br><br>ð Next Steps<br>1ï¸â£ Define the AI Clarifying Questions for the Form<br>We need to list the essential clarifying questions AI should ask. Some of these will be always required, and others will be conditional (depending on the feature type, project, etc.).<br><br>Example questions:<br><br>What problem does this feature solve? (Always required)<br>Who is the primary user? (Required for user-facing features)<br>What is the expected outcome? (Always required)<br>Are there existing related tasks or dependencies? (Optional)<br>Does this feature impact security or performance? (Conditional: Only if related to infrastructure)<br>Would you like me to draft a complete list of questions based on best practices?<br><br>2ï¸â£ Create Wireframes for the Modal<br>Since weâre using a form-based approach instead of a chat-like UI, we should create wireframes for:<br><br>The initial âAI Generate PBIsâ modal<br>The form layout for clarifying questions<br>The final PBI preview screen<br>Do you want Figma wireframes or a quick text-based UI flow first?<br><br>3ï¸â£ Technical Considerations<br>Would you like the AI-generated clarifying questions to be:<br><br>Fixed (predefined in the UI)? â Simpler, but less flexible.<br>Dynamically generated (AI decides what to ask)? â More flexible, but requires more logic.<br>ð Letâs finalize these details so we can move into architecture and implementation!<br><br><br>You said:<br>1. draft a complete list of questions based on best practices + what you consider being valuable to be able to provide the best quality PBIÂ´s.<br><br>2. I think it should be a separate full page instead of a modal. <br>On that page user should be able to select a PBI from a dropdown combobox with search functionality.<br>(We are using headless UI combobox for the parent task selector)<br>From each PBI, the user should be able to click a button to open that PBI on the AI refinement page.<br><br>If you can provide figma wireframes that would be fantastic.<br><br>3. LetÂ´s start with the fixed questions, and then maybe add dynamically generated if needed.<br>ChatGPT said:<br>ð Step 1: Complete List of AI Clarifying Questions for High-Quality PBIs<br>The goal is to ensure AI-generated PBIs are highly structured, relevant, and actionable. Below is a best-practice-based question framework that balances user intent, technical feasibility, and product strategy.<br><br>ð¢ General Questions (Always Required)<br>What problem does this feature solve? (Userâs pain point, why itâs needed)<br>What is the expected outcome or benefit? (How success is measured)<br>Who is the primary user? (Developers, admins, end-users, etc.)<br>What should the AI avoid when generating PBIs? (Redundant features, conflicting solutions, etc.)<br>Does this relate to an existing Epic or User Story? (Ensures PBIs are linked to relevant work)<br>ð¡ Questions Based on Feature Type<br>ð¹ For UI/UX Features<br>What are the key UI components or interactions?<br>Should it follow an existing design system? (Yes/No - If yes, specify the system)<br>Are there any accessibility considerations? (WCAG, ARIA, keyboard navigation, etc.)<br>ð¹ For Backend/API Features<br>Which services, endpoints, or database models will be impacted?<br>Are there security concerns (authentication, authorization, sensitive data)?<br>Does it require performance optimizations (caching, async processing, etc.)?<br>ð¹ For Automation or AI-Powered Features<br>Should the system make automatic decisions, or require human approval?<br>What are the key inputs and outputs?<br>Are there ethical concerns with automation (bias, transparency, etc.)?<br>ð¹ For Integrations<br>Which external service(s) will this integrate with?<br>Are there API rate limits or other constraints?<br>Should the system sync data in real-time or on a schedule?<br>ð¹ For Performance-Related Features<br>What is the current bottleneck? (DB queries, large payloads, front-end rendering, etc.)<br>Whatâs the performance expectation? (e.g., Reduce response time from 500ms â 100ms)<br>ð  Workflow &amp; Dependencies<br>Are there any preconditions before this can be implemented? (Feature flags, migrations, etc.)<br>Does it require collaboration across teams? (Design, DevOps, Security, etc.)<br>Are there known risks or potential blockers? (Legacy code dependencies, technical debt, etc.)<br>ð£ Estimation &amp; Prioritization<br>What is the priority level? (Critical, High, Medium, Low)<br>Whatâs the estimated impact? (Revenue, user retention, operational efficiency)<br>Are there any deadlines or time-sensitive constraints? (Launch dates, dependencies, etc.)<br>ð¡ Expected AI Output<br>Using these questions, AI should generate:<br><br>â Epics (High-level objectives)<br>â User Stories (Breaking down the work for users)<br>â Subtasks (Actionable development steps)<br>This structured input ensures AI can create high-quality, actionable PBIs instead of vague tasks.<br><br>ð Step 2: Wireframes - Full Page UI for AI Refinement<br>Iâll create Figma wireframes showcasing the full-page AI refinement process with:<br><br>Dropdown Combobox (Headless UI) to select an existing PBI.<br>AI-Powered Refinement Page (Clarifying Questions + PBI Generation).<br>Buttons to Open &amp; Edit PBIs in the System.<br>ð¹ Let me generate the wireframes and share them with you shortly. ð<br><br>ð Step 3: Fixed Questions First, Dynamic Later<br>â Weâll start with fixed questions (predefined in the UI) to keep the process structured. â If we later need more intelligent, adaptive AI prompts, we can introduce dynamic question generation.<br><br>ð¯ Next Steps<br>1ï¸â£ I\'ll generate and share the Figma wireframes.<br>2ï¸â£ Once we have UI approval, weâll define the API &amp; database structure.<br>3ï¸â£ Then, we move to implementation ð.<br><br>Let me work on the wireframes now! ð¨ð<br><br>You said:<br>A lot of the questions in step 1 could be answered by giving the AI access to technical doccumentation. <br>If the AI doesnÂ´t find the answer there, then the question should be asked. <br>ChatGPT said:<br>Thatâs a fantastic approach! ð By leveraging technical documentation, we can reduce user input fatigue and ensure AI-generated PBIs are as accurate as possible.<br><br>ð¹ Refining the AI Questioning Process<br>Instead of blindly asking all 25+ questions, we will implement a smart, two-step process:<br><br>Step 1: Auto-Extract Answers from Technical Documentation<br>ð Before asking the user anything, AI will try to find the answer from:<br><br>Projectâs API Documentation (Endpoints, models, authentication, rate limits).<br>Database Schema (Relationships, constraints, existing data models).<br>Projectâs Vision &amp; Goals (Product strategy, company objectives).<br>Past User Stories &amp; Epics (Ensuring consistency with previous PBIs).<br>Best Practices &amp; Key Learnings (Mistakes to avoid, past development issues).<br>Step 2: Ask Only the Unanswered Questions<br>ð If AI canât find an answer, it will only ask the missing information.<br><br>For example:<br><br>If API docs specify affected endpoints, AI skips âWhich endpoints will be impacted?â<br>If the database schema reveals relationships, AI skips âWhat data models are involved?â<br>If a past User Story addressed similar issues, AI suggests improvements instead of asking from scratch.<br>ð¹ UX Implementation: Full-Page AI Refinement Flow<br>â Step 1: User selects or creates a PBI.<br>â Step 2: AI scans project documentation for answers.<br>â Step 3: AI generates PBIs, showing:<br><br>ð¹ Pre-filled answers from documentation.<br>ð¹ Questions only for missing details.<br>â Step 4: User reviews &amp; refines before submitting.<br>This ensures: ð Less manual input â AI handles most of the work.<br>ð More accurate PBIs â AI cross-checks against existing docs.<br>ð Faster process â Users answer only what AI canât infer.<br><br>ð¹ Whatâs Next?<br>1ï¸â£ Figma Wireframes â Iâll create the UX flow for AI refinement.<br>2ï¸â£ Technical Documentation Strategy â We define:<br><br>ð Where &amp; how AI should access project documentation.<br>ð Which docs are needed for different PBI types.<br>3ï¸â£ Implementation Plan â Define how AI extracts, processes &amp; asks questions.<br>Would you like me to proceed with wireframes first or technical documentation strategy first? ð<br><br>You said:<br>AI Estimation is the next thing we should include, so donÂ´t bother asking the user for that.<br>ChatGPT said:<br>Got it! ð AI will automatically estimate Story Points instead of asking the user.<br><br>ð¹ How AI Will Estimate Story Points<br>Instead of manually entering estimates, AI will calculate complexity, effort, and uncertainty based on:<br><br>1ï¸â£ Complexity Analysis<br><br>Database impact â Does it involve schema changes? Complex relationships?<br>API impact â Are new endpoints needed? Major refactoring required?<br>Frontend impact â Is it a UI change or deep business logic?<br>Security concerns â Are there authentication/authorization risks?<br>2ï¸â£ Effort Calculation<br><br>Lines of code (LOC) prediction â Based on past PBIs of similar scope.<br>Number of components affected â More files = higher effort.<br>Testing needs â How much unit &amp; integration testing is required?<br>3ï¸â£ Uncertainty Rating<br><br>Does the AI find enough documentation?<br>Does this feature require new technology?<br>Does the feature involve high unknowns (e.g., 3rd party integrations)?<br>ð Estimation Output (Fibonacci Scale) AI will output a story point estimate (1, 2, 3, 5, 8, 13...) with reasoning:<br><br>ð¢ Low Complexity â 1-3 Points<br>ð¡ Moderate Complexity â 5-8 Points<br>ð´ High Complexity &amp; Unknowns â 13+ Points<br>ð¹ Next Steps<br>1ï¸â£ Figma Wireframes (Integrate AI estimation in UI).<br>2ï¸â£ Define Estimation Algorithm (How AI calculates effort).<br>3ï¸â£ Implement AI Estimation API (Story Point prediction).<br><br>Where should AI show the estimated Story Points?<br><br>Inside the PBI form? (User sees it before submission).<br>Only in the backlog? (After PBI is saved).<br>Let me know, and Iâll include it in the wireframes! ð<br><br>You said:<br>I want the AI estimation included in the task description and currently all tasks have a field for estimation where user can enter story points, instead of adding another field for AI estimate IÂ´m thinking we could indicate if estimation is set by AI or if it is human edited. What do you think?<br>ChatGPT said:<br>Thatâs a great approach! It keeps the UI clean while still allowing users to see whether the estimate was AI-generated or manually adjusted.<br><br>ð¹ How to Implement AI Estimation in the Task Description<br>1ï¸â£ Story Points Field Behavior:<br><br>AI auto-generates an initial estimate when a PBI is created.<br>The user can edit the estimate manually if they disagree.<br>If the user changes the AI estimate, we mark it as human-edited.<br>2ï¸â£ Indicating AI vs. Human Estimates:<br><br>AI-generated estimate â Display a small "AI" badge next to the number.<br>User-edited estimate â Display a "User Edited" label (or remove the AI badge).<br>3ï¸â£ Example UI Representations:<br><br>AI Estimate: Story Points: 5 (AI)<br>User-Edited: Story Points: 8 (User Edited)<br>ð¹ Backend &amp; Database Changes<br>Keep the existing story_points field.<br><br>Add a new field: is_ai_estimate (true/false)<br><br>true â AI-generated<br>false â Manually overridden<br>When AI sets the estimate, is_ai_estimate = true.<br><br>If a user changes the estimate, set is_ai_estimate = false.<br><br>ð¹ User Flow<br>1ï¸â£ AI suggests an estimate when the PBI is created.<br>2ï¸â£ User can keep it or edit it.<br>3ï¸â£ If edited, it switches from AI to user-edited.<br>4ï¸â£ The UI reflects whether the estimate is AI-generated or manually adjusted.<br><br>ð¹ Advantages of This Approach<br>â Minimal UI clutter â No extra fields.<br>â Users stay in control â AI assists but doesnât dictate.<br>â Clear distinction between AI-generated &amp; human-set values.<br>â Easy implementation â Just an extra is_ai_estimate field.<br><br>Next Steps<br>ð¹ Update PBI Creation Flow to auto-assign AI estimates.<br>ð¹ Modify UI to display AI/User-edited status.<br>ð¹ Ensure API updates is_ai_estimate correctly.<br><br>Would you like this logic to be included in the Figma wireframes? ð<br><br>You said:<br>Yes<br>ChatGPT said:<br>Great! Iâll now create Figma wireframes incorporating the AI Estimation Flow into the Task Refinement Page.<br><br>ð Wireframe Features<br>ð¹ Full-Page AI Refinement UI (instead of a modal)<br>ð¹ Dropdown Combobox for Selecting a PBI (Headless UI)<br>ð¹ Structured Form-Based AI Q&amp;A for refinement<br>ð¹ Story Points Section:<br><br>Shows AI-estimated points with an "AI" badge<br>Allows manual override (switching to "User Edited")<br>Iâll generate the wireframes now! ð Stay tuned. ð¨<br><br><br>Here is the wireframe for the AI-powered task refinement page! ð¨<br><br>Key Features in the Wireframe:<br>â Full-page layout for refining PBIs<br>â Dropdown combobox with search functionality to select a PBI<br>â AI-driven structured form where AI asks questions and users respond<br>â Story Points Estimation section:<br><br>Shows AI-generated values with an "AI" badge<br>Allows manual override, switching to a "User Edited" label<br>Would you like any modifications before we move forward with implementation? ð<br><br>You said:<br>Can you provide a text based UI description instead?<br>I just need the different components of the page that is needed and then I can do layout and design myself.<br>ChatGPT said:<br>AI-Powered Task Refinement Page - UI Structure<br>This page provides a structured interface for refining PBIs with AI assistance. Below is a breakdown of all the key UI components that should be included.<br><br>ð Main Components<br>1ï¸â£ Page Header (Fixed at the Top)<br>Title: "AI-Powered Task Refinement"<br>Back Button: Returns to the backlog view<br>Help Icon: Opens a tooltip explaining how AI refinement works<br>2ï¸â£ Task Selection Section<br>Label: "Select a PBI to refine"<br>Dropdown Combobox (Headless UI)<br>Allows searching and selecting an existing PBI<br>Displays title &amp; ID of each task<br>Optional: Show the task type (Epic, User Story, Subtask)<br>Button: "Open Task in AI Refinement"<br>3ï¸â£ AI-Assisted Refinement Form (Dynamic Based on Task)<br>Section Title: "Refinement Questions"<br>Questions Panel<br>AI provides structured questions based on the selected task<br>Questions should be grouped by categories (e.g., Goals, Technical Details, Dependencies)<br>Each question has:<br>A text input (for short answers) or a textarea (for detailed explanations)<br>Pre-filled values if available from technical documentation<br>AI-generated suggestions (editable)<br>Toggle: "Show AI Recommendations"<br>Expands a section with AI-generated recommendations for this task<br>4ï¸â£ AI Estimation &amp; Task Metadata<br>Label: "Estimation &amp; Task Metadata"<br>Story Points Field:<br>Displays the AI-estimated story points (default)<br>Allows manual override with a "User Edited" indicator<br>Additional Metadata:<br>Task Priority (Low, Medium, High)<br>Dependencies (Auto-detected &amp; user-editable)<br>Related Epics / Stories<br>5ï¸â£ Actions &amp; Submission<br>Primary Button: "Submit to Backlog"<br>Secondary Button: "Save Draft" (to store refinement progress without submitting)<br>AI Chat History Panel (Optional): Displays past AI interactions for reference<br>ð¡ Notes &amp; Considerations<br>Form should autosave periodically to prevent data loss<br>If the user switches tasks, ask for confirmation before discarding unsaved changes<br>AI should fetch relevant project documentation before asking unnecessary questions<br>Would you like to adjust any sections or add more details? ð<br><br>You said:<br>Some suggested changes:<br>1. It should be possible to add a parent task including all subtasks, in case the user has already worked on creating epic, user stories and subtasks. That way AI gets the whole feature description and can start over.<br>2. We alreadu use autosave with debounced and we also use websockets for real time updates.<br>3. We need a simple settings page where user can choose AI provider (OpenAI to start with) and input API credentials:<br>ChatGPT said:<br>Great suggestions! Hereâs the updated UI structure incorporating your changes:<br><br>ð AI-Powered Task Refinement Page - Updated UI Structure<br>This page enables users to refine PBIs with AI assistance, while ensuring flexibility for existing task hierarchies, real-time updates, and AI provider settings.<br><br>1ï¸â£ Page Header (Fixed at the Top)<br>Title: "AI-Powered Task Refinement"<br>Back Button: Returns to the backlog view<br>Help Icon: Opens a tooltip explaining how AI refinement works<br>2ï¸â£ Task Selection Section<br>Label: "Select a PBI or Parent Task to Refine"<br>Dropdown Combobox (Headless UI)<br>Searchable dropdown to select an individual task (PBI, User Story, or Subtask)<br>Checkbox: "Include all subtasks" (if a parent task is selected)<br>Optional: Show task type (Epic, User Story, Subtask)<br>Button: "Open in AI Refinement"<br>â New Feature: If a parent task is selected with "Include all subtasks," the AI receives the full feature breakdown instead of an isolated task.<br><br>3ï¸â£ AI-Assisted Refinement Form<br>Section Title: "AI-Powered Refinement Questions"<br>Questions Panel<br>AI generates structured questions based on the selected task(s)<br>Grouped Categories:<br>Feature Goals &amp; Outcomes<br>Technical Requirements<br>Dependencies &amp; Risks<br>Acceptance Criteria<br>Each question has:<br>A text input (for short answers) or a textarea (for detailed explanations)<br>Pre-filled values if available from technical documentation<br>AI-generated suggestions (editable)<br>Toggle: "Show AI Recommendations"<br>Expands a section with AI-generated recommendations for this task<br>â New Feature: If the user selects a parent task with subtasks, AI dynamically adjusts questions to consider the full hierarchy.<br><br>4ï¸â£ AI Estimation &amp; Task Metadata<br>Label: "Estimation &amp; Task Metadata"<br>Story Points Field:<br>AI-generated story points (default)<br>Allows manual override with a "User Edited" indicator<br>Additional Metadata:<br>Task Priority (Low, Medium, High)<br>Dependencies (Auto-detected &amp; user-editable)<br>Related Epics / Stories<br>â New Feature: Parent-child relationships are preserved, meaning AI-generated metadata accounts for linked tasks.<br><br>5ï¸â£ Real-Time Updates &amp; Autosave<br>WebSocket-Enabled: Any changes made instantly update other users in real-time<br>Debounced Autosave: Saves progress periodically to prevent data loss<br>Undo/Redo: Simple history tracking for user changes<br>â New Feature: Uses existing WebSocket + debounced autosave setup for seamless real-time updates.<br><br>6ï¸â£ Actions &amp; Submission<br>Primary Button: "Submit to Backlog"<br>Secondary Button: "Save Draft" (stores refinement progress without submitting)<br>AI Chat History Panel (Optional): Displays past AI interactions for reference<br>7ï¸â£ AI Provider Settings Page<br>Page Title: "AI Integration Settings"<br>Dropdown: "Select AI Provider" (Starting with OpenAI)<br>Future support for multiple providers (Anthropic, Azure, Local AI, etc.)<br>API Key Input Field<br>Test Connection Button (Validates API credentials)<br>Save Settings Button<br>â New Feature: Centralized AI provider settings so users can configure API credentials before using AI-powered refinement.<br><br>Final Thoughts<br>â Supports full feature refinement (Epics + Subtasks)<br>â Uses real-time WebSocket updates + autosave (no lost work)<br>â Gives users control over AI-generated estimations<br>â Modular AI provider integration for future flexibility<br><br>ð Would you like any additional refinements before we move forward?<br><br>You said:<br>How do we give AI permission to write in the database?<br>ChatGPT said:<br>Granting AI Permission to Write to the Database<br>For AI to write to the database, we need a secure and controlled mechanism to ensure data integrity, security, and prevent unauthorized access.<br><br>1ï¸â£ Recommended Approach: Secure API Endpoint<br>Instead of allowing AI direct access to the database, we expose a controlled API that the AI can interact with.<br><br>â Steps to Implement<br>Create an API Endpoint (e.g., /api/pbis)<br><br>Accepts AI-generated Epics, User Stories, Subtasks<br>Validates input before saving to DB<br>Use API Authentication<br><br>API Key or OAuth2 Token: AI must authenticate before sending requests.<br>Store AI credentials securely in environment variables.<br>Define Access Controls<br><br>Restrict AI to specific actions (e.g., insert PBIs, update fields)<br>Role-Based Access Control (RBAC): AI should have a limited DB role (e.g., ai_writer).<br>Validate AI-Generated Data<br><br>Enforce schema validation (e.g., JSON Schema)<br>Apply business rules (e.g., prevent circular dependencies)<br>Use an AI Service Account<br><br>AI interacts as a designated system user (not a superuser)<br>Logs all AI interactions for auditability<br>2ï¸â£ Backend Implementation<br>ð Create the API Route (/api/pbis)<br>python<br>Copy<br>Edit<br>from flask import Blueprint, request, jsonify<br>from models import db, PBI<br>from auth_middleware import verify_ai_auth<br><br>bp = Blueprint("ai_pbi_api", __name__)<br><br>@bp.route("/api/pbis", methods=["POST"])<br>@verify_ai_auth # â Require AI authentication<br>def create_pbi():<br>"""Handles AI-generated PBI creation"""<br><br>data = request.json<br>if not data:<br>return jsonify({"error": "No data provided"}), 400<br><br># â Validate input structure<br>required_fields = ["title", "description", "task_type", "priority"]<br>if not all(field in data for field in required_fields):<br>return jsonify({"error": "Missing required fields"}), 400<br><br># â Insert into database<br>new_pbi = PBI(<br>title=data["title"],<br>description=data["description"],<br>task_type=data["task_type"],<br>priority=data.get("priority", "Medium"),<br>estimated_points=data.get("estimated_points", None), # AI estimate<br>created_by="AI", # Track source<br>)<br><br>db.session.add(new_pbi)<br>db.session.commit()<br><br>return jsonify({"message": "PBI created successfully", "id": new_pbi.id}), 201<br>3ï¸â£ AI Authentication &amp; Security<br>ð Use API Keys to Restrict Access<br>Middleware for AI Authentication (auth_middleware.py):<br><br>python<br>Copy<br>Edit<br>from flask import request, jsonify<br>import os<br><br>VALID_AI_API_KEY = os.getenv("AI_API_KEY")<br><br>def verify_ai_auth(func):<br>"""Middleware to verify AI authentication"""<br>def wrapper(*args, **kwargs):<br>api_key = request.headers.get("X-API-Key")<br>if api_key != VALID_AI_API_KEY:<br>return jsonify({"error": "Unauthorized AI access"}), 403<br>return func(*args, **kwargs)<br>return wrapper<br>â AI must send a valid API key in the request headers:<br><br>json<br>Copy<br>Edit<br>{<br>"title": "Implement AI Task Refinement",<br>"description": "Break down AI task refinement into structured PBIs",<br>"task_type": "Epic",<br>"priority": "High",<br>"estimated_points": 8<br>}<br>ð¡ Security Best Practices<br><br>Rotate API Keys regularly<br>Use role-based permissions<br>Log all AI interactions for debugging &amp; auditing<br>Limit AIâs scope to only modifying PBIs (not users, projects, etc.)<br>4ï¸â£ PostgreSQL Database Role for AI<br>Instead of granting full DB access, create a limited-access AI role:<br><br>sql<br>Copy<br>Edit<br>-- Create a restricted AI role<br>CREATE ROLE ai_writer WITH LOGIN PASSWORD \'securepassword\';<br><br>-- Grant permission to insert PBIs but not delete them<br>GRANT INSERT, UPDATE ON pbis TO ai_writer;<br>5ï¸â£ WebSocket Integration (Optional)<br>If using real-time updates, AI should broadcast new PBIs:<br><br>python<br>Copy<br>Edit<br>from flask_socketio import emit<br><br>@bp.route("/api/pbis", methods=["POST"])<br>@verify_ai_auth<br>def create_pbi():<br>...<br>db.session.commit()<br><br># ð¥ Notify frontend in real-time<br>emit("pbi_created", {"id": new_pbi.id, "title": new_pbi.title}, broadcast=True)<br><br>return jsonify({"message": "PBI created successfully", "id": new_pbi.id}), 201<br>ð Final Summary<br>â API Gateway: AI writes via /api/pbis<br>â Secure Authentication: AI must provide an API key<br>â Database Role: AI is limited to inserting/updating PBIs only<br>â Schema Validation: Ensures AI submits valid data<br>â Real-Time Updates: WebSocket notifications for new PBIs<br>ð¯ Next Steps<br>Would you like:<br><br>To implement a similar API for retrieving PBIs? (GET /api/pbis)<br>AI role to have limited UPDATE access for task refinements?<br>A test script to verify AI authentication &amp; data submission?<br>You said:<br>IÂ´m saving you questions for later.<br><br>For now letÂ´s get back on track:<br><br>Can you rewrite the entire plan based on what we have agreed on so far and then move on to step 2.<br><br>1. [COMPLETED] I want us to discuss how it would be inplemented in the UI and provide the optimal UX.<br>2. Could we benefit from drafting the architecture, sequence diagrams, user flows?<br>3. Before we start coding, I want you to create PBIÂ´s for the project and estimate complexity.<br>4. Create psql commands for creating the PBIÂ´s.<br><br>Lets go through these steps one by one.<br>ChatGPT said:<br>AI-Powered PBI Generation &amp; Integration Plan<br>Overview<br>We are developing an AI-powered system that automates the generation and refinement of Epics, User Stories, and Subtasks in our Project Management System (PMS). The system will allow users to refine feature ideas through a structured, guided AI interaction and directly submit PBIs (Product Backlog Items) into the backlog.<br><br>â Phase 1: UI/UX Implementation Plan (Completed)<br>We have defined the best user experience (UX) strategy and identified how users will interact with the AI-driven PBI refinement system.<br><br>ð¹ UI/UX Key Decisions<br>Where PBI Creation Happens<br><br>Inside the Backlog View â AI-assisted refinement happens within the backlog planning workflow.<br>Standalone Full-Page PBI Refinement View â Instead of a modal, we will use a full-page AI refinement interface.<br>How the User Provides Input<br><br>Users select an existing PBI from a searchable combobox (Headless UI)<br>Users can also add a parent task, including all its subtasks, ensuring AI gets full context.<br>How AI Refines PBIs<br><br>AI asks structured, best-practice questions<br>AI accesses technical documentation before asking questions, avoiding redundant prompts.<br>Inline Editing: AI suggests PBIs, and the user can edit before finalizing.<br>Step-by-Step Refinement: AI refines tasks dynamically based on user responses.<br>How Users Trigger AI PBI Generation<br><br>Button: "Generate PBIs from Feature Request"<br>AI Guidance: AI offers to help refine a new feature request when a user creates a new PBI.<br>Shortcut Command: /generate_pbi &lt;feature&gt;<br>How AI Estimation Works<br><br>AI assigns story points based on complexity<br>The estimation field tracks whether it was set by AI or manually edited by the user.<br>Users can override AI estimates manually.<br>ð¹ Finalized UI Components for PBI Refinement Page<br>ð PBI Refinement Page (Full-Screen UI)<br>ð Searchable Dropdown (Combobox)<br><br>Users search &amp; select a PBI from the backlog.<br>Users can add a parent task + subtasks for AI to analyze.<br>ð AI Question Form<br><br>AI asks structured questions to refine the feature request.<br>AI auto-fills answers when possible (from project history/docs).<br>User fills in missing details manually.<br>ð AI-Generated PBIs Section<br><br>AI dynamically generates Epics, User Stories, and Subtasks.<br>PBIs appear in real-time as AI refines them.<br>Users can edit PBIs inline before submission.<br>ð AI Story Point Estimation<br><br>AI auto-assigns story points based on complexity.<br>Indicator shows if estimation was set by AI or edited by the user.<br>ð Autosave &amp; WebSockets<br><br>Debounced auto-save ensures changes are not lost.<br>WebSockets enable real-time updates across team members.<br>ð  Settings Page<br><br>AI Provider Selection: OpenAI (default)<br>API Key Input: Secure credentials storage for AI integration.<br>ð Phase 2: Architecture, Sequence Diagrams &amp; User Flows<br>Why Do We Need This?<br>Before coding, we should draft architectural diagrams to:<br><br>Visualize the AIâs role in the PMS system.<br>Map the user flow from input to AI-generated PBIs.<br>Ensure database integration is structured correctly.<br>Avoid unnecessary rewrites by planning dependencies.<br>ð Key Architectural Components<br>1ï¸â£ Frontend UI<br><br>Next.js React App<br>Full-page AI refinement view<br>Headless UI Combobox for PBI selection<br>Real-time UI updates via WebSockets<br>2ï¸â£ AI Processing<br><br>AI fetches context from technical documentation &amp; backlog<br>AI generates PBIs dynamically using structured rules<br>AI assigns story points automatically<br>AI questions the user only when necessary (context-aware questioning)<br>3ï¸â£ Backend API<br><br>/api/pbis â AI submits PBIs<br>/api/pbis/:id â Retrieve PBIs for AI refinement<br>Authentication middleware (API keys for AI)<br>WebSockets for real-time updates<br>4ï¸â£ Database Schema Changes<br><br>Track whether AI or user set story points<br>Store AI-generated questions &amp; answers for auditing<br>Link PBIs to their refined feature requests<br>ð Next Steps<br>1ï¸â£ Create High-Level Architecture Diagram<br>How the UI, AI processing, and backend interact<br>Illustrate AI refinement flow &amp; database interactions<br>2ï¸â£ Define Sequence Diagrams<br>User selects a feature request â AI processes it â PBIs are generated<br>AI refines questions dynamically based on available data<br>3ï¸â£ Map User Flows<br>Step-by-step process from selecting a PBI to AI refinement &amp; submission<br>Flowchart of AI interaction (when to ask, when to auto-fill answers)<br>Would you like me to generate initial architecture &amp; sequence diagrams now? ð<br><br>You said:<br>Yes, I would like that but you also need to know waht I use for backend, right?<br>Python / flask and postgreSQL. <br>ChatGPT said:<br>Yes, knowing that your backend is built with Python / Flask and PostgreSQL is crucial for designing the architecture and sequence diagrams effectively.<br><br>I will now generate the following:<br><br>1ï¸â£ High-Level Architecture Diagram â How the UI, AI processing, and backend interact.<br>2ï¸â£ Sequence Diagram â How a PBI is refined by AI and submitted to the database.<br>3ï¸â£ User Flow Diagram â How users interact with AI-driven PBI refinement.<br><br>Since we are using Flask for the backend, I will ensure that the API endpoints and WebSocket handling align with Flaskâs best practices. Iâll also consider PostgreSQL schema changes to store AI-generated PBIs effectively.<br><br>I will now generate these diagrams. Stay tuned! ð¨ð<br><br><br>Analysis errored<br>python<br>Always show details<br><br>Copy<br>import matplotlib.pyplot as plt<br>import matplotlib.patches as mpatches<br><br>def draw_architecture_diagram():<br>fig, ax = plt.subplots(figsize=(10, 6))<br><br># Title<br>ax.set_title("High-Level Architecture: AI-Driven PBI Refinement", fontsize=14, fontweight="bold")<br><br># Components<br>components = {<br>"Frontend (Next.js)": (0.2, 0.8),<br>"AI Processing (GPT-4 API)": (0.5, 0.8),<br>"Backend API (Flask)": (0.8, 0.8),<br>"PostgreSQL Database": (0.8, 0.5),<br>"WebSockets (Real-time Updates)": (0.5, 0.5)<br>}<br><br># Draw components<br>for label, (x, y) in components.items():<br>ax.add_patch(mpatches.FancyBboxPatch((x-0.1, y-0.05), 0.2, 0.1, boxstyle="round,pad=0.1", <br>facecolor="lightblue", edgecolor="black"))<br>ax.text(x, y, label, ha="center", va="center", fontsize=10, fontweight="bold")<br><br># Arrows<br>arrows = [<br>((0.2, 0.8), (0.5, 0.8)), # Frontend â AI Processing<br>((0.5, 0.8), (0.8, 0.8)), # AI Processing â Backend API<br>((0.8, 0.8), (0.8, 0.5)), # Backend API â PostgreSQL<br>((0.8, 0.5), (0.8, 0.8)), # PostgreSQL â Backend API<br>((0.8, 0.8), (0.5, 0.5)), # Backend API â WebSockets<br>((0.5, 0.5), (0.2, 0.8)) # WebSockets â Frontend<br>]<br><br>for start, end in arrows:<br>ax.annotate("", xy=end, xytext=start, arrowprops=dict(arrowstyle="-&gt;", lw=2))<br><br># Hide axes<br>ax.set_xticks([])<br>ax.set_yticks([])<br>ax.set_frame_on(False)<br><br># Show diagram<br>plt.show()<br><br># Draw the architecture diagram<br>draw_architecture_diagram()<br>I encountered an issue generating the architecture diagram. Let me try again. \u200b\u200b<br><br><br>Analysis errored<br>python<br>Always show details<br><br>Copy<br>import matplotlib.pyplot as plt<br>import matplotlib.patches as mpatches<br><br>def draw_architecture_diagram():<br>fig, ax = plt.subplots(figsize=(10, 6))<br><br># Title<br>ax.set_title("High-Level Architecture: AI-Driven PBI Refinement", fontsize=14, fontweight="bold")<br><br># Components<br>components = {<br>"Frontend (Next.js)": (0.2, 0.8),<br>"AI Processing (GPT-4 API)": (0.5, 0.8),<br>"Backend API (Flask)": (0.8, 0.8),<br>"PostgreSQL Database": (0.8, 0.5),<br>"WebSockets (Real-time Updates)": (0.5, 0.5)<br>}<br><br># Draw components<br>for label, (x, y) in components.items():<br>ax.add_patch(mpatches.FancyBboxPatch((x-0.1, y-0.05), 0.2, 0.1, boxstyle="round,pad=0.1", <br>facecolor="lightblue", edgecolor="black"))<br>ax.text(x, y, label, ha="center", va="center", fontsize=10, fontweight="bold")<br><br># Arrows<br>arrows = [<br>((0.2, 0.8), (0.5, 0.8)), # Frontend â AI Processing<br>((0.5, 0.8), (0.8, 0.8)), # AI Processing â Backend API<br>((0.8, 0.8), (0.8, 0.5)), # Backend API â PostgreSQL<br>((0.8, 0.5), (0.8, 0.8)), # PostgreSQL â Backend API<br>((0.8, 0.8), (0.5, 0.5)), # Backend API â WebSockets<br>((0.5, 0.5), (0.2, 0.8)) # WebSockets â Frontend<br>]<br><br>for start, end in arrows:<br>ax.annotate("", xy=end, xytext=start, arrowprops=dict(arrowstyle="-&gt;", lw=2))<br><br># Hide axes<br>ax.set_xticks([])<br>ax.set_yticks([])<br>ax.set_frame_on(False)<br><br># Show diagram<br>plt.show()<br><br># Draw the architecture diagram<br>draw_architecture_diagram()<br>I encountered an issue generating the architecture diagram. Instead, I\'ll describe it textually:<br><br>High-Level Architecture for AI-Driven PBI Refinement<br>This architecture integrates Next.js (Frontend), Flask (Backend API), PostgreSQL (Database), GPT-4 API, and WebSockets for real-time updates.<br><br>Components &amp; Flow:<br>Frontend (Next.js)<br><br>User selects a feature request from the backlog.<br>Inputs details and triggers AI-powered PBI generation.<br>Displays AI-generated Epics, User Stories, and Subtasks.<br>Supports real-time updates via WebSockets.<br>AI Processing (GPT-4 API)<br><br>Receives feature descriptions and additional context.<br>Generates structured PBIs based on predefined rules and user input.<br>Returns the refined tasks to the backend.<br>Backend API (Flask)<br><br>Routes API requests between frontend and AI service.<br>Validates and processes AI-generated PBIs.<br>Stores tasks in PostgreSQL.<br>Emits WebSocket events for real-time updates.<br>PostgreSQL Database<br><br>Stores all Epics, User Stories, and Subtasks.<br>Keeps track of AI-generated vs. user-edited PBIs.<br>Supports search and retrieval.<br>WebSockets (Flask-SocketIO)<br><br>Sends real-time updates when PBIs are refined or modified.<br>Ensures users see immediate changes.<br>Next, I will draft sequence diagrams and user flows for how the AI-powered PBI refinement process works. Stay tuned! ð \u200b\u200b<br><br>You said:<br>Please continue<br>ChatGPT said:<br>Step 2: Drafting Architecture, Sequence Diagrams, and User Flows<br>1ï¸â£ Sequence Diagram: AI-Driven PBI Refinement Process<br>Actors:<br>User: Interacts with the UI to refine and submit PBIs.<br>Frontend (Next.js): Sends user input to the backend and displays results.<br>Backend (Flask API): Processes requests and interacts with AI &amp; DB.<br>AI Service (GPT-4 API): Generates PBIs based on input.<br>PostgreSQL Database: Stores PBIs and project data.<br>ð ï¸ Step-by-Step Process (Refinement Flow)<br>1. User selects a PBI to refine<br>Opens the AI Refinement Page.<br>Selects an existing Feature Request from a searchable dropdown.<br>(Optional) Adds a parent task to include all subtasks.<br>2. AI Queries Additional Context<br>AI first searches project documentation (if available).<br>If AI finds missing information, it generates a set of questions.<br>User answers questions in a structured form UI.<br>AI refines its understanding.<br>3. AI Generates PBIs<br>AI generates:<br>Epics<br>User Stories<br>Subtasks<br>Assigns Story Points (AI estimation).<br>Saves metadata (dependencies, priorities, assignments).<br>4. User Reviews &amp; Modifies<br>The user can:<br>Edit task descriptions (inline).<br>Adjust AI estimations (AI tag remains visible).<br>Remove irrelevant PBIs.<br>5. PBIs are Auto-Saved &amp; Updated<br>Changes are debounced &amp; saved automatically.<br>WebSockets broadcast changes in real time to all users.<br>6. PBIs are Submitted to Backlog<br>When satisfied, the user confirms submission.<br>The system:<br>Inserts PBIs into PostgreSQL.<br>Marks them as ready for execution.<br>2ï¸â£ User Flow: AI-Powered Task Refinement<br>ð¢ User selects a feature request â ð¡ AI refines using project data â ð  User answers missing details â ðµ AI generates structured PBIs â ð£ User reviews &amp; submits<br><br>3ï¸â£ Key Backend API Endpoints<br>These will be implemented in Flask.<br><br>Endpoint Method Description<br>/api/pbis POST Submit AI-generated PBIs to the backlog<br>/api/pbis/refine POST AI generates/refines PBIs<br>/api/pbis/questions GET AI fetches clarification questions if required<br>/api/pbis/{pbi_id} PATCH Updates a PBI after user edits<br>/api/pbis/{pbi_id}/submit POST Confirms PBI submission<br>4ï¸â£ Database Schema Updates (PostgreSQL)<br>To support AI-powered task refinement, we add new fields:<br><br>sql<br>Copy<br>Edit<br>ALTER TABLE tasks ADD COLUMN ai_generated BOOLEAN DEFAULT FALSE;<br>ALTER TABLE tasks ADD COLUMN refinement_status TEXT DEFAULT \'Pending\';<br>ALTER TABLE tasks ADD COLUMN estimation_source TEXT DEFAULT \'User\';<br>5ï¸â£ Next Steps<br>âï¸ Architecture, API endpoints, and database updates are drafted.<br>â¡ï¸ Next: Move to Step 3 (Creating PBIs &amp; Estimating Complexity). ð<br><br>Let me know if you want any modifications before proceeding!<br><br>You said:<br>Where should we store the documentation?<br>Where in the UI should the user upload the documentation?<br>Is it possible to get the documentation automatically from an integration?<br>Like GitHub, VScode?<br>Provided that the documentation exist there.<br>Add a simple settings page where user can input API key and credentials.<br>ChatGPT said:<br>ð Storing &amp; Managing Documentation for AI-Powered PBI Refinement<br>To ensure AI can access relevant project documentation for refining PBIs, we need a structured way to store, retrieve, and update documentation. Below is the plan:<br><br>1ï¸â£ Where Should We Store Documentation?<br>Option 1: PostgreSQL (Best for Structured Documentation)<br>Store documentation as text in a dedicated table.<br>Allows version control and easy retrieval.<br>Can be indexed for faster AI retrieval.<br>Table: project_documentation<br>sql<br>Copy<br>Edit<br>CREATE TABLE project_documentation (<br>id SERIAL PRIMARY KEY,<br>project_id INT REFERENCES projects(id) ON DELETE CASCADE,<br>title TEXT NOT NULL,<br>content TEXT NOT NULL,<br>source TEXT DEFAULT \'Manual Upload\',<br>uploaded_by INT REFERENCES users(id),<br>created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP<br>);<br>â Pros:<br><br>AI can efficiently search and extract relevant details.<br>Allows tagging &amp; filtering by source (e.g., GitHub, VS Code, Manual Upload).<br>Option 2: External File Storage (Best for Large Documents)<br>Store Markdown, TXT, or PDF files in an S3 bucket (AWS, Firebase, etc.).<br>Only metadata is stored in PostgreSQL.<br>AI retrieves and processes the files when needed.<br>Table: documentation_files<br>sql<br>Copy<br>Edit<br>CREATE TABLE documentation_files (<br>id SERIAL PRIMARY KEY,<br>project_id INT REFERENCES projects(id) ON DELETE CASCADE,<br>file_url TEXT NOT NULL,<br>file_type TEXT NOT NULL CHECK (file_type IN (\'md\', \'txt\', \'pdf\')),<br>uploaded_by INT REFERENCES users(id),<br>created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP<br>);<br>â Pros:<br><br>Supports larger documents that may not fit in PostgreSQL.<br>Allows manual file uploads and auto-fetching from integrations.<br>2ï¸â£ Where in the UI Should the User Upload Documentation?<br>ð Dedicated "Documentation Management" Page (Settings)<br>Location: Inside Settings &gt; Documentation.<br>Features:<br>Upload Markdown, TXT, PDF files.<br>View &amp; Edit existing documentation.<br>Connect integrations (GitHub, VS Code, Notion, etc.).<br>Configure AI access permissions for each document.<br>3ï¸â£ Automatic Documentation Retrieval<br>â Can We Integrate with GitHub, VS Code, or Notion?<br>Yes! We can fetch project documentation automatically from these sources:<br><br>Integration Method Use Case<br>GitHub Fetch .md files via API Pull documentation from repos<br>VS Code Read local .md files Sync local project docs<br>Notion API connection Import structured docs<br>Google Drive API connection Fetch shared project docs<br>ð¡ Example: GitHub API Integration<br>Fetch .md documentation from a GitHub repo:<br><br>python<br>Copy<br>Edit<br>import requests<br><br>GITHUB_TOKEN = "your_personal_token"<br>REPO_OWNER = "your_username"<br>REPO_NAME = "your_project"<br><br>url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/docs"<br>headers = {"Authorization": f"token {GITHUB_TOKEN}"}<br><br>response = requests.get(url, headers=headers)<br>files = response.json()<br><br>for file in files:<br>if file["name"].endswith(".md"):<br>doc_content = requests.get(file["download_url"]).text<br>print("Fetched Documentation:", doc_content)<br>â Pros:<br><br>Automatically syncs up-to-date documentation from GitHub.<br>AI can use repo docs before asking the user for details.<br>4ï¸â£ Simple Settings Page for AI API &amp; Integrations<br>ð Location: Settings &gt; AI &amp; Integrations<br><br>â User Can:<br><br>Enter OpenAI API Key.<br>Connect GitHub Repo (OAuth or Token).<br>Enable Auto-Fetch from VS Code, Notion, Google Drive.<br>Set AI Access Rules (e.g., Allow AI to modify docs?).<br>ð§ Database Table: integration_settings<br>sql<br>Copy<br>Edit<br>CREATE TABLE integration_settings (<br>id SERIAL PRIMARY KEY,<br>user_id INT REFERENCES users(id),<br>integration_name TEXT NOT NULL,<br>api_key TEXT NOT NULL,<br>is_enabled BOOLEAN DEFAULT TRUE,<br>created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP<br>);<br>ð Next Steps<br>â Implement API endpoints for documentation storage &amp; retrieval.<br>â Build a simple settings page to manage AI API &amp; integrations.<br>â Set up GitHub/VS Code sync for fetching docs automatically.<br><br>Would you like mockups or wireframes for the settings page? ð</p><p></p>', 'status': 'Not Started', 'time_estimate': None, 'parent_id': None, 'created_at': datetime.datetime(2025, 2, 27, 23, 2, 31, 274292), 'task_type': 'Epic', 'updated_at': datetime.datetime(2025, 3, 10, 17, 29, 52, 790851), 'priority': None}
2025-03-13 17:14:07,775 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 17:14:07,775 INFO: [cached since 2165s ago] {'pk_1': 6}
2025-03-13 17:14:07,776 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-13 17:14:07,776 INFO: [cached since 2165s ago] {'pk_1': 5}
2025-03-13 17:14:07,793 INFO: Task ID 327 fetched with parent ID: None
2025-03-13 17:14:07,794 INFO: Task with ID 327 fetched successfully.
2025-03-13 17:14:07,795 DEBUG: Fetched Task Data: {'id': 327, 'name': '[UNIQUE feature] -\xa0Epic - AI-Powered PBI Refinement System', 'description': '<h2><strong>Description:&nbsp;</strong></h2><p><em>As a user,</em></p><p><em>I want to refine feature requests into structured PBIs with AI assistance</em></p><p><em>so that I can quickly generate well-defined Epics, User Stories, and Subtasks.</em></p><hr><p></p><p>AI assists in refining raw feature requests into</p><p>structured plans, generating PRDs, Epics, User Stories, Acceptance Criteria, and Edge Cases. AI also provides intelligent estimations based on historical data and improves accuracy over time.</p><p><br><strong>ð Final Order of Development</strong></p><p></p><p>1ï¸â£ <strong>AI API Integration &amp; Security (402)</strong></p><p>2ï¸â£ <strong>AI-Driven Questioning System (398)</strong></p><p>3ï¸â£ <strong>AI-Generated PBIs with Inline Editing (399)</strong></p><p>4ï¸â£ <strong>Full-Page AI-Powered PBI Refinement UI (397)</strong></p><p>5ï¸â£ <strong>AI-Generated Questions Based on Technical Docs (401)</strong></p><p>6ï¸â£ <strong>AI-Driven Story Point Estimation (400)</strong></p><p></p><p></p><p><strong>ð Why This Order?</strong></p><p></p><p>â <strong>Security First:</strong> Ensures safe API interactions before sending user data.</p><p>â <strong>Logical Progression:</strong> AI refines PBIs â Generates tasks â Provides accurate estimates.</p><p>â <strong>Minimizing Rework:</strong> No need to <strong>rebuild</strong> AI logic after UI changes.</p><p>â <strong>Incremental Value:</strong> Each completed step <strong>adds value</strong> without requiring the full system to be finished.</p><hr><p>## AI driven creation of Epics, User stories and Subtasks.<br><br>I have, on several occasions when we have discussed a new feature and outlined a high level plan asked you to create epics, user stories and subtasks for the feature. <br><br>You are very good at this and it saves a lot of time compared to writing them manually. <br><br>However, we could create a process of this and include some steps were we go through some exercises that will help increase the quality of the output. <br>IÂ´m thinking about:<br><br>1. Check PBIÂ´s against the list of key learnings &amp; takeaways for future development<br><br>After every session we do a retrospective where we summarize the session. One section of the summary is a list of key learnings &amp; takeaways for future development. Those should be appended to a complete list of key takeaways for future development.<br><br>Every time we create epics, user stories and subtasks for a new feature we should check them against this checklist of key learnings &amp; takeaways for future development. We can then include reminder notes about this in the tasks they are relevant for. This way we will reduce repeating mistakes, be aware of technical considerations we have to adhere to etc..<br><br>2. Maybe use frameworks like user story mapping<br><br>3. Any other ideas for increasing quality. <br><br>## Estimation:<br><br>I have also asked you to estimate the complexity of the tasks using story points. <br><br>### We have used this framework for estimation:<br><br>We estimate tasks using **story points** with the **Fibonacci scale** (1, 2, 3, 5, 8, 13, etc.) That allows us to gauge the **complexity, effort, and uncertainty** associated with each task.<br><br>GPT (You) will assess every feature based on:<br><br>1. **Complexity**: How difficult the task is (e.g., architecture, database relationships, etc.).<br>2. **Effort**: How much time and effort will be required to code, test, and debug.<br>3. **Uncertainty**: Any unknowns or potential challenges (e.g., interacting with new parts of the system, external factors).<br><br>### **Benchmarking**:<br><br>To give context to these estimates:<br><br>- **1-2 Points**: Minor changes like renaming variables, small bug fixes.<br>- **3-5 Points**: Moderate tasks, involving some new logic, minor database changes, and testing.<br>- **8+ Points**: More complex tasks, like introducing new models, changing relationships in the database, or modifying core app logic with potential unknowns.<br><br>### Typical output for a user story:<br><br>ð¢ User Story 1: Implement Parent Task Dropdown in Task Modal<br>As a user, I want to assign or change a parent task directly from the task modal, so that I can organize my tasks efficiently.<br><br>â Acceptance Criteria:<br><br>A dropdown appears in the task modal, listing all valid parent tasks.<br>Prevents selection of circular dependencies.<br>Updates the parent task dynamically upon selection.<br>Displays correct hierarchy after updates.<br>ð Estimation: 5 Story Points<br><br>Complexity: Moderate â Needs task filtering, validation logic, and UI integration.<br>Effort: Moderate â Requires API calls, handling UI state, and testing.<br>Uncertainty: Low â We understand the task relationships well.<br><br><br>This is all a part of a larger idea about how to streamline and improve the quality of the entire product development lifecycle and development process.<br><br>## MVP version<br>IÂ´ve been trying to figure out what would be the most valuable step to start building a feature for.<br><br>I think it is a feature that will allow you (AI) to submit these PBIÂ´s into the backlog of my project management tool and then be able to read them back from the tool.<br><br>So the first draft of the feature would be to create a function that can take a PBI and submit it to the db of the project management tool.<br><br>## Version 2:<br>Next step would be to create a function that can read the PBIs from the db and return them as a list.<br><br>## Version 3<br>To take the whole process of refining a simple feature idea or request into more detailed and actionable PBIÂ´s and integrate it into the project management tool.<br><br>### This would involve the following requirements:<br>- It needs to be a guided process, not just an inline chat.<br>- Both the user and the AI should follow the process.<br><br>To be further discussed....<br>I have a documented ideas in this notion file:<br><a target="_blank" rel="noopener noreferrer" href="https://www.notion.so/lacunamedia/Automating-task-creation-in-autoagile-191979257fc08007a001c3c2dc0a773f?pvs=4">https://www.notion.so/lacunamedia/Automating-task-creation-in-autoagile-191979257fc08007a001c3c2dc0a773f?pvs=4</a><br><br>## The development process:<br>Generating code for the feature based on the PBIÂ´s.<br>The process of you (AI) and me coding together is a process of itÂ´s own that we are working on a plan for optimizing. <br>See separate document: \'optimizing_our_development_process.md\' <br><br><br><br>How can we automate the whole process of:<br><br>1. Create Epics, User stories and subtasks from a refined feature request.<br>2. Script them into the database of autoagile<br>3. Allow AI to read the tasks<br><br><br>This is a great initiative that will systematize and automate the process of turning feature ideas into well-structured PBIs (Epics, User Stories, and Subtasks). Below is a structured approach to refining and implementing this system.<br><br>ð Summary of the Planned Process<br>We are aiming to automate the workflow of refining a feature request into actionable PBIs and integrating them directly into the project management tool. The long-term vision is to ensure quality, consistency, and efficiency in product development.<br><br>ð Proposed Steps for Automating AI-Driven PBI Creation<br>1ï¸â£ Create Epics, User Stories &amp; Subtasks from a Refined Feature Request<br>ð¹ Step 1: Validate PBIs Against "Key Learnings &amp; Takeaways"<br><br>After every session, we capture Key Learnings &amp; Takeaways for future development.<br>When generating new PBIs, we cross-check them against this checklist.<br>If relevant, reminder notes are added to tasks (e.g., âAvoid X issue seen in past developmentâ).<br>â Benefit: Prevent repeated mistakes, ensure technical consistency.<br><br>ð¹ Step 2: Use Frameworks to Improve PBI Quality<br><br>User Story Mapping: Break down the feature based on user journeys.<br>Impact Mapping: Understand the business &amp; user impact.<br>Jobs-to-Be-Done (JTBD): Define tasks based on what the user is trying to achieve.<br>BDD (Behavior-Driven Development) Scenarios: Define Acceptance Criteria in a structured format.<br>â Benefit: Increases clarity, prioritization, and alignment with user goals.<br><br>ð¹ Step 3: Automate AI-Driven PBI Generation<br><br>AI takes a high-level feature request and breaks it down into Epics, User Stories, and Subtasks.<br>AI adds relevant acceptance criteria and ensures no conflicting dependencies.<br>User can review &amp; refine before submitting to the backlog.<br>â Benefit: Reduces manual effort, ensures consistency.<br><br>2ï¸â£ Submit PBIs to the AutoAgile Database<br>ð¹ Step 4: Create API for AI to Submit PBIs<br><br>A POST API endpoint will allow AI to write PBIs into the project management system.<br>AI will assign metadata (e.g., priority, estimated effort, dependencies).<br>â Benefit: Ensures a structured backlog instead of scattered notes.<br><br>3ï¸â£ Allow AI to Read and Retrieve PBIs<br>ð¹ Step 5: Create API to Fetch PBIs<br><br>A GET API endpoint will allow AI to retrieve PBIs from the database.<br>This enables PBI iteration, tracking, and refinement.<br>â Benefit: AI can refine &amp; adjust PBIs dynamically over time.<br><br>4ï¸â£ Version 3: Full AI-Driven PBI Refinement Process<br>ð¹ Step 6: Create a Guided Process for PBI Refinement Instead of an inline chat, we build a structured UI to guide both the user and AI in refining PBIs.<br><br>Step 1: User provides initial feature request.<br>Step 2: AI asks clarifying questions (e.g., âIs this a new feature or an improvement?â).<br>Step 3: AI generates Epics, User Stories &amp; Subtasks.<br>Step 4: AI applies learnings from past development.<br>Step 5: User reviews &amp; refines before finalizing.<br>Step 6: PBIs are submitted to the backlog.<br>â Benefit: Ensures high-quality PBIs while keeping the user in control.<br><br>ð ï¸ Technical Implementation Plan<br>Phase 1 (MVP)<br>â Backend:<br><br>Create a POST /api/pbis endpoint to submit PBIs.<br>Store PBIs in the AutoAgile database.<br>â Frontend:<br><br>Simple form UI for submitting PBIs.<br>Allow users to review &amp; edit before submission.<br>â AI Integration:<br><br>AI generates PBIs using structured templates.<br>AI checks against the Key Learnings &amp; Takeaways.<br>Phase 2 (API Retrieval)<br>â Backend:<br><br>Create GET /api/pbis to fetch PBIs.<br>Support filtering by status, priority, and dependencies.<br>â Frontend:<br><br>Display PBIs in the backlog.<br>Allow users to edit, refine &amp; iterate on PBIs.<br>Phase 3 (Full AI-Driven Workflow)<br>â Backend:<br><br>Implement AI-powered iterative refinement.<br>Store AI-generated clarifying questions &amp; user responses.<br>â Frontend:<br><br>Guided multi-step process for refining PBIs.<br>Interactive user review step before final submission.<br>â AI Integration:<br><br>AI actively asks clarifying questions before generating PBIs.<br>AI learns from past PBIs and Key Learnings to improve over time.<br>ð Key Benefits of This System<br>â Automates repetitive work â AI breaks down features into PBIs.<br>â Ensures higher quality PBIs â AI cross-checks with Key Learnings.<br>â Prevents dependency issues â AI validates task relationships.<br>â Creates a structured backlog â PBIs are stored systematically.<br>â Streamlines estimation â AI assigns story points based on complexity.<br>â Saves developer time â Faster iteration &amp; execution of product features.<br><br>ð Next Steps<br>ð Would you like to start with Phase 1 (Submitting PBIs to the database)?<br>Or do you want to explore UI/UX ideas for the guided process first?<br><br>You said:<br>Does this require an integration to for example OpenAIÂ´s API or is it possible to create an Action in a custom GPT and when triggering that action the PBIÂ´s are submitted to the db? <br>ChatGPT said:<br>It does not necessarily require OpenAIâs API integration if we use Custom GPT Actions. Hereâs how both approaches would work:<br><br>1ï¸â£ Using Custom GPT Actions (No API Integration Needed)<br>â How It Works<br>Instead of calling an external API, we can define an Action in a Custom GPT that directly interacts with the database.<br><br>Trigger the Action<br><br>You (the user) initiate a request:<br>"Generate PBIs for the new feature and submit them to the backlog."<br>AI Generates PBIs<br><br>Based on the feature description, the AI structures Epics, User Stories, and Subtasks.<br>AI assigns story points, dependencies, and priority.<br>AI Executes the Action<br><br>The Custom GPT Action runs, submitting the generated PBIs directly into the project management toolâs database.<br>Confirmation &amp; Review<br><br>The system can return a confirmation message:<br>"PBIs have been submitted. Would you like to refine them further?"<br>â Whatâs Needed to Implement This?<br>Define a Custom GPT Action<br><br>The Action should be configured to execute a database query.<br>Example: "INSERT INTO pbis (title, description, type, priority, estimated_points) VALUES (...) "<br>Grant Secure Database Access<br><br>Custom GPT must be allowed to execute database operations securely.<br>We need a secure connection with proper authentication.<br>Ensure Query Execution is Reliable<br><br>Add error handling to prevent duplicate or incorrect entries.<br>Test &amp; Verify Data Submission<br><br>Run test cases to confirm PBIs are structured correctly in the backlog.<br>ð¥ Pros of Using Custom GPT Actions<br>â No External API Required â Runs fully within the GPT modelâs environment.<br>â Faster Development â No need for external API setup.<br>â Tighter Integration with AI â AI can validate &amp; refine PBIs before submission.<br>â More Secure â Data never leaves the controlled environment.<br><br>2ï¸â£ Using OpenAIâs API for External Integration<br>If you prefer a fully programmatic approach, you can call OpenAIâs API from your backend and integrate it with your project management tool.<br><br>â How It Works<br>Your backend sends a request to OpenAIâs API, asking it to generate PBIs.<br>OpenAIâs API returns structured PBIs (Epics, User Stories, Subtasks).<br>Your system validates the PBIs before inserting them into the database.<br>Your frontend retrieves and displays the PBIs in the backlog.<br>ð¥ Pros of OpenAIâs API Approach<br>â More Customization â You control prompts, data structure, and validation.<br>â Can Run in the Background â Ideal for scheduled task automation.<br>â Scales Better â Works well for large teams &amp; real-time AI interactions.<br><br>ð· Which Approach Should You Use?<br>ð¹ If you want a fast, no-setup solution, go with Custom GPT Actions.<br>ð¹ If you need more control, background processing, or external API calls, use OpenAIâs API.<br><br>ð Would you like help setting up a Custom GPT Action for submitting PBIs?<br><br>You said:<br>There is a price difference, right?<br>ChatGPT said:<br>Yes, there is a price difference between using Custom GPT Actions and OpenAIâs API integration. Hereâs the breakdown:<br><br>ð° Cost of Using Custom GPT Actions<br>â Free (if using within ChatGPT Pro)<br>â No additional API costs<br>â No per-token billing<br><br>Why?<br>Custom GPT Actions run within ChatGPTâs existing infrastructure. OpenAI doesnât charge per request for actions, but you must be on a ChatGPT Pro plan ($20/month).<br><br>However, if the Action connects to an external database or service that has costs (e.g., AWS, Firebase, Supabase, etc.), youâll still need to pay for that separately.<br><br>ð° Cost of Using OpenAIâs API<br>â Pay-per-use pricing<br>â Costs depend on model + token usage<br><br>Current API Pricing (as of 2024)<br>Model Input (per 1K tokens) Output (per 1K tokens)<br>GPT-4-turbo $0.01 $0.03<br>GPT-4 $0.03 $0.06<br>GPT-3.5-turbo $0.0015 $0.002<br>Estimated API Cost for PBI Generation<br>If generating 5-10 PBIs at a time, a request might use 500-1000 tokens.<br>Cost per request: $0.005 - $0.02 (GPT-4-turbo)<br>If you generate PBIs 100 times per day:<br>GPT-4-turbo: ~$0.50 - $2/day<br>GPT-4: ~$1.50 - $6/day<br>GPT-3.5-turbo: ~$0.15 - $0.40/day<br>Additional Costs<br>Database storage: If using Firebase, AWS, or another DB, there may be small storage costs.<br>API Requests: If your project management tool has an API, it may have rate limits or extra costs.<br>Which is Cheaper?<br>If you already use ChatGPT Pro â Custom GPT Actions = FREE<br>No additional API costs.<br>Ideal if you just need to generate &amp; submit PBIs without extra complexity.<br>If you need external processing â OpenAI API = Paid (but scalable)<br>More expensive, but fully customizable.<br>Better if you want background processing, bulk PBI creation, or integrations.<br>ð Best Recommendation?<br>If youâre cost-conscious and just need basic PBI creation &amp; submission, start with Custom GPT Actions (free).<br><br>If you later need scalability, automation, and background AI processing, you can move to OpenAIâs API.<br><br>Would you like help defining a Custom GPT Action for submitting PBIs? ð¥<br><br>You said:<br>I want to do both but start with the API integration because I think that is what will evolve into a valuable feature with the possibilities for controlling the process and integrating it into the UI of our project management app.<br>It would be great to have the GPT action a backup for keeping costs down.<br>ChatGPT said:<br>That sounds like a great strategy! ð¯<br>By starting with API integration, you can fully control the process, customize it to fit the UI of your project management app, and enable deeper automation.<br><br>Later, implementing a Custom GPT Action as a backup will allow on-demand PBI creation while keeping costs down for smaller use cases.<br><br>â Step-by-Step Plan for API Integration<br>We\'ll start by integrating OpenAIâs API to generate PBIs and store them in your project management toolâs database.<br><br>Phase 1: API-Based PBI Submission<br>1ï¸â£ Define API Endpoints<br><br>POST /api/pbis â Accepts AI-generated PBIs and stores them in the database.<br>GET /api/pbis â Retrieves PBIs from the backlog.<br>2ï¸â£ Implement AI-Powered PBI Generation<br><br>Use OpenAIâs API (GPT-4-turbo) to generate Epics, User Stories, and Subtasks.<br>Apply Key Learnings &amp; Takeaways from past development.<br>3ï¸â£ Store PBIs in the Project Management Tool<br><br>Save PBIs in the AutoAgile database.<br>Attach metadata like priority, dependencies, and estimation.<br>4ï¸â£ Expose PBIs in the UI<br><br>Display PBIs in the backlog inside your Next.js app.<br>Allow user review &amp; refinement before finalizing.<br>Phase 2: Backup Solution - Custom GPT Action<br>If API costs become high, allow users to manually trigger a GPT Action to generate PBIs without API calls.<br><br>1ï¸â£ Create a Custom GPT Action<br><br>Action: generate_pbIs(feature_description: str) â JSON<br>Returns structured PBIs to be manually entered into the backlog.<br>2ï¸â£ Integrate with Your UI<br><br>Offer an option like "Generate PBIs via GPT" in the UI.<br>If API usage is high, fallback to GPT Action instead of API calls.<br>ð Next Steps<br>Would you like to:<br>1ï¸â£ Start defining the OpenAI API integration (set up endpoints, API calls)?<br>2ï¸â£ Set up the Custom GPT Action as a backup?<br>3ï¸â£ Plan both in parallel and create a roadmap?<br><br>You said:<br>Not yet. First:<br>1. I want us to discuss how it would be inplemented in the UI and provide the optimal UX.<br>2. Could we benefit from drafting the architecture, sequence diagrams, user flows?<br>3. Before we start coding, I want you to create PBIÂ´s for the project and estimate complexity.<br>4. Create psql commands for creating the PBIÂ´s.<br><br>Lets go through these steps one by one.<br><br>ChatGPT said:<br>Thatâs a solid structured approach! ð<br>By focusing on UX, architecture, planning, and PBI creation before coding, weâll ensure a smooth implementation with fewer rewrites.<br><br>ð Step 1: UI &amp; UX Discussion<br>Before implementing API-based PBI generation, we need to design how users will interact with it inside the Project Management System (PMS).<br><br>ð¯ Key UX Considerations<br><br>â Where Should PBI Creation Happen?<br><br>Inside the Backlog View? (Best for structured planning)<br>Inside a Feature Request modal? (Good for quick task creation)<br>As a standalone "AI Assistant" panel? (Best for guided AI interaction)<br><br>â What Input Does the AI Need?<br><br>- Free-text Feature Description (User types in an idea)<br><br>- Structured Input (e.g., dropdowns for project, priority, complexity)<br><br>- Existing Tasks as Context (AI refines based on project backlog)<br><br>If we would start the process by asking the user to select item(s) from the backlog or create a new PBI, then we could keep the original feature idea/request and have the entire history saved.<br><br>I think the process should run the following way:<br>1. The user selects an item from the backlog or creates a new one.<br>2. AI asks a series of questions to gather more information about the feature, the goals, what problem it will solve, the expected outcome, etc..<br>Also, I think the AI would benefit from having access to the projectâs history, the projectâs goals, the projectâs vision, the technical documentation.<br>We have to discuss what questions the AI should ask and how the user should input the answers.<br><br>â How Should the Output Be Handled?<br>Yes - Inline Editing: User sees generated PBIs and edits them before submission.<br>No - One-Click Submit: AI submits PBIs automatically.<br>Yes - Step-by-Step Refinement: AI asks clarifying questions before finalizing.<br><br>â Should the User See a Live Preview?<br>Yes â A real-time preview of the PBIs as the AI generates them.<br>No â AI generates them first, then the user reviews before submission.<br><br>â How Will Users Trigger AI PBI Generation?<br>Yes - Button â "Generate PBIs from Feature Request"<br>Maybe - Shortcut Command â /generate_pbi &lt;feature&gt;<br>No - Automated Suggestion â When a new feature is created, AI offers to generate PBIs<br><br>Instead of 3: Automated Suggestion â When a new feature is created, AI offers to help with refining the feature request and informs the user about the possibility of generating PBIs and what the feature request should include to make it easier for the AI to generate relevant PBIs.<br><br><br>ð Suggested UI Flows<br><br>## Option 1: AI-Powered Backlog View<br>ð¡ Best for Teams Who Plan in Sprints 1ï¸â£ User navigates to the Backlog View.<br>2ï¸â£ Clicks â+ AI Generate PBIsâ â A modal opens.<br>3ï¸â£ User inputs a feature description and selects project, priority, estimation strategy.<br>4. AI asks clarifying questions about the feature.<br>5. AI generates Epics, User Stories, and Subtasks.<br>6. User reviews and edits before submitting.<br><br>â Pros<br><br>Integrated into existing planning workflow.<br>Structured &amp; controlled task creation.<br>â Cons<br><br>Requires users to be inside the backlog to use AI.<br><br>## Option 2: Feature Request Modal with AI Assistance<br>ð¡ Best for Users Adding New Ideas 1ï¸â£ User opens Feature Request modal.<br>2ï¸â£ Enters high-level feature description.<br>3ï¸â£ Clicks âGenerate PBIsâ â AI suggests tasks.<br>4ï¸â£ User reviews, edits, and approves.<br>5ï¸â£ PBIs are pushed to the backlog.<br><br>â Pros<br><br>Works naturally when defining new features.<br>Faster workflow for brainstorming ideas.<br>â Cons<br><br>Might lack full backlog context when generating PBIs.<br><br>## Option 3: Dedicated AI Assistant Panel<br>ð¡ Best for Advanced AI-Driven Planning 1ï¸â£ User opens an âAI Assistantâ panel.<br>2ï¸â£ AI asks clarifying questions about the feature.<br>3ï¸â£ AI generates Epics, User Stories, and Subtasks dynamically.<br>4ï¸â£ User modifies or approves PBIs.<br>5ï¸â£ PBIs are automatically pushed to the backlog.<br><br>â Pros<br>More structured, guided PBI refinement.<br>AI helps users refine vague ideas into structured tasks.<br><br>â Cons<br>More complex UI to implement.<br><br>IÂ´m leaning towards option 1 with the added step 4. AI asks clarifying questions about the feature.<br><br>ð Whatâs Next?<br>1ï¸â£ Which UI flow do you prefer (Backlog, Feature Request Modal, AI Assistant)?<br>2ï¸â£ Would you like wireframes/mockups before moving to architecture diagrams?<br><br>See my answers in the list above:<br><br>Thatâs a fantastic refinement of the process! The form-based approach for AI clarifying questions makes a lot of sense. It improves UX efficiency and keeps the process structured, ensuring users don\'t feel overwhelmed by an open-ended conversation.<br><br>ð Finalized UI/UX Approach<br>â Option 1: AI-Powered Backlog View (with Clarifying Questions &amp; Form Input)<br>ð¡ Best for Teams Who Plan in Sprints 1ï¸â£ User selects an existing item from the backlog or creates a new feature request.<br>2ï¸â£ Clicks â+ AI Generate PBIsâ â A modal opens.<br>3ï¸â£ User inputs a feature description and selects project, priority, estimation strategy.<br>4ï¸â£ AI presents clarifying questions in a form UI (instead of free-text chat).<br>5ï¸â£ User fills in answers in structured fields â This data is stored for future reference.<br>6ï¸â£ AI generates Epics, User Stories, and Subtasks dynamically.<br>7ï¸â£ User reviews and edits before submitting PBIs to the backlog.<br><br>ð Why This Works Best<br>â Keeps the original feature request history â Tracks context properly.<br>â AI doesnât rely on unstructured responses â User inputs structured answers via the form.<br>â Faster, structured refinement process â Reduces ambiguity in AI-generated PBIs.<br>â Guided yet flexible â AI only asks for details when necessary (conditional logic in the form).<br>â More efficient user experience â No need to manually structure long text responses.<br><br>ð Next Steps<br>1ï¸â£ Define the AI Clarifying Questions for the Form<br>We need to list the essential clarifying questions AI should ask. Some of these will be always required, and others will be conditional (depending on the feature type, project, etc.).<br><br>Example questions:<br><br>What problem does this feature solve? (Always required)<br>Who is the primary user? (Required for user-facing features)<br>What is the expected outcome? (Always required)<br>Are there existing related tasks or dependencies? (Optional)<br>Does this feature impact security or performance? (Conditional: Only if related to infrastructure)<br>Would you like me to draft a complete list of questions based on best practices?<br><br>2ï¸â£ Create Wireframes for the Modal<br>Since weâre using a form-based approach instead of a chat-like UI, we should create wireframes for:<br><br>The initial âAI Generate PBIsâ modal<br>The form layout for clarifying questions<br>The final PBI preview screen<br>Do you want Figma wireframes or a quick text-based UI flow first?<br><br>3ï¸â£ Technical Considerations<br>Would you like the AI-generated clarifying questions to be:<br><br>Fixed (predefined in the UI)? â Simpler, but less flexible.<br>Dynamically generated (AI decides what to ask)? â More flexible, but requires more logic.<br>ð Letâs finalize these details so we can move into architecture and implementation!<br><br><br>You said:<br>1. draft a complete list of questions based on best practices + what you consider being valuable to be able to provide the best quality PBIÂ´s.<br><br>2. I think it should be a separate full page instead of a modal. <br>On that page user should be able to select a PBI from a dropdown combobox with search functionality.<br>(We are using headless UI combobox for the parent task selector)<br>From each PBI, the user should be able to click a button to open that PBI on the AI refinement page.<br><br>If you can provide figma wireframes that would be fantastic.<br><br>3. LetÂ´s start with the fixed questions, and then maybe add dynamically generated if needed.<br>ChatGPT said:<br>ð Step 1: Complete List of AI Clarifying Questions for High-Quality PBIs<br>The goal is to ensure AI-generated PBIs are highly structured, relevant, and actionable. Below is a best-practice-based question framework that balances user intent, technical feasibility, and product strategy.<br><br>ð¢ General Questions (Always Required)<br>What problem does this feature solve? (Userâs pain point, why itâs needed)<br>What is the expected outcome or benefit? (How success is measured)<br>Who is the primary user? (Developers, admins, end-users, etc.)<br>What should the AI avoid when generating PBIs? (Redundant features, conflicting solutions, etc.)<br>Does this relate to an existing Epic or User Story? (Ensures PBIs are linked to relevant work)<br>ð¡ Questions Based on Feature Type<br>ð¹ For UI/UX Features<br>What are the key UI components or interactions?<br>Should it follow an existing design system? (Yes/No - If yes, specify the system)<br>Are there any accessibility considerations? (WCAG, ARIA, keyboard navigation, etc.)<br>ð¹ For Backend/API Features<br>Which services, endpoints, or database models will be impacted?<br>Are there security concerns (authentication, authorization, sensitive data)?<br>Does it require performance optimizations (caching, async processing, etc.)?<br>ð¹ For Automation or AI-Powered Features<br>Should the system make automatic decisions, or require human approval?<br>What are the key inputs and outputs?<br>Are there ethical concerns with automation (bias, transparency, etc.)?<br>ð¹ For Integrations<br>Which external service(s) will this integrate with?<br>Are there API rate limits or other constraints?<br>Should the system sync data in real-time or on a schedule?<br>ð¹ For Performance-Related Features<br>What is the current bottleneck? (DB queries, large payloads, front-end rendering, etc.)<br>Whatâs the performance expectation? (e.g., Reduce response time from 500ms â 100ms)<br>ð  Workflow &amp; Dependencies<br>Are there any preconditions before this can be implemented? (Feature flags, migrations, etc.)<br>Does it require collaboration across teams? (Design, DevOps, Security, etc.)<br>Are there known risks or potential blockers? (Legacy code dependencies, technical debt, etc.)<br>ð£ Estimation &amp; Prioritization<br>What is the priority level? (Critical, High, Medium, Low)<br>Whatâs the estimated impact? (Revenue, user retention, operational efficiency)<br>Are there any deadlines or time-sensitive constraints? (Launch dates, dependencies, etc.)<br>ð¡ Expected AI Output<br>Using these questions, AI should generate:<br><br>â Epics (High-level objectives)<br>â User Stories (Breaking down the work for users)<br>â Subtasks (Actionable development steps)<br>This structured input ensures AI can create high-quality, actionable PBIs instead of vague tasks.<br><br>ð Step 2: Wireframes - Full Page UI for AI Refinement<br>Iâll create Figma wireframes showcasing the full-page AI refinement process with:<br><br>Dropdown Combobox (Headless UI) to select an existing PBI.<br>AI-Powered Refinement Page (Clarifying Questions + PBI Generation).<br>Buttons to Open &amp; Edit PBIs in the System.<br>ð¹ Let me generate the wireframes and share them with you shortly. ð<br><br>ð Step 3: Fixed Questions First, Dynamic Later<br>â Weâll start with fixed questions (predefined in the UI) to keep the process structured. â If we later need more intelligent, adaptive AI prompts, we can introduce dynamic question generation.<br><br>ð¯ Next Steps<br>1ï¸â£ I\'ll generate and share the Figma wireframes.<br>2ï¸â£ Once we have UI approval, weâll define the API &amp; database structure.<br>3ï¸â£ Then, we move to implementation ð.<br><br>Let me work on the wireframes now! ð¨ð<br><br>You said:<br>A lot of the questions in step 1 could be answered by giving the AI access to technical doccumentation. <br>If the AI doesnÂ´t find the answer there, then the question should be asked. <br>ChatGPT said:<br>Thatâs a fantastic approach! ð By leveraging technical documentation, we can reduce user input fatigue and ensure AI-generated PBIs are as accurate as possible.<br><br>ð¹ Refining the AI Questioning Process<br>Instead of blindly asking all 25+ questions, we will implement a smart, two-step process:<br><br>Step 1: Auto-Extract Answers from Technical Documentation<br>ð Before asking the user anything, AI will try to find the answer from:<br><br>Projectâs API Documentation (Endpoints, models, authentication, rate limits).<br>Database Schema (Relationships, constraints, existing data models).<br>Projectâs Vision &amp; Goals (Product strategy, company objectives).<br>Past User Stories &amp; Epics (Ensuring consistency with previous PBIs).<br>Best Practices &amp; Key Learnings (Mistakes to avoid, past development issues).<br>Step 2: Ask Only the Unanswered Questions<br>ð If AI canât find an answer, it will only ask the missing information.<br><br>For example:<br><br>If API docs specify affected endpoints, AI skips âWhich endpoints will be impacted?â<br>If the database schema reveals relationships, AI skips âWhat data models are involved?â<br>If a past User Story addressed similar issues, AI suggests improvements instead of asking from scratch.<br>ð¹ UX Implementation: Full-Page AI Refinement Flow<br>â Step 1: User selects or creates a PBI.<br>â Step 2: AI scans project documentation for answers.<br>â Step 3: AI generates PBIs, showing:<br><br>ð¹ Pre-filled answers from documentation.<br>ð¹ Questions only for missing details.<br>â Step 4: User reviews &amp; refines before submitting.<br>This ensures: ð Less manual input â AI handles most of the work.<br>ð More accurate PBIs â AI cross-checks against existing docs.<br>ð Faster process â Users answer only what AI canât infer.<br><br>ð¹ Whatâs Next?<br>1ï¸â£ Figma Wireframes â Iâll create the UX flow for AI refinement.<br>2ï¸â£ Technical Documentation Strategy â We define:<br><br>ð Where &amp; how AI should access project documentation.<br>ð Which docs are needed for different PBI types.<br>3ï¸â£ Implementation Plan â Define how AI extracts, processes &amp; asks questions.<br>Would you like me to proceed with wireframes first or technical documentation strategy first? ð<br><br>You said:<br>AI Estimation is the next thing we should include, so donÂ´t bother asking the user for that.<br>ChatGPT said:<br>Got it! ð AI will automatically estimate Story Points instead of asking the user.<br><br>ð¹ How AI Will Estimate Story Points<br>Instead of manually entering estimates, AI will calculate complexity, effort, and uncertainty based on:<br><br>1ï¸â£ Complexity Analysis<br><br>Database impact â Does it involve schema changes? Complex relationships?<br>API impact â Are new endpoints needed? Major refactoring required?<br>Frontend impact â Is it a UI change or deep business logic?<br>Security concerns â Are there authentication/authorization risks?<br>2ï¸â£ Effort Calculation<br><br>Lines of code (LOC) prediction â Based on past PBIs of similar scope.<br>Number of components affected â More files = higher effort.<br>Testing needs â How much unit &amp; integration testing is required?<br>3ï¸â£ Uncertainty Rating<br><br>Does the AI find enough documentation?<br>Does this feature require new technology?<br>Does the feature involve high unknowns (e.g., 3rd party integrations)?<br>ð Estimation Output (Fibonacci Scale) AI will output a story point estimate (1, 2, 3, 5, 8, 13...) with reasoning:<br><br>ð¢ Low Complexity â 1-3 Points<br>ð¡ Moderate Complexity â 5-8 Points<br>ð´ High Complexity &amp; Unknowns â 13+ Points<br>ð¹ Next Steps<br>1ï¸â£ Figma Wireframes (Integrate AI estimation in UI).<br>2ï¸â£ Define Estimation Algorithm (How AI calculates effort).<br>3ï¸â£ Implement AI Estimation API (Story Point prediction).<br><br>Where should AI show the estimated Story Points?<br><br>Inside the PBI form? (User sees it before submission).<br>Only in the backlog? (After PBI is saved).<br>Let me know, and Iâll include it in the wireframes! ð<br><br>You said:<br>I want the AI estimation included in the task description and currently all tasks have a field for estimation where user can enter story points, instead of adding another field for AI estimate IÂ´m thinking we could indicate if estimation is set by AI or if it is human edited. What do you think?<br>ChatGPT said:<br>Thatâs a great approach! It keeps the UI clean while still allowing users to see whether the estimate was AI-generated or manually adjusted.<br><br>ð¹ How to Implement AI Estimation in the Task Description<br>1ï¸â£ Story Points Field Behavior:<br><br>AI auto-generates an initial estimate when a PBI is created.<br>The user can edit the estimate manually if they disagree.<br>If the user changes the AI estimate, we mark it as human-edited.<br>2ï¸â£ Indicating AI vs. Human Estimates:<br><br>AI-generated estimate â Display a small "AI" badge next to the number.<br>User-edited estimate â Display a "User Edited" label (or remove the AI badge).<br>3ï¸â£ Example UI Representations:<br><br>AI Estimate: Story Points: 5 (AI)<br>User-Edited: Story Points: 8 (User Edited)<br>ð¹ Backend &amp; Database Changes<br>Keep the existing story_points field.<br><br>Add a new field: is_ai_estimate (true/false)<br><br>true â AI-generated<br>false â Manually overridden<br>When AI sets the estimate, is_ai_estimate = true.<br><br>If a user changes the estimate, set is_ai_estimate = false.<br><br>ð¹ User Flow<br>1ï¸â£ AI suggests an estimate when the PBI is created.<br>2ï¸â£ User can keep it or edit it.<br>3ï¸â£ If edited, it switches from AI to user-edited.<br>4ï¸â£ The UI reflects whether the estimate is AI-generated or manually adjusted.<br><br>ð¹ Advantages of This Approach<br>â Minimal UI clutter â No extra fields.<br>â Users stay in control â AI assists but doesnât dictate.<br>â Clear distinction between AI-generated &amp; human-set values.<br>â Easy implementation â Just an extra is_ai_estimate field.<br><br>Next Steps<br>ð¹ Update PBI Creation Flow to auto-assign AI estimates.<br>ð¹ Modify UI to display AI/User-edited status.<br>ð¹ Ensure API updates is_ai_estimate correctly.<br><br>Would you like this logic to be included in the Figma wireframes? ð<br><br>You said:<br>Yes<br>ChatGPT said:<br>Great! Iâll now create Figma wireframes incorporating the AI Estimation Flow into the Task Refinement Page.<br><br>ð Wireframe Features<br>ð¹ Full-Page AI Refinement UI (instead of a modal)<br>ð¹ Dropdown Combobox for Selecting a PBI (Headless UI)<br>ð¹ Structured Form-Based AI Q&amp;A for refinement<br>ð¹ Story Points Section:<br><br>Shows AI-estimated points with an "AI" badge<br>Allows manual override (switching to "User Edited")<br>Iâll generate the wireframes now! ð Stay tuned. ð¨<br><br><br>Here is the wireframe for the AI-powered task refinement page! ð¨<br><br>Key Features in the Wireframe:<br>â Full-page layout for refining PBIs<br>â Dropdown combobox with search functionality to select a PBI<br>â AI-driven structured form where AI asks questions and users respond<br>â Story Points Estimation section:<br><br>Shows AI-generated values with an "AI" badge<br>Allows manual override, switching to a "User Edited" label<br>Would you like any modifications before we move forward with implementation? ð<br><br>You said:<br>Can you provide a text based UI description instead?<br>I just need the different components of the page that is needed and then I can do layout and design myself.<br>ChatGPT said:<br>AI-Powered Task Refinement Page - UI Structure<br>This page provides a structured interface for refining PBIs with AI assistance. Below is a breakdown of all the key UI components that should be included.<br><br>ð Main Components<br>1ï¸â£ Page Header (Fixed at the Top)<br>Title: "AI-Powered Task Refinement"<br>Back Button: Returns to the backlog view<br>Help Icon: Opens a tooltip explaining how AI refinement works<br>2ï¸â£ Task Selection Section<br>Label: "Select a PBI to refine"<br>Dropdown Combobox (Headless UI)<br>Allows searching and selecting an existing PBI<br>Displays title &amp; ID of each task<br>Optional: Show the task type (Epic, User Story, Subtask)<br>Button: "Open Task in AI Refinement"<br>3ï¸â£ AI-Assisted Refinement Form (Dynamic Based on Task)<br>Section Title: "Refinement Questions"<br>Questions Panel<br>AI provides structured questions based on the selected task<br>Questions should be grouped by categories (e.g., Goals, Technical Details, Dependencies)<br>Each question has:<br>A text input (for short answers) or a textarea (for detailed explanations)<br>Pre-filled values if available from technical documentation<br>AI-generated suggestions (editable)<br>Toggle: "Show AI Recommendations"<br>Expands a section with AI-generated recommendations for this task<br>4ï¸â£ AI Estimation &amp; Task Metadata<br>Label: "Estimation &amp; Task Metadata"<br>Story Points Field:<br>Displays the AI-estimated story points (default)<br>Allows manual override with a "User Edited" indicator<br>Additional Metadata:<br>Task Priority (Low, Medium, High)<br>Dependencies (Auto-detected &amp; user-editable)<br>Related Epics / Stories<br>5ï¸â£ Actions &amp; Submission<br>Primary Button: "Submit to Backlog"<br>Secondary Button: "Save Draft" (to store refinement progress without submitting)<br>AI Chat History Panel (Optional): Displays past AI interactions for reference<br>ð¡ Notes &amp; Considerations<br>Form should autosave periodically to prevent data loss<br>If the user switches tasks, ask for confirmation before discarding unsaved changes<br>AI should fetch relevant project documentation before asking unnecessary questions<br>Would you like to adjust any sections or add more details? ð<br><br>You said:<br>Some suggested changes:<br>1. It should be possible to add a parent task including all subtasks, in case the user has already worked on creating epic, user stories and subtasks. That way AI gets the whole feature description and can start over.<br>2. We alreadu use autosave with debounced and we also use websockets for real time updates.<br>3. We need a simple settings page where user can choose AI provider (OpenAI to start with) and input API credentials:<br>ChatGPT said:<br>Great suggestions! Hereâs the updated UI structure incorporating your changes:<br><br>ð AI-Powered Task Refinement Page - Updated UI Structure<br>This page enables users to refine PBIs with AI assistance, while ensuring flexibility for existing task hierarchies, real-time updates, and AI provider settings.<br><br>1ï¸â£ Page Header (Fixed at the Top)<br>Title: "AI-Powered Task Refinement"<br>Back Button: Returns to the backlog view<br>Help Icon: Opens a tooltip explaining how AI refinement works<br>2ï¸â£ Task Selection Section<br>Label: "Select a PBI or Parent Task to Refine"<br>Dropdown Combobox (Headless UI)<br>Searchable dropdown to select an individual task (PBI, User Story, or Subtask)<br>Checkbox: "Include all subtasks" (if a parent task is selected)<br>Optional: Show task type (Epic, User Story, Subtask)<br>Button: "Open in AI Refinement"<br>â New Feature: If a parent task is selected with "Include all subtasks," the AI receives the full feature breakdown instead of an isolated task.<br><br>3ï¸â£ AI-Assisted Refinement Form<br>Section Title: "AI-Powered Refinement Questions"<br>Questions Panel<br>AI generates structured questions based on the selected task(s)<br>Grouped Categories:<br>Feature Goals &amp; Outcomes<br>Technical Requirements<br>Dependencies &amp; Risks<br>Acceptance Criteria<br>Each question has:<br>A text input (for short answers) or a textarea (for detailed explanations)<br>Pre-filled values if available from technical documentation<br>AI-generated suggestions (editable)<br>Toggle: "Show AI Recommendations"<br>Expands a section with AI-generated recommendations for this task<br>â New Feature: If the user selects a parent task with subtasks, AI dynamically adjusts questions to consider the full hierarchy.<br><br>4ï¸â£ AI Estimation &amp; Task Metadata<br>Label: "Estimation &amp; Task Metadata"<br>Story Points Field:<br>AI-generated story points (default)<br>Allows manual override with a "User Edited" indicator<br>Additional Metadata:<br>Task Priority (Low, Medium, High)<br>Dependencies (Auto-detected &amp; user-editable)<br>Related Epics / Stories<br>â New Feature: Parent-child relationships are preserved, meaning AI-generated metadata accounts for linked tasks.<br><br>5ï¸â£ Real-Time Updates &amp; Autosave<br>WebSocket-Enabled: Any changes made instantly update other users in real-time<br>Debounced Autosave: Saves progress periodically to prevent data loss<br>Undo/Redo: Simple history tracking for user changes<br>â New Feature: Uses existing WebSocket + debounced autosave setup for seamless real-time updates.<br><br>6ï¸â£ Actions &amp; Submission<br>Primary Button: "Submit to Backlog"<br>Secondary Button: "Save Draft" (stores refinement progress without submitting)<br>AI Chat History Panel (Optional): Displays past AI interactions for reference<br>7ï¸â£ AI Provider Settings Page<br>Page Title: "AI Integration Settings"<br>Dropdown: "Select AI Provider" (Starting with OpenAI)<br>Future support for multiple providers (Anthropic, Azure, Local AI, etc.)<br>API Key Input Field<br>Test Connection Button (Validates API credentials)<br>Save Settings Button<br>â New Feature: Centralized AI provider settings so users can configure API credentials before using AI-powered refinement.<br><br>Final Thoughts<br>â Supports full feature refinement (Epics + Subtasks)<br>â Uses real-time WebSocket updates + autosave (no lost work)<br>â Gives users control over AI-generated estimations<br>â Modular AI provider integration for future flexibility<br><br>ð Would you like any additional refinements before we move forward?<br><br>You said:<br>How do we give AI permission to write in the database?<br>ChatGPT said:<br>Granting AI Permission to Write to the Database<br>For AI to write to the database, we need a secure and controlled mechanism to ensure data integrity, security, and prevent unauthorized access.<br><br>1ï¸â£ Recommended Approach: Secure API Endpoint<br>Instead of allowing AI direct access to the database, we expose a controlled API that the AI can interact with.<br><br>â Steps to Implement<br>Create an API Endpoint (e.g., /api/pbis)<br><br>Accepts AI-generated Epics, User Stories, Subtasks<br>Validates input before saving to DB<br>Use API Authentication<br><br>API Key or OAuth2 Token: AI must authenticate before sending requests.<br>Store AI credentials securely in environment variables.<br>Define Access Controls<br><br>Restrict AI to specific actions (e.g., insert PBIs, update fields)<br>Role-Based Access Control (RBAC): AI should have a limited DB role (e.g., ai_writer).<br>Validate AI-Generated Data<br><br>Enforce schema validation (e.g., JSON Schema)<br>Apply business rules (e.g., prevent circular dependencies)<br>Use an AI Service Account<br><br>AI interacts as a designated system user (not a superuser)<br>Logs all AI interactions for auditability<br>2ï¸â£ Backend Implementation<br>ð Create the API Route (/api/pbis)<br>python<br>Copy<br>Edit<br>from flask import Blueprint, request, jsonify<br>from models import db, PBI<br>from auth_middleware import verify_ai_auth<br><br>bp = Blueprint("ai_pbi_api", __name__)<br><br>@bp.route("/api/pbis", methods=["POST"])<br>@verify_ai_auth # â Require AI authentication<br>def create_pbi():<br>"""Handles AI-generated PBI creation"""<br><br>data = request.json<br>if not data:<br>return jsonify({"error": "No data provided"}), 400<br><br># â Validate input structure<br>required_fields = ["title", "description", "task_type", "priority"]<br>if not all(field in data for field in required_fields):<br>return jsonify({"error": "Missing required fields"}), 400<br><br># â Insert into database<br>new_pbi = PBI(<br>title=data["title"],<br>description=data["description"],<br>task_type=data["task_type"],<br>priority=data.get("priority", "Medium"),<br>estimated_points=data.get("estimated_points", None), # AI estimate<br>created_by="AI", # Track source<br>)<br><br>db.session.add(new_pbi)<br>db.session.commit()<br><br>return jsonify({"message": "PBI created successfully", "id": new_pbi.id}), 201<br>3ï¸â£ AI Authentication &amp; Security<br>ð Use API Keys to Restrict Access<br>Middleware for AI Authentication (auth_middleware.py):<br><br>python<br>Copy<br>Edit<br>from flask import request, jsonify<br>import os<br><br>VALID_AI_API_KEY = os.getenv("AI_API_KEY")<br><br>def verify_ai_auth(func):<br>"""Middleware to verify AI authentication"""<br>def wrapper(*args, **kwargs):<br>api_key = request.headers.get("X-API-Key")<br>if api_key != VALID_AI_API_KEY:<br>return jsonify({"error": "Unauthorized AI access"}), 403<br>return func(*args, **kwargs)<br>return wrapper<br>â AI must send a valid API key in the request headers:<br><br>json<br>Copy<br>Edit<br>{<br>"title": "Implement AI Task Refinement",<br>"description": "Break down AI task refinement into structured PBIs",<br>"task_type": "Epic",<br>"priority": "High",<br>"estimated_points": 8<br>}<br>ð¡ Security Best Practices<br><br>Rotate API Keys regularly<br>Use role-based permissions<br>Log all AI interactions for debugging &amp; auditing<br>Limit AIâs scope to only modifying PBIs (not users, projects, etc.)<br>4ï¸â£ PostgreSQL Database Role for AI<br>Instead of granting full DB access, create a limited-access AI role:<br><br>sql<br>Copy<br>Edit<br>-- Create a restricted AI role<br>CREATE ROLE ai_writer WITH LOGIN PASSWORD \'securepassword\';<br><br>-- Grant permission to insert PBIs but not delete them<br>GRANT INSERT, UPDATE ON pbis TO ai_writer;<br>5ï¸â£ WebSocket Integration (Optional)<br>If using real-time updates, AI should broadcast new PBIs:<br><br>python<br>Copy<br>Edit<br>from flask_socketio import emit<br><br>@bp.route("/api/pbis", methods=["POST"])<br>@verify_ai_auth<br>def create_pbi():<br>...<br>db.session.commit()<br><br># ð¥ Notify frontend in real-time<br>emit("pbi_created", {"id": new_pbi.id, "title": new_pbi.title}, broadcast=True)<br><br>return jsonify({"message": "PBI created successfully", "id": new_pbi.id}), 201<br>ð Final Summary<br>â API Gateway: AI writes via /api/pbis<br>â Secure Authentication: AI must provide an API key<br>â Database Role: AI is limited to inserting/updating PBIs only<br>â Schema Validation: Ensures AI submits valid data<br>â Real-Time Updates: WebSocket notifications for new PBIs<br>ð¯ Next Steps<br>Would you like:<br><br>To implement a similar API for retrieving PBIs? (GET /api/pbis)<br>AI role to have limited UPDATE access for task refinements?<br>A test script to verify AI authentication &amp; data submission?<br>You said:<br>IÂ´m saving you questions for later.<br><br>For now letÂ´s get back on track:<br><br>Can you rewrite the entire plan based on what we have agreed on so far and then move on to step 2.<br><br>1. [COMPLETED] I want us to discuss how it would be inplemented in the UI and provide the optimal UX.<br>2. Could we benefit from drafting the architecture, sequence diagrams, user flows?<br>3. Before we start coding, I want you to create PBIÂ´s for the project and estimate complexity.<br>4. Create psql commands for creating the PBIÂ´s.<br><br>Lets go through these steps one by one.<br>ChatGPT said:<br>AI-Powered PBI Generation &amp; Integration Plan<br>Overview<br>We are developing an AI-powered system that automates the generation and refinement of Epics, User Stories, and Subtasks in our Project Management System (PMS). The system will allow users to refine feature ideas through a structured, guided AI interaction and directly submit PBIs (Product Backlog Items) into the backlog.<br><br>â Phase 1: UI/UX Implementation Plan (Completed)<br>We have defined the best user experience (UX) strategy and identified how users will interact with the AI-driven PBI refinement system.<br><br>ð¹ UI/UX Key Decisions<br>Where PBI Creation Happens<br><br>Inside the Backlog View â AI-assisted refinement happens within the backlog planning workflow.<br>Standalone Full-Page PBI Refinement View â Instead of a modal, we will use a full-page AI refinement interface.<br>How the User Provides Input<br><br>Users select an existing PBI from a searchable combobox (Headless UI)<br>Users can also add a parent task, including all its subtasks, ensuring AI gets full context.<br>How AI Refines PBIs<br><br>AI asks structured, best-practice questions<br>AI accesses technical documentation before asking questions, avoiding redundant prompts.<br>Inline Editing: AI suggests PBIs, and the user can edit before finalizing.<br>Step-by-Step Refinement: AI refines tasks dynamically based on user responses.<br>How Users Trigger AI PBI Generation<br><br>Button: "Generate PBIs from Feature Request"<br>AI Guidance: AI offers to help refine a new feature request when a user creates a new PBI.<br>Shortcut Command: /generate_pbi &lt;feature&gt;<br>How AI Estimation Works<br><br>AI assigns story points based on complexity<br>The estimation field tracks whether it was set by AI or manually edited by the user.<br>Users can override AI estimates manually.<br>ð¹ Finalized UI Components for PBI Refinement Page<br>ð PBI Refinement Page (Full-Screen UI)<br>ð Searchable Dropdown (Combobox)<br><br>Users search &amp; select a PBI from the backlog.<br>Users can add a parent task + subtasks for AI to analyze.<br>ð AI Question Form<br><br>AI asks structured questions to refine the feature request.<br>AI auto-fills answers when possible (from project history/docs).<br>User fills in missing details manually.<br>ð AI-Generated PBIs Section<br><br>AI dynamically generates Epics, User Stories, and Subtasks.<br>PBIs appear in real-time as AI refines them.<br>Users can edit PBIs inline before submission.<br>ð AI Story Point Estimation<br><br>AI auto-assigns story points based on complexity.<br>Indicator shows if estimation was set by AI or edited by the user.<br>ð Autosave &amp; WebSockets<br><br>Debounced auto-save ensures changes are not lost.<br>WebSockets enable real-time updates across team members.<br>ð  Settings Page<br><br>AI Provider Selection: OpenAI (default)<br>API Key Input: Secure credentials storage for AI integration.<br>ð Phase 2: Architecture, Sequence Diagrams &amp; User Flows<br>Why Do We Need This?<br>Before coding, we should draft architectural diagrams to:<br><br>Visualize the AIâs role in the PMS system.<br>Map the user flow from input to AI-generated PBIs.<br>Ensure database integration is structured correctly.<br>Avoid unnecessary rewrites by planning dependencies.<br>ð Key Architectural Components<br>1ï¸â£ Frontend UI<br><br>Next.js React App<br>Full-page AI refinement view<br>Headless UI Combobox for PBI selection<br>Real-time UI updates via WebSockets<br>2ï¸â£ AI Processing<br><br>AI fetches context from technical documentation &amp; backlog<br>AI generates PBIs dynamically using structured rules<br>AI assigns story points automatically<br>AI questions the user only when necessary (context-aware questioning)<br>3ï¸â£ Backend API<br><br>/api/pbis â AI submits PBIs<br>/api/pbis/:id â Retrieve PBIs for AI refinement<br>Authentication middleware (API keys for AI)<br>WebSockets for real-time updates<br>4ï¸â£ Database Schema Changes<br><br>Track whether AI or user set story points<br>Store AI-generated questions &amp; answers for auditing<br>Link PBIs to their refined feature requests<br>ð Next Steps<br>1ï¸â£ Create High-Level Architecture Diagram<br>How the UI, AI processing, and backend interact<br>Illustrate AI refinement flow &amp; database interactions<br>2ï¸â£ Define Sequence Diagrams<br>User selects a feature request â AI processes it â PBIs are generated<br>AI refines questions dynamically based on available data<br>3ï¸â£ Map User Flows<br>Step-by-step process from selecting a PBI to AI refinement &amp; submission<br>Flowchart of AI interaction (when to ask, when to auto-fill answers)<br>Would you like me to generate initial architecture &amp; sequence diagrams now? ð<br><br>You said:<br>Yes, I would like that but you also need to know waht I use for backend, right?<br>Python / flask and postgreSQL. <br>ChatGPT said:<br>Yes, knowing that your backend is built with Python / Flask and PostgreSQL is crucial for designing the architecture and sequence diagrams effectively.<br><br>I will now generate the following:<br><br>1ï¸â£ High-Level Architecture Diagram â How the UI, AI processing, and backend interact.<br>2ï¸â£ Sequence Diagram â How a PBI is refined by AI and submitted to the database.<br>3ï¸â£ User Flow Diagram â How users interact with AI-driven PBI refinement.<br><br>Since we are using Flask for the backend, I will ensure that the API endpoints and WebSocket handling align with Flaskâs best practices. Iâll also consider PostgreSQL schema changes to store AI-generated PBIs effectively.<br><br>I will now generate these diagrams. Stay tuned! ð¨ð<br><br><br>Analysis errored<br>python<br>Always show details<br><br>Copy<br>import matplotlib.pyplot as plt<br>import matplotlib.patches as mpatches<br><br>def draw_architecture_diagram():<br>fig, ax = plt.subplots(figsize=(10, 6))<br><br># Title<br>ax.set_title("High-Level Architecture: AI-Driven PBI Refinement", fontsize=14, fontweight="bold")<br><br># Components<br>components = {<br>"Frontend (Next.js)": (0.2, 0.8),<br>"AI Processing (GPT-4 API)": (0.5, 0.8),<br>"Backend API (Flask)": (0.8, 0.8),<br>"PostgreSQL Database": (0.8, 0.5),<br>"WebSockets (Real-time Updates)": (0.5, 0.5)<br>}<br><br># Draw components<br>for label, (x, y) in components.items():<br>ax.add_patch(mpatches.FancyBboxPatch((x-0.1, y-0.05), 0.2, 0.1, boxstyle="round,pad=0.1", <br>facecolor="lightblue", edgecolor="black"))<br>ax.text(x, y, label, ha="center", va="center", fontsize=10, fontweight="bold")<br><br># Arrows<br>arrows = [<br>((0.2, 0.8), (0.5, 0.8)), # Frontend â AI Processing<br>((0.5, 0.8), (0.8, 0.8)), # AI Processing â Backend API<br>((0.8, 0.8), (0.8, 0.5)), # Backend API â PostgreSQL<br>((0.8, 0.5), (0.8, 0.8)), # PostgreSQL â Backend API<br>((0.8, 0.8), (0.5, 0.5)), # Backend API â WebSockets<br>((0.5, 0.5), (0.2, 0.8)) # WebSockets â Frontend<br>]<br><br>for start, end in arrows:<br>ax.annotate("", xy=end, xytext=start, arrowprops=dict(arrowstyle="-&gt;", lw=2))<br><br># Hide axes<br>ax.set_xticks([])<br>ax.set_yticks([])<br>ax.set_frame_on(False)<br><br># Show diagram<br>plt.show()<br><br># Draw the architecture diagram<br>draw_architecture_diagram()<br>I encountered an issue generating the architecture diagram. Let me try again. \u200b\u200b<br><br><br>Analysis errored<br>python<br>Always show details<br><br>Copy<br>import matplotlib.pyplot as plt<br>import matplotlib.patches as mpatches<br><br>def draw_architecture_diagram():<br>fig, ax = plt.subplots(figsize=(10, 6))<br><br># Title<br>ax.set_title("High-Level Architecture: AI-Driven PBI Refinement", fontsize=14, fontweight="bold")<br><br># Components<br>components = {<br>"Frontend (Next.js)": (0.2, 0.8),<br>"AI Processing (GPT-4 API)": (0.5, 0.8),<br>"Backend API (Flask)": (0.8, 0.8),<br>"PostgreSQL Database": (0.8, 0.5),<br>"WebSockets (Real-time Updates)": (0.5, 0.5)<br>}<br><br># Draw components<br>for label, (x, y) in components.items():<br>ax.add_patch(mpatches.FancyBboxPatch((x-0.1, y-0.05), 0.2, 0.1, boxstyle="round,pad=0.1", <br>facecolor="lightblue", edgecolor="black"))<br>ax.text(x, y, label, ha="center", va="center", fontsize=10, fontweight="bold")<br><br># Arrows<br>arrows = [<br>((0.2, 0.8), (0.5, 0.8)), # Frontend â AI Processing<br>((0.5, 0.8), (0.8, 0.8)), # AI Processing â Backend API<br>((0.8, 0.8), (0.8, 0.5)), # Backend API â PostgreSQL<br>((0.8, 0.5), (0.8, 0.8)), # PostgreSQL â Backend API<br>((0.8, 0.8), (0.5, 0.5)), # Backend API â WebSockets<br>((0.5, 0.5), (0.2, 0.8)) # WebSockets â Frontend<br>]<br><br>for start, end in arrows:<br>ax.annotate("", xy=end, xytext=start, arrowprops=dict(arrowstyle="-&gt;", lw=2))<br><br># Hide axes<br>ax.set_xticks([])<br>ax.set_yticks([])<br>ax.set_frame_on(False)<br><br># Show diagram<br>plt.show()<br><br># Draw the architecture diagram<br>draw_architecture_diagram()<br>I encountered an issue generating the architecture diagram. Instead, I\'ll describe it textually:<br><br>High-Level Architecture for AI-Driven PBI Refinement<br>This architecture integrates Next.js (Frontend), Flask (Backend API), PostgreSQL (Database), GPT-4 API, and WebSockets for real-time updates.<br><br>Components &amp; Flow:<br>Frontend (Next.js)<br><br>User selects a feature request from the backlog.<br>Inputs details and triggers AI-powered PBI generation.<br>Displays AI-generated Epics, User Stories, and Subtasks.<br>Supports real-time updates via WebSockets.<br>AI Processing (GPT-4 API)<br><br>Receives feature descriptions and additional context.<br>Generates structured PBIs based on predefined rules and user input.<br>Returns the refined tasks to the backend.<br>Backend API (Flask)<br><br>Routes API requests between frontend and AI service.<br>Validates and processes AI-generated PBIs.<br>Stores tasks in PostgreSQL.<br>Emits WebSocket events for real-time updates.<br>PostgreSQL Database<br><br>Stores all Epics, User Stories, and Subtasks.<br>Keeps track of AI-generated vs. user-edited PBIs.<br>Supports search and retrieval.<br>WebSockets (Flask-SocketIO)<br><br>Sends real-time updates when PBIs are refined or modified.<br>Ensures users see immediate changes.<br>Next, I will draft sequence diagrams and user flows for how the AI-powered PBI refinement process works. Stay tuned! ð \u200b\u200b<br><br>You said:<br>Please continue<br>ChatGPT said:<br>Step 2: Drafting Architecture, Sequence Diagrams, and User Flows<br>1ï¸â£ Sequence Diagram: AI-Driven PBI Refinement Process<br>Actors:<br>User: Interacts with the UI to refine and submit PBIs.<br>Frontend (Next.js): Sends user input to the backend and displays results.<br>Backend (Flask API): Processes requests and interacts with AI &amp; DB.<br>AI Service (GPT-4 API): Generates PBIs based on input.<br>PostgreSQL Database: Stores PBIs and project data.<br>ð ï¸ Step-by-Step Process (Refinement Flow)<br>1. User selects a PBI to refine<br>Opens the AI Refinement Page.<br>Selects an existing Feature Request from a searchable dropdown.<br>(Optional) Adds a parent task to include all subtasks.<br>2. AI Queries Additional Context<br>AI first searches project documentation (if available).<br>If AI finds missing information, it generates a set of questions.<br>User answers questions in a structured form UI.<br>AI refines its understanding.<br>3. AI Generates PBIs<br>AI generates:<br>Epics<br>User Stories<br>Subtasks<br>Assigns Story Points (AI estimation).<br>Saves metadata (dependencies, priorities, assignments).<br>4. User Reviews &amp; Modifies<br>The user can:<br>Edit task descriptions (inline).<br>Adjust AI estimations (AI tag remains visible).<br>Remove irrelevant PBIs.<br>5. PBIs are Auto-Saved &amp; Updated<br>Changes are debounced &amp; saved automatically.<br>WebSockets broadcast changes in real time to all users.<br>6. PBIs are Submitted to Backlog<br>When satisfied, the user confirms submission.<br>The system:<br>Inserts PBIs into PostgreSQL.<br>Marks them as ready for execution.<br>2ï¸â£ User Flow: AI-Powered Task Refinement<br>ð¢ User selects a feature request â ð¡ AI refines using project data â ð  User answers missing details â ðµ AI generates structured PBIs â ð£ User reviews &amp; submits<br><br>3ï¸â£ Key Backend API Endpoints<br>These will be implemented in Flask.<br><br>Endpoint Method Description<br>/api/pbis POST Submit AI-generated PBIs to the backlog<br>/api/pbis/refine POST AI generates/refines PBIs<br>/api/pbis/questions GET AI fetches clarification questions if required<br>/api/pbis/{pbi_id} PATCH Updates a PBI after user edits<br>/api/pbis/{pbi_id}/submit POST Confirms PBI submission<br>4ï¸â£ Database Schema Updates (PostgreSQL)<br>To support AI-powered task refinement, we add new fields:<br><br>sql<br>Copy<br>Edit<br>ALTER TABLE tasks ADD COLUMN ai_generated BOOLEAN DEFAULT FALSE;<br>ALTER TABLE tasks ADD COLUMN refinement_status TEXT DEFAULT \'Pending\';<br>ALTER TABLE tasks ADD COLUMN estimation_source TEXT DEFAULT \'User\';<br>5ï¸â£ Next Steps<br>âï¸ Architecture, API endpoints, and database updates are drafted.<br>â¡ï¸ Next: Move to Step 3 (Creating PBIs &amp; Estimating Complexity). ð<br><br>Let me know if you want any modifications before proceeding!<br><br>You said:<br>Where should we store the documentation?<br>Where in the UI should the user upload the documentation?<br>Is it possible to get the documentation automatically from an integration?<br>Like GitHub, VScode?<br>Provided that the documentation exist there.<br>Add a simple settings page where user can input API key and credentials.<br>ChatGPT said:<br>ð Storing &amp; Managing Documentation for AI-Powered PBI Refinement<br>To ensure AI can access relevant project documentation for refining PBIs, we need a structured way to store, retrieve, and update documentation. Below is the plan:<br><br>1ï¸â£ Where Should We Store Documentation?<br>Option 1: PostgreSQL (Best for Structured Documentation)<br>Store documentation as text in a dedicated table.<br>Allows version control and easy retrieval.<br>Can be indexed for faster AI retrieval.<br>Table: project_documentation<br>sql<br>Copy<br>Edit<br>CREATE TABLE project_documentation (<br>id SERIAL PRIMARY KEY,<br>project_id INT REFERENCES projects(id) ON DELETE CASCADE,<br>title TEXT NOT NULL,<br>content TEXT NOT NULL,<br>source TEXT DEFAULT \'Manual Upload\',<br>uploaded_by INT REFERENCES users(id),<br>created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP<br>);<br>â Pros:<br><br>AI can efficiently search and extract relevant details.<br>Allows tagging &amp; filtering by source (e.g., GitHub, VS Code, Manual Upload).<br>Option 2: External File Storage (Best for Large Documents)<br>Store Markdown, TXT, or PDF files in an S3 bucket (AWS, Firebase, etc.).<br>Only metadata is stored in PostgreSQL.<br>AI retrieves and processes the files when needed.<br>Table: documentation_files<br>sql<br>Copy<br>Edit<br>CREATE TABLE documentation_files (<br>id SERIAL PRIMARY KEY,<br>project_id INT REFERENCES projects(id) ON DELETE CASCADE,<br>file_url TEXT NOT NULL,<br>file_type TEXT NOT NULL CHECK (file_type IN (\'md\', \'txt\', \'pdf\')),<br>uploaded_by INT REFERENCES users(id),<br>created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP<br>);<br>â Pros:<br><br>Supports larger documents that may not fit in PostgreSQL.<br>Allows manual file uploads and auto-fetching from integrations.<br>2ï¸â£ Where in the UI Should the User Upload Documentation?<br>ð Dedicated "Documentation Management" Page (Settings)<br>Location: Inside Settings &gt; Documentation.<br>Features:<br>Upload Markdown, TXT, PDF files.<br>View &amp; Edit existing documentation.<br>Connect integrations (GitHub, VS Code, Notion, etc.).<br>Configure AI access permissions for each document.<br>3ï¸â£ Automatic Documentation Retrieval<br>â Can We Integrate with GitHub, VS Code, or Notion?<br>Yes! We can fetch project documentation automatically from these sources:<br><br>Integration Method Use Case<br>GitHub Fetch .md files via API Pull documentation from repos<br>VS Code Read local .md files Sync local project docs<br>Notion API connection Import structured docs<br>Google Drive API connection Fetch shared project docs<br>ð¡ Example: GitHub API Integration<br>Fetch .md documentation from a GitHub repo:<br><br>python<br>Copy<br>Edit<br>import requests<br><br>GITHUB_TOKEN = "your_personal_token"<br>REPO_OWNER = "your_username"<br>REPO_NAME = "your_project"<br><br>url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/docs"<br>headers = {"Authorization": f"token {GITHUB_TOKEN}"}<br><br>response = requests.get(url, headers=headers)<br>files = response.json()<br><br>for file in files:<br>if file["name"].endswith(".md"):<br>doc_content = requests.get(file["download_url"]).text<br>print("Fetched Documentation:", doc_content)<br>â Pros:<br><br>Automatically syncs up-to-date documentation from GitHub.<br>AI can use repo docs before asking the user for details.<br>4ï¸â£ Simple Settings Page for AI API &amp; Integrations<br>ð Location: Settings &gt; AI &amp; Integrations<br><br>â User Can:<br><br>Enter OpenAI API Key.<br>Connect GitHub Repo (OAuth or Token).<br>Enable Auto-Fetch from VS Code, Notion, Google Drive.<br>Set AI Access Rules (e.g., Allow AI to modify docs?).<br>ð§ Database Table: integration_settings<br>sql<br>Copy<br>Edit<br>CREATE TABLE integration_settings (<br>id SERIAL PRIMARY KEY,<br>user_id INT REFERENCES users(id),<br>integration_name TEXT NOT NULL,<br>api_key TEXT NOT NULL,<br>is_enabled BOOLEAN DEFAULT TRUE,<br>created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP<br>);<br>ð Next Steps<br>â Implement API endpoints for documentation storage &amp; retrieval.<br>â Build a simple settings page to manage AI API &amp; integrations.<br>â Set up GitHub/VS Code sync for fetching docs automatically.<br><br>Would you like mockups or wireframes for the settings page? ðIÂ´m still in planning mode, so letÂ´s continue.<br><br><br>## AI driven creation of Epics, User stories and Subtasks.<br><br>I have, on several occasions when we have discussed a new feature and outlined a high level plan asked you to create epics, user stories and subtasks for the feature. <br><br>You are very good at this and it saves a lot of time compared to writing them manually. <br><br>However, we could create a process of this and include some steps were we go through some exercises that will help increase the quality of the output. <br>IÂ´m thinking about:<br><br>1. Check PBIÂ´s against the list of key learnings &amp; takeaways for future development<br><br>After every session we do a retrospective where we summarize the session. One section of the summary is a list of key learnings &amp; takeaways for future development. Those should be appended to a complete list of key takeaways for future development.<br><br>Every time we create epics, user stories and subtasks for a new feature we should check them against this checklist of key learnings &amp; takeaways for future development. We can then include reminder notes about this in the tasks they are relevant for. This way we will reduce repeating mistakes, be aware of technical considerations we have to adhere to etc..<br><br>2. Maybe use frameworks like user story mapping<br><br>3. Any other ideas for increasing quality. <br><br>## Estimation:<br><br>I have also asked you to estimate the complexity of the tasks using story points. <br><br>### We have used this framework for estimation:<br><br>We estimate tasks using **story points** with the **Fibonacci scale** (1, 2, 3, 5, 8, 13, etc.) That allows us to gauge the **complexity, effort, and uncertainty** associated with each task.<br><br>GPT (You) will assess every feature based on:<br><br>1. **Complexity**: How difficult the task is (e.g., architecture, database relationships, etc.).<br>2. **Effort**: How much time and effort will be required to code, test, and debug.<br>3. **Uncertainty**: Any unknowns or potential challenges (e.g., interacting with new parts of the system, external factors).<br><br>### **Benchmarking**:<br><br>To give context to these estimates:<br><br>- **1-2 Points**: Minor changes like renaming variables, small bug fixes.<br>- **3-5 Points**: Moderate tasks, involving some new logic, minor database changes, and testing.<br>- **8+ Points**: More complex tasks, like introducing new models, changing relationships in the database, or modifying core app logic with potential unknowns.<br><br>### Typical output for a user story:<br><br>ð¢ User Story 1: Implement Parent Task Dropdown in Task Modal<br>As a user, I want to assign or change a parent task directly from the task modal, so that I can organize my tasks efficiently.<br><br>â Acceptance Criteria:<br><br>A dropdown appears in the task modal, listing all valid parent tasks.<br>Prevents selection of circular dependencies.<br>Updates the parent task dynamically upon selection.<br>Displays correct hierarchy after updates.<br>ð Estimation: 5 Story Points<br><br>Complexity: Moderate â Needs task filtering, validation logic, and UI integration.<br>Effort: Moderate â Requires API calls, handling UI state, and testing.<br>Uncertainty: Low â We understand the task relationships well.<br><br><br>This is all a part of a larger idea about how to streamline and improve the quality of the entire product development lifecycle and development process.<br><br>## MVP version<br>IÂ´ve been trying to figure out what would be the most valuable step to start building a feature for.<br><br>I think it is a feature that will allow you (AI) to submit these PBIÂ´s into the backlog of my project management tool and then be able to read them back from the tool.<br><br>So the first draft of the feature would be to create a function that can take a PBI and submit it to the db of the project management tool.<br><br>## Version 2:<br>Next step would be to create a function that can read the PBIs from the db and return them as a list.<br><br>## Version 3<br>To take the whole process of refining a simple feature idea or request into more detailed and actionable PBIÂ´s and integrate it into the project management tool.<br><br>### This would involve the following requirements:<br>- It needs to be a guided process, not just an inline chat.<br>- Both the user and the AI should follow the process.<br><br>To be further discussed....<br>I have a documented ideas in this notion file:<br><a target="_blank" rel="noopener noreferrer" href="https://www.notion.so/lacunamedia/Automating-task-creation-in-autoagile-191979257fc08007a001c3c2dc0a773f?pvs=4">https://www.notion.so/lacunamedia/Automating-task-creation-in-autoagile-191979257fc08007a001c3c2dc0a773f?pvs=4</a><br><br>## The development process:<br>Generating code for the feature based on the PBIÂ´s.<br>The process of you (AI) and me coding together is a process of itÂ´s own that we are working on a plan for optimizing. <br>See separate document: \'optimizing_our_development_process.md\' <br><br><br><br>How can we automate the whole process of:<br><br>1. Create Epics, User stories and subtasks from a refined feature request.<br>2. Script them into the database of autoagile<br>3. Allow AI to read the tasks<br><br><br>This is a great initiative that will systematize and automate the process of turning feature ideas into well-structured PBIs (Epics, User Stories, and Subtasks). Below is a structured approach to refining and implementing this system.<br><br>ð Summary of the Planned Process<br>We are aiming to automate the workflow of refining a feature request into actionable PBIs and integrating them directly into the project management tool. The long-term vision is to ensure quality, consistency, and efficiency in product development.<br><br>ð Proposed Steps for Automating AI-Driven PBI Creation<br>1ï¸â£ Create Epics, User Stories &amp; Subtasks from a Refined Feature Request<br>ð¹ Step 1: Validate PBIs Against "Key Learnings &amp; Takeaways"<br><br>After every session, we capture Key Learnings &amp; Takeaways for future development.<br>When generating new PBIs, we cross-check them against this checklist.<br>If relevant, reminder notes are added to tasks (e.g., âAvoid X issue seen in past developmentâ).<br>â Benefit: Prevent repeated mistakes, ensure technical consistency.<br><br>ð¹ Step 2: Use Frameworks to Improve PBI Quality<br><br>User Story Mapping: Break down the feature based on user journeys.<br>Impact Mapping: Understand the business &amp; user impact.<br>Jobs-to-Be-Done (JTBD): Define tasks based on what the user is trying to achieve.<br>BDD (Behavior-Driven Development) Scenarios: Define Acceptance Criteria in a structured format.<br>â Benefit: Increases clarity, prioritization, and alignment with user goals.<br><br>ð¹ Step 3: Automate AI-Driven PBI Generation<br><br>AI takes a high-level feature request and breaks it down into Epics, User Stories, and Subtasks.<br>AI adds relevant acceptance criteria and ensures no conflicting dependencies.<br>User can review &amp; refine before submitting to the backlog.<br>â Benefit: Reduces manual effort, ensures consistency.<br><br>2ï¸â£ Submit PBIs to the AutoAgile Database<br>ð¹ Step 4: Create API for AI to Submit PBIs<br><br>A POST API endpoint will allow AI to write PBIs into the project management system.<br>AI will assign metadata (e.g., priority, estimated effort, dependencies).<br>â Benefit: Ensures a structured backlog instead of scattered notes.<br><br>3ï¸â£ Allow AI to Read and Retrieve PBIs<br>ð¹ Step 5: Create API to Fetch PBIs<br><br>A GET API endpoint will allow AI to retrieve PBIs from the database.<br>This enables PBI iteration, tracking, and refinement.<br>â Benefit: AI can refine &amp; adjust PBIs dynamically over time.<br><br>4ï¸â£ Version 3: Full AI-Driven PBI Refinement Process<br>ð¹ Step 6: Create a Guided Process for PBI Refinement Instead of an inline chat, we build a structured UI to guide both the user and AI in refining PBIs.<br><br>Step 1: User provides initial feature request.<br>Step 2: AI asks clarifying questions (e.g., âIs this a new feature or an improvement?â).<br>Step 3: AI generates Epics, User Stories &amp; Subtasks.<br>Step 4: AI applies learnings from past development.<br>Step 5: User reviews &amp; refines before finalizing.<br>Step 6: PBIs are submitted to the backlog.<br>â Benefit: Ensures high-quality PBIs while keeping the user in control.<br><br>ð ï¸ Technical Implementation Plan<br>Phase 1 (MVP)<br>â Backend:<br><br>Create a POST /api/pbis endpoint to submit PBIs.<br>Store PBIs in the AutoAgile database.<br>â Frontend:<br><br>Simple form UI for submitting PBIs.<br>Allow users to review &amp; edit before submission.<br>â AI Integration:<br><br>AI generates PBIs using structured templates.<br>AI checks against the Key Learnings &amp; Takeaways.<br>Phase 2 (API Retrieval)<br>â Backend:<br><br>Create GET /api/pbis to fetch PBIs.<br>Support filtering by status, priority, and dependencies.<br>â Frontend:<br><br>Display PBIs in the backlog.<br>Allow users to edit, refine &amp; iterate on PBIs.<br>Phase 3 (Full AI-Driven Workflow)<br>â Backend:<br><br>Implement AI-powered iterative refinement.<br>Store AI-generated clarifying questions &amp; user responses.<br>â Frontend:<br><br>Guided multi-step process for refining PBIs.<br>Interactive user review step before final submission.<br>â AI Integration:<br><br>AI actively asks clarifying questions before generating PBIs.<br>AI learns from past PBIs and Key Learnings to improve over time.<br>ð Key Benefits of This System<br>â Automates repetitive work â AI breaks down features into PBIs.<br>â Ensures higher quality PBIs â AI cross-checks with Key Learnings.<br>â Prevents dependency issues â AI validates task relationships.<br>â Creates a structured backlog â PBIs are stored systematically.<br>â Streamlines estimation â AI assigns story points based on complexity.<br>â Saves developer time â Faster iteration &amp; execution of product features.<br><br>ð Next Steps<br>ð Would you like to start with Phase 1 (Submitting PBIs to the database)?<br>Or do you want to explore UI/UX ideas for the guided process first?<br><br>You said:<br>Does this require an integration to for example OpenAIÂ´s API or is it possible to create an Action in a custom GPT and when triggering that action the PBIÂ´s are submitted to the db? <br>ChatGPT said:<br>It does not necessarily require OpenAIâs API integration if we use Custom GPT Actions. Hereâs how both approaches would work:<br><br>1ï¸â£ Using Custom GPT Actions (No API Integration Needed)<br>â How It Works<br>Instead of calling an external API, we can define an Action in a Custom GPT that directly interacts with the database.<br><br>Trigger the Action<br><br>You (the user) initiate a request:<br>"Generate PBIs for the new feature and submit them to the backlog."<br>AI Generates PBIs<br><br>Based on the feature description, the AI structures Epics, User Stories, and Subtasks.<br>AI assigns story points, dependencies, and priority.<br>AI Executes the Action<br><br>The Custom GPT Action runs, submitting the generated PBIs directly into the project management toolâs database.<br>Confirmation &amp; Review<br><br>The system can return a confirmation message:<br>"PBIs have been submitted. Would you like to refine them further?"<br>â Whatâs Needed to Implement This?<br>Define a Custom GPT Action<br><br>The Action should be configured to execute a database query.<br>Example: "INSERT INTO pbis (title, description, type, priority, estimated_points) VALUES (...) "<br>Grant Secure Database Access<br><br>Custom GPT must be allowed to execute database operations securely.<br>We need a secure connection with proper authentication.<br>Ensure Query Execution is Reliable<br><br>Add error handling to prevent duplicate or incorrect entries.<br>Test &amp; Verify Data Submission<br><br>Run test cases to confirm PBIs are structured correctly in the backlog.<br>ð¥ Pros of Using Custom GPT Actions<br>â No External API Required â Runs fully within the GPT modelâs environment.<br>â Faster Development â No need for external API setup.<br>â Tighter Integration with AI â AI can validate &amp; refine PBIs before submission.<br>â More Secure â Data never leaves the controlled environment.<br><br>2ï¸â£ Using OpenAIâs API for External Integration<br>If you prefer a fully programmatic approach, you can call OpenAIâs API from your backend and integrate it with your project management tool.<br><br>â How It Works<br>Your backend sends a request to OpenAIâs API, asking it to generate PBIs.<br>OpenAIâs API returns structured PBIs (Epics, User Stories, Subtasks).<br>Your system validates the PBIs before inserting them into the database.<br>Your frontend retrieves and displays the PBIs in the backlog.<br>ð¥ Pros of OpenAIâs API Approach<br>â More Customization â You control prompts, data structure, and validation.<br>â Can Run in the Background â Ideal for scheduled task automation.<br>â Scales Better â Works well for large teams &amp; real-time AI interactions.<br><br>ð· Which Approach Should You Use?<br>ð¹ If you want a fast, no-setup solution, go with Custom GPT Actions.<br>ð¹ If you need more control, background processing, or external API calls, use OpenAIâs API.<br><br>ð Would you like help setting up a Custom GPT Action for submitting PBIs?<br><br>You said:<br>There is a price difference, right?<br>ChatGPT said:<br>Yes, there is a price difference between using Custom GPT Actions and OpenAIâs API integration. Hereâs the breakdown:<br><br>ð° Cost of Using Custom GPT Actions<br>â Free (if using within ChatGPT Pro)<br>â No additional API costs<br>â No per-token billing<br><br>Why?<br>Custom GPT Actions run within ChatGPTâs existing infrastructure. OpenAI doesnât charge per request for actions, but you must be on a ChatGPT Pro plan ($20/month).<br><br>However, if the Action connects to an external database or service that has costs (e.g., AWS, Firebase, Supabase, etc.), youâll still need to pay for that separately.<br><br>ð° Cost of Using OpenAIâs API<br>â Pay-per-use pricing<br>â Costs depend on model + token usage<br><br>Current API Pricing (as of 2024)<br>Model Input (per 1K tokens) Output (per 1K tokens)<br>GPT-4-turbo $0.01 $0.03<br>GPT-4 $0.03 $0.06<br>GPT-3.5-turbo $0.0015 $0.002<br>Estimated API Cost for PBI Generation<br>If generating 5-10 PBIs at a time, a request might use 500-1000 tokens.<br>Cost per request: $0.005 - $0.02 (GPT-4-turbo)<br>If you generate PBIs 100 times per day:<br>GPT-4-turbo: ~$0.50 - $2/day<br>GPT-4: ~$1.50 - $6/day<br>GPT-3.5-turbo: ~$0.15 - $0.40/day<br>Additional Costs<br>Database storage: If using Firebase, AWS, or another DB, there may be small storage costs.<br>API Requests: If your project management tool has an API, it may have rate limits or extra costs.<br>Which is Cheaper?<br>If you already use ChatGPT Pro â Custom GPT Actions = FREE<br>No additional API costs.<br>Ideal if you just need to generate &amp; submit PBIs without extra complexity.<br>If you need external processing â OpenAI API = Paid (but scalable)<br>More expensive, but fully customizable.<br>Better if you want background processing, bulk PBI creation, or integrations.<br>ð Best Recommendation?<br>If youâre cost-conscious and just need basic PBI creation &amp; submission, start with Custom GPT Actions (free).<br><br>If you later need scalability, automation, and background AI processing, you can move to OpenAIâs API.<br><br>Would you like help defining a Custom GPT Action for submitting PBIs? ð¥<br><br>You said:<br>I want to do both but start with the API integration because I think that is what will evolve into a valuable feature with the possibilities for controlling the process and integrating it into the UI of our project management app.<br>It would be great to have the GPT action a backup for keeping costs down.<br>ChatGPT said:<br>That sounds like a great strategy! ð¯<br>By starting with API integration, you can fully control the process, customize it to fit the UI of your project management app, and enable deeper automation.<br><br>Later, implementing a Custom GPT Action as a backup will allow on-demand PBI creation while keeping costs down for smaller use cases.<br><br>â Step-by-Step Plan for API Integration<br>We\'ll start by integrating OpenAIâs API to generate PBIs and store them in your project management toolâs database.<br><br>Phase 1: API-Based PBI Submission<br>1ï¸â£ Define API Endpoints<br><br>POST /api/pbis â Accepts AI-generated PBIs and stores them in the database.<br>GET /api/pbis â Retrieves PBIs from the backlog.<br>2ï¸â£ Implement AI-Powered PBI Generation<br><br>Use OpenAIâs API (GPT-4-turbo) to generate Epics, User Stories, and Subtasks.<br>Apply Key Learnings &amp; Takeaways from past development.<br>3ï¸â£ Store PBIs in the Project Management Tool<br><br>Save PBIs in the AutoAgile database.<br>Attach metadata like priority, dependencies, and estimation.<br>4ï¸â£ Expose PBIs in the UI<br><br>Display PBIs in the backlog inside your Next.js app.<br>Allow user review &amp; refinement before finalizing.<br>Phase 2: Backup Solution - Custom GPT Action<br>If API costs become high, allow users to manually trigger a GPT Action to generate PBIs without API calls.<br><br>1ï¸â£ Create a Custom GPT Action<br><br>Action: generate_pbIs(feature_description: str) â JSON<br>Returns structured PBIs to be manually entered into the backlog.<br>2ï¸â£ Integrate with Your UI<br><br>Offer an option like "Generate PBIs via GPT" in the UI.<br>If API usage is high, fallback to GPT Action instead of API calls.<br>ð Next Steps<br>Would you like to:<br>1ï¸â£ Start defining the OpenAI API integration (set up endpoints, API calls)?<br>2ï¸â£ Set up the Custom GPT Action as a backup?<br>3ï¸â£ Plan both in parallel and create a roadmap?<br><br>You said:<br>Not yet. First:<br>1. I want us to discuss how it would be inplemented in the UI and provide the optimal UX.<br>2. Could we benefit from drafting the architecture, sequence diagrams, user flows?<br>3. Before we start coding, I want you to create PBIÂ´s for the project and estimate complexity.<br>4. Create psql commands for creating the PBIÂ´s.<br><br>Lets go through these steps one by one.<br><br>ChatGPT said:<br>Thatâs a solid structured approach! ð<br>By focusing on UX, architecture, planning, and PBI creation before coding, weâll ensure a smooth implementation with fewer rewrites.<br><br>ð Step 1: UI &amp; UX Discussion<br>Before implementing API-based PBI generation, we need to design how users will interact with it inside the Project Management System (PMS).<br><br>ð¯ Key UX Considerations<br><br>â Where Should PBI Creation Happen?<br><br>Inside the Backlog View? (Best for structured planning)<br>Inside a Feature Request modal? (Good for quick task creation)<br>As a standalone "AI Assistant" panel? (Best for guided AI interaction)<br><br>â What Input Does the AI Need?<br><br>- Free-text Feature Description (User types in an idea)<br><br>- Structured Input (e.g., dropdowns for project, priority, complexity)<br><br>- Existing Tasks as Context (AI refines based on project backlog)<br><br>If we would start the process by asking the user to select item(s) from the backlog or create a new PBI, then we could keep the original feature idea/request and have the entire history saved.<br><br>I think the process should run the following way:<br>1. The user selects an item from the backlog or creates a new one.<br>2. AI asks a series of questions to gather more information about the feature, the goals, what problem it will solve, the expected outcome, etc..<br>Also, I think the AI would benefit from having access to the projectâs history, the projectâs goals, the projectâs vision, the technical documentation.<br>We have to discuss what questions the AI should ask and how the user should input the answers.<br><br>â How Should the Output Be Handled?<br>Yes - Inline Editing: User sees generated PBIs and edits them before submission.<br>No - One-Click Submit: AI submits PBIs automatically.<br>Yes - Step-by-Step Refinement: AI asks clarifying questions before finalizing.<br><br>â Should the User See a Live Preview?<br>Yes â A real-time preview of the PBIs as the AI generates them.<br>No â AI generates them first, then the user reviews before submission.<br><br>â How Will Users Trigger AI PBI Generation?<br>Yes - Button â "Generate PBIs from Feature Request"<br>Maybe - Shortcut Command â /generate_pbi &lt;feature&gt;<br>No - Automated Suggestion â When a new feature is created, AI offers to generate PBIs<br><br>Instead of 3: Automated Suggestion â When a new feature is created, AI offers to help with refining the feature request and informs the user about the possibility of generating PBIs and what the feature request should include to make it easier for the AI to generate relevant PBIs.<br><br><br>ð Suggested UI Flows<br><br>## Option 1: AI-Powered Backlog View<br>ð¡ Best for Teams Who Plan in Sprints 1ï¸â£ User navigates to the Backlog View.<br>2ï¸â£ Clicks â+ AI Generate PBIsâ â A modal opens.<br>3ï¸â£ User inputs a feature description and selects project, priority, estimation strategy.<br>4. AI asks clarifying questions about the feature.<br>5. AI generates Epics, User Stories, and Subtasks.<br>6. User reviews and edits before submitting.<br><br>â Pros<br><br>Integrated into existing planning workflow.<br>Structured &amp; controlled task creation.<br>â Cons<br><br>Requires users to be inside the backlog to use AI.<br><br>## Option 2: Feature Request Modal with AI Assistance<br>ð¡ Best for Users Adding New Ideas 1ï¸â£ User opens Feature Request modal.<br>2ï¸â£ Enters high-level feature description.<br>3ï¸â£ Clicks âGenerate PBIsâ â AI suggests tasks.<br>4ï¸â£ User reviews, edits, and approves.<br>5ï¸â£ PBIs are pushed to the backlog.<br><br>â Pros<br><br>Works naturally when defining new features.<br>Faster workflow for brainstorming ideas.<br>â Cons<br><br>Might lack full backlog context when generating PBIs.<br><br>## Option 3: Dedicated AI Assistant Panel<br>ð¡ Best for Advanced AI-Driven Planning 1ï¸â£ User opens an âAI Assistantâ panel.<br>2ï¸â£ AI asks clarifying questions about the feature.<br>3ï¸â£ AI generates Epics, User Stories, and Subtasks dynamically.<br>4ï¸â£ User modifies or approves PBIs.<br>5ï¸â£ PBIs are automatically pushed to the backlog.<br><br>â Pros<br>More structured, guided PBI refinement.<br>AI helps users refine vague ideas into structured tasks.<br><br>â Cons<br>More complex UI to implement.<br><br>IÂ´m leaning towards option 1 with the added step 4. AI asks clarifying questions about the feature.<br><br>ð Whatâs Next?<br>1ï¸â£ Which UI flow do you prefer (Backlog, Feature Request Modal, AI Assistant)?<br>2ï¸â£ Would you like wireframes/mockups before moving to architecture diagrams?<br><br>See my answers in the list above:<br><br>Thatâs a fantastic refinement of the process! The form-based approach for AI clarifying questions makes a lot of sense. It improves UX efficiency and keeps the process structured, ensuring users don\'t feel overwhelmed by an open-ended conversation.<br><br>ð Finalized UI/UX Approach<br>â Option 1: AI-Powered Backlog View (with Clarifying Questions &amp; Form Input)<br>ð¡ Best for Teams Who Plan in Sprints 1ï¸â£ User selects an existing item from the backlog or creates a new feature request.<br>2ï¸â£ Clicks â+ AI Generate PBIsâ â A modal opens.<br>3ï¸â£ User inputs a feature description and selects project, priority, estimation strategy.<br>4ï¸â£ AI presents clarifying questions in a form UI (instead of free-text chat).<br>5ï¸â£ User fills in answers in structured fields â This data is stored for future reference.<br>6ï¸â£ AI generates Epics, User Stories, and Subtasks dynamically.<br>7ï¸â£ User reviews and edits before submitting PBIs to the backlog.<br><br>ð Why This Works Best<br>â Keeps the original feature request history â Tracks context properly.<br>â AI doesnât rely on unstructured responses â User inputs structured answers via the form.<br>â Faster, structured refinement process â Reduces ambiguity in AI-generated PBIs.<br>â Guided yet flexible â AI only asks for details when necessary (conditional logic in the form).<br>â More efficient user experience â No need to manually structure long text responses.<br><br>ð Next Steps<br>1ï¸â£ Define the AI Clarifying Questions for the Form<br>We need to list the essential clarifying questions AI should ask. Some of these will be always required, and others will be conditional (depending on the feature type, project, etc.).<br><br>Example questions:<br><br>What problem does this feature solve? (Always required)<br>Who is the primary user? (Required for user-facing features)<br>What is the expected outcome? (Always required)<br>Are there existing related tasks or dependencies? (Optional)<br>Does this feature impact security or performance? (Conditional: Only if related to infrastructure)<br>Would you like me to draft a complete list of questions based on best practices?<br><br>2ï¸â£ Create Wireframes for the Modal<br>Since weâre using a form-based approach instead of a chat-like UI, we should create wireframes for:<br><br>The initial âAI Generate PBIsâ modal<br>The form layout for clarifying questions<br>The final PBI preview screen<br>Do you want Figma wireframes or a quick text-based UI flow first?<br><br>3ï¸â£ Technical Considerations<br>Would you like the AI-generated clarifying questions to be:<br><br>Fixed (predefined in the UI)? â Simpler, but less flexible.<br>Dynamically generated (AI decides what to ask)? â More flexible, but requires more logic.<br>ð Letâs finalize these details so we can move into architecture and implementation!<br><br><br>You said:<br>1. draft a complete list of questions based on best practices + what you consider being valuable to be able to provide the best quality PBIÂ´s.<br><br>2. I think it should be a separate full page instead of a modal. <br>On that page user should be able to select a PBI from a dropdown combobox with search functionality.<br>(We are using headless UI combobox for the parent task selector)<br>From each PBI, the user should be able to click a button to open that PBI on the AI refinement page.<br><br>If you can provide figma wireframes that would be fantastic.<br><br>3. LetÂ´s start with the fixed questions, and then maybe add dynamically generated if needed.<br>ChatGPT said:<br>ð Step 1: Complete List of AI Clarifying Questions for High-Quality PBIs<br>The goal is to ensure AI-generated PBIs are highly structured, relevant, and actionable. Below is a best-practice-based question framework that balances user intent, technical feasibility, and product strategy.<br><br>ð¢ General Questions (Always Required)<br>What problem does this feature solve? (Userâs pain point, why itâs needed)<br>What is the expected outcome or benefit? (How success is measured)<br>Who is the primary user? (Developers, admins, end-users, etc.)<br>What should the AI avoid when generating PBIs? (Redundant features, conflicting solutions, etc.)<br>Does this relate to an existing Epic or User Story? (Ensures PBIs are linked to relevant work)<br>ð¡ Questions Based on Feature Type<br>ð¹ For UI/UX Features<br>What are the key UI components or interactions?<br>Should it follow an existing design system? (Yes/No - If yes, specify the system)<br>Are there any accessibility considerations? (WCAG, ARIA, keyboard navigation, etc.)<br>ð¹ For Backend/API Features<br>Which services, endpoints, or database models will be impacted?<br>Are there security concerns (authentication, authorization, sensitive data)?<br>Does it require performance optimizations (caching, async processing, etc.)?<br>ð¹ For Automation or AI-Powered Features<br>Should the system make automatic decisions, or require human approval?<br>What are the key inputs and outputs?<br>Are there ethical concerns with automation (bias, transparency, etc.)?<br>ð¹ For Integrations<br>Which external service(s) will this integrate with?<br>Are there API rate limits or other constraints?<br>Should the system sync data in real-time or on a schedule?<br>ð¹ For Performance-Related Features<br>What is the current bottleneck? (DB queries, large payloads, front-end rendering, etc.)<br>Whatâs the performance expectation? (e.g., Reduce response time from 500ms â 100ms)<br>ð  Workflow &amp; Dependencies<br>Are there any preconditions before this can be implemented? (Feature flags, migrations, etc.)<br>Does it require collaboration across teams? (Design, DevOps, Security, etc.)<br>Are there known risks or potential blockers? (Legacy code dependencies, technical debt, etc.)<br>ð£ Estimation &amp; Prioritization<br>What is the priority level? (Critical, High, Medium, Low)<br>Whatâs the estimated impact? (Revenue, user retention, operational efficiency)<br>Are there any deadlines or time-sensitive constraints? (Launch dates, dependencies, etc.)<br>ð¡ Expected AI Output<br>Using these questions, AI should generate:<br><br>â Epics (High-level objectives)<br>â User Stories (Breaking down the work for users)<br>â Subtasks (Actionable development steps)<br>This structured input ensures AI can create high-quality, actionable PBIs instead of vague tasks.<br><br>ð Step 2: Wireframes - Full Page UI for AI Refinement<br>Iâll create Figma wireframes showcasing the full-page AI refinement process with:<br><br>Dropdown Combobox (Headless UI) to select an existing PBI.<br>AI-Powered Refinement Page (Clarifying Questions + PBI Generation).<br>Buttons to Open &amp; Edit PBIs in the System.<br>ð¹ Let me generate the wireframes and share them with you shortly. ð<br><br>ð Step 3: Fixed Questions First, Dynamic Later<br>â Weâll start with fixed questions (predefined in the UI) to keep the process structured. â If we later need more intelligent, adaptive AI prompts, we can introduce dynamic question generation.<br><br>ð¯ Next Steps<br>1ï¸â£ I\'ll generate and share the Figma wireframes.<br>2ï¸â£ Once we have UI approval, weâll define the API &amp; database structure.<br>3ï¸â£ Then, we move to implementation ð.<br><br>Let me work on the wireframes now! ð¨ð<br><br>You said:<br>A lot of the questions in step 1 could be answered by giving the AI access to technical doccumentation. <br>If the AI doesnÂ´t find the answer there, then the question should be asked. <br>ChatGPT said:<br>Thatâs a fantastic approach! ð By leveraging technical documentation, we can reduce user input fatigue and ensure AI-generated PBIs are as accurate as possible.<br><br>ð¹ Refining the AI Questioning Process<br>Instead of blindly asking all 25+ questions, we will implement a smart, two-step process:<br><br>Step 1: Auto-Extract Answers from Technical Documentation<br>ð Before asking the user anything, AI will try to find the answer from:<br><br>Projectâs API Documentation (Endpoints, models, authentication, rate limits).<br>Database Schema (Relationships, constraints, existing data models).<br>Projectâs Vision &amp; Goals (Product strategy, company objectives).<br>Past User Stories &amp; Epics (Ensuring consistency with previous PBIs).<br>Best Practices &amp; Key Learnings (Mistakes to avoid, past development issues).<br>Step 2: Ask Only the Unanswered Questions<br>ð If AI canât find an answer, it will only ask the missing information.<br><br>For example:<br><br>If API docs specify affected endpoints, AI skips âWhich endpoints will be impacted?â<br>If the database schema reveals relationships, AI skips âWhat data models are involved?â<br>If a past User Story addressed similar issues, AI suggests improvements instead of asking from scratch.<br>ð¹ UX Implementation: Full-Page AI Refinement Flow<br>â Step 1: User selects or creates a PBI.<br>â Step 2: AI scans project documentation for answers.<br>â Step 3: AI generates PBIs, showing:<br><br>ð¹ Pre-filled answers from documentation.<br>ð¹ Questions only for missing details.<br>â Step 4: User reviews &amp; refines before submitting.<br>This ensures: ð Less manual input â AI handles most of the work.<br>ð More accurate PBIs â AI cross-checks against existing docs.<br>ð Faster process â Users answer only what AI canât infer.<br><br>ð¹ Whatâs Next?<br>1ï¸â£ Figma Wireframes â Iâll create the UX flow for AI refinement.<br>2ï¸â£ Technical Documentation Strategy â We define:<br><br>ð Where &amp; how AI should access project documentation.<br>ð Which docs are needed for different PBI types.<br>3ï¸â£ Implementation Plan â Define how AI extracts, processes &amp; asks questions.<br>Would you like me to proceed with wireframes first or technical documentation strategy first? ð<br><br>You said:<br>AI Estimation is the next thing we should include, so donÂ´t bother asking the user for that.<br>ChatGPT said:<br>Got it! ð AI will automatically estimate Story Points instead of asking the user.<br><br>ð¹ How AI Will Estimate Story Points<br>Instead of manually entering estimates, AI will calculate complexity, effort, and uncertainty based on:<br><br>1ï¸â£ Complexity Analysis<br><br>Database impact â Does it involve schema changes? Complex relationships?<br>API impact â Are new endpoints needed? Major refactoring required?<br>Frontend impact â Is it a UI change or deep business logic?<br>Security concerns â Are there authentication/authorization risks?<br>2ï¸â£ Effort Calculation<br><br>Lines of code (LOC) prediction â Based on past PBIs of similar scope.<br>Number of components affected â More files = higher effort.<br>Testing needs â How much unit &amp; integration testing is required?<br>3ï¸â£ Uncertainty Rating<br><br>Does the AI find enough documentation?<br>Does this feature require new technology?<br>Does the feature involve high unknowns (e.g., 3rd party integrations)?<br>ð Estimation Output (Fibonacci Scale) AI will output a story point estimate (1, 2, 3, 5, 8, 13...) with reasoning:<br><br>ð¢ Low Complexity â 1-3 Points<br>ð¡ Moderate Complexity â 5-8 Points<br>ð´ High Complexity &amp; Unknowns â 13+ Points<br>ð¹ Next Steps<br>1ï¸â£ Figma Wireframes (Integrate AI estimation in UI).<br>2ï¸â£ Define Estimation Algorithm (How AI calculates effort).<br>3ï¸â£ Implement AI Estimation API (Story Point prediction).<br><br>Where should AI show the estimated Story Points?<br><br>Inside the PBI form? (User sees it before submission).<br>Only in the backlog? (After PBI is saved).<br>Let me know, and Iâll include it in the wireframes! ð<br><br>You said:<br>I want the AI estimation included in the task description and currently all tasks have a field for estimation where user can enter story points, instead of adding another field for AI estimate IÂ´m thinking we could indicate if estimation is set by AI or if it is human edited. What do you think?<br>ChatGPT said:<br>Thatâs a great approach! It keeps the UI clean while still allowing users to see whether the estimate was AI-generated or manually adjusted.<br><br>ð¹ How to Implement AI Estimation in the Task Description<br>1ï¸â£ Story Points Field Behavior:<br><br>AI auto-generates an initial estimate when a PBI is created.<br>The user can edit the estimate manually if they disagree.<br>If the user changes the AI estimate, we mark it as human-edited.<br>2ï¸â£ Indicating AI vs. Human Estimates:<br><br>AI-generated estimate â Display a small "AI" badge next to the number.<br>User-edited estimate â Display a "User Edited" label (or remove the AI badge).<br>3ï¸â£ Example UI Representations:<br><br>AI Estimate: Story Points: 5 (AI)<br>User-Edited: Story Points: 8 (User Edited)<br>ð¹ Backend &amp; Database Changes<br>Keep the existing story_points field.<br><br>Add a new field: is_ai_estimate (true/false)<br><br>true â AI-generated<br>false â Manually overridden<br>When AI sets the estimate, is_ai_estimate = true.<br><br>If a user changes the estimate, set is_ai_estimate = false.<br><br>ð¹ User Flow<br>1ï¸â£ AI suggests an estimate when the PBI is created.<br>2ï¸â£ User can keep it or edit it.<br>3ï¸â£ If edited, it switches from AI to user-edited.<br>4ï¸â£ The UI reflects whether the estimate is AI-generated or manually adjusted.<br><br>ð¹ Advantages of This Approach<br>â Minimal UI clutter â No extra fields.<br>â Users stay in control â AI assists but doesnât dictate.<br>â Clear distinction between AI-generated &amp; human-set values.<br>â Easy implementation â Just an extra is_ai_estimate field.<br><br>Next Steps<br>ð¹ Update PBI Creation Flow to auto-assign AI estimates.<br>ð¹ Modify UI to display AI/User-edited status.<br>ð¹ Ensure API updates is_ai_estimate correctly.<br><br>Would you like this logic to be included in the Figma wireframes? ð<br><br>You said:<br>Yes<br>ChatGPT said:<br>Great! Iâll now create Figma wireframes incorporating the AI Estimation Flow into the Task Refinement Page.<br><br>ð Wireframe Features<br>ð¹ Full-Page AI Refinement UI (instead of a modal)<br>ð¹ Dropdown Combobox for Selecting a PBI (Headless UI)<br>ð¹ Structured Form-Based AI Q&amp;A for refinement<br>ð¹ Story Points Section:<br><br>Shows AI-estimated points with an "AI" badge<br>Allows manual override (switching to "User Edited")<br>Iâll generate the wireframes now! ð Stay tuned. ð¨<br><br><br>Here is the wireframe for the AI-powered task refinement page! ð¨<br><br>Key Features in the Wireframe:<br>â Full-page layout for refining PBIs<br>â Dropdown combobox with search functionality to select a PBI<br>â AI-driven structured form where AI asks questions and users respond<br>â Story Points Estimation section:<br><br>Shows AI-generated values with an "AI" badge<br>Allows manual override, switching to a "User Edited" label<br>Would you like any modifications before we move forward with implementation? ð<br><br>You said:<br>Can you provide a text based UI description instead?<br>I just need the different components of the page that is needed and then I can do layout and design myself.<br>ChatGPT said:<br>AI-Powered Task Refinement Page - UI Structure<br>This page provides a structured interface for refining PBIs with AI assistance. Below is a breakdown of all the key UI components that should be included.<br><br>ð Main Components<br>1ï¸â£ Page Header (Fixed at the Top)<br>Title: "AI-Powered Task Refinement"<br>Back Button: Returns to the backlog view<br>Help Icon: Opens a tooltip explaining how AI refinement works<br>2ï¸â£ Task Selection Section<br>Label: "Select a PBI to refine"<br>Dropdown Combobox (Headless UI)<br>Allows searching and selecting an existing PBI<br>Displays title &amp; ID of each task<br>Optional: Show the task type (Epic, User Story, Subtask)<br>Button: "Open Task in AI Refinement"<br>3ï¸â£ AI-Assisted Refinement Form (Dynamic Based on Task)<br>Section Title: "Refinement Questions"<br>Questions Panel<br>AI provides structured questions based on the selected task<br>Questions should be grouped by categories (e.g., Goals, Technical Details, Dependencies)<br>Each question has:<br>A text input (for short answers) or a textarea (for detailed explanations)<br>Pre-filled values if available from technical documentation<br>AI-generated suggestions (editable)<br>Toggle: "Show AI Recommendations"<br>Expands a section with AI-generated recommendations for this task<br>4ï¸â£ AI Estimation &amp; Task Metadata<br>Label: "Estimation &amp; Task Metadata"<br>Story Points Field:<br>Displays the AI-estimated story points (default)<br>Allows manual override with a "User Edited" indicator<br>Additional Metadata:<br>Task Priority (Low, Medium, High)<br>Dependencies (Auto-detected &amp; user-editable)<br>Related Epics / Stories<br>5ï¸â£ Actions &amp; Submission<br>Primary Button: "Submit to Backlog"<br>Secondary Button: "Save Draft" (to store refinement progress without submitting)<br>AI Chat History Panel (Optional): Displays past AI interactions for reference<br>ð¡ Notes &amp; Considerations<br>Form should autosave periodically to prevent data loss<br>If the user switches tasks, ask for confirmation before discarding unsaved changes<br>AI should fetch relevant project documentation before asking unnecessary questions<br>Would you like to adjust any sections or add more details? ð<br><br>You said:<br>Some suggested changes:<br>1. It should be possible to add a parent task including all subtasks, in case the user has already worked on creating epic, user stories and subtasks. That way AI gets the whole feature description and can start over.<br>2. We alreadu use autosave with debounced and we also use websockets for real time updates.<br>3. We need a simple settings page where user can choose AI provider (OpenAI to start with) and input API credentials:<br>ChatGPT said:<br>Great suggestions! Hereâs the updated UI structure incorporating your changes:<br><br>ð AI-Powered Task Refinement Page - Updated UI Structure<br>This page enables users to refine PBIs with AI assistance, while ensuring flexibility for existing task hierarchies, real-time updates, and AI provider settings.<br><br>1ï¸â£ Page Header (Fixed at the Top)<br>Title: "AI-Powered Task Refinement"<br>Back Button: Returns to the backlog view<br>Help Icon: Opens a tooltip explaining how AI refinement works<br>2ï¸â£ Task Selection Section<br>Label: "Select a PBI or Parent Task to Refine"<br>Dropdown Combobox (Headless UI)<br>Searchable dropdown to select an individual task (PBI, User Story, or Subtask)<br>Checkbox: "Include all subtasks" (if a parent task is selected)<br>Optional: Show task type (Epic, User Story, Subtask)<br>Button: "Open in AI Refinement"<br>â New Feature: If a parent task is selected with "Include all subtasks," the AI receives the full feature breakdown instead of an isolated task.<br><br>3ï¸â£ AI-Assisted Refinement Form<br>Section Title: "AI-Powered Refinement Questions"<br>Questions Panel<br>AI generates structured questions based on the selected task(s)<br>Grouped Categories:<br>Feature Goals &amp; Outcomes<br>Technical Requirements<br>Dependencies &amp; Risks<br>Acceptance Criteria<br>Each question has:<br>A text input (for short answers) or a textarea (for detailed explanations)<br>Pre-filled values if available from technical documentation<br>AI-generated suggestions (editable)<br>Toggle: "Show AI Recommendations"<br>Expands a section with AI-generated recommendations for this task<br>â New Feature: If the user selects a parent task with subtasks, AI dynamically adjusts questions to consider the full hierarchy.<br><br>4ï¸â£ AI Estimation &amp; Task Metadata<br>Label: "Estimation &amp; Task Metadata"<br>Story Points Field:<br>AI-generated story points (default)<br>Allows manual override with a "User Edited" indicator<br>Additional Metadata:<br>Task Priority (Low, Medium, High)<br>Dependencies (Auto-detected &amp; user-editable)<br>Related Epics / Stories<br>â New Feature: Parent-child relationships are preserved, meaning AI-generated metadata accounts for linked tasks.<br><br>5ï¸â£ Real-Time Updates &amp; Autosave<br>WebSocket-Enabled: Any changes made instantly update other users in real-time<br>Debounced Autosave: Saves progress periodically to prevent data loss<br>Undo/Redo: Simple history tracking for user changes<br>â New Feature: Uses existing WebSocket + debounced autosave setup for seamless real-time updates.<br><br>6ï¸â£ Actions &amp; Submission<br>Primary Button: "Submit to Backlog"<br>Secondary Button: "Save Draft" (stores refinement progress without submitting)<br>AI Chat History Panel (Optional): Displays past AI interactions for reference<br>7ï¸â£ AI Provider Settings Page<br>Page Title: "AI Integration Settings"<br>Dropdown: "Select AI Provider" (Starting with OpenAI)<br>Future support for multiple providers (Anthropic, Azure, Local AI, etc.)<br>API Key Input Field<br>Test Connection Button (Validates API credentials)<br>Save Settings Button<br>â New Feature: Centralized AI provider settings so users can configure API credentials before using AI-powered refinement.<br><br>Final Thoughts<br>â Supports full feature refinement (Epics + Subtasks)<br>â Uses real-time WebSocket updates + autosave (no lost work)<br>â Gives users control over AI-generated estimations<br>â Modular AI provider integration for future flexibility<br><br>ð Would you like any additional refinements before we move forward?<br><br>You said:<br>How do we give AI permission to write in the database?<br>ChatGPT said:<br>Granting AI Permission to Write to the Database<br>For AI to write to the database, we need a secure and controlled mechanism to ensure data integrity, security, and prevent unauthorized access.<br><br>1ï¸â£ Recommended Approach: Secure API Endpoint<br>Instead of allowing AI direct access to the database, we expose a controlled API that the AI can interact with.<br><br>â Steps to Implement<br>Create an API Endpoint (e.g., /api/pbis)<br><br>Accepts AI-generated Epics, User Stories, Subtasks<br>Validates input before saving to DB<br>Use API Authentication<br><br>API Key or OAuth2 Token: AI must authenticate before sending requests.<br>Store AI credentials securely in environment variables.<br>Define Access Controls<br><br>Restrict AI to specific actions (e.g., insert PBIs, update fields)<br>Role-Based Access Control (RBAC): AI should have a limited DB role (e.g., ai_writer).<br>Validate AI-Generated Data<br><br>Enforce schema validation (e.g., JSON Schema)<br>Apply business rules (e.g., prevent circular dependencies)<br>Use an AI Service Account<br><br>AI interacts as a designated system user (not a superuser)<br>Logs all AI interactions for auditability<br>2ï¸â£ Backend Implementation<br>ð Create the API Route (/api/pbis)<br>python<br>Copy<br>Edit<br>from flask import Blueprint, request, jsonify<br>from models import db, PBI<br>from auth_middleware import verify_ai_auth<br><br>bp = Blueprint("ai_pbi_api", __name__)<br><br>@bp.route("/api/pbis", methods=["POST"])<br>@verify_ai_auth # â Require AI authentication<br>def create_pbi():<br>"""Handles AI-generated PBI creation"""<br><br>data = request.json<br>if not data:<br>return jsonify({"error": "No data provided"}), 400<br><br># â Validate input structure<br>required_fields = ["title", "description", "task_type", "priority"]<br>if not all(field in data for field in required_fields):<br>return jsonify({"error": "Missing required fields"}), 400<br><br># â Insert into database<br>new_pbi = PBI(<br>title=data["title"],<br>description=data["description"],<br>task_type=data["task_type"],<br>priority=data.get("priority", "Medium"),<br>estimated_points=data.get("estimated_points", None), # AI estimate<br>created_by="AI", # Track source<br>)<br><br>db.session.add(new_pbi)<br>db.session.commit()<br><br>return jsonify({"message": "PBI created successfully", "id": new_pbi.id}), 201<br>3ï¸â£ AI Authentication &amp; Security<br>ð Use API Keys to Restrict Access<br>Middleware for AI Authentication (auth_middleware.py):<br><br>python<br>Copy<br>Edit<br>from flask import request, jsonify<br>import os<br><br>VALID_AI_API_KEY = os.getenv("AI_API_KEY")<br><br>def verify_ai_auth(func):<br>"""Middleware to verify AI authentication"""<br>def wrapper(*args, **kwargs):<br>api_key = request.headers.get("X-API-Key")<br>if api_key != VALID_AI_API_KEY:<br>return jsonify({"error": "Unauthorized AI access"}), 403<br>return func(*args, **kwargs)<br>return wrapper<br>â AI must send a valid API key in the request headers:<br><br>json<br>Copy<br>Edit<br>{<br>"title": "Implement AI Task Refinement",<br>"description": "Break down AI task refinement into structured PBIs",<br>"task_type": "Epic",<br>"priority": "High",<br>"estimated_points": 8<br>}<br>ð¡ Security Best Practices<br><br>Rotate API Keys regularly<br>Use role-based permissions<br>Log all AI interactions for debugging &amp; auditing<br>Limit AIâs scope to only modifying PBIs (not users, projects, etc.)<br>4ï¸â£ PostgreSQL Database Role for AI<br>Instead of granting full DB access, create a limited-access AI role:<br><br>sql<br>Copy<br>Edit<br>-- Create a restricted AI role<br>CREATE ROLE ai_writer WITH LOGIN PASSWORD \'securepassword\';<br><br>-- Grant permission to insert PBIs but not delete them<br>GRANT INSERT, UPDATE ON pbis TO ai_writer;<br>5ï¸â£ WebSocket Integration (Optional)<br>If using real-time updates, AI should broadcast new PBIs:<br><br>python<br>Copy<br>Edit<br>from flask_socketio import emit<br><br>@bp.route("/api/pbis", methods=["POST"])<br>@verify_ai_auth<br>def create_pbi():<br>...<br>db.session.commit()<br><br># ð¥ Notify frontend in real-time<br>emit("pbi_created", {"id": new_pbi.id, "title": new_pbi.title}, broadcast=True)<br><br>return jsonify({"message": "PBI created successfully", "id": new_pbi.id}), 201<br>ð Final Summary<br>â API Gateway: AI writes via /api/pbis<br>â Secure Authentication: AI must provide an API key<br>â Database Role: AI is limited to inserting/updating PBIs only<br>â Schema Validation: Ensures AI submits valid data<br>â Real-Time Updates: WebSocket notifications for new PBIs<br>ð¯ Next Steps<br>Would you like:<br><br>To implement a similar API for retrieving PBIs? (GET /api/pbis)<br>AI role to have limited UPDATE access for task refinements?<br>A test script to verify AI authentication &amp; data submission?<br>You said:<br>IÂ´m saving you questions for later.<br><br>For now letÂ´s get back on track:<br><br>Can you rewrite the entire plan based on what we have agreed on so far and then move on to step 2.<br><br>1. [COMPLETED] I want us to discuss how it would be inplemented in the UI and provide the optimal UX.<br>2. Could we benefit from drafting the architecture, sequence diagrams, user flows?<br>3. Before we start coding, I want you to create PBIÂ´s for the project and estimate complexity.<br>4. Create psql commands for creating the PBIÂ´s.<br><br>Lets go through these steps one by one.<br>ChatGPT said:<br>AI-Powered PBI Generation &amp; Integration Plan<br>Overview<br>We are developing an AI-powered system that automates the generation and refinement of Epics, User Stories, and Subtasks in our Project Management System (PMS). The system will allow users to refine feature ideas through a structured, guided AI interaction and directly submit PBIs (Product Backlog Items) into the backlog.<br><br>â Phase 1: UI/UX Implementation Plan (Completed)<br>We have defined the best user experience (UX) strategy and identified how users will interact with the AI-driven PBI refinement system.<br><br>ð¹ UI/UX Key Decisions<br>Where PBI Creation Happens<br><br>Inside the Backlog View â AI-assisted refinement happens within the backlog planning workflow.<br>Standalone Full-Page PBI Refinement View â Instead of a modal, we will use a full-page AI refinement interface.<br>How the User Provides Input<br><br>Users select an existing PBI from a searchable combobox (Headless UI)<br>Users can also add a parent task, including all its subtasks, ensuring AI gets full context.<br>How AI Refines PBIs<br><br>AI asks structured, best-practice questions<br>AI accesses technical documentation before asking questions, avoiding redundant prompts.<br>Inline Editing: AI suggests PBIs, and the user can edit before finalizing.<br>Step-by-Step Refinement: AI refines tasks dynamically based on user responses.<br>How Users Trigger AI PBI Generation<br><br>Button: "Generate PBIs from Feature Request"<br>AI Guidance: AI offers to help refine a new feature request when a user creates a new PBI.<br>Shortcut Command: /generate_pbi &lt;feature&gt;<br>How AI Estimation Works<br><br>AI assigns story points based on complexity<br>The estimation field tracks whether it was set by AI or manually edited by the user.<br>Users can override AI estimates manually.<br>ð¹ Finalized UI Components for PBI Refinement Page<br>ð PBI Refinement Page (Full-Screen UI)<br>ð Searchable Dropdown (Combobox)<br><br>Users search &amp; select a PBI from the backlog.<br>Users can add a parent task + subtasks for AI to analyze.<br>ð AI Question Form<br><br>AI asks structured questions to refine the feature request.<br>AI auto-fills answers when possible (from project history/docs).<br>User fills in missing details manually.<br>ð AI-Generated PBIs Section<br><br>AI dynamically generates Epics, User Stories, and Subtasks.<br>PBIs appear in real-time as AI refines them.<br>Users can edit PBIs inline before submission.<br>ð AI Story Point Estimation<br><br>AI auto-assigns story points based on complexity.<br>Indicator shows if estimation was set by AI or edited by the user.<br>ð Autosave &amp; WebSockets<br><br>Debounced auto-save ensures changes are not lost.<br>WebSockets enable real-time updates across team members.<br>ð  Settings Page<br><br>AI Provider Selection: OpenAI (default)<br>API Key Input: Secure credentials storage for AI integration.<br>ð Phase 2: Architecture, Sequence Diagrams &amp; User Flows<br>Why Do We Need This?<br>Before coding, we should draft architectural diagrams to:<br><br>Visualize the AIâs role in the PMS system.<br>Map the user flow from input to AI-generated PBIs.<br>Ensure database integration is structured correctly.<br>Avoid unnecessary rewrites by planning dependencies.<br>ð Key Architectural Components<br>1ï¸â£ Frontend UI<br><br>Next.js React App<br>Full-page AI refinement view<br>Headless UI Combobox for PBI selection<br>Real-time UI updates via WebSockets<br>2ï¸â£ AI Processing<br><br>AI fetches context from technical documentation &amp; backlog<br>AI generates PBIs dynamically using structured rules<br>AI assigns story points automatically<br>AI questions the user only when necessary (context-aware questioning)<br>3ï¸â£ Backend API<br><br>/api/pbis â AI submits PBIs<br>/api/pbis/:id â Retrieve PBIs for AI refinement<br>Authentication middleware (API keys for AI)<br>WebSockets for real-time updates<br>4ï¸â£ Database Schema Changes<br><br>Track whether AI or user set story points<br>Store AI-generated questions &amp; answers for auditing<br>Link PBIs to their refined feature requests<br>ð Next Steps<br>1ï¸â£ Create High-Level Architecture Diagram<br>How the UI, AI processing, and backend interact<br>Illustrate AI refinement flow &amp; database interactions<br>2ï¸â£ Define Sequence Diagrams<br>User selects a feature request â AI processes it â PBIs are generated<br>AI refines questions dynamically based on available data<br>3ï¸â£ Map User Flows<br>Step-by-step process from selecting a PBI to AI refinement &amp; submission<br>Flowchart of AI interaction (when to ask, when to auto-fill answers)<br>Would you like me to generate initial architecture &amp; sequence diagrams now? ð<br><br>You said:<br>Yes, I would like that but you also need to know waht I use for backend, right?<br>Python / flask and postgreSQL. <br>ChatGPT said:<br>Yes, knowing that your backend is built with Python / Flask and PostgreSQL is crucial for designing the architecture and sequence diagrams effectively.<br><br>I will now generate the following:<br><br>1ï¸â£ High-Level Architecture Diagram â How the UI, AI processing, and backend interact.<br>2ï¸â£ Sequence Diagram â How a PBI is refined by AI and submitted to the database.<br>3ï¸â£ User Flow Diagram â How users interact with AI-driven PBI refinement.<br><br>Since we are using Flask for the backend, I will ensure that the API endpoints and WebSocket handling align with Flaskâs best practices. Iâll also consider PostgreSQL schema changes to store AI-generated PBIs effectively.<br><br>I will now generate these diagrams. Stay tuned! ð¨ð<br><br><br>Analysis errored<br>python<br>Always show details<br><br>Copy<br>import matplotlib.pyplot as plt<br>import matplotlib.patches as mpatches<br><br>def draw_architecture_diagram():<br>fig, ax = plt.subplots(figsize=(10, 6))<br><br># Title<br>ax.set_title("High-Level Architecture: AI-Driven PBI Refinement", fontsize=14, fontweight="bold")<br><br># Components<br>components = {<br>"Frontend (Next.js)": (0.2, 0.8),<br>"AI Processing (GPT-4 API)": (0.5, 0.8),<br>"Backend API (Flask)": (0.8, 0.8),<br>"PostgreSQL Database": (0.8, 0.5),<br>"WebSockets (Real-time Updates)": (0.5, 0.5)<br>}<br><br># Draw components<br>for label, (x, y) in components.items():<br>ax.add_patch(mpatches.FancyBboxPatch((x-0.1, y-0.05), 0.2, 0.1, boxstyle="round,pad=0.1", <br>facecolor="lightblue", edgecolor="black"))<br>ax.text(x, y, label, ha="center", va="center", fontsize=10, fontweight="bold")<br><br># Arrows<br>arrows = [<br>((0.2, 0.8), (0.5, 0.8)), # Frontend â AI Processing<br>((0.5, 0.8), (0.8, 0.8)), # AI Processing â Backend API<br>((0.8, 0.8), (0.8, 0.5)), # Backend API â PostgreSQL<br>((0.8, 0.5), (0.8, 0.8)), # PostgreSQL â Backend API<br>((0.8, 0.8), (0.5, 0.5)), # Backend API â WebSockets<br>((0.5, 0.5), (0.2, 0.8)) # WebSockets â Frontend<br>]<br><br>for start, end in arrows:<br>ax.annotate("", xy=end, xytext=start, arrowprops=dict(arrowstyle="-&gt;", lw=2))<br><br># Hide axes<br>ax.set_xticks([])<br>ax.set_yticks([])<br>ax.set_frame_on(False)<br><br># Show diagram<br>plt.show()<br><br># Draw the architecture diagram<br>draw_architecture_diagram()<br>I encountered an issue generating the architecture diagram. Let me try again. \u200b\u200b<br><br><br>Analysis errored<br>python<br>Always show details<br><br>Copy<br>import matplotlib.pyplot as plt<br>import matplotlib.patches as mpatches<br><br>def draw_architecture_diagram():<br>fig, ax = plt.subplots(figsize=(10, 6))<br><br># Title<br>ax.set_title("High-Level Architecture: AI-Driven PBI Refinement", fontsize=14, fontweight="bold")<br><br># Components<br>components = {<br>"Frontend (Next.js)": (0.2, 0.8),<br>"AI Processing (GPT-4 API)": (0.5, 0.8),<br>"Backend API (Flask)": (0.8, 0.8),<br>"PostgreSQL Database": (0.8, 0.5),<br>"WebSockets (Real-time Updates)": (0.5, 0.5)<br>}<br><br># Draw components<br>for label, (x, y) in components.items():<br>ax.add_patch(mpatches.FancyBboxPatch((x-0.1, y-0.05), 0.2, 0.1, boxstyle="round,pad=0.1", <br>facecolor="lightblue", edgecolor="black"))<br>ax.text(x, y, label, ha="center", va="center", fontsize=10, fontweight="bold")<br><br># Arrows<br>arrows = [<br>((0.2, 0.8), (0.5, 0.8)), # Frontend â AI Processing<br>((0.5, 0.8), (0.8, 0.8)), # AI Processing â Backend API<br>((0.8, 0.8), (0.8, 0.5)), # Backend API â PostgreSQL<br>((0.8, 0.5), (0.8, 0.8)), # PostgreSQL â Backend API<br>((0.8, 0.8), (0.5, 0.5)), # Backend API â WebSockets<br>((0.5, 0.5), (0.2, 0.8)) # WebSockets â Frontend<br>]<br><br>for start, end in arrows:<br>ax.annotate("", xy=end, xytext=start, arrowprops=dict(arrowstyle="-&gt;", lw=2))<br><br># Hide axes<br>ax.set_xticks([])<br>ax.set_yticks([])<br>ax.set_frame_on(False)<br><br># Show diagram<br>plt.show()<br><br># Draw the architecture diagram<br>draw_architecture_diagram()<br>I encountered an issue generating the architecture diagram. Instead, I\'ll describe it textually:<br><br>High-Level Architecture for AI-Driven PBI Refinement<br>This architecture integrates Next.js (Frontend), Flask (Backend API), PostgreSQL (Database), GPT-4 API, and WebSockets for real-time updates.<br><br>Components &amp; Flow:<br>Frontend (Next.js)<br><br>User selects a feature request from the backlog.<br>Inputs details and triggers AI-powered PBI generation.<br>Displays AI-generated Epics, User Stories, and Subtasks.<br>Supports real-time updates via WebSockets.<br>AI Processing (GPT-4 API)<br><br>Receives feature descriptions and additional context.<br>Generates structured PBIs based on predefined rules and user input.<br>Returns the refined tasks to the backend.<br>Backend API (Flask)<br><br>Routes API requests between frontend and AI service.<br>Validates and processes AI-generated PBIs.<br>Stores tasks in PostgreSQL.<br>Emits WebSocket events for real-time updates.<br>PostgreSQL Database<br><br>Stores all Epics, User Stories, and Subtasks.<br>Keeps track of AI-generated vs. user-edited PBIs.<br>Supports search and retrieval.<br>WebSockets (Flask-SocketIO)<br><br>Sends real-time updates when PBIs are refined or modified.<br>Ensures users see immediate changes.<br>Next, I will draft sequence diagrams and user flows for how the AI-powered PBI refinement process works. Stay tuned! ð \u200b\u200b<br><br>You said:<br>Please continue<br>ChatGPT said:<br>Step 2: Drafting Architecture, Sequence Diagrams, and User Flows<br>1ï¸â£ Sequence Diagram: AI-Driven PBI Refinement Process<br>Actors:<br>User: Interacts with the UI to refine and submit PBIs.<br>Frontend (Next.js): Sends user input to the backend and displays results.<br>Backend (Flask API): Processes requests and interacts with AI &amp; DB.<br>AI Service (GPT-4 API): Generates PBIs based on input.<br>PostgreSQL Database: Stores PBIs and project data.<br>ð ï¸ Step-by-Step Process (Refinement Flow)<br>1. User selects a PBI to refine<br>Opens the AI Refinement Page.<br>Selects an existing Feature Request from a searchable dropdown.<br>(Optional) Adds a parent task to include all subtasks.<br>2. AI Queries Additional Context<br>AI first searches project documentation (if available).<br>If AI finds missing information, it generates a set of questions.<br>User answers questions in a structured form UI.<br>AI refines its understanding.<br>3. AI Generates PBIs<br>AI generates:<br>Epics<br>User Stories<br>Subtasks<br>Assigns Story Points (AI estimation).<br>Saves metadata (dependencies, priorities, assignments).<br>4. User Reviews &amp; Modifies<br>The user can:<br>Edit task descriptions (inline).<br>Adjust AI estimations (AI tag remains visible).<br>Remove irrelevant PBIs.<br>5. PBIs are Auto-Saved &amp; Updated<br>Changes are debounced &amp; saved automatically.<br>WebSockets broadcast changes in real time to all users.<br>6. PBIs are Submitted to Backlog<br>When satisfied, the user confirms submission.<br>The system:<br>Inserts PBIs into PostgreSQL.<br>Marks them as ready for execution.<br>2ï¸â£ User Flow: AI-Powered Task Refinement<br>ð¢ User selects a feature request â ð¡ AI refines using project data â ð  User answers missing details â ðµ AI generates structured PBIs â ð£ User reviews &amp; submits<br><br>3ï¸â£ Key Backend API Endpoints<br>These will be implemented in Flask.<br><br>Endpoint Method Description<br>/api/pbis POST Submit AI-generated PBIs to the backlog<br>/api/pbis/refine POST AI generates/refines PBIs<br>/api/pbis/questions GET AI fetches clarification questions if required<br>/api/pbis/{pbi_id} PATCH Updates a PBI after user edits<br>/api/pbis/{pbi_id}/submit POST Confirms PBI submission<br>4ï¸â£ Database Schema Updates (PostgreSQL)<br>To support AI-powered task refinement, we add new fields:<br><br>sql<br>Copy<br>Edit<br>ALTER TABLE tasks ADD COLUMN ai_generated BOOLEAN DEFAULT FALSE;<br>ALTER TABLE tasks ADD COLUMN refinement_status TEXT DEFAULT \'Pending\';<br>ALTER TABLE tasks ADD COLUMN estimation_source TEXT DEFAULT \'User\';<br>5ï¸â£ Next Steps<br>âï¸ Architecture, API endpoints, and database updates are drafted.<br>â¡ï¸ Next: Move to Step 3 (Creating PBIs &amp; Estimating Complexity). ð<br><br>Let me know if you want any modifications before proceeding!<br><br>You said:<br>Where should we store the documentation?<br>Where in the UI should the user upload the documentation?<br>Is it possible to get the documentation automatically from an integration?<br>Like GitHub, VScode?<br>Provided that the documentation exist there.<br>Add a simple settings page where user can input API key and credentials.<br>ChatGPT said:<br>ð Storing &amp; Managing Documentation for AI-Powered PBI Refinement<br>To ensure AI can access relevant project documentation for refining PBIs, we need a structured way to store, retrieve, and update documentation. Below is the plan:<br><br>1ï¸â£ Where Should We Store Documentation?<br>Option 1: PostgreSQL (Best for Structured Documentation)<br>Store documentation as text in a dedicated table.<br>Allows version control and easy retrieval.<br>Can be indexed for faster AI retrieval.<br>Table: project_documentation<br>sql<br>Copy<br>Edit<br>CREATE TABLE project_documentation (<br>id SERIAL PRIMARY KEY,<br>project_id INT REFERENCES projects(id) ON DELETE CASCADE,<br>title TEXT NOT NULL,<br>content TEXT NOT NULL,<br>source TEXT DEFAULT \'Manual Upload\',<br>uploaded_by INT REFERENCES users(id),<br>created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP<br>);<br>â Pros:<br><br>AI can efficiently search and extract relevant details.<br>Allows tagging &amp; filtering by source (e.g., GitHub, VS Code, Manual Upload).<br>Option 2: External File Storage (Best for Large Documents)<br>Store Markdown, TXT, or PDF files in an S3 bucket (AWS, Firebase, etc.).<br>Only metadata is stored in PostgreSQL.<br>AI retrieves and processes the files when needed.<br>Table: documentation_files<br>sql<br>Copy<br>Edit<br>CREATE TABLE documentation_files (<br>id SERIAL PRIMARY KEY,<br>project_id INT REFERENCES projects(id) ON DELETE CASCADE,<br>file_url TEXT NOT NULL,<br>file_type TEXT NOT NULL CHECK (file_type IN (\'md\', \'txt\', \'pdf\')),<br>uploaded_by INT REFERENCES users(id),<br>created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP<br>);<br>â Pros:<br><br>Supports larger documents that may not fit in PostgreSQL.<br>Allows manual file uploads and auto-fetching from integrations.<br>2ï¸â£ Where in the UI Should the User Upload Documentation?<br>ð Dedicated "Documentation Management" Page (Settings)<br>Location: Inside Settings &gt; Documentation.<br>Features:<br>Upload Markdown, TXT, PDF files.<br>View &amp; Edit existing documentation.<br>Connect integrations (GitHub, VS Code, Notion, etc.).<br>Configure AI access permissions for each document.<br>3ï¸â£ Automatic Documentation Retrieval<br>â Can We Integrate with GitHub, VS Code, or Notion?<br>Yes! We can fetch project documentation automatically from these sources:<br><br>Integration Method Use Case<br>GitHub Fetch .md files via API Pull documentation from repos<br>VS Code Read local .md files Sync local project docs<br>Notion API connection Import structured docs<br>Google Drive API connection Fetch shared project docs<br>ð¡ Example: GitHub API Integration<br>Fetch .md documentation from a GitHub repo:<br><br>python<br>Copy<br>Edit<br>import requests<br><br>GITHUB_TOKEN = "your_personal_token"<br>REPO_OWNER = "your_username"<br>REPO_NAME = "your_project"<br><br>url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/docs"<br>headers = {"Authorization": f"token {GITHUB_TOKEN}"}<br><br>response = requests.get(url, headers=headers)<br>files = response.json()<br><br>for file in files:<br>if file["name"].endswith(".md"):<br>doc_content = requests.get(file["download_url"]).text<br>print("Fetched Documentation:", doc_content)<br>â Pros:<br><br>Automatically syncs up-to-date documentation from GitHub.<br>AI can use repo docs before asking the user for details.<br>4ï¸â£ Simple Settings Page for AI API &amp; Integrations<br>ð Location: Settings &gt; AI &amp; Integrations<br><br>â User Can:<br><br>Enter OpenAI API Key.<br>Connect GitHub Repo (OAuth or Token).<br>Enable Auto-Fetch from VS Code, Notion, Google Drive.<br>Set AI Access Rules (e.g., Allow AI to modify docs?).<br>ð§ Database Table: integration_settings<br>sql<br>Copy<br>Edit<br>CREATE TABLE integration_settings (<br>id SERIAL PRIMARY KEY,<br>user_id INT REFERENCES users(id),<br>integration_name TEXT NOT NULL,<br>api_key TEXT NOT NULL,<br>is_enabled BOOLEAN DEFAULT TRUE,<br>created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP<br>);<br>ð Next Steps<br>â Implement API endpoints for documentation storage &amp; retrieval.<br>â Build a simple settings page to manage AI API &amp; integrations.<br>â Set up GitHub/VS Code sync for fetching docs automatically.<br><br>Would you like mockups or wireframes for the settings page? ð</p><p></p>', 'task_type': 'Epic', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'estimate_type': 'story_points', 'estimate': 42, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-27T23:02:31.274292', 'updated_at': '2025-03-10T17:29:52.790851', 'contributor_name': 'Fredrik Cederborg', 'parent': None}
2025-03-13 17:14:07,820 INFO: Task details fetched successfully for Task ID 327.
2025-03-13 17:14:07,821 INFO: ROLLBACK
2025-03-13 17:14:07,821 INFO: 127.0.0.1 - - [13/Mar/2025 17:14:07] "GET /api/tasks/327 HTTP/1.1" 200 -
2025-03-13 17:14:08,124 INFO: 127.0.0.1 - - [13/Mar/2025 17:14:08] "OPTIONS /tasks/available_tasks?task_type=Epic&exclude_task_id=327&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 17:14:08,129 INFO: BEGIN (implicit)
2025-03-13 17:14:08,130 INFO: 127.0.0.1 - - [13/Mar/2025 17:14:08] "OPTIONS /tasks/available_tasks?task_type=Epic&exclude_task_id=327&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 17:14:08,131 INFO: BEGIN (implicit)
2025-03-13 17:14:08,131 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 17:14:08,133 INFO: [cached since 2168s ago] {'pk_1': 6}
2025-03-13 17:14:08,132 INFO: Entering available_tasks route...
2025-03-13 17:14:08,133 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 17:14:08,133 INFO: [cached since 2168s ago] {'pk_1': 6}
2025-03-13 17:14:08,133 DEBUG: Query parameters: task_type=Epic, exclude_task_id=327, search_term=, project_id=None, limit=30, page=1
2025-03-13 17:14:08,134 INFO: BEGIN (implicit)
2025-03-13 17:14:08,135 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 17:14:08,135 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:14:08,135 INFO: Entering available_tasks route...
2025-03-13 17:14:08,136 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:14:08,136 INFO: [cached since 2165s ago] {'pk_1': 327}
2025-03-13 17:14:08,136 INFO: [cached since 2168s ago] {}
2025-03-13 17:14:08,136 DEBUG: Query parameters: task_type=Epic, exclude_task_id=327, search_term=, project_id=None, limit=30, page=1
2025-03-13 17:14:08,136 INFO: [cached since 2168s ago] {}
2025-03-13 17:14:08,137 INFO: BEGIN (implicit)
2025-03-13 17:14:08,138 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 17:14:08,139 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 17:14:08,139 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 17:14:08,140 INFO: [cached since 2168s ago] {'param_1': 6}
2025-03-13 17:14:08,140 INFO: [cached since 2168s ago] {'param_1': 6}
2025-03-13 17:14:08,140 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 327, 'task_type': ['Epic']}
2025-03-13 17:14:08,140 INFO: Validating hierarchy for Task N/A
2025-03-13 17:14:08,140 INFO: Determining valid parent types for task_type: Epic
2025-03-13 17:14:08,140 INFO: No valid parents found for task_type: Epic
2025-03-13 17:14:08,141 INFO: ROLLBACK
2025-03-13 17:14:08,140 INFO: [cached since 2165s ago] {'pk_1': 327}
2025-03-13 17:14:08,142 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:14:08,142 INFO: 127.0.0.1 - - [13/Mar/2025 17:14:08] "GET /tasks/available_tasks?task_type=Epic&exclude_task_id=327&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 17:14:08,142 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:14:08,142 INFO: [cached since 2168s ago] {'param_1': 1}
2025-03-13 17:14:08,142 INFO: [cached since 2168s ago] {'param_1': 1}
2025-03-13 17:14:08,156 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 327, 'task_type': ['Epic']}
2025-03-13 17:14:08,156 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:14:08,157 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:14:08,157 INFO: Validating hierarchy for Task N/A
2025-03-13 17:14:08,157 INFO: [cached since 2168s ago] {'param_1': 2}
2025-03-13 17:14:08,158 INFO: [cached since 2168s ago] {'param_1': 2}
2025-03-13 17:14:08,158 INFO: Determining valid parent types for task_type: Epic
2025-03-13 17:14:08,158 INFO: No valid parents found for task_type: Epic
2025-03-13 17:14:08,158 INFO: ROLLBACK
2025-03-13 17:14:08,161 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:14:08,161 INFO: 127.0.0.1 - - [13/Mar/2025 17:14:08] "GET /tasks/available_tasks?task_type=Epic&exclude_task_id=327&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 17:14:08,162 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:14:08,162 INFO: [cached since 2168s ago] {'param_1': 3}
2025-03-13 17:14:08,162 INFO: [cached since 2168s ago] {'param_1': 3}
2025-03-13 17:14:08,163 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:14:08,164 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:14:08,164 INFO: [cached since 2168s ago] {'param_1': 4}
2025-03-13 17:14:08,164 INFO: [cached since 2168s ago] {'param_1': 4}
2025-03-13 17:14:08,166 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:14:08,166 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:14:08,166 INFO: [cached since 2168s ago] {'param_1': 5}
2025-03-13 17:14:08,166 INFO: [cached since 2168s ago] {'param_1': 5}
2025-03-13 17:14:08,167 INFO: ROLLBACK
2025-03-13 17:14:08,167 INFO: ROLLBACK
2025-03-13 17:14:08,168 INFO: 127.0.0.1 - - [13/Mar/2025 17:14:08] "GET /api/projects/6/contributors/manage HTTP/1.1" 200 -
2025-03-13 17:14:08,168 INFO: 127.0.0.1 - - [13/Mar/2025 17:14:08] "GET /api/projects/6/contributors/manage HTTP/1.1" 200 -
2025-03-13 17:19:10,527 INFO: 127.0.0.1 - - [13/Mar/2025 17:19:10] "GET /socket.io/?EIO=4&transport=websocket&sid=wAv_Wa7rjYhCP0W0AAAU HTTP/1.1" 200 -
2025-03-13 17:19:11,824 INFO: BEGIN (implicit)
2025-03-13 17:19:11,857 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:19:11,857 INFO: [cached since 2472s ago] {}
2025-03-13 17:19:11,868 INFO: 127.0.0.1 - - [13/Mar/2025 17:19:11] "GET /socket.io/?EIO=4&transport=polling&t=k0l126h8 HTTP/1.1" 200 -
2025-03-13 17:19:11,885 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:19:11,885 INFO: [cached since 2472s ago] {'param_1': 1}
2025-03-13 17:19:11,888 INFO: Entering list_tasks_json route...
2025-03-13 17:19:11,890 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 17:19:11,891 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 17:19:11,893 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:19:11,950 INFO: BEGIN (implicit)
2025-03-13 17:19:11,957 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 17:19:11,957 INFO: [cached since 2472s ago] {'param_1': 2}
2025-03-13 17:19:11,959 INFO: BEGIN (implicit)
2025-03-13 17:19:11,960 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 17:19:11,963 INFO: 127.0.0.1 - - [13/Mar/2025 17:19:11] "POST /socket.io/?EIO=4&transport=polling&t=k0l8pd8d&sid=7xbhVwUpUkHwW-stAAAW HTTP/1.1" 200 -
2025-03-13 17:19:11,966 INFO: BEGIN (implicit)
2025-03-13 17:19:11,968 INFO: 127.0.0.1 - - [13/Mar/2025 17:19:11] "GET /socket.io/?EIO=4&transport=polling&t=k0l8r98r&sid=7xbhVwUpUkHwW-stAAAW HTTP/1.1" 200 -
2025-03-13 17:19:11,971 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 17:19:11,971 INFO: [cached since 2472s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 17:19:11,972 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 17:19:11,974 INFO: [cached since 2472s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 17:19:11,985 INFO: [cached since 2472s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 17:19:11,979 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:19:11,995 INFO: ROLLBACK
2025-03-13 17:19:11,996 INFO: [cached since 2472s ago] {'param_1': 3}
2025-03-13 17:19:12,005 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:19:12,007 INFO: [cached since 2472s ago] {'param_1': 4}
2025-03-13 17:19:12,009 INFO: 127.0.0.1 - - [13/Mar/2025 17:19:12] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 17:19:12,021 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 17:19:12,021 INFO: [cached since 2472s ago] {}
2025-03-13 17:19:12,023 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:19:12,024 INFO: [cached since 2472s ago] {'param_1': 5}
2025-03-13 17:19:12,026 INFO: ROLLBACK
2025-03-13 17:19:12,028 INFO: ROLLBACK
2025-03-13 17:19:12,035 INFO: BEGIN (implicit)
2025-03-13 17:19:12,035 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 17:19:12,035 INFO: [cached since 2472s ago] {'pk_1': 19}
2025-03-13 17:19:12,037 INFO: 127.0.0.1 - - [13/Mar/2025 17:19:12] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 17:19:12,048 INFO: 127.0.0.1 - - [13/Mar/2025 17:19:12] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 17:19:12,050 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:19:12,050 INFO: [cached since 2472s ago] {}
2025-03-13 17:19:12,091 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 17:19:12,092 INFO: [cached since 2472s ago] {'param_1': 19}
2025-03-13 17:19:12,096 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:19:12,097 INFO: [cached since 2472s ago] {'param_1': 1}
2025-03-13 17:19:12,101 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:19:12,101 INFO: [cached since 2472s ago] {'param_1': 2}
2025-03-13 17:19:12,103 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:19:12,103 INFO: [cached since 2472s ago] {'param_1': 3}
2025-03-13 17:19:12,106 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:19:12,106 INFO: [cached since 2472s ago] {'param_1': 4}
2025-03-13 17:19:12,121 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:19:12,122 INFO: [cached since 2472s ago] {'param_1': 5}
2025-03-13 17:19:12,127 INFO: ROLLBACK
2025-03-13 17:19:12,133 INFO: 127.0.0.1 - - [13/Mar/2025 17:19:12] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 17:19:12,565 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 17:19:12,565 INFO: [cached since 2473s ago] {}
2025-03-13 17:19:12,568 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 17:19:12,568 INFO: [cached since 2473s ago] {}
2025-03-13 17:19:12,570 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 17:19:12,570 INFO: [cached since 2473s ago] {}
2025-03-13 17:19:12,576 INFO: ROLLBACK
2025-03-13 17:19:12,576 INFO: 127.0.0.1 - - [13/Mar/2025 17:19:12] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 17:27:35,351 INFO: 127.0.0.1 - - [13/Mar/2025 17:27:35] "GET /socket.io/?EIO=4&transport=websocket&sid=7xbhVwUpUkHwW-stAAAW HTTP/1.1" 200 -
2025-03-13 17:27:36,045 INFO: 127.0.0.1 - - [13/Mar/2025 17:27:36] "GET /socket.io/?EIO=4&transport=polling&t=kbe92ty6 HTTP/1.1" 200 -
2025-03-13 17:27:36,122 INFO: 127.0.0.1 - - [13/Mar/2025 17:27:36] "POST /socket.io/?EIO=4&transport=polling&t=kbe9ei9j&sid=eHOCi5CR5CRrxZ36AAAY HTTP/1.1" 200 -
2025-03-13 17:27:36,149 INFO: 127.0.0.1 - - [13/Mar/2025 17:27:36] "GET /socket.io/?EIO=4&transport=polling&t=kbe9ff5o&sid=eHOCi5CR5CRrxZ36AAAY HTTP/1.1" 200 -
2025-03-13 17:27:36,183 INFO: BEGIN (implicit)
2025-03-13 17:27:36,187 INFO: BEGIN (implicit)
2025-03-13 17:27:36,197 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:27:36,202 INFO: Entering list_tasks_json route...
2025-03-13 17:27:36,210 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 17:27:36,203 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 17:27:36,212 INFO: [cached since 2976s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 17:27:36,208 INFO: BEGIN (implicit)
2025-03-13 17:27:36,216 INFO: 127.0.0.1 - - [13/Mar/2025 17:27:36] "GET /socket.io/?EIO=4&transport=polling&t=kbedcrq5&sid=eHOCi5CR5CRrxZ36AAAY HTTP/1.1" 200 -
2025-03-13 17:27:36,212 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 17:27:36,220 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 17:27:36,272 INFO: [cached since 2976s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 17:27:36,226 INFO: ROLLBACK
2025-03-13 17:27:36,269 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 17:27:36,204 INFO: [cached since 2976s ago] {}
2025-03-13 17:27:36,276 INFO: BEGIN (implicit)
2025-03-13 17:27:36,277 INFO: 127.0.0.1 - - [13/Mar/2025 17:27:36] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 17:27:36,278 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 17:27:36,283 INFO: [cached since 2976s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 17:27:36,291 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 17:27:36,291 INFO: [cached since 2976s ago] {}
2025-03-13 17:27:36,315 INFO: BEGIN (implicit)
2025-03-13 17:27:36,315 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 17:27:36,315 INFO: [cached since 2976s ago] {'pk_1': 19}
2025-03-13 17:27:36,316 INFO: ROLLBACK
2025-03-13 17:27:36,317 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:27:36,317 INFO: [cached since 2976s ago] {'param_1': 1}
2025-03-13 17:27:36,324 INFO: 127.0.0.1 - - [13/Mar/2025 17:27:36] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 17:27:36,341 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:27:36,343 INFO: [cached since 2977s ago] {'param_1': 2}
2025-03-13 17:27:36,407 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:27:36,407 INFO: [cached since 2977s ago] {}
2025-03-13 17:27:36,410 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:27:36,410 INFO: [cached since 2977s ago] {'param_1': 3}
2025-03-13 17:27:36,414 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 17:27:36,414 INFO: [cached since 2977s ago] {'param_1': 19}
2025-03-13 17:27:36,415 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:27:36,416 INFO: [cached since 2977s ago] {'param_1': 4}
2025-03-13 17:27:36,417 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:27:36,417 INFO: [cached since 2977s ago] {'param_1': 1}
2025-03-13 17:27:36,425 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:27:36,427 INFO: [cached since 2977s ago] {'param_1': 5}
2025-03-13 17:27:36,427 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:27:36,428 INFO: [cached since 2977s ago] {'param_1': 2}
2025-03-13 17:27:36,433 INFO: ROLLBACK
2025-03-13 17:27:36,436 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:27:36,436 INFO: [cached since 2977s ago] {'param_1': 3}
2025-03-13 17:27:36,437 INFO: 127.0.0.1 - - [13/Mar/2025 17:27:36] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 17:27:36,451 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:27:36,452 INFO: [cached since 2977s ago] {'param_1': 4}
2025-03-13 17:27:36,462 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:27:36,463 INFO: [cached since 2977s ago] {'param_1': 5}
2025-03-13 17:27:36,464 INFO: ROLLBACK
2025-03-13 17:27:36,464 INFO: 127.0.0.1 - - [13/Mar/2025 17:27:36] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 17:27:36,574 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 17:27:36,574 INFO: [cached since 2977s ago] {}
2025-03-13 17:27:36,577 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 17:27:36,577 INFO: [cached since 2977s ago] {}
2025-03-13 17:27:36,578 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 17:27:36,579 INFO: [cached since 2977s ago] {}
2025-03-13 17:27:36,585 INFO: ROLLBACK
2025-03-13 17:27:36,586 INFO: 127.0.0.1 - - [13/Mar/2025 17:27:36] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 17:27:41,052 INFO: Fetching task details for Task ID 291.
2025-03-13 17:27:41,053 INFO: Fetching task with ID 291.
2025-03-13 17:27:41,054 INFO: BEGIN (implicit)
2025-03-13 17:27:41,055 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 17:27:41,055 INFO: [cached since 2978s ago] {'pk_1': 291}
2025-03-13 17:27:41,057 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x109dc5c10>, 'epic_priority': None, 'project_id': 7, 'id': 291, 'is_archived': False, 'contributor_id': 5, 'name': 'Add dropdowns in task list for changing: Assigned to, Priority and Status', 'completed': False, 'estimate_type': 'story_points', 'sort_order': 0, 'story_points': 0, 'completed_date': None, 'description': '<p>Write Description task description...</p>', 'status': 'In Progress', 'time_estimate': None, 'parent_id': None, 'created_at': datetime.datetime(2025, 2, 10, 9, 9, 52, 988609), 'task_type': 'User Story', 'updated_at': datetime.datetime(2025, 3, 8, 13, 26, 6, 404279), 'priority': 'Medium'}
2025-03-13 17:27:41,058 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 17:27:41,058 INFO: [cached since 2978s ago] {'pk_1': 7}
2025-03-13 17:27:41,060 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-13 17:27:41,066 INFO: [cached since 2978s ago] {'pk_1': 5}
2025-03-13 17:27:41,069 INFO: Task ID 291 fetched with parent ID: None
2025-03-13 17:27:41,069 INFO: Task with ID 291 fetched successfully.
2025-03-13 17:27:41,069 DEBUG: Fetched Task Data: {'id': 291, 'name': 'Add dropdowns in task list for changing: Assigned to, Priority and Status', 'description': '<p>Write Description task description...</p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'estimate_type': 'story_points', 'estimate': 0, 'status': 'In Progress', 'sort_order': 0, 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-03-08T13:26:06.404279', 'contributor_name': 'Fredrik Cederborg', 'parent': None}
2025-03-13 17:27:41,069 INFO: Task details fetched successfully for Task ID 291.
2025-03-13 17:27:41,070 INFO: ROLLBACK
2025-03-13 17:27:41,082 INFO: 127.0.0.1 - - [13/Mar/2025 17:27:41] "GET /api/tasks/291 HTTP/1.1" 200 -
2025-03-13 17:27:41,275 INFO: 127.0.0.1 - - [13/Mar/2025 17:27:41] "OPTIONS /tasks/available_tasks?task_type=User%20Story&exclude_task_id=291&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 17:27:41,282 INFO: 127.0.0.1 - - [13/Mar/2025 17:27:41] "OPTIONS /tasks/available_tasks?task_type=User%20Story&exclude_task_id=291&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 17:27:41,286 INFO: BEGIN (implicit)
2025-03-13 17:27:41,286 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 17:27:41,287 INFO: [cached since 2981s ago] {'pk_1': 7}
2025-03-13 17:27:41,288 INFO: BEGIN (implicit)
2025-03-13 17:27:41,289 INFO: Entering available_tasks route...
2025-03-13 17:27:41,290 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 17:27:41,290 INFO: Entering available_tasks route...
2025-03-13 17:27:41,291 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:27:41,291 DEBUG: Query parameters: task_type=User Story, exclude_task_id=291, search_term=, project_id=None, limit=30, page=1
2025-03-13 17:27:41,292 INFO: [cached since 2981s ago] {'pk_1': 7}
2025-03-13 17:27:41,292 DEBUG: Query parameters: task_type=User Story, exclude_task_id=291, search_term=, project_id=None, limit=30, page=1
2025-03-13 17:27:41,293 INFO: [cached since 2981s ago] {}
2025-03-13 17:27:41,294 INFO: BEGIN (implicit)
2025-03-13 17:27:41,295 INFO: BEGIN (implicit)
2025-03-13 17:27:41,296 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 17:27:41,297 INFO: [cached since 2979s ago] {'pk_1': 291}
2025-03-13 17:27:41,297 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 17:27:41,297 INFO: [cached since 2979s ago] {'pk_1': 291}
2025-03-13 17:27:41,298 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 17:27:41,299 INFO: [cached since 2981s ago] {'param_1': 7}
2025-03-13 17:27:41,299 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:27:41,300 INFO: [cached since 2981s ago] {}
2025-03-13 17:27:41,300 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 291, 'task_type': ['User Story']}
2025-03-13 17:27:41,300 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 291, 'task_type': ['User Story']}
2025-03-13 17:27:41,302 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:27:41,304 INFO: [cached since 2981s ago] {'param_1': 1}
2025-03-13 17:27:41,304 INFO: Validating hierarchy for Task N/A
2025-03-13 17:27:41,304 INFO: Determining valid parent types for task_type: User Story
2025-03-13 17:27:41,304 INFO: Validating hierarchy for Task N/A
2025-03-13 17:27:41,305 INFO: Determining valid parent types for task_type: User Story
2025-03-13 17:27:41,305 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 291, 'task_type': ['Epic']}
2025-03-13 17:27:41,305 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 291, 'task_type': ['Epic']}
2025-03-13 17:27:41,315 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:27:41,317 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-13 17:27:41,304 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 17:27:41,378 INFO: [cached since 2982s ago] {'param_1': 2}
2025-03-13 17:27:41,382 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-13 17:27:41,390 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-13 17:27:41,391 INFO: [cached since 2982s ago] {'param_1': 7}
2025-03-13 17:27:41,392 INFO: [cached since 2765s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-13 17:27:41,396 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-13 17:27:41,401 INFO: [cached since 2765s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-13 17:27:41,409 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:27:41,410 INFO: [cached since 2982s ago] {'param_1': 1}
2025-03-13 17:27:41,418 DEBUG: Tasks returned: [{'id': 430, 'name': 'No Epic', 'task_type': 'Epic', 'is_parent': False}, {'id': 393, 'name': 'List of ideas for new features, parameters to add', 'task_type': 'Epic', 'is_parent': False}, {'id': 327, 'name': '[UNIQUE feature] -\xa0Epic - AI-Powered PBI Refinement System', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 456, 'name': 'Search in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okrÂ´s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notification system', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 459, 'name': '[RESEARCH] - Step 1: Mapping out what each file does', 'task_type': 'Epic', 'is_parent': False}, {'id': 432, 'name': 'Roadmap view', 'task_type': 'Epic', 'is_parent': False}, {'id': 392, 'name': 'UI / UX Improvements', 'task_type': 'Epic', 'is_parent': False}, {'id': 465, 'name': 'Building from Scratch vs.\xa0Replicating Each Feature', 'task_type': 'Epic', 'is_parent': False}, {'id': 424, 'name': '[ISSUES] - Current issues/bugs', 'task_type': 'Epic', 'is_parent': False}, {'id': 460, 'name': '[PLANNING] - Step 2: Architecture & Migration Planning', 'task_type': 'Epic', 'is_parent': False}, {'id': 462, 'name': '[MIGRATION] - high-level roadmap Step 1 - 7', 'task_type': 'Epic', 'is_parent': False}]
2025-03-13 17:27:41,432 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:27:41,433 INFO: ROLLBACK
2025-03-13 17:27:41,433 INFO: [cached since 2982s ago] {'param_1': 2}
2025-03-13 17:27:41,439 DEBUG: Tasks returned: [{'id': 430, 'name': 'No Epic', 'task_type': 'Epic', 'is_parent': False}, {'id': 393, 'name': 'List of ideas for new features, parameters to add', 'task_type': 'Epic', 'is_parent': False}, {'id': 327, 'name': '[UNIQUE feature] -\xa0Epic - AI-Powered PBI Refinement System', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 456, 'name': 'Search in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okrÂ´s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notification system', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 459, 'name': '[RESEARCH] - Step 1: Mapping out what each file does', 'task_type': 'Epic', 'is_parent': False}, {'id': 432, 'name': 'Roadmap view', 'task_type': 'Epic', 'is_parent': False}, {'id': 392, 'name': 'UI / UX Improvements', 'task_type': 'Epic', 'is_parent': False}, {'id': 465, 'name': 'Building from Scratch vs.\xa0Replicating Each Feature', 'task_type': 'Epic', 'is_parent': False}, {'id': 424, 'name': '[ISSUES] - Current issues/bugs', 'task_type': 'Epic', 'is_parent': False}, {'id': 460, 'name': '[PLANNING] - Step 2: Architecture & Migration Planning', 'task_type': 'Epic', 'is_parent': False}, {'id': 462, 'name': '[MIGRATION] - high-level roadmap Step 1 - 7', 'task_type': 'Epic', 'is_parent': False}]
2025-03-13 17:27:41,442 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:27:41,444 INFO: 127.0.0.1 - - [13/Mar/2025 17:27:41] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=291&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 17:27:41,448 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:27:41,450 INFO: ROLLBACK
2025-03-13 17:27:41,450 INFO: [cached since 2982s ago] {'param_1': 3}
2025-03-13 17:27:41,450 INFO: [cached since 2982s ago] {'param_1': 3}
2025-03-13 17:27:41,451 INFO: 127.0.0.1 - - [13/Mar/2025 17:27:41] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=291&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 17:27:41,454 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:27:41,454 INFO: [cached since 2982s ago] {'param_1': 4}
2025-03-13 17:27:41,460 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:27:41,463 INFO: [cached since 2982s ago] {'param_1': 5}
2025-03-13 17:27:41,465 INFO: ROLLBACK
2025-03-13 17:27:41,467 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:27:41,467 INFO: 127.0.0.1 - - [13/Mar/2025 17:27:41] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 17:27:41,467 INFO: [cached since 2982s ago] {'param_1': 4}
2025-03-13 17:27:41,470 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:27:41,470 INFO: [cached since 2982s ago] {'param_1': 5}
2025-03-13 17:27:41,472 INFO: ROLLBACK
2025-03-13 17:27:41,473 INFO: 127.0.0.1 - - [13/Mar/2025 17:27:41] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 17:30:45,924 INFO: 127.0.0.1 - - [13/Mar/2025 17:30:45] "GET /socket.io/?EIO=4&transport=websocket&sid=eHOCi5CR5CRrxZ36AAAY HTTP/1.1" 200 -
2025-03-13 17:30:47,218 INFO: 127.0.0.1 - - [13/Mar/2025 17:30:47] "GET /socket.io/?EIO=4&transport=polling&t=kfhqw2nv HTTP/1.1" 200 -
2025-03-13 17:30:47,318 INFO: 127.0.0.1 - - [13/Mar/2025 17:30:47] "POST /socket.io/?EIO=4&transport=polling&t=kfhsnrtx&sid=4Nehjb4heQ8hsF5FAAAa HTTP/1.1" 200 -
2025-03-13 17:30:47,411 INFO: BEGIN (implicit)
2025-03-13 17:30:47,412 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:30:47,412 INFO: [cached since 3168s ago] {}
2025-03-13 17:30:47,413 INFO: BEGIN (implicit)
2025-03-13 17:30:47,413 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 17:30:47,413 INFO: [cached since 3168s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 17:30:47,414 INFO: Entering list_tasks_json route...
2025-03-13 17:30:47,414 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 17:30:47,428 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 17:30:47,523 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:30:47,559 INFO: [cached since 3168s ago] {'param_1': 1}
2025-03-13 17:30:47,527 INFO: ROLLBACK
2025-03-13 17:30:47,546 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 17:30:47,549 INFO: BEGIN (implicit)
2025-03-13 17:30:47,551 INFO: 127.0.0.1 - - [13/Mar/2025 17:30:47] "GET /socket.io/?EIO=4&transport=polling&t=kfhsos63&sid=4Nehjb4heQ8hsF5FAAAa HTTP/1.1" 200 -
2025-03-13 17:30:47,572 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 17:30:47,574 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:30:47,574 INFO: 127.0.0.1 - - [13/Mar/2025 17:30:47] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 17:30:47,575 INFO: BEGIN (implicit)
2025-03-13 17:30:47,576 INFO: [cached since 3168s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 17:30:47,577 INFO: [cached since 3168s ago] {'param_1': 2}
2025-03-13 17:30:47,599 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 17:30:47,600 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 17:30:47,606 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:30:47,609 INFO: [cached since 3168s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 17:30:47,609 INFO: [cached since 3168s ago] {}
2025-03-13 17:30:47,616 INFO: [cached since 3168s ago] {'param_1': 3}
2025-03-13 17:30:47,633 INFO: ROLLBACK
2025-03-13 17:30:47,638 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:30:47,639 INFO: BEGIN (implicit)
2025-03-13 17:30:47,639 INFO: [cached since 3168s ago] {'param_1': 4}
2025-03-13 17:30:47,639 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 17:30:47,639 INFO: [cached since 3168s ago] {'pk_1': 19}
2025-03-13 17:30:47,642 INFO: 127.0.0.1 - - [13/Mar/2025 17:30:47] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 17:30:47,661 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:30:47,668 INFO: [cached since 3168s ago] {'param_1': 5}
2025-03-13 17:30:47,663 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 17:30:47,669 INFO: [cached since 3168s ago] {}
2025-03-13 17:30:47,672 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 17:30:47,672 INFO: [cached since 3168s ago] {'param_1': 19}
2025-03-13 17:30:47,678 INFO: ROLLBACK
2025-03-13 17:30:47,679 INFO: 127.0.0.1 - - [13/Mar/2025 17:30:47] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 17:30:47,682 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:30:47,682 INFO: [cached since 3168s ago] {'param_1': 1}
2025-03-13 17:30:47,688 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:30:47,688 INFO: [cached since 3168s ago] {'param_1': 2}
2025-03-13 17:30:47,693 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:30:47,694 INFO: [cached since 3168s ago] {'param_1': 3}
2025-03-13 17:30:47,707 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:30:47,707 INFO: [cached since 3168s ago] {'param_1': 4}
2025-03-13 17:30:47,714 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 17:30:47,714 INFO: [cached since 3168s ago] {'param_1': 5}
2025-03-13 17:30:47,759 INFO: ROLLBACK
2025-03-13 17:30:47,784 INFO: 127.0.0.1 - - [13/Mar/2025 17:30:47] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 17:30:48,481 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 17:30:48,482 INFO: [cached since 3169s ago] {}
2025-03-13 17:30:48,485 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 17:30:48,485 INFO: [cached since 3169s ago] {}
2025-03-13 17:30:48,519 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 17:30:48,519 INFO: [cached since 3169s ago] {}
2025-03-13 17:30:48,546 INFO: ROLLBACK
2025-03-13 17:30:48,547 INFO: 127.0.0.1 - - [13/Mar/2025 17:30:48] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 18:02:54,278 INFO: 127.0.0.1 - - [13/Mar/2025 18:02:54] "GET /socket.io/?EIO=4&transport=polling&t=lkso29px HTTP/1.1" 200 -
2025-03-13 18:02:54,396 INFO: 127.0.0.1 - - [13/Mar/2025 18:02:54] "POST /socket.io/?EIO=4&transport=polling&t=lksr8m0e&sid=YUg8P9mebi40jU5iAAAc HTTP/1.1" 200 -
2025-03-13 18:02:54,458 INFO: 127.0.0.1 - - [13/Mar/2025 18:02:54] "GET /socket.io/?EIO=4&transport=polling&t=lksrawib&sid=YUg8P9mebi40jU5iAAAc HTTP/1.1" 200 -
2025-03-13 18:02:54,465 INFO: 127.0.0.1 - - [13/Mar/2025 18:02:54] "GET /socket.io/?EIO=4&transport=polling&t=lksu5no9&sid=YUg8P9mebi40jU5iAAAc HTTP/1.1" 200 -
2025-03-13 18:04:25,355 INFO: 127.0.0.1 - - [13/Mar/2025 18:04:25] "GET /socket.io/?EIO=4&transport=polling&t=lmqyk1s1 HTTP/1.1" 200 -
2025-03-13 18:04:25,415 INFO: 127.0.0.1 - - [13/Mar/2025 18:04:25] "POST /socket.io/?EIO=4&transport=polling&t=lmr0jumt&sid=2tcE9vw0B_Wfy-IfAAAe HTTP/1.1" 200 -
2025-03-13 18:04:25,417 INFO: 127.0.0.1 - - [13/Mar/2025 18:04:25] "GET /socket.io/?EIO=4&transport=polling&t=lmr0koqt&sid=2tcE9vw0B_Wfy-IfAAAe HTTP/1.1" 200 -
2025-03-13 18:04:40,747 INFO: 127.0.0.1 - - [13/Mar/2025 18:04:40] "GET /socket.io/?EIO=4&transport=polling&t=ln2npiah HTTP/1.1" 200 -
2025-03-13 18:04:40,777 INFO: 127.0.0.1 - - [13/Mar/2025 18:04:40] "POST /socket.io/?EIO=4&transport=polling&t=ln2v1ti0&sid=ntPg6p-xfD7kBcbHAAAg HTTP/1.1" 200 -
2025-03-13 18:04:40,784 INFO: 127.0.0.1 - - [13/Mar/2025 18:04:40] "GET /socket.io/?EIO=4&transport=polling&t=ln2v2c6m&sid=ntPg6p-xfD7kBcbHAAAg HTTP/1.1" 200 -
2025-03-13 18:04:54,450 INFO: 127.0.0.1 - - [13/Mar/2025 18:04:54] "GET /socket.io/?EIO=4&transport=websocket&sid=2tcE9vw0B_Wfy-IfAAAe HTTP/1.1" 200 -
2025-03-13 18:04:54,451 INFO: 127.0.0.1 - - [13/Mar/2025 18:04:54] "GET /socket.io/?EIO=4&transport=websocket&sid=ntPg6p-xfD7kBcbHAAAg HTTP/1.1" 200 -
2025-03-13 18:04:54,452 INFO: 127.0.0.1 - - [13/Mar/2025 18:04:54] "GET /socket.io/?EIO=4&transport=websocket&sid=YUg8P9mebi40jU5iAAAc HTTP/1.1" 200 -
2025-03-13 18:04:54,454 INFO: 127.0.0.1 - - [13/Mar/2025 18:04:54] "GET /socket.io/?EIO=4&transport=websocket&sid=4Nehjb4heQ8hsF5FAAAa HTTP/1.1" 200 -
2025-03-13 18:04:55,493 INFO: 127.0.0.1 - - [13/Mar/2025 18:04:55] "GET /socket.io/?EIO=4&transport=polling&t=lne6ar1q HTTP/1.1" 200 -
2025-03-13 18:04:55,507 INFO: BEGIN (implicit)
2025-03-13 18:04:55,585 INFO: BEGIN (implicit)
2025-03-13 18:04:55,589 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 18:04:55,590 INFO: Entering list_tasks_json route...
2025-03-13 18:04:55,593 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 18:04:55,620 INFO: [cached since 5216s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 18:04:55,606 INFO: [cached since 5216s ago] {}
2025-03-13 18:04:55,614 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 18:04:55,619 INFO: 127.0.0.1 - - [13/Mar/2025 18:04:55] "POST /socket.io/?EIO=4&transport=polling&t=lne8f5xe&sid=8QvA1u5YhalSRgacAAAi HTTP/1.1" 200 -
2025-03-13 18:04:55,602 INFO: BEGIN (implicit)
2025-03-13 18:04:55,660 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 18:04:55,660 INFO: [cached since 5216s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 18:04:55,629 INFO: 127.0.0.1 - - [13/Mar/2025 18:04:55] "GET /socket.io/?EIO=4&transport=polling&t=lne8ghml&sid=8QvA1u5YhalSRgacAAAi HTTP/1.1" 200 -
2025-03-13 18:04:55,658 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 18:04:55,688 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 18:04:55,688 INFO: [cached since 5216s ago] {'param_1': 1}
2025-03-13 18:04:55,709 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 18:04:55,710 INFO: ROLLBACK
2025-03-13 18:04:55,711 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 18:04:55,714 INFO: BEGIN (implicit)
2025-03-13 18:04:55,719 INFO: [cached since 5216s ago] {}
2025-03-13 18:04:55,720 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 18:04:55,720 INFO: 127.0.0.1 - - [13/Mar/2025 18:04:55] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 18:04:55,722 INFO: ROLLBACK
2025-03-13 18:04:55,723 INFO: [cached since 5216s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 18:04:55,724 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 18:04:55,726 INFO: [cached since 5216s ago] {'param_1': 2}
2025-03-13 18:04:55,728 INFO: 127.0.0.1 - - [13/Mar/2025 18:04:55] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 18:04:55,742 INFO: BEGIN (implicit)
2025-03-13 18:04:55,742 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 18:04:55,743 INFO: [cached since 5216s ago] {'pk_1': 19}
2025-03-13 18:04:55,744 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 18:04:55,744 INFO: [cached since 5216s ago] {'param_1': 3}
2025-03-13 18:04:55,745 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 18:04:55,747 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 18:04:55,747 INFO: [cached since 5216s ago] {}
2025-03-13 18:04:55,747 INFO: [cached since 5216s ago] {'param_1': 4}
2025-03-13 18:04:55,750 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 18:04:55,751 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 18:04:55,751 INFO: [cached since 5216s ago] {'param_1': 19}
2025-03-13 18:04:55,751 INFO: [cached since 5216s ago] {'param_1': 5}
2025-03-13 18:04:55,753 INFO: ROLLBACK
2025-03-13 18:04:55,754 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 18:04:55,754 INFO: [cached since 5216s ago] {'param_1': 1}
2025-03-13 18:04:55,754 INFO: 127.0.0.1 - - [13/Mar/2025 18:04:55] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 18:04:55,755 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 18:04:55,756 INFO: [cached since 5216s ago] {'param_1': 2}
2025-03-13 18:04:55,757 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 18:04:55,757 INFO: [cached since 5216s ago] {'param_1': 3}
2025-03-13 18:04:55,759 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 18:04:55,759 INFO: [cached since 5216s ago] {'param_1': 4}
2025-03-13 18:04:55,761 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 18:04:55,761 INFO: [cached since 5216s ago] {'param_1': 5}
2025-03-13 18:04:55,762 INFO: ROLLBACK
2025-03-13 18:04:55,762 INFO: 127.0.0.1 - - [13/Mar/2025 18:04:55] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 18:04:56,001 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 18:04:56,002 INFO: [cached since 5216s ago] {}
2025-03-13 18:04:56,004 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 18:04:56,004 INFO: [cached since 5216s ago] {}
2025-03-13 18:04:56,005 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 18:04:56,005 INFO: [cached since 5216s ago] {}
2025-03-13 18:04:56,009 INFO: ROLLBACK
2025-03-13 18:04:56,010 INFO: 127.0.0.1 - - [13/Mar/2025 18:04:56] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 18:04:58,238 INFO: Fetching task details for Task ID 327.
2025-03-13 18:04:58,238 INFO: Fetching task with ID 327.
2025-03-13 18:04:58,239 INFO: BEGIN (implicit)
2025-03-13 18:04:58,240 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 18:04:58,240 INFO: [cached since 5216s ago] {'pk_1': 327}
