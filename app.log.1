2025-02-13 15:59:19,700 DEBUG: Tasks response: [{'id': 290, 'name': 'issue: error when changing task type and', 'description': 'issue: error when changing task type and parent task before saving', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:00:03.417734', 'updated_at': '2025-02-10T09:15:09.284969'}, {'id': 298, 'name': 'example user story with parent epic 297', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 297, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:41:01.907455', 'updated_at': '2025-02-10T14:59:04.142570'}, {'id': 275, 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-10T08:38:37.622196'}, {'id': 276, 'name': 'add support for priority', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-10T08:28:47.447612'}, {'id': 264, 'name': 'close all / open all childtasks', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-02-10T08:47:14.915970'}, {'id': 285, 'name': 'add text truncation to project names in task list', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-10T09:45:47.029729'}, {'id': 257, 'name': 'Update Task API Integration', 'description': "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-02-05T22:55:49.566819', 'updated_at': '2025-02-05T22:18:17.807154'}, {'id': 294, 'name': 'issue: task table filters not working', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:19:21.022598', 'updated_at': '2025-02-12T10:59:15.483390'}, {'id': 267, 'name': 'improvements to toggles and nested tasks', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:29:12.464594', 'updated_at': '2025-02-10T08:47:24.581680'}, {'id': 283, 'name': 'fix update title', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:58.769700', 'updated_at': '2025-02-10T08:46:47.282087'}, {'id': 271, 'name': 'make sure dynamically added rows has the exact same styling and includes every element', 'description': 'Missing elements:\n- Open link\n- Default project\n- Project name should be inside a pill\n- Task type should be in a pill\n- Estimations should be 0, not N/A\n- Make sure font size is matching\n- status should have the dropdown inside a pill\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:21:07.108431', 'updated_at': '2025-02-10T08:38:47.340105'}, {'id': 273, 'name': 'disable parent task selector in epics', 'description': 'and add text, Epic can¬¥t have parent tasks', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:45:20.740910', 'updated_at': '2025-02-10T08:39:17.639890'}, {'id': 269, 'name': 'fix styling for sweetalert', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-02-08T15:54:56.717846', 'updated_at': '2025-02-10T08:39:32.172437'}, {'id': 286, 'name': 'add support for labels/tags', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:46:23.985620', 'updated_at': '2025-02-10T09:46:23.987564'}, {'id': 299, 'name': 'example sub task with parent user story 298', 'description': 'Test update 1\nTest update 2\nTest update 3', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 298, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:42:38.905700', 'updated_at': '2025-02-10T23:23:08.671464'}, {'id': 266, 'name': 'highlight the nested tasks', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-02-10T08:47:04.382929'}, {'id': 279, 'name': 'github integration', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:38.238202', 'updated_at': '2025-02-10T08:39:24.168451'}, {'id': 289, 'name': 'issue: parent task is lost when updating task', 'description': '- Summary of the problem and solution\n    \n    **Problem: Parent Task Dropdown Was Not Being Set on Modal Open**\n    \n    The issue was that when opening a task modal, the **parent task dropdown** was not pre-populated with the correct parent task. However, interacting with the dropdown (e.g., clicking on it) would suddenly trigger it to be set correctly. This meant that the dropdown initialization was likely delayed or missing a step in the modal lifecycle.\n    \n    **Debugging Steps and Observations**\n    \n    1. **Task Details Were Fetched Correctly** ‚úÖ\n    - The task details, including parent_id, were being fetched from the API successfully.\n    1. **Parent Dropdown Initialization Issues** ‚ùå\n    - The initializeParentDropdown() function was being called, but the dropdown was sometimes **not fully ready** when we tried to set the selected parent task.\n    1. **Clicking the Dropdown Triggered the Parent to Be Set** ü§î\n    - This hinted that the dropdown was not fully ready when setParentDropdown(task.parent_id) was initially called.\n    \n    **Final Solution**\n    \n    1. **Ensuring Dropdown Readiness Before Setting the Parent Task**\n    - We added explicit **delays and checks** to confirm that the dropdown was fully initialized before attempting to set the parent task.\n    \n    Specifically, we:\n    \n    - **Waited for the dropdown to appear in the DOM** using observeParentDropdown().\n    - **Initialized the dropdown** with initializeParentDropdown().\n    - **Waited explicitly for the dropdown to be fully ready** using waitForParentDropdownReady().\n    - **Added a final delay of 200ms** before calling setParentDropdown() to ensure stability.\n    1. **Modifying openTaskModal to Handle Parent Dropdown Setup**\n    - We ensured that initializeParentDropdown() was called **after fetching task details** and before setting the parent task.\n    1. **Confirming the Fix** üéØ\n    - After these fixes, the parent dropdown was **immediately populated** upon opening the modal, without requiring user interaction.\n    \n    **Key Learnings**\n    \n    ‚úÖ **Dropdowns in modals need careful timing** ‚Äì They might not be ready when you expect them to be.\n    \n    ‚úÖ **Waiting for DOM updates is crucial** ‚Äì Observing the element ensures it actually exists before interacting with it.\n    \n    ‚úÖ **Explicit delays can prevent race conditions** ‚Äì A small delay can sometimes resolve timing issues in UI interactions.\n    \n    **Final Result**\n    \n    ‚úÖ The modal now **correctly loads and pre-selects the parent task** without extra clicks! üéâüöÄ', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T08:56:25.273984', 'updated_at': '2025-02-11T15:40:03.610698'}, {'id': 278, 'name': 'search feature for tasks list', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:03.369833', 'updated_at': '2025-02-10T08:39:04.005957'}, {'id': 281, 'name': 'add high level plan', 'description': 'Add some sort of high level plan that aims to keep PM/PO¬¥s on track and not get lost into the details of an overwhelminly large backlog', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:27:01.218606', 'updated_at': '2025-02-10T08:38:54.754760'}, {'id': 287, 'name': 'when moving a parent item to another project make sure the subtasks are moved as well', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:48:31.986870', 'updated_at': '2025-02-10T09:48:31.988859'}, {'id': 272, 'name': 'implement a markdown text editor like notion', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-02-10T08:28:39.669255'}, {'id': 293, 'name': 'click on title should copy the task title and id to clipboard', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:16:33.508209', 'updated_at': '2025-02-10T10:16:33.510414'}, {'id': 277, 'name': 'custom task workflow statuses', 'description': 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- Custom status\n-- Custom status\n- In Progress\n-- Custom status\n-- Custom status\n-- Custom status\n- Completed\n-- Custom status\n-- Custom status\n\n2. How can we track a task through different stages and save the sequence of events or stages the task has gone through?\nI¬¥m thinking it could be good for mapping out processes, identifying bottlenecks and provide valuable insights while improving and streamlining workflows.\n- Stages\n- Contacts taken\n- Respons time \n- Time to action after responses\n- Dependencies\n\nNeed to be able to record every action related to this action.\nCommunication integrations\n- Slack\n- Email\n- Text messages\n- Phonecalls\n- Calendar events, meetings\n- Zoom, Google meet, Teams etc..\n\n\n2. Set custom statuses per project (can use tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:16:03.352588', 'updated_at': '2025-02-10T08:38:28.123328'}, {'id': 274, 'name': 'add support for goals, initiatives, okr¬¥s', 'description': 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:46:27.204912', 'updated_at': '2025-02-10T08:28:17.663922'}, {'id': 280, 'name': 'logging (task and project history)', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:37:44.435112', 'updated_at': '2025-02-10T08:28:28.947805'}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:17.786154', 'updated_at': '2025-02-10T09:41:17.787861'}, {'id': 296, 'name': 'issue: contributor is lost after updating task', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:26:43.881947', 'updated_at': '2025-02-11T15:37:31.011120'}, {'id': 288, 'name': 'when trying to move subtask to another project, make sure a warning is displayed', 'description': 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be lost"\nOR\n\nIs it possible, and is it desireable to keep parent child relationships across projects?\nSo that a parent can be in one project but the child tasks can be in different projects?\n\nLets say \nParent epic is \n"Internationalisation"\nChild user stories are\n- Timezones\n- Language\n- Currency\n- Day, Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:54:36.297869', 'updated_at': '2025-02-10T08:54:51.840686'}, {'id': 284, 'name': 'add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-10T09:42:27.720908'}, {'id': 295, 'name': 'issue: drag and drop errors', 'description': '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:22:54.461413', 'updated_at': '2025-02-10T10:22:54.462542'}, {'id': 297, 'name': 'example parent epic', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:39:51.620509', 'updated_at': '2025-02-10T10:39:51.622712'}, {'id': 292, 'name': 'issue: assigning contributor does not work', 'description': '### **Summary of problem and solution**\n\nThe issue was that assigning a contributor to a task via the /tasks/<task_id>/assign_contributor API endpoint resulted in a **400 Bad Request** error. Upon investigation, the following problems were identified:\n\n1. **Missing CSRF Token:**\n- The request failed due to a missing CSRF token, as shown in the error message: *‚ÄúBad Request: The CSRF token is missing.‚Äù*\n- The frontend was not correctly including the CSRF token in the request headers.\n1. **JavaScript Error (Undefined CSRF Token Variable):**\n- The error *‚ÄúReferenceError: csrfToken is not defined‚Äù* indicated that the CSRF token was not being retrieved properly in the JavaScript code.\n1. **Incorrect Fetch Request Headers:**\n- The fetch request did not include the CSRF token under the correct key (X-CSRFToken).\n- The script attempted to send the request without properly extracting the CSRF token from the meta tag.\n\n### **Solution**\n\n1. **Include the CSRF Token in the JavaScript Code**\n\nThe CSRF token was retrieved from the meta tag and used in the request headers:\n\n```jsx\n// Retrieve CSRF token from meta tag\nconst csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\');\n```\n\nThis ensures that the CSRF token is correctly fetched and available in the JavaScript scope.\n\n1. **Modify the Fetch Request to Include CSRF Token**\n\nThe request to assign a contributor was updated to include the token:\n\n```jsx\nconst response = await fetch(`/tasks/${taskId}/assign_contributor`, {\n    method: "POST",\n    headers: { \n        "Content-Type": "application/json",\n        "X-CSRFToken": csrfToken  // Include CSRF token\n    },\n    body: JSON.stringify({ contributor_id: parseInt(contributorId, 10) }),\n});\n```\n\n- **Ensures the CSRF token is sent in the request headers** so that Flask-WTF does not reject the request.\n1. **Verify and Debug Network Requests**\n- The updated request headers were verified using **Chrome DevTools > Network tab** to ensure the X-CSRFToken was included.\n- The error messages disappeared, and the contributor assignment request **succeeded with a 200 OK response**.\n\n---\n\n### **Final Outcome**\n\nüöÄ The issue was resolved, and contributors can now be assigned successfully to tasks without triggering a CSRF validation error.\n\n### **Key Learnings from This Session**\n\nThis debugging session covered several important aspects of **web development with Flask and JavaScript**, particularly related to **API requests, CSRF protection, debugging tools, and database interactions**. Here are the key takeaways:\n\n---\n\n### **1. CSRF Protection in API Requests**\n\n- **Issue:** The initial error was due to **a missing CSRF token** when making a `POST` request.\n- **Fix:** The solution was to **retrieve the CSRF token from a meta tag** in the HTML and include it in the request headers.\n- **Key Learning:** Flask-WTF requires CSRF tokens for form and API submissions to **prevent cross-site request forgery (CSRF) attacks**.‚úÖ Always ensure that API requests include a valid CSRF token.\n\n---\n\n### **2. Debugging JavaScript Fetch Requests**\n\n- **Issue:** The JavaScript code was making a fetch request, but the variable `csrfToken` was not properly defined, causing a `ReferenceError`.\n- **Fix:** Declaring `csrfToken` at the beginning of the script:\n    \n    ```jsx\n    const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\');\n    ```\n    \n- **Key Learning:**‚úÖ JavaScript variables must be defined before they are used.‚úÖ Use browser **developer tools (DevTools) Network tab** to inspect headers, payloads, and responses when debugging API requests.\n\n---\n\n### **3. Structuring Flask Routes for Task Management**\n\n- **Issue:** The `assign_contributor` route was failing due to incorrect request payload validation.\n- **Fix:** Improved the route‚Äôs error handling and logging:\n    \n    ```python\n    @bp.route(\'/<int:task_id>/assign_contributor\', methods=[\'POST\'])\n    def assign_contributor(task_id):\n        try:\n            data = request.get_json()\n            contributor_id = int(data.get(\'contributor_id\', 0))\n            if not contributor_id:\n                return jsonify({\'error\': \'Valid Contributor ID is required\'}), 400\n    ```\n    \n- **Key Learning:**‚úÖ Always validate incoming data in Flask routes to prevent type errors.‚úÖ Use `request.get_json()` properly and handle missing or incorrect data gracefully.\n\n---\n\n### **4. Utilizing Browser DevTools for Debugging**\n\n- **Issue:** The fetch request was failing with a `400 Bad Request`, and the browser console showed `ReferenceError: csrfToken is not defined`.\n- **Fix:**\n    - Used **Network tab** to inspect the request payload and headers.\n    - Used **Console tab** to catch JavaScript errors early.\n- **Key Learning:**‚úÖ DevTools is a **critical** tool for diagnosing network request issues.‚úÖ Always **check console errors** before assuming it\'s a backend issue.\n\n---\n\n### **5. Database Queries and ORM Debugging**\n\n- **Issue:** Tasks were not being updated correctly, possibly due to missing commit statements.\n- **Fix:** Ensured that:was executed properly.\n    \n    ```python\n    task.contributor_id = contributor_id\n    db.session.commit()\n    ```\n    \n- **Key Learning:**‚úÖ Always call `db.session.commit()` after making changes in SQLAlchemy.‚úÖ Rollback transactions if an error occurs to avoid database inconsistency.\n\n---\n\n### **6. Handling Asynchronous JavaScript Logic**\n\n- **Issue:** The `assignContributor` function was executing before the page was fully loaded.\n- **Fix:** Wrapped it inside a function that ensures elements exist:\n    \n    ```\n    window.setupContributorAssignment = function () {\n        const assignButton = $("#assign-contributor-btn");\n        if (!assignButton.length) {\n            setTimeout(setupContributorAssignment, 500); // Retry in 500ms\n            return;\n        }\n    ```\n    \n- **Key Learning:**‚úÖ Use `setTimeout` to **retry event binding** when elements are dynamically loaded.‚úÖ Always **check if elements exist before attaching event handlers**.\n\n---\n\n### **7. Best Practices for Flask Logging & Error Handling**\n\n- **Issue:** Lack of clear logging when API calls failed.\n- **Fix:** Added better logging to track failures:\n    \n    ```python\n    logger.info(f"Assigning contributor to task ID {task_id}")\n    try:\n        # Process request...\n    except Exception as e:\n        logger.error(f"Error assigning contributor: {e}")\n    ```\n    \n- **Key Learning:**‚úÖ Log **every major step** in API processing to simplify debugging.‚úÖ Differentiate between `logger.info()`, `logger.warning()`, and `logger.error()` based on severity.\n\n---\n\n### **Final Takeaways**\n\nüöÄ **Understanding CSRF protection** and **properly structuring API requests** is crucial for secure web applications.\n\nüîç **Browser DevTools is invaluable** for diagnosing frontend issues, especially in JavaScript.\n\nüêç **Flask requires proper request validation, database transactions, and logging** to maintain stability.\n\n‚ö° **Asynchronous JavaScript must handle dynamic elements carefully** to avoid runtime errors.\n\nThis session reinforced best practices in **frontend-backend integration, debugging, and security**, making it a great learning experience! üöÄüî•', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:11:12.273779', 'updated_at': '2025-02-12T10:59:41.585250'}, {'id': 265, 'name': 'smooth transition for toggles', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-02-10T08:46:55.831743'}, {'id': 270, 'name': 'the newest task', 'description': '', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:07:34.368035', 'updated_at': '2025-02-10T01:07:34.372478'}, {'id': 291, 'name': 'add dropdowns in task list for changing: project, assigned to, estimate and task type (labels/tags)', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-02-10T10:09:52.997455'}, {'id': 136, 'name': 'Page scroll should stay in position when reloading', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-16T18:21:50.187247', 'updated_at': '2025-01-16T19:22:36.214901'}, {'id': 130, 'name': 'Implement the Map of Task Relationships solution for drag-and-drop', 'description': 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.093022', 'updated_at': '2025-01-16T19:22:36.216705'}, {'id': 133, 'name': 'Step 4: Enhance Logging in models.py', 'description': 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nupdating the Task model in the following ways:\n\n1.\tLog Changes to parent_id:\n\t‚Ä¢\tLog changes to parent_id during updates, including old and new values.\n\t2.\tValidate Hierarchy with Logging:\n\t‚Ä¢\tLog detailed messages when validating hierarchy changes, especially for circular dependency checks.\n\nHere‚Äôs how the models.py can be updated:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy import func, cast, CheckConstraint\nfrom sqlalchemy.orm import validates\nfrom app.extensions.db import db\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\nclass Task(db.Model):\n    __tablename__ = "task"\n    \n    # Other columns...\n\n    parent_id = db.Column(\n        db.Integer, db.ForeignKey("task.id"), index=True, nullable=True\n    )\n\n    # Relationships\n    parent = db.relationship(\n        "Task", remote_side=[id], back_populates="children", lazy="select"\n    )\n    children = db.relationship(\n        "Task", back_populates="parent", lazy="select"\n    )\n\n    \n\n\n    @staticmethod\n    def _validate_no_circular_references(new_parent_id):\n        """\n        Validates that there are no circular references in the task hierarchy.\n\n        Args:\n            new_parent_id (int): The new parent ID to validate.\n\n        Raises:\n            ValueError: If a circular reference is detected.\n        """\n        visited = set()\n        current_parent_id = new_parent_id\n\n        logger.info(f"Validating circular references for parent ID: {new_parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error(\n                    f"Circular reference detected: Parent ID {current_parent_id} already visited."\n                )\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            # Fetch the next parent_id in the hierarchy\n            parent = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not parent:\n                break  # Exit if no parent is found\n            current_parent_id = parent.parent_id\n\n        logger.info("No circular reference detected.")\n\n    @validates(\'parent_id\', \'task_type\')\n    def validate_task_changes(self, key, value):\n        """\n        Validates changes to \'parent_id\' and \'task_type\'.\n        Ensures hierarchy validity and checks for circular references.\n        """\n        logger.debug(f"Validating {key} change for Task {self.id}: {value}")\n\n        if key == \'parent_id\':\n            # Log changes to parent_id\n            if self.id and value != self.parent_id:\n                logger.info(f"Task {self.id}: Updating \'parent_id\' from {self.parent_id} to {value}")\n\n            # Prevent a task from being its own parent\n            if value and value == self.id:\n                logger.error("A task cannot be its own parent.")\n                raise ValueError("A task cannot be its own parent.")\n\n            # Check for circular references\n            if value:\n                Task.check_circular_reference(self.id, value)\n\n        elif key == \'task_type\':\n            # Log changes to task_type\n            if self.id and value != self.task_type:\n                logger.info(f"Task {self.id}: Updating \'task_type\' from {self.task_type} to {value}")\n\n        # Check hierarchy rules without triggering further validation\n        if key in [\'parent_id\', \'task_type\']:\n            self._validate_hierarchy_change(key, value)\n\n        logger.info(f"Validation passed for {key}: {value}")\n        return value\n\n    def _validate_hierarchy_change(self, key, value):\n        """\n        Validates hierarchy rules for the task based on `task_type` and `parent_id`.\n        """\n        if key == \'parent_id\' and value:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=value).first()\n            if not parent_task:\n                raise ValueError("Parent task does not exist.")\n\n            logger.debug(f"Validating hierarchy: Task {self.id}, Parent Type: {parent_task.task_type}")\n            if self.task_type == "User Story" and parent_task.task_type != "Epic":\n                raise ValueError("User Stories must have an Epic as a parent.")\n            if self.task_type == "Subtask" and parent_task.task_type != "User Story":\n                raise ValueError("Subtasks must have a User Story as a parent.")\n\n        elif key == \'task_type\' and self.parent_id:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=self.parent_id).first()\n            if parent_task:\n                logger.debug(f"Validating hierarchy: Task Type: {value}, Parent Type: {parent_task.task_type}")\n                if value == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError("User Stories must have an Epic as a parent.")\n                if value == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError("Subtasks must have a User Story as a parent.")\n\n        logger.info(f"Hierarchy validation passed for Task {self.id if self.id else \'New Task\'}.")\n\n    @staticmethod\n    def check_circular_reference(task_id, parent_id):\n        """\n        Iteratively checks for circular references in the task hierarchy.\n        Prevents stack overflow on deep hierarchies.\n        """\n        visited = set()\n        current_parent_id = parent_id\n\n        logger.info(f"Checking circular reference for Task {task_id} with Parent ID: {parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error("Circular reference detected!")\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            if current_parent_id == task_id:\n                logger.error("A task cannot be its own ancestor.")\n                raise ValueError("A task cannot be its own ancestor.")\n\n            # Fetch the next parent_id in the hierarchy\n            task = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not task:\n                break\n            current_parent_id = task.parent_id\n\n        logger.info("Circular reference check passed.")\n```\nKey Enhancements:\n\t1.\tlog_and_validate_parent_id_change:\n\t‚Ä¢\tLogs the old and new parent_id whenever it changes.\n\t‚Ä¢\tEnsures no circular references are introduced.\n\t2.\t_validate_no_circular_references:\n\t‚Ä¢\tValidates the parent_id field to prevent circular dependencies.\n\t‚Ä¢\tLogs progress and raises detailed errors if violations occur.\n\t3.\tlog_and_validate_task_type_change:\n\t‚Ä¢\tLogs changes to task_type with the old and new values.\n\t‚Ä¢\tRevalidates hierarchy rules when task_type changes.\n\t4.\tDetailed Logging for Circular Reference Validation:\n\t‚Ä¢\t_validate_no_circular_references and check_circular_reference methods log every step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t‚Ä¢\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:44:08.340041', 'updated_at': '2025-01-16T19:22:36.219710'}, {'id': 132, 'name': 'Step 1: Update tasks_table_interactions.js', 'description': '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the map for efficient parent-child relationship lookups instead of DOM traversal.\n\n```\nexport const TaskManager = {\n    init: function (csrfToken) {\n        this.csrfToken = csrfToken;\n        this.initTaskParentMap(); // Initialize the map\n        this.initDragAndDrop(); // Initialize drag-and-drop functionality\n    },\n\n    // Initialize a global map for task relationships\n    taskParentMap: new Map(),\n\n    // Build the taskParentMap from the DOM\n    initTaskParentMap: function () {\n        console.log("Initializing Task Parent Map...");\n        const rows = document.querySelectorAll("tr[data-task-id]");\n\n        rows.forEach((row) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = parseInt(row.dataset.parentId, 10) || null;\n            this.taskParentMap.set(taskId, parentId);\n        });\n\n        console.log("Task Parent Map initialized:", Array.from(this.taskParentMap.entries()));\n    },\n\n    // Update the map dynamically after drag-and-drop\n    updateTaskParentMap: function (taskId, parentId) {\n        console.log(`Updating Task Parent Map: Task ${taskId} -> Parent ${parentId}`);\n        this.taskParentMap.set(taskId, parentId);\n    },\n\n    initDragAndDrop: function () {\n        if (window.isDragAndDropInitialized) {\n            console.log("Drag-and-drop is already initialized.");\n            return;\n        }\n\n        console.log("Initializing drag-and-drop within TaskManager...");\n\n        const tableBody = document.querySelector("tbody");\n        if (!tableBody) {\n            console.warn("Task table body not found for drag-and-drop initialization");\n            return;\n        }\n\n        // Initialize Sortable.js for drag-and-drop functionality\n        Sortable.create(tableBody, {\n            handle: ".task-row", // Only draggable via `.task-row` elements\n            animation: 150, // Smooth animation\n            filter: ".task-open-link", // Prevent dragging on task links\n            preventOnFilter: true, // Prevent drag if filtered element is clicked\n            onEnd: async (event) => {\n                try {\n                    console.log("Drag-and-drop operation started...");\n                    const rows = Array.from(event.from.querySelectorAll(".task-row"));\n                    const reorderedTasks = [];\n\n                    rows.forEach((row, index) => {\n                        const taskId = parseInt(row.dataset.taskId, 10);\n                        let parentId = null;\n\n                        // Get the parent ID from the map or fallback to the dataset\n                        if (row.classList.contains("subtask-row")) {\n                            const parentRow = row.previousElementSibling;\n                            parentId = parentRow\n                                ? parseInt(parentRow.dataset.taskId, 10)\n                                : this.taskParentMap.get(taskId) || null;\n                        }\n\n                        // Update the taskParentMap dynamically\n                        this.updateTaskParentMap(taskId, parentId);\n\n                        reorderedTasks.push({\n                            id: taskId,\n                            sort_order: index + 1,\n                            parent_id: parentId,\n                        });\n                    });\n\n                    console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n                    console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n                    // Send the payload to the backend\n                    const response = await fetch("/tasks/reorder_subtasks", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                            "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n                        },\n                        body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n                    });\n\n                    if (!response.ok) {\n                        const errorData = await response.json();\n                        console.error("Error reordering tasks:", errorData);\n                        alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n                        return;\n                    }\n\n                    const data = await response.json();\n                    console.log("Task reordering successful:", data);\n\n                } catch (error) {\n                    console.error("Error during drag-and-drop operation:", error);\n                    alert("An unexpected error occurred while reordering tasks.");\n                }\n            },\n        });\n\n        window.isDragAndDropInitialized = true;\n        console.log("Drag-and-drop initialized successfully.");\n    },\n};\n```\n\nKey Updates:\n\t1.\tPrecomputed Map (taskParentMap):\n\t‚Ä¢\tThe initTaskParentMap function initializes the map by iterating over DOM elements and mapping each task‚Äôs ID to its parent ID.\n\t‚Ä¢\tThe updateTaskParentMap dynamically updates the map when tasks are reordered.\n\t2.\tEfficient Parent Lookup:\n\t‚Ä¢\tThe parentId is derived from the precomputed map rather than DOM traversal.\n\t3.\tBackend Payload:\n\t‚Ä¢\tA structured payload (reorderedTasks) is sent to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t‚Ä¢\tCSRF protection is ensured by passing the token to the request headers.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:44:08.338301', 'updated_at': '2025-02-06T21:59:17.417466'}, {'id': 134, 'name': 'Step 2: Update the Backend in routes.py', 'description': 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\nPlan for step 2:\n\t1.\tVerify the payload structure:\n\t‚Ä¢\tEnsure that the payload includes all necessary fields (id, sort_order, parent_id) for each task.\n\t‚Ä¢\tValidate that the parent-child relationships in the precomputed map (taskParentMap) are reflected correctly in the payload.\n\t2.\tSubmit the payload to the backend:\n\t‚Ä¢\tEnhance the fetch request in the onEnd function of initDragAndDrop to log detailed submission data.\n\t‚Ä¢\tConfirm the payload integrity in the browser console before submission.\n\t3.\tUpdate backend logging:\n\t‚Ä¢\tAdd logging to /reorder_subtasks in routes.py to confirm receipt of the correct payload and process parent-child updates.\n\t‚Ä¢\tLog before and after database updates for better debugging.\n\n-----\nUpdated tasks_table_interactions.js\n\nReplace this section:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    let parentId = null;\n```\nWith:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    const parentId = this.taskParentMap.get(taskId) || null;\n```\nThe this.taskParentMap provides a precomputed and dynamic mapping of taskId to parentId. By using this map, we avoid relying on DOM traversal logic (row.closest or row.previousElementSibling) during drag-and-drop operations, which can sometimes be unreliable or cumbersome.\n\nFull Revised onEnd section:\n```\nonEnd: async (event) => {\n    try {\n        console.log("Drag-and-drop operation started...");\n        const rows = Array.from(event.from.querySelectorAll(".task-row"));\n        const reorderedTasks = [];\n\n        rows.forEach((row, index) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = this.taskParentMap.get(taskId) || null;\n\n            // Update the taskParentMap dynamically\n            this.updateTaskParentMap(taskId, parentId);\n\n            reorderedTasks.push({\n                id: taskId,\n                sort_order: index + 1,\n                parent_id: parentId,\n            });\n        });\n\n        console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n        console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n        // Send the payload to the backend\n        const response = await fetch("/tasks/reorder_subtasks", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n            },\n            body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error("Error reordering tasks:", errorData);\n            alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n            return;\n        }\n\n        const data = await response.json();\n        console.log("Task reordering successful:", data);\n\n    } catch (error) {\n        console.error("Error during drag-and-drop operation:", error);\n        alert("An unexpected error occurred while reordering tasks.");\n    }\n}\n```\n---------------------------------\nEnsure updates include:\n\t‚Ä¢\tBetter Logging: Adding logs for key events such as database changes and validation results.\n\t‚Ä¢\tInput Validation: Ensure all required fields (id, sort_order, parent_id) exist in the payload.\n\t‚Ä¢\tPost-Commit Validation: Confirm database updates after the commit.\n\t‚Ä¢\tImproved Error Handling: Include specific error messages and consistent rollback mechanisms.\n\nBelow is the revised reorder_subtasks route with descriptive comments for each section:\n```\n@bp.route("/reorder_subtasks", methods=["POST"])\ndef reorder_subtasks():\n    """\n    Reorder subtasks globally or reassign them to a different parent.\n\n    Steps:\n    - Parse and validate input from the frontend.\n    - Update parent-child relationships and sort order in the database.\n    - Commit changes and return a success response.\n    - Handle errors gracefully and provide detailed logs for debugging.\n    """\n    logger.info("Entering reorder_subtasks route...")\n    logger.info(f"Received payload for reordering tasks: {request.json}")\n\n    try:\n        # Step 1: Parse input\n        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered\n        ordered_tasks = request.json.get("ordered_tasks", [])\n\n        logger.debug(f"Parsed parent_id: {parent_id}")\n        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")\n\n        # Step 2: Validate input\n        if not isinstance(ordered_tasks, list) or not all(\n            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task\n            for task in ordered_tasks\n        ):\n            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")\n            return jsonify({\n                "error": "Invalid input format for \'ordered_tasks\'. Each task must include \'id\', \'sort_order\', and \'parent_id\'."\n            }), 400\n\n        # Step 3: Validate parent task (if applicable)\n        if parent_id is not None:\n            parent_task = Task.query.get(parent_id)\n            if not parent_task:\n                logger.error(f"Parent task with ID {parent_id} not found.")\n                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400\n\n        logger.info("Input validation passed. Proceeding with task updates...")\n\n        # Step 4: Process updates for each subtask\n        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation\n\n        for task_data in ordered_tasks:\n            subtask_id = task_data["id"]\n            sort_order = task_data["sort_order"]\n            new_parent_id = task_data["parent_id"]\n\n            # Fetch the subtask from the database\n            subtask = Task.query.get(subtask_id)\n            if not subtask:\n                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")\n                continue\n\n            # Log and update parent_id if it changes\n            if new_parent_id is not None and new_parent_id != subtask.parent_id:\n                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")\n                subtask.parent_id = new_parent_id\n\n            # Update sort order\n            subtask.sort_order = sort_order\n            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")\n\n            # Add to the list of updated subtasks for validation\n            updated_subtasks.append(subtask)\n\n        # Step 5: Commit changes to the database\n        try:\n            db.session.commit()\n            logger.info(f"Subtasks reordered successfully: {[task[\'id\'] for task in ordered_tasks]}")\n        except Exception as e:\n            logger.error(f"Error committing changes to the database: {str(e)}")\n            db.session.rollback()\n            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500\n\n        # Step 6: Post-commit validation\n        for subtask in updated_subtasks:\n            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")\n            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")\n\n        # Step 7: Return success response\n        return jsonify({\n            "success": True,\n            "message": "Subtasks reordered successfully.",\n            "updated_subtasks": [subtask.id for subtask in updated_subtasks]\n        }), 200\n\n    except Exception as e:\n        # Step 8: Handle unexpected errors\n        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)\n        db.session.rollback()\n        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500\n```\nKey Changes and Descriptive Comments\n\t1.\tInput Parsing:\n\t‚Ä¢\tExtracts parent_id and ordered_tasks from the request payload.\n\t‚Ä¢\tLogs the parsed values for debugging.\n\t2.\tInput Validation:\n\t‚Ä¢\tEnsures ordered_tasks is a list of dictionaries with the required keys.\n\t‚Ä¢\tValidates parent_id if provided, ensuring the parent task exists in the database.\n\t3.\tUpdate Processing:\n\t‚Ä¢\tIterates through ordered_tasks, updating each task‚Äôs parent_id and sort_order.\n\t‚Ä¢\tLogs changes for each task.\n\t4.\tDatabase Commit:\n\t‚Ä¢\tCommits all updates in a single transaction.\n\t‚Ä¢\tLogs success or rolls back changes in case of an error.\n\t5.\tPost-Commit Validation:\n\t‚Ä¢\tVerifies that the parent_id and sort_order changes were successfully saved to the database.\n\t6.\tError Handling:\n\t‚Ä¢\tCaptures and logs exceptions during processing or committing.\n\t‚Ä¢\tProvides meaningful error messages to the frontend.\n\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:46:29.348853', 'updated_at': '2025-02-06T21:59:21.617065'}, {'id': 131, 'name': 'Step 5: Update utils.py', 'description': 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nChanges to Make:\n\t1.\tEnhance Task Filtering:\n\t‚Ä¢\tEnsure the filters handle parent-child relationships explicitly.\n\t‚Ä¢\tAdd options to include or exclude subtasks in queries.\n\t2.\tUtility Function for Debugging Parent-Child Relationships:\n\t‚Ä¢\tProvide a function to generate a map or list of parent-child relationships for debugging purposes.\n\t3.\tValidation Functions:\n\t‚Ä¢\tAdd a utility function to validate parent-child relationships and ensure no circular dependencies.\n\nUpdated utils.py Code:\n```\nimport logging\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import joinedload\nfrom app.extensions.db import db\nfrom app.tasks.models import Task\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\n\nclass TaskService:\n    @staticmethod\n    def filter_tasks(filters=None, include_subtasks=True, page=None, per_page=None):\n        """\n        Dynamically filters tasks with an option to include or exclude subtasks.\n\n        Args:\n            filters (dict): Filtering criteria.\n            include_subtasks (bool): Whether to include subtasks in the query.\n            page (int, optional): Page number for pagination.\n            per_page (int, optional): Items per page for pagination.\n\n        Returns:\n            Query or Pagination: A SQLAlchemy query object or paginated results.\n        """\n        query = Task.query.options(\n            db.joinedload(Task.project).joinedload(Project.contributors),\n            db.joinedload(Task.contributor),\n            db.joinedload(Task.children),\n        ).order_by(Task.sort_order)\n\n        if filters:\n            logger.debug(f"Applying filters: {filters}")\n\n            # Apply standard filters\n            if "is_archived" in filters:\n                query = query.filter(Task.is_archived == filters["is_archived"])\n            if "project_id" in filters:\n                query = query.filter(Task.project_id == filters["project_id"])\n            if "task_type" in filters:\n                if isinstance(filters["task_type"], list):\n                    query = query.filter(Task.task_type.in_(filters["task_type"]))\n                else:\n                    query = query.filter(Task.task_type == filters["task_type"])\n            if "completion_status" in filters:\n                completion_map = {"completed": True, "in_progress": False}\n                if filters["completion_status"] in completion_map:\n                    query = query.filter(Task.completed == completion_map[filters["completion_status"]])\n\n            # Optionally exclude subtasks\n            if not include_subtasks:\n                query = query.filter(Task.task_type != "Subtask")\n\n        logger.debug(f"Generated query: {query}")\n\n        # Pagination\n        if page and per_page:\n            return query.paginate(page=page, per_page=per_page, error_out=False)\n        return query\n\n    @staticmethod\n    def debug_parent_child_relationships(project_id=None):\n        """\n        Generates a debug map of parent-child relationships for all tasks.\n\n        Args:\n            project_id (int, optional): Restrict to tasks from a specific project.\n\n        Returns:\n            dict: A dictionary mapping parent IDs to their child task IDs.\n        """\n        query = Task.query\n        if project_id:\n            query = query.filter(Task.project_id == project_id)\n\n        tasks = query.options(\n            db.load_only(Task.id, Task.parent_id)\n        ).all()\n\n        relationship_map = {}\n        for task in tasks:\n            if task.parent_id not in relationship_map:\n                relationship_map[task.parent_id] = []\n            relationship_map[task.parent_id].append(task.id)\n\n        logger.debug(f"Parent-Child Relationship Map: {relationship_map}")\n        return relationship_map\n\n    @staticmethod\n    def validate_parent_child_relationships():\n        """\n        Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.\n\n        Raises:\n            ValueError: If invalid relationships are detected.\n        """\n        tasks = Task.query.options(db.joinedload(Task.parent)).all()\n\n        for task in tasks:\n            if task.parent_id:\n                parent_task = task.parent\n                if not parent_task:\n                    raise ValueError(f"Task {task.id} has an invalid parent ID {task.parent_id}.")\n\n                # Validate hierarchy rules\n                if task.task_type == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError(f"User Story {task.id} must have an Epic as its parent.")\n                if task.task_type == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError(f"Subtask {task.id} must have a User Story as its parent.")\n\n        logger.info("All parent-child relationships are valid.")\n\n    @staticmethod\n    def get_all_task_ids_with_parents():\n        """\n        Returns a flat list of tasks with their parent IDs for debugging.\n\n        Returns:\n            list: A list of tuples (task_id, parent_id).\n        """\n        tasks = Task.query.with_entities(Task.id, Task.parent_id).all()\n        logger.debug(f"Task IDs with Parent IDs: {tasks}")\n        return tasks\n```\n\n\nExplanation of Changes:\n\t1.\tfilter_tasks Enhancements:\n\t‚Ä¢\tAdded include_subtasks parameter to optionally exclude subtasks from the query.\n\t2.\tdebug_parent_child_relationships:\n\t‚Ä¢\tCreates a parent-child relationship map for debugging purposes.\n\t3.\tvalidate_parent_child_relationships:\n\t‚Ä¢\tIterates through all tasks to validate parent-child hierarchy and ensures no invalid relationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t‚Ä¢\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.091824', 'updated_at': '2025-01-16T19:22:36.236691'}, {'id': 135, 'name': 'Step 3: Update list.html', 'description': 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already includes everything needed. No required changes.\n\nHere¬¥s the relevant section of list.html:\n\n```\n<tr id="task-{{ task.id }}"\n                class="task-row {% if task.task_type == \'Subtask\' %}subtask-row{% elif task.task_type == \'User Story\' %}user-story-row{% elif task.task_type == \'Epic\' %}epic-row{% endif %}"\n                style="background-color: \n                {% if task.task_type == \'Subtask\' %}\n                    rgba(200, 230, 255, 0.5); /* Light blue for Subtask */\n                {% elif task.task_type == \'User Story\' %}\n                    rgba(255, 255, 200, 0.5); /* Light yellow for User Story */\n                {% elif task.task_type == \'Epic\' %}\n                    rgba(255, 200, 200, 0.5); /* Light red for Epic */\n                {% else %}\n                    rgba(240, 240, 240, 1); /* Default light gray */\n                {% endif %};"\n                data-task-id="{{ task.id }}"\n                data-parent-id="{{ task.parent_id or \'\' }}"\n                data-level="{{ depth }}">\n                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>\n                <td>\n                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}\n                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}" aria-label="Toggle details for task {{ task.name }}">\n                        <i class="bi bi-chevron-right"></i>\n                    </button>\n                    {% endif %}\n                </td>\n                <td class="fw-medium fs-6 \n                {% if task.task_type == \'Epic\' %}\n                    epic-cell\n                {% elif task.task_type == \'User Story\' %}\n                    user-story-cell\n                {% elif task.task_type == \'Subtask\' %}\n                    subtask-cell\n                {% endif %}" \n                style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">\n                <span class="bi fs-6\n                {% if task.task_type == \'Epic\' %}\n                    bi-circle-fill\n                {% elif task.task_type == \'User Story\' %}\n                    bi-circle-half\n                {% elif task.task_type == \'Subtask\' %}\n                    bi-circle\n                {% endif %}">\n                </span>\n                {{ task.name }}\n                <small class="text-muted fw-light">\n                    (Parent-ID: {{ task.parent_id or \'None\' }})\n                </small>\n                <!-- Open Link -->\n                <a href="#" class="task-open-link" data-task-id="{{ task.id }}">\n                    <i class="bi bi-arrows-angle-expand" style="font-size: 0.8rem; color: white;"></i>\n                    Open\n                </a>\n            </td>\n                <td class="fw-light fs-6">\n                    <small class>\n                    LAC-{{ task.id }}\n                    </small>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light text-bg-secondary">\n                        {{ task.project if task.project else "Unknown Project" }}\n                    </span>\n                </td>\n                <td class="fs-6" data-contributor-column>{{ task.assigned_to if task.assigned_to else "Unassigned" }}</td>\n                <td class="fs-6">{{ task.story_points }}</td>\n                <td class="fs-6">\n                    <span class="badge rounded-pill fw-light text-bg-light">\n                        {{ task.task_type }}\n                    </span>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light {% if task.completed %}text-bg-success{% else %}text-bg-warning{% endif %}">\n                        {{ "Completed" if task.completed else "In Progress" }}\n                    </span>\n                </td>\n                <td>\n                    <!-- Delete Icon -->\n                    <button class="btn btn-dark btn-sm delete-task-btn" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .2rem; --bs-btn-font-size: .75rem;" data-task-id="{{ task.id }}" aria-label="Deletes task {{ task.id }}">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n            </tr>\n            {% for child in tasks if child.parent_id == task.id %}\n                {{ render_task(child, tasks, depth + 1) }}\n            {% endfor %}\n            {% endmacro %}\n            \n            <!-- Render top-level tasks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:46:29.349784', 'updated_at': '2025-01-16T19:22:36.238473'}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'description': 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitHub Login involves integrating OAuth 2.0, which both services support. The complexity depends on your app‚Äôs existing setup, frameworks, and experience with third-party authentication. Below is a breakdown:\n\nKey Steps for Implementing Google or GitHub Login\n\t1.\tSet Up OAuth Credentials:\n\t‚Ä¢\tRegister your application in the Google Cloud Console or GitHub Developer Settings.\n\t‚Ä¢\tObtain the client ID and client secret.\n\t2.\tInstall Required Libraries:\n\t‚Ä¢\tUse a library for OAuth (e.g., flask-oauthlib, python-social-auth, or authlib).\n\t‚Ä¢\tPopular frameworks like Flask and Django already have robust integrations for OAuth providers.\n\t3.\tBackend Configuration:\n\t‚Ä¢\tImplement an endpoint to handle the OAuth flow (/auth/login/google or /auth/login/github).\n\t‚Ä¢\tConfigure your app to send users to Google or GitHub‚Äôs authentication page.\n\t‚Ä¢\tHandle the OAuth callback to exchange the authorization code for an access token.\n\t‚Ä¢\tVerify the token and fetch user information (e.g., email, name).\n\t4.\tLink OAuth to User Registration:\n\t‚Ä¢\tOn successful login, create or retrieve a user in your database.\n\t‚Ä¢\tStore the user‚Äôs details like email, OAuth provider ID, and access token.\n\t5.\tFrontend Integration (if applicable):\n\t‚Ä¢\tAdd ‚ÄúLogin with Google‚Äù or ‚ÄúLogin with GitHub‚Äù buttons.\n\t‚Ä¢\tRedirect to your backend‚Äôs OAuth endpoint when clicked.', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T12:15:54.291625', 'updated_at': '2025-01-16T19:22:36.239866'}, {'id': 62, 'name': 'Add OAuth integration for Google Login', 'description': 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.241200'}, {'id': 64, 'name': 'Setup project credentials for Google API', 'description': 'Generate client ID and secret from Google API Console for your application.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-01-16T19:22:36.242497'}, {'id': 67, 'name': 'Test Google OAuth flow', 'description': 'Verify the OAuth flow using test accounts and check the token exchange.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.243780'}, {'id': 65, 'name': 'Implement backend endpoints for Google OAuth', 'description': 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-01-16T19:22:36.244932'}, {'id': 63, 'name': 'Add OAuth integration for GitHub Login', 'description': 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.246358'}, {'id': 68, 'name': 'Register application in GitHub Developer Console', 'description': 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.247746'}, {'id': 69, 'name': 'Handle callback from GitHub', 'description': 'Implement the callback endpoint to process the authorization code from GitHub.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.248912'}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'description': 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 18, 'status': 'Not Started', 'created_at': '2025-01-07T19:53:50.085064', 'updated_at': '2025-01-16T19:22:36.250169'}, {'id': 100, 'name': '1.1 User Registration', 'description': 'As a user, I want to register with a username, email, and password so that I can create an account and access the system.\n\n**Acceptance Criteria:**\n\n‚Ä¢\tUser can input valid username, email, and password.\n‚Ä¢\tUsername and email must be unique.\n‚Ä¢\tErrors are displayed for invalid inputs or duplicate accounts.\n‚Ä¢\tPasswords must meet complexity requirements and be securely stored.\n‚Ä¢\tSuccessful registration redirects users to a login page.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:59:09.044667', 'updated_at': '2025-01-16T19:22:36.251812'}, {'id': 107, 'name': '1.1.1 Database Changes for User Registration', 'description': '1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.\n   CREATE TABLE public.users (\n       id SERIAL PRIMARY KEY,\n       username VARCHAR(50) UNIQUE NOT NULL,\n       email VARCHAR(100) UNIQUE NOT NULL,\n       password_hash VARCHAR(255) NOT NULL,\n       created_at TIMESTAMP DEFAULT NOW(),\n       updated_at TIMESTAMP DEFAULT NOW()\n);\n\n\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-11T11:36:20.238219'}, {'id': 108, 'name': '1.1.2 Backend API for Registration', 'description': '‚Ä¢\tCreate an endpoint POST /api/register:\n‚Ä¢\tValidate input fields.\n‚Ä¢\tHash the password using bcrypt or argon2.\n‚Ä¢\tInsert the user into the users table.\n‚Ä¢\tReturn success/failure responses.\ndddhfff\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:33.067643'}, {'id': 112, 'name': '1.2.2 Frontend Login Page', 'description': 'Develop a frontend form for user login with email and password inputs.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.683644'}, {'id': 109, 'name': '1.1.3 Create Frontend Registration Page', 'description': 'Develop a frontend form to collect user registration details.\n‚Ä¢\tAdd a form for username, email, and password inputs.\n‚Ä¢\tUse client-side validation (e.g., email format).\n‚Ä¢\tSend a POST request to /api/register.\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.684988'}, {'id': 110, 'name': '1.1.4 Unit Tests for Registration', 'description': 'Write unit tests for:\n\n‚Ä¢\tValid registration.\n‚Ä¢\tDuplicate username/email scenarios.\n‚Ä¢\tInvalid input handling.\nff', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.686902'}, {'id': 101, 'name': '1.2 User Login', 'description': 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n‚Ä¢\tUsers can log in with a valid email and password.\n‚Ä¢\tErrors are displayed for invalid credentials.\n‚Ä¢\tSuccessful login stores a session or JWT token.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:25:53.687936'}, {'id': 111, 'name': '1.2.1 Backend API for Login', 'description': 'Create POST /api/login endpoint to handle user login.\njjsjj', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.689096'}, {'id': 113, 'name': '1.2.3 Session Management', 'description': 'Implement secure session handling using cookies or JWT.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:20.968680'}, {'id': 114, 'name': '1.2.4 Unit Tests for Login', 'description': 'Write tests for successful and failed login attempts.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:22:36.265866'}, {'id': 106, 'name': 'Password Reset', 'description': 'As a user, I want to reset my password securely using email.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.267247'}, {'id': 128, 'name': 'Frontend Password Reset Page', 'description': 'Develop a page for users to enter a new password using a valid token.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.269158'}, {'id': 129, 'name': 'Testing Password Reset', 'description': 'Write tests for email delivery, token validation, and password updates.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.270849'}, {'id': 102, 'name': 'Logout', 'description': 'As a user, I want to log out so that I can end my session securely.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.272605'}, {'id': 117, 'name': 'Tests for Logout', 'description': 'Verify session invalidation and redirection to the login page.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.274575'}, {'id': 116, 'name': 'Frontend Logout Button', 'description': 'Add a logout button to the UI and handle session clearing.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-09T12:31:17.939784'}, {'id': 115, 'name': 'Backend API for Logout', 'description': 'Create POST /api/logout endpoint to invalidate user sessions.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.277547'}, {'id': 61, 'name': 'Parent task assignment', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-04T22:31:45.205815', 'updated_at': '2025-01-16T19:22:36.279012'}, {'id': 45, 'name': 'Display Default Value in Dropdown', 'description': 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.280493'}, {'id': 50, 'name': 'Retrieve Current Parent Task', 'description': 'Retrieve the current parent task‚Äôs ID and name from the backend.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'In Progress', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:22.274304'}, {'id': 51, 'name': 'Set Default Value', 'description': 'Set the default value in the dropdown based on the retrieved data.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 45, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 1, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.283309'}, {'id': 46, 'name': 'Search for Parent Tasks', 'description': 'Allow users to search for tasks dynamically in the dropdown by typing.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.284882'}, {'id': 54, 'name': 'Test Partial Matching', 'description': 'Ensure the search results update in real-time as the user types.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:29.251047'}, {'id': 47, 'name': 'Handle Large Datasets Efficiently', 'description': 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:26:23.067490'}, {'id': 56, 'name': 'Paginate API Responses', 'description': 'Implement server-side filtering and pagination for large datasets.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:16.233517'}, {'id': 55, 'name': 'Enable Lazy Loading', 'description': 'Enable lazy loading or virtualization in Virtual Select.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:08.099271'}, {'id': 48, 'name': 'Select and Deselect Parent Tasks', 'description': 'Allow users to select a parent task or deselect by choosing "None."', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:25:59.651639'}, {'id': 57, 'name': 'Ensure None Option Availability', 'description': 'Add ‚ÄúNone‚Äù as a selectable option and ensure it stays at the top of the list.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:51.310240'}, {'id': 58, 'name': 'Handle Selection Events', 'description': 'Implement event listeners to update the form‚Äôs state when the selection changes.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:43.569501'}, {'id': 49, 'name': 'Integrate Dropdown with Task Form', 'description': 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:25:36.133259'}, {'id': 59, 'name': 'Bind Dropdown to Form Field', 'description': 'Bind the dropdown to the form‚Äôs parent task field.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:15.491910'}, {'id': 60, 'name': 'Test Form Submission', 'description': 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:28.367797'}, {'id': 41, 'name': 'Implement Searchable Dropdown', 'description': 'As a user, I want a searchable dropdown for parent task assignment.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Completed', 'created_at': '2025-01-03T09:14:28.285904', 'updated_at': '2025-02-11T08:25:07.992524'}, {'id': 52, 'name': 'Add Search Box to Dropdown', 'description': 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:01.469601'}, {'id': 53, 'name': 'Implement AJAX Search', 'description': 'Implement AJAX-based search to fetch tasks dynamically from the backend.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:24:54.245010'}, {'id': 42, 'name': 'Choose Dropdown Library', 'description': 'Research and decide on the dropdown library to use.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-11T08:24:47.274896'}, {'id': 43, 'name': 'Integrate Dropdown Library', 'description': 'Integrate the chosen dropdown library into the project.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Completed', 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-11T08:24:33.908549'}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t‚Ä¢\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t‚Ä¢\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t‚Ä¢\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-02-11T08:24:26.494016'}, {'id': 85, 'name': 'Assign multiple contributors to a task', 'description': 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:32:39.466022', 'updated_at': '2025-02-11T08:24:21.069473'}, {'id': 90, 'name': 'Update frontend to display and manage multiple contributors', 'description': 'Allow users to view, add, or remove multiple contributors via the UI.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-11T08:24:13.204884'}, {'id': 88, 'name': 'Update database schema for multiple contributors', 'description': 'Modify the task table to support many-to-many relationships for contributors.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-11T08:24:05.873554'}, {'id': 89, 'name': 'Develop backend API for adding contributors to a task', 'description': 'Create endpoints to add, update, and remove contributors for a task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-11T08:23:58.436495'}, {'id': 86, 'name': 'Allow designation of task owner', 'description': 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:29.330562', 'updated_at': '2025-02-11T08:23:51.269557'}, {'id': 93, 'name': 'Update frontend to manage task ownership', 'description': 'Allow users to assign or update the task owner via the UI.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-11T08:23:42.771565'}, {'id': 91, 'name': 'Update database schema for task ownership', 'description': 'Add a column or relationship to assign a single owner per task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-11T08:23:33.670381'}, {'id': 92, 'name': 'Develop backend API for assigning task owner', 'description': 'Create endpoints to assign or update the owner of a task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-11T09:19:44.027744'}, {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-02-11T08:23:23.402442'}, {'id': 96, 'name': 'Allow admin users to create and customize contributor roles via frontend', 'description': 'Provide UI functionality for admins to manage contributor roles dynamically.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T08:23:13.139282'}, {'id': 94, 'name': 'Add database support for contributor roles', 'description': 'Introduce a roles table and link contributors to specific roles for tasks.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T08:22:56.181530'}, {'id': 95, 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T08:22:02.276492'}, {'id': 127, 'name': 'Backend API for Password Reset', 'description': 'Create endpoints to handle password reset requests and token validation.\ndfdf\n\nasdasd', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-10T23:59:50.734037'}, {'id': 126, 'name': 'Email Configuration for Password Reset', 'description': 'Configure email service to send password reset links.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.334340'}, {'id': 104, 'name': 'Middleware for Role Enforcement', 'description': 'As a system, I want to enforce role-based access to specific routes.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:23:40.346816'}, {'id': 122, 'name': 'Testing Role Enforcement', 'description': 'Write tests to ensure proper access control based on roles.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-01-16T19:23:58.185693'}, {'id': 121, 'name': 'Develop Role Enforcement Middleware', 'description': 'Implement middleware to check user roles for access control.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-01-16T19:23:58.187439'}, {'id': 105, 'name': 'Profile Management', 'description': 'As a user, I want to update my profile (username, email, password).', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.339830'}, {'id': 123, 'name': 'Backend API for Profile Management', 'description': 'Create PATCH /api/profile endpoint to update user details.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-01-16T19:24:19.678781'}, {'id': 125, 'name': 'Testing Profile Updates', 'description': 'Write tests for profile update functionality.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-01-16T19:24:19.680382'}]
2025-02-13 15:59:19,783 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-13 15:59:19,783 INFO: [cached since 1.391e+04s ago] {'param_1': 2}
2025-02-13 15:59:19,784 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-13 15:59:19,784 INFO: [cached since 1.391e+04s ago] {'param_1': 3}
2025-02-13 15:59:19,784 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-13 15:59:19,784 INFO: [cached since 1.391e+04s ago] {'param_1': 4}
2025-02-13 15:59:19,785 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-13 15:59:19,785 INFO: [cached since 1.391e+04s ago] {'param_1': 5}
2025-02-13 15:59:19,787 INFO: ROLLBACK
2025-02-13 15:59:19,788 INFO: 127.0.0.1 - - [13/Feb/2025 15:59:19] "GET /tasks/ HTTP/1.1" 200 -
2025-02-13 15:59:19,809 INFO: 127.0.0.1 - - [13/Feb/2025 15:59:19] "[36mGET /static/custom.css HTTP/1.1[0m" 304 -
2025-02-13 15:59:19,811 INFO: 127.0.0.1 - - [13/Feb/2025 15:59:19] "[36mGET /static/js/filters.js HTTP/1.1[0m" 304 -
2025-02-13 15:59:19,818 INFO: 127.0.0.1 - - [13/Feb/2025 15:59:19] "[36mGET /static/js/modals.js HTTP/1.1[0m" 304 -
2025-02-13 15:59:19,819 INFO: 127.0.0.1 - - [13/Feb/2025 15:59:19] "[36mGET /static/js/tasks_table_interactions.js HTTP/1.1[0m" 304 -
2025-02-13 15:59:20,007 INFO: 127.0.0.1 - - [13/Feb/2025 15:59:20] "[36mGET /static/favicon.ico HTTP/1.1[0m" 304 -
2025-02-13 15:59:59,410 INFO: Entering list_tasks_json route...
2025-02-13 15:59:59,413 DEBUG: Filters used in API: {'is_archived': False}
2025-02-13 15:59:59,417 DEBUG: Applying filters: {'is_archived': False}
2025-02-13 15:59:59,443 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-13 15:59:59,444 INFO: BEGIN (implicit)
2025-02-13 15:59:59,445 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-13 15:59:59,445 INFO: [cached since 1.399e+04s ago] {'param_1': 110, 'param_2': 0}
2025-02-13 15:59:59,456 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-13 15:59:59,456 INFO: [cached since 1.399e+04s ago] {}
2025-02-13 15:59:59,458 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-13 15:59:59,458 INFO: [cached since 1.399e+04s ago] {}
2025-02-13 15:59:59,458 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-13 15:59:59,458 INFO: [cached since 1.399e+04s ago] {}
2025-02-13 15:59:59,461 INFO: ROLLBACK
2025-02-13 15:59:59,461 INFO: 127.0.0.1 - - [13/Feb/2025 15:59:59] "GET /api/tasks HTTP/1.1" 200 -
2025-02-13 16:00:12,576 INFO: Entering list_tasks_json route...
2025-02-13 16:00:12,577 DEBUG: Filters used in API: {'is_archived': False}
2025-02-13 16:00:12,582 DEBUG: Applying filters: {'is_archived': False}
2025-02-13 16:00:12,607 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-13 16:00:12,609 INFO: BEGIN (implicit)
2025-02-13 16:00:12,610 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-13 16:00:12,610 INFO: [cached since 1.4e+04s ago] {'param_1': 110, 'param_2': 0}
2025-02-13 16:00:12,644 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-13 16:00:12,644 INFO: [cached since 1.4e+04s ago] {}
2025-02-13 16:00:12,648 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-13 16:00:12,648 INFO: [cached since 1.4e+04s ago] {}
2025-02-13 16:00:12,650 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-13 16:00:12,650 INFO: [cached since 1.4e+04s ago] {}
2025-02-13 16:00:12,653 INFO: ROLLBACK
2025-02-13 16:00:12,654 INFO: 127.0.0.1 - - [13/Feb/2025 16:00:12] "GET /api/tasks HTTP/1.1" 200 -
2025-02-13 16:00:26,774 INFO: Entering list_tasks_json route...
2025-02-13 16:00:26,774 DEBUG: Filters used in API: {'is_archived': False}
2025-02-13 16:00:26,778 DEBUG: Applying filters: {'is_archived': False}
2025-02-13 16:00:26,796 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-13 16:00:26,797 INFO: BEGIN (implicit)
2025-02-13 16:00:26,797 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-13 16:00:26,797 INFO: [cached since 1.402e+04s ago] {'param_1': 110, 'param_2': 0}
2025-02-13 16:00:26,814 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-13 16:00:26,814 INFO: [cached since 1.402e+04s ago] {}
2025-02-13 16:00:26,815 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-13 16:00:26,816 INFO: [cached since 1.402e+04s ago] {}
2025-02-13 16:00:26,816 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-13 16:00:26,817 INFO: [cached since 1.402e+04s ago] {}
2025-02-13 16:00:26,820 INFO: ROLLBACK
2025-02-13 16:00:26,821 INFO: 127.0.0.1 - - [13/Feb/2025 16:00:26] "GET /api/tasks HTTP/1.1" 200 -
2025-02-13 16:01:56,757 INFO: Entering list_tasks_json route...
2025-02-13 16:01:56,758 DEBUG: Filters used in API: {'is_archived': False}
2025-02-13 16:01:56,761 DEBUG: Applying filters: {'is_archived': False}
2025-02-13 16:01:56,774 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-13 16:01:56,775 INFO: BEGIN (implicit)
2025-02-13 16:01:56,775 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-13 16:01:56,775 INFO: [cached since 1.411e+04s ago] {'param_1': 110, 'param_2': 0}
2025-02-13 16:01:56,786 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-13 16:01:56,786 INFO: [cached since 1.411e+04s ago] {}
2025-02-13 16:01:56,789 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-13 16:01:56,790 INFO: [cached since 1.411e+04s ago] {}
2025-02-13 16:01:56,790 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-13 16:01:56,790 INFO: [cached since 1.411e+04s ago] {}
2025-02-13 16:01:56,793 INFO: ROLLBACK
2025-02-13 16:01:56,796 INFO: 127.0.0.1 - - [13/Feb/2025 16:01:56] "GET /api/tasks HTTP/1.1" 200 -
2025-02-13 16:02:51,009 INFO: Entering list_tasks_json route...
2025-02-13 16:02:51,011 DEBUG: Filters used in API: {'is_archived': False}
2025-02-13 16:02:51,013 DEBUG: Applying filters: {'is_archived': False}
2025-02-13 16:02:51,030 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-13 16:02:51,031 INFO: BEGIN (implicit)
2025-02-13 16:02:51,032 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-13 16:02:51,032 INFO: [cached since 1.416e+04s ago] {'param_1': 110, 'param_2': 0}
2025-02-13 16:02:51,053 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-13 16:02:51,053 INFO: [cached since 1.416e+04s ago] {}
2025-02-13 16:02:51,055 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-13 16:02:51,055 INFO: [cached since 1.416e+04s ago] {}
2025-02-13 16:02:51,057 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-13 16:02:51,057 INFO: [cached since 1.416e+04s ago] {}
2025-02-13 16:02:51,063 INFO: ROLLBACK
2025-02-13 16:02:51,064 INFO: 127.0.0.1 - - [13/Feb/2025 16:02:51] "GET /api/tasks HTTP/1.1" 200 -
2025-02-13 16:07:51,500 INFO: Entering list_tasks_json route...
2025-02-13 16:07:51,502 DEBUG: Filters used in API: {'is_archived': False}
2025-02-13 16:07:51,507 DEBUG: Applying filters: {'is_archived': False}
2025-02-13 16:07:51,527 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-13 16:07:51,530 INFO: BEGIN (implicit)
2025-02-13 16:07:51,531 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-13 16:07:51,533 INFO: [cached since 1.446e+04s ago] {'param_1': 110, 'param_2': 0}
2025-02-13 16:07:51,546 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-13 16:07:51,546 INFO: [cached since 1.446e+04s ago] {}
2025-02-13 16:07:51,549 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-13 16:07:51,549 INFO: [cached since 1.446e+04s ago] {}
2025-02-13 16:07:51,552 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-13 16:07:51,553 INFO: [cached since 1.446e+04s ago] {}
2025-02-13 16:07:51,561 INFO: ROLLBACK
2025-02-13 16:07:51,563 INFO: 127.0.0.1 - - [13/Feb/2025 16:07:51] "GET /api/tasks HTTP/1.1" 200 -
2025-02-13 16:25:06,761 INFO: Entering list_tasks_json route...
2025-02-13 16:25:06,764 DEBUG: Filters used in API: {'is_archived': False}
2025-02-13 16:25:06,773 DEBUG: Applying filters: {'is_archived': False}
2025-02-13 16:25:06,790 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-13 16:25:06,791 INFO: BEGIN (implicit)
2025-02-13 16:25:06,793 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-13 16:25:06,794 INFO: [cached since 1.55e+04s ago] {'param_1': 110, 'param_2': 0}
2025-02-13 16:25:06,919 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-13 16:25:06,919 INFO: [cached since 1.55e+04s ago] {}
2025-02-13 16:25:06,922 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-13 16:25:06,922 INFO: [cached since 1.55e+04s ago] {}
2025-02-13 16:25:06,923 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-13 16:25:06,923 INFO: [cached since 1.55e+04s ago] {}
2025-02-13 16:25:06,929 INFO: ROLLBACK
2025-02-13 16:25:06,930 INFO: 127.0.0.1 - - [13/Feb/2025 16:25:06] "GET /api/tasks HTTP/1.1" 200 -
2025-02-13 16:31:56,737 INFO: Entering list_tasks_json route...
2025-02-13 16:31:56,744 DEBUG: Filters used in API: {'is_archived': False}
2025-02-13 16:31:56,748 DEBUG: Applying filters: {'is_archived': False}
2025-02-13 16:31:56,767 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-13 16:31:56,769 INFO: BEGIN (implicit)
2025-02-13 16:31:56,771 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-13 16:31:56,772 INFO: [cached since 1.591e+04s ago] {'param_1': 110, 'param_2': 0}
2025-02-13 16:31:56,789 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-13 16:31:56,789 INFO: [cached since 1.591e+04s ago] {}
2025-02-13 16:31:56,792 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-13 16:31:56,792 INFO: [cached since 1.591e+04s ago] {}
2025-02-13 16:31:56,793 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-13 16:31:56,793 INFO: [cached since 1.591e+04s ago] {}
2025-02-13 16:31:56,796 INFO: ROLLBACK
2025-02-13 16:31:56,797 INFO: 127.0.0.1 - - [13/Feb/2025 16:31:56] "GET /api/tasks HTTP/1.1" 200 -
2025-02-13 18:29:34,080 INFO: Entering list_tasks_json route...
2025-02-13 18:29:34,082 DEBUG: Filters used in API: {'is_archived': False}
2025-02-13 18:29:34,106 DEBUG: Applying filters: {'is_archived': False}
2025-02-13 18:29:34,179 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-13 18:29:34,183 INFO: BEGIN (implicit)
2025-02-13 18:29:34,184 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-13 18:29:34,191 INFO: [cached since 2.172e+04s ago] {'param_1': 110, 'param_2': 0}
2025-02-13 18:29:34,242 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-13 18:29:34,242 INFO: [cached since 2.172e+04s ago] {}
2025-02-13 18:29:34,244 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-13 18:29:34,245 INFO: [cached since 2.172e+04s ago] {}
2025-02-13 18:29:34,246 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-13 18:29:34,246 INFO: [cached since 2.172e+04s ago] {}
2025-02-13 18:29:34,252 INFO: ROLLBACK
2025-02-13 18:29:34,254 INFO: 127.0.0.1 - - [13/Feb/2025 18:29:34] "GET /api/tasks HTTP/1.1" 200 -
2025-02-13 18:30:11,984 INFO: Entering list_tasks_json route...
2025-02-13 18:30:11,985 DEBUG: Filters used in API: {'is_archived': False}
2025-02-13 18:30:11,987 DEBUG: Applying filters: {'is_archived': False}
2025-02-13 18:30:12,012 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-13 18:30:12,020 INFO: BEGIN (implicit)
2025-02-13 18:30:12,027 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-13 18:30:12,028 INFO: [cached since 2.176e+04s ago] {'param_1': 110, 'param_2': 0}
2025-02-13 18:30:12,064 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-13 18:30:12,066 INFO: [cached since 2.176e+04s ago] {}
2025-02-13 18:30:12,099 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-13 18:30:12,100 INFO: [cached since 2.176e+04s ago] {}
2025-02-13 18:30:12,108 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-13 18:30:12,108 INFO: [cached since 2.176e+04s ago] {}
2025-02-13 18:30:12,127 INFO: ROLLBACK
2025-02-13 18:30:12,129 INFO: 127.0.0.1 - - [13/Feb/2025 18:30:12] "GET /api/tasks HTTP/1.1" 200 -
2025-02-13 18:31:57,596 INFO: Entering list_tasks_json route...
2025-02-13 18:31:57,598 DEBUG: Filters used in API: {'is_archived': False}
2025-02-13 18:31:57,603 DEBUG: Applying filters: {'is_archived': False}
2025-02-13 18:31:57,616 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-13 18:31:57,619 INFO: BEGIN (implicit)
2025-02-13 18:31:57,620 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-13 18:31:57,621 INFO: [cached since 2.186e+04s ago] {'param_1': 110, 'param_2': 0}
2025-02-13 18:31:57,632 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-13 18:31:57,633 INFO: [cached since 2.186e+04s ago] {}
2025-02-13 18:31:57,635 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-13 18:31:57,635 INFO: [cached since 2.186e+04s ago] {}
2025-02-13 18:31:57,636 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-13 18:31:57,636 INFO: [cached since 2.186e+04s ago] {}
2025-02-13 18:31:57,638 INFO: ROLLBACK
2025-02-13 18:31:57,638 INFO: 127.0.0.1 - - [13/Feb/2025 18:31:57] "GET /api/tasks HTTP/1.1" 200 -
2025-02-13 18:32:09,895 INFO: Entering list_tasks_json route...
2025-02-13 18:32:09,896 DEBUG: Filters used in API: {'is_archived': False}
2025-02-13 18:32:09,896 DEBUG: Applying filters: {'is_archived': False}
2025-02-13 18:32:09,902 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-13 18:32:09,903 INFO: BEGIN (implicit)
2025-02-13 18:32:09,905 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-13 18:32:09,906 INFO: [cached since 2.187e+04s ago] {'param_1': 110, 'param_2': 0}
2025-02-13 18:32:09,920 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-13 18:32:09,921 INFO: [cached since 2.187e+04s ago] {}
2025-02-13 18:32:09,922 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-13 18:32:09,922 INFO: [cached since 2.187e+04s ago] {}
2025-02-13 18:32:09,922 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-13 18:32:09,922 INFO: [cached since 2.187e+04s ago] {}
2025-02-13 18:32:09,924 INFO: ROLLBACK
2025-02-13 18:32:09,924 INFO: 127.0.0.1 - - [13/Feb/2025 18:32:09] "GET /api/tasks HTTP/1.1" 200 -
2025-02-13 18:43:04,212 INFO: Fetching task details for Task ID 275.
2025-02-13 18:43:04,213 INFO: Fetching task with ID 275.
2025-02-13 18:43:04,218 INFO: BEGIN (implicit)
2025-02-13 18:43:04,219 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-13 18:43:04,219 INFO: [cached since 8915s ago] {'pk_1': 275}
2025-02-13 18:43:04,235 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x10e4721b0>, 'completed_date': None, 'sort_order': 0, 'task_type': 'Epic', 'contributor_id': None, 'id': 275, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 2, 10, 0, 48, 52, 680022), 'status': 'Not Started', 'project_id': 7, 'updated_at': datetime.datetime(2025, 2, 10, 8, 38, 37, 622196), 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'parent_id': None, 'story_points': 0}
2025-02-13 18:43:04,238 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-13 18:43:04,238 INFO: [cached since 8915s ago] {'pk_1': 7}
2025-02-13 18:43:04,241 INFO: Task ID 275 fetched with parent ID: None
2025-02-13 18:43:04,241 INFO: Task with ID 275 fetched successfully.
2025-02-13 18:43:04,242 DEBUG: Fetched Task Data: {'id': 275, 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-10T08:38:37.622196', 'contributor_name': 'Unassigned', 'parent': None}
2025-02-13 18:43:04,242 INFO: Task details fetched successfully for Task ID 275.
2025-02-13 18:43:04,244 INFO: ROLLBACK
2025-02-13 18:43:04,245 INFO: 127.0.0.1 - - [13/Feb/2025 18:43:04] "GET /api/tasks/275 HTTP/1.1" 200 -
2025-02-13 20:43:48,537 INFO: Entering list_tasks_json route...
2025-02-13 20:43:48,539 DEBUG: Filters used in API: {'is_archived': False}
2025-02-13 20:43:48,545 DEBUG: Applying filters: {'is_archived': False}
2025-02-13 20:43:48,564 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-13 20:43:48,566 INFO: BEGIN (implicit)
2025-02-13 20:43:48,574 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-13 20:43:48,582 INFO: [cached since 2.52e+04s ago] {'param_1': 110, 'param_2': 0}
2025-02-13 20:43:48,614 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-13 20:43:48,614 INFO: [cached since 2.52e+04s ago] {}
2025-02-13 20:43:48,616 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-13 20:43:48,616 INFO: [cached since 2.52e+04s ago] {}
2025-02-13 20:43:48,617 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-13 20:43:48,617 INFO: [cached since 2.52e+04s ago] {}
2025-02-13 20:43:48,620 INFO: ROLLBACK
2025-02-13 20:43:48,625 INFO: 127.0.0.1 - - [13/Feb/2025 20:43:48] "GET /api/tasks HTTP/1.1" 200 -
2025-02-13 21:07:58,241 INFO: 127.0.0.1 - - [13/Feb/2025 21:07:58] "[36mGET /static/custom.css HTTP/1.1[0m" 304 -
2025-02-13 21:08:25,112 INFO: Fetching task details for Task ID 275.
2025-02-13 21:08:25,113 INFO: Fetching task with ID 275.
2025-02-13 21:08:25,118 INFO: BEGIN (implicit)
2025-02-13 21:08:25,130 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-13 21:08:25,131 INFO: [cached since 1.306e+04s ago] {'pk_1': 275}
2025-02-13 21:08:25,164 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x10e4857f0>, 'completed_date': None, 'sort_order': 0, 'task_type': 'Epic', 'contributor_id': None, 'id': 275, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 2, 10, 0, 48, 52, 680022), 'status': 'Not Started', 'project_id': 7, 'updated_at': datetime.datetime(2025, 2, 10, 8, 38, 37, 622196), 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'parent_id': None, 'story_points': 0}
2025-02-13 21:08:25,168 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-13 21:08:25,169 INFO: [cached since 1.306e+04s ago] {'pk_1': 7}
2025-02-13 21:08:25,171 INFO: Task ID 275 fetched with parent ID: None
2025-02-13 21:08:25,173 INFO: Task with ID 275 fetched successfully.
2025-02-13 21:08:25,173 DEBUG: Fetched Task Data: {'id': 275, 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-10T08:38:37.622196', 'contributor_name': 'Unassigned', 'parent': None}
2025-02-13 21:08:25,174 INFO: Task details fetched successfully for Task ID 275.
2025-02-13 21:08:25,175 INFO: ROLLBACK
2025-02-13 21:08:25,176 INFO: 127.0.0.1 - - [13/Feb/2025 21:08:25] "GET /api/tasks/275 HTTP/1.1" 200 -
2025-02-13 21:13:30,020 INFO: Entering list_tasks_json route...
2025-02-13 21:13:30,021 DEBUG: Filters used in API: {'is_archived': False}
2025-02-13 21:13:30,025 DEBUG: Applying filters: {'is_archived': False}
2025-02-13 21:13:30,051 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-13 21:13:30,053 INFO: BEGIN (implicit)
2025-02-13 21:13:30,055 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-13 21:13:30,056 INFO: [cached since 2.698e+04s ago] {'param_1': 110, 'param_2': 0}
2025-02-13 21:13:30,091 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-13 21:13:30,091 INFO: [cached since 2.698e+04s ago] {}
2025-02-13 21:13:30,096 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-13 21:13:30,097 INFO: [cached since 2.698e+04s ago] {}
2025-02-13 21:13:30,099 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-13 21:13:30,099 INFO: [cached since 2.698e+04s ago] {}
2025-02-13 21:13:30,103 INFO: ROLLBACK
2025-02-13 21:13:30,104 INFO: 127.0.0.1 - - [13/Feb/2025 21:13:30] "GET /api/tasks HTTP/1.1" 200 -
2025-02-13 21:34:42,331 INFO: Entering list_tasks_json route...
2025-02-13 21:34:42,339 DEBUG: Filters used in API: {'is_archived': False}
2025-02-13 21:34:42,349 DEBUG: Applying filters: {'is_archived': False}
2025-02-13 21:34:42,381 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-13 21:34:42,386 INFO: BEGIN (implicit)
2025-02-13 21:34:42,389 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-13 21:34:42,397 INFO: [cached since 2.825e+04s ago] {'param_1': 110, 'param_2': 0}
2025-02-13 21:34:42,420 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-13 21:34:42,420 INFO: [cached since 2.825e+04s ago] {}
2025-02-13 21:34:42,422 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-13 21:34:42,422 INFO: [cached since 2.825e+04s ago] {}
2025-02-13 21:34:42,428 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-13 21:34:42,429 INFO: [cached since 2.825e+04s ago] {}
2025-02-13 21:34:42,434 INFO: ROLLBACK
2025-02-13 21:34:42,436 INFO: 127.0.0.1 - - [13/Feb/2025 21:34:42] "GET /api/tasks HTTP/1.1" 200 -
2025-02-13 21:40:40,976 INFO: Fetching task details for Task ID 275.
2025-02-13 21:40:41,004 INFO: Fetching task with ID 275.
2025-02-13 21:40:41,070 INFO: 127.0.0.1 - - [13/Feb/2025 21:40:41] "[33mGET /api/projects HTTP/1.1[0m" 404 -
2025-02-13 21:40:41,073 INFO: 127.0.0.1 - - [13/Feb/2025 21:40:41] "[33mGET /api/contributors HTTP/1.1[0m" 404 -
2025-02-13 21:40:41,074 INFO: BEGIN (implicit)
2025-02-13 21:40:41,109 INFO: 127.0.0.1 - - [13/Feb/2025 21:40:41] "[33mGET /api/projects HTTP/1.1[0m" 404 -
2025-02-13 21:40:41,110 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-13 21:40:41,111 INFO: 127.0.0.1 - - [13/Feb/2025 21:40:41] "[33mGET /api/contributors HTTP/1.1[0m" 404 -
2025-02-13 21:40:41,112 INFO: [cached since 1.5e+04s ago] {'pk_1': 275}
2025-02-13 21:40:41,128 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x10e4864b0>, 'completed_date': None, 'sort_order': 0, 'task_type': 'Epic', 'contributor_id': None, 'id': 275, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 2, 10, 0, 48, 52, 680022), 'status': 'Not Started', 'project_id': 7, 'updated_at': datetime.datetime(2025, 2, 10, 8, 38, 37, 622196), 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'parent_id': None, 'story_points': 0}
2025-02-13 21:40:41,129 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-13 21:40:41,129 INFO: [cached since 1.5e+04s ago] {'pk_1': 7}
2025-02-13 21:40:41,132 INFO: Task ID 275 fetched with parent ID: None
2025-02-13 21:40:41,133 INFO: Task with ID 275 fetched successfully.
2025-02-13 21:40:41,135 DEBUG: Fetched Task Data: {'id': 275, 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-10T08:38:37.622196', 'contributor_name': 'Unassigned', 'parent': None}
2025-02-13 21:40:41,135 INFO: Task details fetched successfully for Task ID 275.
2025-02-13 21:40:41,137 INFO: ROLLBACK
2025-02-13 21:40:41,139 INFO: 127.0.0.1 - - [13/Feb/2025 21:40:41] "GET /api/tasks/275 HTTP/1.1" 200 -
2025-02-13 21:40:41,143 INFO: Fetching task details for Task ID 275.
2025-02-13 21:40:41,143 INFO: Fetching task with ID 275.
2025-02-13 21:40:41,144 INFO: BEGIN (implicit)
2025-02-13 21:40:41,145 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-13 21:40:41,145 INFO: [cached since 1.5e+04s ago] {'pk_1': 275}
2025-02-13 21:40:41,148 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x10e4865d0>, 'completed_date': None, 'sort_order': 0, 'task_type': 'Epic', 'contributor_id': None, 'id': 275, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 2, 10, 0, 48, 52, 680022), 'status': 'Not Started', 'project_id': 7, 'updated_at': datetime.datetime(2025, 2, 10, 8, 38, 37, 622196), 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'parent_id': None, 'story_points': 0}
2025-02-13 21:40:41,150 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-13 21:40:41,150 INFO: [cached since 1.5e+04s ago] {'pk_1': 7}
2025-02-13 21:40:41,159 INFO: Task ID 275 fetched with parent ID: None
2025-02-13 21:40:41,159 INFO: Task with ID 275 fetched successfully.
2025-02-13 21:40:41,159 DEBUG: Fetched Task Data: {'id': 275, 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-10T08:38:37.622196', 'contributor_name': 'Unassigned', 'parent': None}
2025-02-13 21:40:41,159 INFO: Task details fetched successfully for Task ID 275.
2025-02-13 21:40:41,159 INFO: ROLLBACK
2025-02-13 21:40:41,160 INFO: 127.0.0.1 - - [13/Feb/2025 21:40:41] "GET /api/tasks/275 HTTP/1.1" 200 -
2025-02-13 22:01:00,892 INFO: Fetching task details for Task ID 275.
2025-02-13 22:01:00,893 INFO: Fetching task with ID 275.
2025-02-13 22:01:00,908 INFO: BEGIN (implicit)
2025-02-13 22:01:00,909 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-13 22:01:00,909 INFO: [cached since 1.622e+04s ago] {'pk_1': 275}
2025-02-13 22:01:00,913 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x10e485490>, 'completed_date': None, 'sort_order': 0, 'task_type': 'Epic', 'contributor_id': None, 'id': 275, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 2, 10, 0, 48, 52, 680022), 'status': 'Not Started', 'project_id': 7, 'updated_at': datetime.datetime(2025, 2, 10, 8, 38, 37, 622196), 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'parent_id': None, 'story_points': 0}
2025-02-13 22:01:00,914 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-13 22:01:00,914 INFO: [cached since 1.622e+04s ago] {'pk_1': 7}
2025-02-13 22:01:00,915 INFO: Task ID 275 fetched with parent ID: None
2025-02-13 22:01:00,915 INFO: Task with ID 275 fetched successfully.
2025-02-13 22:01:00,915 DEBUG: Fetched Task Data: {'id': 275, 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-10T08:38:37.622196', 'contributor_name': 'Unassigned', 'parent': None}
2025-02-13 22:01:00,915 INFO: Task details fetched successfully for Task ID 275.
2025-02-13 22:01:00,916 INFO: ROLLBACK
2025-02-13 22:01:00,919 INFO: 127.0.0.1 - - [13/Feb/2025 22:01:00] "GET /api/tasks/275 HTTP/1.1" 200 -
2025-02-13 22:01:00,922 INFO: Fetching task details for Task ID 275.
2025-02-13 22:01:00,922 INFO: Fetching task with ID 275.
2025-02-13 22:01:00,924 INFO: BEGIN (implicit)
2025-02-13 22:01:00,925 INFO: 127.0.0.1 - - [13/Feb/2025 22:01:00] "[33mGET /api/projects HTTP/1.1[0m" 404 -
2025-02-13 22:01:00,925 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-13 22:01:00,926 INFO: [cached since 1.622e+04s ago] {'pk_1': 275}
2025-02-13 22:01:00,928 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x10e4847d0>, 'completed_date': None, 'sort_order': 0, 'task_type': 'Epic', 'contributor_id': None, 'id': 275, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 2, 10, 0, 48, 52, 680022), 'status': 'Not Started', 'project_id': 7, 'updated_at': datetime.datetime(2025, 2, 10, 8, 38, 37, 622196), 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'parent_id': None, 'story_points': 0}
2025-02-13 22:01:00,929 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-13 22:01:00,929 INFO: [cached since 1.622e+04s ago] {'pk_1': 7}
2025-02-13 22:01:00,930 INFO: Task ID 275 fetched with parent ID: None
2025-02-13 22:01:00,930 INFO: Task with ID 275 fetched successfully.
2025-02-13 22:01:00,930 DEBUG: Fetched Task Data: {'id': 275, 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-10T08:38:37.622196', 'contributor_name': 'Unassigned', 'parent': None}
2025-02-13 22:01:00,930 INFO: Task details fetched successfully for Task ID 275.
2025-02-13 22:01:00,931 INFO: ROLLBACK
2025-02-13 22:01:00,932 INFO: 127.0.0.1 - - [13/Feb/2025 22:01:00] "GET /api/tasks/275 HTTP/1.1" 200 -
2025-02-13 22:01:00,937 INFO: 127.0.0.1 - - [13/Feb/2025 22:01:00] "[33mGET /api/projects HTTP/1.1[0m" 404 -
2025-02-13 22:01:10,645 INFO: Fetching task details for Task ID 275.
2025-02-13 22:01:10,646 INFO: Fetching task with ID 275.
2025-02-13 22:01:10,656 INFO: BEGIN (implicit)
2025-02-13 22:01:10,659 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-13 22:01:10,660 INFO: [cached since 1.623e+04s ago] {'pk_1': 275}
2025-02-13 22:01:10,686 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x10e486a50>, 'completed_date': None, 'sort_order': 0, 'task_type': 'Epic', 'contributor_id': None, 'id': 275, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 2, 10, 0, 48, 52, 680022), 'status': 'Not Started', 'project_id': 7, 'updated_at': datetime.datetime(2025, 2, 10, 8, 38, 37, 622196), 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'parent_id': None, 'story_points': 0}
2025-02-13 22:01:10,687 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-13 22:01:10,687 INFO: [cached since 1.623e+04s ago] {'pk_1': 7}
2025-02-13 22:01:10,691 INFO: Task ID 275 fetched with parent ID: None
2025-02-13 22:01:10,691 INFO: Task with ID 275 fetched successfully.
2025-02-13 22:01:10,691 DEBUG: Fetched Task Data: {'id': 275, 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-10T08:38:37.622196', 'contributor_name': 'Unassigned', 'parent': None}
2025-02-13 22:01:10,691 INFO: Task details fetched successfully for Task ID 275.
2025-02-13 22:01:10,695 INFO: ROLLBACK
2025-02-13 22:01:10,697 INFO: 127.0.0.1 - - [13/Feb/2025 22:01:10] "GET /api/tasks/275 HTTP/1.1" 200 -
2025-02-13 22:01:10,702 INFO: 127.0.0.1 - - [13/Feb/2025 22:01:10] "[33mGET /api/projects HTTP/1.1[0m" 404 -
2025-02-13 23:42:50,630 INFO: Flash messages: []
2025-02-13 23:42:50,638 INFO: BEGIN (implicit)
2025-02-13 23:42:50,648 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date 
FROM project LEFT OUTER JOIN task AS task_1 ON project.id = task_1.project_id
2025-02-13 23:42:50,650 INFO: [generated in 0.00335s] {}
2025-02-13 23:42:50,684 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-02-13 23:42:50,684 INFO: [generated in 0.00022s] {'coalesce_2': 0, 'project_id_1': 6}
2025-02-13 23:42:50,691 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-02-13 23:42:50,691 INFO: [generated in 0.00034s] {'coalesce_2': 0, 'project_id_1': 6}
2025-02-13 23:42:50,692 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-02-13 23:42:50,692 INFO: [cached since 0.008395s ago] {'coalesce_2': 0, 'project_id_1': 6}
2025-02-13 23:42:50,693 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-02-13 23:42:50,693 INFO: [cached since 0.00255s ago] {'coalesce_2': 0, 'project_id_1': 6}
2025-02-13 23:42:50,694 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-02-13 23:42:50,694 INFO: [cached since 0.01015s ago] {'coalesce_2': 0, 'project_id_1': 7}
2025-02-13 23:42:50,694 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-02-13 23:42:50,694 INFO: [cached since 0.003962s ago] {'coalesce_2': 0, 'project_id_1': 7}
2025-02-13 23:42:50,695 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-02-13 23:42:50,695 INFO: [cached since 0.01137s ago] {'coalesce_2': 0, 'project_id_1': 7}
2025-02-13 23:42:50,695 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-02-13 23:42:50,696 INFO: [cached since 0.005102s ago] {'coalesce_2': 0, 'project_id_1': 7}
2025-02-13 23:42:50,696 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-02-13 23:42:50,696 INFO: [cached since 0.0125s ago] {'coalesce_2': 0, 'project_id_1': 1}
2025-02-13 23:42:50,697 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-02-13 23:42:50,697 INFO: [cached since 0.006367s ago] {'coalesce_2': 0, 'project_id_1': 1}
2025-02-13 23:42:50,697 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-02-13 23:42:50,697 INFO: [cached since 0.01384s ago] {'coalesce_2': 0, 'project_id_1': 1}
2025-02-13 23:42:50,698 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-02-13 23:42:50,698 INFO: [cached since 0.007831s ago] {'coalesce_2': 0, 'project_id_1': 1}
2025-02-13 23:42:50,699 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-02-13 23:42:50,700 INFO: [cached since 0.01587s ago] {'coalesce_2': 0, 'project_id_1': 2}
2025-02-13 23:42:50,700 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-02-13 23:42:50,700 INFO: [cached since 0.01006s ago] {'coalesce_2': 0, 'project_id_1': 2}
2025-02-13 23:42:50,701 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-02-13 23:42:50,701 INFO: [cached since 0.01754s ago] {'coalesce_2': 0, 'project_id_1': 2}
2025-02-13 23:42:50,702 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-02-13 23:42:50,702 INFO: [cached since 0.01138s ago] {'coalesce_2': 0, 'project_id_1': 2}
2025-02-13 23:42:50,703 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-02-13 23:42:50,703 INFO: [cached since 0.01894s ago] {'coalesce_2': 0, 'project_id_1': 5}
2025-02-13 23:42:50,703 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-02-13 23:42:50,703 INFO: [cached since 0.01271s ago] {'coalesce_2': 0, 'project_id_1': 5}
2025-02-13 23:42:50,704 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-02-13 23:42:50,704 INFO: [cached since 0.02005s ago] {'coalesce_2': 0, 'project_id_1': 5}
2025-02-13 23:42:50,704 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-02-13 23:42:50,704 INFO: [cached since 0.01394s ago] {'coalesce_2': 0, 'project_id_1': 5}
2025-02-13 23:42:50,705 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-02-13 23:42:50,705 INFO: [cached since 0.02132s ago] {'coalesce_2': 0, 'project_id_1': 4}
2025-02-13 23:42:50,705 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-02-13 23:42:50,705 INFO: [cached since 0.015s ago] {'coalesce_2': 0, 'project_id_1': 4}
2025-02-13 23:42:50,706 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-02-13 23:42:50,706 INFO: [cached since 0.02228s ago] {'coalesce_2': 0, 'project_id_1': 4}
2025-02-13 23:42:50,706 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-02-13 23:42:50,707 INFO: [cached since 0.0161s ago] {'coalesce_2': 0, 'project_id_1': 4}
2025-02-13 23:42:50,707 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-02-13 23:42:50,707 INFO: [cached since 0.02366s ago] {'coalesce_2': 0, 'project_id_1': 3}
2025-02-13 23:42:50,708 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-02-13 23:42:50,708 INFO: [cached since 0.01736s ago] {'coalesce_2': 0, 'project_id_1': 3}
2025-02-13 23:42:50,708 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-02-13 23:42:50,708 INFO: [cached since 0.02473s ago] {'coalesce_2': 0, 'project_id_1': 3}
2025-02-13 23:42:50,709 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-02-13 23:42:50,709 INFO: [cached since 0.01852s ago] {'coalesce_2': 0, 'project_id_1': 3}
2025-02-13 23:42:50,710 INFO: SELECT count(*) AS count_1 
FROM (SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor) AS anon_1
2025-02-13 23:42:50,710 INFO: [generated in 0.00009s] {}
2025-02-13 23:42:50,713 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project JOIN task ON project.id = task.project_id GROUP BY project.id 
HAVING sum(task.story_points * CAST(task.completed AS INTEGER)) < sum(task.story_points)
2025-02-13 23:42:50,713 INFO: [generated in 0.00018s] {}
2025-02-13 23:42:50,720 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project JOIN task ON project.id = task.project_id GROUP BY project.id 
HAVING sum(task.story_points * CAST(task.completed AS INTEGER)) >= sum(task.story_points)
2025-02-13 23:42:50,721 INFO: [generated in 0.00103s] {}
2025-02-13 23:42:50,724 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project LEFT OUTER JOIN task ON project.id = task.project_id GROUP BY project.id 
HAVING sum(task.story_points * CAST(task.completed AS INTEGER)) IS NULL
2025-02-13 23:42:50,725 INFO: [generated in 0.00062s] {}
2025-02-13 23:42:50,727 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-13 23:42:50,727 INFO: [generated in 0.00037s] {}
2025-02-13 23:42:50,728 INFO: SELECT count(*) AS count_1 
FROM (SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor) AS anon_1
2025-02-13 23:42:50,728 INFO: [cached since 0.01803s ago] {}
2025-02-13 23:42:50,730 INFO: SELECT count(*) AS count_1 
FROM (SELECT DISTINCT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor JOIN project_contributor ON contributor.id = project_contributor.contributor_id) AS anon_1
2025-02-13 23:42:50,731 INFO: [generated in 0.00016s] {}
2025-02-13 23:42:50,733 INFO: SELECT count(*) AS count_1 
FROM (SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor LEFT OUTER JOIN project_contributor ON contributor.id = project_contributor.contributor_id 
WHERE project_contributor.project_id IS NULL) AS anon_1
2025-02-13 23:42:50,733 INFO: [generated in 0.00016s] {}
2025-02-13 23:42:50,888 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-02-13 23:42:50,888 INFO: [cached since 0.2041s ago] {'coalesce_2': 0, 'project_id_1': 6}
2025-02-13 23:42:50,889 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 6, 'total_story_points': 439, 'timestamp': '2025-02-13T22:42:50.889000+00:00'}
2025-02-13 23:42:50,889 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-02-13 23:42:50,889 INFO: [cached since 0.2053s ago] {'coalesce_2': 0, 'project_id_1': 7}
2025-02-13 23:42:50,889 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 7, 'total_story_points': 0, 'timestamp': '2025-02-13T22:42:50.889871+00:00'}
2025-02-13 23:42:50,890 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-02-13 23:42:50,890 INFO: [cached since 0.2061s ago] {'coalesce_2': 0, 'project_id_1': 1}
2025-02-13 23:42:50,890 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 1, 'total_story_points': 0, 'timestamp': '2025-02-13T22:42:50.890574+00:00'}
2025-02-13 23:42:50,890 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-02-13 23:42:50,890 INFO: [cached since 0.2067s ago] {'coalesce_2': 0, 'project_id_1': 2}
2025-02-13 23:42:50,891 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 2, 'total_story_points': 0, 'timestamp': '2025-02-13T22:42:50.891208+00:00'}
2025-02-13 23:42:50,891 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-02-13 23:42:50,891 INFO: [cached since 0.2074s ago] {'coalesce_2': 0, 'project_id_1': 5}
2025-02-13 23:42:50,891 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 5, 'total_story_points': 0, 'timestamp': '2025-02-13T22:42:50.891962+00:00'}
2025-02-13 23:42:50,892 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-02-13 23:42:50,892 INFO: [cached since 0.2081s ago] {'coalesce_2': 0, 'project_id_1': 4}
2025-02-13 23:42:50,892 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 4, 'total_story_points': 0, 'timestamp': '2025-02-13T22:42:50.892816+00:00'}
2025-02-13 23:42:50,893 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-02-13 23:42:50,893 INFO: [cached since 0.209s ago] {'coalesce_2': 0, 'project_id_1': 3}
2025-02-13 23:42:50,893 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 3, 'total_story_points': 0, 'timestamp': '2025-02-13T22:42:50.893529+00:00'}
2025-02-13 23:42:50,894 INFO: ROLLBACK
2025-02-13 23:42:50,894 INFO: 127.0.0.1 - - [13/Feb/2025 23:42:50] "GET /dashboard HTTP/1.1" 200 -
2025-02-13 23:42:50,929 INFO: 127.0.0.1 - - [13/Feb/2025 23:42:50] "[36mGET /static/custom.css HTTP/1.1[0m" 304 -
2025-02-13 23:42:50,940 INFO: 127.0.0.1 - - [13/Feb/2025 23:42:50] "[36mGET /static/custom.js HTTP/1.1[0m" 304 -
2025-02-13 23:42:50,958 INFO: 127.0.0.1 - - [13/Feb/2025 23:42:50] "[36mGET /static/images/background.svg HTTP/1.1[0m" 304 -
2025-02-13 23:45:45,508 INFO: Entering list_tasks route...
2025-02-13 23:45:45,509 DEBUG: Filters used: {'is_archived': False}
2025-02-13 23:45:45,511 DEBUG: Applying filters: {'is_archived': False}
2025-02-13 23:45:45,537 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-13 23:45:45,539 INFO: BEGIN (implicit)
2025-02-13 23:45:45,540 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-13 23:45:45,540 INFO: [cached since 3.125e+04s ago] {'param_1': 110, 'param_2': 0}
2025-02-13 23:45:45,553 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-13 23:45:45,553 INFO: [cached since 3.125e+04s ago] {}
2025-02-13 23:45:45,554 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-13 23:45:45,555 INFO: [cached since 3.125e+04s ago] {}
2025-02-13 23:45:45,555 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-13 23:45:45,556 INFO: [cached since 3.125e+04s ago] {}
2025-02-13 23:45:45,558 DEBUG: Tasks passed to template: [{'id': 290, 'name': 'issue: error when changing task type and', 'description': 'issue: error when changing task type and parent task before saving', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:00:03.417734', 'updated_at': '2025-02-10T09:15:09.284969'}, {'id': 298, 'name': 'example user story with parent epic 297', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 297, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:41:01.907455', 'updated_at': '2025-02-10T14:59:04.142570'}, {'id': 275, 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-10T08:38:37.622196'}, {'id': 276, 'name': 'add support for priority', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-10T08:28:47.447612'}, {'id': 264, 'name': 'close all / open all childtasks', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-02-10T08:47:14.915970'}, {'id': 285, 'name': 'add text truncation to project names in task list', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-10T09:45:47.029729'}, {'id': 257, 'name': 'Update Task API Integration', 'description': "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-02-05T22:55:49.566819', 'updated_at': '2025-02-05T22:18:17.807154'}, {'id': 294, 'name': 'issue: task table filters not working', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:19:21.022598', 'updated_at': '2025-02-12T10:59:15.483390'}, {'id': 267, 'name': 'improvements to toggles and nested tasks', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:29:12.464594', 'updated_at': '2025-02-10T08:47:24.581680'}, {'id': 283, 'name': 'fix update title', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:58.769700', 'updated_at': '2025-02-10T08:46:47.282087'}, {'id': 271, 'name': 'make sure dynamically added rows has the exact same styling and includes every element', 'description': 'Missing elements:\n- Open link\n- Default project\n- Project name should be inside a pill\n- Task type should be in a pill\n- Estimations should be 0, not N/A\n- Make sure font size is matching\n- status should have the dropdown inside a pill\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:21:07.108431', 'updated_at': '2025-02-10T08:38:47.340105'}, {'id': 273, 'name': 'disable parent task selector in epics', 'description': 'and add text, Epic can¬¥t have parent tasks', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:45:20.740910', 'updated_at': '2025-02-10T08:39:17.639890'}, {'id': 269, 'name': 'fix styling for sweetalert', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-02-08T15:54:56.717846', 'updated_at': '2025-02-10T08:39:32.172437'}, {'id': 286, 'name': 'add support for labels/tags', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:46:23.985620', 'updated_at': '2025-02-10T09:46:23.987564'}, {'id': 299, 'name': 'example sub task with parent user story 298', 'description': 'Test update 1\nTest update 2\nTest update 3', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 298, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:42:38.905700', 'updated_at': '2025-02-10T23:23:08.671464'}, {'id': 266, 'name': 'highlight the nested tasks', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-02-10T08:47:04.382929'}, {'id': 279, 'name': 'github integration', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:38.238202', 'updated_at': '2025-02-10T08:39:24.168451'}, {'id': 289, 'name': 'issue: parent task is lost when updating task', 'description': '- Summary of the problem and solution\n    \n    **Problem: Parent Task Dropdown Was Not Being Set on Modal Open**\n    \n    The issue was that when opening a task modal, the **parent task dropdown** was not pre-populated with the correct parent task. However, interacting with the dropdown (e.g., clicking on it) would suddenly trigger it to be set correctly. This meant that the dropdown initialization was likely delayed or missing a step in the modal lifecycle.\n    \n    **Debugging Steps and Observations**\n    \n    1. **Task Details Were Fetched Correctly** ‚úÖ\n    - The task details, including parent_id, were being fetched from the API successfully.\n    1. **Parent Dropdown Initialization Issues** ‚ùå\n    - The initializeParentDropdown() function was being called, but the dropdown was sometimes **not fully ready** when we tried to set the selected parent task.\n    1. **Clicking the Dropdown Triggered the Parent to Be Set** ü§î\n    - This hinted that the dropdown was not fully ready when setParentDropdown(task.parent_id) was initially called.\n    \n    **Final Solution**\n    \n    1. **Ensuring Dropdown Readiness Before Setting the Parent Task**\n    - We added explicit **delays and checks** to confirm that the dropdown was fully initialized before attempting to set the parent task.\n    \n    Specifically, we:\n    \n    - **Waited for the dropdown to appear in the DOM** using observeParentDropdown().\n    - **Initialized the dropdown** with initializeParentDropdown().\n    - **Waited explicitly for the dropdown to be fully ready** using waitForParentDropdownReady().\n    - **Added a final delay of 200ms** before calling setParentDropdown() to ensure stability.\n    1. **Modifying openTaskModal to Handle Parent Dropdown Setup**\n    - We ensured that initializeParentDropdown() was called **after fetching task details** and before setting the parent task.\n    1. **Confirming the Fix** üéØ\n    - After these fixes, the parent dropdown was **immediately populated** upon opening the modal, without requiring user interaction.\n    \n    **Key Learnings**\n    \n    ‚úÖ **Dropdowns in modals need careful timing** ‚Äì They might not be ready when you expect them to be.\n    \n    ‚úÖ **Waiting for DOM updates is crucial** ‚Äì Observing the element ensures it actually exists before interacting with it.\n    \n    ‚úÖ **Explicit delays can prevent race conditions** ‚Äì A small delay can sometimes resolve timing issues in UI interactions.\n    \n    **Final Result**\n    \n    ‚úÖ The modal now **correctly loads and pre-selects the parent task** without extra clicks! üéâüöÄ', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T08:56:25.273984', 'updated_at': '2025-02-11T15:40:03.610698'}, {'id': 278, 'name': 'search feature for tasks list', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:03.369833', 'updated_at': '2025-02-10T08:39:04.005957'}, {'id': 281, 'name': 'add high level plan', 'description': 'Add some sort of high level plan that aims to keep PM/PO¬¥s on track and not get lost into the details of an overwhelminly large backlog', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:27:01.218606', 'updated_at': '2025-02-10T08:38:54.754760'}, {'id': 287, 'name': 'when moving a parent item to another project make sure the subtasks are moved as well', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:48:31.986870', 'updated_at': '2025-02-10T09:48:31.988859'}, {'id': 272, 'name': 'implement a markdown text editor like notion', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-02-10T08:28:39.669255'}, {'id': 293, 'name': 'click on title should copy the task title and id to clipboard', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:16:33.508209', 'updated_at': '2025-02-10T10:16:33.510414'}, {'id': 277, 'name': 'custom task workflow statuses', 'description': 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- Custom status\n-- Custom status\n- In Progress\n-- Custom status\n-- Custom status\n-- Custom status\n- Completed\n-- Custom status\n-- Custom status\n\n2. How can we track a task through different stages and save the sequence of events or stages the task has gone through?\nI¬¥m thinking it could be good for mapping out processes, identifying bottlenecks and provide valuable insights while improving and streamlining workflows.\n- Stages\n- Contacts taken\n- Respons time \n- Time to action after responses\n- Dependencies\n\nNeed to be able to record every action related to this action.\nCommunication integrations\n- Slack\n- Email\n- Text messages\n- Phonecalls\n- Calendar events, meetings\n- Zoom, Google meet, Teams etc..\n\n\n2. Set custom statuses per project (can use tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:16:03.352588', 'updated_at': '2025-02-10T08:38:28.123328'}, {'id': 274, 'name': 'add support for goals, initiatives, okr¬¥s', 'description': 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:46:27.204912', 'updated_at': '2025-02-10T08:28:17.663922'}, {'id': 280, 'name': 'logging (task and project history)', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:37:44.435112', 'updated_at': '2025-02-10T08:28:28.947805'}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:17.786154', 'updated_at': '2025-02-10T09:41:17.787861'}, {'id': 296, 'name': 'issue: contributor is lost after updating task', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:26:43.881947', 'updated_at': '2025-02-11T15:37:31.011120'}, {'id': 288, 'name': 'when trying to move subtask to another project, make sure a warning is displayed', 'description': 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be lost"\nOR\n\nIs it possible, and is it desireable to keep parent child relationships across projects?\nSo that a parent can be in one project but the child tasks can be in different projects?\n\nLets say \nParent epic is \n"Internationalisation"\nChild user stories are\n- Timezones\n- Language\n- Currency\n- Day, Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:54:36.297869', 'updated_at': '2025-02-10T08:54:51.840686'}, {'id': 284, 'name': 'add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-10T09:42:27.720908'}, {'id': 295, 'name': 'issue: drag and drop errors', 'description': '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:22:54.461413', 'updated_at': '2025-02-10T10:22:54.462542'}, {'id': 297, 'name': 'example parent epic', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:39:51.620509', 'updated_at': '2025-02-10T10:39:51.622712'}, {'id': 292, 'name': 'issue: assigning contributor does not work', 'description': '### **Summary of problem and solution**\n\nThe issue was that assigning a contributor to a task via the /tasks/<task_id>/assign_contributor API endpoint resulted in a **400 Bad Request** error. Upon investigation, the following problems were identified:\n\n1. **Missing CSRF Token:**\n- The request failed due to a missing CSRF token, as shown in the error message: *‚ÄúBad Request: The CSRF token is missing.‚Äù*\n- The frontend was not correctly including the CSRF token in the request headers.\n1. **JavaScript Error (Undefined CSRF Token Variable):**\n- The error *‚ÄúReferenceError: csrfToken is not defined‚Äù* indicated that the CSRF token was not being retrieved properly in the JavaScript code.\n1. **Incorrect Fetch Request Headers:**\n- The fetch request did not include the CSRF token under the correct key (X-CSRFToken).\n- The script attempted to send the request without properly extracting the CSRF token from the meta tag.\n\n### **Solution**\n\n1. **Include the CSRF Token in the JavaScript Code**\n\nThe CSRF token was retrieved from the meta tag and used in the request headers:\n\n```jsx\n// Retrieve CSRF token from meta tag\nconst csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\');\n```\n\nThis ensures that the CSRF token is correctly fetched and available in the JavaScript scope.\n\n1. **Modify the Fetch Request to Include CSRF Token**\n\nThe request to assign a contributor was updated to include the token:\n\n```jsx\nconst response = await fetch(`/tasks/${taskId}/assign_contributor`, {\n    method: "POST",\n    headers: { \n        "Content-Type": "application/json",\n        "X-CSRFToken": csrfToken  // Include CSRF token\n    },\n    body: JSON.stringify({ contributor_id: parseInt(contributorId, 10) }),\n});\n```\n\n- **Ensures the CSRF token is sent in the request headers** so that Flask-WTF does not reject the request.\n1. **Verify and Debug Network Requests**\n- The updated request headers were verified using **Chrome DevTools > Network tab** to ensure the X-CSRFToken was included.\n- The error messages disappeared, and the contributor assignment request **succeeded with a 200 OK response**.\n\n---\n\n### **Final Outcome**\n\nüöÄ The issue was resolved, and contributors can now be assigned successfully to tasks without triggering a CSRF validation error.\n\n### **Key Learnings from This Session**\n\nThis debugging session covered several important aspects of **web development with Flask and JavaScript**, particularly related to **API requests, CSRF protection, debugging tools, and database interactions**. Here are the key takeaways:\n\n---\n\n### **1. CSRF Protection in API Requests**\n\n- **Issue:** The initial error was due to **a missing CSRF token** when making a `POST` request.\n- **Fix:** The solution was to **retrieve the CSRF token from a meta tag** in the HTML and include it in the request headers.\n- **Key Learning:** Flask-WTF requires CSRF tokens for form and API submissions to **prevent cross-site request forgery (CSRF) attacks**.‚úÖ Always ensure that API requests include a valid CSRF token.\n\n---\n\n### **2. Debugging JavaScript Fetch Requests**\n\n- **Issue:** The JavaScript code was making a fetch request, but the variable `csrfToken` was not properly defined, causing a `ReferenceError`.\n- **Fix:** Declaring `csrfToken` at the beginning of the script:\n    \n    ```jsx\n    const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\');\n    ```\n    \n- **Key Learning:**‚úÖ JavaScript variables must be defined before they are used.‚úÖ Use browser **developer tools (DevTools) Network tab** to inspect headers, payloads, and responses when debugging API requests.\n\n---\n\n### **3. Structuring Flask Routes for Task Management**\n\n- **Issue:** The `assign_contributor` route was failing due to incorrect request payload validation.\n- **Fix:** Improved the route‚Äôs error handling and logging:\n    \n    ```python\n    @bp.route(\'/<int:task_id>/assign_contributor\', methods=[\'POST\'])\n    def assign_contributor(task_id):\n        try:\n            data = request.get_json()\n            contributor_id = int(data.get(\'contributor_id\', 0))\n            if not contributor_id:\n                return jsonify({\'error\': \'Valid Contributor ID is required\'}), 400\n    ```\n    \n- **Key Learning:**‚úÖ Always validate incoming data in Flask routes to prevent type errors.‚úÖ Use `request.get_json()` properly and handle missing or incorrect data gracefully.\n\n---\n\n### **4. Utilizing Browser DevTools for Debugging**\n\n- **Issue:** The fetch request was failing with a `400 Bad Request`, and the browser console showed `ReferenceError: csrfToken is not defined`.\n- **Fix:**\n    - Used **Network tab** to inspect the request payload and headers.\n    - Used **Console tab** to catch JavaScript errors early.\n- **Key Learning:**‚úÖ DevTools is a **critical** tool for diagnosing network request issues.‚úÖ Always **check console errors** before assuming it\'s a backend issue.\n\n---\n\n### **5. Database Queries and ORM Debugging**\n\n- **Issue:** Tasks were not being updated correctly, possibly due to missing commit statements.\n- **Fix:** Ensured that:was executed properly.\n    \n    ```python\n    task.contributor_id = contributor_id\n    db.session.commit()\n    ```\n    \n- **Key Learning:**‚úÖ Always call `db.session.commit()` after making changes in SQLAlchemy.‚úÖ Rollback transactions if an error occurs to avoid database inconsistency.\n\n---\n\n### **6. Handling Asynchronous JavaScript Logic**\n\n- **Issue:** The `assignContributor` function was executing before the page was fully loaded.\n- **Fix:** Wrapped it inside a function that ensures elements exist:\n    \n    ```\n    window.setupContributorAssignment = function () {\n        const assignButton = $("#assign-contributor-btn");\n        if (!assignButton.length) {\n            setTimeout(setupContributorAssignment, 500); // Retry in 500ms\n            return;\n        }\n    ```\n    \n- **Key Learning:**‚úÖ Use `setTimeout` to **retry event binding** when elements are dynamically loaded.‚úÖ Always **check if elements exist before attaching event handlers**.\n\n---\n\n### **7. Best Practices for Flask Logging & Error Handling**\n\n- **Issue:** Lack of clear logging when API calls failed.\n- **Fix:** Added better logging to track failures:\n    \n    ```python\n    logger.info(f"Assigning contributor to task ID {task_id}")\n    try:\n        # Process request...\n    except Exception as e:\n        logger.error(f"Error assigning contributor: {e}")\n    ```\n    \n- **Key Learning:**‚úÖ Log **every major step** in API processing to simplify debugging.‚úÖ Differentiate between `logger.info()`, `logger.warning()`, and `logger.error()` based on severity.\n\n---\n\n### **Final Takeaways**\n\nüöÄ **Understanding CSRF protection** and **properly structuring API requests** is crucial for secure web applications.\n\nüîç **Browser DevTools is invaluable** for diagnosing frontend issues, especially in JavaScript.\n\nüêç **Flask requires proper request validation, database transactions, and logging** to maintain stability.\n\n‚ö° **Asynchronous JavaScript must handle dynamic elements carefully** to avoid runtime errors.\n\nThis session reinforced best practices in **frontend-backend integration, debugging, and security**, making it a great learning experience! üöÄüî•', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:11:12.273779', 'updated_at': '2025-02-12T10:59:41.585250'}, {'id': 265, 'name': 'smooth transition for toggles', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-02-10T08:46:55.831743'}, {'id': 270, 'name': 'the newest task', 'description': '', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:07:34.368035', 'updated_at': '2025-02-10T01:07:34.372478'}, {'id': 291, 'name': 'add dropdowns in task list for changing: project, assigned to, estimate and task type (labels/tags)', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-02-10T10:09:52.997455'}, {'id': 136, 'name': 'Page scroll should stay in position when reloading', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-16T18:21:50.187247', 'updated_at': '2025-01-16T19:22:36.214901'}, {'id': 130, 'name': 'Implement the Map of Task Relationships solution for drag-and-drop', 'description': 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.093022', 'updated_at': '2025-01-16T19:22:36.216705'}, {'id': 133, 'name': 'Step 4: Enhance Logging in models.py', 'description': 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nupdating the Task model in the following ways:\n\n1.\tLog Changes to parent_id:\n\t‚Ä¢\tLog changes to parent_id during updates, including old and new values.\n\t2.\tValidate Hierarchy with Logging:\n\t‚Ä¢\tLog detailed messages when validating hierarchy changes, especially for circular dependency checks.\n\nHere‚Äôs how the models.py can be updated:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy import func, cast, CheckConstraint\nfrom sqlalchemy.orm import validates\nfrom app.extensions.db import db\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\nclass Task(db.Model):\n    __tablename__ = "task"\n    \n    # Other columns...\n\n    parent_id = db.Column(\n        db.Integer, db.ForeignKey("task.id"), index=True, nullable=True\n    )\n\n    # Relationships\n    parent = db.relationship(\n        "Task", remote_side=[id], back_populates="children", lazy="select"\n    )\n    children = db.relationship(\n        "Task", back_populates="parent", lazy="select"\n    )\n\n    \n\n\n    @staticmethod\n    def _validate_no_circular_references(new_parent_id):\n        """\n        Validates that there are no circular references in the task hierarchy.\n\n        Args:\n            new_parent_id (int): The new parent ID to validate.\n\n        Raises:\n            ValueError: If a circular reference is detected.\n        """\n        visited = set()\n        current_parent_id = new_parent_id\n\n        logger.info(f"Validating circular references for parent ID: {new_parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error(\n                    f"Circular reference detected: Parent ID {current_parent_id} already visited."\n                )\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            # Fetch the next parent_id in the hierarchy\n            parent = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not parent:\n                break  # Exit if no parent is found\n            current_parent_id = parent.parent_id\n\n        logger.info("No circular reference detected.")\n\n    @validates(\'parent_id\', \'task_type\')\n    def validate_task_changes(self, key, value):\n        """\n        Validates changes to \'parent_id\' and \'task_type\'.\n        Ensures hierarchy validity and checks for circular references.\n        """\n        logger.debug(f"Validating {key} change for Task {self.id}: {value}")\n\n        if key == \'parent_id\':\n            # Log changes to parent_id\n            if self.id and value != self.parent_id:\n                logger.info(f"Task {self.id}: Updating \'parent_id\' from {self.parent_id} to {value}")\n\n            # Prevent a task from being its own parent\n            if value and value == self.id:\n                logger.error("A task cannot be its own parent.")\n                raise ValueError("A task cannot be its own parent.")\n\n            # Check for circular references\n            if value:\n                Task.check_circular_reference(self.id, value)\n\n        elif key == \'task_type\':\n            # Log changes to task_type\n            if self.id and value != self.task_type:\n                logger.info(f"Task {self.id}: Updating \'task_type\' from {self.task_type} to {value}")\n\n        # Check hierarchy rules without triggering further validation\n        if key in [\'parent_id\', \'task_type\']:\n            self._validate_hierarchy_change(key, value)\n\n        logger.info(f"Validation passed for {key}: {value}")\n        return value\n\n    def _validate_hierarchy_change(self, key, value):\n        """\n        Validates hierarchy rules for the task based on `task_type` and `parent_id`.\n        """\n        if key == \'parent_id\' and value:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=value).first()\n            if not parent_task:\n                raise ValueError("Parent task does not exist.")\n\n            logger.debug(f"Validating hierarchy: Task {self.id}, Parent Type: {parent_task.task_type}")\n            if self.task_type == "User Story" and parent_task.task_type != "Epic":\n                raise ValueError("User Stories must have an Epic as a parent.")\n            if self.task_type == "Subtask" and parent_task.task_type != "User Story":\n                raise ValueError("Subtasks must have a User Story as a parent.")\n\n        elif key == \'task_type\' and self.parent_id:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=self.parent_id).first()\n            if parent_task:\n                logger.debug(f"Validating hierarchy: Task Type: {value}, Parent Type: {parent_task.task_type}")\n                if value == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError("User Stories must have an Epic as a parent.")\n                if value == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError("Subtasks must have a User Story as a parent.")\n\n        logger.info(f"Hierarchy validation passed for Task {self.id if self.id else \'New Task\'}.")\n\n    @staticmethod\n    def check_circular_reference(task_id, parent_id):\n        """\n        Iteratively checks for circular references in the task hierarchy.\n        Prevents stack overflow on deep hierarchies.\n        """\n        visited = set()\n        current_parent_id = parent_id\n\n        logger.info(f"Checking circular reference for Task {task_id} with Parent ID: {parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error("Circular reference detected!")\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            if current_parent_id == task_id:\n                logger.error("A task cannot be its own ancestor.")\n                raise ValueError("A task cannot be its own ancestor.")\n\n            # Fetch the next parent_id in the hierarchy\n            task = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not task:\n                break\n            current_parent_id = task.parent_id\n\n        logger.info("Circular reference check passed.")\n```\nKey Enhancements:\n\t1.\tlog_and_validate_parent_id_change:\n\t‚Ä¢\tLogs the old and new parent_id whenever it changes.\n\t‚Ä¢\tEnsures no circular references are introduced.\n\t2.\t_validate_no_circular_references:\n\t‚Ä¢\tValidates the parent_id field to prevent circular dependencies.\n\t‚Ä¢\tLogs progress and raises detailed errors if violations occur.\n\t3.\tlog_and_validate_task_type_change:\n\t‚Ä¢\tLogs changes to task_type with the old and new values.\n\t‚Ä¢\tRevalidates hierarchy rules when task_type changes.\n\t4.\tDetailed Logging for Circular Reference Validation:\n\t‚Ä¢\t_validate_no_circular_references and check_circular_reference methods log every step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t‚Ä¢\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:44:08.340041', 'updated_at': '2025-01-16T19:22:36.219710'}, {'id': 132, 'name': 'Step 1: Update tasks_table_interactions.js', 'description': '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the map for efficient parent-child relationship lookups instead of DOM traversal.\n\n```\nexport const TaskManager = {\n    init: function (csrfToken) {\n        this.csrfToken = csrfToken;\n        this.initTaskParentMap(); // Initialize the map\n        this.initDragAndDrop(); // Initialize drag-and-drop functionality\n    },\n\n    // Initialize a global map for task relationships\n    taskParentMap: new Map(),\n\n    // Build the taskParentMap from the DOM\n    initTaskParentMap: function () {\n        console.log("Initializing Task Parent Map...");\n        const rows = document.querySelectorAll("tr[data-task-id]");\n\n        rows.forEach((row) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = parseInt(row.dataset.parentId, 10) || null;\n            this.taskParentMap.set(taskId, parentId);\n        });\n\n        console.log("Task Parent Map initialized:", Array.from(this.taskParentMap.entries()));\n    },\n\n    // Update the map dynamically after drag-and-drop\n    updateTaskParentMap: function (taskId, parentId) {\n        console.log(`Updating Task Parent Map: Task ${taskId} -> Parent ${parentId}`);\n        this.taskParentMap.set(taskId, parentId);\n    },\n\n    initDragAndDrop: function () {\n        if (window.isDragAndDropInitialized) {\n            console.log("Drag-and-drop is already initialized.");\n            return;\n        }\n\n        console.log("Initializing drag-and-drop within TaskManager...");\n\n        const tableBody = document.querySelector("tbody");\n        if (!tableBody) {\n            console.warn("Task table body not found for drag-and-drop initialization");\n            return;\n        }\n\n        // Initialize Sortable.js for drag-and-drop functionality\n        Sortable.create(tableBody, {\n            handle: ".task-row", // Only draggable via `.task-row` elements\n            animation: 150, // Smooth animation\n            filter: ".task-open-link", // Prevent dragging on task links\n            preventOnFilter: true, // Prevent drag if filtered element is clicked\n            onEnd: async (event) => {\n                try {\n                    console.log("Drag-and-drop operation started...");\n                    const rows = Array.from(event.from.querySelectorAll(".task-row"));\n                    const reorderedTasks = [];\n\n                    rows.forEach((row, index) => {\n                        const taskId = parseInt(row.dataset.taskId, 10);\n                        let parentId = null;\n\n                        // Get the parent ID from the map or fallback to the dataset\n                        if (row.classList.contains("subtask-row")) {\n                            const parentRow = row.previousElementSibling;\n                            parentId = parentRow\n                                ? parseInt(parentRow.dataset.taskId, 10)\n                                : this.taskParentMap.get(taskId) || null;\n                        }\n\n                        // Update the taskParentMap dynamically\n                        this.updateTaskParentMap(taskId, parentId);\n\n                        reorderedTasks.push({\n                            id: taskId,\n                            sort_order: index + 1,\n                            parent_id: parentId,\n                        });\n                    });\n\n                    console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n                    console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n                    // Send the payload to the backend\n                    const response = await fetch("/tasks/reorder_subtasks", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                            "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n                        },\n                        body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n                    });\n\n                    if (!response.ok) {\n                        const errorData = await response.json();\n                        console.error("Error reordering tasks:", errorData);\n                        alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n                        return;\n                    }\n\n                    const data = await response.json();\n                    console.log("Task reordering successful:", data);\n\n                } catch (error) {\n                    console.error("Error during drag-and-drop operation:", error);\n                    alert("An unexpected error occurred while reordering tasks.");\n                }\n            },\n        });\n\n        window.isDragAndDropInitialized = true;\n        console.log("Drag-and-drop initialized successfully.");\n    },\n};\n```\n\nKey Updates:\n\t1.\tPrecomputed Map (taskParentMap):\n\t‚Ä¢\tThe initTaskParentMap function initializes the map by iterating over DOM elements and mapping each task‚Äôs ID to its parent ID.\n\t‚Ä¢\tThe updateTaskParentMap dynamically updates the map when tasks are reordered.\n\t2.\tEfficient Parent Lookup:\n\t‚Ä¢\tThe parentId is derived from the precomputed map rather than DOM traversal.\n\t3.\tBackend Payload:\n\t‚Ä¢\tA structured payload (reorderedTasks) is sent to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t‚Ä¢\tCSRF protection is ensured by passing the token to the request headers.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:44:08.338301', 'updated_at': '2025-02-06T21:59:17.417466'}, {'id': 134, 'name': 'Step 2: Update the Backend in routes.py', 'description': 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\nPlan for step 2:\n\t1.\tVerify the payload structure:\n\t‚Ä¢\tEnsure that the payload includes all necessary fields (id, sort_order, parent_id) for each task.\n\t‚Ä¢\tValidate that the parent-child relationships in the precomputed map (taskParentMap) are reflected correctly in the payload.\n\t2.\tSubmit the payload to the backend:\n\t‚Ä¢\tEnhance the fetch request in the onEnd function of initDragAndDrop to log detailed submission data.\n\t‚Ä¢\tConfirm the payload integrity in the browser console before submission.\n\t3.\tUpdate backend logging:\n\t‚Ä¢\tAdd logging to /reorder_subtasks in routes.py to confirm receipt of the correct payload and process parent-child updates.\n\t‚Ä¢\tLog before and after database updates for better debugging.\n\n-----\nUpdated tasks_table_interactions.js\n\nReplace this section:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    let parentId = null;\n```\nWith:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    const parentId = this.taskParentMap.get(taskId) || null;\n```\nThe this.taskParentMap provides a precomputed and dynamic mapping of taskId to parentId. By using this map, we avoid relying on DOM traversal logic (row.closest or row.previousElementSibling) during drag-and-drop operations, which can sometimes be unreliable or cumbersome.\n\nFull Revised onEnd section:\n```\nonEnd: async (event) => {\n    try {\n        console.log("Drag-and-drop operation started...");\n        const rows = Array.from(event.from.querySelectorAll(".task-row"));\n        const reorderedTasks = [];\n\n        rows.forEach((row, index) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = this.taskParentMap.get(taskId) || null;\n\n            // Update the taskParentMap dynamically\n            this.updateTaskParentMap(taskId, parentId);\n\n            reorderedTasks.push({\n                id: taskId,\n                sort_order: index + 1,\n                parent_id: parentId,\n            });\n        });\n\n        console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n        console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n        // Send the payload to the backend\n        const response = await fetch("/tasks/reorder_subtasks", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n            },\n            body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error("Error reordering tasks:", errorData);\n            alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n            return;\n        }\n\n        const data = await response.json();\n        console.log("Task reordering successful:", data);\n\n    } catch (error) {\n        console.error("Error during drag-and-drop operation:", error);\n        alert("An unexpected error occurred while reordering tasks.");\n    }\n}\n```\n---------------------------------\nEnsure updates include:\n\t‚Ä¢\tBetter Logging: Adding logs for key events such as database changes and validation results.\n\t‚Ä¢\tInput Validation: Ensure all required fields (id, sort_order, parent_id) exist in the payload.\n\t‚Ä¢\tPost-Commit Validation: Confirm database updates after the commit.\n\t‚Ä¢\tImproved Error Handling: Include specific error messages and consistent rollback mechanisms.\n\nBelow is the revised reorder_subtasks route with descriptive comments for each section:\n```\n@bp.route("/reorder_subtasks", methods=["POST"])\ndef reorder_subtasks():\n    """\n    Reorder subtasks globally or reassign them to a different parent.\n\n    Steps:\n    - Parse and validate input from the frontend.\n    - Update parent-child relationships and sort order in the database.\n    - Commit changes and return a success response.\n    - Handle errors gracefully and provide detailed logs for debugging.\n    """\n    logger.info("Entering reorder_subtasks route...")\n    logger.info(f"Received payload for reordering tasks: {request.json}")\n\n    try:\n        # Step 1: Parse input\n        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered\n        ordered_tasks = request.json.get("ordered_tasks", [])\n\n        logger.debug(f"Parsed parent_id: {parent_id}")\n        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")\n\n        # Step 2: Validate input\n        if not isinstance(ordered_tasks, list) or not all(\n            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task\n            for task in ordered_tasks\n        ):\n            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")\n            return jsonify({\n                "error": "Invalid input format for \'ordered_tasks\'. Each task must include \'id\', \'sort_order\', and \'parent_id\'."\n            }), 400\n\n        # Step 3: Validate parent task (if applicable)\n        if parent_id is not None:\n            parent_task = Task.query.get(parent_id)\n            if not parent_task:\n                logger.error(f"Parent task with ID {parent_id} not found.")\n                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400\n\n        logger.info("Input validation passed. Proceeding with task updates...")\n\n        # Step 4: Process updates for each subtask\n        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation\n\n        for task_data in ordered_tasks:\n            subtask_id = task_data["id"]\n            sort_order = task_data["sort_order"]\n            new_parent_id = task_data["parent_id"]\n\n            # Fetch the subtask from the database\n            subtask = Task.query.get(subtask_id)\n            if not subtask:\n                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")\n                continue\n\n            # Log and update parent_id if it changes\n            if new_parent_id is not None and new_parent_id != subtask.parent_id:\n                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")\n                subtask.parent_id = new_parent_id\n\n            # Update sort order\n            subtask.sort_order = sort_order\n            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")\n\n            # Add to the list of updated subtasks for validation\n            updated_subtasks.append(subtask)\n\n        # Step 5: Commit changes to the database\n        try:\n            db.session.commit()\n            logger.info(f"Subtasks reordered successfully: {[task[\'id\'] for task in ordered_tasks]}")\n        except Exception as e:\n            logger.error(f"Error committing changes to the database: {str(e)}")\n            db.session.rollback()\n            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500\n\n        # Step 6: Post-commit validation\n        for subtask in updated_subtasks:\n            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")\n            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")\n\n        # Step 7: Return success response\n        return jsonify({\n            "success": True,\n            "message": "Subtasks reordered successfully.",\n            "updated_subtasks": [subtask.id for subtask in updated_subtasks]\n        }), 200\n\n    except Exception as e:\n        # Step 8: Handle unexpected errors\n        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)\n        db.session.rollback()\n        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500\n```\nKey Changes and Descriptive Comments\n\t1.\tInput Parsing:\n\t‚Ä¢\tExtracts parent_id and ordered_tasks from the request payload.\n\t‚Ä¢\tLogs the parsed values for debugging.\n\t2.\tInput Validation:\n\t‚Ä¢\tEnsures ordered_tasks is a list of dictionaries with the required keys.\n\t‚Ä¢\tValidates parent_id if provided, ensuring the parent task exists in the database.\n\t3.\tUpdate Processing:\n\t‚Ä¢\tIterates through ordered_tasks, updating each task‚Äôs parent_id and sort_order.\n\t‚Ä¢\tLogs changes for each task.\n\t4.\tDatabase Commit:\n\t‚Ä¢\tCommits all updates in a single transaction.\n\t‚Ä¢\tLogs success or rolls back changes in case of an error.\n\t5.\tPost-Commit Validation:\n\t‚Ä¢\tVerifies that the parent_id and sort_order changes were successfully saved to the database.\n\t6.\tError Handling:\n\t‚Ä¢\tCaptures and logs exceptions during processing or committing.\n\t‚Ä¢\tProvides meaningful error messages to the frontend.\n\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:46:29.348853', 'updated_at': '2025-02-06T21:59:21.617065'}, {'id': 131, 'name': 'Step 5: Update utils.py', 'description': 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nChanges to Make:\n\t1.\tEnhance Task Filtering:\n\t‚Ä¢\tEnsure the filters handle parent-child relationships explicitly.\n\t‚Ä¢\tAdd options to include or exclude subtasks in queries.\n\t2.\tUtility Function for Debugging Parent-Child Relationships:\n\t‚Ä¢\tProvide a function to generate a map or list of parent-child relationships for debugging purposes.\n\t3.\tValidation Functions:\n\t‚Ä¢\tAdd a utility function to validate parent-child relationships and ensure no circular dependencies.\n\nUpdated utils.py Code:\n```\nimport logging\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import joinedload\nfrom app.extensions.db import db\nfrom app.tasks.models import Task\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\n\nclass TaskService:\n    @staticmethod\n    def filter_tasks(filters=None, include_subtasks=True, page=None, per_page=None):\n        """\n        Dynamically filters tasks with an option to include or exclude subtasks.\n\n        Args:\n            filters (dict): Filtering criteria.\n            include_subtasks (bool): Whether to include subtasks in the query.\n            page (int, optional): Page number for pagination.\n            per_page (int, optional): Items per page for pagination.\n\n        Returns:\n            Query or Pagination: A SQLAlchemy query object or paginated results.\n        """\n        query = Task.query.options(\n            db.joinedload(Task.project).joinedload(Project.contributors),\n            db.joinedload(Task.contributor),\n            db.joinedload(Task.children),\n        ).order_by(Task.sort_order)\n\n        if filters:\n            logger.debug(f"Applying filters: {filters}")\n\n            # Apply standard filters\n            if "is_archived" in filters:\n                query = query.filter(Task.is_archived == filters["is_archived"])\n            if "project_id" in filters:\n                query = query.filter(Task.project_id == filters["project_id"])\n            if "task_type" in filters:\n                if isinstance(filters["task_type"], list):\n                    query = query.filter(Task.task_type.in_(filters["task_type"]))\n                else:\n                    query = query.filter(Task.task_type == filters["task_type"])\n            if "completion_status" in filters:\n                completion_map = {"completed": True, "in_progress": False}\n                if filters["completion_status"] in completion_map:\n                    query = query.filter(Task.completed == completion_map[filters["completion_status"]])\n\n            # Optionally exclude subtasks\n            if not include_subtasks:\n                query = query.filter(Task.task_type != "Subtask")\n\n        logger.debug(f"Generated query: {query}")\n\n        # Pagination\n        if page and per_page:\n            return query.paginate(page=page, per_page=per_page, error_out=False)\n        return query\n\n    @staticmethod\n    def debug_parent_child_relationships(project_id=None):\n        """\n        Generates a debug map of parent-child relationships for all tasks.\n\n        Args:\n            project_id (int, optional): Restrict to tasks from a specific project.\n\n        Returns:\n            dict: A dictionary mapping parent IDs to their child task IDs.\n        """\n        query = Task.query\n        if project_id:\n            query = query.filter(Task.project_id == project_id)\n\n        tasks = query.options(\n            db.load_only(Task.id, Task.parent_id)\n        ).all()\n\n        relationship_map = {}\n        for task in tasks:\n            if task.parent_id not in relationship_map:\n                relationship_map[task.parent_id] = []\n            relationship_map[task.parent_id].append(task.id)\n\n        logger.debug(f"Parent-Child Relationship Map: {relationship_map}")\n        return relationship_map\n\n    @staticmethod\n    def validate_parent_child_relationships():\n        """\n        Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.\n\n        Raises:\n            ValueError: If invalid relationships are detected.\n        """\n        tasks = Task.query.options(db.joinedload(Task.parent)).all()\n\n        for task in tasks:\n            if task.parent_id:\n                parent_task = task.parent\n                if not parent_task:\n                    raise ValueError(f"Task {task.id} has an invalid parent ID {task.parent_id}.")\n\n                # Validate hierarchy rules\n                if task.task_type == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError(f"User Story {task.id} must have an Epic as its parent.")\n                if task.task_type == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError(f"Subtask {task.id} must have a User Story as its parent.")\n\n        logger.info("All parent-child relationships are valid.")\n\n    @staticmethod\n    def get_all_task_ids_with_parents():\n        """\n        Returns a flat list of tasks with their parent IDs for debugging.\n\n        Returns:\n            list: A list of tuples (task_id, parent_id).\n        """\n        tasks = Task.query.with_entities(Task.id, Task.parent_id).all()\n        logger.debug(f"Task IDs with Parent IDs: {tasks}")\n        return tasks\n```\n\n\nExplanation of Changes:\n\t1.\tfilter_tasks Enhancements:\n\t‚Ä¢\tAdded include_subtasks parameter to optionally exclude subtasks from the query.\n\t2.\tdebug_parent_child_relationships:\n\t‚Ä¢\tCreates a parent-child relationship map for debugging purposes.\n\t3.\tvalidate_parent_child_relationships:\n\t‚Ä¢\tIterates through all tasks to validate parent-child hierarchy and ensures no invalid relationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t‚Ä¢\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.091824', 'updated_at': '2025-01-16T19:22:36.236691'}, {'id': 135, 'name': 'Step 3: Update list.html', 'description': 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already includes everything needed. No required changes.\n\nHere¬¥s the relevant section of list.html:\n\n```\n<tr id="task-{{ task.id }}"\n                class="task-row {% if task.task_type == \'Subtask\' %}subtask-row{% elif task.task_type == \'User Story\' %}user-story-row{% elif task.task_type == \'Epic\' %}epic-row{% endif %}"\n                style="background-color: \n                {% if task.task_type == \'Subtask\' %}\n                    rgba(200, 230, 255, 0.5); /* Light blue for Subtask */\n                {% elif task.task_type == \'User Story\' %}\n                    rgba(255, 255, 200, 0.5); /* Light yellow for User Story */\n                {% elif task.task_type == \'Epic\' %}\n                    rgba(255, 200, 200, 0.5); /* Light red for Epic */\n                {% else %}\n                    rgba(240, 240, 240, 1); /* Default light gray */\n                {% endif %};"\n                data-task-id="{{ task.id }}"\n                data-parent-id="{{ task.parent_id or \'\' }}"\n                data-level="{{ depth }}">\n                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>\n                <td>\n                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}\n                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}" aria-label="Toggle details for task {{ task.name }}">\n                        <i class="bi bi-chevron-right"></i>\n                    </button>\n                    {% endif %}\n                </td>\n                <td class="fw-medium fs-6 \n                {% if task.task_type == \'Epic\' %}\n                    epic-cell\n                {% elif task.task_type == \'User Story\' %}\n                    user-story-cell\n                {% elif task.task_type == \'Subtask\' %}\n                    subtask-cell\n                {% endif %}" \n                style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">\n                <span class="bi fs-6\n                {% if task.task_type == \'Epic\' %}\n                    bi-circle-fill\n                {% elif task.task_type == \'User Story\' %}\n                    bi-circle-half\n                {% elif task.task_type == \'Subtask\' %}\n                    bi-circle\n                {% endif %}">\n                </span>\n                {{ task.name }}\n                <small class="text-muted fw-light">\n                    (Parent-ID: {{ task.parent_id or \'None\' }})\n                </small>\n                <!-- Open Link -->\n                <a href="#" class="task-open-link" data-task-id="{{ task.id }}">\n                    <i class="bi bi-arrows-angle-expand" style="font-size: 0.8rem; color: white;"></i>\n                    Open\n                </a>\n            </td>\n                <td class="fw-light fs-6">\n                    <small class>\n                    LAC-{{ task.id }}\n                    </small>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light text-bg-secondary">\n                        {{ task.project if task.project else "Unknown Project" }}\n                    </span>\n                </td>\n                <td class="fs-6" data-contributor-column>{{ task.assigned_to if task.assigned_to else "Unassigned" }}</td>\n                <td class="fs-6">{{ task.story_points }}</td>\n                <td class="fs-6">\n                    <span class="badge rounded-pill fw-light text-bg-light">\n                        {{ task.task_type }}\n                    </span>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light {% if task.completed %}text-bg-success{% else %}text-bg-warning{% endif %}">\n                        {{ "Completed" if task.completed else "In Progress" }}\n                    </span>\n                </td>\n                <td>\n                    <!-- Delete Icon -->\n                    <button class="btn btn-dark btn-sm delete-task-btn" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .2rem; --bs-btn-font-size: .75rem;" data-task-id="{{ task.id }}" aria-label="Deletes task {{ task.id }}">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n            </tr>\n            {% for child in tasks if child.parent_id == task.id %}\n                {{ render_task(child, tasks, depth + 1) }}\n            {% endfor %}\n            {% endmacro %}\n            \n            <!-- Render top-level tasks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:46:29.349784', 'updated_at': '2025-01-16T19:22:36.238473'}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'description': 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitHub Login involves integrating OAuth 2.0, which both services support. The complexity depends on your app‚Äôs existing setup, frameworks, and experience with third-party authentication. Below is a breakdown:\n\nKey Steps for Implementing Google or GitHub Login\n\t1.\tSet Up OAuth Credentials:\n\t‚Ä¢\tRegister your application in the Google Cloud Console or GitHub Developer Settings.\n\t‚Ä¢\tObtain the client ID and client secret.\n\t2.\tInstall Required Libraries:\n\t‚Ä¢\tUse a library for OAuth (e.g., flask-oauthlib, python-social-auth, or authlib).\n\t‚Ä¢\tPopular frameworks like Flask and Django already have robust integrations for OAuth providers.\n\t3.\tBackend Configuration:\n\t‚Ä¢\tImplement an endpoint to handle the OAuth flow (/auth/login/google or /auth/login/github).\n\t‚Ä¢\tConfigure your app to send users to Google or GitHub‚Äôs authentication page.\n\t‚Ä¢\tHandle the OAuth callback to exchange the authorization code for an access token.\n\t‚Ä¢\tVerify the token and fetch user information (e.g., email, name).\n\t4.\tLink OAuth to User Registration:\n\t‚Ä¢\tOn successful login, create or retrieve a user in your database.\n\t‚Ä¢\tStore the user‚Äôs details like email, OAuth provider ID, and access token.\n\t5.\tFrontend Integration (if applicable):\n\t‚Ä¢\tAdd ‚ÄúLogin with Google‚Äù or ‚ÄúLogin with GitHub‚Äù buttons.\n\t‚Ä¢\tRedirect to your backend‚Äôs OAuth endpoint when clicked.', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T12:15:54.291625', 'updated_at': '2025-01-16T19:22:36.239866'}, {'id': 62, 'name': 'Add OAuth integration for Google Login', 'description': 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.241200'}, {'id': 64, 'name': 'Setup project credentials for Google API', 'description': 'Generate client ID and secret from Google API Console for your application.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-01-16T19:22:36.242497'}, {'id': 67, 'name': 'Test Google OAuth flow', 'description': 'Verify the OAuth flow using test accounts and check the token exchange.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.243780'}, {'id': 65, 'name': 'Implement backend endpoints for Google OAuth', 'description': 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-01-16T19:22:36.244932'}, {'id': 63, 'name': 'Add OAuth integration for GitHub Login', 'description': 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.246358'}, {'id': 68, 'name': 'Register application in GitHub Developer Console', 'description': 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.247746'}, {'id': 69, 'name': 'Handle callback from GitHub', 'description': 'Implement the callback endpoint to process the authorization code from GitHub.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.248912'}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'description': 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 18, 'status': 'Not Started', 'created_at': '2025-01-07T19:53:50.085064', 'updated_at': '2025-01-16T19:22:36.250169'}, {'id': 100, 'name': '1.1 User Registration', 'description': 'As a user, I want to register with a username, email, and password so that I can create an account and access the system.\n\n**Acceptance Criteria:**\n\n‚Ä¢\tUser can input valid username, email, and password.\n‚Ä¢\tUsername and email must be unique.\n‚Ä¢\tErrors are displayed for invalid inputs or duplicate accounts.\n‚Ä¢\tPasswords must meet complexity requirements and be securely stored.\n‚Ä¢\tSuccessful registration redirects users to a login page.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:59:09.044667', 'updated_at': '2025-01-16T19:22:36.251812'}, {'id': 107, 'name': '1.1.1 Database Changes for User Registration', 'description': '1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.\n   CREATE TABLE public.users (\n       id SERIAL PRIMARY KEY,\n       username VARCHAR(50) UNIQUE NOT NULL,\n       email VARCHAR(100) UNIQUE NOT NULL,\n       password_hash VARCHAR(255) NOT NULL,\n       created_at TIMESTAMP DEFAULT NOW(),\n       updated_at TIMESTAMP DEFAULT NOW()\n);\n\n\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-11T11:36:20.238219'}, {'id': 108, 'name': '1.1.2 Backend API for Registration', 'description': '‚Ä¢\tCreate an endpoint POST /api/register:\n‚Ä¢\tValidate input fields.\n‚Ä¢\tHash the password using bcrypt or argon2.\n‚Ä¢\tInsert the user into the users table.\n‚Ä¢\tReturn success/failure responses.\ndddhfff\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:33.067643'}, {'id': 112, 'name': '1.2.2 Frontend Login Page', 'description': 'Develop a frontend form for user login with email and password inputs.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.683644'}, {'id': 109, 'name': '1.1.3 Create Frontend Registration Page', 'description': 'Develop a frontend form to collect user registration details.\n‚Ä¢\tAdd a form for username, email, and password inputs.\n‚Ä¢\tUse client-side validation (e.g., email format).\n‚Ä¢\tSend a POST request to /api/register.\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.684988'}, {'id': 110, 'name': '1.1.4 Unit Tests for Registration', 'description': 'Write unit tests for:\n\n‚Ä¢\tValid registration.\n‚Ä¢\tDuplicate username/email scenarios.\n‚Ä¢\tInvalid input handling.\nff', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.686902'}, {'id': 101, 'name': '1.2 User Login', 'description': 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n‚Ä¢\tUsers can log in with a valid email and password.\n‚Ä¢\tErrors are displayed for invalid credentials.\n‚Ä¢\tSuccessful login stores a session or JWT token.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:25:53.687936'}, {'id': 111, 'name': '1.2.1 Backend API for Login', 'description': 'Create POST /api/login endpoint to handle user login.\njjsjj', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.689096'}, {'id': 113, 'name': '1.2.3 Session Management', 'description': 'Implement secure session handling using cookies or JWT.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:20.968680'}, {'id': 114, 'name': '1.2.4 Unit Tests for Login', 'description': 'Write tests for successful and failed login attempts.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:22:36.265866'}, {'id': 106, 'name': 'Password Reset', 'description': 'As a user, I want to reset my password securely using email.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.267247'}, {'id': 128, 'name': 'Frontend Password Reset Page', 'description': 'Develop a page for users to enter a new password using a valid token.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.269158'}, {'id': 129, 'name': 'Testing Password Reset', 'description': 'Write tests for email delivery, token validation, and password updates.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.270849'}, {'id': 102, 'name': 'Logout', 'description': 'As a user, I want to log out so that I can end my session securely.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.272605'}, {'id': 117, 'name': 'Tests for Logout', 'description': 'Verify session invalidation and redirection to the login page.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.274575'}, {'id': 116, 'name': 'Frontend Logout Button', 'description': 'Add a logout button to the UI and handle session clearing.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-09T12:31:17.939784'}, {'id': 115, 'name': 'Backend API for Logout', 'description': 'Create POST /api/logout endpoint to invalidate user sessions.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.277547'}, {'id': 61, 'name': 'Parent task assignment', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-04T22:31:45.205815', 'updated_at': '2025-01-16T19:22:36.279012'}, {'id': 45, 'name': 'Display Default Value in Dropdown', 'description': 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.280493'}, {'id': 50, 'name': 'Retrieve Current Parent Task', 'description': 'Retrieve the current parent task‚Äôs ID and name from the backend.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'In Progress', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:22.274304'}, {'id': 51, 'name': 'Set Default Value', 'description': 'Set the default value in the dropdown based on the retrieved data.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 45, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 1, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.283309'}, {'id': 46, 'name': 'Search for Parent Tasks', 'description': 'Allow users to search for tasks dynamically in the dropdown by typing.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.284882'}, {'id': 54, 'name': 'Test Partial Matching', 'description': 'Ensure the search results update in real-time as the user types.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:29.251047'}, {'id': 47, 'name': 'Handle Large Datasets Efficiently', 'description': 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:26:23.067490'}, {'id': 56, 'name': 'Paginate API Responses', 'description': 'Implement server-side filtering and pagination for large datasets.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:16.233517'}, {'id': 55, 'name': 'Enable Lazy Loading', 'description': 'Enable lazy loading or virtualization in Virtual Select.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:08.099271'}, {'id': 48, 'name': 'Select and Deselect Parent Tasks', 'description': 'Allow users to select a parent task or deselect by choosing "None."', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:25:59.651639'}, {'id': 57, 'name': 'Ensure None Option Availability', 'description': 'Add ‚ÄúNone‚Äù as a selectable option and ensure it stays at the top of the list.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:51.310240'}, {'id': 58, 'name': 'Handle Selection Events', 'description': 'Implement event listeners to update the form‚Äôs state when the selection changes.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:43.569501'}, {'id': 49, 'name': 'Integrate Dropdown with Task Form', 'description': 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:25:36.133259'}, {'id': 59, 'name': 'Bind Dropdown to Form Field', 'description': 'Bind the dropdown to the form‚Äôs parent task field.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:15.491910'}, {'id': 60, 'name': 'Test Form Submission', 'description': 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:28.367797'}, {'id': 41, 'name': 'Implement Searchable Dropdown', 'description': 'As a user, I want a searchable dropdown for parent task assignment.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Completed', 'created_at': '2025-01-03T09:14:28.285904', 'updated_at': '2025-02-11T08:25:07.992524'}, {'id': 52, 'name': 'Add Search Box to Dropdown', 'description': 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:01.469601'}, {'id': 53, 'name': 'Implement AJAX Search', 'description': 'Implement AJAX-based search to fetch tasks dynamically from the backend.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:24:54.245010'}, {'id': 42, 'name': 'Choose Dropdown Library', 'description': 'Research and decide on the dropdown library to use.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-11T08:24:47.274896'}, {'id': 43, 'name': 'Integrate Dropdown Library', 'description': 'Integrate the chosen dropdown library into the project.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Completed', 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-11T08:24:33.908549'}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t‚Ä¢\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t‚Ä¢\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t‚Ä¢\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-02-11T08:24:26.494016'}, {'id': 85, 'name': 'Assign multiple contributors to a task', 'description': 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:32:39.466022', 'updated_at': '2025-02-11T08:24:21.069473'}, {'id': 90, 'name': 'Update frontend to display and manage multiple contributors', 'description': 'Allow users to view, add, or remove multiple contributors via the UI.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-11T08:24:13.204884'}, {'id': 88, 'name': 'Update database schema for multiple contributors', 'description': 'Modify the task table to support many-to-many relationships for contributors.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-11T08:24:05.873554'}, {'id': 89, 'name': 'Develop backend API for adding contributors to a task', 'description': 'Create endpoints to add, update, and remove contributors for a task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-11T08:23:58.436495'}, {'id': 86, 'name': 'Allow designation of task owner', 'description': 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:29.330562', 'updated_at': '2025-02-11T08:23:51.269557'}, {'id': 93, 'name': 'Update frontend to manage task ownership', 'description': 'Allow users to assign or update the task owner via the UI.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-11T08:23:42.771565'}, {'id': 91, 'name': 'Update database schema for task ownership', 'description': 'Add a column or relationship to assign a single owner per task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-11T08:23:33.670381'}, {'id': 92, 'name': 'Develop backend API for assigning task owner', 'description': 'Create endpoints to assign or update the owner of a task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-11T09:19:44.027744'}, {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-02-11T08:23:23.402442'}, {'id': 96, 'name': 'Allow admin users to create and customize contributor roles via frontend', 'description': 'Provide UI functionality for admins to manage contributor roles dynamically.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T08:23:13.139282'}, {'id': 94, 'name': 'Add database support for contributor roles', 'description': 'Introduce a roles table and link contributors to specific roles for tasks.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T08:22:56.181530'}, {'id': 95, 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T08:22:02.276492'}, {'id': 127, 'name': 'Backend API for Password Reset', 'description': 'Create endpoints to handle password reset requests and token validation.\ndfdf\n\nasdasd', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-10T23:59:50.734037'}, {'id': 126, 'name': 'Email Configuration for Password Reset', 'description': 'Configure email service to send password reset links.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.334340'}, {'id': 104, 'name': 'Middleware for Role Enforcement', 'description': 'As a system, I want to enforce role-based access to specific routes.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:23:40.346816'}, {'id': 122, 'name': 'Testing Role Enforcement', 'description': 'Write tests to ensure proper access control based on roles.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-01-16T19:23:58.185693'}, {'id': 121, 'name': 'Develop Role Enforcement Middleware', 'description': 'Implement middleware to check user roles for access control.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-01-16T19:23:58.187439'}, {'id': 105, 'name': 'Profile Management', 'description': 'As a user, I want to update my profile (username, email, password).', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.339830'}, {'id': 123, 'name': 'Backend API for Profile Management', 'description': 'Create PATCH /api/profile endpoint to update user details.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-01-16T19:24:19.678781'}, {'id': 125, 'name': 'Testing Profile Updates', 'description': 'Write tests for profile update functionality.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-01-16T19:24:19.680382'}]
2025-02-13 23:45:45,562 DEBUG: Task types: ['all', 'Epic', 'Subtask', 'User Story']
2025-02-13 23:45:45,562 DEBUG: Projects: [<Project Project Alpha (ID: 1)>, <Project Project Beta (ID: 2)>, <Project Project Gamma (ID: 3)>, <Project Project Theta (ID: 4)>, <Project Project Delta (ID: 5)>, <Project PMS - Feature Requests (ID: 7)>, <Project PMS - Backlog (ID: 6)>]
2025-02-13 23:45:45,563 DEBUG: Tasks response: [{'id': 290, 'name': 'issue: error when changing task type and', 'description': 'issue: error when changing task type and parent task before saving', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:00:03.417734', 'updated_at': '2025-02-10T09:15:09.284969'}, {'id': 298, 'name': 'example user story with parent epic 297', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 297, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:41:01.907455', 'updated_at': '2025-02-10T14:59:04.142570'}, {'id': 275, 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-10T08:38:37.622196'}, {'id': 276, 'name': 'add support for priority', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-10T08:28:47.447612'}, {'id': 264, 'name': 'close all / open all childtasks', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-02-10T08:47:14.915970'}, {'id': 285, 'name': 'add text truncation to project names in task list', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-10T09:45:47.029729'}, {'id': 257, 'name': 'Update Task API Integration', 'description': "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-02-05T22:55:49.566819', 'updated_at': '2025-02-05T22:18:17.807154'}, {'id': 294, 'name': 'issue: task table filters not working', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:19:21.022598', 'updated_at': '2025-02-12T10:59:15.483390'}, {'id': 267, 'name': 'improvements to toggles and nested tasks', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:29:12.464594', 'updated_at': '2025-02-10T08:47:24.581680'}, {'id': 283, 'name': 'fix update title', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:58.769700', 'updated_at': '2025-02-10T08:46:47.282087'}, {'id': 271, 'name': 'make sure dynamically added rows has the exact same styling and includes every element', 'description': 'Missing elements:\n- Open link\n- Default project\n- Project name should be inside a pill\n- Task type should be in a pill\n- Estimations should be 0, not N/A\n- Make sure font size is matching\n- status should have the dropdown inside a pill\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:21:07.108431', 'updated_at': '2025-02-10T08:38:47.340105'}, {'id': 273, 'name': 'disable parent task selector in epics', 'description': 'and add text, Epic can¬¥t have parent tasks', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:45:20.740910', 'updated_at': '2025-02-10T08:39:17.639890'}, {'id': 269, 'name': 'fix styling for sweetalert', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-02-08T15:54:56.717846', 'updated_at': '2025-02-10T08:39:32.172437'}, {'id': 286, 'name': 'add support for labels/tags', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:46:23.985620', 'updated_at': '2025-02-10T09:46:23.987564'}, {'id': 299, 'name': 'example sub task with parent user story 298', 'description': 'Test update 1\nTest update 2\nTest update 3', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 298, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:42:38.905700', 'updated_at': '2025-02-10T23:23:08.671464'}, {'id': 266, 'name': 'highlight the nested tasks', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-02-10T08:47:04.382929'}, {'id': 279, 'name': 'github integration', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:38.238202', 'updated_at': '2025-02-10T08:39:24.168451'}, {'id': 289, 'name': 'issue: parent task is lost when updating task', 'description': '- Summary of the problem and solution\n    \n    **Problem: Parent Task Dropdown Was Not Being Set on Modal Open**\n    \n    The issue was that when opening a task modal, the **parent task dropdown** was not pre-populated with the correct parent task. However, interacting with the dropdown (e.g., clicking on it) would suddenly trigger it to be set correctly. This meant that the dropdown initialization was likely delayed or missing a step in the modal lifecycle.\n    \n    **Debugging Steps and Observations**\n    \n    1. **Task Details Were Fetched Correctly** ‚úÖ\n    - The task details, including parent_id, were being fetched from the API successfully.\n    1. **Parent Dropdown Initialization Issues** ‚ùå\n    - The initializeParentDropdown() function was being called, but the dropdown was sometimes **not fully ready** when we tried to set the selected parent task.\n    1. **Clicking the Dropdown Triggered the Parent to Be Set** ü§î\n    - This hinted that the dropdown was not fully ready when setParentDropdown(task.parent_id) was initially called.\n    \n    **Final Solution**\n    \n    1. **Ensuring Dropdown Readiness Before Setting the Parent Task**\n    - We added explicit **delays and checks** to confirm that the dropdown was fully initialized before attempting to set the parent task.\n    \n    Specifically, we:\n    \n    - **Waited for the dropdown to appear in the DOM** using observeParentDropdown().\n    - **Initialized the dropdown** with initializeParentDropdown().\n    - **Waited explicitly for the dropdown to be fully ready** using waitForParentDropdownReady().\n    - **Added a final delay of 200ms** before calling setParentDropdown() to ensure stability.\n    1. **Modifying openTaskModal to Handle Parent Dropdown Setup**\n    - We ensured that initializeParentDropdown() was called **after fetching task details** and before setting the parent task.\n    1. **Confirming the Fix** üéØ\n    - After these fixes, the parent dropdown was **immediately populated** upon opening the modal, without requiring user interaction.\n    \n    **Key Learnings**\n    \n    ‚úÖ **Dropdowns in modals need careful timing** ‚Äì They might not be ready when you expect them to be.\n    \n    ‚úÖ **Waiting for DOM updates is crucial** ‚Äì Observing the element ensures it actually exists before interacting with it.\n    \n    ‚úÖ **Explicit delays can prevent race conditions** ‚Äì A small delay can sometimes resolve timing issues in UI interactions.\n    \n    **Final Result**\n    \n    ‚úÖ The modal now **correctly loads and pre-selects the parent task** without extra clicks! üéâüöÄ', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T08:56:25.273984', 'updated_at': '2025-02-11T15:40:03.610698'}, {'id': 278, 'name': 'search feature for tasks list', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:03.369833', 'updated_at': '2025-02-10T08:39:04.005957'}, {'id': 281, 'name': 'add high level plan', 'description': 'Add some sort of high level plan that aims to keep PM/PO¬¥s on track and not get lost into the details of an overwhelminly large backlog', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:27:01.218606', 'updated_at': '2025-02-10T08:38:54.754760'}, {'id': 287, 'name': 'when moving a parent item to another project make sure the subtasks are moved as well', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:48:31.986870', 'updated_at': '2025-02-10T09:48:31.988859'}, {'id': 272, 'name': 'implement a markdown text editor like notion', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-02-10T08:28:39.669255'}, {'id': 293, 'name': 'click on title should copy the task title and id to clipboard', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:16:33.508209', 'updated_at': '2025-02-10T10:16:33.510414'}, {'id': 277, 'name': 'custom task workflow statuses', 'description': 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- Custom status\n-- Custom status\n- In Progress\n-- Custom status\n-- Custom status\n-- Custom status\n- Completed\n-- Custom status\n-- Custom status\n\n2. How can we track a task through different stages and save the sequence of events or stages the task has gone through?\nI¬¥m thinking it could be good for mapping out processes, identifying bottlenecks and provide valuable insights while improving and streamlining workflows.\n- Stages\n- Contacts taken\n- Respons time \n- Time to action after responses\n- Dependencies\n\nNeed to be able to record every action related to this action.\nCommunication integrations\n- Slack\n- Email\n- Text messages\n- Phonecalls\n- Calendar events, meetings\n- Zoom, Google meet, Teams etc..\n\n\n2. Set custom statuses per project (can use tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:16:03.352588', 'updated_at': '2025-02-10T08:38:28.123328'}, {'id': 274, 'name': 'add support for goals, initiatives, okr¬¥s', 'description': 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:46:27.204912', 'updated_at': '2025-02-10T08:28:17.663922'}, {'id': 280, 'name': 'logging (task and project history)', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:37:44.435112', 'updated_at': '2025-02-10T08:28:28.947805'}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:17.786154', 'updated_at': '2025-02-10T09:41:17.787861'}, {'id': 296, 'name': 'issue: contributor is lost after updating task', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:26:43.881947', 'updated_at': '2025-02-11T15:37:31.011120'}, {'id': 288, 'name': 'when trying to move subtask to another project, make sure a warning is displayed', 'description': 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be lost"\nOR\n\nIs it possible, and is it desireable to keep parent child relationships across projects?\nSo that a parent can be in one project but the child tasks can be in different projects?\n\nLets say \nParent epic is \n"Internationalisation"\nChild user stories are\n- Timezones\n- Language\n- Currency\n- Day, Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:54:36.297869', 'updated_at': '2025-02-10T08:54:51.840686'}, {'id': 284, 'name': 'add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-10T09:42:27.720908'}, {'id': 295, 'name': 'issue: drag and drop errors', 'description': '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:22:54.461413', 'updated_at': '2025-02-10T10:22:54.462542'}, {'id': 297, 'name': 'example parent epic', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:39:51.620509', 'updated_at': '2025-02-10T10:39:51.622712'}, {'id': 292, 'name': 'issue: assigning contributor does not work', 'description': '### **Summary of problem and solution**\n\nThe issue was that assigning a contributor to a task via the /tasks/<task_id>/assign_contributor API endpoint resulted in a **400 Bad Request** error. Upon investigation, the following problems were identified:\n\n1. **Missing CSRF Token:**\n- The request failed due to a missing CSRF token, as shown in the error message: *‚ÄúBad Request: The CSRF token is missing.‚Äù*\n- The frontend was not correctly including the CSRF token in the request headers.\n1. **JavaScript Error (Undefined CSRF Token Variable):**\n- The error *‚ÄúReferenceError: csrfToken is not defined‚Äù* indicated that the CSRF token was not being retrieved properly in the JavaScript code.\n1. **Incorrect Fetch Request Headers:**\n- The fetch request did not include the CSRF token under the correct key (X-CSRFToken).\n- The script attempted to send the request without properly extracting the CSRF token from the meta tag.\n\n### **Solution**\n\n1. **Include the CSRF Token in the JavaScript Code**\n\nThe CSRF token was retrieved from the meta tag and used in the request headers:\n\n```jsx\n// Retrieve CSRF token from meta tag\nconst csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\');\n```\n\nThis ensures that the CSRF token is correctly fetched and available in the JavaScript scope.\n\n1. **Modify the Fetch Request to Include CSRF Token**\n\nThe request to assign a contributor was updated to include the token:\n\n```jsx\nconst response = await fetch(`/tasks/${taskId}/assign_contributor`, {\n    method: "POST",\n    headers: { \n        "Content-Type": "application/json",\n        "X-CSRFToken": csrfToken  // Include CSRF token\n    },\n    body: JSON.stringify({ contributor_id: parseInt(contributorId, 10) }),\n});\n```\n\n- **Ensures the CSRF token is sent in the request headers** so that Flask-WTF does not reject the request.\n1. **Verify and Debug Network Requests**\n- The updated request headers were verified using **Chrome DevTools > Network tab** to ensure the X-CSRFToken was included.\n- The error messages disappeared, and the contributor assignment request **succeeded with a 200 OK response**.\n\n---\n\n### **Final Outcome**\n\nüöÄ The issue was resolved, and contributors can now be assigned successfully to tasks without triggering a CSRF validation error.\n\n### **Key Learnings from This Session**\n\nThis debugging session covered several important aspects of **web development with Flask and JavaScript**, particularly related to **API requests, CSRF protection, debugging tools, and database interactions**. Here are the key takeaways:\n\n---\n\n### **1. CSRF Protection in API Requests**\n\n- **Issue:** The initial error was due to **a missing CSRF token** when making a `POST` request.\n- **Fix:** The solution was to **retrieve the CSRF token from a meta tag** in the HTML and include it in the request headers.\n- **Key Learning:** Flask-WTF requires CSRF tokens for form and API submissions to **prevent cross-site request forgery (CSRF) attacks**.‚úÖ Always ensure that API requests include a valid CSRF token.\n\n---\n\n### **2. Debugging JavaScript Fetch Requests**\n\n- **Issue:** The JavaScript code was making a fetch request, but the variable `csrfToken` was not properly defined, causing a `ReferenceError`.\n- **Fix:** Declaring `csrfToken` at the beginning of the script:\n    \n    ```jsx\n    const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\');\n    ```\n    \n- **Key Learning:**‚úÖ JavaScript variables must be defined before they are used.‚úÖ Use browser **developer tools (DevTools) Network tab** to inspect headers, payloads, and responses when debugging API requests.\n\n---\n\n### **3. Structuring Flask Routes for Task Management**\n\n- **Issue:** The `assign_contributor` route was failing due to incorrect request payload validation.\n- **Fix:** Improved the route‚Äôs error handling and logging:\n    \n    ```python\n    @bp.route(\'/<int:task_id>/assign_contributor\', methods=[\'POST\'])\n    def assign_contributor(task_id):\n        try:\n            data = request.get_json()\n            contributor_id = int(data.get(\'contributor_id\', 0))\n            if not contributor_id:\n                return jsonify({\'error\': \'Valid Contributor ID is required\'}), 400\n    ```\n    \n- **Key Learning:**‚úÖ Always validate incoming data in Flask routes to prevent type errors.‚úÖ Use `request.get_json()` properly and handle missing or incorrect data gracefully.\n\n---\n\n### **4. Utilizing Browser DevTools for Debugging**\n\n- **Issue:** The fetch request was failing with a `400 Bad Request`, and the browser console showed `ReferenceError: csrfToken is not defined`.\n- **Fix:**\n    - Used **Network tab** to inspect the request payload and headers.\n    - Used **Console tab** to catch JavaScript errors early.\n- **Key Learning:**‚úÖ DevTools is a **critical** tool for diagnosing network request issues.‚úÖ Always **check console errors** before assuming it\'s a backend issue.\n\n---\n\n### **5. Database Queries and ORM Debugging**\n\n- **Issue:** Tasks were not being updated correctly, possibly due to missing commit statements.\n- **Fix:** Ensured that:was executed properly.\n    \n    ```python\n    task.contributor_id = contributor_id\n    db.session.commit()\n    ```\n    \n- **Key Learning:**‚úÖ Always call `db.session.commit()` after making changes in SQLAlchemy.‚úÖ Rollback transactions if an error occurs to avoid database inconsistency.\n\n---\n\n### **6. Handling Asynchronous JavaScript Logic**\n\n- **Issue:** The `assignContributor` function was executing before the page was fully loaded.\n- **Fix:** Wrapped it inside a function that ensures elements exist:\n    \n    ```\n    window.setupContributorAssignment = function () {\n        const assignButton = $("#assign-contributor-btn");\n        if (!assignButton.length) {\n            setTimeout(setupContributorAssignment, 500); // Retry in 500ms\n            return;\n        }\n    ```\n    \n- **Key Learning:**‚úÖ Use `setTimeout` to **retry event binding** when elements are dynamically loaded.‚úÖ Always **check if elements exist before attaching event handlers**.\n\n---\n\n### **7. Best Practices for Flask Logging & Error Handling**\n\n- **Issue:** Lack of clear logging when API calls failed.\n- **Fix:** Added better logging to track failures:\n    \n    ```python\n    logger.info(f"Assigning contributor to task ID {task_id}")\n    try:\n        # Process request...\n    except Exception as e:\n        logger.error(f"Error assigning contributor: {e}")\n    ```\n    \n- **Key Learning:**‚úÖ Log **every major step** in API processing to simplify debugging.‚úÖ Differentiate between `logger.info()`, `logger.warning()`, and `logger.error()` based on severity.\n\n---\n\n### **Final Takeaways**\n\nüöÄ **Understanding CSRF protection** and **properly structuring API requests** is crucial for secure web applications.\n\nüîç **Browser DevTools is invaluable** for diagnosing frontend issues, especially in JavaScript.\n\nüêç **Flask requires proper request validation, database transactions, and logging** to maintain stability.\n\n‚ö° **Asynchronous JavaScript must handle dynamic elements carefully** to avoid runtime errors.\n\nThis session reinforced best practices in **frontend-backend integration, debugging, and security**, making it a great learning experience! üöÄüî•', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:11:12.273779', 'updated_at': '2025-02-12T10:59:41.585250'}, {'id': 265, 'name': 'smooth transition for toggles', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-02-10T08:46:55.831743'}, {'id': 270, 'name': 'the newest task', 'description': '', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:07:34.368035', 'updated_at': '2025-02-10T01:07:34.372478'}, {'id': 291, 'name': 'add dropdowns in task list for changing: project, assigned to, estimate and task type (labels/tags)', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-02-10T10:09:52.997455'}, {'id': 136, 'name': 'Page scroll should stay in position when reloading', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-16T18:21:50.187247', 'updated_at': '2025-01-16T19:22:36.214901'}, {'id': 130, 'name': 'Implement the Map of Task Relationships solution for drag-and-drop', 'description': 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.093022', 'updated_at': '2025-01-16T19:22:36.216705'}, {'id': 133, 'name': 'Step 4: Enhance Logging in models.py', 'description': 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nupdating the Task model in the following ways:\n\n1.\tLog Changes to parent_id:\n\t‚Ä¢\tLog changes to parent_id during updates, including old and new values.\n\t2.\tValidate Hierarchy with Logging:\n\t‚Ä¢\tLog detailed messages when validating hierarchy changes, especially for circular dependency checks.\n\nHere‚Äôs how the models.py can be updated:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy import func, cast, CheckConstraint\nfrom sqlalchemy.orm import validates\nfrom app.extensions.db import db\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\nclass Task(db.Model):\n    __tablename__ = "task"\n    \n    # Other columns...\n\n    parent_id = db.Column(\n        db.Integer, db.ForeignKey("task.id"), index=True, nullable=True\n    )\n\n    # Relationships\n    parent = db.relationship(\n        "Task", remote_side=[id], back_populates="children", lazy="select"\n    )\n    children = db.relationship(\n        "Task", back_populates="parent", lazy="select"\n    )\n\n    \n\n\n    @staticmethod\n    def _validate_no_circular_references(new_parent_id):\n        """\n        Validates that there are no circular references in the task hierarchy.\n\n        Args:\n            new_parent_id (int): The new parent ID to validate.\n\n        Raises:\n            ValueError: If a circular reference is detected.\n        """\n        visited = set()\n        current_parent_id = new_parent_id\n\n        logger.info(f"Validating circular references for parent ID: {new_parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error(\n                    f"Circular reference detected: Parent ID {current_parent_id} already visited."\n                )\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            # Fetch the next parent_id in the hierarchy\n            parent = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not parent:\n                break  # Exit if no parent is found\n            current_parent_id = parent.parent_id\n\n        logger.info("No circular reference detected.")\n\n    @validates(\'parent_id\', \'task_type\')\n    def validate_task_changes(self, key, value):\n        """\n        Validates changes to \'parent_id\' and \'task_type\'.\n        Ensures hierarchy validity and checks for circular references.\n        """\n        logger.debug(f"Validating {key} change for Task {self.id}: {value}")\n\n        if key == \'parent_id\':\n            # Log changes to parent_id\n            if self.id and value != self.parent_id:\n                logger.info(f"Task {self.id}: Updating \'parent_id\' from {self.parent_id} to {value}")\n\n            # Prevent a task from being its own parent\n            if value and value == self.id:\n                logger.error("A task cannot be its own parent.")\n                raise ValueError("A task cannot be its own parent.")\n\n            # Check for circular references\n            if value:\n                Task.check_circular_reference(self.id, value)\n\n        elif key == \'task_type\':\n            # Log changes to task_type\n            if self.id and value != self.task_type:\n                logger.info(f"Task {self.id}: Updating \'task_type\' from {self.task_type} to {value}")\n\n        # Check hierarchy rules without triggering further validation\n        if key in [\'parent_id\', \'task_type\']:\n            self._validate_hierarchy_change(key, value)\n\n        logger.info(f"Validation passed for {key}: {value}")\n        return value\n\n    def _validate_hierarchy_change(self, key, value):\n        """\n        Validates hierarchy rules for the task based on `task_type` and `parent_id`.\n        """\n        if key == \'parent_id\' and value:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=value).first()\n            if not parent_task:\n                raise ValueError("Parent task does not exist.")\n\n            logger.debug(f"Validating hierarchy: Task {self.id}, Parent Type: {parent_task.task_type}")\n            if self.task_type == "User Story" and parent_task.task_type != "Epic":\n                raise ValueError("User Stories must have an Epic as a parent.")\n            if self.task_type == "Subtask" and parent_task.task_type != "User Story":\n                raise ValueError("Subtasks must have a User Story as a parent.")\n\n        elif key == \'task_type\' and self.parent_id:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=self.parent_id).first()\n            if parent_task:\n                logger.debug(f"Validating hierarchy: Task Type: {value}, Parent Type: {parent_task.task_type}")\n                if value == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError("User Stories must have an Epic as a parent.")\n                if value == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError("Subtasks must have a User Story as a parent.")\n\n        logger.info(f"Hierarchy validation passed for Task {self.id if self.id else \'New Task\'}.")\n\n    @staticmethod\n    def check_circular_reference(task_id, parent_id):\n        """\n        Iteratively checks for circular references in the task hierarchy.\n        Prevents stack overflow on deep hierarchies.\n        """\n        visited = set()\n        current_parent_id = parent_id\n\n        logger.info(f"Checking circular reference for Task {task_id} with Parent ID: {parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error("Circular reference detected!")\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            if current_parent_id == task_id:\n                logger.error("A task cannot be its own ancestor.")\n                raise ValueError("A task cannot be its own ancestor.")\n\n            # Fetch the next parent_id in the hierarchy\n            task = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not task:\n                break\n            current_parent_id = task.parent_id\n\n        logger.info("Circular reference check passed.")\n```\nKey Enhancements:\n\t1.\tlog_and_validate_parent_id_change:\n\t‚Ä¢\tLogs the old and new parent_id whenever it changes.\n\t‚Ä¢\tEnsures no circular references are introduced.\n\t2.\t_validate_no_circular_references:\n\t‚Ä¢\tValidates the parent_id field to prevent circular dependencies.\n\t‚Ä¢\tLogs progress and raises detailed errors if violations occur.\n\t3.\tlog_and_validate_task_type_change:\n\t‚Ä¢\tLogs changes to task_type with the old and new values.\n\t‚Ä¢\tRevalidates hierarchy rules when task_type changes.\n\t4.\tDetailed Logging for Circular Reference Validation:\n\t‚Ä¢\t_validate_no_circular_references and check_circular_reference methods log every step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t‚Ä¢\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:44:08.340041', 'updated_at': '2025-01-16T19:22:36.219710'}, {'id': 132, 'name': 'Step 1: Update tasks_table_interactions.js', 'description': '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the map for efficient parent-child relationship lookups instead of DOM traversal.\n\n```\nexport const TaskManager = {\n    init: function (csrfToken) {\n        this.csrfToken = csrfToken;\n        this.initTaskParentMap(); // Initialize the map\n        this.initDragAndDrop(); // Initialize drag-and-drop functionality\n    },\n\n    // Initialize a global map for task relationships\n    taskParentMap: new Map(),\n\n    // Build the taskParentMap from the DOM\n    initTaskParentMap: function () {\n        console.log("Initializing Task Parent Map...");\n        const rows = document.querySelectorAll("tr[data-task-id]");\n\n        rows.forEach((row) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = parseInt(row.dataset.parentId, 10) || null;\n            this.taskParentMap.set(taskId, parentId);\n        });\n\n        console.log("Task Parent Map initialized:", Array.from(this.taskParentMap.entries()));\n    },\n\n    // Update the map dynamically after drag-and-drop\n    updateTaskParentMap: function (taskId, parentId) {\n        console.log(`Updating Task Parent Map: Task ${taskId} -> Parent ${parentId}`);\n        this.taskParentMap.set(taskId, parentId);\n    },\n\n    initDragAndDrop: function () {\n        if (window.isDragAndDropInitialized) {\n            console.log("Drag-and-drop is already initialized.");\n            return;\n        }\n\n        console.log("Initializing drag-and-drop within TaskManager...");\n\n        const tableBody = document.querySelector("tbody");\n        if (!tableBody) {\n            console.warn("Task table body not found for drag-and-drop initialization");\n            return;\n        }\n\n        // Initialize Sortable.js for drag-and-drop functionality\n        Sortable.create(tableBody, {\n            handle: ".task-row", // Only draggable via `.task-row` elements\n            animation: 150, // Smooth animation\n            filter: ".task-open-link", // Prevent dragging on task links\n            preventOnFilter: true, // Prevent drag if filtered element is clicked\n            onEnd: async (event) => {\n                try {\n                    console.log("Drag-and-drop operation started...");\n                    const rows = Array.from(event.from.querySelectorAll(".task-row"));\n                    const reorderedTasks = [];\n\n                    rows.forEach((row, index) => {\n                        const taskId = parseInt(row.dataset.taskId, 10);\n                        let parentId = null;\n\n                        // Get the parent ID from the map or fallback to the dataset\n                        if (row.classList.contains("subtask-row")) {\n                            const parentRow = row.previousElementSibling;\n                            parentId = parentRow\n                                ? parseInt(parentRow.dataset.taskId, 10)\n                                : this.taskParentMap.get(taskId) || null;\n                        }\n\n                        // Update the taskParentMap dynamically\n                        this.updateTaskParentMap(taskId, parentId);\n\n                        reorderedTasks.push({\n                            id: taskId,\n                            sort_order: index + 1,\n                            parent_id: parentId,\n                        });\n                    });\n\n                    console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n                    console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n                    // Send the payload to the backend\n                    const response = await fetch("/tasks/reorder_subtasks", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                            "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n                        },\n                        body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n                    });\n\n                    if (!response.ok) {\n                        const errorData = await response.json();\n                        console.error("Error reordering tasks:", errorData);\n                        alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n                        return;\n                    }\n\n                    const data = await response.json();\n                    console.log("Task reordering successful:", data);\n\n                } catch (error) {\n                    console.error("Error during drag-and-drop operation:", error);\n                    alert("An unexpected error occurred while reordering tasks.");\n                }\n            },\n        });\n\n        window.isDragAndDropInitialized = true;\n        console.log("Drag-and-drop initialized successfully.");\n    },\n};\n```\n\nKey Updates:\n\t1.\tPrecomputed Map (taskParentMap):\n\t‚Ä¢\tThe initTaskParentMap function initializes the map by iterating over DOM elements and mapping each task‚Äôs ID to its parent ID.\n\t‚Ä¢\tThe updateTaskParentMap dynamically updates the map when tasks are reordered.\n\t2.\tEfficient Parent Lookup:\n\t‚Ä¢\tThe parentId is derived from the precomputed map rather than DOM traversal.\n\t3.\tBackend Payload:\n\t‚Ä¢\tA structured payload (reorderedTasks) is sent to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t‚Ä¢\tCSRF protection is ensured by passing the token to the request headers.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:44:08.338301', 'updated_at': '2025-02-06T21:59:17.417466'}, {'id': 134, 'name': 'Step 2: Update the Backend in routes.py', 'description': 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\nPlan for step 2:\n\t1.\tVerify the payload structure:\n\t‚Ä¢\tEnsure that the payload includes all necessary fields (id, sort_order, parent_id) for each task.\n\t‚Ä¢\tValidate that the parent-child relationships in the precomputed map (taskParentMap) are reflected correctly in the payload.\n\t2.\tSubmit the payload to the backend:\n\t‚Ä¢\tEnhance the fetch request in the onEnd function of initDragAndDrop to log detailed submission data.\n\t‚Ä¢\tConfirm the payload integrity in the browser console before submission.\n\t3.\tUpdate backend logging:\n\t‚Ä¢\tAdd logging to /reorder_subtasks in routes.py to confirm receipt of the correct payload and process parent-child updates.\n\t‚Ä¢\tLog before and after database updates for better debugging.\n\n-----\nUpdated tasks_table_interactions.js\n\nReplace this section:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    let parentId = null;\n```\nWith:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    const parentId = this.taskParentMap.get(taskId) || null;\n```\nThe this.taskParentMap provides a precomputed and dynamic mapping of taskId to parentId. By using this map, we avoid relying on DOM traversal logic (row.closest or row.previousElementSibling) during drag-and-drop operations, which can sometimes be unreliable or cumbersome.\n\nFull Revised onEnd section:\n```\nonEnd: async (event) => {\n    try {\n        console.log("Drag-and-drop operation started...");\n        const rows = Array.from(event.from.querySelectorAll(".task-row"));\n        const reorderedTasks = [];\n\n        rows.forEach((row, index) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = this.taskParentMap.get(taskId) || null;\n\n            // Update the taskParentMap dynamically\n            this.updateTaskParentMap(taskId, parentId);\n\n            reorderedTasks.push({\n                id: taskId,\n                sort_order: index + 1,\n                parent_id: parentId,\n            });\n        });\n\n        console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n        console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n        // Send the payload to the backend\n        const response = await fetch("/tasks/reorder_subtasks", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n            },\n            body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error("Error reordering tasks:", errorData);\n            alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n            return;\n        }\n\n        const data = await response.json();\n        console.log("Task reordering successful:", data);\n\n    } catch (error) {\n        console.error("Error during drag-and-drop operation:", error);\n        alert("An unexpected error occurred while reordering tasks.");\n    }\n}\n```\n---------------------------------\nEnsure updates include:\n\t‚Ä¢\tBetter Logging: Adding logs for key events such as database changes and validation results.\n\t‚Ä¢\tInput Validation: Ensure all required fields (id, sort_order, parent_id) exist in the payload.\n\t‚Ä¢\tPost-Commit Validation: Confirm database updates after the commit.\n\t‚Ä¢\tImproved Error Handling: Include specific error messages and consistent rollback mechanisms.\n\nBelow is the revised reorder_subtasks route with descriptive comments for each section:\n```\n@bp.route("/reorder_subtasks", methods=["POST"])\ndef reorder_subtasks():\n    """\n    Reorder subtasks globally or reassign them to a different parent.\n\n    Steps:\n    - Parse and validate input from the frontend.\n    - Update parent-child relationships and sort order in the database.\n    - Commit changes and return a success response.\n    - Handle errors gracefully and provide detailed logs for debugging.\n    """\n    logger.info("Entering reorder_subtasks route...")\n    logger.info(f"Received payload for reordering tasks: {request.json}")\n\n    try:\n        # Step 1: Parse input\n        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered\n        ordered_tasks = request.json.get("ordered_tasks", [])\n\n        logger.debug(f"Parsed parent_id: {parent_id}")\n        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")\n\n        # Step 2: Validate input\n        if not isinstance(ordered_tasks, list) or not all(\n            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task\n            for task in ordered_tasks\n        ):\n            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")\n            return jsonify({\n                "error": "Invalid input format for \'ordered_tasks\'. Each task must include \'id\', \'sort_order\', and \'parent_id\'."\n            }), 400\n\n        # Step 3: Validate parent task (if applicable)\n        if parent_id is not None:\n            parent_task = Task.query.get(parent_id)\n            if not parent_task:\n                logger.error(f"Parent task with ID {parent_id} not found.")\n                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400\n\n        logger.info("Input validation passed. Proceeding with task updates...")\n\n        # Step 4: Process updates for each subtask\n        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation\n\n        for task_data in ordered_tasks:\n            subtask_id = task_data["id"]\n            sort_order = task_data["sort_order"]\n            new_parent_id = task_data["parent_id"]\n\n            # Fetch the subtask from the database\n            subtask = Task.query.get(subtask_id)\n            if not subtask:\n                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")\n                continue\n\n            # Log and update parent_id if it changes\n            if new_parent_id is not None and new_parent_id != subtask.parent_id:\n                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")\n                subtask.parent_id = new_parent_id\n\n            # Update sort order\n            subtask.sort_order = sort_order\n            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")\n\n            # Add to the list of updated subtasks for validation\n            updated_subtasks.append(subtask)\n\n        # Step 5: Commit changes to the database\n        try:\n            db.session.commit()\n            logger.info(f"Subtasks reordered successfully: {[task[\'id\'] for task in ordered_tasks]}")\n        except Exception as e:\n            logger.error(f"Error committing changes to the database: {str(e)}")\n            db.session.rollback()\n            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500\n\n        # Step 6: Post-commit validation\n        for subtask in updated_subtasks:\n            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")\n            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")\n\n        # Step 7: Return success response\n        return jsonify({\n            "success": True,\n            "message": "Subtasks reordered successfully.",\n            "updated_subtasks": [subtask.id for subtask in updated_subtasks]\n        }), 200\n\n    except Exception as e:\n        # Step 8: Handle unexpected errors\n        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)\n        db.session.rollback()\n        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500\n```\nKey Changes and Descriptive Comments\n\t1.\tInput Parsing:\n\t‚Ä¢\tExtracts parent_id and ordered_tasks from the request payload.\n\t‚Ä¢\tLogs the parsed values for debugging.\n\t2.\tInput Validation:\n\t‚Ä¢\tEnsures ordered_tasks is a list of dictionaries with the required keys.\n\t‚Ä¢\tValidates parent_id if provided, ensuring the parent task exists in the database.\n\t3.\tUpdate Processing:\n\t‚Ä¢\tIterates through ordered_tasks, updating each task‚Äôs parent_id and sort_order.\n\t‚Ä¢\tLogs changes for each task.\n\t4.\tDatabase Commit:\n\t‚Ä¢\tCommits all updates in a single transaction.\n\t‚Ä¢\tLogs success or rolls back changes in case of an error.\n\t5.\tPost-Commit Validation:\n\t‚Ä¢\tVerifies that the parent_id and sort_order changes were successfully saved to the database.\n\t6.\tError Handling:\n\t‚Ä¢\tCaptures and logs exceptions during processing or committing.\n\t‚Ä¢\tProvides meaningful error messages to the frontend.\n\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:46:29.348853', 'updated_at': '2025-02-06T21:59:21.617065'}, {'id': 131, 'name': 'Step 5: Update utils.py', 'description': 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nChanges to Make:\n\t1.\tEnhance Task Filtering:\n\t‚Ä¢\tEnsure the filters handle parent-child relationships explicitly.\n\t‚Ä¢\tAdd options to include or exclude subtasks in queries.\n\t2.\tUtility Function for Debugging Parent-Child Relationships:\n\t‚Ä¢\tProvide a function to generate a map or list of parent-child relationships for debugging purposes.\n\t3.\tValidation Functions:\n\t‚Ä¢\tAdd a utility function to validate parent-child relationships and ensure no circular dependencies.\n\nUpdated utils.py Code:\n```\nimport logging\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import joinedload\nfrom app.extensions.db import db\nfrom app.tasks.models import Task\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\n\nclass TaskService:\n    @staticmethod\n    def filter_tasks(filters=None, include_subtasks=True, page=None, per_page=None):\n        """\n        Dynamically filters tasks with an option to include or exclude subtasks.\n\n        Args:\n            filters (dict): Filtering criteria.\n            include_subtasks (bool): Whether to include subtasks in the query.\n            page (int, optional): Page number for pagination.\n            per_page (int, optional): Items per page for pagination.\n\n        Returns:\n            Query or Pagination: A SQLAlchemy query object or paginated results.\n        """\n        query = Task.query.options(\n            db.joinedload(Task.project).joinedload(Project.contributors),\n            db.joinedload(Task.contributor),\n            db.joinedload(Task.children),\n        ).order_by(Task.sort_order)\n\n        if filters:\n            logger.debug(f"Applying filters: {filters}")\n\n            # Apply standard filters\n            if "is_archived" in filters:\n                query = query.filter(Task.is_archived == filters["is_archived"])\n            if "project_id" in filters:\n                query = query.filter(Task.project_id == filters["project_id"])\n            if "task_type" in filters:\n                if isinstance(filters["task_type"], list):\n                    query = query.filter(Task.task_type.in_(filters["task_type"]))\n                else:\n                    query = query.filter(Task.task_type == filters["task_type"])\n            if "completion_status" in filters:\n                completion_map = {"completed": True, "in_progress": False}\n                if filters["completion_status"] in completion_map:\n                    query = query.filter(Task.completed == completion_map[filters["completion_status"]])\n\n            # Optionally exclude subtasks\n            if not include_subtasks:\n                query = query.filter(Task.task_type != "Subtask")\n\n        logger.debug(f"Generated query: {query}")\n\n        # Pagination\n        if page and per_page:\n            return query.paginate(page=page, per_page=per_page, error_out=False)\n        return query\n\n    @staticmethod\n    def debug_parent_child_relationships(project_id=None):\n        """\n        Generates a debug map of parent-child relationships for all tasks.\n\n        Args:\n            project_id (int, optional): Restrict to tasks from a specific project.\n\n        Returns:\n            dict: A dictionary mapping parent IDs to their child task IDs.\n        """\n        query = Task.query\n        if project_id:\n            query = query.filter(Task.project_id == project_id)\n\n        tasks = query.options(\n            db.load_only(Task.id, Task.parent_id)\n        ).all()\n\n        relationship_map = {}\n        for task in tasks:\n            if task.parent_id not in relationship_map:\n                relationship_map[task.parent_id] = []\n            relationship_map[task.parent_id].append(task.id)\n\n        logger.debug(f"Parent-Child Relationship Map: {relationship_map}")\n        return relationship_map\n\n    @staticmethod\n    def validate_parent_child_relationships():\n        """\n        Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.\n\n        Raises:\n            ValueError: If invalid relationships are detected.\n        """\n        tasks = Task.query.options(db.joinedload(Task.parent)).all()\n\n        for task in tasks:\n            if task.parent_id:\n                parent_task = task.parent\n                if not parent_task:\n                    raise ValueError(f"Task {task.id} has an invalid parent ID {task.parent_id}.")\n\n                # Validate hierarchy rules\n                if task.task_type == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError(f"User Story {task.id} must have an Epic as its parent.")\n                if task.task_type == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError(f"Subtask {task.id} must have a User Story as its parent.")\n\n        logger.info("All parent-child relationships are valid.")\n\n    @staticmethod\n    def get_all_task_ids_with_parents():\n        """\n        Returns a flat list of tasks with their parent IDs for debugging.\n\n        Returns:\n            list: A list of tuples (task_id, parent_id).\n        """\n        tasks = Task.query.with_entities(Task.id, Task.parent_id).all()\n        logger.debug(f"Task IDs with Parent IDs: {tasks}")\n        return tasks\n```\n\n\nExplanation of Changes:\n\t1.\tfilter_tasks Enhancements:\n\t‚Ä¢\tAdded include_subtasks parameter to optionally exclude subtasks from the query.\n\t2.\tdebug_parent_child_relationships:\n\t‚Ä¢\tCreates a parent-child relationship map for debugging purposes.\n\t3.\tvalidate_parent_child_relationships:\n\t‚Ä¢\tIterates through all tasks to validate parent-child hierarchy and ensures no invalid relationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t‚Ä¢\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.091824', 'updated_at': '2025-01-16T19:22:36.236691'}, {'id': 135, 'name': 'Step 3: Update list.html', 'description': 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already includes everything needed. No required changes.\n\nHere¬¥s the relevant section of list.html:\n\n```\n<tr id="task-{{ task.id }}"\n                class="task-row {% if task.task_type == \'Subtask\' %}subtask-row{% elif task.task_type == \'User Story\' %}user-story-row{% elif task.task_type == \'Epic\' %}epic-row{% endif %}"\n                style="background-color: \n                {% if task.task_type == \'Subtask\' %}\n                    rgba(200, 230, 255, 0.5); /* Light blue for Subtask */\n                {% elif task.task_type == \'User Story\' %}\n                    rgba(255, 255, 200, 0.5); /* Light yellow for User Story */\n                {% elif task.task_type == \'Epic\' %}\n                    rgba(255, 200, 200, 0.5); /* Light red for Epic */\n                {% else %}\n                    rgba(240, 240, 240, 1); /* Default light gray */\n                {% endif %};"\n                data-task-id="{{ task.id }}"\n                data-parent-id="{{ task.parent_id or \'\' }}"\n                data-level="{{ depth }}">\n                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>\n                <td>\n                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}\n                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}" aria-label="Toggle details for task {{ task.name }}">\n                        <i class="bi bi-chevron-right"></i>\n                    </button>\n                    {% endif %}\n                </td>\n                <td class="fw-medium fs-6 \n                {% if task.task_type == \'Epic\' %}\n                    epic-cell\n                {% elif task.task_type == \'User Story\' %}\n                    user-story-cell\n                {% elif task.task_type == \'Subtask\' %}\n                    subtask-cell\n                {% endif %}" \n                style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">\n                <span class="bi fs-6\n                {% if task.task_type == \'Epic\' %}\n                    bi-circle-fill\n                {% elif task.task_type == \'User Story\' %}\n                    bi-circle-half\n                {% elif task.task_type == \'Subtask\' %}\n                    bi-circle\n                {% endif %}">\n                </span>\n                {{ task.name }}\n                <small class="text-muted fw-light">\n                    (Parent-ID: {{ task.parent_id or \'None\' }})\n                </small>\n                <!-- Open Link -->\n                <a href="#" class="task-open-link" data-task-id="{{ task.id }}">\n                    <i class="bi bi-arrows-angle-expand" style="font-size: 0.8rem; color: white;"></i>\n                    Open\n                </a>\n            </td>\n                <td class="fw-light fs-6">\n                    <small class>\n                    LAC-{{ task.id }}\n                    </small>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light text-bg-secondary">\n                        {{ task.project if task.project else "Unknown Project" }}\n                    </span>\n                </td>\n                <td class="fs-6" data-contributor-column>{{ task.assigned_to if task.assigned_to else "Unassigned" }}</td>\n                <td class="fs-6">{{ task.story_points }}</td>\n                <td class="fs-6">\n                    <span class="badge rounded-pill fw-light text-bg-light">\n                        {{ task.task_type }}\n                    </span>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light {% if task.completed %}text-bg-success{% else %}text-bg-warning{% endif %}">\n                        {{ "Completed" if task.completed else "In Progress" }}\n                    </span>\n                </td>\n                <td>\n                    <!-- Delete Icon -->\n                    <button class="btn btn-dark btn-sm delete-task-btn" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .2rem; --bs-btn-font-size: .75rem;" data-task-id="{{ task.id }}" aria-label="Deletes task {{ task.id }}">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n            </tr>\n            {% for child in tasks if child.parent_id == task.id %}\n                {{ render_task(child, tasks, depth + 1) }}\n            {% endfor %}\n            {% endmacro %}\n            \n            <!-- Render top-level tasks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:46:29.349784', 'updated_at': '2025-01-16T19:22:36.238473'}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'description': 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitHub Login involves integrating OAuth 2.0, which both services support. The complexity depends on your app‚Äôs existing setup, frameworks, and experience with third-party authentication. Below is a breakdown:\n\nKey Steps for Implementing Google or GitHub Login\n\t1.\tSet Up OAuth Credentials:\n\t‚Ä¢\tRegister your application in the Google Cloud Console or GitHub Developer Settings.\n\t‚Ä¢\tObtain the client ID and client secret.\n\t2.\tInstall Required Libraries:\n\t‚Ä¢\tUse a library for OAuth (e.g., flask-oauthlib, python-social-auth, or authlib).\n\t‚Ä¢\tPopular frameworks like Flask and Django already have robust integrations for OAuth providers.\n\t3.\tBackend Configuration:\n\t‚Ä¢\tImplement an endpoint to handle the OAuth flow (/auth/login/google or /auth/login/github).\n\t‚Ä¢\tConfigure your app to send users to Google or GitHub‚Äôs authentication page.\n\t‚Ä¢\tHandle the OAuth callback to exchange the authorization code for an access token.\n\t‚Ä¢\tVerify the token and fetch user information (e.g., email, name).\n\t4.\tLink OAuth to User Registration:\n\t‚Ä¢\tOn successful login, create or retrieve a user in your database.\n\t‚Ä¢\tStore the user‚Äôs details like email, OAuth provider ID, and access token.\n\t5.\tFrontend Integration (if applicable):\n\t‚Ä¢\tAdd ‚ÄúLogin with Google‚Äù or ‚ÄúLogin with GitHub‚Äù buttons.\n\t‚Ä¢\tRedirect to your backend‚Äôs OAuth endpoint when clicked.', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T12:15:54.291625', 'updated_at': '2025-01-16T19:22:36.239866'}, {'id': 62, 'name': 'Add OAuth integration for Google Login', 'description': 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.241200'}, {'id': 64, 'name': 'Setup project credentials for Google API', 'description': 'Generate client ID and secret from Google API Console for your application.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-01-16T19:22:36.242497'}, {'id': 67, 'name': 'Test Google OAuth flow', 'description': 'Verify the OAuth flow using test accounts and check the token exchange.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.243780'}, {'id': 65, 'name': 'Implement backend endpoints for Google OAuth', 'description': 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-01-16T19:22:36.244932'}, {'id': 63, 'name': 'Add OAuth integration for GitHub Login', 'description': 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.246358'}, {'id': 68, 'name': 'Register application in GitHub Developer Console', 'description': 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.247746'}, {'id': 69, 'name': 'Handle callback from GitHub', 'description': 'Implement the callback endpoint to process the authorization code from GitHub.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.248912'}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'description': 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 18, 'status': 'Not Started', 'created_at': '2025-01-07T19:53:50.085064', 'updated_at': '2025-01-16T19:22:36.250169'}, {'id': 100, 'name': '1.1 User Registration', 'description': 'As a user, I want to register with a username, email, and password so that I can create an account and access the system.\n\n**Acceptance Criteria:**\n\n‚Ä¢\tUser can input valid username, email, and password.\n‚Ä¢\tUsername and email must be unique.\n‚Ä¢\tErrors are displayed for invalid inputs or duplicate accounts.\n‚Ä¢\tPasswords must meet complexity requirements and be securely stored.\n‚Ä¢\tSuccessful registration redirects users to a login page.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:59:09.044667', 'updated_at': '2025-01-16T19:22:36.251812'}, {'id': 107, 'name': '1.1.1 Database Changes for User Registration', 'description': '1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.\n   CREATE TABLE public.users (\n       id SERIAL PRIMARY KEY,\n       username VARCHAR(50) UNIQUE NOT NULL,\n       email VARCHAR(100) UNIQUE NOT NULL,\n       password_hash VARCHAR(255) NOT NULL,\n       created_at TIMESTAMP DEFAULT NOW(),\n       updated_at TIMESTAMP DEFAULT NOW()\n);\n\n\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-11T11:36:20.238219'}, {'id': 108, 'name': '1.1.2 Backend API for Registration', 'description': '‚Ä¢\tCreate an endpoint POST /api/register:\n‚Ä¢\tValidate input fields.\n‚Ä¢\tHash the password using bcrypt or argon2.\n‚Ä¢\tInsert the user into the users table.\n‚Ä¢\tReturn success/failure responses.\ndddhfff\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:33.067643'}, {'id': 112, 'name': '1.2.2 Frontend Login Page', 'description': 'Develop a frontend form for user login with email and password inputs.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.683644'}, {'id': 109, 'name': '1.1.3 Create Frontend Registration Page', 'description': 'Develop a frontend form to collect user registration details.\n‚Ä¢\tAdd a form for username, email, and password inputs.\n‚Ä¢\tUse client-side validation (e.g., email format).\n‚Ä¢\tSend a POST request to /api/register.\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.684988'}, {'id': 110, 'name': '1.1.4 Unit Tests for Registration', 'description': 'Write unit tests for:\n\n‚Ä¢\tValid registration.\n‚Ä¢\tDuplicate username/email scenarios.\n‚Ä¢\tInvalid input handling.\nff', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.686902'}, {'id': 101, 'name': '1.2 User Login', 'description': 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n‚Ä¢\tUsers can log in with a valid email and password.\n‚Ä¢\tErrors are displayed for invalid credentials.\n‚Ä¢\tSuccessful login stores a session or JWT token.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:25:53.687936'}, {'id': 111, 'name': '1.2.1 Backend API for Login', 'description': 'Create POST /api/login endpoint to handle user login.\njjsjj', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.689096'}, {'id': 113, 'name': '1.2.3 Session Management', 'description': 'Implement secure session handling using cookies or JWT.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:20.968680'}, {'id': 114, 'name': '1.2.4 Unit Tests for Login', 'description': 'Write tests for successful and failed login attempts.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:22:36.265866'}, {'id': 106, 'name': 'Password Reset', 'description': 'As a user, I want to reset my password securely using email.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.267247'}, {'id': 128, 'name': 'Frontend Password Reset Page', 'description': 'Develop a page for users to enter a new password using a valid token.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.269158'}, {'id': 129, 'name': 'Testing Password Reset', 'description': 'Write tests for email delivery, token validation, and password updates.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.270849'}, {'id': 102, 'name': 'Logout', 'description': 'As a user, I want to log out so that I can end my session securely.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.272605'}, {'id': 117, 'name': 'Tests for Logout', 'description': 'Verify session invalidation and redirection to the login page.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.274575'}, {'id': 116, 'name': 'Frontend Logout Button', 'description': 'Add a logout button to the UI and handle session clearing.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-09T12:31:17.939784'}, {'id': 115, 'name': 'Backend API for Logout', 'description': 'Create POST /api/logout endpoint to invalidate user sessions.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.277547'}, {'id': 61, 'name': 'Parent task assignment', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-04T22:31:45.205815', 'updated_at': '2025-01-16T19:22:36.279012'}, {'id': 45, 'name': 'Display Default Value in Dropdown', 'description': 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.280493'}, {'id': 50, 'name': 'Retrieve Current Parent Task', 'description': 'Retrieve the current parent task‚Äôs ID and name from the backend.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'In Progress', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:22.274304'}, {'id': 51, 'name': 'Set Default Value', 'description': 'Set the default value in the dropdown based on the retrieved data.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 45, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 1, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.283309'}, {'id': 46, 'name': 'Search for Parent Tasks', 'description': 'Allow users to search for tasks dynamically in the dropdown by typing.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.284882'}, {'id': 54, 'name': 'Test Partial Matching', 'description': 'Ensure the search results update in real-time as the user types.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:29.251047'}, {'id': 47, 'name': 'Handle Large Datasets Efficiently', 'description': 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:26:23.067490'}, {'id': 56, 'name': 'Paginate API Responses', 'description': 'Implement server-side filtering and pagination for large datasets.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:16.233517'}, {'id': 55, 'name': 'Enable Lazy Loading', 'description': 'Enable lazy loading or virtualization in Virtual Select.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:08.099271'}, {'id': 48, 'name': 'Select and Deselect Parent Tasks', 'description': 'Allow users to select a parent task or deselect by choosing "None."', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:25:59.651639'}, {'id': 57, 'name': 'Ensure None Option Availability', 'description': 'Add ‚ÄúNone‚Äù as a selectable option and ensure it stays at the top of the list.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:51.310240'}, {'id': 58, 'name': 'Handle Selection Events', 'description': 'Implement event listeners to update the form‚Äôs state when the selection changes.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:43.569501'}, {'id': 49, 'name': 'Integrate Dropdown with Task Form', 'description': 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:25:36.133259'}, {'id': 59, 'name': 'Bind Dropdown to Form Field', 'description': 'Bind the dropdown to the form‚Äôs parent task field.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:15.491910'}, {'id': 60, 'name': 'Test Form Submission', 'description': 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:28.367797'}, {'id': 41, 'name': 'Implement Searchable Dropdown', 'description': 'As a user, I want a searchable dropdown for parent task assignment.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Completed', 'created_at': '2025-01-03T09:14:28.285904', 'updated_at': '2025-02-11T08:25:07.992524'}, {'id': 52, 'name': 'Add Search Box to Dropdown', 'description': 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:01.469601'}, {'id': 53, 'name': 'Implement AJAX Search', 'description': 'Implement AJAX-based search to fetch tasks dynamically from the backend.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:24:54.245010'}, {'id': 42, 'name': 'Choose Dropdown Library', 'description': 'Research and decide on the dropdown library to use.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-11T08:24:47.274896'}, {'id': 43, 'name': 'Integrate Dropdown Library', 'description': 'Integrate the chosen dropdown library into the project.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Completed', 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-11T08:24:33.908549'}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t‚Ä¢\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t‚Ä¢\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t‚Ä¢\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-02-11T08:24:26.494016'}, {'id': 85, 'name': 'Assign multiple contributors to a task', 'description': 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:32:39.466022', 'updated_at': '2025-02-11T08:24:21.069473'}, {'id': 90, 'name': 'Update frontend to display and manage multiple contributors', 'description': 'Allow users to view, add, or remove multiple contributors via the UI.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-11T08:24:13.204884'}, {'id': 88, 'name': 'Update database schema for multiple contributors', 'description': 'Modify the task table to support many-to-many relationships for contributors.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-11T08:24:05.873554'}, {'id': 89, 'name': 'Develop backend API for adding contributors to a task', 'description': 'Create endpoints to add, update, and remove contributors for a task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-11T08:23:58.436495'}, {'id': 86, 'name': 'Allow designation of task owner', 'description': 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:29.330562', 'updated_at': '2025-02-11T08:23:51.269557'}, {'id': 93, 'name': 'Update frontend to manage task ownership', 'description': 'Allow users to assign or update the task owner via the UI.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-11T08:23:42.771565'}, {'id': 91, 'name': 'Update database schema for task ownership', 'description': 'Add a column or relationship to assign a single owner per task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-11T08:23:33.670381'}, {'id': 92, 'name': 'Develop backend API for assigning task owner', 'description': 'Create endpoints to assign or update the owner of a task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-11T09:19:44.027744'}, {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-02-11T08:23:23.402442'}, {'id': 96, 'name': 'Allow admin users to create and customize contributor roles via frontend', 'description': 'Provide UI functionality for admins to manage contributor roles dynamically.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T08:23:13.139282'}, {'id': 94, 'name': 'Add database support for contributor roles', 'description': 'Introduce a roles table and link contributors to specific roles for tasks.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T08:22:56.181530'}, {'id': 95, 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T08:22:02.276492'}, {'id': 127, 'name': 'Backend API for Password Reset', 'description': 'Create endpoints to handle password reset requests and token validation.\ndfdf\n\nasdasd', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-10T23:59:50.734037'}, {'id': 126, 'name': 'Email Configuration for Password Reset', 'description': 'Configure email service to send password reset links.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.334340'}, {'id': 104, 'name': 'Middleware for Role Enforcement', 'description': 'As a system, I want to enforce role-based access to specific routes.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:23:40.346816'}, {'id': 122, 'name': 'Testing Role Enforcement', 'description': 'Write tests to ensure proper access control based on roles.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-01-16T19:23:58.185693'}, {'id': 121, 'name': 'Develop Role Enforcement Middleware', 'description': 'Implement middleware to check user roles for access control.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-01-16T19:23:58.187439'}, {'id': 105, 'name': 'Profile Management', 'description': 'As a user, I want to update my profile (username, email, password).', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.339830'}, {'id': 123, 'name': 'Backend API for Profile Management', 'description': 'Create PATCH /api/profile endpoint to update user details.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-01-16T19:24:19.678781'}, {'id': 125, 'name': 'Testing Profile Updates', 'description': 'Write tests for profile update functionality.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-01-16T19:24:19.680382'}]
2025-02-13 23:45:45,627 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-13 23:45:45,627 INFO: [cached since 3.121e+04s ago] {'param_1': 2}
2025-02-13 23:45:45,628 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-13 23:45:45,628 INFO: [cached since 3.121e+04s ago] {'param_1': 3}
2025-02-13 23:45:45,628 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-13 23:45:45,629 INFO: [cached since 3.121e+04s ago] {'param_1': 4}
2025-02-13 23:45:45,629 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-13 23:45:45,629 INFO: [cached since 3.121e+04s ago] {'param_1': 5}
2025-02-13 23:45:45,632 INFO: ROLLBACK
2025-02-13 23:45:45,633 INFO: 127.0.0.1 - - [13/Feb/2025 23:45:45] "GET /tasks/ HTTP/1.1" 200 -
2025-02-13 23:45:45,698 INFO: 127.0.0.1 - - [13/Feb/2025 23:45:45] "[36mGET /static/custom.css HTTP/1.1[0m" 304 -
2025-02-13 23:45:45,718 INFO: 127.0.0.1 - - [13/Feb/2025 23:45:45] "[36mGET /static/js/filters.js HTTP/1.1[0m" 304 -
2025-02-13 23:45:45,729 INFO: 127.0.0.1 - - [13/Feb/2025 23:45:45] "[36mGET /static/js/tasks_table_interactions.js HTTP/1.1[0m" 304 -
2025-02-13 23:45:45,730 INFO: 127.0.0.1 - - [13/Feb/2025 23:45:45] "[36mGET /static/js/modals.js HTTP/1.1[0m" 304 -
2025-02-13 23:45:51,418 INFO: Fetching task details for Task ID 276.
2025-02-13 23:45:51,418 INFO: Fetching task with ID 276.
2025-02-13 23:45:51,419 INFO: BEGIN (implicit)
2025-02-13 23:45:51,420 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-13 23:45:51,420 INFO: [cached since 1.765e+04s ago] {'pk_1': 276}
2025-02-13 23:45:51,421 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x10e6777d0>, 'completed_date': None, 'sort_order': 0, 'task_type': 'Epic', 'contributor_id': None, 'id': 276, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 2, 10, 0, 49, 26, 189497), 'status': 'Not Started', 'project_id': 7, 'updated_at': datetime.datetime(2025, 2, 10, 8, 28, 47, 447612), 'name': 'add support for priority', 'description': '', 'parent_id': None, 'story_points': 0}
2025-02-13 23:45:51,423 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-13 23:45:51,424 INFO: [cached since 1.765e+04s ago] {'pk_1': 7}
2025-02-13 23:45:51,425 INFO: Task ID 276 fetched with parent ID: None
2025-02-13 23:45:51,425 INFO: Task with ID 276 fetched successfully.
2025-02-13 23:45:51,425 DEBUG: Fetched Task Data: {'id': 276, 'name': 'add support for priority', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-10T08:28:47.447612', 'contributor_name': 'Unassigned', 'parent': None}
2025-02-13 23:45:51,426 INFO: Task details fetched successfully for Task ID 276.
2025-02-13 23:45:51,426 INFO: ROLLBACK
2025-02-13 23:45:51,427 INFO: 127.0.0.1 - - [13/Feb/2025 23:45:51] "GET /api/tasks/276 HTTP/1.1" 200 -
2025-02-13 23:47:13,900 INFO: 127.0.0.1 - - [13/Feb/2025 23:47:13] "[36mGET /static/custom.css HTTP/1.1[0m" 304 -
2025-02-13 23:47:33,847 INFO: Entering list_tasks route...
2025-02-13 23:47:33,848 DEBUG: Filters used: {'is_archived': False}
2025-02-13 23:47:33,850 DEBUG: Applying filters: {'is_archived': False}
2025-02-13 23:47:33,872 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-13 23:47:33,873 INFO: BEGIN (implicit)
2025-02-13 23:47:33,874 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-13 23:47:33,874 INFO: [cached since 3.136e+04s ago] {'param_1': 110, 'param_2': 0}
2025-02-13 23:47:33,889 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-13 23:47:33,890 INFO: [cached since 3.136e+04s ago] {}
2025-02-13 23:47:33,891 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-13 23:47:33,892 INFO: [cached since 3.136e+04s ago] {}
2025-02-13 23:47:33,893 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-13 23:47:33,893 INFO: [cached since 3.136e+04s ago] {}
2025-02-13 23:47:33,894 DEBUG: Tasks passed to template: [{'id': 290, 'name': 'issue: error when changing task type and', 'description': 'issue: error when changing task type and parent task before saving', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:00:03.417734', 'updated_at': '2025-02-10T09:15:09.284969'}, {'id': 298, 'name': 'example user story with parent epic 297', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 297, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:41:01.907455', 'updated_at': '2025-02-10T14:59:04.142570'}, {'id': 275, 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-10T08:38:37.622196'}, {'id': 276, 'name': 'add support for priority', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-10T08:28:47.447612'}, {'id': 264, 'name': 'close all / open all childtasks', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-02-10T08:47:14.915970'}, {'id': 285, 'name': 'add text truncation to project names in task list', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-10T09:45:47.029729'}, {'id': 257, 'name': 'Update Task API Integration', 'description': "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-02-05T22:55:49.566819', 'updated_at': '2025-02-05T22:18:17.807154'}, {'id': 294, 'name': 'issue: task table filters not working', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:19:21.022598', 'updated_at': '2025-02-12T10:59:15.483390'}, {'id': 267, 'name': 'improvements to toggles and nested tasks', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:29:12.464594', 'updated_at': '2025-02-10T08:47:24.581680'}, {'id': 283, 'name': 'fix update title', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:58.769700', 'updated_at': '2025-02-10T08:46:47.282087'}, {'id': 271, 'name': 'make sure dynamically added rows has the exact same styling and includes every element', 'description': 'Missing elements:\n- Open link\n- Default project\n- Project name should be inside a pill\n- Task type should be in a pill\n- Estimations should be 0, not N/A\n- Make sure font size is matching\n- status should have the dropdown inside a pill\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:21:07.108431', 'updated_at': '2025-02-10T08:38:47.340105'}, {'id': 273, 'name': 'disable parent task selector in epics', 'description': 'and add text, Epic can¬¥t have parent tasks', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:45:20.740910', 'updated_at': '2025-02-10T08:39:17.639890'}, {'id': 269, 'name': 'fix styling for sweetalert', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-02-08T15:54:56.717846', 'updated_at': '2025-02-10T08:39:32.172437'}, {'id': 286, 'name': 'add support for labels/tags', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:46:23.985620', 'updated_at': '2025-02-10T09:46:23.987564'}, {'id': 299, 'name': 'example sub task with parent user story 298', 'description': 'Test update 1\nTest update 2\nTest update 3', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 298, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:42:38.905700', 'updated_at': '2025-02-10T23:23:08.671464'}, {'id': 266, 'name': 'highlight the nested tasks', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-02-10T08:47:04.382929'}, {'id': 279, 'name': 'github integration', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:38.238202', 'updated_at': '2025-02-10T08:39:24.168451'}, {'id': 289, 'name': 'issue: parent task is lost when updating task', 'description': '- Summary of the problem and solution\n    \n    **Problem: Parent Task Dropdown Was Not Being Set on Modal Open**\n    \n    The issue was that when opening a task modal, the **parent task dropdown** was not pre-populated with the correct parent task. However, interacting with the dropdown (e.g., clicking on it) would suddenly trigger it to be set correctly. This meant that the dropdown initialization was likely delayed or missing a step in the modal lifecycle.\n    \n    **Debugging Steps and Observations**\n    \n    1. **Task Details Were Fetched Correctly** ‚úÖ\n    - The task details, including parent_id, were being fetched from the API successfully.\n    1. **Parent Dropdown Initialization Issues** ‚ùå\n    - The initializeParentDropdown() function was being called, but the dropdown was sometimes **not fully ready** when we tried to set the selected parent task.\n    1. **Clicking the Dropdown Triggered the Parent to Be Set** ü§î\n    - This hinted that the dropdown was not fully ready when setParentDropdown(task.parent_id) was initially called.\n    \n    **Final Solution**\n    \n    1. **Ensuring Dropdown Readiness Before Setting the Parent Task**\n    - We added explicit **delays and checks** to confirm that the dropdown was fully initialized before attempting to set the parent task.\n    \n    Specifically, we:\n    \n    - **Waited for the dropdown to appear in the DOM** using observeParentDropdown().\n    - **Initialized the dropdown** with initializeParentDropdown().\n    - **Waited explicitly for the dropdown to be fully ready** using waitForParentDropdownReady().\n    - **Added a final delay of 200ms** before calling setParentDropdown() to ensure stability.\n    1. **Modifying openTaskModal to Handle Parent Dropdown Setup**\n    - We ensured that initializeParentDropdown() was called **after fetching task details** and before setting the parent task.\n    1. **Confirming the Fix** üéØ\n    - After these fixes, the parent dropdown was **immediately populated** upon opening the modal, without requiring user interaction.\n    \n    **Key Learnings**\n    \n    ‚úÖ **Dropdowns in modals need careful timing** ‚Äì They might not be ready when you expect them to be.\n    \n    ‚úÖ **Waiting for DOM updates is crucial** ‚Äì Observing the element ensures it actually exists before interacting with it.\n    \n    ‚úÖ **Explicit delays can prevent race conditions** ‚Äì A small delay can sometimes resolve timing issues in UI interactions.\n    \n    **Final Result**\n    \n    ‚úÖ The modal now **correctly loads and pre-selects the parent task** without extra clicks! üéâüöÄ', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T08:56:25.273984', 'updated_at': '2025-02-11T15:40:03.610698'}, {'id': 278, 'name': 'search feature for tasks list', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:03.369833', 'updated_at': '2025-02-10T08:39:04.005957'}, {'id': 281, 'name': 'add high level plan', 'description': 'Add some sort of high level plan that aims to keep PM/PO¬¥s on track and not get lost into the details of an overwhelminly large backlog', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:27:01.218606', 'updated_at': '2025-02-10T08:38:54.754760'}, {'id': 287, 'name': 'when moving a parent item to another project make sure the subtasks are moved as well', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:48:31.986870', 'updated_at': '2025-02-10T09:48:31.988859'}, {'id': 272, 'name': 'implement a markdown text editor like notion', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-02-10T08:28:39.669255'}, {'id': 293, 'name': 'click on title should copy the task title and id to clipboard', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:16:33.508209', 'updated_at': '2025-02-10T10:16:33.510414'}, {'id': 277, 'name': 'custom task workflow statuses', 'description': 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- Custom status\n-- Custom status\n- In Progress\n-- Custom status\n-- Custom status\n-- Custom status\n- Completed\n-- Custom status\n-- Custom status\n\n2. How can we track a task through different stages and save the sequence of events or stages the task has gone through?\nI¬¥m thinking it could be good for mapping out processes, identifying bottlenecks and provide valuable insights while improving and streamlining workflows.\n- Stages\n- Contacts taken\n- Respons time \n- Time to action after responses\n- Dependencies\n\nNeed to be able to record every action related to this action.\nCommunication integrations\n- Slack\n- Email\n- Text messages\n- Phonecalls\n- Calendar events, meetings\n- Zoom, Google meet, Teams etc..\n\n\n2. Set custom statuses per project (can use tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:16:03.352588', 'updated_at': '2025-02-10T08:38:28.123328'}, {'id': 274, 'name': 'add support for goals, initiatives, okr¬¥s', 'description': 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:46:27.204912', 'updated_at': '2025-02-10T08:28:17.663922'}, {'id': 280, 'name': 'logging (task and project history)', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:37:44.435112', 'updated_at': '2025-02-10T08:28:28.947805'}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:17.786154', 'updated_at': '2025-02-10T09:41:17.787861'}, {'id': 296, 'name': 'issue: contributor is lost after updating task', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:26:43.881947', 'updated_at': '2025-02-11T15:37:31.011120'}, {'id': 288, 'name': 'when trying to move subtask to another project, make sure a warning is displayed', 'description': 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be lost"\nOR\n\nIs it possible, and is it desireable to keep parent child relationships across projects?\nSo that a parent can be in one project but the child tasks can be in different projects?\n\nLets say \nParent epic is \n"Internationalisation"\nChild user stories are\n- Timezones\n- Language\n- Currency\n- Day, Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:54:36.297869', 'updated_at': '2025-02-10T08:54:51.840686'}, {'id': 284, 'name': 'add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-10T09:42:27.720908'}, {'id': 295, 'name': 'issue: drag and drop errors', 'description': '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:22:54.461413', 'updated_at': '2025-02-10T10:22:54.462542'}, {'id': 297, 'name': 'example parent epic', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:39:51.620509', 'updated_at': '2025-02-10T10:39:51.622712'}, {'id': 292, 'name': 'issue: assigning contributor does not work', 'description': '### **Summary of problem and solution**\n\nThe issue was that assigning a contributor to a task via the /tasks/<task_id>/assign_contributor API endpoint resulted in a **400 Bad Request** error. Upon investigation, the following problems were identified:\n\n1. **Missing CSRF Token:**\n- The request failed due to a missing CSRF token, as shown in the error message: *‚ÄúBad Request: The CSRF token is missing.‚Äù*\n- The frontend was not correctly including the CSRF token in the request headers.\n1. **JavaScript Error (Undefined CSRF Token Variable):**\n- The error *‚ÄúReferenceError: csrfToken is not defined‚Äù* indicated that the CSRF token was not being retrieved properly in the JavaScript code.\n1. **Incorrect Fetch Request Headers:**\n- The fetch request did not include the CSRF token under the correct key (X-CSRFToken).\n- The script attempted to send the request without properly extracting the CSRF token from the meta tag.\n\n### **Solution**\n\n1. **Include the CSRF Token in the JavaScript Code**\n\nThe CSRF token was retrieved from the meta tag and used in the request headers:\n\n```jsx\n// Retrieve CSRF token from meta tag\nconst csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\');\n```\n\nThis ensures that the CSRF token is correctly fetched and available in the JavaScript scope.\n\n1. **Modify the Fetch Request to Include CSRF Token**\n\nThe request to assign a contributor was updated to include the token:\n\n```jsx\nconst response = await fetch(`/tasks/${taskId}/assign_contributor`, {\n    method: "POST",\n    headers: { \n        "Content-Type": "application/json",\n        "X-CSRFToken": csrfToken  // Include CSRF token\n    },\n    body: JSON.stringify({ contributor_id: parseInt(contributorId, 10) }),\n});\n```\n\n- **Ensures the CSRF token is sent in the request headers** so that Flask-WTF does not reject the request.\n1. **Verify and Debug Network Requests**\n- The updated request headers were verified using **Chrome DevTools > Network tab** to ensure the X-CSRFToken was included.\n- The error messages disappeared, and the contributor assignment request **succeeded with a 200 OK response**.\n\n---\n\n### **Final Outcome**\n\nüöÄ The issue was resolved, and contributors can now be assigned successfully to tasks without triggering a CSRF validation error.\n\n### **Key Learnings from This Session**\n\nThis debugging session covered several important aspects of **web development with Flask and JavaScript**, particularly related to **API requests, CSRF protection, debugging tools, and database interactions**. Here are the key takeaways:\n\n---\n\n### **1. CSRF Protection in API Requests**\n\n- **Issue:** The initial error was due to **a missing CSRF token** when making a `POST` request.\n- **Fix:** The solution was to **retrieve the CSRF token from a meta tag** in the HTML and include it in the request headers.\n- **Key Learning:** Flask-WTF requires CSRF tokens for form and API submissions to **prevent cross-site request forgery (CSRF) attacks**.‚úÖ Always ensure that API requests include a valid CSRF token.\n\n---\n\n### **2. Debugging JavaScript Fetch Requests**\n\n- **Issue:** The JavaScript code was making a fetch request, but the variable `csrfToken` was not properly defined, causing a `ReferenceError`.\n- **Fix:** Declaring `csrfToken` at the beginning of the script:\n    \n    ```jsx\n    const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\');\n    ```\n    \n- **Key Learning:**‚úÖ JavaScript variables must be defined before they are used.‚úÖ Use browser **developer tools (DevTools) Network tab** to inspect headers, payloads, and responses when debugging API requests.\n\n---\n\n### **3. Structuring Flask Routes for Task Management**\n\n- **Issue:** The `assign_contributor` route was failing due to incorrect request payload validation.\n- **Fix:** Improved the route‚Äôs error handling and logging:\n    \n    ```python\n    @bp.route(\'/<int:task_id>/assign_contributor\', methods=[\'POST\'])\n    def assign_contributor(task_id):\n        try:\n            data = request.get_json()\n            contributor_id = int(data.get(\'contributor_id\', 0))\n            if not contributor_id:\n                return jsonify({\'error\': \'Valid Contributor ID is required\'}), 400\n    ```\n    \n- **Key Learning:**‚úÖ Always validate incoming data in Flask routes to prevent type errors.‚úÖ Use `request.get_json()` properly and handle missing or incorrect data gracefully.\n\n---\n\n### **4. Utilizing Browser DevTools for Debugging**\n\n- **Issue:** The fetch request was failing with a `400 Bad Request`, and the browser console showed `ReferenceError: csrfToken is not defined`.\n- **Fix:**\n    - Used **Network tab** to inspect the request payload and headers.\n    - Used **Console tab** to catch JavaScript errors early.\n- **Key Learning:**‚úÖ DevTools is a **critical** tool for diagnosing network request issues.‚úÖ Always **check console errors** before assuming it\'s a backend issue.\n\n---\n\n### **5. Database Queries and ORM Debugging**\n\n- **Issue:** Tasks were not being updated correctly, possibly due to missing commit statements.\n- **Fix:** Ensured that:was executed properly.\n    \n    ```python\n    task.contributor_id = contributor_id\n    db.session.commit()\n    ```\n    \n- **Key Learning:**‚úÖ Always call `db.session.commit()` after making changes in SQLAlchemy.‚úÖ Rollback transactions if an error occurs to avoid database inconsistency.\n\n---\n\n### **6. Handling Asynchronous JavaScript Logic**\n\n- **Issue:** The `assignContributor` function was executing before the page was fully loaded.\n- **Fix:** Wrapped it inside a function that ensures elements exist:\n    \n    ```\n    window.setupContributorAssignment = function () {\n        const assignButton = $("#assign-contributor-btn");\n        if (!assignButton.length) {\n            setTimeout(setupContributorAssignment, 500); // Retry in 500ms\n            return;\n        }\n    ```\n    \n- **Key Learning:**‚úÖ Use `setTimeout` to **retry event binding** when elements are dynamically loaded.‚úÖ Always **check if elements exist before attaching event handlers**.\n\n---\n\n### **7. Best Practices for Flask Logging & Error Handling**\n\n- **Issue:** Lack of clear logging when API calls failed.\n- **Fix:** Added better logging to track failures:\n    \n    ```python\n    logger.info(f"Assigning contributor to task ID {task_id}")\n    try:\n        # Process request...\n    except Exception as e:\n        logger.error(f"Error assigning contributor: {e}")\n    ```\n    \n- **Key Learning:**‚úÖ Log **every major step** in API processing to simplify debugging.‚úÖ Differentiate between `logger.info()`, `logger.warning()`, and `logger.error()` based on severity.\n\n---\n\n### **Final Takeaways**\n\nüöÄ **Understanding CSRF protection** and **properly structuring API requests** is crucial for secure web applications.\n\nüîç **Browser DevTools is invaluable** for diagnosing frontend issues, especially in JavaScript.\n\nüêç **Flask requires proper request validation, database transactions, and logging** to maintain stability.\n\n‚ö° **Asynchronous JavaScript must handle dynamic elements carefully** to avoid runtime errors.\n\nThis session reinforced best practices in **frontend-backend integration, debugging, and security**, making it a great learning experience! üöÄüî•', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:11:12.273779', 'updated_at': '2025-02-12T10:59:41.585250'}, {'id': 265, 'name': 'smooth transition for toggles', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-02-10T08:46:55.831743'}, {'id': 270, 'name': 'the newest task', 'description': '', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:07:34.368035', 'updated_at': '2025-02-10T01:07:34.372478'}, {'id': 291, 'name': 'add dropdowns in task list for changing: project, assigned to, estimate and task type (labels/tags)', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-02-10T10:09:52.997455'}, {'id': 136, 'name': 'Page scroll should stay in position when reloading', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-16T18:21:50.187247', 'updated_at': '2025-01-16T19:22:36.214901'}, {'id': 130, 'name': 'Implement the Map of Task Relationships solution for drag-and-drop', 'description': 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.093022', 'updated_at': '2025-01-16T19:22:36.216705'}, {'id': 133, 'name': 'Step 4: Enhance Logging in models.py', 'description': 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nupdating the Task model in the following ways:\n\n1.\tLog Changes to parent_id:\n\t‚Ä¢\tLog changes to parent_id during updates, including old and new values.\n\t2.\tValidate Hierarchy with Logging:\n\t‚Ä¢\tLog detailed messages when validating hierarchy changes, especially for circular dependency checks.\n\nHere‚Äôs how the models.py can be updated:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy import func, cast, CheckConstraint\nfrom sqlalchemy.orm import validates\nfrom app.extensions.db import db\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\nclass Task(db.Model):\n    __tablename__ = "task"\n    \n    # Other columns...\n\n    parent_id = db.Column(\n        db.Integer, db.ForeignKey("task.id"), index=True, nullable=True\n    )\n\n    # Relationships\n    parent = db.relationship(\n        "Task", remote_side=[id], back_populates="children", lazy="select"\n    )\n    children = db.relationship(\n        "Task", back_populates="parent", lazy="select"\n    )\n\n    \n\n\n    @staticmethod\n    def _validate_no_circular_references(new_parent_id):\n        """\n        Validates that there are no circular references in the task hierarchy.\n\n        Args:\n            new_parent_id (int): The new parent ID to validate.\n\n        Raises:\n            ValueError: If a circular reference is detected.\n        """\n        visited = set()\n        current_parent_id = new_parent_id\n\n        logger.info(f"Validating circular references for parent ID: {new_parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error(\n                    f"Circular reference detected: Parent ID {current_parent_id} already visited."\n                )\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            # Fetch the next parent_id in the hierarchy\n            parent = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not parent:\n                break  # Exit if no parent is found\n            current_parent_id = parent.parent_id\n\n        logger.info("No circular reference detected.")\n\n    @validates(\'parent_id\', \'task_type\')\n    def validate_task_changes(self, key, value):\n        """\n        Validates changes to \'parent_id\' and \'task_type\'.\n        Ensures hierarchy validity and checks for circular references.\n        """\n        logger.debug(f"Validating {key} change for Task {self.id}: {value}")\n\n        if key == \'parent_id\':\n            # Log changes to parent_id\n            if self.id and value != self.parent_id:\n                logger.info(f"Task {self.id}: Updating \'parent_id\' from {self.parent_id} to {value}")\n\n            # Prevent a task from being its own parent\n            if value and value == self.id:\n                logger.error("A task cannot be its own parent.")\n                raise ValueError("A task cannot be its own parent.")\n\n            # Check for circular references\n            if value:\n                Task.check_circular_reference(self.id, value)\n\n        elif key == \'task_type\':\n            # Log changes to task_type\n            if self.id and value != self.task_type:\n                logger.info(f"Task {self.id}: Updating \'task_type\' from {self.task_type} to {value}")\n\n        # Check hierarchy rules without triggering further validation\n        if key in [\'parent_id\', \'task_type\']:\n            self._validate_hierarchy_change(key, value)\n\n        logger.info(f"Validation passed for {key}: {value}")\n        return value\n\n    def _validate_hierarchy_change(self, key, value):\n        """\n        Validates hierarchy rules for the task based on `task_type` and `parent_id`.\n        """\n        if key == \'parent_id\' and value:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=value).first()\n            if not parent_task:\n                raise ValueError("Parent task does not exist.")\n\n            logger.debug(f"Validating hierarchy: Task {self.id}, Parent Type: {parent_task.task_type}")\n            if self.task_type == "User Story" and parent_task.task_type != "Epic":\n                raise ValueError("User Stories must have an Epic as a parent.")\n            if self.task_type == "Subtask" and parent_task.task_type != "User Story":\n                raise ValueError("Subtasks must have a User Story as a parent.")\n\n        elif key == \'task_type\' and self.parent_id:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=self.parent_id).first()\n            if parent_task:\n                logger.debug(f"Validating hierarchy: Task Type: {value}, Parent Type: {parent_task.task_type}")\n                if value == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError("User Stories must have an Epic as a parent.")\n                if value == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError("Subtasks must have a User Story as a parent.")\n\n        logger.info(f"Hierarchy validation passed for Task {self.id if self.id else \'New Task\'}.")\n\n    @staticmethod\n    def check_circular_reference(task_id, parent_id):\n        """\n        Iteratively checks for circular references in the task hierarchy.\n        Prevents stack overflow on deep hierarchies.\n        """\n        visited = set()\n        current_parent_id = parent_id\n\n        logger.info(f"Checking circular reference for Task {task_id} with Parent ID: {parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error("Circular reference detected!")\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            if current_parent_id == task_id:\n                logger.error("A task cannot be its own ancestor.")\n                raise ValueError("A task cannot be its own ancestor.")\n\n            # Fetch the next parent_id in the hierarchy\n            task = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not task:\n                break\n            current_parent_id = task.parent_id\n\n        logger.info("Circular reference check passed.")\n```\nKey Enhancements:\n\t1.\tlog_and_validate_parent_id_change:\n\t‚Ä¢\tLogs the old and new parent_id whenever it changes.\n\t‚Ä¢\tEnsures no circular references are introduced.\n\t2.\t_validate_no_circular_references:\n\t‚Ä¢\tValidates the parent_id field to prevent circular dependencies.\n\t‚Ä¢\tLogs progress and raises detailed errors if violations occur.\n\t3.\tlog_and_validate_task_type_change:\n\t‚Ä¢\tLogs changes to task_type with the old and new values.\n\t‚Ä¢\tRevalidates hierarchy rules when task_type changes.\n\t4.\tDetailed Logging for Circular Reference Validation:\n\t‚Ä¢\t_validate_no_circular_references and check_circular_reference methods log every step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t‚Ä¢\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:44:08.340041', 'updated_at': '2025-01-16T19:22:36.219710'}, {'id': 132, 'name': 'Step 1: Update tasks_table_interactions.js', 'description': '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the map for efficient parent-child relationship lookups instead of DOM traversal.\n\n```\nexport const TaskManager = {\n    init: function (csrfToken) {\n        this.csrfToken = csrfToken;\n        this.initTaskParentMap(); // Initialize the map\n        this.initDragAndDrop(); // Initialize drag-and-drop functionality\n    },\n\n    // Initialize a global map for task relationships\n    taskParentMap: new Map(),\n\n    // Build the taskParentMap from the DOM\n    initTaskParentMap: function () {\n        console.log("Initializing Task Parent Map...");\n        const rows = document.querySelectorAll("tr[data-task-id]");\n\n        rows.forEach((row) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = parseInt(row.dataset.parentId, 10) || null;\n            this.taskParentMap.set(taskId, parentId);\n        });\n\n        console.log("Task Parent Map initialized:", Array.from(this.taskParentMap.entries()));\n    },\n\n    // Update the map dynamically after drag-and-drop\n    updateTaskParentMap: function (taskId, parentId) {\n        console.log(`Updating Task Parent Map: Task ${taskId} -> Parent ${parentId}`);\n        this.taskParentMap.set(taskId, parentId);\n    },\n\n    initDragAndDrop: function () {\n        if (window.isDragAndDropInitialized) {\n            console.log("Drag-and-drop is already initialized.");\n            return;\n        }\n\n        console.log("Initializing drag-and-drop within TaskManager...");\n\n        const tableBody = document.querySelector("tbody");\n        if (!tableBody) {\n            console.warn("Task table body not found for drag-and-drop initialization");\n            return;\n        }\n\n        // Initialize Sortable.js for drag-and-drop functionality\n        Sortable.create(tableBody, {\n            handle: ".task-row", // Only draggable via `.task-row` elements\n            animation: 150, // Smooth animation\n            filter: ".task-open-link", // Prevent dragging on task links\n            preventOnFilter: true, // Prevent drag if filtered element is clicked\n            onEnd: async (event) => {\n                try {\n                    console.log("Drag-and-drop operation started...");\n                    const rows = Array.from(event.from.querySelectorAll(".task-row"));\n                    const reorderedTasks = [];\n\n                    rows.forEach((row, index) => {\n                        const taskId = parseInt(row.dataset.taskId, 10);\n                        let parentId = null;\n\n                        // Get the parent ID from the map or fallback to the dataset\n                        if (row.classList.contains("subtask-row")) {\n                            const parentRow = row.previousElementSibling;\n                            parentId = parentRow\n                                ? parseInt(parentRow.dataset.taskId, 10)\n                                : this.taskParentMap.get(taskId) || null;\n                        }\n\n                        // Update the taskParentMap dynamically\n                        this.updateTaskParentMap(taskId, parentId);\n\n                        reorderedTasks.push({\n                            id: taskId,\n                            sort_order: index + 1,\n                            parent_id: parentId,\n                        });\n                    });\n\n                    console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n                    console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n                    // Send the payload to the backend\n                    const response = await fetch("/tasks/reorder_subtasks", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                            "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n                        },\n                        body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n                    });\n\n                    if (!response.ok) {\n                        const errorData = await response.json();\n                        console.error("Error reordering tasks:", errorData);\n                        alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n                        return;\n                    }\n\n                    const data = await response.json();\n                    console.log("Task reordering successful:", data);\n\n                } catch (error) {\n                    console.error("Error during drag-and-drop operation:", error);\n                    alert("An unexpected error occurred while reordering tasks.");\n                }\n            },\n        });\n\n        window.isDragAndDropInitialized = true;\n        console.log("Drag-and-drop initialized successfully.");\n    },\n};\n```\n\nKey Updates:\n\t1.\tPrecomputed Map (taskParentMap):\n\t‚Ä¢\tThe initTaskParentMap function initializes the map by iterating over DOM elements and mapping each task‚Äôs ID to its parent ID.\n\t‚Ä¢\tThe updateTaskParentMap dynamically updates the map when tasks are reordered.\n\t2.\tEfficient Parent Lookup:\n\t‚Ä¢\tThe parentId is derived from the precomputed map rather than DOM traversal.\n\t3.\tBackend Payload:\n\t‚Ä¢\tA structured payload (reorderedTasks) is sent to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t‚Ä¢\tCSRF protection is ensured by passing the token to the request headers.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:44:08.338301', 'updated_at': '2025-02-06T21:59:17.417466'}, {'id': 134, 'name': 'Step 2: Update the Backend in routes.py', 'description': 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\nPlan for step 2:\n\t1.\tVerify the payload structure:\n\t‚Ä¢\tEnsure that the payload includes all necessary fields (id, sort_order, parent_id) for each task.\n\t‚Ä¢\tValidate that the parent-child relationships in the precomputed map (taskParentMap) are reflected correctly in the payload.\n\t2.\tSubmit the payload to the backend:\n\t‚Ä¢\tEnhance the fetch request in the onEnd function of initDragAndDrop to log detailed submission data.\n\t‚Ä¢\tConfirm the payload integrity in the browser console before submission.\n\t3.\tUpdate backend logging:\n\t‚Ä¢\tAdd logging to /reorder_subtasks in routes.py to confirm receipt of the correct payload and process parent-child updates.\n\t‚Ä¢\tLog before and after database updates for better debugging.\n\n-----\nUpdated tasks_table_interactions.js\n\nReplace this section:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    let parentId = null;\n```\nWith:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    const parentId = this.taskParentMap.get(taskId) || null;\n```\nThe this.taskParentMap provides a precomputed and dynamic mapping of taskId to parentId. By using this map, we avoid relying on DOM traversal logic (row.closest or row.previousElementSibling) during drag-and-drop operations, which can sometimes be unreliable or cumbersome.\n\nFull Revised onEnd section:\n```\nonEnd: async (event) => {\n    try {\n        console.log("Drag-and-drop operation started...");\n        const rows = Array.from(event.from.querySelectorAll(".task-row"));\n        const reorderedTasks = [];\n\n        rows.forEach((row, index) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = this.taskParentMap.get(taskId) || null;\n\n            // Update the taskParentMap dynamically\n            this.updateTaskParentMap(taskId, parentId);\n\n            reorderedTasks.push({\n                id: taskId,\n                sort_order: index + 1,\n                parent_id: parentId,\n            });\n        });\n\n        console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n        console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n        // Send the payload to the backend\n        const response = await fetch("/tasks/reorder_subtasks", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n            },\n            body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error("Error reordering tasks:", errorData);\n            alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n            return;\n        }\n\n        const data = await response.json();\n        console.log("Task reordering successful:", data);\n\n    } catch (error) {\n        console.error("Error during drag-and-drop operation:", error);\n        alert("An unexpected error occurred while reordering tasks.");\n    }\n}\n```\n---------------------------------\nEnsure updates include:\n\t‚Ä¢\tBetter Logging: Adding logs for key events such as database changes and validation results.\n\t‚Ä¢\tInput Validation: Ensure all required fields (id, sort_order, parent_id) exist in the payload.\n\t‚Ä¢\tPost-Commit Validation: Confirm database updates after the commit.\n\t‚Ä¢\tImproved Error Handling: Include specific error messages and consistent rollback mechanisms.\n\nBelow is the revised reorder_subtasks route with descriptive comments for each section:\n```\n@bp.route("/reorder_subtasks", methods=["POST"])\ndef reorder_subtasks():\n    """\n    Reorder subtasks globally or reassign them to a different parent.\n\n    Steps:\n    - Parse and validate input from the frontend.\n    - Update parent-child relationships and sort order in the database.\n    - Commit changes and return a success response.\n    - Handle errors gracefully and provide detailed logs for debugging.\n    """\n    logger.info("Entering reorder_subtasks route...")\n    logger.info(f"Received payload for reordering tasks: {request.json}")\n\n    try:\n        # Step 1: Parse input\n        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered\n        ordered_tasks = request.json.get("ordered_tasks", [])\n\n        logger.debug(f"Parsed parent_id: {parent_id}")\n        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")\n\n        # Step 2: Validate input\n        if not isinstance(ordered_tasks, list) or not all(\n            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task\n            for task in ordered_tasks\n        ):\n            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")\n            return jsonify({\n                "error": "Invalid input format for \'ordered_tasks\'. Each task must include \'id\', \'sort_order\', and \'parent_id\'."\n            }), 400\n\n        # Step 3: Validate parent task (if applicable)\n        if parent_id is not None:\n            parent_task = Task.query.get(parent_id)\n            if not parent_task:\n                logger.error(f"Parent task with ID {parent_id} not found.")\n                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400\n\n        logger.info("Input validation passed. Proceeding with task updates...")\n\n        # Step 4: Process updates for each subtask\n        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation\n\n        for task_data in ordered_tasks:\n            subtask_id = task_data["id"]\n            sort_order = task_data["sort_order"]\n            new_parent_id = task_data["parent_id"]\n\n            # Fetch the subtask from the database\n            subtask = Task.query.get(subtask_id)\n            if not subtask:\n                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")\n                continue\n\n            # Log and update parent_id if it changes\n            if new_parent_id is not None and new_parent_id != subtask.parent_id:\n                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")\n                subtask.parent_id = new_parent_id\n\n            # Update sort order\n            subtask.sort_order = sort_order\n            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")\n\n            # Add to the list of updated subtasks for validation\n            updated_subtasks.append(subtask)\n\n        # Step 5: Commit changes to the database\n        try:\n            db.session.commit()\n            logger.info(f"Subtasks reordered successfully: {[task[\'id\'] for task in ordered_tasks]}")\n        except Exception as e:\n            logger.error(f"Error committing changes to the database: {str(e)}")\n            db.session.rollback()\n            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500\n\n        # Step 6: Post-commit validation\n        for subtask in updated_subtasks:\n            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")\n            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")\n\n        # Step 7: Return success response\n        return jsonify({\n            "success": True,\n            "message": "Subtasks reordered successfully.",\n            "updated_subtasks": [subtask.id for subtask in updated_subtasks]\n        }), 200\n\n    except Exception as e:\n        # Step 8: Handle unexpected errors\n        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)\n        db.session.rollback()\n        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500\n```\nKey Changes and Descriptive Comments\n\t1.\tInput Parsing:\n\t‚Ä¢\tExtracts parent_id and ordered_tasks from the request payload.\n\t‚Ä¢\tLogs the parsed values for debugging.\n\t2.\tInput Validation:\n\t‚Ä¢\tEnsures ordered_tasks is a list of dictionaries with the required keys.\n\t‚Ä¢\tValidates parent_id if provided, ensuring the parent task exists in the database.\n\t3.\tUpdate Processing:\n\t‚Ä¢\tIterates through ordered_tasks, updating each task‚Äôs parent_id and sort_order.\n\t‚Ä¢\tLogs changes for each task.\n\t4.\tDatabase Commit:\n\t‚Ä¢\tCommits all updates in a single transaction.\n\t‚Ä¢\tLogs success or rolls back changes in case of an error.\n\t5.\tPost-Commit Validation:\n\t‚Ä¢\tVerifies that the parent_id and sort_order changes were successfully saved to the database.\n\t6.\tError Handling:\n\t‚Ä¢\tCaptures and logs exceptions during processing or committing.\n\t‚Ä¢\tProvides meaningful error messages to the frontend.\n\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:46:29.348853', 'updated_at': '2025-02-06T21:59:21.617065'}, {'id': 131, 'name': 'Step 5: Update utils.py', 'description': 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nChanges to Make:\n\t1.\tEnhance Task Filtering:\n\t‚Ä¢\tEnsure the filters handle parent-child relationships explicitly.\n\t‚Ä¢\tAdd options to include or exclude subtasks in queries.\n\t2.\tUtility Function for Debugging Parent-Child Relationships:\n\t‚Ä¢\tProvide a function to generate a map or list of parent-child relationships for debugging purposes.\n\t3.\tValidation Functions:\n\t‚Ä¢\tAdd a utility function to validate parent-child relationships and ensure no circular dependencies.\n\nUpdated utils.py Code:\n```\nimport logging\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import joinedload\nfrom app.extensions.db import db\nfrom app.tasks.models import Task\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\n\nclass TaskService:\n    @staticmethod\n    def filter_tasks(filters=None, include_subtasks=True, page=None, per_page=None):\n        """\n        Dynamically filters tasks with an option to include or exclude subtasks.\n\n        Args:\n            filters (dict): Filtering criteria.\n            include_subtasks (bool): Whether to include subtasks in the query.\n            page (int, optional): Page number for pagination.\n            per_page (int, optional): Items per page for pagination.\n\n        Returns:\n            Query or Pagination: A SQLAlchemy query object or paginated results.\n        """\n        query = Task.query.options(\n            db.joinedload(Task.project).joinedload(Project.contributors),\n            db.joinedload(Task.contributor),\n            db.joinedload(Task.children),\n        ).order_by(Task.sort_order)\n\n        if filters:\n            logger.debug(f"Applying filters: {filters}")\n\n            # Apply standard filters\n            if "is_archived" in filters:\n                query = query.filter(Task.is_archived == filters["is_archived"])\n            if "project_id" in filters:\n                query = query.filter(Task.project_id == filters["project_id"])\n            if "task_type" in filters:\n                if isinstance(filters["task_type"], list):\n                    query = query.filter(Task.task_type.in_(filters["task_type"]))\n                else:\n                    query = query.filter(Task.task_type == filters["task_type"])\n            if "completion_status" in filters:\n                completion_map = {"completed": True, "in_progress": False}\n                if filters["completion_status"] in completion_map:\n                    query = query.filter(Task.completed == completion_map[filters["completion_status"]])\n\n            # Optionally exclude subtasks\n            if not include_subtasks:\n                query = query.filter(Task.task_type != "Subtask")\n\n        logger.debug(f"Generated query: {query}")\n\n        # Pagination\n        if page and per_page:\n            return query.paginate(page=page, per_page=per_page, error_out=False)\n        return query\n\n    @staticmethod\n    def debug_parent_child_relationships(project_id=None):\n        """\n        Generates a debug map of parent-child relationships for all tasks.\n\n        Args:\n            project_id (int, optional): Restrict to tasks from a specific project.\n\n        Returns:\n            dict: A dictionary mapping parent IDs to their child task IDs.\n        """\n        query = Task.query\n        if project_id:\n            query = query.filter(Task.project_id == project_id)\n\n        tasks = query.options(\n            db.load_only(Task.id, Task.parent_id)\n        ).all()\n\n        relationship_map = {}\n        for task in tasks:\n            if task.parent_id not in relationship_map:\n                relationship_map[task.parent_id] = []\n            relationship_map[task.parent_id].append(task.id)\n\n        logger.debug(f"Parent-Child Relationship Map: {relationship_map}")\n        return relationship_map\n\n    @staticmethod\n    def validate_parent_child_relationships():\n        """\n        Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.\n\n        Raises:\n            ValueError: If invalid relationships are detected.\n        """\n        tasks = Task.query.options(db.joinedload(Task.parent)).all()\n\n        for task in tasks:\n            if task.parent_id:\n                parent_task = task.parent\n                if not parent_task:\n                    raise ValueError(f"Task {task.id} has an invalid parent ID {task.parent_id}.")\n\n                # Validate hierarchy rules\n                if task.task_type == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError(f"User Story {task.id} must have an Epic as its parent.")\n                if task.task_type == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError(f"Subtask {task.id} must have a User Story as its parent.")\n\n        logger.info("All parent-child relationships are valid.")\n\n    @staticmethod\n    def get_all_task_ids_with_parents():\n        """\n        Returns a flat list of tasks with their parent IDs for debugging.\n\n        Returns:\n            list: A list of tuples (task_id, parent_id).\n        """\n        tasks = Task.query.with_entities(Task.id, Task.parent_id).all()\n        logger.debug(f"Task IDs with Parent IDs: {tasks}")\n        return tasks\n```\n\n\nExplanation of Changes:\n\t1.\tfilter_tasks Enhancements:\n\t‚Ä¢\tAdded include_subtasks parameter to optionally exclude subtasks from the query.\n\t2.\tdebug_parent_child_relationships:\n\t‚Ä¢\tCreates a parent-child relationship map for debugging purposes.\n\t3.\tvalidate_parent_child_relationships:\n\t‚Ä¢\tIterates through all tasks to validate parent-child hierarchy and ensures no invalid relationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t‚Ä¢\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.091824', 'updated_at': '2025-01-16T19:22:36.236691'}, {'id': 135, 'name': 'Step 3: Update list.html', 'description': 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already includes everything needed. No required changes.\n\nHere¬¥s the relevant section of list.html:\n\n```\n<tr id="task-{{ task.id }}"\n                class="task-row {% if task.task_type == \'Subtask\' %}subtask-row{% elif task.task_type == \'User Story\' %}user-story-row{% elif task.task_type == \'Epic\' %}epic-row{% endif %}"\n                style="background-color: \n                {% if task.task_type == \'Subtask\' %}\n                    rgba(200, 230, 255, 0.5); /* Light blue for Subtask */\n                {% elif task.task_type == \'User Story\' %}\n                    rgba(255, 255, 200, 0.5); /* Light yellow for User Story */\n                {% elif task.task_type == \'Epic\' %}\n                    rgba(255, 200, 200, 0.5); /* Light red for Epic */\n                {% else %}\n                    rgba(240, 240, 240, 1); /* Default light gray */\n                {% endif %};"\n                data-task-id="{{ task.id }}"\n                data-parent-id="{{ task.parent_id or \'\' }}"\n                data-level="{{ depth }}">\n                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>\n                <td>\n                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}\n                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}" aria-label="Toggle details for task {{ task.name }}">\n                        <i class="bi bi-chevron-right"></i>\n                    </button>\n                    {% endif %}\n                </td>\n                <td class="fw-medium fs-6 \n                {% if task.task_type == \'Epic\' %}\n                    epic-cell\n                {% elif task.task_type == \'User Story\' %}\n                    user-story-cell\n                {% elif task.task_type == \'Subtask\' %}\n                    subtask-cell\n                {% endif %}" \n                style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">\n                <span class="bi fs-6\n                {% if task.task_type == \'Epic\' %}\n                    bi-circle-fill\n                {% elif task.task_type == \'User Story\' %}\n                    bi-circle-half\n                {% elif task.task_type == \'Subtask\' %}\n                    bi-circle\n                {% endif %}">\n                </span>\n                {{ task.name }}\n                <small class="text-muted fw-light">\n                    (Parent-ID: {{ task.parent_id or \'None\' }})\n                </small>\n                <!-- Open Link -->\n                <a href="#" class="task-open-link" data-task-id="{{ task.id }}">\n                    <i class="bi bi-arrows-angle-expand" style="font-size: 0.8rem; color: white;"></i>\n                    Open\n                </a>\n            </td>\n                <td class="fw-light fs-6">\n                    <small class>\n                    LAC-{{ task.id }}\n                    </small>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light text-bg-secondary">\n                        {{ task.project if task.project else "Unknown Project" }}\n                    </span>\n                </td>\n                <td class="fs-6" data-contributor-column>{{ task.assigned_to if task.assigned_to else "Unassigned" }}</td>\n                <td class="fs-6">{{ task.story_points }}</td>\n                <td class="fs-6">\n                    <span class="badge rounded-pill fw-light text-bg-light">\n                        {{ task.task_type }}\n                    </span>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light {% if task.completed %}text-bg-success{% else %}text-bg-warning{% endif %}">\n                        {{ "Completed" if task.completed else "In Progress" }}\n                    </span>\n                </td>\n                <td>\n                    <!-- Delete Icon -->\n                    <button class="btn btn-dark btn-sm delete-task-btn" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .2rem; --bs-btn-font-size: .75rem;" data-task-id="{{ task.id }}" aria-label="Deletes task {{ task.id }}">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n            </tr>\n            {% for child in tasks if child.parent_id == task.id %}\n                {{ render_task(child, tasks, depth + 1) }}\n            {% endfor %}\n            {% endmacro %}\n            \n            <!-- Render top-level tasks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:46:29.349784', 'updated_at': '2025-01-16T19:22:36.238473'}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'description': 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitHub Login involves integrating OAuth 2.0, which both services support. The complexity depends on your app‚Äôs existing setup, frameworks, and experience with third-party authentication. Below is a breakdown:\n\nKey Steps for Implementing Google or GitHub Login\n\t1.\tSet Up OAuth Credentials:\n\t‚Ä¢\tRegister your application in the Google Cloud Console or GitHub Developer Settings.\n\t‚Ä¢\tObtain the client ID and client secret.\n\t2.\tInstall Required Libraries:\n\t‚Ä¢\tUse a library for OAuth (e.g., flask-oauthlib, python-social-auth, or authlib).\n\t‚Ä¢\tPopular frameworks like Flask and Django already have robust integrations for OAuth providers.\n\t3.\tBackend Configuration:\n\t‚Ä¢\tImplement an endpoint to handle the OAuth flow (/auth/login/google or /auth/login/github).\n\t‚Ä¢\tConfigure your app to send users to Google or GitHub‚Äôs authentication page.\n\t‚Ä¢\tHandle the OAuth callback to exchange the authorization code for an access token.\n\t‚Ä¢\tVerify the token and fetch user information (e.g., email, name).\n\t4.\tLink OAuth to User Registration:\n\t‚Ä¢\tOn successful login, create or retrieve a user in your database.\n\t‚Ä¢\tStore the user‚Äôs details like email, OAuth provider ID, and access token.\n\t5.\tFrontend Integration (if applicable):\n\t‚Ä¢\tAdd ‚ÄúLogin with Google‚Äù or ‚ÄúLogin with GitHub‚Äù buttons.\n\t‚Ä¢\tRedirect to your backend‚Äôs OAuth endpoint when clicked.', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T12:15:54.291625', 'updated_at': '2025-01-16T19:22:36.239866'}, {'id': 62, 'name': 'Add OAuth integration for Google Login', 'description': 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.241200'}, {'id': 64, 'name': 'Setup project credentials for Google API', 'description': 'Generate client ID and secret from Google API Console for your application.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-01-16T19:22:36.242497'}, {'id': 67, 'name': 'Test Google OAuth flow', 'description': 'Verify the OAuth flow using test accounts and check the token exchange.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.243780'}, {'id': 65, 'name': 'Implement backend endpoints for Google OAuth', 'description': 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-01-16T19:22:36.244932'}, {'id': 63, 'name': 'Add OAuth integration for GitHub Login', 'description': 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.246358'}, {'id': 68, 'name': 'Register application in GitHub Developer Console', 'description': 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.247746'}, {'id': 69, 'name': 'Handle callback from GitHub', 'description': 'Implement the callback endpoint to process the authorization code from GitHub.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.248912'}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'description': 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 18, 'status': 'Not Started', 'created_at': '2025-01-07T19:53:50.085064', 'updated_at': '2025-01-16T19:22:36.250169'}, {'id': 100, 'name': '1.1 User Registration', 'description': 'As a user, I want to register with a username, email, and password so that I can create an account and access the system.\n\n**Acceptance Criteria:**\n\n‚Ä¢\tUser can input valid username, email, and password.\n‚Ä¢\tUsername and email must be unique.\n‚Ä¢\tErrors are displayed for invalid inputs or duplicate accounts.\n‚Ä¢\tPasswords must meet complexity requirements and be securely stored.\n‚Ä¢\tSuccessful registration redirects users to a login page.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:59:09.044667', 'updated_at': '2025-01-16T19:22:36.251812'}, {'id': 107, 'name': '1.1.1 Database Changes for User Registration', 'description': '1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.\n   CREATE TABLE public.users (\n       id SERIAL PRIMARY KEY,\n       username VARCHAR(50) UNIQUE NOT NULL,\n       email VARCHAR(100) UNIQUE NOT NULL,\n       password_hash VARCHAR(255) NOT NULL,\n       created_at TIMESTAMP DEFAULT NOW(),\n       updated_at TIMESTAMP DEFAULT NOW()\n);\n\n\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-11T11:36:20.238219'}, {'id': 108, 'name': '1.1.2 Backend API for Registration', 'description': '‚Ä¢\tCreate an endpoint POST /api/register:\n‚Ä¢\tValidate input fields.\n‚Ä¢\tHash the password using bcrypt or argon2.\n‚Ä¢\tInsert the user into the users table.\n‚Ä¢\tReturn success/failure responses.\ndddhfff\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:33.067643'}, {'id': 112, 'name': '1.2.2 Frontend Login Page', 'description': 'Develop a frontend form for user login with email and password inputs.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.683644'}, {'id': 109, 'name': '1.1.3 Create Frontend Registration Page', 'description': 'Develop a frontend form to collect user registration details.\n‚Ä¢\tAdd a form for username, email, and password inputs.\n‚Ä¢\tUse client-side validation (e.g., email format).\n‚Ä¢\tSend a POST request to /api/register.\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.684988'}, {'id': 110, 'name': '1.1.4 Unit Tests for Registration', 'description': 'Write unit tests for:\n\n‚Ä¢\tValid registration.\n‚Ä¢\tDuplicate username/email scenarios.\n‚Ä¢\tInvalid input handling.\nff', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.686902'}, {'id': 101, 'name': '1.2 User Login', 'description': 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n‚Ä¢\tUsers can log in with a valid email and password.\n‚Ä¢\tErrors are displayed for invalid credentials.\n‚Ä¢\tSuccessful login stores a session or JWT token.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:25:53.687936'}, {'id': 111, 'name': '1.2.1 Backend API for Login', 'description': 'Create POST /api/login endpoint to handle user login.\njjsjj', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.689096'}, {'id': 113, 'name': '1.2.3 Session Management', 'description': 'Implement secure session handling using cookies or JWT.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:20.968680'}, {'id': 114, 'name': '1.2.4 Unit Tests for Login', 'description': 'Write tests for successful and failed login attempts.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:22:36.265866'}, {'id': 106, 'name': 'Password Reset', 'description': 'As a user, I want to reset my password securely using email.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.267247'}, {'id': 128, 'name': 'Frontend Password Reset Page', 'description': 'Develop a page for users to enter a new password using a valid token.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.269158'}, {'id': 129, 'name': 'Testing Password Reset', 'description': 'Write tests for email delivery, token validation, and password updates.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.270849'}, {'id': 102, 'name': 'Logout', 'description': 'As a user, I want to log out so that I can end my session securely.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.272605'}, {'id': 117, 'name': 'Tests for Logout', 'description': 'Verify session invalidation and redirection to the login page.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.274575'}, {'id': 116, 'name': 'Frontend Logout Button', 'description': 'Add a logout button to the UI and handle session clearing.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-09T12:31:17.939784'}, {'id': 115, 'name': 'Backend API for Logout', 'description': 'Create POST /api/logout endpoint to invalidate user sessions.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.277547'}, {'id': 61, 'name': 'Parent task assignment', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-04T22:31:45.205815', 'updated_at': '2025-01-16T19:22:36.279012'}, {'id': 45, 'name': 'Display Default Value in Dropdown', 'description': 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.280493'}, {'id': 50, 'name': 'Retrieve Current Parent Task', 'description': 'Retrieve the current parent task‚Äôs ID and name from the backend.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'In Progress', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:22.274304'}, {'id': 51, 'name': 'Set Default Value', 'description': 'Set the default value in the dropdown based on the retrieved data.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 45, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 1, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.283309'}, {'id': 46, 'name': 'Search for Parent Tasks', 'description': 'Allow users to search for tasks dynamically in the dropdown by typing.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.284882'}, {'id': 54, 'name': 'Test Partial Matching', 'description': 'Ensure the search results update in real-time as the user types.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:29.251047'}, {'id': 47, 'name': 'Handle Large Datasets Efficiently', 'description': 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:26:23.067490'}, {'id': 56, 'name': 'Paginate API Responses', 'description': 'Implement server-side filtering and pagination for large datasets.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:16.233517'}, {'id': 55, 'name': 'Enable Lazy Loading', 'description': 'Enable lazy loading or virtualization in Virtual Select.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:08.099271'}, {'id': 48, 'name': 'Select and Deselect Parent Tasks', 'description': 'Allow users to select a parent task or deselect by choosing "None."', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:25:59.651639'}, {'id': 57, 'name': 'Ensure None Option Availability', 'description': 'Add ‚ÄúNone‚Äù as a selectable option and ensure it stays at the top of the list.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:51.310240'}, {'id': 58, 'name': 'Handle Selection Events', 'description': 'Implement event listeners to update the form‚Äôs state when the selection changes.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:43.569501'}, {'id': 49, 'name': 'Integrate Dropdown with Task Form', 'description': 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:25:36.133259'}, {'id': 59, 'name': 'Bind Dropdown to Form Field', 'description': 'Bind the dropdown to the form‚Äôs parent task field.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:15.491910'}, {'id': 60, 'name': 'Test Form Submission', 'description': 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:28.367797'}, {'id': 41, 'name': 'Implement Searchable Dropdown', 'description': 'As a user, I want a searchable dropdown for parent task assignment.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Completed', 'created_at': '2025-01-03T09:14:28.285904', 'updated_at': '2025-02-11T08:25:07.992524'}, {'id': 52, 'name': 'Add Search Box to Dropdown', 'description': 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:01.469601'}, {'id': 53, 'name': 'Implement AJAX Search', 'description': 'Implement AJAX-based search to fetch tasks dynamically from the backend.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:24:54.245010'}, {'id': 42, 'name': 'Choose Dropdown Library', 'description': 'Research and decide on the dropdown library to use.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-11T08:24:47.274896'}, {'id': 43, 'name': 'Integrate Dropdown Library', 'description': 'Integrate the chosen dropdown library into the project.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Completed', 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-11T08:24:33.908549'}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t‚Ä¢\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t‚Ä¢\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t‚Ä¢\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-02-11T08:24:26.494016'}, {'id': 85, 'name': 'Assign multiple contributors to a task', 'description': 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:32:39.466022', 'updated_at': '2025-02-11T08:24:21.069473'}, {'id': 90, 'name': 'Update frontend to display and manage multiple contributors', 'description': 'Allow users to view, add, or remove multiple contributors via the UI.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-11T08:24:13.204884'}, {'id': 88, 'name': 'Update database schema for multiple contributors', 'description': 'Modify the task table to support many-to-many relationships for contributors.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-11T08:24:05.873554'}, {'id': 89, 'name': 'Develop backend API for adding contributors to a task', 'description': 'Create endpoints to add, update, and remove contributors for a task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-11T08:23:58.436495'}, {'id': 86, 'name': 'Allow designation of task owner', 'description': 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:29.330562', 'updated_at': '2025-02-11T08:23:51.269557'}, {'id': 93, 'name': 'Update frontend to manage task ownership', 'description': 'Allow users to assign or update the task owner via the UI.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-11T08:23:42.771565'}, {'id': 91, 'name': 'Update database schema for task ownership', 'description': 'Add a column or relationship to assign a single owner per task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-11T08:23:33.670381'}, {'id': 92, 'name': 'Develop backend API for assigning task owner', 'description': 'Create endpoints to assign or update the owner of a task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-11T09:19:44.027744'}, {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-02-11T08:23:23.402442'}, {'id': 96, 'name': 'Allow admin users to create and customize contributor roles via frontend', 'description': 'Provide UI functionality for admins to manage contributor roles dynamically.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T08:23:13.139282'}, {'id': 94, 'name': 'Add database support for contributor roles', 'description': 'Introduce a roles table and link contributors to specific roles for tasks.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T08:22:56.181530'}, {'id': 95, 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T08:22:02.276492'}, {'id': 127, 'name': 'Backend API for Password Reset', 'description': 'Create endpoints to handle password reset requests and token validation.\ndfdf\n\nasdasd', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-10T23:59:50.734037'}, {'id': 126, 'name': 'Email Configuration for Password Reset', 'description': 'Configure email service to send password reset links.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.334340'}, {'id': 104, 'name': 'Middleware for Role Enforcement', 'description': 'As a system, I want to enforce role-based access to specific routes.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:23:40.346816'}, {'id': 122, 'name': 'Testing Role Enforcement', 'description': 'Write tests to ensure proper access control based on roles.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-01-16T19:23:58.185693'}, {'id': 121, 'name': 'Develop Role Enforcement Middleware', 'description': 'Implement middleware to check user roles for access control.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-01-16T19:23:58.187439'}, {'id': 105, 'name': 'Profile Management', 'description': 'As a user, I want to update my profile (username, email, password).', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.339830'}, {'id': 123, 'name': 'Backend API for Profile Management', 'description': 'Create PATCH /api/profile endpoint to update user details.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-01-16T19:24:19.678781'}, {'id': 125, 'name': 'Testing Profile Updates', 'description': 'Write tests for profile update functionality.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-01-16T19:24:19.680382'}]
2025-02-13 23:47:33,907 DEBUG: Task types: ['all', 'Epic', 'Subtask', 'User Story']
2025-02-13 23:47:33,907 DEBUG: Projects: [<Project Project Alpha (ID: 1)>, <Project Project Beta (ID: 2)>, <Project Project Gamma (ID: 3)>, <Project Project Theta (ID: 4)>, <Project Project Delta (ID: 5)>, <Project PMS - Feature Requests (ID: 7)>, <Project PMS - Backlog (ID: 6)>]
2025-02-13 23:47:33,909 DEBUG: Tasks response: [{'id': 290, 'name': 'issue: error when changing task type and', 'description': 'issue: error when changing task type and parent task before saving', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:00:03.417734', 'updated_at': '2025-02-10T09:15:09.284969'}, {'id': 298, 'name': 'example user story with parent epic 297', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 297, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:41:01.907455', 'updated_at': '2025-02-10T14:59:04.142570'}, {'id': 275, 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-10T08:38:37.622196'}, {'id': 276, 'name': 'add support for priority', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-10T08:28:47.447612'}, {'id': 264, 'name': 'close all / open all childtasks', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-02-10T08:47:14.915970'}, {'id': 285, 'name': 'add text truncation to project names in task list', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-10T09:45:47.029729'}, {'id': 257, 'name': 'Update Task API Integration', 'description': "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-02-05T22:55:49.566819', 'updated_at': '2025-02-05T22:18:17.807154'}, {'id': 294, 'name': 'issue: task table filters not working', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:19:21.022598', 'updated_at': '2025-02-12T10:59:15.483390'}, {'id': 267, 'name': 'improvements to toggles and nested tasks', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:29:12.464594', 'updated_at': '2025-02-10T08:47:24.581680'}, {'id': 283, 'name': 'fix update title', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:58.769700', 'updated_at': '2025-02-10T08:46:47.282087'}, {'id': 271, 'name': 'make sure dynamically added rows has the exact same styling and includes every element', 'description': 'Missing elements:\n- Open link\n- Default project\n- Project name should be inside a pill\n- Task type should be in a pill\n- Estimations should be 0, not N/A\n- Make sure font size is matching\n- status should have the dropdown inside a pill\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:21:07.108431', 'updated_at': '2025-02-10T08:38:47.340105'}, {'id': 273, 'name': 'disable parent task selector in epics', 'description': 'and add text, Epic can¬¥t have parent tasks', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:45:20.740910', 'updated_at': '2025-02-10T08:39:17.639890'}, {'id': 269, 'name': 'fix styling for sweetalert', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-02-08T15:54:56.717846', 'updated_at': '2025-02-10T08:39:32.172437'}, {'id': 286, 'name': 'add support for labels/tags', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:46:23.985620', 'updated_at': '2025-02-10T09:46:23.987564'}, {'id': 299, 'name': 'example sub task with parent user story 298', 'description': 'Test update 1\nTest update 2\nTest update 3', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 298, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:42:38.905700', 'updated_at': '2025-02-10T23:23:08.671464'}, {'id': 266, 'name': 'highlight the nested tasks', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-02-10T08:47:04.382929'}, {'id': 279, 'name': 'github integration', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:38.238202', 'updated_at': '2025-02-10T08:39:24.168451'}, {'id': 289, 'name': 'issue: parent task is lost when updating task', 'description': '- Summary of the problem and solution\n    \n    **Problem: Parent Task Dropdown Was Not Being Set on Modal Open**\n    \n    The issue was that when opening a task modal, the **parent task dropdown** was not pre-populated with the correct parent task. However, interacting with the dropdown (e.g., clicking on it) would suddenly trigger it to be set correctly. This meant that the dropdown initialization was likely delayed or missing a step in the modal lifecycle.\n    \n    **Debugging Steps and Observations**\n    \n    1. **Task Details Were Fetched Correctly** ‚úÖ\n    - The task details, including parent_id, were being fetched from the API successfully.\n    1. **Parent Dropdown Initialization Issues** ‚ùå\n    - The initializeParentDropdown() function was being called, but the dropdown was sometimes **not fully ready** when we tried to set the selected parent task.\n    1. **Clicking the Dropdown Triggered the Parent to Be Set** ü§î\n    - This hinted that the dropdown was not fully ready when setParentDropdown(task.parent_id) was initially called.\n    \n    **Final Solution**\n    \n    1. **Ensuring Dropdown Readiness Before Setting the Parent Task**\n    - We added explicit **delays and checks** to confirm that the dropdown was fully initialized before attempting to set the parent task.\n    \n    Specifically, we:\n    \n    - **Waited for the dropdown to appear in the DOM** using observeParentDropdown().\n    - **Initialized the dropdown** with initializeParentDropdown().\n    - **Waited explicitly for the dropdown to be fully ready** using waitForParentDropdownReady().\n    - **Added a final delay of 200ms** before calling setParentDropdown() to ensure stability.\n    1. **Modifying openTaskModal to Handle Parent Dropdown Setup**\n    - We ensured that initializeParentDropdown() was called **after fetching task details** and before setting the parent task.\n    1. **Confirming the Fix** üéØ\n    - After these fixes, the parent dropdown was **immediately populated** upon opening the modal, without requiring user interaction.\n    \n    **Key Learnings**\n    \n    ‚úÖ **Dropdowns in modals need careful timing** ‚Äì They might not be ready when you expect them to be.\n    \n    ‚úÖ **Waiting for DOM updates is crucial** ‚Äì Observing the element ensures it actually exists before interacting with it.\n    \n    ‚úÖ **Explicit delays can prevent race conditions** ‚Äì A small delay can sometimes resolve timing issues in UI interactions.\n    \n    **Final Result**\n    \n    ‚úÖ The modal now **correctly loads and pre-selects the parent task** without extra clicks! üéâüöÄ', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T08:56:25.273984', 'updated_at': '2025-02-11T15:40:03.610698'}, {'id': 278, 'name': 'search feature for tasks list', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:03.369833', 'updated_at': '2025-02-10T08:39:04.005957'}, {'id': 281, 'name': 'add high level plan', 'description': 'Add some sort of high level plan that aims to keep PM/PO¬¥s on track and not get lost into the details of an overwhelminly large backlog', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:27:01.218606', 'updated_at': '2025-02-10T08:38:54.754760'}, {'id': 287, 'name': 'when moving a parent item to another project make sure the subtasks are moved as well', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:48:31.986870', 'updated_at': '2025-02-10T09:48:31.988859'}, {'id': 272, 'name': 'implement a markdown text editor like notion', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-02-10T08:28:39.669255'}, {'id': 293, 'name': 'click on title should copy the task title and id to clipboard', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:16:33.508209', 'updated_at': '2025-02-10T10:16:33.510414'}, {'id': 277, 'name': 'custom task workflow statuses', 'description': 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- Custom status\n-- Custom status\n- In Progress\n-- Custom status\n-- Custom status\n-- Custom status\n- Completed\n-- Custom status\n-- Custom status\n\n2. How can we track a task through different stages and save the sequence of events or stages the task has gone through?\nI¬¥m thinking it could be good for mapping out processes, identifying bottlenecks and provide valuable insights while improving and streamlining workflows.\n- Stages\n- Contacts taken\n- Respons time \n- Time to action after responses\n- Dependencies\n\nNeed to be able to record every action related to this action.\nCommunication integrations\n- Slack\n- Email\n- Text messages\n- Phonecalls\n- Calendar events, meetings\n- Zoom, Google meet, Teams etc..\n\n\n2. Set custom statuses per project (can use tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:16:03.352588', 'updated_at': '2025-02-10T08:38:28.123328'}, {'id': 274, 'name': 'add support for goals, initiatives, okr¬¥s', 'description': 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:46:27.204912', 'updated_at': '2025-02-10T08:28:17.663922'}, {'id': 280, 'name': 'logging (task and project history)', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:37:44.435112', 'updated_at': '2025-02-10T08:28:28.947805'}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:17.786154', 'updated_at': '2025-02-10T09:41:17.787861'}, {'id': 296, 'name': 'issue: contributor is lost after updating task', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:26:43.881947', 'updated_at': '2025-02-11T15:37:31.011120'}, {'id': 288, 'name': 'when trying to move subtask to another project, make sure a warning is displayed', 'description': 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be lost"\nOR\n\nIs it possible, and is it desireable to keep parent child relationships across projects?\nSo that a parent can be in one project but the child tasks can be in different projects?\n\nLets say \nParent epic is \n"Internationalisation"\nChild user stories are\n- Timezones\n- Language\n- Currency\n- Day, Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:54:36.297869', 'updated_at': '2025-02-10T08:54:51.840686'}, {'id': 284, 'name': 'add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-10T09:42:27.720908'}, {'id': 295, 'name': 'issue: drag and drop errors', 'description': '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:22:54.461413', 'updated_at': '2025-02-10T10:22:54.462542'}, {'id': 297, 'name': 'example parent epic', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:39:51.620509', 'updated_at': '2025-02-10T10:39:51.622712'}, {'id': 292, 'name': 'issue: assigning contributor does not work', 'description': '### **Summary of problem and solution**\n\nThe issue was that assigning a contributor to a task via the /tasks/<task_id>/assign_contributor API endpoint resulted in a **400 Bad Request** error. Upon investigation, the following problems were identified:\n\n1. **Missing CSRF Token:**\n- The request failed due to a missing CSRF token, as shown in the error message: *‚ÄúBad Request: The CSRF token is missing.‚Äù*\n- The frontend was not correctly including the CSRF token in the request headers.\n1. **JavaScript Error (Undefined CSRF Token Variable):**\n- The error *‚ÄúReferenceError: csrfToken is not defined‚Äù* indicated that the CSRF token was not being retrieved properly in the JavaScript code.\n1. **Incorrect Fetch Request Headers:**\n- The fetch request did not include the CSRF token under the correct key (X-CSRFToken).\n- The script attempted to send the request without properly extracting the CSRF token from the meta tag.\n\n### **Solution**\n\n1. **Include the CSRF Token in the JavaScript Code**\n\nThe CSRF token was retrieved from the meta tag and used in the request headers:\n\n```jsx\n// Retrieve CSRF token from meta tag\nconst csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\');\n```\n\nThis ensures that the CSRF token is correctly fetched and available in the JavaScript scope.\n\n1. **Modify the Fetch Request to Include CSRF Token**\n\nThe request to assign a contributor was updated to include the token:\n\n```jsx\nconst response = await fetch(`/tasks/${taskId}/assign_contributor`, {\n    method: "POST",\n    headers: { \n        "Content-Type": "application/json",\n        "X-CSRFToken": csrfToken  // Include CSRF token\n    },\n    body: JSON.stringify({ contributor_id: parseInt(contributorId, 10) }),\n});\n```\n\n- **Ensures the CSRF token is sent in the request headers** so that Flask-WTF does not reject the request.\n1. **Verify and Debug Network Requests**\n- The updated request headers were verified using **Chrome DevTools > Network tab** to ensure the X-CSRFToken was included.\n- The error messages disappeared, and the contributor assignment request **succeeded with a 200 OK response**.\n\n---\n\n### **Final Outcome**\n\nüöÄ The issue was resolved, and contributors can now be assigned successfully to tasks without triggering a CSRF validation error.\n\n### **Key Learnings from This Session**\n\nThis debugging session covered several important aspects of **web development with Flask and JavaScript**, particularly related to **API requests, CSRF protection, debugging tools, and database interactions**. Here are the key takeaways:\n\n---\n\n### **1. CSRF Protection in API Requests**\n\n- **Issue:** The initial error was due to **a missing CSRF token** when making a `POST` request.\n- **Fix:** The solution was to **retrieve the CSRF token from a meta tag** in the HTML and include it in the request headers.\n- **Key Learning:** Flask-WTF requires CSRF tokens for form and API submissions to **prevent cross-site request forgery (CSRF) attacks**.‚úÖ Always ensure that API requests include a valid CSRF token.\n\n---\n\n### **2. Debugging JavaScript Fetch Requests**\n\n- **Issue:** The JavaScript code was making a fetch request, but the variable `csrfToken` was not properly defined, causing a `ReferenceError`.\n- **Fix:** Declaring `csrfToken` at the beginning of the script:\n    \n    ```jsx\n    const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\');\n    ```\n    \n- **Key Learning:**‚úÖ JavaScript variables must be defined before they are used.‚úÖ Use browser **developer tools (DevTools) Network tab** to inspect headers, payloads, and responses when debugging API requests.\n\n---\n\n### **3. Structuring Flask Routes for Task Management**\n\n- **Issue:** The `assign_contributor` route was failing due to incorrect request payload validation.\n- **Fix:** Improved the route‚Äôs error handling and logging:\n    \n    ```python\n    @bp.route(\'/<int:task_id>/assign_contributor\', methods=[\'POST\'])\n    def assign_contributor(task_id):\n        try:\n            data = request.get_json()\n            contributor_id = int(data.get(\'contributor_id\', 0))\n            if not contributor_id:\n                return jsonify({\'error\': \'Valid Contributor ID is required\'}), 400\n    ```\n    \n- **Key Learning:**‚úÖ Always validate incoming data in Flask routes to prevent type errors.‚úÖ Use `request.get_json()` properly and handle missing or incorrect data gracefully.\n\n---\n\n### **4. Utilizing Browser DevTools for Debugging**\n\n- **Issue:** The fetch request was failing with a `400 Bad Request`, and the browser console showed `ReferenceError: csrfToken is not defined`.\n- **Fix:**\n    - Used **Network tab** to inspect the request payload and headers.\n    - Used **Console tab** to catch JavaScript errors early.\n- **Key Learning:**‚úÖ DevTools is a **critical** tool for diagnosing network request issues.‚úÖ Always **check console errors** before assuming it\'s a backend issue.\n\n---\n\n### **5. Database Queries and ORM Debugging**\n\n- **Issue:** Tasks were not being updated correctly, possibly due to missing commit statements.\n- **Fix:** Ensured that:was executed properly.\n    \n    ```python\n    task.contributor_id = contributor_id\n    db.session.commit()\n    ```\n    \n- **Key Learning:**‚úÖ Always call `db.session.commit()` after making changes in SQLAlchemy.‚úÖ Rollback transactions if an error occurs to avoid database inconsistency.\n\n---\n\n### **6. Handling Asynchronous JavaScript Logic**\n\n- **Issue:** The `assignContributor` function was executing before the page was fully loaded.\n- **Fix:** Wrapped it inside a function that ensures elements exist:\n    \n    ```\n    window.setupContributorAssignment = function () {\n        const assignButton = $("#assign-contributor-btn");\n        if (!assignButton.length) {\n            setTimeout(setupContributorAssignment, 500); // Retry in 500ms\n            return;\n        }\n    ```\n    \n- **Key Learning:**‚úÖ Use `setTimeout` to **retry event binding** when elements are dynamically loaded.‚úÖ Always **check if elements exist before attaching event handlers**.\n\n---\n\n### **7. Best Practices for Flask Logging & Error Handling**\n\n- **Issue:** Lack of clear logging when API calls failed.\n- **Fix:** Added better logging to track failures:\n    \n    ```python\n    logger.info(f"Assigning contributor to task ID {task_id}")\n    try:\n        # Process request...\n    except Exception as e:\n        logger.error(f"Error assigning contributor: {e}")\n    ```\n    \n- **Key Learning:**‚úÖ Log **every major step** in API processing to simplify debugging.‚úÖ Differentiate between `logger.info()`, `logger.warning()`, and `logger.error()` based on severity.\n\n---\n\n### **Final Takeaways**\n\nüöÄ **Understanding CSRF protection** and **properly structuring API requests** is crucial for secure web applications.\n\nüîç **Browser DevTools is invaluable** for diagnosing frontend issues, especially in JavaScript.\n\nüêç **Flask requires proper request validation, database transactions, and logging** to maintain stability.\n\n‚ö° **Asynchronous JavaScript must handle dynamic elements carefully** to avoid runtime errors.\n\nThis session reinforced best practices in **frontend-backend integration, debugging, and security**, making it a great learning experience! üöÄüî•', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:11:12.273779', 'updated_at': '2025-02-12T10:59:41.585250'}, {'id': 265, 'name': 'smooth transition for toggles', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-02-10T08:46:55.831743'}, {'id': 270, 'name': 'the newest task', 'description': '', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:07:34.368035', 'updated_at': '2025-02-10T01:07:34.372478'}, {'id': 291, 'name': 'add dropdowns in task list for changing: project, assigned to, estimate and task type (labels/tags)', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-02-10T10:09:52.997455'}, {'id': 136, 'name': 'Page scroll should stay in position when reloading', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-16T18:21:50.187247', 'updated_at': '2025-01-16T19:22:36.214901'}, {'id': 130, 'name': 'Implement the Map of Task Relationships solution for drag-and-drop', 'description': 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.093022', 'updated_at': '2025-01-16T19:22:36.216705'}, {'id': 133, 'name': 'Step 4: Enhance Logging in models.py', 'description': 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nupdating the Task model in the following ways:\n\n1.\tLog Changes to parent_id:\n\t‚Ä¢\tLog changes to parent_id during updates, including old and new values.\n\t2.\tValidate Hierarchy with Logging:\n\t‚Ä¢\tLog detailed messages when validating hierarchy changes, especially for circular dependency checks.\n\nHere‚Äôs how the models.py can be updated:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy import func, cast, CheckConstraint\nfrom sqlalchemy.orm import validates\nfrom app.extensions.db import db\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\nclass Task(db.Model):\n    __tablename__ = "task"\n    \n    # Other columns...\n\n    parent_id = db.Column(\n        db.Integer, db.ForeignKey("task.id"), index=True, nullable=True\n    )\n\n    # Relationships\n    parent = db.relationship(\n        "Task", remote_side=[id], back_populates="children", lazy="select"\n    )\n    children = db.relationship(\n        "Task", back_populates="parent", lazy="select"\n    )\n\n    \n\n\n    @staticmethod\n    def _validate_no_circular_references(new_parent_id):\n        """\n        Validates that there are no circular references in the task hierarchy.\n\n        Args:\n            new_parent_id (int): The new parent ID to validate.\n\n        Raises:\n            ValueError: If a circular reference is detected.\n        """\n        visited = set()\n        current_parent_id = new_parent_id\n\n        logger.info(f"Validating circular references for parent ID: {new_parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error(\n                    f"Circular reference detected: Parent ID {current_parent_id} already visited."\n                )\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            # Fetch the next parent_id in the hierarchy\n            parent = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not parent:\n                break  # Exit if no parent is found\n            current_parent_id = parent.parent_id\n\n        logger.info("No circular reference detected.")\n\n    @validates(\'parent_id\', \'task_type\')\n    def validate_task_changes(self, key, value):\n        """\n        Validates changes to \'parent_id\' and \'task_type\'.\n        Ensures hierarchy validity and checks for circular references.\n        """\n        logger.debug(f"Validating {key} change for Task {self.id}: {value}")\n\n        if key == \'parent_id\':\n            # Log changes to parent_id\n            if self.id and value != self.parent_id:\n                logger.info(f"Task {self.id}: Updating \'parent_id\' from {self.parent_id} to {value}")\n\n            # Prevent a task from being its own parent\n            if value and value == self.id:\n                logger.error("A task cannot be its own parent.")\n                raise ValueError("A task cannot be its own parent.")\n\n            # Check for circular references\n            if value:\n                Task.check_circular_reference(self.id, value)\n\n        elif key == \'task_type\':\n            # Log changes to task_type\n            if self.id and value != self.task_type:\n                logger.info(f"Task {self.id}: Updating \'task_type\' from {self.task_type} to {value}")\n\n        # Check hierarchy rules without triggering further validation\n        if key in [\'parent_id\', \'task_type\']:\n            self._validate_hierarchy_change(key, value)\n\n        logger.info(f"Validation passed for {key}: {value}")\n        return value\n\n    def _validate_hierarchy_change(self, key, value):\n        """\n        Validates hierarchy rules for the task based on `task_type` and `parent_id`.\n        """\n        if key == \'parent_id\' and value:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=value).first()\n            if not parent_task:\n                raise ValueError("Parent task does not exist.")\n\n            logger.debug(f"Validating hierarchy: Task {self.id}, Parent Type: {parent_task.task_type}")\n            if self.task_type == "User Story" and parent_task.task_type != "Epic":\n                raise ValueError("User Stories must have an Epic as a parent.")\n            if self.task_type == "Subtask" and parent_task.task_type != "User Story":\n                raise ValueError("Subtasks must have a User Story as a parent.")\n\n        elif key == \'task_type\' and self.parent_id:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=self.parent_id).first()\n            if parent_task:\n                logger.debug(f"Validating hierarchy: Task Type: {value}, Parent Type: {parent_task.task_type}")\n                if value == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError("User Stories must have an Epic as a parent.")\n                if value == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError("Subtasks must have a User Story as a parent.")\n\n        logger.info(f"Hierarchy validation passed for Task {self.id if self.id else \'New Task\'}.")\n\n    @staticmethod\n    def check_circular_reference(task_id, parent_id):\n        """\n        Iteratively checks for circular references in the task hierarchy.\n        Prevents stack overflow on deep hierarchies.\n        """\n        visited = set()\n        current_parent_id = parent_id\n\n        logger.info(f"Checking circular reference for Task {task_id} with Parent ID: {parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error("Circular reference detected!")\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            if current_parent_id == task_id:\n                logger.error("A task cannot be its own ancestor.")\n                raise ValueError("A task cannot be its own ancestor.")\n\n            # Fetch the next parent_id in the hierarchy\n            task = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not task:\n                break\n            current_parent_id = task.parent_id\n\n        logger.info("Circular reference check passed.")\n```\nKey Enhancements:\n\t1.\tlog_and_validate_parent_id_change:\n\t‚Ä¢\tLogs the old and new parent_id whenever it changes.\n\t‚Ä¢\tEnsures no circular references are introduced.\n\t2.\t_validate_no_circular_references:\n\t‚Ä¢\tValidates the parent_id field to prevent circular dependencies.\n\t‚Ä¢\tLogs progress and raises detailed errors if violations occur.\n\t3.\tlog_and_validate_task_type_change:\n\t‚Ä¢\tLogs changes to task_type with the old and new values.\n\t‚Ä¢\tRevalidates hierarchy rules when task_type changes.\n\t4.\tDetailed Logging for Circular Reference Validation:\n\t‚Ä¢\t_validate_no_circular_references and check_circular_reference methods log every step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t‚Ä¢\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:44:08.340041', 'updated_at': '2025-01-16T19:22:36.219710'}, {'id': 132, 'name': 'Step 1: Update tasks_table_interactions.js', 'description': '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the map for efficient parent-child relationship lookups instead of DOM traversal.\n\n```\nexport const TaskManager = {\n    init: function (csrfToken) {\n        this.csrfToken = csrfToken;\n        this.initTaskParentMap(); // Initialize the map\n        this.initDragAndDrop(); // Initialize drag-and-drop functionality\n    },\n\n    // Initialize a global map for task relationships\n    taskParentMap: new Map(),\n\n    // Build the taskParentMap from the DOM\n    initTaskParentMap: function () {\n        console.log("Initializing Task Parent Map...");\n        const rows = document.querySelectorAll("tr[data-task-id]");\n\n        rows.forEach((row) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = parseInt(row.dataset.parentId, 10) || null;\n            this.taskParentMap.set(taskId, parentId);\n        });\n\n        console.log("Task Parent Map initialized:", Array.from(this.taskParentMap.entries()));\n    },\n\n    // Update the map dynamically after drag-and-drop\n    updateTaskParentMap: function (taskId, parentId) {\n        console.log(`Updating Task Parent Map: Task ${taskId} -> Parent ${parentId}`);\n        this.taskParentMap.set(taskId, parentId);\n    },\n\n    initDragAndDrop: function () {\n        if (window.isDragAndDropInitialized) {\n            console.log("Drag-and-drop is already initialized.");\n            return;\n        }\n\n        console.log("Initializing drag-and-drop within TaskManager...");\n\n        const tableBody = document.querySelector("tbody");\n        if (!tableBody) {\n            console.warn("Task table body not found for drag-and-drop initialization");\n            return;\n        }\n\n        // Initialize Sortable.js for drag-and-drop functionality\n        Sortable.create(tableBody, {\n            handle: ".task-row", // Only draggable via `.task-row` elements\n            animation: 150, // Smooth animation\n            filter: ".task-open-link", // Prevent dragging on task links\n            preventOnFilter: true, // Prevent drag if filtered element is clicked\n            onEnd: async (event) => {\n                try {\n                    console.log("Drag-and-drop operation started...");\n                    const rows = Array.from(event.from.querySelectorAll(".task-row"));\n                    const reorderedTasks = [];\n\n                    rows.forEach((row, index) => {\n                        const taskId = parseInt(row.dataset.taskId, 10);\n                        let parentId = null;\n\n                        // Get the parent ID from the map or fallback to the dataset\n                        if (row.classList.contains("subtask-row")) {\n                            const parentRow = row.previousElementSibling;\n                            parentId = parentRow\n                                ? parseInt(parentRow.dataset.taskId, 10)\n                                : this.taskParentMap.get(taskId) || null;\n                        }\n\n                        // Update the taskParentMap dynamically\n                        this.updateTaskParentMap(taskId, parentId);\n\n                        reorderedTasks.push({\n                            id: taskId,\n                            sort_order: index + 1,\n                            parent_id: parentId,\n                        });\n                    });\n\n                    console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n                    console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n                    // Send the payload to the backend\n                    const response = await fetch("/tasks/reorder_subtasks", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                            "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n                        },\n                        body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n                    });\n\n                    if (!response.ok) {\n                        const errorData = await response.json();\n                        console.error("Error reordering tasks:", errorData);\n                        alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n                        return;\n                    }\n\n                    const data = await response.json();\n                    console.log("Task reordering successful:", data);\n\n                } catch (error) {\n                    console.error("Error during drag-and-drop operation:", error);\n                    alert("An unexpected error occurred while reordering tasks.");\n                }\n            },\n        });\n\n        window.isDragAndDropInitialized = true;\n        console.log("Drag-and-drop initialized successfully.");\n    },\n};\n```\n\nKey Updates:\n\t1.\tPrecomputed Map (taskParentMap):\n\t‚Ä¢\tThe initTaskParentMap function initializes the map by iterating over DOM elements and mapping each task‚Äôs ID to its parent ID.\n\t‚Ä¢\tThe updateTaskParentMap dynamically updates the map when tasks are reordered.\n\t2.\tEfficient Parent Lookup:\n\t‚Ä¢\tThe parentId is derived from the precomputed map rather than DOM traversal.\n\t3.\tBackend Payload:\n\t‚Ä¢\tA structured payload (reorderedTasks) is sent to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t‚Ä¢\tCSRF protection is ensured by passing the token to the request headers.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:44:08.338301', 'updated_at': '2025-02-06T21:59:17.417466'}, {'id': 134, 'name': 'Step 2: Update the Backend in routes.py', 'description': 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\nPlan for step 2:\n\t1.\tVerify the payload structure:\n\t‚Ä¢\tEnsure that the payload includes all necessary fields (id, sort_order, parent_id) for each task.\n\t‚Ä¢\tValidate that the parent-child relationships in the precomputed map (taskParentMap) are reflected correctly in the payload.\n\t2.\tSubmit the payload to the backend:\n\t‚Ä¢\tEnhance the fetch request in the onEnd function of initDragAndDrop to log detailed submission data.\n\t‚Ä¢\tConfirm the payload integrity in the browser console before submission.\n\t3.\tUpdate backend logging:\n\t‚Ä¢\tAdd logging to /reorder_subtasks in routes.py to confirm receipt of the correct payload and process parent-child updates.\n\t‚Ä¢\tLog before and after database updates for better debugging.\n\n-----\nUpdated tasks_table_interactions.js\n\nReplace this section:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    let parentId = null;\n```\nWith:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    const parentId = this.taskParentMap.get(taskId) || null;\n```\nThe this.taskParentMap provides a precomputed and dynamic mapping of taskId to parentId. By using this map, we avoid relying on DOM traversal logic (row.closest or row.previousElementSibling) during drag-and-drop operations, which can sometimes be unreliable or cumbersome.\n\nFull Revised onEnd section:\n```\nonEnd: async (event) => {\n    try {\n        console.log("Drag-and-drop operation started...");\n        const rows = Array.from(event.from.querySelectorAll(".task-row"));\n        const reorderedTasks = [];\n\n        rows.forEach((row, index) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = this.taskParentMap.get(taskId) || null;\n\n            // Update the taskParentMap dynamically\n            this.updateTaskParentMap(taskId, parentId);\n\n            reorderedTasks.push({\n                id: taskId,\n                sort_order: index + 1,\n                parent_id: parentId,\n            });\n        });\n\n        console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n        console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n        // Send the payload to the backend\n        const response = await fetch("/tasks/reorder_subtasks", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n            },\n            body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error("Error reordering tasks:", errorData);\n            alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n            return;\n        }\n\n        const data = await response.json();\n        console.log("Task reordering successful:", data);\n\n    } catch (error) {\n        console.error("Error during drag-and-drop operation:", error);\n        alert("An unexpected error occurred while reordering tasks.");\n    }\n}\n```\n---------------------------------\nEnsure updates include:\n\t‚Ä¢\tBetter Logging: Adding logs for key events such as database changes and validation results.\n\t‚Ä¢\tInput Validation: Ensure all required fields (id, sort_order, parent_id) exist in the payload.\n\t‚Ä¢\tPost-Commit Validation: Confirm database updates after the commit.\n\t‚Ä¢\tImproved Error Handling: Include specific error messages and consistent rollback mechanisms.\n\nBelow is the revised reorder_subtasks route with descriptive comments for each section:\n```\n@bp.route("/reorder_subtasks", methods=["POST"])\ndef reorder_subtasks():\n    """\n    Reorder subtasks globally or reassign them to a different parent.\n\n    Steps:\n    - Parse and validate input from the frontend.\n    - Update parent-child relationships and sort order in the database.\n    - Commit changes and return a success response.\n    - Handle errors gracefully and provide detailed logs for debugging.\n    """\n    logger.info("Entering reorder_subtasks route...")\n    logger.info(f"Received payload for reordering tasks: {request.json}")\n\n    try:\n        # Step 1: Parse input\n        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered\n        ordered_tasks = request.json.get("ordered_tasks", [])\n\n        logger.debug(f"Parsed parent_id: {parent_id}")\n        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")\n\n        # Step 2: Validate input\n        if not isinstance(ordered_tasks, list) or not all(\n            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task\n            for task in ordered_tasks\n        ):\n            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")\n            return jsonify({\n                "error": "Invalid input format for \'ordered_tasks\'. Each task must include \'id\', \'sort_order\', and \'parent_id\'."\n            }), 400\n\n        # Step 3: Validate parent task (if applicable)\n        if parent_id is not None:\n            parent_task = Task.query.get(parent_id)\n            if not parent_task:\n                logger.error(f"Parent task with ID {parent_id} not found.")\n                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400\n\n        logger.info("Input validation passed. Proceeding with task updates...")\n\n        # Step 4: Process updates for each subtask\n        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation\n\n        for task_data in ordered_tasks:\n            subtask_id = task_data["id"]\n            sort_order = task_data["sort_order"]\n            new_parent_id = task_data["parent_id"]\n\n            # Fetch the subtask from the database\n            subtask = Task.query.get(subtask_id)\n            if not subtask:\n                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")\n                continue\n\n            # Log and update parent_id if it changes\n            if new_parent_id is not None and new_parent_id != subtask.parent_id:\n                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")\n                subtask.parent_id = new_parent_id\n\n            # Update sort order\n            subtask.sort_order = sort_order\n            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")\n\n            # Add to the list of updated subtasks for validation\n            updated_subtasks.append(subtask)\n\n        # Step 5: Commit changes to the database\n        try:\n            db.session.commit()\n            logger.info(f"Subtasks reordered successfully: {[task[\'id\'] for task in ordered_tasks]}")\n        except Exception as e:\n            logger.error(f"Error committing changes to the database: {str(e)}")\n            db.session.rollback()\n            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500\n\n        # Step 6: Post-commit validation\n        for subtask in updated_subtasks:\n            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")\n            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")\n\n        # Step 7: Return success response\n        return jsonify({\n            "success": True,\n            "message": "Subtasks reordered successfully.",\n            "updated_subtasks": [subtask.id for subtask in updated_subtasks]\n        }), 200\n\n    except Exception as e:\n        # Step 8: Handle unexpected errors\n        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)\n        db.session.rollback()\n        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500\n```\nKey Changes and Descriptive Comments\n\t1.\tInput Parsing:\n\t‚Ä¢\tExtracts parent_id and ordered_tasks from the request payload.\n\t‚Ä¢\tLogs the parsed values for debugging.\n\t2.\tInput Validation:\n\t‚Ä¢\tEnsures ordered_tasks is a list of dictionaries with the required keys.\n\t‚Ä¢\tValidates parent_id if provided, ensuring the parent task exists in the database.\n\t3.\tUpdate Processing:\n\t‚Ä¢\tIterates through ordered_tasks, updating each task‚Äôs parent_id and sort_order.\n\t‚Ä¢\tLogs changes for each task.\n\t4.\tDatabase Commit:\n\t‚Ä¢\tCommits all updates in a single transaction.\n\t‚Ä¢\tLogs success or rolls back changes in case of an error.\n\t5.\tPost-Commit Validation:\n\t‚Ä¢\tVerifies that the parent_id and sort_order changes were successfully saved to the database.\n\t6.\tError Handling:\n\t‚Ä¢\tCaptures and logs exceptions during processing or committing.\n\t‚Ä¢\tProvides meaningful error messages to the frontend.\n\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:46:29.348853', 'updated_at': '2025-02-06T21:59:21.617065'}, {'id': 131, 'name': 'Step 5: Update utils.py', 'description': 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nChanges to Make:\n\t1.\tEnhance Task Filtering:\n\t‚Ä¢\tEnsure the filters handle parent-child relationships explicitly.\n\t‚Ä¢\tAdd options to include or exclude subtasks in queries.\n\t2.\tUtility Function for Debugging Parent-Child Relationships:\n\t‚Ä¢\tProvide a function to generate a map or list of parent-child relationships for debugging purposes.\n\t3.\tValidation Functions:\n\t‚Ä¢\tAdd a utility function to validate parent-child relationships and ensure no circular dependencies.\n\nUpdated utils.py Code:\n```\nimport logging\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import joinedload\nfrom app.extensions.db import db\nfrom app.tasks.models import Task\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\n\nclass TaskService:\n    @staticmethod\n    def filter_tasks(filters=None, include_subtasks=True, page=None, per_page=None):\n        """\n        Dynamically filters tasks with an option to include or exclude subtasks.\n\n        Args:\n            filters (dict): Filtering criteria.\n            include_subtasks (bool): Whether to include subtasks in the query.\n            page (int, optional): Page number for pagination.\n            per_page (int, optional): Items per page for pagination.\n\n        Returns:\n            Query or Pagination: A SQLAlchemy query object or paginated results.\n        """\n        query = Task.query.options(\n            db.joinedload(Task.project).joinedload(Project.contributors),\n            db.joinedload(Task.contributor),\n            db.joinedload(Task.children),\n        ).order_by(Task.sort_order)\n\n        if filters:\n            logger.debug(f"Applying filters: {filters}")\n\n            # Apply standard filters\n            if "is_archived" in filters:\n                query = query.filter(Task.is_archived == filters["is_archived"])\n            if "project_id" in filters:\n                query = query.filter(Task.project_id == filters["project_id"])\n            if "task_type" in filters:\n                if isinstance(filters["task_type"], list):\n                    query = query.filter(Task.task_type.in_(filters["task_type"]))\n                else:\n                    query = query.filter(Task.task_type == filters["task_type"])\n            if "completion_status" in filters:\n                completion_map = {"completed": True, "in_progress": False}\n                if filters["completion_status"] in completion_map:\n                    query = query.filter(Task.completed == completion_map[filters["completion_status"]])\n\n            # Optionally exclude subtasks\n            if not include_subtasks:\n                query = query.filter(Task.task_type != "Subtask")\n\n        logger.debug(f"Generated query: {query}")\n\n        # Pagination\n        if page and per_page:\n            return query.paginate(page=page, per_page=per_page, error_out=False)\n        return query\n\n    @staticmethod\n    def debug_parent_child_relationships(project_id=None):\n        """\n        Generates a debug map of parent-child relationships for all tasks.\n\n        Args:\n            project_id (int, optional): Restrict to tasks from a specific project.\n\n        Returns:\n            dict: A dictionary mapping parent IDs to their child task IDs.\n        """\n        query = Task.query\n        if project_id:\n            query = query.filter(Task.project_id == project_id)\n\n        tasks = query.options(\n            db.load_only(Task.id, Task.parent_id)\n        ).all()\n\n        relationship_map = {}\n        for task in tasks:\n            if task.parent_id not in relationship_map:\n                relationship_map[task.parent_id] = []\n            relationship_map[task.parent_id].append(task.id)\n\n        logger.debug(f"Parent-Child Relationship Map: {relationship_map}")\n        return relationship_map\n\n    @staticmethod\n    def validate_parent_child_relationships():\n        """\n        Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.\n\n        Raises:\n            ValueError: If invalid relationships are detected.\n        """\n        tasks = Task.query.options(db.joinedload(Task.parent)).all()\n\n        for task in tasks:\n            if task.parent_id:\n                parent_task = task.parent\n                if not parent_task:\n                    raise ValueError(f"Task {task.id} has an invalid parent ID {task.parent_id}.")\n\n                # Validate hierarchy rules\n                if task.task_type == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError(f"User Story {task.id} must have an Epic as its parent.")\n                if task.task_type == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError(f"Subtask {task.id} must have a User Story as its parent.")\n\n        logger.info("All parent-child relationships are valid.")\n\n    @staticmethod\n    def get_all_task_ids_with_parents():\n        """\n        Returns a flat list of tasks with their parent IDs for debugging.\n\n        Returns:\n            list: A list of tuples (task_id, parent_id).\n        """\n        tasks = Task.query.with_entities(Task.id, Task.parent_id).all()\n        logger.debug(f"Task IDs with Parent IDs: {tasks}")\n        return tasks\n```\n\n\nExplanation of Changes:\n\t1.\tfilter_tasks Enhancements:\n\t‚Ä¢\tAdded include_subtasks parameter to optionally exclude subtasks from the query.\n\t2.\tdebug_parent_child_relationships:\n\t‚Ä¢\tCreates a parent-child relationship map for debugging purposes.\n\t3.\tvalidate_parent_child_relationships:\n\t‚Ä¢\tIterates through all tasks to validate parent-child hierarchy and ensures no invalid relationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t‚Ä¢\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.091824', 'updated_at': '2025-01-16T19:22:36.236691'}, {'id': 135, 'name': 'Step 3: Update list.html', 'description': 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already includes everything needed. No required changes.\n\nHere¬¥s the relevant section of list.html:\n\n```\n<tr id="task-{{ task.id }}"\n                class="task-row {% if task.task_type == \'Subtask\' %}subtask-row{% elif task.task_type == \'User Story\' %}user-story-row{% elif task.task_type == \'Epic\' %}epic-row{% endif %}"\n                style="background-color: \n                {% if task.task_type == \'Subtask\' %}\n                    rgba(200, 230, 255, 0.5); /* Light blue for Subtask */\n                {% elif task.task_type == \'User Story\' %}\n                    rgba(255, 255, 200, 0.5); /* Light yellow for User Story */\n                {% elif task.task_type == \'Epic\' %}\n                    rgba(255, 200, 200, 0.5); /* Light red for Epic */\n                {% else %}\n                    rgba(240, 240, 240, 1); /* Default light gray */\n                {% endif %};"\n                data-task-id="{{ task.id }}"\n                data-parent-id="{{ task.parent_id or \'\' }}"\n                data-level="{{ depth }}">\n                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>\n                <td>\n                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}\n                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}" aria-label="Toggle details for task {{ task.name }}">\n                        <i class="bi bi-chevron-right"></i>\n                    </button>\n                    {% endif %}\n                </td>\n                <td class="fw-medium fs-6 \n                {% if task.task_type == \'Epic\' %}\n                    epic-cell\n                {% elif task.task_type == \'User Story\' %}\n                    user-story-cell\n                {% elif task.task_type == \'Subtask\' %}\n                    subtask-cell\n                {% endif %}" \n                style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">\n                <span class="bi fs-6\n                {% if task.task_type == \'Epic\' %}\n                    bi-circle-fill\n                {% elif task.task_type == \'User Story\' %}\n                    bi-circle-half\n                {% elif task.task_type == \'Subtask\' %}\n                    bi-circle\n                {% endif %}">\n                </span>\n                {{ task.name }}\n                <small class="text-muted fw-light">\n                    (Parent-ID: {{ task.parent_id or \'None\' }})\n                </small>\n                <!-- Open Link -->\n                <a href="#" class="task-open-link" data-task-id="{{ task.id }}">\n                    <i class="bi bi-arrows-angle-expand" style="font-size: 0.8rem; color: white;"></i>\n                    Open\n                </a>\n            </td>\n                <td class="fw-light fs-6">\n                    <small class>\n                    LAC-{{ task.id }}\n                    </small>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light text-bg-secondary">\n                        {{ task.project if task.project else "Unknown Project" }}\n                    </span>\n                </td>\n                <td class="fs-6" data-contributor-column>{{ task.assigned_to if task.assigned_to else "Unassigned" }}</td>\n                <td class="fs-6">{{ task.story_points }}</td>\n                <td class="fs-6">\n                    <span class="badge rounded-pill fw-light text-bg-light">\n                        {{ task.task_type }}\n                    </span>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light {% if task.completed %}text-bg-success{% else %}text-bg-warning{% endif %}">\n                        {{ "Completed" if task.completed else "In Progress" }}\n                    </span>\n                </td>\n                <td>\n                    <!-- Delete Icon -->\n                    <button class="btn btn-dark btn-sm delete-task-btn" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .2rem; --bs-btn-font-size: .75rem;" data-task-id="{{ task.id }}" aria-label="Deletes task {{ task.id }}">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n            </tr>\n            {% for child in tasks if child.parent_id == task.id %}\n                {{ render_task(child, tasks, depth + 1) }}\n            {% endfor %}\n            {% endmacro %}\n            \n            <!-- Render top-level tasks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:46:29.349784', 'updated_at': '2025-01-16T19:22:36.238473'}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'description': 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitHub Login involves integrating OAuth 2.0, which both services support. The complexity depends on your app‚Äôs existing setup, frameworks, and experience with third-party authentication. Below is a breakdown:\n\nKey Steps for Implementing Google or GitHub Login\n\t1.\tSet Up OAuth Credentials:\n\t‚Ä¢\tRegister your application in the Google Cloud Console or GitHub Developer Settings.\n\t‚Ä¢\tObtain the client ID and client secret.\n\t2.\tInstall Required Libraries:\n\t‚Ä¢\tUse a library for OAuth (e.g., flask-oauthlib, python-social-auth, or authlib).\n\t‚Ä¢\tPopular frameworks like Flask and Django already have robust integrations for OAuth providers.\n\t3.\tBackend Configuration:\n\t‚Ä¢\tImplement an endpoint to handle the OAuth flow (/auth/login/google or /auth/login/github).\n\t‚Ä¢\tConfigure your app to send users to Google or GitHub‚Äôs authentication page.\n\t‚Ä¢\tHandle the OAuth callback to exchange the authorization code for an access token.\n\t‚Ä¢\tVerify the token and fetch user information (e.g., email, name).\n\t4.\tLink OAuth to User Registration:\n\t‚Ä¢\tOn successful login, create or retrieve a user in your database.\n\t‚Ä¢\tStore the user‚Äôs details like email, OAuth provider ID, and access token.\n\t5.\tFrontend Integration (if applicable):\n\t‚Ä¢\tAdd ‚ÄúLogin with Google‚Äù or ‚ÄúLogin with GitHub‚Äù buttons.\n\t‚Ä¢\tRedirect to your backend‚Äôs OAuth endpoint when clicked.', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T12:15:54.291625', 'updated_at': '2025-01-16T19:22:36.239866'}, {'id': 62, 'name': 'Add OAuth integration for Google Login', 'description': 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.241200'}, {'id': 64, 'name': 'Setup project credentials for Google API', 'description': 'Generate client ID and secret from Google API Console for your application.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-01-16T19:22:36.242497'}, {'id': 67, 'name': 'Test Google OAuth flow', 'description': 'Verify the OAuth flow using test accounts and check the token exchange.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.243780'}, {'id': 65, 'name': 'Implement backend endpoints for Google OAuth', 'description': 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-01-16T19:22:36.244932'}, {'id': 63, 'name': 'Add OAuth integration for GitHub Login', 'description': 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.246358'}, {'id': 68, 'name': 'Register application in GitHub Developer Console', 'description': 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.247746'}, {'id': 69, 'name': 'Handle callback from GitHub', 'description': 'Implement the callback endpoint to process the authorization code from GitHub.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.248912'}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'description': 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 18, 'status': 'Not Started', 'created_at': '2025-01-07T19:53:50.085064', 'updated_at': '2025-01-16T19:22:36.250169'}, {'id': 100, 'name': '1.1 User Registration', 'description': 'As a user, I want to register with a username, email, and password so that I can create an account and access the system.\n\n**Acceptance Criteria:**\n\n‚Ä¢\tUser can input valid username, email, and password.\n‚Ä¢\tUsername and email must be unique.\n‚Ä¢\tErrors are displayed for invalid inputs or duplicate accounts.\n‚Ä¢\tPasswords must meet complexity requirements and be securely stored.\n‚Ä¢\tSuccessful registration redirects users to a login page.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:59:09.044667', 'updated_at': '2025-01-16T19:22:36.251812'}, {'id': 107, 'name': '1.1.1 Database Changes for User Registration', 'description': '1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.\n   CREATE TABLE public.users (\n       id SERIAL PRIMARY KEY,\n       username VARCHAR(50) UNIQUE NOT NULL,\n       email VARCHAR(100) UNIQUE NOT NULL,\n       password_hash VARCHAR(255) NOT NULL,\n       created_at TIMESTAMP DEFAULT NOW(),\n       updated_at TIMESTAMP DEFAULT NOW()\n);\n\n\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-11T11:36:20.238219'}, {'id': 108, 'name': '1.1.2 Backend API for Registration', 'description': '‚Ä¢\tCreate an endpoint POST /api/register:\n‚Ä¢\tValidate input fields.\n‚Ä¢\tHash the password using bcrypt or argon2.\n‚Ä¢\tInsert the user into the users table.\n‚Ä¢\tReturn success/failure responses.\ndddhfff\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:33.067643'}, {'id': 112, 'name': '1.2.2 Frontend Login Page', 'description': 'Develop a frontend form for user login with email and password inputs.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.683644'}, {'id': 109, 'name': '1.1.3 Create Frontend Registration Page', 'description': 'Develop a frontend form to collect user registration details.\n‚Ä¢\tAdd a form for username, email, and password inputs.\n‚Ä¢\tUse client-side validation (e.g., email format).\n‚Ä¢\tSend a POST request to /api/register.\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.684988'}, {'id': 110, 'name': '1.1.4 Unit Tests for Registration', 'description': 'Write unit tests for:\n\n‚Ä¢\tValid registration.\n‚Ä¢\tDuplicate username/email scenarios.\n‚Ä¢\tInvalid input handling.\nff', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.686902'}, {'id': 101, 'name': '1.2 User Login', 'description': 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n‚Ä¢\tUsers can log in with a valid email and password.\n‚Ä¢\tErrors are displayed for invalid credentials.\n‚Ä¢\tSuccessful login stores a session or JWT token.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:25:53.687936'}, {'id': 111, 'name': '1.2.1 Backend API for Login', 'description': 'Create POST /api/login endpoint to handle user login.\njjsjj', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.689096'}, {'id': 113, 'name': '1.2.3 Session Management', 'description': 'Implement secure session handling using cookies or JWT.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:20.968680'}, {'id': 114, 'name': '1.2.4 Unit Tests for Login', 'description': 'Write tests for successful and failed login attempts.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:22:36.265866'}, {'id': 106, 'name': 'Password Reset', 'description': 'As a user, I want to reset my password securely using email.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.267247'}, {'id': 128, 'name': 'Frontend Password Reset Page', 'description': 'Develop a page for users to enter a new password using a valid token.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.269158'}, {'id': 129, 'name': 'Testing Password Reset', 'description': 'Write tests for email delivery, token validation, and password updates.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.270849'}, {'id': 102, 'name': 'Logout', 'description': 'As a user, I want to log out so that I can end my session securely.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.272605'}, {'id': 117, 'name': 'Tests for Logout', 'description': 'Verify session invalidation and redirection to the login page.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.274575'}, {'id': 116, 'name': 'Frontend Logout Button', 'description': 'Add a logout button to the UI and handle session clearing.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-09T12:31:17.939784'}, {'id': 115, 'name': 'Backend API for Logout', 'description': 'Create POST /api/logout endpoint to invalidate user sessions.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.277547'}, {'id': 61, 'name': 'Parent task assignment', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-04T22:31:45.205815', 'updated_at': '2025-01-16T19:22:36.279012'}, {'id': 45, 'name': 'Display Default Value in Dropdown', 'description': 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.280493'}, {'id': 50, 'name': 'Retrieve Current Parent Task', 'description': 'Retrieve the current parent task‚Äôs ID and name from the backend.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'In Progress', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:22.274304'}, {'id': 51, 'name': 'Set Default Value', 'description': 'Set the default value in the dropdown based on the retrieved data.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 45, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 1, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.283309'}, {'id': 46, 'name': 'Search for Parent Tasks', 'description': 'Allow users to search for tasks dynamically in the dropdown by typing.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.284882'}, {'id': 54, 'name': 'Test Partial Matching', 'description': 'Ensure the search results update in real-time as the user types.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:29.251047'}, {'id': 47, 'name': 'Handle Large Datasets Efficiently', 'description': 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:26:23.067490'}, {'id': 56, 'name': 'Paginate API Responses', 'description': 'Implement server-side filtering and pagination for large datasets.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:16.233517'}, {'id': 55, 'name': 'Enable Lazy Loading', 'description': 'Enable lazy loading or virtualization in Virtual Select.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:08.099271'}, {'id': 48, 'name': 'Select and Deselect Parent Tasks', 'description': 'Allow users to select a parent task or deselect by choosing "None."', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:25:59.651639'}, {'id': 57, 'name': 'Ensure None Option Availability', 'description': 'Add ‚ÄúNone‚Äù as a selectable option and ensure it stays at the top of the list.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:51.310240'}, {'id': 58, 'name': 'Handle Selection Events', 'description': 'Implement event listeners to update the form‚Äôs state when the selection changes.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:43.569501'}, {'id': 49, 'name': 'Integrate Dropdown with Task Form', 'description': 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:25:36.133259'}, {'id': 59, 'name': 'Bind Dropdown to Form Field', 'description': 'Bind the dropdown to the form‚Äôs parent task field.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:15.491910'}, {'id': 60, 'name': 'Test Form Submission', 'description': 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:28.367797'}, {'id': 41, 'name': 'Implement Searchable Dropdown', 'description': 'As a user, I want a searchable dropdown for parent task assignment.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Completed', 'created_at': '2025-01-03T09:14:28.285904', 'updated_at': '2025-02-11T08:25:07.992524'}, {'id': 52, 'name': 'Add Search Box to Dropdown', 'description': 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:01.469601'}, {'id': 53, 'name': 'Implement AJAX Search', 'description': 'Implement AJAX-based search to fetch tasks dynamically from the backend.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:24:54.245010'}, {'id': 42, 'name': 'Choose Dropdown Library', 'description': 'Research and decide on the dropdown library to use.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-11T08:24:47.274896'}, {'id': 43, 'name': 'Integrate Dropdown Library', 'description': 'Integrate the chosen dropdown library into the project.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Completed', 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-11T08:24:33.908549'}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t‚Ä¢\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t‚Ä¢\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t‚Ä¢\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-02-11T08:24:26.494016'}, {'id': 85, 'name': 'Assign multiple contributors to a task', 'description': 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:32:39.466022', 'updated_at': '2025-02-11T08:24:21.069473'}, {'id': 90, 'name': 'Update frontend to display and manage multiple contributors', 'description': 'Allow users to view, add, or remove multiple contributors via the UI.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-11T08:24:13.204884'}, {'id': 88, 'name': 'Update database schema for multiple contributors', 'description': 'Modify the task table to support many-to-many relationships for contributors.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-11T08:24:05.873554'}, {'id': 89, 'name': 'Develop backend API for adding contributors to a task', 'description': 'Create endpoints to add, update, and remove contributors for a task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-11T08:23:58.436495'}, {'id': 86, 'name': 'Allow designation of task owner', 'description': 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:29.330562', 'updated_at': '2025-02-11T08:23:51.269557'}, {'id': 93, 'name': 'Update frontend to manage task ownership', 'description': 'Allow users to assign or update the task owner via the UI.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-11T08:23:42.771565'}, {'id': 91, 'name': 'Update database schema for task ownership', 'description': 'Add a column or relationship to assign a single owner per task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-11T08:23:33.670381'}, {'id': 92, 'name': 'Develop backend API for assigning task owner', 'description': 'Create endpoints to assign or update the owner of a task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-11T09:19:44.027744'}, {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-02-11T08:23:23.402442'}, {'id': 96, 'name': 'Allow admin users to create and customize contributor roles via frontend', 'description': 'Provide UI functionality for admins to manage contributor roles dynamically.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T08:23:13.139282'}, {'id': 94, 'name': 'Add database support for contributor roles', 'description': 'Introduce a roles table and link contributors to specific roles for tasks.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T08:22:56.181530'}, {'id': 95, 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T08:22:02.276492'}, {'id': 127, 'name': 'Backend API for Password Reset', 'description': 'Create endpoints to handle password reset requests and token validation.\ndfdf\n\nasdasd', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-10T23:59:50.734037'}, {'id': 126, 'name': 'Email Configuration for Password Reset', 'description': 'Configure email service to send password reset links.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.334340'}, {'id': 104, 'name': 'Middleware for Role Enforcement', 'description': 'As a system, I want to enforce role-based access to specific routes.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:23:40.346816'}, {'id': 122, 'name': 'Testing Role Enforcement', 'description': 'Write tests to ensure proper access control based on roles.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-01-16T19:23:58.185693'}, {'id': 121, 'name': 'Develop Role Enforcement Middleware', 'description': 'Implement middleware to check user roles for access control.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-01-16T19:23:58.187439'}, {'id': 105, 'name': 'Profile Management', 'description': 'As a user, I want to update my profile (username, email, password).', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.339830'}, {'id': 123, 'name': 'Backend API for Profile Management', 'description': 'Create PATCH /api/profile endpoint to update user details.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-01-16T19:24:19.678781'}, {'id': 125, 'name': 'Testing Profile Updates', 'description': 'Write tests for profile update functionality.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-01-16T19:24:19.680382'}]
2025-02-13 23:47:33,957 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-13 23:47:33,958 INFO: [cached since 3.132e+04s ago] {'param_1': 2}
2025-02-13 23:47:33,960 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-13 23:47:33,960 INFO: [cached since 3.132e+04s ago] {'param_1': 3}
2025-02-13 23:47:33,961 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-13 23:47:33,961 INFO: [cached since 3.132e+04s ago] {'param_1': 4}
2025-02-13 23:47:33,963 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-13 23:47:33,963 INFO: [cached since 3.132e+04s ago] {'param_1': 5}
2025-02-13 23:47:33,965 INFO: ROLLBACK
2025-02-13 23:47:33,966 INFO: 127.0.0.1 - - [13/Feb/2025 23:47:33] "GET /tasks/ HTTP/1.1" 200 -
2025-02-13 23:47:34,061 INFO: 127.0.0.1 - - [13/Feb/2025 23:47:34] "[36mGET /static/custom.css HTTP/1.1[0m" 304 -
2025-02-13 23:47:34,113 INFO: 127.0.0.1 - - [13/Feb/2025 23:47:34] "[36mGET /static/js/modals.js HTTP/1.1[0m" 304 -
2025-02-13 23:47:34,125 INFO: 127.0.0.1 - - [13/Feb/2025 23:47:34] "[36mGET /static/js/filters.js HTTP/1.1[0m" 304 -
2025-02-13 23:47:34,135 INFO: 127.0.0.1 - - [13/Feb/2025 23:47:34] "[36mGET /static/js/tasks_table_interactions.js HTTP/1.1[0m" 304 -
2025-02-13 23:47:34,500 INFO: 127.0.0.1 - - [13/Feb/2025 23:47:34] "[36mGET /static/favicon.ico HTTP/1.1[0m" 304 -
2025-02-13 23:48:12,938 INFO: Fetching task details for Task ID 275.
2025-02-13 23:48:12,939 INFO: Fetching task with ID 275.
2025-02-13 23:48:12,943 INFO: BEGIN (implicit)
2025-02-13 23:48:12,946 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-13 23:48:12,946 INFO: [cached since 1.779e+04s ago] {'pk_1': 275}
2025-02-13 23:48:12,953 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x10e69c950>, 'completed_date': None, 'sort_order': 0, 'task_type': 'Epic', 'contributor_id': None, 'id': 275, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 2, 10, 0, 48, 52, 680022), 'status': 'Not Started', 'project_id': 7, 'updated_at': datetime.datetime(2025, 2, 10, 8, 38, 37, 622196), 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'parent_id': None, 'story_points': 0}
2025-02-13 23:48:12,956 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-13 23:48:12,956 INFO: [cached since 1.779e+04s ago] {'pk_1': 7}
2025-02-13 23:48:12,960 INFO: Task ID 275 fetched with parent ID: None
2025-02-13 23:48:12,961 INFO: Task with ID 275 fetched successfully.
2025-02-13 23:48:12,961 DEBUG: Fetched Task Data: {'id': 275, 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-10T08:38:37.622196', 'contributor_name': 'Unassigned', 'parent': None}
2025-02-13 23:48:12,961 INFO: Task details fetched successfully for Task ID 275.
2025-02-13 23:48:12,963 INFO: ROLLBACK
2025-02-13 23:48:12,963 INFO: 127.0.0.1 - - [13/Feb/2025 23:48:12] "GET /api/tasks/275 HTTP/1.1" 200 -
2025-02-13 23:49:46,352 INFO: Fetching task details for Task ID 275.
2025-02-13 23:49:46,353 INFO: Fetching task with ID 275.
2025-02-13 23:49:46,356 INFO: BEGIN (implicit)
2025-02-13 23:49:46,357 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-13 23:49:46,358 INFO: [cached since 1.788e+04s ago] {'pk_1': 275}
2025-02-13 23:49:46,364 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x10e69cc50>, 'completed_date': None, 'sort_order': 0, 'task_type': 'Epic', 'contributor_id': None, 'id': 275, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 2, 10, 0, 48, 52, 680022), 'status': 'Not Started', 'project_id': 7, 'updated_at': datetime.datetime(2025, 2, 10, 8, 38, 37, 622196), 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'parent_id': None, 'story_points': 0}
2025-02-13 23:49:46,367 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-13 23:49:46,368 INFO: [cached since 1.788e+04s ago] {'pk_1': 7}
2025-02-13 23:49:46,369 INFO: Task ID 275 fetched with parent ID: None
2025-02-13 23:49:46,370 INFO: Task with ID 275 fetched successfully.
2025-02-13 23:49:46,370 DEBUG: Fetched Task Data: {'id': 275, 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-10T08:38:37.622196', 'contributor_name': 'Unassigned', 'parent': None}
2025-02-13 23:49:46,370 INFO: Task details fetched successfully for Task ID 275.
2025-02-13 23:49:46,371 INFO: ROLLBACK
2025-02-13 23:49:46,372 INFO: 127.0.0.1 - - [13/Feb/2025 23:49:46] "GET /api/tasks/275 HTTP/1.1" 200 -
2025-02-14 00:15:31,945 INFO: 127.0.0.1 - - [14/Feb/2025 00:15:31] "[36mGET /static/custom.css HTTP/1.1[0m" 304 -
2025-02-14 00:15:48,599 INFO: Fetching task details for Task ID 275.
2025-02-14 00:15:48,600 INFO: Fetching task with ID 275.
2025-02-14 00:15:48,604 INFO: BEGIN (implicit)
2025-02-14 00:15:48,607 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-14 00:15:48,607 INFO: [cached since 1.944e+04s ago] {'pk_1': 275}
2025-02-14 00:15:48,633 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x10e69c6b0>, 'completed_date': None, 'sort_order': 0, 'task_type': 'Epic', 'contributor_id': None, 'id': 275, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 2, 10, 0, 48, 52, 680022), 'status': 'Not Started', 'project_id': 7, 'updated_at': datetime.datetime(2025, 2, 10, 8, 38, 37, 622196), 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'parent_id': None, 'story_points': 0}
2025-02-14 00:15:48,634 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-14 00:15:48,634 INFO: [cached since 1.944e+04s ago] {'pk_1': 7}
2025-02-14 00:15:48,636 INFO: Task ID 275 fetched with parent ID: None
2025-02-14 00:15:48,636 INFO: Task with ID 275 fetched successfully.
2025-02-14 00:15:48,636 DEBUG: Fetched Task Data: {'id': 275, 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-10T08:38:37.622196', 'contributor_name': 'Unassigned', 'parent': None}
2025-02-14 00:15:48,636 INFO: Task details fetched successfully for Task ID 275.
2025-02-14 00:15:48,637 INFO: ROLLBACK
2025-02-14 00:15:48,639 INFO: 127.0.0.1 - - [14/Feb/2025 00:15:48] "GET /api/tasks/275 HTTP/1.1" 200 -
2025-02-14 00:16:17,404 INFO: Entering list_tasks route...
2025-02-14 00:16:17,405 DEBUG: Filters used: {'is_archived': False}
2025-02-14 00:16:17,407 DEBUG: Applying filters: {'is_archived': False}
2025-02-14 00:16:17,418 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-14 00:16:17,419 INFO: BEGIN (implicit)
2025-02-14 00:16:17,419 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-14 00:16:17,420 INFO: [cached since 3.308e+04s ago] {'param_1': 110, 'param_2': 0}
2025-02-14 00:16:17,437 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-14 00:16:17,437 INFO: [cached since 3.308e+04s ago] {}
2025-02-14 00:16:17,441 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-14 00:16:17,441 INFO: [cached since 3.308e+04s ago] {}
2025-02-14 00:16:17,442 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-14 00:16:17,442 INFO: [cached since 3.308e+04s ago] {}
2025-02-14 00:16:17,446 DEBUG: Tasks passed to template: [{'id': 290, 'name': 'issue: error when changing task type and', 'description': 'issue: error when changing task type and parent task before saving', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:00:03.417734', 'updated_at': '2025-02-10T09:15:09.284969'}, {'id': 298, 'name': 'example user story with parent epic 297', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 297, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:41:01.907455', 'updated_at': '2025-02-10T14:59:04.142570'}, {'id': 275, 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-10T08:38:37.622196'}, {'id': 276, 'name': 'add support for priority', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-10T08:28:47.447612'}, {'id': 264, 'name': 'close all / open all childtasks', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-02-10T08:47:14.915970'}, {'id': 285, 'name': 'add text truncation to project names in task list', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-10T09:45:47.029729'}, {'id': 257, 'name': 'Update Task API Integration', 'description': "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-02-05T22:55:49.566819', 'updated_at': '2025-02-05T22:18:17.807154'}, {'id': 294, 'name': 'issue: task table filters not working', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:19:21.022598', 'updated_at': '2025-02-12T10:59:15.483390'}, {'id': 267, 'name': 'improvements to toggles and nested tasks', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:29:12.464594', 'updated_at': '2025-02-10T08:47:24.581680'}, {'id': 283, 'name': 'fix update title', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:58.769700', 'updated_at': '2025-02-10T08:46:47.282087'}, {'id': 271, 'name': 'make sure dynamically added rows has the exact same styling and includes every element', 'description': 'Missing elements:\n- Open link\n- Default project\n- Project name should be inside a pill\n- Task type should be in a pill\n- Estimations should be 0, not N/A\n- Make sure font size is matching\n- status should have the dropdown inside a pill\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:21:07.108431', 'updated_at': '2025-02-10T08:38:47.340105'}, {'id': 273, 'name': 'disable parent task selector in epics', 'description': 'and add text, Epic can¬¥t have parent tasks', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:45:20.740910', 'updated_at': '2025-02-10T08:39:17.639890'}, {'id': 269, 'name': 'fix styling for sweetalert', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-02-08T15:54:56.717846', 'updated_at': '2025-02-10T08:39:32.172437'}, {'id': 286, 'name': 'add support for labels/tags', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:46:23.985620', 'updated_at': '2025-02-10T09:46:23.987564'}, {'id': 299, 'name': 'example sub task with parent user story 298', 'description': 'Test update 1\nTest update 2\nTest update 3', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 298, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:42:38.905700', 'updated_at': '2025-02-10T23:23:08.671464'}, {'id': 266, 'name': 'highlight the nested tasks', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-02-10T08:47:04.382929'}, {'id': 279, 'name': 'github integration', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:38.238202', 'updated_at': '2025-02-10T08:39:24.168451'}, {'id': 289, 'name': 'issue: parent task is lost when updating task', 'description': '- Summary of the problem and solution\n    \n    **Problem: Parent Task Dropdown Was Not Being Set on Modal Open**\n    \n    The issue was that when opening a task modal, the **parent task dropdown** was not pre-populated with the correct parent task. However, interacting with the dropdown (e.g., clicking on it) would suddenly trigger it to be set correctly. This meant that the dropdown initialization was likely delayed or missing a step in the modal lifecycle.\n    \n    **Debugging Steps and Observations**\n    \n    1. **Task Details Were Fetched Correctly** ‚úÖ\n    - The task details, including parent_id, were being fetched from the API successfully.\n    1. **Parent Dropdown Initialization Issues** ‚ùå\n    - The initializeParentDropdown() function was being called, but the dropdown was sometimes **not fully ready** when we tried to set the selected parent task.\n    1. **Clicking the Dropdown Triggered the Parent to Be Set** ü§î\n    - This hinted that the dropdown was not fully ready when setParentDropdown(task.parent_id) was initially called.\n    \n    **Final Solution**\n    \n    1. **Ensuring Dropdown Readiness Before Setting the Parent Task**\n    - We added explicit **delays and checks** to confirm that the dropdown was fully initialized before attempting to set the parent task.\n    \n    Specifically, we:\n    \n    - **Waited for the dropdown to appear in the DOM** using observeParentDropdown().\n    - **Initialized the dropdown** with initializeParentDropdown().\n    - **Waited explicitly for the dropdown to be fully ready** using waitForParentDropdownReady().\n    - **Added a final delay of 200ms** before calling setParentDropdown() to ensure stability.\n    1. **Modifying openTaskModal to Handle Parent Dropdown Setup**\n    - We ensured that initializeParentDropdown() was called **after fetching task details** and before setting the parent task.\n    1. **Confirming the Fix** üéØ\n    - After these fixes, the parent dropdown was **immediately populated** upon opening the modal, without requiring user interaction.\n    \n    **Key Learnings**\n    \n    ‚úÖ **Dropdowns in modals need careful timing** ‚Äì They might not be ready when you expect them to be.\n    \n    ‚úÖ **Waiting for DOM updates is crucial** ‚Äì Observing the element ensures it actually exists before interacting with it.\n    \n    ‚úÖ **Explicit delays can prevent race conditions** ‚Äì A small delay can sometimes resolve timing issues in UI interactions.\n    \n    **Final Result**\n    \n    ‚úÖ The modal now **correctly loads and pre-selects the parent task** without extra clicks! üéâüöÄ', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T08:56:25.273984', 'updated_at': '2025-02-11T15:40:03.610698'}, {'id': 278, 'name': 'search feature for tasks list', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:03.369833', 'updated_at': '2025-02-10T08:39:04.005957'}, {'id': 281, 'name': 'add high level plan', 'description': 'Add some sort of high level plan that aims to keep PM/PO¬¥s on track and not get lost into the details of an overwhelminly large backlog', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:27:01.218606', 'updated_at': '2025-02-10T08:38:54.754760'}, {'id': 287, 'name': 'when moving a parent item to another project make sure the subtasks are moved as well', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:48:31.986870', 'updated_at': '2025-02-10T09:48:31.988859'}, {'id': 272, 'name': 'implement a markdown text editor like notion', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-02-10T08:28:39.669255'}, {'id': 293, 'name': 'click on title should copy the task title and id to clipboard', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:16:33.508209', 'updated_at': '2025-02-10T10:16:33.510414'}, {'id': 277, 'name': 'custom task workflow statuses', 'description': 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- Custom status\n-- Custom status\n- In Progress\n-- Custom status\n-- Custom status\n-- Custom status\n- Completed\n-- Custom status\n-- Custom status\n\n2. How can we track a task through different stages and save the sequence of events or stages the task has gone through?\nI¬¥m thinking it could be good for mapping out processes, identifying bottlenecks and provide valuable insights while improving and streamlining workflows.\n- Stages\n- Contacts taken\n- Respons time \n- Time to action after responses\n- Dependencies\n\nNeed to be able to record every action related to this action.\nCommunication integrations\n- Slack\n- Email\n- Text messages\n- Phonecalls\n- Calendar events, meetings\n- Zoom, Google meet, Teams etc..\n\n\n2. Set custom statuses per project (can use tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:16:03.352588', 'updated_at': '2025-02-10T08:38:28.123328'}, {'id': 274, 'name': 'add support for goals, initiatives, okr¬¥s', 'description': 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:46:27.204912', 'updated_at': '2025-02-10T08:28:17.663922'}, {'id': 280, 'name': 'logging (task and project history)', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:37:44.435112', 'updated_at': '2025-02-10T08:28:28.947805'}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:17.786154', 'updated_at': '2025-02-10T09:41:17.787861'}, {'id': 296, 'name': 'issue: contributor is lost after updating task', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:26:43.881947', 'updated_at': '2025-02-11T15:37:31.011120'}, {'id': 288, 'name': 'when trying to move subtask to another project, make sure a warning is displayed', 'description': 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be lost"\nOR\n\nIs it possible, and is it desireable to keep parent child relationships across projects?\nSo that a parent can be in one project but the child tasks can be in different projects?\n\nLets say \nParent epic is \n"Internationalisation"\nChild user stories are\n- Timezones\n- Language\n- Currency\n- Day, Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:54:36.297869', 'updated_at': '2025-02-10T08:54:51.840686'}, {'id': 284, 'name': 'add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-10T09:42:27.720908'}, {'id': 295, 'name': 'issue: drag and drop errors', 'description': '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:22:54.461413', 'updated_at': '2025-02-10T10:22:54.462542'}, {'id': 297, 'name': 'example parent epic', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:39:51.620509', 'updated_at': '2025-02-10T10:39:51.622712'}, {'id': 292, 'name': 'issue: assigning contributor does not work', 'description': '### **Summary of problem and solution**\n\nThe issue was that assigning a contributor to a task via the /tasks/<task_id>/assign_contributor API endpoint resulted in a **400 Bad Request** error. Upon investigation, the following problems were identified:\n\n1. **Missing CSRF Token:**\n- The request failed due to a missing CSRF token, as shown in the error message: *‚ÄúBad Request: The CSRF token is missing.‚Äù*\n- The frontend was not correctly including the CSRF token in the request headers.\n1. **JavaScript Error (Undefined CSRF Token Variable):**\n- The error *‚ÄúReferenceError: csrfToken is not defined‚Äù* indicated that the CSRF token was not being retrieved properly in the JavaScript code.\n1. **Incorrect Fetch Request Headers:**\n- The fetch request did not include the CSRF token under the correct key (X-CSRFToken).\n- The script attempted to send the request without properly extracting the CSRF token from the meta tag.\n\n### **Solution**\n\n1. **Include the CSRF Token in the JavaScript Code**\n\nThe CSRF token was retrieved from the meta tag and used in the request headers:\n\n```jsx\n// Retrieve CSRF token from meta tag\nconst csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\');\n```\n\nThis ensures that the CSRF token is correctly fetched and available in the JavaScript scope.\n\n1. **Modify the Fetch Request to Include CSRF Token**\n\nThe request to assign a contributor was updated to include the token:\n\n```jsx\nconst response = await fetch(`/tasks/${taskId}/assign_contributor`, {\n    method: "POST",\n    headers: { \n        "Content-Type": "application/json",\n        "X-CSRFToken": csrfToken  // Include CSRF token\n    },\n    body: JSON.stringify({ contributor_id: parseInt(contributorId, 10) }),\n});\n```\n\n- **Ensures the CSRF token is sent in the request headers** so that Flask-WTF does not reject the request.\n1. **Verify and Debug Network Requests**\n- The updated request headers were verified using **Chrome DevTools > Network tab** to ensure the X-CSRFToken was included.\n- The error messages disappeared, and the contributor assignment request **succeeded with a 200 OK response**.\n\n---\n\n### **Final Outcome**\n\nüöÄ The issue was resolved, and contributors can now be assigned successfully to tasks without triggering a CSRF validation error.\n\n### **Key Learnings from This Session**\n\nThis debugging session covered several important aspects of **web development with Flask and JavaScript**, particularly related to **API requests, CSRF protection, debugging tools, and database interactions**. Here are the key takeaways:\n\n---\n\n### **1. CSRF Protection in API Requests**\n\n- **Issue:** The initial error was due to **a missing CSRF token** when making a `POST` request.\n- **Fix:** The solution was to **retrieve the CSRF token from a meta tag** in the HTML and include it in the request headers.\n- **Key Learning:** Flask-WTF requires CSRF tokens for form and API submissions to **prevent cross-site request forgery (CSRF) attacks**.‚úÖ Always ensure that API requests include a valid CSRF token.\n\n---\n\n### **2. Debugging JavaScript Fetch Requests**\n\n- **Issue:** The JavaScript code was making a fetch request, but the variable `csrfToken` was not properly defined, causing a `ReferenceError`.\n- **Fix:** Declaring `csrfToken` at the beginning of the script:\n    \n    ```jsx\n    const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\');\n    ```\n    \n- **Key Learning:**‚úÖ JavaScript variables must be defined before they are used.‚úÖ Use browser **developer tools (DevTools) Network tab** to inspect headers, payloads, and responses when debugging API requests.\n\n---\n\n### **3. Structuring Flask Routes for Task Management**\n\n- **Issue:** The `assign_contributor` route was failing due to incorrect request payload validation.\n- **Fix:** Improved the route‚Äôs error handling and logging:\n    \n    ```python\n    @bp.route(\'/<int:task_id>/assign_contributor\', methods=[\'POST\'])\n    def assign_contributor(task_id):\n        try:\n            data = request.get_json()\n            contributor_id = int(data.get(\'contributor_id\', 0))\n            if not contributor_id:\n                return jsonify({\'error\': \'Valid Contributor ID is required\'}), 400\n    ```\n    \n- **Key Learning:**‚úÖ Always validate incoming data in Flask routes to prevent type errors.‚úÖ Use `request.get_json()` properly and handle missing or incorrect data gracefully.\n\n---\n\n### **4. Utilizing Browser DevTools for Debugging**\n\n- **Issue:** The fetch request was failing with a `400 Bad Request`, and the browser console showed `ReferenceError: csrfToken is not defined`.\n- **Fix:**\n    - Used **Network tab** to inspect the request payload and headers.\n    - Used **Console tab** to catch JavaScript errors early.\n- **Key Learning:**‚úÖ DevTools is a **critical** tool for diagnosing network request issues.‚úÖ Always **check console errors** before assuming it\'s a backend issue.\n\n---\n\n### **5. Database Queries and ORM Debugging**\n\n- **Issue:** Tasks were not being updated correctly, possibly due to missing commit statements.\n- **Fix:** Ensured that:was executed properly.\n    \n    ```python\n    task.contributor_id = contributor_id\n    db.session.commit()\n    ```\n    \n- **Key Learning:**‚úÖ Always call `db.session.commit()` after making changes in SQLAlchemy.‚úÖ Rollback transactions if an error occurs to avoid database inconsistency.\n\n---\n\n### **6. Handling Asynchronous JavaScript Logic**\n\n- **Issue:** The `assignContributor` function was executing before the page was fully loaded.\n- **Fix:** Wrapped it inside a function that ensures elements exist:\n    \n    ```\n    window.setupContributorAssignment = function () {\n        const assignButton = $("#assign-contributor-btn");\n        if (!assignButton.length) {\n            setTimeout(setupContributorAssignment, 500); // Retry in 500ms\n            return;\n        }\n    ```\n    \n- **Key Learning:**‚úÖ Use `setTimeout` to **retry event binding** when elements are dynamically loaded.‚úÖ Always **check if elements exist before attaching event handlers**.\n\n---\n\n### **7. Best Practices for Flask Logging & Error Handling**\n\n- **Issue:** Lack of clear logging when API calls failed.\n- **Fix:** Added better logging to track failures:\n    \n    ```python\n    logger.info(f"Assigning contributor to task ID {task_id}")\n    try:\n        # Process request...\n    except Exception as e:\n        logger.error(f"Error assigning contributor: {e}")\n    ```\n    \n- **Key Learning:**‚úÖ Log **every major step** in API processing to simplify debugging.‚úÖ Differentiate between `logger.info()`, `logger.warning()`, and `logger.error()` based on severity.\n\n---\n\n### **Final Takeaways**\n\nüöÄ **Understanding CSRF protection** and **properly structuring API requests** is crucial for secure web applications.\n\nüîç **Browser DevTools is invaluable** for diagnosing frontend issues, especially in JavaScript.\n\nüêç **Flask requires proper request validation, database transactions, and logging** to maintain stability.\n\n‚ö° **Asynchronous JavaScript must handle dynamic elements carefully** to avoid runtime errors.\n\nThis session reinforced best practices in **frontend-backend integration, debugging, and security**, making it a great learning experience! üöÄüî•', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:11:12.273779', 'updated_at': '2025-02-12T10:59:41.585250'}, {'id': 265, 'name': 'smooth transition for toggles', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-02-10T08:46:55.831743'}, {'id': 270, 'name': 'the newest task', 'description': '', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:07:34.368035', 'updated_at': '2025-02-10T01:07:34.372478'}, {'id': 291, 'name': 'add dropdowns in task list for changing: project, assigned to, estimate and task type (labels/tags)', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-02-10T10:09:52.997455'}, {'id': 136, 'name': 'Page scroll should stay in position when reloading', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-16T18:21:50.187247', 'updated_at': '2025-01-16T19:22:36.214901'}, {'id': 130, 'name': 'Implement the Map of Task Relationships solution for drag-and-drop', 'description': 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.093022', 'updated_at': '2025-01-16T19:22:36.216705'}, {'id': 133, 'name': 'Step 4: Enhance Logging in models.py', 'description': 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nupdating the Task model in the following ways:\n\n1.\tLog Changes to parent_id:\n\t‚Ä¢\tLog changes to parent_id during updates, including old and new values.\n\t2.\tValidate Hierarchy with Logging:\n\t‚Ä¢\tLog detailed messages when validating hierarchy changes, especially for circular dependency checks.\n\nHere‚Äôs how the models.py can be updated:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy import func, cast, CheckConstraint\nfrom sqlalchemy.orm import validates\nfrom app.extensions.db import db\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\nclass Task(db.Model):\n    __tablename__ = "task"\n    \n    # Other columns...\n\n    parent_id = db.Column(\n        db.Integer, db.ForeignKey("task.id"), index=True, nullable=True\n    )\n\n    # Relationships\n    parent = db.relationship(\n        "Task", remote_side=[id], back_populates="children", lazy="select"\n    )\n    children = db.relationship(\n        "Task", back_populates="parent", lazy="select"\n    )\n\n    \n\n\n    @staticmethod\n    def _validate_no_circular_references(new_parent_id):\n        """\n        Validates that there are no circular references in the task hierarchy.\n\n        Args:\n            new_parent_id (int): The new parent ID to validate.\n\n        Raises:\n            ValueError: If a circular reference is detected.\n        """\n        visited = set()\n        current_parent_id = new_parent_id\n\n        logger.info(f"Validating circular references for parent ID: {new_parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error(\n                    f"Circular reference detected: Parent ID {current_parent_id} already visited."\n                )\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            # Fetch the next parent_id in the hierarchy\n            parent = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not parent:\n                break  # Exit if no parent is found\n            current_parent_id = parent.parent_id\n\n        logger.info("No circular reference detected.")\n\n    @validates(\'parent_id\', \'task_type\')\n    def validate_task_changes(self, key, value):\n        """\n        Validates changes to \'parent_id\' and \'task_type\'.\n        Ensures hierarchy validity and checks for circular references.\n        """\n        logger.debug(f"Validating {key} change for Task {self.id}: {value}")\n\n        if key == \'parent_id\':\n            # Log changes to parent_id\n            if self.id and value != self.parent_id:\n                logger.info(f"Task {self.id}: Updating \'parent_id\' from {self.parent_id} to {value}")\n\n            # Prevent a task from being its own parent\n            if value and value == self.id:\n                logger.error("A task cannot be its own parent.")\n                raise ValueError("A task cannot be its own parent.")\n\n            # Check for circular references\n            if value:\n                Task.check_circular_reference(self.id, value)\n\n        elif key == \'task_type\':\n            # Log changes to task_type\n            if self.id and value != self.task_type:\n                logger.info(f"Task {self.id}: Updating \'task_type\' from {self.task_type} to {value}")\n\n        # Check hierarchy rules without triggering further validation\n        if key in [\'parent_id\', \'task_type\']:\n            self._validate_hierarchy_change(key, value)\n\n        logger.info(f"Validation passed for {key}: {value}")\n        return value\n\n    def _validate_hierarchy_change(self, key, value):\n        """\n        Validates hierarchy rules for the task based on `task_type` and `parent_id`.\n        """\n        if key == \'parent_id\' and value:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=value).first()\n            if not parent_task:\n                raise ValueError("Parent task does not exist.")\n\n            logger.debug(f"Validating hierarchy: Task {self.id}, Parent Type: {parent_task.task_type}")\n            if self.task_type == "User Story" and parent_task.task_type != "Epic":\n                raise ValueError("User Stories must have an Epic as a parent.")\n            if self.task_type == "Subtask" and parent_task.task_type != "User Story":\n                raise ValueError("Subtasks must have a User Story as a parent.")\n\n        elif key == \'task_type\' and self.parent_id:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=self.parent_id).first()\n            if parent_task:\n                logger.debug(f"Validating hierarchy: Task Type: {value}, Parent Type: {parent_task.task_type}")\n                if value == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError("User Stories must have an Epic as a parent.")\n                if value == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError("Subtasks must have a User Story as a parent.")\n\n        logger.info(f"Hierarchy validation passed for Task {self.id if self.id else \'New Task\'}.")\n\n    @staticmethod\n    def check_circular_reference(task_id, parent_id):\n        """\n        Iteratively checks for circular references in the task hierarchy.\n        Prevents stack overflow on deep hierarchies.\n        """\n        visited = set()\n        current_parent_id = parent_id\n\n        logger.info(f"Checking circular reference for Task {task_id} with Parent ID: {parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error("Circular reference detected!")\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            if current_parent_id == task_id:\n                logger.error("A task cannot be its own ancestor.")\n                raise ValueError("A task cannot be its own ancestor.")\n\n            # Fetch the next parent_id in the hierarchy\n            task = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not task:\n                break\n            current_parent_id = task.parent_id\n\n        logger.info("Circular reference check passed.")\n```\nKey Enhancements:\n\t1.\tlog_and_validate_parent_id_change:\n\t‚Ä¢\tLogs the old and new parent_id whenever it changes.\n\t‚Ä¢\tEnsures no circular references are introduced.\n\t2.\t_validate_no_circular_references:\n\t‚Ä¢\tValidates the parent_id field to prevent circular dependencies.\n\t‚Ä¢\tLogs progress and raises detailed errors if violations occur.\n\t3.\tlog_and_validate_task_type_change:\n\t‚Ä¢\tLogs changes to task_type with the old and new values.\n\t‚Ä¢\tRevalidates hierarchy rules when task_type changes.\n\t4.\tDetailed Logging for Circular Reference Validation:\n\t‚Ä¢\t_validate_no_circular_references and check_circular_reference methods log every step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t‚Ä¢\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:44:08.340041', 'updated_at': '2025-01-16T19:22:36.219710'}, {'id': 132, 'name': 'Step 1: Update tasks_table_interactions.js', 'description': '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the map for efficient parent-child relationship lookups instead of DOM traversal.\n\n```\nexport const TaskManager = {\n    init: function (csrfToken) {\n        this.csrfToken = csrfToken;\n        this.initTaskParentMap(); // Initialize the map\n        this.initDragAndDrop(); // Initialize drag-and-drop functionality\n    },\n\n    // Initialize a global map for task relationships\n    taskParentMap: new Map(),\n\n    // Build the taskParentMap from the DOM\n    initTaskParentMap: function () {\n        console.log("Initializing Task Parent Map...");\n        const rows = document.querySelectorAll("tr[data-task-id]");\n\n        rows.forEach((row) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = parseInt(row.dataset.parentId, 10) || null;\n            this.taskParentMap.set(taskId, parentId);\n        });\n\n        console.log("Task Parent Map initialized:", Array.from(this.taskParentMap.entries()));\n    },\n\n    // Update the map dynamically after drag-and-drop\n    updateTaskParentMap: function (taskId, parentId) {\n        console.log(`Updating Task Parent Map: Task ${taskId} -> Parent ${parentId}`);\n        this.taskParentMap.set(taskId, parentId);\n    },\n\n    initDragAndDrop: function () {\n        if (window.isDragAndDropInitialized) {\n            console.log("Drag-and-drop is already initialized.");\n            return;\n        }\n\n        console.log("Initializing drag-and-drop within TaskManager...");\n\n        const tableBody = document.querySelector("tbody");\n        if (!tableBody) {\n            console.warn("Task table body not found for drag-and-drop initialization");\n            return;\n        }\n\n        // Initialize Sortable.js for drag-and-drop functionality\n        Sortable.create(tableBody, {\n            handle: ".task-row", // Only draggable via `.task-row` elements\n            animation: 150, // Smooth animation\n            filter: ".task-open-link", // Prevent dragging on task links\n            preventOnFilter: true, // Prevent drag if filtered element is clicked\n            onEnd: async (event) => {\n                try {\n                    console.log("Drag-and-drop operation started...");\n                    const rows = Array.from(event.from.querySelectorAll(".task-row"));\n                    const reorderedTasks = [];\n\n                    rows.forEach((row, index) => {\n                        const taskId = parseInt(row.dataset.taskId, 10);\n                        let parentId = null;\n\n                        // Get the parent ID from the map or fallback to the dataset\n                        if (row.classList.contains("subtask-row")) {\n                            const parentRow = row.previousElementSibling;\n                            parentId = parentRow\n                                ? parseInt(parentRow.dataset.taskId, 10)\n                                : this.taskParentMap.get(taskId) || null;\n                        }\n\n                        // Update the taskParentMap dynamically\n                        this.updateTaskParentMap(taskId, parentId);\n\n                        reorderedTasks.push({\n                            id: taskId,\n                            sort_order: index + 1,\n                            parent_id: parentId,\n                        });\n                    });\n\n                    console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n                    console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n                    // Send the payload to the backend\n                    const response = await fetch("/tasks/reorder_subtasks", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                            "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n                        },\n                        body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n                    });\n\n                    if (!response.ok) {\n                        const errorData = await response.json();\n                        console.error("Error reordering tasks:", errorData);\n                        alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n                        return;\n                    }\n\n                    const data = await response.json();\n                    console.log("Task reordering successful:", data);\n\n                } catch (error) {\n                    console.error("Error during drag-and-drop operation:", error);\n                    alert("An unexpected error occurred while reordering tasks.");\n                }\n            },\n        });\n\n        window.isDragAndDropInitialized = true;\n        console.log("Drag-and-drop initialized successfully.");\n    },\n};\n```\n\nKey Updates:\n\t1.\tPrecomputed Map (taskParentMap):\n\t‚Ä¢\tThe initTaskParentMap function initializes the map by iterating over DOM elements and mapping each task‚Äôs ID to its parent ID.\n\t‚Ä¢\tThe updateTaskParentMap dynamically updates the map when tasks are reordered.\n\t2.\tEfficient Parent Lookup:\n\t‚Ä¢\tThe parentId is derived from the precomputed map rather than DOM traversal.\n\t3.\tBackend Payload:\n\t‚Ä¢\tA structured payload (reorderedTasks) is sent to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t‚Ä¢\tCSRF protection is ensured by passing the token to the request headers.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:44:08.338301', 'updated_at': '2025-02-06T21:59:17.417466'}, {'id': 134, 'name': 'Step 2: Update the Backend in routes.py', 'description': 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\nPlan for step 2:\n\t1.\tVerify the payload structure:\n\t‚Ä¢\tEnsure that the payload includes all necessary fields (id, sort_order, parent_id) for each task.\n\t‚Ä¢\tValidate that the parent-child relationships in the precomputed map (taskParentMap) are reflected correctly in the payload.\n\t2.\tSubmit the payload to the backend:\n\t‚Ä¢\tEnhance the fetch request in the onEnd function of initDragAndDrop to log detailed submission data.\n\t‚Ä¢\tConfirm the payload integrity in the browser console before submission.\n\t3.\tUpdate backend logging:\n\t‚Ä¢\tAdd logging to /reorder_subtasks in routes.py to confirm receipt of the correct payload and process parent-child updates.\n\t‚Ä¢\tLog before and after database updates for better debugging.\n\n-----\nUpdated tasks_table_interactions.js\n\nReplace this section:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    let parentId = null;\n```\nWith:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    const parentId = this.taskParentMap.get(taskId) || null;\n```\nThe this.taskParentMap provides a precomputed and dynamic mapping of taskId to parentId. By using this map, we avoid relying on DOM traversal logic (row.closest or row.previousElementSibling) during drag-and-drop operations, which can sometimes be unreliable or cumbersome.\n\nFull Revised onEnd section:\n```\nonEnd: async (event) => {\n    try {\n        console.log("Drag-and-drop operation started...");\n        const rows = Array.from(event.from.querySelectorAll(".task-row"));\n        const reorderedTasks = [];\n\n        rows.forEach((row, index) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = this.taskParentMap.get(taskId) || null;\n\n            // Update the taskParentMap dynamically\n            this.updateTaskParentMap(taskId, parentId);\n\n            reorderedTasks.push({\n                id: taskId,\n                sort_order: index + 1,\n                parent_id: parentId,\n            });\n        });\n\n        console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n        console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n        // Send the payload to the backend\n        const response = await fetch("/tasks/reorder_subtasks", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n            },\n            body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error("Error reordering tasks:", errorData);\n            alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n            return;\n        }\n\n        const data = await response.json();\n        console.log("Task reordering successful:", data);\n\n    } catch (error) {\n        console.error("Error during drag-and-drop operation:", error);\n        alert("An unexpected error occurred while reordering tasks.");\n    }\n}\n```\n---------------------------------\nEnsure updates include:\n\t‚Ä¢\tBetter Logging: Adding logs for key events such as database changes and validation results.\n\t‚Ä¢\tInput Validation: Ensure all required fields (id, sort_order, parent_id) exist in the payload.\n\t‚Ä¢\tPost-Commit Validation: Confirm database updates after the commit.\n\t‚Ä¢\tImproved Error Handling: Include specific error messages and consistent rollback mechanisms.\n\nBelow is the revised reorder_subtasks route with descriptive comments for each section:\n```\n@bp.route("/reorder_subtasks", methods=["POST"])\ndef reorder_subtasks():\n    """\n    Reorder subtasks globally or reassign them to a different parent.\n\n    Steps:\n    - Parse and validate input from the frontend.\n    - Update parent-child relationships and sort order in the database.\n    - Commit changes and return a success response.\n    - Handle errors gracefully and provide detailed logs for debugging.\n    """\n    logger.info("Entering reorder_subtasks route...")\n    logger.info(f"Received payload for reordering tasks: {request.json}")\n\n    try:\n        # Step 1: Parse input\n        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered\n        ordered_tasks = request.json.get("ordered_tasks", [])\n\n        logger.debug(f"Parsed parent_id: {parent_id}")\n        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")\n\n        # Step 2: Validate input\n        if not isinstance(ordered_tasks, list) or not all(\n            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task\n            for task in ordered_tasks\n        ):\n            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")\n            return jsonify({\n                "error": "Invalid input format for \'ordered_tasks\'. Each task must include \'id\', \'sort_order\', and \'parent_id\'."\n            }), 400\n\n        # Step 3: Validate parent task (if applicable)\n        if parent_id is not None:\n            parent_task = Task.query.get(parent_id)\n            if not parent_task:\n                logger.error(f"Parent task with ID {parent_id} not found.")\n                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400\n\n        logger.info("Input validation passed. Proceeding with task updates...")\n\n        # Step 4: Process updates for each subtask\n        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation\n\n        for task_data in ordered_tasks:\n            subtask_id = task_data["id"]\n            sort_order = task_data["sort_order"]\n            new_parent_id = task_data["parent_id"]\n\n            # Fetch the subtask from the database\n            subtask = Task.query.get(subtask_id)\n            if not subtask:\n                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")\n                continue\n\n            # Log and update parent_id if it changes\n            if new_parent_id is not None and new_parent_id != subtask.parent_id:\n                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")\n                subtask.parent_id = new_parent_id\n\n            # Update sort order\n            subtask.sort_order = sort_order\n            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")\n\n            # Add to the list of updated subtasks for validation\n            updated_subtasks.append(subtask)\n\n        # Step 5: Commit changes to the database\n        try:\n            db.session.commit()\n            logger.info(f"Subtasks reordered successfully: {[task[\'id\'] for task in ordered_tasks]}")\n        except Exception as e:\n            logger.error(f"Error committing changes to the database: {str(e)}")\n            db.session.rollback()\n            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500\n\n        # Step 6: Post-commit validation\n        for subtask in updated_subtasks:\n            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")\n            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")\n\n        # Step 7: Return success response\n        return jsonify({\n            "success": True,\n            "message": "Subtasks reordered successfully.",\n            "updated_subtasks": [subtask.id for subtask in updated_subtasks]\n        }), 200\n\n    except Exception as e:\n        # Step 8: Handle unexpected errors\n        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)\n        db.session.rollback()\n        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500\n```\nKey Changes and Descriptive Comments\n\t1.\tInput Parsing:\n\t‚Ä¢\tExtracts parent_id and ordered_tasks from the request payload.\n\t‚Ä¢\tLogs the parsed values for debugging.\n\t2.\tInput Validation:\n\t‚Ä¢\tEnsures ordered_tasks is a list of dictionaries with the required keys.\n\t‚Ä¢\tValidates parent_id if provided, ensuring the parent task exists in the database.\n\t3.\tUpdate Processing:\n\t‚Ä¢\tIterates through ordered_tasks, updating each task‚Äôs parent_id and sort_order.\n\t‚Ä¢\tLogs changes for each task.\n\t4.\tDatabase Commit:\n\t‚Ä¢\tCommits all updates in a single transaction.\n\t‚Ä¢\tLogs success or rolls back changes in case of an error.\n\t5.\tPost-Commit Validation:\n\t‚Ä¢\tVerifies that the parent_id and sort_order changes were successfully saved to the database.\n\t6.\tError Handling:\n\t‚Ä¢\tCaptures and logs exceptions during processing or committing.\n\t‚Ä¢\tProvides meaningful error messages to the frontend.\n\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:46:29.348853', 'updated_at': '2025-02-06T21:59:21.617065'}, {'id': 131, 'name': 'Step 5: Update utils.py', 'description': 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nChanges to Make:\n\t1.\tEnhance Task Filtering:\n\t‚Ä¢\tEnsure the filters handle parent-child relationships explicitly.\n\t‚Ä¢\tAdd options to include or exclude subtasks in queries.\n\t2.\tUtility Function for Debugging Parent-Child Relationships:\n\t‚Ä¢\tProvide a function to generate a map or list of parent-child relationships for debugging purposes.\n\t3.\tValidation Functions:\n\t‚Ä¢\tAdd a utility function to validate parent-child relationships and ensure no circular dependencies.\n\nUpdated utils.py Code:\n```\nimport logging\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import joinedload\nfrom app.extensions.db import db\nfrom app.tasks.models import Task\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\n\nclass TaskService:\n    @staticmethod\n    def filter_tasks(filters=None, include_subtasks=True, page=None, per_page=None):\n        """\n        Dynamically filters tasks with an option to include or exclude subtasks.\n\n        Args:\n            filters (dict): Filtering criteria.\n            include_subtasks (bool): Whether to include subtasks in the query.\n            page (int, optional): Page number for pagination.\n            per_page (int, optional): Items per page for pagination.\n\n        Returns:\n            Query or Pagination: A SQLAlchemy query object or paginated results.\n        """\n        query = Task.query.options(\n            db.joinedload(Task.project).joinedload(Project.contributors),\n            db.joinedload(Task.contributor),\n            db.joinedload(Task.children),\n        ).order_by(Task.sort_order)\n\n        if filters:\n            logger.debug(f"Applying filters: {filters}")\n\n            # Apply standard filters\n            if "is_archived" in filters:\n                query = query.filter(Task.is_archived == filters["is_archived"])\n            if "project_id" in filters:\n                query = query.filter(Task.project_id == filters["project_id"])\n            if "task_type" in filters:\n                if isinstance(filters["task_type"], list):\n                    query = query.filter(Task.task_type.in_(filters["task_type"]))\n                else:\n                    query = query.filter(Task.task_type == filters["task_type"])\n            if "completion_status" in filters:\n                completion_map = {"completed": True, "in_progress": False}\n                if filters["completion_status"] in completion_map:\n                    query = query.filter(Task.completed == completion_map[filters["completion_status"]])\n\n            # Optionally exclude subtasks\n            if not include_subtasks:\n                query = query.filter(Task.task_type != "Subtask")\n\n        logger.debug(f"Generated query: {query}")\n\n        # Pagination\n        if page and per_page:\n            return query.paginate(page=page, per_page=per_page, error_out=False)\n        return query\n\n    @staticmethod\n    def debug_parent_child_relationships(project_id=None):\n        """\n        Generates a debug map of parent-child relationships for all tasks.\n\n        Args:\n            project_id (int, optional): Restrict to tasks from a specific project.\n\n        Returns:\n            dict: A dictionary mapping parent IDs to their child task IDs.\n        """\n        query = Task.query\n        if project_id:\n            query = query.filter(Task.project_id == project_id)\n\n        tasks = query.options(\n            db.load_only(Task.id, Task.parent_id)\n        ).all()\n\n        relationship_map = {}\n        for task in tasks:\n            if task.parent_id not in relationship_map:\n                relationship_map[task.parent_id] = []\n            relationship_map[task.parent_id].append(task.id)\n\n        logger.debug(f"Parent-Child Relationship Map: {relationship_map}")\n        return relationship_map\n\n    @staticmethod\n    def validate_parent_child_relationships():\n        """\n        Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.\n\n        Raises:\n            ValueError: If invalid relationships are detected.\n        """\n        tasks = Task.query.options(db.joinedload(Task.parent)).all()\n\n        for task in tasks:\n            if task.parent_id:\n                parent_task = task.parent\n                if not parent_task:\n                    raise ValueError(f"Task {task.id} has an invalid parent ID {task.parent_id}.")\n\n                # Validate hierarchy rules\n                if task.task_type == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError(f"User Story {task.id} must have an Epic as its parent.")\n                if task.task_type == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError(f"Subtask {task.id} must have a User Story as its parent.")\n\n        logger.info("All parent-child relationships are valid.")\n\n    @staticmethod\n    def get_all_task_ids_with_parents():\n        """\n        Returns a flat list of tasks with their parent IDs for debugging.\n\n        Returns:\n            list: A list of tuples (task_id, parent_id).\n        """\n        tasks = Task.query.with_entities(Task.id, Task.parent_id).all()\n        logger.debug(f"Task IDs with Parent IDs: {tasks}")\n        return tasks\n```\n\n\nExplanation of Changes:\n\t1.\tfilter_tasks Enhancements:\n\t‚Ä¢\tAdded include_subtasks parameter to optionally exclude subtasks from the query.\n\t2.\tdebug_parent_child_relationships:\n\t‚Ä¢\tCreates a parent-child relationship map for debugging purposes.\n\t3.\tvalidate_parent_child_relationships:\n\t‚Ä¢\tIterates through all tasks to validate parent-child hierarchy and ensures no invalid relationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t‚Ä¢\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.091824', 'updated_at': '2025-01-16T19:22:36.236691'}, {'id': 135, 'name': 'Step 3: Update list.html', 'description': 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already includes everything needed. No required changes.\n\nHere¬¥s the relevant section of list.html:\n\n```\n<tr id="task-{{ task.id }}"\n                class="task-row {% if task.task_type == \'Subtask\' %}subtask-row{% elif task.task_type == \'User Story\' %}user-story-row{% elif task.task_type == \'Epic\' %}epic-row{% endif %}"\n                style="background-color: \n                {% if task.task_type == \'Subtask\' %}\n                    rgba(200, 230, 255, 0.5); /* Light blue for Subtask */\n                {% elif task.task_type == \'User Story\' %}\n                    rgba(255, 255, 200, 0.5); /* Light yellow for User Story */\n                {% elif task.task_type == \'Epic\' %}\n                    rgba(255, 200, 200, 0.5); /* Light red for Epic */\n                {% else %}\n                    rgba(240, 240, 240, 1); /* Default light gray */\n                {% endif %};"\n                data-task-id="{{ task.id }}"\n                data-parent-id="{{ task.parent_id or \'\' }}"\n                data-level="{{ depth }}">\n                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>\n                <td>\n                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}\n                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}" aria-label="Toggle details for task {{ task.name }}">\n                        <i class="bi bi-chevron-right"></i>\n                    </button>\n                    {% endif %}\n                </td>\n                <td class="fw-medium fs-6 \n                {% if task.task_type == \'Epic\' %}\n                    epic-cell\n                {% elif task.task_type == \'User Story\' %}\n                    user-story-cell\n                {% elif task.task_type == \'Subtask\' %}\n                    subtask-cell\n                {% endif %}" \n                style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">\n                <span class="bi fs-6\n                {% if task.task_type == \'Epic\' %}\n                    bi-circle-fill\n                {% elif task.task_type == \'User Story\' %}\n                    bi-circle-half\n                {% elif task.task_type == \'Subtask\' %}\n                    bi-circle\n                {% endif %}">\n                </span>\n                {{ task.name }}\n                <small class="text-muted fw-light">\n                    (Parent-ID: {{ task.parent_id or \'None\' }})\n                </small>\n                <!-- Open Link -->\n                <a href="#" class="task-open-link" data-task-id="{{ task.id }}">\n                    <i class="bi bi-arrows-angle-expand" style="font-size: 0.8rem; color: white;"></i>\n                    Open\n                </a>\n            </td>\n                <td class="fw-light fs-6">\n                    <small class>\n                    LAC-{{ task.id }}\n                    </small>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light text-bg-secondary">\n                        {{ task.project if task.project else "Unknown Project" }}\n                    </span>\n                </td>\n                <td class="fs-6" data-contributor-column>{{ task.assigned_to if task.assigned_to else "Unassigned" }}</td>\n                <td class="fs-6">{{ task.story_points }}</td>\n                <td class="fs-6">\n                    <span class="badge rounded-pill fw-light text-bg-light">\n                        {{ task.task_type }}\n                    </span>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light {% if task.completed %}text-bg-success{% else %}text-bg-warning{% endif %}">\n                        {{ "Completed" if task.completed else "In Progress" }}\n                    </span>\n                </td>\n                <td>\n                    <!-- Delete Icon -->\n                    <button class="btn btn-dark btn-sm delete-task-btn" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .2rem; --bs-btn-font-size: .75rem;" data-task-id="{{ task.id }}" aria-label="Deletes task {{ task.id }}">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n            </tr>\n            {% for child in tasks if child.parent_id == task.id %}\n                {{ render_task(child, tasks, depth + 1) }}\n            {% endfor %}\n            {% endmacro %}\n            \n            <!-- Render top-level tasks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:46:29.349784', 'updated_at': '2025-01-16T19:22:36.238473'}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'description': 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitHub Login involves integrating OAuth 2.0, which both services support. The complexity depends on your app‚Äôs existing setup, frameworks, and experience with third-party authentication. Below is a breakdown:\n\nKey Steps for Implementing Google or GitHub Login\n\t1.\tSet Up OAuth Credentials:\n\t‚Ä¢\tRegister your application in the Google Cloud Console or GitHub Developer Settings.\n\t‚Ä¢\tObtain the client ID and client secret.\n\t2.\tInstall Required Libraries:\n\t‚Ä¢\tUse a library for OAuth (e.g., flask-oauthlib, python-social-auth, or authlib).\n\t‚Ä¢\tPopular frameworks like Flask and Django already have robust integrations for OAuth providers.\n\t3.\tBackend Configuration:\n\t‚Ä¢\tImplement an endpoint to handle the OAuth flow (/auth/login/google or /auth/login/github).\n\t‚Ä¢\tConfigure your app to send users to Google or GitHub‚Äôs authentication page.\n\t‚Ä¢\tHandle the OAuth callback to exchange the authorization code for an access token.\n\t‚Ä¢\tVerify the token and fetch user information (e.g., email, name).\n\t4.\tLink OAuth to User Registration:\n\t‚Ä¢\tOn successful login, create or retrieve a user in your database.\n\t‚Ä¢\tStore the user‚Äôs details like email, OAuth provider ID, and access token.\n\t5.\tFrontend Integration (if applicable):\n\t‚Ä¢\tAdd ‚ÄúLogin with Google‚Äù or ‚ÄúLogin with GitHub‚Äù buttons.\n\t‚Ä¢\tRedirect to your backend‚Äôs OAuth endpoint when clicked.', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T12:15:54.291625', 'updated_at': '2025-01-16T19:22:36.239866'}, {'id': 62, 'name': 'Add OAuth integration for Google Login', 'description': 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.241200'}, {'id': 64, 'name': 'Setup project credentials for Google API', 'description': 'Generate client ID and secret from Google API Console for your application.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-01-16T19:22:36.242497'}, {'id': 67, 'name': 'Test Google OAuth flow', 'description': 'Verify the OAuth flow using test accounts and check the token exchange.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.243780'}, {'id': 65, 'name': 'Implement backend endpoints for Google OAuth', 'description': 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-01-16T19:22:36.244932'}, {'id': 63, 'name': 'Add OAuth integration for GitHub Login', 'description': 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.246358'}, {'id': 68, 'name': 'Register application in GitHub Developer Console', 'description': 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.247746'}, {'id': 69, 'name': 'Handle callback from GitHub', 'description': 'Implement the callback endpoint to process the authorization code from GitHub.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.248912'}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'description': 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 18, 'status': 'Not Started', 'created_at': '2025-01-07T19:53:50.085064', 'updated_at': '2025-01-16T19:22:36.250169'}, {'id': 100, 'name': '1.1 User Registration', 'description': 'As a user, I want to register with a username, email, and password so that I can create an account and access the system.\n\n**Acceptance Criteria:**\n\n‚Ä¢\tUser can input valid username, email, and password.\n‚Ä¢\tUsername and email must be unique.\n‚Ä¢\tErrors are displayed for invalid inputs or duplicate accounts.\n‚Ä¢\tPasswords must meet complexity requirements and be securely stored.\n‚Ä¢\tSuccessful registration redirects users to a login page.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:59:09.044667', 'updated_at': '2025-01-16T19:22:36.251812'}, {'id': 107, 'name': '1.1.1 Database Changes for User Registration', 'description': '1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.\n   CREATE TABLE public.users (\n       id SERIAL PRIMARY KEY,\n       username VARCHAR(50) UNIQUE NOT NULL,\n       email VARCHAR(100) UNIQUE NOT NULL,\n       password_hash VARCHAR(255) NOT NULL,\n       created_at TIMESTAMP DEFAULT NOW(),\n       updated_at TIMESTAMP DEFAULT NOW()\n);\n\n\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-11T11:36:20.238219'}, {'id': 108, 'name': '1.1.2 Backend API for Registration', 'description': '‚Ä¢\tCreate an endpoint POST /api/register:\n‚Ä¢\tValidate input fields.\n‚Ä¢\tHash the password using bcrypt or argon2.\n‚Ä¢\tInsert the user into the users table.\n‚Ä¢\tReturn success/failure responses.\ndddhfff\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:33.067643'}, {'id': 112, 'name': '1.2.2 Frontend Login Page', 'description': 'Develop a frontend form for user login with email and password inputs.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.683644'}, {'id': 109, 'name': '1.1.3 Create Frontend Registration Page', 'description': 'Develop a frontend form to collect user registration details.\n‚Ä¢\tAdd a form for username, email, and password inputs.\n‚Ä¢\tUse client-side validation (e.g., email format).\n‚Ä¢\tSend a POST request to /api/register.\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.684988'}, {'id': 110, 'name': '1.1.4 Unit Tests for Registration', 'description': 'Write unit tests for:\n\n‚Ä¢\tValid registration.\n‚Ä¢\tDuplicate username/email scenarios.\n‚Ä¢\tInvalid input handling.\nff', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.686902'}, {'id': 101, 'name': '1.2 User Login', 'description': 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n‚Ä¢\tUsers can log in with a valid email and password.\n‚Ä¢\tErrors are displayed for invalid credentials.\n‚Ä¢\tSuccessful login stores a session or JWT token.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:25:53.687936'}, {'id': 111, 'name': '1.2.1 Backend API for Login', 'description': 'Create POST /api/login endpoint to handle user login.\njjsjj', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.689096'}, {'id': 113, 'name': '1.2.3 Session Management', 'description': 'Implement secure session handling using cookies or JWT.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:20.968680'}, {'id': 114, 'name': '1.2.4 Unit Tests for Login', 'description': 'Write tests for successful and failed login attempts.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:22:36.265866'}, {'id': 106, 'name': 'Password Reset', 'description': 'As a user, I want to reset my password securely using email.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.267247'}, {'id': 128, 'name': 'Frontend Password Reset Page', 'description': 'Develop a page for users to enter a new password using a valid token.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.269158'}, {'id': 129, 'name': 'Testing Password Reset', 'description': 'Write tests for email delivery, token validation, and password updates.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.270849'}, {'id': 102, 'name': 'Logout', 'description': 'As a user, I want to log out so that I can end my session securely.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.272605'}, {'id': 117, 'name': 'Tests for Logout', 'description': 'Verify session invalidation and redirection to the login page.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.274575'}, {'id': 116, 'name': 'Frontend Logout Button', 'description': 'Add a logout button to the UI and handle session clearing.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-09T12:31:17.939784'}, {'id': 115, 'name': 'Backend API for Logout', 'description': 'Create POST /api/logout endpoint to invalidate user sessions.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.277547'}, {'id': 61, 'name': 'Parent task assignment', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-04T22:31:45.205815', 'updated_at': '2025-01-16T19:22:36.279012'}, {'id': 45, 'name': 'Display Default Value in Dropdown', 'description': 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.280493'}, {'id': 50, 'name': 'Retrieve Current Parent Task', 'description': 'Retrieve the current parent task‚Äôs ID and name from the backend.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'In Progress', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:22.274304'}, {'id': 51, 'name': 'Set Default Value', 'description': 'Set the default value in the dropdown based on the retrieved data.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 45, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 1, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.283309'}, {'id': 46, 'name': 'Search for Parent Tasks', 'description': 'Allow users to search for tasks dynamically in the dropdown by typing.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.284882'}, {'id': 54, 'name': 'Test Partial Matching', 'description': 'Ensure the search results update in real-time as the user types.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:29.251047'}, {'id': 47, 'name': 'Handle Large Datasets Efficiently', 'description': 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:26:23.067490'}, {'id': 56, 'name': 'Paginate API Responses', 'description': 'Implement server-side filtering and pagination for large datasets.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:16.233517'}, {'id': 55, 'name': 'Enable Lazy Loading', 'description': 'Enable lazy loading or virtualization in Virtual Select.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:08.099271'}, {'id': 48, 'name': 'Select and Deselect Parent Tasks', 'description': 'Allow users to select a parent task or deselect by choosing "None."', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:25:59.651639'}, {'id': 57, 'name': 'Ensure None Option Availability', 'description': 'Add ‚ÄúNone‚Äù as a selectable option and ensure it stays at the top of the list.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:51.310240'}, {'id': 58, 'name': 'Handle Selection Events', 'description': 'Implement event listeners to update the form‚Äôs state when the selection changes.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:43.569501'}, {'id': 49, 'name': 'Integrate Dropdown with Task Form', 'description': 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:25:36.133259'}, {'id': 59, 'name': 'Bind Dropdown to Form Field', 'description': 'Bind the dropdown to the form‚Äôs parent task field.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:15.491910'}, {'id': 60, 'name': 'Test Form Submission', 'description': 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:28.367797'}, {'id': 41, 'name': 'Implement Searchable Dropdown', 'description': 'As a user, I want a searchable dropdown for parent task assignment.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Completed', 'created_at': '2025-01-03T09:14:28.285904', 'updated_at': '2025-02-11T08:25:07.992524'}, {'id': 52, 'name': 'Add Search Box to Dropdown', 'description': 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:01.469601'}, {'id': 53, 'name': 'Implement AJAX Search', 'description': 'Implement AJAX-based search to fetch tasks dynamically from the backend.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:24:54.245010'}, {'id': 42, 'name': 'Choose Dropdown Library', 'description': 'Research and decide on the dropdown library to use.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-11T08:24:47.274896'}, {'id': 43, 'name': 'Integrate Dropdown Library', 'description': 'Integrate the chosen dropdown library into the project.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Completed', 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-11T08:24:33.908549'}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t‚Ä¢\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t‚Ä¢\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t‚Ä¢\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-02-11T08:24:26.494016'}, {'id': 85, 'name': 'Assign multiple contributors to a task', 'description': 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:32:39.466022', 'updated_at': '2025-02-11T08:24:21.069473'}, {'id': 90, 'name': 'Update frontend to display and manage multiple contributors', 'description': 'Allow users to view, add, or remove multiple contributors via the UI.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-11T08:24:13.204884'}, {'id': 88, 'name': 'Update database schema for multiple contributors', 'description': 'Modify the task table to support many-to-many relationships for contributors.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-11T08:24:05.873554'}, {'id': 89, 'name': 'Develop backend API for adding contributors to a task', 'description': 'Create endpoints to add, update, and remove contributors for a task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-11T08:23:58.436495'}, {'id': 86, 'name': 'Allow designation of task owner', 'description': 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:29.330562', 'updated_at': '2025-02-11T08:23:51.269557'}, {'id': 93, 'name': 'Update frontend to manage task ownership', 'description': 'Allow users to assign or update the task owner via the UI.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-11T08:23:42.771565'}, {'id': 91, 'name': 'Update database schema for task ownership', 'description': 'Add a column or relationship to assign a single owner per task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-11T08:23:33.670381'}, {'id': 92, 'name': 'Develop backend API for assigning task owner', 'description': 'Create endpoints to assign or update the owner of a task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-11T09:19:44.027744'}, {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-02-11T08:23:23.402442'}, {'id': 96, 'name': 'Allow admin users to create and customize contributor roles via frontend', 'description': 'Provide UI functionality for admins to manage contributor roles dynamically.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T08:23:13.139282'}, {'id': 94, 'name': 'Add database support for contributor roles', 'description': 'Introduce a roles table and link contributors to specific roles for tasks.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T08:22:56.181530'}, {'id': 95, 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T08:22:02.276492'}, {'id': 127, 'name': 'Backend API for Password Reset', 'description': 'Create endpoints to handle password reset requests and token validation.\ndfdf\n\nasdasd', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-10T23:59:50.734037'}, {'id': 126, 'name': 'Email Configuration for Password Reset', 'description': 'Configure email service to send password reset links.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.334340'}, {'id': 104, 'name': 'Middleware for Role Enforcement', 'description': 'As a system, I want to enforce role-based access to specific routes.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:23:40.346816'}, {'id': 122, 'name': 'Testing Role Enforcement', 'description': 'Write tests to ensure proper access control based on roles.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-01-16T19:23:58.185693'}, {'id': 121, 'name': 'Develop Role Enforcement Middleware', 'description': 'Implement middleware to check user roles for access control.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-01-16T19:23:58.187439'}, {'id': 105, 'name': 'Profile Management', 'description': 'As a user, I want to update my profile (username, email, password).', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.339830'}, {'id': 123, 'name': 'Backend API for Profile Management', 'description': 'Create PATCH /api/profile endpoint to update user details.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-01-16T19:24:19.678781'}, {'id': 125, 'name': 'Testing Profile Updates', 'description': 'Write tests for profile update functionality.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-01-16T19:24:19.680382'}]
2025-02-14 00:16:17,452 DEBUG: Task types: ['all', 'Epic', 'Subtask', 'User Story']
2025-02-14 00:16:17,452 DEBUG: Projects: [<Project Project Alpha (ID: 1)>, <Project Project Beta (ID: 2)>, <Project Project Gamma (ID: 3)>, <Project Project Theta (ID: 4)>, <Project Project Delta (ID: 5)>, <Project PMS - Feature Requests (ID: 7)>, <Project PMS - Backlog (ID: 6)>]
2025-02-14 00:16:17,453 DEBUG: Tasks response: [{'id': 290, 'name': 'issue: error when changing task type and', 'description': 'issue: error when changing task type and parent task before saving', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:00:03.417734', 'updated_at': '2025-02-10T09:15:09.284969'}, {'id': 298, 'name': 'example user story with parent epic 297', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 297, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:41:01.907455', 'updated_at': '2025-02-10T14:59:04.142570'}, {'id': 275, 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-10T08:38:37.622196'}, {'id': 276, 'name': 'add support for priority', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-10T08:28:47.447612'}, {'id': 264, 'name': 'close all / open all childtasks', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-02-10T08:47:14.915970'}, {'id': 285, 'name': 'add text truncation to project names in task list', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-10T09:45:47.029729'}, {'id': 257, 'name': 'Update Task API Integration', 'description': "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-02-05T22:55:49.566819', 'updated_at': '2025-02-05T22:18:17.807154'}, {'id': 294, 'name': 'issue: task table filters not working', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:19:21.022598', 'updated_at': '2025-02-12T10:59:15.483390'}, {'id': 267, 'name': 'improvements to toggles and nested tasks', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:29:12.464594', 'updated_at': '2025-02-10T08:47:24.581680'}, {'id': 283, 'name': 'fix update title', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:58.769700', 'updated_at': '2025-02-10T08:46:47.282087'}, {'id': 271, 'name': 'make sure dynamically added rows has the exact same styling and includes every element', 'description': 'Missing elements:\n- Open link\n- Default project\n- Project name should be inside a pill\n- Task type should be in a pill\n- Estimations should be 0, not N/A\n- Make sure font size is matching\n- status should have the dropdown inside a pill\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:21:07.108431', 'updated_at': '2025-02-10T08:38:47.340105'}, {'id': 273, 'name': 'disable parent task selector in epics', 'description': 'and add text, Epic can¬¥t have parent tasks', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:45:20.740910', 'updated_at': '2025-02-10T08:39:17.639890'}, {'id': 269, 'name': 'fix styling for sweetalert', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-02-08T15:54:56.717846', 'updated_at': '2025-02-10T08:39:32.172437'}, {'id': 286, 'name': 'add support for labels/tags', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:46:23.985620', 'updated_at': '2025-02-10T09:46:23.987564'}, {'id': 299, 'name': 'example sub task with parent user story 298', 'description': 'Test update 1\nTest update 2\nTest update 3', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 298, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:42:38.905700', 'updated_at': '2025-02-10T23:23:08.671464'}, {'id': 266, 'name': 'highlight the nested tasks', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-02-10T08:47:04.382929'}, {'id': 279, 'name': 'github integration', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:38.238202', 'updated_at': '2025-02-10T08:39:24.168451'}, {'id': 289, 'name': 'issue: parent task is lost when updating task', 'description': '- Summary of the problem and solution\n    \n    **Problem: Parent Task Dropdown Was Not Being Set on Modal Open**\n    \n    The issue was that when opening a task modal, the **parent task dropdown** was not pre-populated with the correct parent task. However, interacting with the dropdown (e.g., clicking on it) would suddenly trigger it to be set correctly. This meant that the dropdown initialization was likely delayed or missing a step in the modal lifecycle.\n    \n    **Debugging Steps and Observations**\n    \n    1. **Task Details Were Fetched Correctly** ‚úÖ\n    - The task details, including parent_id, were being fetched from the API successfully.\n    1. **Parent Dropdown Initialization Issues** ‚ùå\n    - The initializeParentDropdown() function was being called, but the dropdown was sometimes **not fully ready** when we tried to set the selected parent task.\n    1. **Clicking the Dropdown Triggered the Parent to Be Set** ü§î\n    - This hinted that the dropdown was not fully ready when setParentDropdown(task.parent_id) was initially called.\n    \n    **Final Solution**\n    \n    1. **Ensuring Dropdown Readiness Before Setting the Parent Task**\n    - We added explicit **delays and checks** to confirm that the dropdown was fully initialized before attempting to set the parent task.\n    \n    Specifically, we:\n    \n    - **Waited for the dropdown to appear in the DOM** using observeParentDropdown().\n    - **Initialized the dropdown** with initializeParentDropdown().\n    - **Waited explicitly for the dropdown to be fully ready** using waitForParentDropdownReady().\n    - **Added a final delay of 200ms** before calling setParentDropdown() to ensure stability.\n    1. **Modifying openTaskModal to Handle Parent Dropdown Setup**\n    - We ensured that initializeParentDropdown() was called **after fetching task details** and before setting the parent task.\n    1. **Confirming the Fix** üéØ\n    - After these fixes, the parent dropdown was **immediately populated** upon opening the modal, without requiring user interaction.\n    \n    **Key Learnings**\n    \n    ‚úÖ **Dropdowns in modals need careful timing** ‚Äì They might not be ready when you expect them to be.\n    \n    ‚úÖ **Waiting for DOM updates is crucial** ‚Äì Observing the element ensures it actually exists before interacting with it.\n    \n    ‚úÖ **Explicit delays can prevent race conditions** ‚Äì A small delay can sometimes resolve timing issues in UI interactions.\n    \n    **Final Result**\n    \n    ‚úÖ The modal now **correctly loads and pre-selects the parent task** without extra clicks! üéâüöÄ', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T08:56:25.273984', 'updated_at': '2025-02-11T15:40:03.610698'}, {'id': 278, 'name': 'search feature for tasks list', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:03.369833', 'updated_at': '2025-02-10T08:39:04.005957'}, {'id': 281, 'name': 'add high level plan', 'description': 'Add some sort of high level plan that aims to keep PM/PO¬¥s on track and not get lost into the details of an overwhelminly large backlog', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:27:01.218606', 'updated_at': '2025-02-10T08:38:54.754760'}, {'id': 287, 'name': 'when moving a parent item to another project make sure the subtasks are moved as well', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:48:31.986870', 'updated_at': '2025-02-10T09:48:31.988859'}, {'id': 272, 'name': 'implement a markdown text editor like notion', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-02-10T08:28:39.669255'}, {'id': 293, 'name': 'click on title should copy the task title and id to clipboard', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:16:33.508209', 'updated_at': '2025-02-10T10:16:33.510414'}, {'id': 277, 'name': 'custom task workflow statuses', 'description': 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- Custom status\n-- Custom status\n- In Progress\n-- Custom status\n-- Custom status\n-- Custom status\n- Completed\n-- Custom status\n-- Custom status\n\n2. How can we track a task through different stages and save the sequence of events or stages the task has gone through?\nI¬¥m thinking it could be good for mapping out processes, identifying bottlenecks and provide valuable insights while improving and streamlining workflows.\n- Stages\n- Contacts taken\n- Respons time \n- Time to action after responses\n- Dependencies\n\nNeed to be able to record every action related to this action.\nCommunication integrations\n- Slack\n- Email\n- Text messages\n- Phonecalls\n- Calendar events, meetings\n- Zoom, Google meet, Teams etc..\n\n\n2. Set custom statuses per project (can use tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:16:03.352588', 'updated_at': '2025-02-10T08:38:28.123328'}, {'id': 274, 'name': 'add support for goals, initiatives, okr¬¥s', 'description': 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:46:27.204912', 'updated_at': '2025-02-10T08:28:17.663922'}, {'id': 280, 'name': 'logging (task and project history)', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:37:44.435112', 'updated_at': '2025-02-10T08:28:28.947805'}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:17.786154', 'updated_at': '2025-02-10T09:41:17.787861'}, {'id': 296, 'name': 'issue: contributor is lost after updating task', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:26:43.881947', 'updated_at': '2025-02-11T15:37:31.011120'}, {'id': 288, 'name': 'when trying to move subtask to another project, make sure a warning is displayed', 'description': 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be lost"\nOR\n\nIs it possible, and is it desireable to keep parent child relationships across projects?\nSo that a parent can be in one project but the child tasks can be in different projects?\n\nLets say \nParent epic is \n"Internationalisation"\nChild user stories are\n- Timezones\n- Language\n- Currency\n- Day, Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:54:36.297869', 'updated_at': '2025-02-10T08:54:51.840686'}, {'id': 284, 'name': 'add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-10T09:42:27.720908'}, {'id': 295, 'name': 'issue: drag and drop errors', 'description': '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:22:54.461413', 'updated_at': '2025-02-10T10:22:54.462542'}, {'id': 297, 'name': 'example parent epic', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:39:51.620509', 'updated_at': '2025-02-10T10:39:51.622712'}, {'id': 292, 'name': 'issue: assigning contributor does not work', 'description': '### **Summary of problem and solution**\n\nThe issue was that assigning a contributor to a task via the /tasks/<task_id>/assign_contributor API endpoint resulted in a **400 Bad Request** error. Upon investigation, the following problems were identified:\n\n1. **Missing CSRF Token:**\n- The request failed due to a missing CSRF token, as shown in the error message: *‚ÄúBad Request: The CSRF token is missing.‚Äù*\n- The frontend was not correctly including the CSRF token in the request headers.\n1. **JavaScript Error (Undefined CSRF Token Variable):**\n- The error *‚ÄúReferenceError: csrfToken is not defined‚Äù* indicated that the CSRF token was not being retrieved properly in the JavaScript code.\n1. **Incorrect Fetch Request Headers:**\n- The fetch request did not include the CSRF token under the correct key (X-CSRFToken).\n- The script attempted to send the request without properly extracting the CSRF token from the meta tag.\n\n### **Solution**\n\n1. **Include the CSRF Token in the JavaScript Code**\n\nThe CSRF token was retrieved from the meta tag and used in the request headers:\n\n```jsx\n// Retrieve CSRF token from meta tag\nconst csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\');\n```\n\nThis ensures that the CSRF token is correctly fetched and available in the JavaScript scope.\n\n1. **Modify the Fetch Request to Include CSRF Token**\n\nThe request to assign a contributor was updated to include the token:\n\n```jsx\nconst response = await fetch(`/tasks/${taskId}/assign_contributor`, {\n    method: "POST",\n    headers: { \n        "Content-Type": "application/json",\n        "X-CSRFToken": csrfToken  // Include CSRF token\n    },\n    body: JSON.stringify({ contributor_id: parseInt(contributorId, 10) }),\n});\n```\n\n- **Ensures the CSRF token is sent in the request headers** so that Flask-WTF does not reject the request.\n1. **Verify and Debug Network Requests**\n- The updated request headers were verified using **Chrome DevTools > Network tab** to ensure the X-CSRFToken was included.\n- The error messages disappeared, and the contributor assignment request **succeeded with a 200 OK response**.\n\n---\n\n### **Final Outcome**\n\nüöÄ The issue was resolved, and contributors can now be assigned successfully to tasks without triggering a CSRF validation error.\n\n### **Key Learnings from This Session**\n\nThis debugging session covered several important aspects of **web development with Flask and JavaScript**, particularly related to **API requests, CSRF protection, debugging tools, and database interactions**. Here are the key takeaways:\n\n---\n\n### **1. CSRF Protection in API Requests**\n\n- **Issue:** The initial error was due to **a missing CSRF token** when making a `POST` request.\n- **Fix:** The solution was to **retrieve the CSRF token from a meta tag** in the HTML and include it in the request headers.\n- **Key Learning:** Flask-WTF requires CSRF tokens for form and API submissions to **prevent cross-site request forgery (CSRF) attacks**.‚úÖ Always ensure that API requests include a valid CSRF token.\n\n---\n\n### **2. Debugging JavaScript Fetch Requests**\n\n- **Issue:** The JavaScript code was making a fetch request, but the variable `csrfToken` was not properly defined, causing a `ReferenceError`.\n- **Fix:** Declaring `csrfToken` at the beginning of the script:\n    \n    ```jsx\n    const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\');\n    ```\n    \n- **Key Learning:**‚úÖ JavaScript variables must be defined before they are used.‚úÖ Use browser **developer tools (DevTools) Network tab** to inspect headers, payloads, and responses when debugging API requests.\n\n---\n\n### **3. Structuring Flask Routes for Task Management**\n\n- **Issue:** The `assign_contributor` route was failing due to incorrect request payload validation.\n- **Fix:** Improved the route‚Äôs error handling and logging:\n    \n    ```python\n    @bp.route(\'/<int:task_id>/assign_contributor\', methods=[\'POST\'])\n    def assign_contributor(task_id):\n        try:\n            data = request.get_json()\n            contributor_id = int(data.get(\'contributor_id\', 0))\n            if not contributor_id:\n                return jsonify({\'error\': \'Valid Contributor ID is required\'}), 400\n    ```\n    \n- **Key Learning:**‚úÖ Always validate incoming data in Flask routes to prevent type errors.‚úÖ Use `request.get_json()` properly and handle missing or incorrect data gracefully.\n\n---\n\n### **4. Utilizing Browser DevTools for Debugging**\n\n- **Issue:** The fetch request was failing with a `400 Bad Request`, and the browser console showed `ReferenceError: csrfToken is not defined`.\n- **Fix:**\n    - Used **Network tab** to inspect the request payload and headers.\n    - Used **Console tab** to catch JavaScript errors early.\n- **Key Learning:**‚úÖ DevTools is a **critical** tool for diagnosing network request issues.‚úÖ Always **check console errors** before assuming it\'s a backend issue.\n\n---\n\n### **5. Database Queries and ORM Debugging**\n\n- **Issue:** Tasks were not being updated correctly, possibly due to missing commit statements.\n- **Fix:** Ensured that:was executed properly.\n    \n    ```python\n    task.contributor_id = contributor_id\n    db.session.commit()\n    ```\n    \n- **Key Learning:**‚úÖ Always call `db.session.commit()` after making changes in SQLAlchemy.‚úÖ Rollback transactions if an error occurs to avoid database inconsistency.\n\n---\n\n### **6. Handling Asynchronous JavaScript Logic**\n\n- **Issue:** The `assignContributor` function was executing before the page was fully loaded.\n- **Fix:** Wrapped it inside a function that ensures elements exist:\n    \n    ```\n    window.setupContributorAssignment = function () {\n        const assignButton = $("#assign-contributor-btn");\n        if (!assignButton.length) {\n            setTimeout(setupContributorAssignment, 500); // Retry in 500ms\n            return;\n        }\n    ```\n    \n- **Key Learning:**‚úÖ Use `setTimeout` to **retry event binding** when elements are dynamically loaded.‚úÖ Always **check if elements exist before attaching event handlers**.\n\n---\n\n### **7. Best Practices for Flask Logging & Error Handling**\n\n- **Issue:** Lack of clear logging when API calls failed.\n- **Fix:** Added better logging to track failures:\n    \n    ```python\n    logger.info(f"Assigning contributor to task ID {task_id}")\n    try:\n        # Process request...\n    except Exception as e:\n        logger.error(f"Error assigning contributor: {e}")\n    ```\n    \n- **Key Learning:**‚úÖ Log **every major step** in API processing to simplify debugging.‚úÖ Differentiate between `logger.info()`, `logger.warning()`, and `logger.error()` based on severity.\n\n---\n\n### **Final Takeaways**\n\nüöÄ **Understanding CSRF protection** and **properly structuring API requests** is crucial for secure web applications.\n\nüîç **Browser DevTools is invaluable** for diagnosing frontend issues, especially in JavaScript.\n\nüêç **Flask requires proper request validation, database transactions, and logging** to maintain stability.\n\n‚ö° **Asynchronous JavaScript must handle dynamic elements carefully** to avoid runtime errors.\n\nThis session reinforced best practices in **frontend-backend integration, debugging, and security**, making it a great learning experience! üöÄüî•', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:11:12.273779', 'updated_at': '2025-02-12T10:59:41.585250'}, {'id': 265, 'name': 'smooth transition for toggles', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-02-10T08:46:55.831743'}, {'id': 270, 'name': 'the newest task', 'description': '', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:07:34.368035', 'updated_at': '2025-02-10T01:07:34.372478'}, {'id': 291, 'name': 'add dropdowns in task list for changing: project, assigned to, estimate and task type (labels/tags)', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-02-10T10:09:52.997455'}, {'id': 136, 'name': 'Page scroll should stay in position when reloading', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-16T18:21:50.187247', 'updated_at': '2025-01-16T19:22:36.214901'}, {'id': 130, 'name': 'Implement the Map of Task Relationships solution for drag-and-drop', 'description': 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.093022', 'updated_at': '2025-01-16T19:22:36.216705'}, {'id': 133, 'name': 'Step 4: Enhance Logging in models.py', 'description': 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nupdating the Task model in the following ways:\n\n1.\tLog Changes to parent_id:\n\t‚Ä¢\tLog changes to parent_id during updates, including old and new values.\n\t2.\tValidate Hierarchy with Logging:\n\t‚Ä¢\tLog detailed messages when validating hierarchy changes, especially for circular dependency checks.\n\nHere‚Äôs how the models.py can be updated:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy import func, cast, CheckConstraint\nfrom sqlalchemy.orm import validates\nfrom app.extensions.db import db\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\nclass Task(db.Model):\n    __tablename__ = "task"\n    \n    # Other columns...\n\n    parent_id = db.Column(\n        db.Integer, db.ForeignKey("task.id"), index=True, nullable=True\n    )\n\n    # Relationships\n    parent = db.relationship(\n        "Task", remote_side=[id], back_populates="children", lazy="select"\n    )\n    children = db.relationship(\n        "Task", back_populates="parent", lazy="select"\n    )\n\n    \n\n\n    @staticmethod\n    def _validate_no_circular_references(new_parent_id):\n        """\n        Validates that there are no circular references in the task hierarchy.\n\n        Args:\n            new_parent_id (int): The new parent ID to validate.\n\n        Raises:\n            ValueError: If a circular reference is detected.\n        """\n        visited = set()\n        current_parent_id = new_parent_id\n\n        logger.info(f"Validating circular references for parent ID: {new_parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error(\n                    f"Circular reference detected: Parent ID {current_parent_id} already visited."\n                )\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            # Fetch the next parent_id in the hierarchy\n            parent = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not parent:\n                break  # Exit if no parent is found\n            current_parent_id = parent.parent_id\n\n        logger.info("No circular reference detected.")\n\n    @validates(\'parent_id\', \'task_type\')\n    def validate_task_changes(self, key, value):\n        """\n        Validates changes to \'parent_id\' and \'task_type\'.\n        Ensures hierarchy validity and checks for circular references.\n        """\n        logger.debug(f"Validating {key} change for Task {self.id}: {value}")\n\n        if key == \'parent_id\':\n            # Log changes to parent_id\n            if self.id and value != self.parent_id:\n                logger.info(f"Task {self.id}: Updating \'parent_id\' from {self.parent_id} to {value}")\n\n            # Prevent a task from being its own parent\n            if value and value == self.id:\n                logger.error("A task cannot be its own parent.")\n                raise ValueError("A task cannot be its own parent.")\n\n            # Check for circular references\n            if value:\n                Task.check_circular_reference(self.id, value)\n\n        elif key == \'task_type\':\n            # Log changes to task_type\n            if self.id and value != self.task_type:\n                logger.info(f"Task {self.id}: Updating \'task_type\' from {self.task_type} to {value}")\n\n        # Check hierarchy rules without triggering further validation\n        if key in [\'parent_id\', \'task_type\']:\n            self._validate_hierarchy_change(key, value)\n\n        logger.info(f"Validation passed for {key}: {value}")\n        return value\n\n    def _validate_hierarchy_change(self, key, value):\n        """\n        Validates hierarchy rules for the task based on `task_type` and `parent_id`.\n        """\n        if key == \'parent_id\' and value:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=value).first()\n            if not parent_task:\n                raise ValueError("Parent task does not exist.")\n\n            logger.debug(f"Validating hierarchy: Task {self.id}, Parent Type: {parent_task.task_type}")\n            if self.task_type == "User Story" and parent_task.task_type != "Epic":\n                raise ValueError("User Stories must have an Epic as a parent.")\n            if self.task_type == "Subtask" and parent_task.task_type != "User Story":\n                raise ValueError("Subtasks must have a User Story as a parent.")\n\n        elif key == \'task_type\' and self.parent_id:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=self.parent_id).first()\n            if parent_task:\n                logger.debug(f"Validating hierarchy: Task Type: {value}, Parent Type: {parent_task.task_type}")\n                if value == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError("User Stories must have an Epic as a parent.")\n                if value == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError("Subtasks must have a User Story as a parent.")\n\n        logger.info(f"Hierarchy validation passed for Task {self.id if self.id else \'New Task\'}.")\n\n    @staticmethod\n    def check_circular_reference(task_id, parent_id):\n        """\n        Iteratively checks for circular references in the task hierarchy.\n        Prevents stack overflow on deep hierarchies.\n        """\n        visited = set()\n        current_parent_id = parent_id\n\n        logger.info(f"Checking circular reference for Task {task_id} with Parent ID: {parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error("Circular reference detected!")\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            if current_parent_id == task_id:\n                logger.error("A task cannot be its own ancestor.")\n                raise ValueError("A task cannot be its own ancestor.")\n\n            # Fetch the next parent_id in the hierarchy\n            task = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not task:\n                break\n            current_parent_id = task.parent_id\n\n        logger.info("Circular reference check passed.")\n```\nKey Enhancements:\n\t1.\tlog_and_validate_parent_id_change:\n\t‚Ä¢\tLogs the old and new parent_id whenever it changes.\n\t‚Ä¢\tEnsures no circular references are introduced.\n\t2.\t_validate_no_circular_references:\n\t‚Ä¢\tValidates the parent_id field to prevent circular dependencies.\n\t‚Ä¢\tLogs progress and raises detailed errors if violations occur.\n\t3.\tlog_and_validate_task_type_change:\n\t‚Ä¢\tLogs changes to task_type with the old and new values.\n\t‚Ä¢\tRevalidates hierarchy rules when task_type changes.\n\t4.\tDetailed Logging for Circular Reference Validation:\n\t‚Ä¢\t_validate_no_circular_references and check_circular_reference methods log every step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t‚Ä¢\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:44:08.340041', 'updated_at': '2025-01-16T19:22:36.219710'}, {'id': 132, 'name': 'Step 1: Update tasks_table_interactions.js', 'description': '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the map for efficient parent-child relationship lookups instead of DOM traversal.\n\n```\nexport const TaskManager = {\n    init: function (csrfToken) {\n        this.csrfToken = csrfToken;\n        this.initTaskParentMap(); // Initialize the map\n        this.initDragAndDrop(); // Initialize drag-and-drop functionality\n    },\n\n    // Initialize a global map for task relationships\n    taskParentMap: new Map(),\n\n    // Build the taskParentMap from the DOM\n    initTaskParentMap: function () {\n        console.log("Initializing Task Parent Map...");\n        const rows = document.querySelectorAll("tr[data-task-id]");\n\n        rows.forEach((row) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = parseInt(row.dataset.parentId, 10) || null;\n            this.taskParentMap.set(taskId, parentId);\n        });\n\n        console.log("Task Parent Map initialized:", Array.from(this.taskParentMap.entries()));\n    },\n\n    // Update the map dynamically after drag-and-drop\n    updateTaskParentMap: function (taskId, parentId) {\n        console.log(`Updating Task Parent Map: Task ${taskId} -> Parent ${parentId}`);\n        this.taskParentMap.set(taskId, parentId);\n    },\n\n    initDragAndDrop: function () {\n        if (window.isDragAndDropInitialized) {\n            console.log("Drag-and-drop is already initialized.");\n            return;\n        }\n\n        console.log("Initializing drag-and-drop within TaskManager...");\n\n        const tableBody = document.querySelector("tbody");\n        if (!tableBody) {\n            console.warn("Task table body not found for drag-and-drop initialization");\n            return;\n        }\n\n        // Initialize Sortable.js for drag-and-drop functionality\n        Sortable.create(tableBody, {\n            handle: ".task-row", // Only draggable via `.task-row` elements\n            animation: 150, // Smooth animation\n            filter: ".task-open-link", // Prevent dragging on task links\n            preventOnFilter: true, // Prevent drag if filtered element is clicked\n            onEnd: async (event) => {\n                try {\n                    console.log("Drag-and-drop operation started...");\n                    const rows = Array.from(event.from.querySelectorAll(".task-row"));\n                    const reorderedTasks = [];\n\n                    rows.forEach((row, index) => {\n                        const taskId = parseInt(row.dataset.taskId, 10);\n                        let parentId = null;\n\n                        // Get the parent ID from the map or fallback to the dataset\n                        if (row.classList.contains("subtask-row")) {\n                            const parentRow = row.previousElementSibling;\n                            parentId = parentRow\n                                ? parseInt(parentRow.dataset.taskId, 10)\n                                : this.taskParentMap.get(taskId) || null;\n                        }\n\n                        // Update the taskParentMap dynamically\n                        this.updateTaskParentMap(taskId, parentId);\n\n                        reorderedTasks.push({\n                            id: taskId,\n                            sort_order: index + 1,\n                            parent_id: parentId,\n                        });\n                    });\n\n                    console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n                    console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n                    // Send the payload to the backend\n                    const response = await fetch("/tasks/reorder_subtasks", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                            "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n                        },\n                        body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n                    });\n\n                    if (!response.ok) {\n                        const errorData = await response.json();\n                        console.error("Error reordering tasks:", errorData);\n                        alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n                        return;\n                    }\n\n                    const data = await response.json();\n                    console.log("Task reordering successful:", data);\n\n                } catch (error) {\n                    console.error("Error during drag-and-drop operation:", error);\n                    alert("An unexpected error occurred while reordering tasks.");\n                }\n            },\n        });\n\n        window.isDragAndDropInitialized = true;\n        console.log("Drag-and-drop initialized successfully.");\n    },\n};\n```\n\nKey Updates:\n\t1.\tPrecomputed Map (taskParentMap):\n\t‚Ä¢\tThe initTaskParentMap function initializes the map by iterating over DOM elements and mapping each task‚Äôs ID to its parent ID.\n\t‚Ä¢\tThe updateTaskParentMap dynamically updates the map when tasks are reordered.\n\t2.\tEfficient Parent Lookup:\n\t‚Ä¢\tThe parentId is derived from the precomputed map rather than DOM traversal.\n\t3.\tBackend Payload:\n\t‚Ä¢\tA structured payload (reorderedTasks) is sent to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t‚Ä¢\tCSRF protection is ensured by passing the token to the request headers.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:44:08.338301', 'updated_at': '2025-02-06T21:59:17.417466'}, {'id': 134, 'name': 'Step 2: Update the Backend in routes.py', 'description': 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\nPlan for step 2:\n\t1.\tVerify the payload structure:\n\t‚Ä¢\tEnsure that the payload includes all necessary fields (id, sort_order, parent_id) for each task.\n\t‚Ä¢\tValidate that the parent-child relationships in the precomputed map (taskParentMap) are reflected correctly in the payload.\n\t2.\tSubmit the payload to the backend:\n\t‚Ä¢\tEnhance the fetch request in the onEnd function of initDragAndDrop to log detailed submission data.\n\t‚Ä¢\tConfirm the payload integrity in the browser console before submission.\n\t3.\tUpdate backend logging:\n\t‚Ä¢\tAdd logging to /reorder_subtasks in routes.py to confirm receipt of the correct payload and process parent-child updates.\n\t‚Ä¢\tLog before and after database updates for better debugging.\n\n-----\nUpdated tasks_table_interactions.js\n\nReplace this section:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    let parentId = null;\n```\nWith:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    const parentId = this.taskParentMap.get(taskId) || null;\n```\nThe this.taskParentMap provides a precomputed and dynamic mapping of taskId to parentId. By using this map, we avoid relying on DOM traversal logic (row.closest or row.previousElementSibling) during drag-and-drop operations, which can sometimes be unreliable or cumbersome.\n\nFull Revised onEnd section:\n```\nonEnd: async (event) => {\n    try {\n        console.log("Drag-and-drop operation started...");\n        const rows = Array.from(event.from.querySelectorAll(".task-row"));\n        const reorderedTasks = [];\n\n        rows.forEach((row, index) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = this.taskParentMap.get(taskId) || null;\n\n            // Update the taskParentMap dynamically\n            this.updateTaskParentMap(taskId, parentId);\n\n            reorderedTasks.push({\n                id: taskId,\n                sort_order: index + 1,\n                parent_id: parentId,\n            });\n        });\n\n        console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n        console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n        // Send the payload to the backend\n        const response = await fetch("/tasks/reorder_subtasks", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n            },\n            body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error("Error reordering tasks:", errorData);\n            alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n            return;\n        }\n\n        const data = await response.json();\n        console.log("Task reordering successful:", data);\n\n    } catch (error) {\n        console.error("Error during drag-and-drop operation:", error);\n        alert("An unexpected error occurred while reordering tasks.");\n    }\n}\n```\n---------------------------------\nEnsure updates include:\n\t‚Ä¢\tBetter Logging: Adding logs for key events such as database changes and validation results.\n\t‚Ä¢\tInput Validation: Ensure all required fields (id, sort_order, parent_id) exist in the payload.\n\t‚Ä¢\tPost-Commit Validation: Confirm database updates after the commit.\n\t‚Ä¢\tImproved Error Handling: Include specific error messages and consistent rollback mechanisms.\n\nBelow is the revised reorder_subtasks route with descriptive comments for each section:\n```\n@bp.route("/reorder_subtasks", methods=["POST"])\ndef reorder_subtasks():\n    """\n    Reorder subtasks globally or reassign them to a different parent.\n\n    Steps:\n    - Parse and validate input from the frontend.\n    - Update parent-child relationships and sort order in the database.\n    - Commit changes and return a success response.\n    - Handle errors gracefully and provide detailed logs for debugging.\n    """\n    logger.info("Entering reorder_subtasks route...")\n    logger.info(f"Received payload for reordering tasks: {request.json}")\n\n    try:\n        # Step 1: Parse input\n        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered\n        ordered_tasks = request.json.get("ordered_tasks", [])\n\n        logger.debug(f"Parsed parent_id: {parent_id}")\n        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")\n\n        # Step 2: Validate input\n        if not isinstance(ordered_tasks, list) or not all(\n            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task\n            for task in ordered_tasks\n        ):\n            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")\n            return jsonify({\n                "error": "Invalid input format for \'ordered_tasks\'. Each task must include \'id\', \'sort_order\', and \'parent_id\'."\n            }), 400\n\n        # Step 3: Validate parent task (if applicable)\n        if parent_id is not None:\n            parent_task = Task.query.get(parent_id)\n            if not parent_task:\n                logger.error(f"Parent task with ID {parent_id} not found.")\n                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400\n\n        logger.info("Input validation passed. Proceeding with task updates...")\n\n        # Step 4: Process updates for each subtask\n        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation\n\n        for task_data in ordered_tasks:\n            subtask_id = task_data["id"]\n            sort_order = task_data["sort_order"]\n            new_parent_id = task_data["parent_id"]\n\n            # Fetch the subtask from the database\n            subtask = Task.query.get(subtask_id)\n            if not subtask:\n                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")\n                continue\n\n            # Log and update parent_id if it changes\n            if new_parent_id is not None and new_parent_id != subtask.parent_id:\n                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")\n                subtask.parent_id = new_parent_id\n\n            # Update sort order\n            subtask.sort_order = sort_order\n            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")\n\n            # Add to the list of updated subtasks for validation\n            updated_subtasks.append(subtask)\n\n        # Step 5: Commit changes to the database\n        try:\n            db.session.commit()\n            logger.info(f"Subtasks reordered successfully: {[task[\'id\'] for task in ordered_tasks]}")\n        except Exception as e:\n            logger.error(f"Error committing changes to the database: {str(e)}")\n            db.session.rollback()\n            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500\n\n        # Step 6: Post-commit validation\n        for subtask in updated_subtasks:\n            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")\n            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")\n\n        # Step 7: Return success response\n        return jsonify({\n            "success": True,\n            "message": "Subtasks reordered successfully.",\n            "updated_subtasks": [subtask.id for subtask in updated_subtasks]\n        }), 200\n\n    except Exception as e:\n        # Step 8: Handle unexpected errors\n        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)\n        db.session.rollback()\n        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500\n```\nKey Changes and Descriptive Comments\n\t1.\tInput Parsing:\n\t‚Ä¢\tExtracts parent_id and ordered_tasks from the request payload.\n\t‚Ä¢\tLogs the parsed values for debugging.\n\t2.\tInput Validation:\n\t‚Ä¢\tEnsures ordered_tasks is a list of dictionaries with the required keys.\n\t‚Ä¢\tValidates parent_id if provided, ensuring the parent task exists in the database.\n\t3.\tUpdate Processing:\n\t‚Ä¢\tIterates through ordered_tasks, updating each task‚Äôs parent_id and sort_order.\n\t‚Ä¢\tLogs changes for each task.\n\t4.\tDatabase Commit:\n\t‚Ä¢\tCommits all updates in a single transaction.\n\t‚Ä¢\tLogs success or rolls back changes in case of an error.\n\t5.\tPost-Commit Validation:\n\t‚Ä¢\tVerifies that the parent_id and sort_order changes were successfully saved to the database.\n\t6.\tError Handling:\n\t‚Ä¢\tCaptures and logs exceptions during processing or committing.\n\t‚Ä¢\tProvides meaningful error messages to the frontend.\n\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:46:29.348853', 'updated_at': '2025-02-06T21:59:21.617065'}, {'id': 131, 'name': 'Step 5: Update utils.py', 'description': 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nChanges to Make:\n\t1.\tEnhance Task Filtering:\n\t‚Ä¢\tEnsure the filters handle parent-child relationships explicitly.\n\t‚Ä¢\tAdd options to include or exclude subtasks in queries.\n\t2.\tUtility Function for Debugging Parent-Child Relationships:\n\t‚Ä¢\tProvide a function to generate a map or list of parent-child relationships for debugging purposes.\n\t3.\tValidation Functions:\n\t‚Ä¢\tAdd a utility function to validate parent-child relationships and ensure no circular dependencies.\n\nUpdated utils.py Code:\n```\nimport logging\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import joinedload\nfrom app.extensions.db import db\nfrom app.tasks.models import Task\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\n\nclass TaskService:\n    @staticmethod\n    def filter_tasks(filters=None, include_subtasks=True, page=None, per_page=None):\n        """\n        Dynamically filters tasks with an option to include or exclude subtasks.\n\n        Args:\n            filters (dict): Filtering criteria.\n            include_subtasks (bool): Whether to include subtasks in the query.\n            page (int, optional): Page number for pagination.\n            per_page (int, optional): Items per page for pagination.\n\n        Returns:\n            Query or Pagination: A SQLAlchemy query object or paginated results.\n        """\n        query = Task.query.options(\n            db.joinedload(Task.project).joinedload(Project.contributors),\n            db.joinedload(Task.contributor),\n            db.joinedload(Task.children),\n        ).order_by(Task.sort_order)\n\n        if filters:\n            logger.debug(f"Applying filters: {filters}")\n\n            # Apply standard filters\n            if "is_archived" in filters:\n                query = query.filter(Task.is_archived == filters["is_archived"])\n            if "project_id" in filters:\n                query = query.filter(Task.project_id == filters["project_id"])\n            if "task_type" in filters:\n                if isinstance(filters["task_type"], list):\n                    query = query.filter(Task.task_type.in_(filters["task_type"]))\n                else:\n                    query = query.filter(Task.task_type == filters["task_type"])\n            if "completion_status" in filters:\n                completion_map = {"completed": True, "in_progress": False}\n                if filters["completion_status"] in completion_map:\n                    query = query.filter(Task.completed == completion_map[filters["completion_status"]])\n\n            # Optionally exclude subtasks\n            if not include_subtasks:\n                query = query.filter(Task.task_type != "Subtask")\n\n        logger.debug(f"Generated query: {query}")\n\n        # Pagination\n        if page and per_page:\n            return query.paginate(page=page, per_page=per_page, error_out=False)\n        return query\n\n    @staticmethod\n    def debug_parent_child_relationships(project_id=None):\n        """\n        Generates a debug map of parent-child relationships for all tasks.\n\n        Args:\n            project_id (int, optional): Restrict to tasks from a specific project.\n\n        Returns:\n            dict: A dictionary mapping parent IDs to their child task IDs.\n        """\n        query = Task.query\n        if project_id:\n            query = query.filter(Task.project_id == project_id)\n\n        tasks = query.options(\n            db.load_only(Task.id, Task.parent_id)\n        ).all()\n\n        relationship_map = {}\n        for task in tasks:\n            if task.parent_id not in relationship_map:\n                relationship_map[task.parent_id] = []\n            relationship_map[task.parent_id].append(task.id)\n\n        logger.debug(f"Parent-Child Relationship Map: {relationship_map}")\n        return relationship_map\n\n    @staticmethod\n    def validate_parent_child_relationships():\n        """\n        Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.\n\n        Raises:\n            ValueError: If invalid relationships are detected.\n        """\n        tasks = Task.query.options(db.joinedload(Task.parent)).all()\n\n        for task in tasks:\n            if task.parent_id:\n                parent_task = task.parent\n                if not parent_task:\n                    raise ValueError(f"Task {task.id} has an invalid parent ID {task.parent_id}.")\n\n                # Validate hierarchy rules\n                if task.task_type == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError(f"User Story {task.id} must have an Epic as its parent.")\n                if task.task_type == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError(f"Subtask {task.id} must have a User Story as its parent.")\n\n        logger.info("All parent-child relationships are valid.")\n\n    @staticmethod\n    def get_all_task_ids_with_parents():\n        """\n        Returns a flat list of tasks with their parent IDs for debugging.\n\n        Returns:\n            list: A list of tuples (task_id, parent_id).\n        """\n        tasks = Task.query.with_entities(Task.id, Task.parent_id).all()\n        logger.debug(f"Task IDs with Parent IDs: {tasks}")\n        return tasks\n```\n\n\nExplanation of Changes:\n\t1.\tfilter_tasks Enhancements:\n\t‚Ä¢\tAdded include_subtasks parameter to optionally exclude subtasks from the query.\n\t2.\tdebug_parent_child_relationships:\n\t‚Ä¢\tCreates a parent-child relationship map for debugging purposes.\n\t3.\tvalidate_parent_child_relationships:\n\t‚Ä¢\tIterates through all tasks to validate parent-child hierarchy and ensures no invalid relationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t‚Ä¢\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.091824', 'updated_at': '2025-01-16T19:22:36.236691'}, {'id': 135, 'name': 'Step 3: Update list.html', 'description': 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already includes everything needed. No required changes.\n\nHere¬¥s the relevant section of list.html:\n\n```\n<tr id="task-{{ task.id }}"\n                class="task-row {% if task.task_type == \'Subtask\' %}subtask-row{% elif task.task_type == \'User Story\' %}user-story-row{% elif task.task_type == \'Epic\' %}epic-row{% endif %}"\n                style="background-color: \n                {% if task.task_type == \'Subtask\' %}\n                    rgba(200, 230, 255, 0.5); /* Light blue for Subtask */\n                {% elif task.task_type == \'User Story\' %}\n                    rgba(255, 255, 200, 0.5); /* Light yellow for User Story */\n                {% elif task.task_type == \'Epic\' %}\n                    rgba(255, 200, 200, 0.5); /* Light red for Epic */\n                {% else %}\n                    rgba(240, 240, 240, 1); /* Default light gray */\n                {% endif %};"\n                data-task-id="{{ task.id }}"\n                data-parent-id="{{ task.parent_id or \'\' }}"\n                data-level="{{ depth }}">\n                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>\n                <td>\n                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}\n                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}" aria-label="Toggle details for task {{ task.name }}">\n                        <i class="bi bi-chevron-right"></i>\n                    </button>\n                    {% endif %}\n                </td>\n                <td class="fw-medium fs-6 \n                {% if task.task_type == \'Epic\' %}\n                    epic-cell\n                {% elif task.task_type == \'User Story\' %}\n                    user-story-cell\n                {% elif task.task_type == \'Subtask\' %}\n                    subtask-cell\n                {% endif %}" \n                style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">\n                <span class="bi fs-6\n                {% if task.task_type == \'Epic\' %}\n                    bi-circle-fill\n                {% elif task.task_type == \'User Story\' %}\n                    bi-circle-half\n                {% elif task.task_type == \'Subtask\' %}\n                    bi-circle\n                {% endif %}">\n                </span>\n                {{ task.name }}\n                <small class="text-muted fw-light">\n                    (Parent-ID: {{ task.parent_id or \'None\' }})\n                </small>\n                <!-- Open Link -->\n                <a href="#" class="task-open-link" data-task-id="{{ task.id }}">\n                    <i class="bi bi-arrows-angle-expand" style="font-size: 0.8rem; color: white;"></i>\n                    Open\n                </a>\n            </td>\n                <td class="fw-light fs-6">\n                    <small class>\n                    LAC-{{ task.id }}\n                    </small>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light text-bg-secondary">\n                        {{ task.project if task.project else "Unknown Project" }}\n                    </span>\n                </td>\n                <td class="fs-6" data-contributor-column>{{ task.assigned_to if task.assigned_to else "Unassigned" }}</td>\n                <td class="fs-6">{{ task.story_points }}</td>\n                <td class="fs-6">\n                    <span class="badge rounded-pill fw-light text-bg-light">\n                        {{ task.task_type }}\n                    </span>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light {% if task.completed %}text-bg-success{% else %}text-bg-warning{% endif %}">\n                        {{ "Completed" if task.completed else "In Progress" }}\n                    </span>\n                </td>\n                <td>\n                    <!-- Delete Icon -->\n                    <button class="btn btn-dark btn-sm delete-task-btn" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .2rem; --bs-btn-font-size: .75rem;" data-task-id="{{ task.id }}" aria-label="Deletes task {{ task.id }}">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n            </tr>\n            {% for child in tasks if child.parent_id == task.id %}\n                {{ render_task(child, tasks, depth + 1) }}\n            {% endfor %}\n            {% endmacro %}\n            \n            <!-- Render top-level tasks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:46:29.349784', 'updated_at': '2025-01-16T19:22:36.238473'}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'description': 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitHub Login involves integrating OAuth 2.0, which both services support. The complexity depends on your app‚Äôs existing setup, frameworks, and experience with third-party authentication. Below is a breakdown:\n\nKey Steps for Implementing Google or GitHub Login\n\t1.\tSet Up OAuth Credentials:\n\t‚Ä¢\tRegister your application in the Google Cloud Console or GitHub Developer Settings.\n\t‚Ä¢\tObtain the client ID and client secret.\n\t2.\tInstall Required Libraries:\n\t‚Ä¢\tUse a library for OAuth (e.g., flask-oauthlib, python-social-auth, or authlib).\n\t‚Ä¢\tPopular frameworks like Flask and Django already have robust integrations for OAuth providers.\n\t3.\tBackend Configuration:\n\t‚Ä¢\tImplement an endpoint to handle the OAuth flow (/auth/login/google or /auth/login/github).\n\t‚Ä¢\tConfigure your app to send users to Google or GitHub‚Äôs authentication page.\n\t‚Ä¢\tHandle the OAuth callback to exchange the authorization code for an access token.\n\t‚Ä¢\tVerify the token and fetch user information (e.g., email, name).\n\t4.\tLink OAuth to User Registration:\n\t‚Ä¢\tOn successful login, create or retrieve a user in your database.\n\t‚Ä¢\tStore the user‚Äôs details like email, OAuth provider ID, and access token.\n\t5.\tFrontend Integration (if applicable):\n\t‚Ä¢\tAdd ‚ÄúLogin with Google‚Äù or ‚ÄúLogin with GitHub‚Äù buttons.\n\t‚Ä¢\tRedirect to your backend‚Äôs OAuth endpoint when clicked.', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T12:15:54.291625', 'updated_at': '2025-01-16T19:22:36.239866'}, {'id': 62, 'name': 'Add OAuth integration for Google Login', 'description': 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.241200'}, {'id': 64, 'name': 'Setup project credentials for Google API', 'description': 'Generate client ID and secret from Google API Console for your application.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-01-16T19:22:36.242497'}, {'id': 67, 'name': 'Test Google OAuth flow', 'description': 'Verify the OAuth flow using test accounts and check the token exchange.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.243780'}, {'id': 65, 'name': 'Implement backend endpoints for Google OAuth', 'description': 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-01-16T19:22:36.244932'}, {'id': 63, 'name': 'Add OAuth integration for GitHub Login', 'description': 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.246358'}, {'id': 68, 'name': 'Register application in GitHub Developer Console', 'description': 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.247746'}, {'id': 69, 'name': 'Handle callback from GitHub', 'description': 'Implement the callback endpoint to process the authorization code from GitHub.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.248912'}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'description': 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 18, 'status': 'Not Started', 'created_at': '2025-01-07T19:53:50.085064', 'updated_at': '2025-01-16T19:22:36.250169'}, {'id': 100, 'name': '1.1 User Registration', 'description': 'As a user, I want to register with a username, email, and password so that I can create an account and access the system.\n\n**Acceptance Criteria:**\n\n‚Ä¢\tUser can input valid username, email, and password.\n‚Ä¢\tUsername and email must be unique.\n‚Ä¢\tErrors are displayed for invalid inputs or duplicate accounts.\n‚Ä¢\tPasswords must meet complexity requirements and be securely stored.\n‚Ä¢\tSuccessful registration redirects users to a login page.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:59:09.044667', 'updated_at': '2025-01-16T19:22:36.251812'}, {'id': 107, 'name': '1.1.1 Database Changes for User Registration', 'description': '1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.\n   CREATE TABLE public.users (\n       id SERIAL PRIMARY KEY,\n       username VARCHAR(50) UNIQUE NOT NULL,\n       email VARCHAR(100) UNIQUE NOT NULL,\n       password_hash VARCHAR(255) NOT NULL,\n       created_at TIMESTAMP DEFAULT NOW(),\n       updated_at TIMESTAMP DEFAULT NOW()\n);\n\n\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-11T11:36:20.238219'}, {'id': 108, 'name': '1.1.2 Backend API for Registration', 'description': '‚Ä¢\tCreate an endpoint POST /api/register:\n‚Ä¢\tValidate input fields.\n‚Ä¢\tHash the password using bcrypt or argon2.\n‚Ä¢\tInsert the user into the users table.\n‚Ä¢\tReturn success/failure responses.\ndddhfff\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:33.067643'}, {'id': 112, 'name': '1.2.2 Frontend Login Page', 'description': 'Develop a frontend form for user login with email and password inputs.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.683644'}, {'id': 109, 'name': '1.1.3 Create Frontend Registration Page', 'description': 'Develop a frontend form to collect user registration details.\n‚Ä¢\tAdd a form for username, email, and password inputs.\n‚Ä¢\tUse client-side validation (e.g., email format).\n‚Ä¢\tSend a POST request to /api/register.\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.684988'}, {'id': 110, 'name': '1.1.4 Unit Tests for Registration', 'description': 'Write unit tests for:\n\n‚Ä¢\tValid registration.\n‚Ä¢\tDuplicate username/email scenarios.\n‚Ä¢\tInvalid input handling.\nff', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.686902'}, {'id': 101, 'name': '1.2 User Login', 'description': 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n‚Ä¢\tUsers can log in with a valid email and password.\n‚Ä¢\tErrors are displayed for invalid credentials.\n‚Ä¢\tSuccessful login stores a session or JWT token.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:25:53.687936'}, {'id': 111, 'name': '1.2.1 Backend API for Login', 'description': 'Create POST /api/login endpoint to handle user login.\njjsjj', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.689096'}, {'id': 113, 'name': '1.2.3 Session Management', 'description': 'Implement secure session handling using cookies or JWT.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:20.968680'}, {'id': 114, 'name': '1.2.4 Unit Tests for Login', 'description': 'Write tests for successful and failed login attempts.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:22:36.265866'}, {'id': 106, 'name': 'Password Reset', 'description': 'As a user, I want to reset my password securely using email.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.267247'}, {'id': 128, 'name': 'Frontend Password Reset Page', 'description': 'Develop a page for users to enter a new password using a valid token.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.269158'}, {'id': 129, 'name': 'Testing Password Reset', 'description': 'Write tests for email delivery, token validation, and password updates.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.270849'}, {'id': 102, 'name': 'Logout', 'description': 'As a user, I want to log out so that I can end my session securely.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.272605'}, {'id': 117, 'name': 'Tests for Logout', 'description': 'Verify session invalidation and redirection to the login page.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.274575'}, {'id': 116, 'name': 'Frontend Logout Button', 'description': 'Add a logout button to the UI and handle session clearing.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-09T12:31:17.939784'}, {'id': 115, 'name': 'Backend API for Logout', 'description': 'Create POST /api/logout endpoint to invalidate user sessions.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.277547'}, {'id': 61, 'name': 'Parent task assignment', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-04T22:31:45.205815', 'updated_at': '2025-01-16T19:22:36.279012'}, {'id': 45, 'name': 'Display Default Value in Dropdown', 'description': 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.280493'}, {'id': 50, 'name': 'Retrieve Current Parent Task', 'description': 'Retrieve the current parent task‚Äôs ID and name from the backend.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'In Progress', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:22.274304'}, {'id': 51, 'name': 'Set Default Value', 'description': 'Set the default value in the dropdown based on the retrieved data.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 45, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 1, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.283309'}, {'id': 46, 'name': 'Search for Parent Tasks', 'description': 'Allow users to search for tasks dynamically in the dropdown by typing.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.284882'}, {'id': 54, 'name': 'Test Partial Matching', 'description': 'Ensure the search results update in real-time as the user types.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:29.251047'}, {'id': 47, 'name': 'Handle Large Datasets Efficiently', 'description': 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:26:23.067490'}, {'id': 56, 'name': 'Paginate API Responses', 'description': 'Implement server-side filtering and pagination for large datasets.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:16.233517'}, {'id': 55, 'name': 'Enable Lazy Loading', 'description': 'Enable lazy loading or virtualization in Virtual Select.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:08.099271'}, {'id': 48, 'name': 'Select and Deselect Parent Tasks', 'description': 'Allow users to select a parent task or deselect by choosing "None."', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:25:59.651639'}, {'id': 57, 'name': 'Ensure None Option Availability', 'description': 'Add ‚ÄúNone‚Äù as a selectable option and ensure it stays at the top of the list.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:51.310240'}, {'id': 58, 'name': 'Handle Selection Events', 'description': 'Implement event listeners to update the form‚Äôs state when the selection changes.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:43.569501'}, {'id': 49, 'name': 'Integrate Dropdown with Task Form', 'description': 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:25:36.133259'}, {'id': 59, 'name': 'Bind Dropdown to Form Field', 'description': 'Bind the dropdown to the form‚Äôs parent task field.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:15.491910'}, {'id': 60, 'name': 'Test Form Submission', 'description': 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:28.367797'}, {'id': 41, 'name': 'Implement Searchable Dropdown', 'description': 'As a user, I want a searchable dropdown for parent task assignment.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Completed', 'created_at': '2025-01-03T09:14:28.285904', 'updated_at': '2025-02-11T08:25:07.992524'}, {'id': 52, 'name': 'Add Search Box to Dropdown', 'description': 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:01.469601'}, {'id': 53, 'name': 'Implement AJAX Search', 'description': 'Implement AJAX-based search to fetch tasks dynamically from the backend.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:24:54.245010'}, {'id': 42, 'name': 'Choose Dropdown Library', 'description': 'Research and decide on the dropdown library to use.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-11T08:24:47.274896'}, {'id': 43, 'name': 'Integrate Dropdown Library', 'description': 'Integrate the chosen dropdown library into the project.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Completed', 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-11T08:24:33.908549'}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t‚Ä¢\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t‚Ä¢\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t‚Ä¢\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-02-11T08:24:26.494016'}, {'id': 85, 'name': 'Assign multiple contributors to a task', 'description': 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:32:39.466022', 'updated_at': '2025-02-11T08:24:21.069473'}, {'id': 90, 'name': 'Update frontend to display and manage multiple contributors', 'description': 'Allow users to view, add, or remove multiple contributors via the UI.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-11T08:24:13.204884'}, {'id': 88, 'name': 'Update database schema for multiple contributors', 'description': 'Modify the task table to support many-to-many relationships for contributors.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-11T08:24:05.873554'}, {'id': 89, 'name': 'Develop backend API for adding contributors to a task', 'description': 'Create endpoints to add, update, and remove contributors for a task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-11T08:23:58.436495'}, {'id': 86, 'name': 'Allow designation of task owner', 'description': 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:29.330562', 'updated_at': '2025-02-11T08:23:51.269557'}, {'id': 93, 'name': 'Update frontend to manage task ownership', 'description': 'Allow users to assign or update the task owner via the UI.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-11T08:23:42.771565'}, {'id': 91, 'name': 'Update database schema for task ownership', 'description': 'Add a column or relationship to assign a single owner per task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-11T08:23:33.670381'}, {'id': 92, 'name': 'Develop backend API for assigning task owner', 'description': 'Create endpoints to assign or update the owner of a task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-11T09:19:44.027744'}, {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-02-11T08:23:23.402442'}, {'id': 96, 'name': 'Allow admin users to create and customize contributor roles via frontend', 'description': 'Provide UI functionality for admins to manage contributor roles dynamically.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T08:23:13.139282'}, {'id': 94, 'name': 'Add database support for contributor roles', 'description': 'Introduce a roles table and link contributors to specific roles for tasks.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T08:22:56.181530'}, {'id': 95, 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T08:22:02.276492'}, {'id': 127, 'name': 'Backend API for Password Reset', 'description': 'Create endpoints to handle password reset requests and token validation.\ndfdf\n\nasdasd', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-10T23:59:50.734037'}, {'id': 126, 'name': 'Email Configuration for Password Reset', 'description': 'Configure email service to send password reset links.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.334340'}, {'id': 104, 'name': 'Middleware for Role Enforcement', 'description': 'As a system, I want to enforce role-based access to specific routes.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:23:40.346816'}, {'id': 122, 'name': 'Testing Role Enforcement', 'description': 'Write tests to ensure proper access control based on roles.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-01-16T19:23:58.185693'}, {'id': 121, 'name': 'Develop Role Enforcement Middleware', 'description': 'Implement middleware to check user roles for access control.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-01-16T19:23:58.187439'}, {'id': 105, 'name': 'Profile Management', 'description': 'As a user, I want to update my profile (username, email, password).', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.339830'}, {'id': 123, 'name': 'Backend API for Profile Management', 'description': 'Create PATCH /api/profile endpoint to update user details.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-01-16T19:24:19.678781'}, {'id': 125, 'name': 'Testing Profile Updates', 'description': 'Write tests for profile update functionality.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-01-16T19:24:19.680382'}]
2025-02-14 00:16:17,512 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-14 00:16:17,513 INFO: [cached since 3.305e+04s ago] {'param_1': 2}
2025-02-14 00:16:17,514 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-14 00:16:17,514 INFO: [cached since 3.305e+04s ago] {'param_1': 3}
2025-02-14 00:16:17,514 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-14 00:16:17,514 INFO: [cached since 3.305e+04s ago] {'param_1': 4}
2025-02-14 00:16:17,515 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-14 00:16:17,515 INFO: [cached since 3.305e+04s ago] {'param_1': 5}
2025-02-14 00:16:17,517 INFO: ROLLBACK
2025-02-14 00:16:17,517 INFO: 127.0.0.1 - - [14/Feb/2025 00:16:17] "GET /tasks/ HTTP/1.1" 200 -
2025-02-14 00:16:17,601 INFO: 127.0.0.1 - - [14/Feb/2025 00:16:17] "[36mGET /static/custom.css HTTP/1.1[0m" 304 -
2025-02-14 00:16:17,626 INFO: 127.0.0.1 - - [14/Feb/2025 00:16:17] "[36mGET /static/js/filters.js HTTP/1.1[0m" 304 -
2025-02-14 00:16:17,632 INFO: 127.0.0.1 - - [14/Feb/2025 00:16:17] "[36mGET /static/js/tasks_table_interactions.js HTTP/1.1[0m" 304 -
2025-02-14 00:16:17,639 INFO: 127.0.0.1 - - [14/Feb/2025 00:16:17] "[36mGET /static/js/modals.js HTTP/1.1[0m" 304 -
2025-02-14 00:16:17,644 INFO: 127.0.0.1 - - [14/Feb/2025 00:16:17] "[36mGET /static/images/background.svg HTTP/1.1[0m" 304 -
2025-02-14 00:16:17,822 INFO: 127.0.0.1 - - [14/Feb/2025 00:16:17] "[36mGET /static/favicon.ico HTTP/1.1[0m" 304 -
2025-02-14 00:16:21,249 INFO: Entering list_tasks route...
2025-02-14 00:16:21,249 DEBUG: Filters used: {'is_archived': False}
2025-02-14 00:16:21,249 DEBUG: Applying filters: {'is_archived': False}
2025-02-14 00:16:21,259 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-14 00:16:21,261 INFO: BEGIN (implicit)
2025-02-14 00:16:21,262 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-14 00:16:21,262 INFO: [cached since 3.309e+04s ago] {'param_1': 110, 'param_2': 0}
2025-02-14 00:16:21,275 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-14 00:16:21,275 INFO: [cached since 3.309e+04s ago] {}
2025-02-14 00:16:21,277 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-14 00:16:21,278 INFO: [cached since 3.309e+04s ago] {}
2025-02-14 00:16:21,279 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-14 00:16:21,279 INFO: [cached since 3.309e+04s ago] {}
2025-02-14 00:16:21,280 DEBUG: Tasks passed to template: [{'id': 290, 'name': 'issue: error when changing task type and', 'description': 'issue: error when changing task type and parent task before saving', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:00:03.417734', 'updated_at': '2025-02-10T09:15:09.284969'}, {'id': 298, 'name': 'example user story with parent epic 297', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 297, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:41:01.907455', 'updated_at': '2025-02-10T14:59:04.142570'}, {'id': 275, 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-10T08:38:37.622196'}, {'id': 276, 'name': 'add support for priority', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-10T08:28:47.447612'}, {'id': 264, 'name': 'close all / open all childtasks', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-02-10T08:47:14.915970'}, {'id': 285, 'name': 'add text truncation to project names in task list', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-10T09:45:47.029729'}, {'id': 257, 'name': 'Update Task API Integration', 'description': "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-02-05T22:55:49.566819', 'updated_at': '2025-02-05T22:18:17.807154'}, {'id': 294, 'name': 'issue: task table filters not working', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:19:21.022598', 'updated_at': '2025-02-12T10:59:15.483390'}, {'id': 267, 'name': 'improvements to toggles and nested tasks', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:29:12.464594', 'updated_at': '2025-02-10T08:47:24.581680'}, {'id': 283, 'name': 'fix update title', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:58.769700', 'updated_at': '2025-02-10T08:46:47.282087'}, {'id': 271, 'name': 'make sure dynamically added rows has the exact same styling and includes every element', 'description': 'Missing elements:\n- Open link\n- Default project\n- Project name should be inside a pill\n- Task type should be in a pill\n- Estimations should be 0, not N/A\n- Make sure font size is matching\n- status should have the dropdown inside a pill\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:21:07.108431', 'updated_at': '2025-02-10T08:38:47.340105'}, {'id': 273, 'name': 'disable parent task selector in epics', 'description': 'and add text, Epic can¬¥t have parent tasks', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:45:20.740910', 'updated_at': '2025-02-10T08:39:17.639890'}, {'id': 269, 'name': 'fix styling for sweetalert', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-02-08T15:54:56.717846', 'updated_at': '2025-02-10T08:39:32.172437'}, {'id': 286, 'name': 'add support for labels/tags', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:46:23.985620', 'updated_at': '2025-02-10T09:46:23.987564'}, {'id': 299, 'name': 'example sub task with parent user story 298', 'description': 'Test update 1\nTest update 2\nTest update 3', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 298, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:42:38.905700', 'updated_at': '2025-02-10T23:23:08.671464'}, {'id': 266, 'name': 'highlight the nested tasks', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-02-10T08:47:04.382929'}, {'id': 279, 'name': 'github integration', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:38.238202', 'updated_at': '2025-02-10T08:39:24.168451'}, {'id': 289, 'name': 'issue: parent task is lost when updating task', 'description': '- Summary of the problem and solution\n    \n    **Problem: Parent Task Dropdown Was Not Being Set on Modal Open**\n    \n    The issue was that when opening a task modal, the **parent task dropdown** was not pre-populated with the correct parent task. However, interacting with the dropdown (e.g., clicking on it) would suddenly trigger it to be set correctly. This meant that the dropdown initialization was likely delayed or missing a step in the modal lifecycle.\n    \n    **Debugging Steps and Observations**\n    \n    1. **Task Details Were Fetched Correctly** ‚úÖ\n    - The task details, including parent_id, were being fetched from the API successfully.\n    1. **Parent Dropdown Initialization Issues** ‚ùå\n    - The initializeParentDropdown() function was being called, but the dropdown was sometimes **not fully ready** when we tried to set the selected parent task.\n    1. **Clicking the Dropdown Triggered the Parent to Be Set** ü§î\n    - This hinted that the dropdown was not fully ready when setParentDropdown(task.parent_id) was initially called.\n    \n    **Final Solution**\n    \n    1. **Ensuring Dropdown Readiness Before Setting the Parent Task**\n    - We added explicit **delays and checks** to confirm that the dropdown was fully initialized before attempting to set the parent task.\n    \n    Specifically, we:\n    \n    - **Waited for the dropdown to appear in the DOM** using observeParentDropdown().\n    - **Initialized the dropdown** with initializeParentDropdown().\n    - **Waited explicitly for the dropdown to be fully ready** using waitForParentDropdownReady().\n    - **Added a final delay of 200ms** before calling setParentDropdown() to ensure stability.\n    1. **Modifying openTaskModal to Handle Parent Dropdown Setup**\n    - We ensured that initializeParentDropdown() was called **after fetching task details** and before setting the parent task.\n    1. **Confirming the Fix** üéØ\n    - After these fixes, the parent dropdown was **immediately populated** upon opening the modal, without requiring user interaction.\n    \n    **Key Learnings**\n    \n    ‚úÖ **Dropdowns in modals need careful timing** ‚Äì They might not be ready when you expect them to be.\n    \n    ‚úÖ **Waiting for DOM updates is crucial** ‚Äì Observing the element ensures it actually exists before interacting with it.\n    \n    ‚úÖ **Explicit delays can prevent race conditions** ‚Äì A small delay can sometimes resolve timing issues in UI interactions.\n    \n    **Final Result**\n    \n    ‚úÖ The modal now **correctly loads and pre-selects the parent task** without extra clicks! üéâüöÄ', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T08:56:25.273984', 'updated_at': '2025-02-11T15:40:03.610698'}, {'id': 278, 'name': 'search feature for tasks list', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:03.369833', 'updated_at': '2025-02-10T08:39:04.005957'}, {'id': 281, 'name': 'add high level plan', 'description': 'Add some sort of high level plan that aims to keep PM/PO¬¥s on track and not get lost into the details of an overwhelminly large backlog', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:27:01.218606', 'updated_at': '2025-02-10T08:38:54.754760'}, {'id': 287, 'name': 'when moving a parent item to another project make sure the subtasks are moved as well', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:48:31.986870', 'updated_at': '2025-02-10T09:48:31.988859'}, {'id': 272, 'name': 'implement a markdown text editor like notion', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-02-10T08:28:39.669255'}, {'id': 293, 'name': 'click on title should copy the task title and id to clipboard', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:16:33.508209', 'updated_at': '2025-02-10T10:16:33.510414'}, {'id': 277, 'name': 'custom task workflow statuses', 'description': 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- Custom status\n-- Custom status\n- In Progress\n-- Custom status\n-- Custom status\n-- Custom status\n- Completed\n-- Custom status\n-- Custom status\n\n2. How can we track a task through different stages and save the sequence of events or stages the task has gone through?\nI¬¥m thinking it could be good for mapping out processes, identifying bottlenecks and provide valuable insights while improving and streamlining workflows.\n- Stages\n- Contacts taken\n- Respons time \n- Time to action after responses\n- Dependencies\n\nNeed to be able to record every action related to this action.\nCommunication integrations\n- Slack\n- Email\n- Text messages\n- Phonecalls\n- Calendar events, meetings\n- Zoom, Google meet, Teams etc..\n\n\n2. Set custom statuses per project (can use tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:16:03.352588', 'updated_at': '2025-02-10T08:38:28.123328'}, {'id': 274, 'name': 'add support for goals, initiatives, okr¬¥s', 'description': 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:46:27.204912', 'updated_at': '2025-02-10T08:28:17.663922'}, {'id': 280, 'name': 'logging (task and project history)', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:37:44.435112', 'updated_at': '2025-02-10T08:28:28.947805'}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:17.786154', 'updated_at': '2025-02-10T09:41:17.787861'}, {'id': 296, 'name': 'issue: contributor is lost after updating task', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:26:43.881947', 'updated_at': '2025-02-11T15:37:31.011120'}, {'id': 288, 'name': 'when trying to move subtask to another project, make sure a warning is displayed', 'description': 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be lost"\nOR\n\nIs it possible, and is it desireable to keep parent child relationships across projects?\nSo that a parent can be in one project but the child tasks can be in different projects?\n\nLets say \nParent epic is \n"Internationalisation"\nChild user stories are\n- Timezones\n- Language\n- Currency\n- Day, Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:54:36.297869', 'updated_at': '2025-02-10T08:54:51.840686'}, {'id': 284, 'name': 'add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-10T09:42:27.720908'}, {'id': 295, 'name': 'issue: drag and drop errors', 'description': '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:22:54.461413', 'updated_at': '2025-02-10T10:22:54.462542'}, {'id': 297, 'name': 'example parent epic', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:39:51.620509', 'updated_at': '2025-02-10T10:39:51.622712'}, {'id': 292, 'name': 'issue: assigning contributor does not work', 'description': '### **Summary of problem and solution**\n\nThe issue was that assigning a contributor to a task via the /tasks/<task_id>/assign_contributor API endpoint resulted in a **400 Bad Request** error. Upon investigation, the following problems were identified:\n\n1. **Missing CSRF Token:**\n- The request failed due to a missing CSRF token, as shown in the error message: *‚ÄúBad Request: The CSRF token is missing.‚Äù*\n- The frontend was not correctly including the CSRF token in the request headers.\n1. **JavaScript Error (Undefined CSRF Token Variable):**\n- The error *‚ÄúReferenceError: csrfToken is not defined‚Äù* indicated that the CSRF token was not being retrieved properly in the JavaScript code.\n1. **Incorrect Fetch Request Headers:**\n- The fetch request did not include the CSRF token under the correct key (X-CSRFToken).\n- The script attempted to send the request without properly extracting the CSRF token from the meta tag.\n\n### **Solution**\n\n1. **Include the CSRF Token in the JavaScript Code**\n\nThe CSRF token was retrieved from the meta tag and used in the request headers:\n\n```jsx\n// Retrieve CSRF token from meta tag\nconst csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\');\n```\n\nThis ensures that the CSRF token is correctly fetched and available in the JavaScript scope.\n\n1. **Modify the Fetch Request to Include CSRF Token**\n\nThe request to assign a contributor was updated to include the token:\n\n```jsx\nconst response = await fetch(`/tasks/${taskId}/assign_contributor`, {\n    method: "POST",\n    headers: { \n        "Content-Type": "application/json",\n        "X-CSRFToken": csrfToken  // Include CSRF token\n    },\n    body: JSON.stringify({ contributor_id: parseInt(contributorId, 10) }),\n});\n```\n\n- **Ensures the CSRF token is sent in the request headers** so that Flask-WTF does not reject the request.\n1. **Verify and Debug Network Requests**\n- The updated request headers were verified using **Chrome DevTools > Network tab** to ensure the X-CSRFToken was included.\n- The error messages disappeared, and the contributor assignment request **succeeded with a 200 OK response**.\n\n---\n\n### **Final Outcome**\n\nüöÄ The issue was resolved, and contributors can now be assigned successfully to tasks without triggering a CSRF validation error.\n\n### **Key Learnings from This Session**\n\nThis debugging session covered several important aspects of **web development with Flask and JavaScript**, particularly related to **API requests, CSRF protection, debugging tools, and database interactions**. Here are the key takeaways:\n\n---\n\n### **1. CSRF Protection in API Requests**\n\n- **Issue:** The initial error was due to **a missing CSRF token** when making a `POST` request.\n- **Fix:** The solution was to **retrieve the CSRF token from a meta tag** in the HTML and include it in the request headers.\n- **Key Learning:** Flask-WTF requires CSRF tokens for form and API submissions to **prevent cross-site request forgery (CSRF) attacks**.‚úÖ Always ensure that API requests include a valid CSRF token.\n\n---\n\n### **2. Debugging JavaScript Fetch Requests**\n\n- **Issue:** The JavaScript code was making a fetch request, but the variable `csrfToken` was not properly defined, causing a `ReferenceError`.\n- **Fix:** Declaring `csrfToken` at the beginning of the script:\n    \n    ```jsx\n    const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\');\n    ```\n    \n- **Key Learning:**‚úÖ JavaScript variables must be defined before they are used.‚úÖ Use browser **developer tools (DevTools) Network tab** to inspect headers, payloads, and responses when debugging API requests.\n\n---\n\n### **3. Structuring Flask Routes for Task Management**\n\n- **Issue:** The `assign_contributor` route was failing due to incorrect request payload validation.\n- **Fix:** Improved the route‚Äôs error handling and logging:\n    \n    ```python\n    @bp.route(\'/<int:task_id>/assign_contributor\', methods=[\'POST\'])\n    def assign_contributor(task_id):\n        try:\n            data = request.get_json()\n            contributor_id = int(data.get(\'contributor_id\', 0))\n            if not contributor_id:\n                return jsonify({\'error\': \'Valid Contributor ID is required\'}), 400\n    ```\n    \n- **Key Learning:**‚úÖ Always validate incoming data in Flask routes to prevent type errors.‚úÖ Use `request.get_json()` properly and handle missing or incorrect data gracefully.\n\n---\n\n### **4. Utilizing Browser DevTools for Debugging**\n\n- **Issue:** The fetch request was failing with a `400 Bad Request`, and the browser console showed `ReferenceError: csrfToken is not defined`.\n- **Fix:**\n    - Used **Network tab** to inspect the request payload and headers.\n    - Used **Console tab** to catch JavaScript errors early.\n- **Key Learning:**‚úÖ DevTools is a **critical** tool for diagnosing network request issues.‚úÖ Always **check console errors** before assuming it\'s a backend issue.\n\n---\n\n### **5. Database Queries and ORM Debugging**\n\n- **Issue:** Tasks were not being updated correctly, possibly due to missing commit statements.\n- **Fix:** Ensured that:was executed properly.\n    \n    ```python\n    task.contributor_id = contributor_id\n    db.session.commit()\n    ```\n    \n- **Key Learning:**‚úÖ Always call `db.session.commit()` after making changes in SQLAlchemy.‚úÖ Rollback transactions if an error occurs to avoid database inconsistency.\n\n---\n\n### **6. Handling Asynchronous JavaScript Logic**\n\n- **Issue:** The `assignContributor` function was executing before the page was fully loaded.\n- **Fix:** Wrapped it inside a function that ensures elements exist:\n    \n    ```\n    window.setupContributorAssignment = function () {\n        const assignButton = $("#assign-contributor-btn");\n        if (!assignButton.length) {\n            setTimeout(setupContributorAssignment, 500); // Retry in 500ms\n            return;\n        }\n    ```\n    \n- **Key Learning:**‚úÖ Use `setTimeout` to **retry event binding** when elements are dynamically loaded.‚úÖ Always **check if elements exist before attaching event handlers**.\n\n---\n\n### **7. Best Practices for Flask Logging & Error Handling**\n\n- **Issue:** Lack of clear logging when API calls failed.\n- **Fix:** Added better logging to track failures:\n    \n    ```python\n    logger.info(f"Assigning contributor to task ID {task_id}")\n    try:\n        # Process request...\n    except Exception as e:\n        logger.error(f"Error assigning contributor: {e}")\n    ```\n    \n- **Key Learning:**‚úÖ Log **every major step** in API processing to simplify debugging.‚úÖ Differentiate between `logger.info()`, `logger.warning()`, and `logger.error()` based on severity.\n\n---\n\n### **Final Takeaways**\n\nüöÄ **Understanding CSRF protection** and **properly structuring API requests** is crucial for secure web applications.\n\nüîç **Browser DevTools is invaluable** for diagnosing frontend issues, especially in JavaScript.\n\nüêç **Flask requires proper request validation, database transactions, and logging** to maintain stability.\n\n‚ö° **Asynchronous JavaScript must handle dynamic elements carefully** to avoid runtime errors.\n\nThis session reinforced best practices in **frontend-backend integration, debugging, and security**, making it a great learning experience! üöÄüî•', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:11:12.273779', 'updated_at': '2025-02-12T10:59:41.585250'}, {'id': 265, 'name': 'smooth transition for toggles', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-02-10T08:46:55.831743'}, {'id': 270, 'name': 'the newest task', 'description': '', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:07:34.368035', 'updated_at': '2025-02-10T01:07:34.372478'}, {'id': 291, 'name': 'add dropdowns in task list for changing: project, assigned to, estimate and task type (labels/tags)', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-02-10T10:09:52.997455'}, {'id': 136, 'name': 'Page scroll should stay in position when reloading', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-16T18:21:50.187247', 'updated_at': '2025-01-16T19:22:36.214901'}, {'id': 130, 'name': 'Implement the Map of Task Relationships solution for drag-and-drop', 'description': 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.093022', 'updated_at': '2025-01-16T19:22:36.216705'}, {'id': 133, 'name': 'Step 4: Enhance Logging in models.py', 'description': 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nupdating the Task model in the following ways:\n\n1.\tLog Changes to parent_id:\n\t‚Ä¢\tLog changes to parent_id during updates, including old and new values.\n\t2.\tValidate Hierarchy with Logging:\n\t‚Ä¢\tLog detailed messages when validating hierarchy changes, especially for circular dependency checks.\n\nHere‚Äôs how the models.py can be updated:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy import func, cast, CheckConstraint\nfrom sqlalchemy.orm import validates\nfrom app.extensions.db import db\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\nclass Task(db.Model):\n    __tablename__ = "task"\n    \n    # Other columns...\n\n    parent_id = db.Column(\n        db.Integer, db.ForeignKey("task.id"), index=True, nullable=True\n    )\n\n    # Relationships\n    parent = db.relationship(\n        "Task", remote_side=[id], back_populates="children", lazy="select"\n    )\n    children = db.relationship(\n        "Task", back_populates="parent", lazy="select"\n    )\n\n    \n\n\n    @staticmethod\n    def _validate_no_circular_references(new_parent_id):\n        """\n        Validates that there are no circular references in the task hierarchy.\n\n        Args:\n            new_parent_id (int): The new parent ID to validate.\n\n        Raises:\n            ValueError: If a circular reference is detected.\n        """\n        visited = set()\n        current_parent_id = new_parent_id\n\n        logger.info(f"Validating circular references for parent ID: {new_parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error(\n                    f"Circular reference detected: Parent ID {current_parent_id} already visited."\n                )\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            # Fetch the next parent_id in the hierarchy\n            parent = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not parent:\n                break  # Exit if no parent is found\n            current_parent_id = parent.parent_id\n\n        logger.info("No circular reference detected.")\n\n    @validates(\'parent_id\', \'task_type\')\n    def validate_task_changes(self, key, value):\n        """\n        Validates changes to \'parent_id\' and \'task_type\'.\n        Ensures hierarchy validity and checks for circular references.\n        """\n        logger.debug(f"Validating {key} change for Task {self.id}: {value}")\n\n        if key == \'parent_id\':\n            # Log changes to parent_id\n            if self.id and value != self.parent_id:\n                logger.info(f"Task {self.id}: Updating \'parent_id\' from {self.parent_id} to {value}")\n\n            # Prevent a task from being its own parent\n            if value and value == self.id:\n                logger.error("A task cannot be its own parent.")\n                raise ValueError("A task cannot be its own parent.")\n\n            # Check for circular references\n            if value:\n                Task.check_circular_reference(self.id, value)\n\n        elif key == \'task_type\':\n            # Log changes to task_type\n            if self.id and value != self.task_type:\n                logger.info(f"Task {self.id}: Updating \'task_type\' from {self.task_type} to {value}")\n\n        # Check hierarchy rules without triggering further validation\n        if key in [\'parent_id\', \'task_type\']:\n            self._validate_hierarchy_change(key, value)\n\n        logger.info(f"Validation passed for {key}: {value}")\n        return value\n\n    def _validate_hierarchy_change(self, key, value):\n        """\n        Validates hierarchy rules for the task based on `task_type` and `parent_id`.\n        """\n        if key == \'parent_id\' and value:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=value).first()\n            if not parent_task:\n                raise ValueError("Parent task does not exist.")\n\n            logger.debug(f"Validating hierarchy: Task {self.id}, Parent Type: {parent_task.task_type}")\n            if self.task_type == "User Story" and parent_task.task_type != "Epic":\n                raise ValueError("User Stories must have an Epic as a parent.")\n            if self.task_type == "Subtask" and parent_task.task_type != "User Story":\n                raise ValueError("Subtasks must have a User Story as a parent.")\n\n        elif key == \'task_type\' and self.parent_id:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=self.parent_id).first()\n            if parent_task:\n                logger.debug(f"Validating hierarchy: Task Type: {value}, Parent Type: {parent_task.task_type}")\n                if value == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError("User Stories must have an Epic as a parent.")\n                if value == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError("Subtasks must have a User Story as a parent.")\n\n        logger.info(f"Hierarchy validation passed for Task {self.id if self.id else \'New Task\'}.")\n\n    @staticmethod\n    def check_circular_reference(task_id, parent_id):\n        """\n        Iteratively checks for circular references in the task hierarchy.\n        Prevents stack overflow on deep hierarchies.\n        """\n        visited = set()\n        current_parent_id = parent_id\n\n        logger.info(f"Checking circular reference for Task {task_id} with Parent ID: {parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error("Circular reference detected!")\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            if current_parent_id == task_id:\n                logger.error("A task cannot be its own ancestor.")\n                raise ValueError("A task cannot be its own ancestor.")\n\n            # Fetch the next parent_id in the hierarchy\n            task = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not task:\n                break\n            current_parent_id = task.parent_id\n\n        logger.info("Circular reference check passed.")\n```\nKey Enhancements:\n\t1.\tlog_and_validate_parent_id_change:\n\t‚Ä¢\tLogs the old and new parent_id whenever it changes.\n\t‚Ä¢\tEnsures no circular references are introduced.\n\t2.\t_validate_no_circular_references:\n\t‚Ä¢\tValidates the parent_id field to prevent circular dependencies.\n\t‚Ä¢\tLogs progress and raises detailed errors if violations occur.\n\t3.\tlog_and_validate_task_type_change:\n\t‚Ä¢\tLogs changes to task_type with the old and new values.\n\t‚Ä¢\tRevalidates hierarchy rules when task_type changes.\n\t4.\tDetailed Logging for Circular Reference Validation:\n\t‚Ä¢\t_validate_no_circular_references and check_circular_reference methods log every step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t‚Ä¢\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:44:08.340041', 'updated_at': '2025-01-16T19:22:36.219710'}, {'id': 132, 'name': 'Step 1: Update tasks_table_interactions.js', 'description': '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the map for efficient parent-child relationship lookups instead of DOM traversal.\n\n```\nexport const TaskManager = {\n    init: function (csrfToken) {\n        this.csrfToken = csrfToken;\n        this.initTaskParentMap(); // Initialize the map\n        this.initDragAndDrop(); // Initialize drag-and-drop functionality\n    },\n\n    // Initialize a global map for task relationships\n    taskParentMap: new Map(),\n\n    // Build the taskParentMap from the DOM\n    initTaskParentMap: function () {\n        console.log("Initializing Task Parent Map...");\n        const rows = document.querySelectorAll("tr[data-task-id]");\n\n        rows.forEach((row) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = parseInt(row.dataset.parentId, 10) || null;\n            this.taskParentMap.set(taskId, parentId);\n        });\n\n        console.log("Task Parent Map initialized:", Array.from(this.taskParentMap.entries()));\n    },\n\n    // Update the map dynamically after drag-and-drop\n    updateTaskParentMap: function (taskId, parentId) {\n        console.log(`Updating Task Parent Map: Task ${taskId} -> Parent ${parentId}`);\n        this.taskParentMap.set(taskId, parentId);\n    },\n\n    initDragAndDrop: function () {\n        if (window.isDragAndDropInitialized) {\n            console.log("Drag-and-drop is already initialized.");\n            return;\n        }\n\n        console.log("Initializing drag-and-drop within TaskManager...");\n\n        const tableBody = document.querySelector("tbody");\n        if (!tableBody) {\n            console.warn("Task table body not found for drag-and-drop initialization");\n            return;\n        }\n\n        // Initialize Sortable.js for drag-and-drop functionality\n        Sortable.create(tableBody, {\n            handle: ".task-row", // Only draggable via `.task-row` elements\n            animation: 150, // Smooth animation\n            filter: ".task-open-link", // Prevent dragging on task links\n            preventOnFilter: true, // Prevent drag if filtered element is clicked\n            onEnd: async (event) => {\n                try {\n                    console.log("Drag-and-drop operation started...");\n                    const rows = Array.from(event.from.querySelectorAll(".task-row"));\n                    const reorderedTasks = [];\n\n                    rows.forEach((row, index) => {\n                        const taskId = parseInt(row.dataset.taskId, 10);\n                        let parentId = null;\n\n                        // Get the parent ID from the map or fallback to the dataset\n                        if (row.classList.contains("subtask-row")) {\n                            const parentRow = row.previousElementSibling;\n                            parentId = parentRow\n                                ? parseInt(parentRow.dataset.taskId, 10)\n                                : this.taskParentMap.get(taskId) || null;\n                        }\n\n                        // Update the taskParentMap dynamically\n                        this.updateTaskParentMap(taskId, parentId);\n\n                        reorderedTasks.push({\n                            id: taskId,\n                            sort_order: index + 1,\n                            parent_id: parentId,\n                        });\n                    });\n\n                    console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n                    console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n                    // Send the payload to the backend\n                    const response = await fetch("/tasks/reorder_subtasks", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                            "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n                        },\n                        body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n                    });\n\n                    if (!response.ok) {\n                        const errorData = await response.json();\n                        console.error("Error reordering tasks:", errorData);\n                        alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n                        return;\n                    }\n\n                    const data = await response.json();\n                    console.log("Task reordering successful:", data);\n\n                } catch (error) {\n                    console.error("Error during drag-and-drop operation:", error);\n                    alert("An unexpected error occurred while reordering tasks.");\n                }\n            },\n        });\n\n        window.isDragAndDropInitialized = true;\n        console.log("Drag-and-drop initialized successfully.");\n    },\n};\n```\n\nKey Updates:\n\t1.\tPrecomputed Map (taskParentMap):\n\t‚Ä¢\tThe initTaskParentMap function initializes the map by iterating over DOM elements and mapping each task‚Äôs ID to its parent ID.\n\t‚Ä¢\tThe updateTaskParentMap dynamically updates the map when tasks are reordered.\n\t2.\tEfficient Parent Lookup:\n\t‚Ä¢\tThe parentId is derived from the precomputed map rather than DOM traversal.\n\t3.\tBackend Payload:\n\t‚Ä¢\tA structured payload (reorderedTasks) is sent to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t‚Ä¢\tCSRF protection is ensured by passing the token to the request headers.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:44:08.338301', 'updated_at': '2025-02-06T21:59:17.417466'}, {'id': 134, 'name': 'Step 2: Update the Backend in routes.py', 'description': 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\nPlan for step 2:\n\t1.\tVerify the payload structure:\n\t‚Ä¢\tEnsure that the payload includes all necessary fields (id, sort_order, parent_id) for each task.\n\t‚Ä¢\tValidate that the parent-child relationships in the precomputed map (taskParentMap) are reflected correctly in the payload.\n\t2.\tSubmit the payload to the backend:\n\t‚Ä¢\tEnhance the fetch request in the onEnd function of initDragAndDrop to log detailed submission data.\n\t‚Ä¢\tConfirm the payload integrity in the browser console before submission.\n\t3.\tUpdate backend logging:\n\t‚Ä¢\tAdd logging to /reorder_subtasks in routes.py to confirm receipt of the correct payload and process parent-child updates.\n\t‚Ä¢\tLog before and after database updates for better debugging.\n\n-----\nUpdated tasks_table_interactions.js\n\nReplace this section:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    let parentId = null;\n```\nWith:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    const parentId = this.taskParentMap.get(taskId) || null;\n```\nThe this.taskParentMap provides a precomputed and dynamic mapping of taskId to parentId. By using this map, we avoid relying on DOM traversal logic (row.closest or row.previousElementSibling) during drag-and-drop operations, which can sometimes be unreliable or cumbersome.\n\nFull Revised onEnd section:\n```\nonEnd: async (event) => {\n    try {\n        console.log("Drag-and-drop operation started...");\n        const rows = Array.from(event.from.querySelectorAll(".task-row"));\n        const reorderedTasks = [];\n\n        rows.forEach((row, index) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = this.taskParentMap.get(taskId) || null;\n\n            // Update the taskParentMap dynamically\n            this.updateTaskParentMap(taskId, parentId);\n\n            reorderedTasks.push({\n                id: taskId,\n                sort_order: index + 1,\n                parent_id: parentId,\n            });\n        });\n\n        console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n        console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n        // Send the payload to the backend\n        const response = await fetch("/tasks/reorder_subtasks", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n            },\n            body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error("Error reordering tasks:", errorData);\n            alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n            return;\n        }\n\n        const data = await response.json();\n        console.log("Task reordering successful:", data);\n\n    } catch (error) {\n        console.error("Error during drag-and-drop operation:", error);\n        alert("An unexpected error occurred while reordering tasks.");\n    }\n}\n```\n---------------------------------\nEnsure updates include:\n\t‚Ä¢\tBetter Logging: Adding logs for key events such as database changes and validation results.\n\t‚Ä¢\tInput Validation: Ensure all required fields (id, sort_order, parent_id) exist in the payload.\n\t‚Ä¢\tPost-Commit Validation: Confirm database updates after the commit.\n\t‚Ä¢\tImproved Error Handling: Include specific error messages and consistent rollback mechanisms.\n\nBelow is the revised reorder_subtasks route with descriptive comments for each section:\n```\n@bp.route("/reorder_subtasks", methods=["POST"])\ndef reorder_subtasks():\n    """\n    Reorder subtasks globally or reassign them to a different parent.\n\n    Steps:\n    - Parse and validate input from the frontend.\n    - Update parent-child relationships and sort order in the database.\n    - Commit changes and return a success response.\n    - Handle errors gracefully and provide detailed logs for debugging.\n    """\n    logger.info("Entering reorder_subtasks route...")\n    logger.info(f"Received payload for reordering tasks: {request.json}")\n\n    try:\n        # Step 1: Parse input\n        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered\n        ordered_tasks = request.json.get("ordered_tasks", [])\n\n        logger.debug(f"Parsed parent_id: {parent_id}")\n        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")\n\n        # Step 2: Validate input\n        if not isinstance(ordered_tasks, list) or not all(\n            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task\n            for task in ordered_tasks\n        ):\n            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")\n            return jsonify({\n                "error": "Invalid input format for \'ordered_tasks\'. Each task must include \'id\', \'sort_order\', and \'parent_id\'."\n            }), 400\n\n        # Step 3: Validate parent task (if applicable)\n        if parent_id is not None:\n            parent_task = Task.query.get(parent_id)\n            if not parent_task:\n                logger.error(f"Parent task with ID {parent_id} not found.")\n                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400\n\n        logger.info("Input validation passed. Proceeding with task updates...")\n\n        # Step 4: Process updates for each subtask\n        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation\n\n        for task_data in ordered_tasks:\n            subtask_id = task_data["id"]\n            sort_order = task_data["sort_order"]\n            new_parent_id = task_data["parent_id"]\n\n            # Fetch the subtask from the database\n            subtask = Task.query.get(subtask_id)\n            if not subtask:\n                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")\n                continue\n\n            # Log and update parent_id if it changes\n            if new_parent_id is not None and new_parent_id != subtask.parent_id:\n                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")\n                subtask.parent_id = new_parent_id\n\n            # Update sort order\n            subtask.sort_order = sort_order\n            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")\n\n            # Add to the list of updated subtasks for validation\n            updated_subtasks.append(subtask)\n\n        # Step 5: Commit changes to the database\n        try:\n            db.session.commit()\n            logger.info(f"Subtasks reordered successfully: {[task[\'id\'] for task in ordered_tasks]}")\n        except Exception as e:\n            logger.error(f"Error committing changes to the database: {str(e)}")\n            db.session.rollback()\n            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500\n\n        # Step 6: Post-commit validation\n        for subtask in updated_subtasks:\n            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")\n            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")\n\n        # Step 7: Return success response\n        return jsonify({\n            "success": True,\n            "message": "Subtasks reordered successfully.",\n            "updated_subtasks": [subtask.id for subtask in updated_subtasks]\n        }), 200\n\n    except Exception as e:\n        # Step 8: Handle unexpected errors\n        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)\n        db.session.rollback()\n        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500\n```\nKey Changes and Descriptive Comments\n\t1.\tInput Parsing:\n\t‚Ä¢\tExtracts parent_id and ordered_tasks from the request payload.\n\t‚Ä¢\tLogs the parsed values for debugging.\n\t2.\tInput Validation:\n\t‚Ä¢\tEnsures ordered_tasks is a list of dictionaries with the required keys.\n\t‚Ä¢\tValidates parent_id if provided, ensuring the parent task exists in the database.\n\t3.\tUpdate Processing:\n\t‚Ä¢\tIterates through ordered_tasks, updating each task‚Äôs parent_id and sort_order.\n\t‚Ä¢\tLogs changes for each task.\n\t4.\tDatabase Commit:\n\t‚Ä¢\tCommits all updates in a single transaction.\n\t‚Ä¢\tLogs success or rolls back changes in case of an error.\n\t5.\tPost-Commit Validation:\n\t‚Ä¢\tVerifies that the parent_id and sort_order changes were successfully saved to the database.\n\t6.\tError Handling:\n\t‚Ä¢\tCaptures and logs exceptions during processing or committing.\n\t‚Ä¢\tProvides meaningful error messages to the frontend.\n\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:46:29.348853', 'updated_at': '2025-02-06T21:59:21.617065'}, {'id': 131, 'name': 'Step 5: Update utils.py', 'description': 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nChanges to Make:\n\t1.\tEnhance Task Filtering:\n\t‚Ä¢\tEnsure the filters handle parent-child relationships explicitly.\n\t‚Ä¢\tAdd options to include or exclude subtasks in queries.\n\t2.\tUtility Function for Debugging Parent-Child Relationships:\n\t‚Ä¢\tProvide a function to generate a map or list of parent-child relationships for debugging purposes.\n\t3.\tValidation Functions:\n\t‚Ä¢\tAdd a utility function to validate parent-child relationships and ensure no circular dependencies.\n\nUpdated utils.py Code:\n```\nimport logging\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import joinedload\nfrom app.extensions.db import db\nfrom app.tasks.models import Task\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\n\nclass TaskService:\n    @staticmethod\n    def filter_tasks(filters=None, include_subtasks=True, page=None, per_page=None):\n        """\n        Dynamically filters tasks with an option to include or exclude subtasks.\n\n        Args:\n            filters (dict): Filtering criteria.\n            include_subtasks (bool): Whether to include subtasks in the query.\n            page (int, optional): Page number for pagination.\n            per_page (int, optional): Items per page for pagination.\n\n        Returns:\n            Query or Pagination: A SQLAlchemy query object or paginated results.\n        """\n        query = Task.query.options(\n            db.joinedload(Task.project).joinedload(Project.contributors),\n            db.joinedload(Task.contributor),\n            db.joinedload(Task.children),\n        ).order_by(Task.sort_order)\n\n        if filters:\n            logger.debug(f"Applying filters: {filters}")\n\n            # Apply standard filters\n            if "is_archived" in filters:\n                query = query.filter(Task.is_archived == filters["is_archived"])\n            if "project_id" in filters:\n                query = query.filter(Task.project_id == filters["project_id"])\n            if "task_type" in filters:\n                if isinstance(filters["task_type"], list):\n                    query = query.filter(Task.task_type.in_(filters["task_type"]))\n                else:\n                    query = query.filter(Task.task_type == filters["task_type"])\n            if "completion_status" in filters:\n                completion_map = {"completed": True, "in_progress": False}\n                if filters["completion_status"] in completion_map:\n                    query = query.filter(Task.completed == completion_map[filters["completion_status"]])\n\n            # Optionally exclude subtasks\n            if not include_subtasks:\n                query = query.filter(Task.task_type != "Subtask")\n\n        logger.debug(f"Generated query: {query}")\n\n        # Pagination\n        if page and per_page:\n            return query.paginate(page=page, per_page=per_page, error_out=False)\n        return query\n\n    @staticmethod\n    def debug_parent_child_relationships(project_id=None):\n        """\n        Generates a debug map of parent-child relationships for all tasks.\n\n        Args:\n            project_id (int, optional): Restrict to tasks from a specific project.\n\n        Returns:\n            dict: A dictionary mapping parent IDs to their child task IDs.\n        """\n        query = Task.query\n        if project_id:\n            query = query.filter(Task.project_id == project_id)\n\n        tasks = query.options(\n            db.load_only(Task.id, Task.parent_id)\n        ).all()\n\n        relationship_map = {}\n        for task in tasks:\n            if task.parent_id not in relationship_map:\n                relationship_map[task.parent_id] = []\n            relationship_map[task.parent_id].append(task.id)\n\n        logger.debug(f"Parent-Child Relationship Map: {relationship_map}")\n        return relationship_map\n\n    @staticmethod\n    def validate_parent_child_relationships():\n        """\n        Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.\n\n        Raises:\n            ValueError: If invalid relationships are detected.\n        """\n        tasks = Task.query.options(db.joinedload(Task.parent)).all()\n\n        for task in tasks:\n            if task.parent_id:\n                parent_task = task.parent\n                if not parent_task:\n                    raise ValueError(f"Task {task.id} has an invalid parent ID {task.parent_id}.")\n\n                # Validate hierarchy rules\n                if task.task_type == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError(f"User Story {task.id} must have an Epic as its parent.")\n                if task.task_type == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError(f"Subtask {task.id} must have a User Story as its parent.")\n\n        logger.info("All parent-child relationships are valid.")\n\n    @staticmethod\n    def get_all_task_ids_with_parents():\n        """\n        Returns a flat list of tasks with their parent IDs for debugging.\n\n        Returns:\n            list: A list of tuples (task_id, parent_id).\n        """\n        tasks = Task.query.with_entities(Task.id, Task.parent_id).all()\n        logger.debug(f"Task IDs with Parent IDs: {tasks}")\n        return tasks\n```\n\n\nExplanation of Changes:\n\t1.\tfilter_tasks Enhancements:\n\t‚Ä¢\tAdded include_subtasks parameter to optionally exclude subtasks from the query.\n\t2.\tdebug_parent_child_relationships:\n\t‚Ä¢\tCreates a parent-child relationship map for debugging purposes.\n\t3.\tvalidate_parent_child_relationships:\n\t‚Ä¢\tIterates through all tasks to validate parent-child hierarchy and ensures no invalid relationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t‚Ä¢\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.091824', 'updated_at': '2025-01-16T19:22:36.236691'}, {'id': 135, 'name': 'Step 3: Update list.html', 'description': 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already includes everything needed. No required changes.\n\nHere¬¥s the relevant section of list.html:\n\n```\n<tr id="task-{{ task.id }}"\n                class="task-row {% if task.task_type == \'Subtask\' %}subtask-row{% elif task.task_type == \'User Story\' %}user-story-row{% elif task.task_type == \'Epic\' %}epic-row{% endif %}"\n                style="background-color: \n                {% if task.task_type == \'Subtask\' %}\n                    rgba(200, 230, 255, 0.5); /* Light blue for Subtask */\n                {% elif task.task_type == \'User Story\' %}\n                    rgba(255, 255, 200, 0.5); /* Light yellow for User Story */\n                {% elif task.task_type == \'Epic\' %}\n                    rgba(255, 200, 200, 0.5); /* Light red for Epic */\n                {% else %}\n                    rgba(240, 240, 240, 1); /* Default light gray */\n                {% endif %};"\n                data-task-id="{{ task.id }}"\n                data-parent-id="{{ task.parent_id or \'\' }}"\n                data-level="{{ depth }}">\n                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>\n                <td>\n                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}\n                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}" aria-label="Toggle details for task {{ task.name }}">\n                        <i class="bi bi-chevron-right"></i>\n                    </button>\n                    {% endif %}\n                </td>\n                <td class="fw-medium fs-6 \n                {% if task.task_type == \'Epic\' %}\n                    epic-cell\n                {% elif task.task_type == \'User Story\' %}\n                    user-story-cell\n                {% elif task.task_type == \'Subtask\' %}\n                    subtask-cell\n                {% endif %}" \n                style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">\n                <span class="bi fs-6\n                {% if task.task_type == \'Epic\' %}\n                    bi-circle-fill\n                {% elif task.task_type == \'User Story\' %}\n                    bi-circle-half\n                {% elif task.task_type == \'Subtask\' %}\n                    bi-circle\n                {% endif %}">\n                </span>\n                {{ task.name }}\n                <small class="text-muted fw-light">\n                    (Parent-ID: {{ task.parent_id or \'None\' }})\n                </small>\n                <!-- Open Link -->\n                <a href="#" class="task-open-link" data-task-id="{{ task.id }}">\n                    <i class="bi bi-arrows-angle-expand" style="font-size: 0.8rem; color: white;"></i>\n                    Open\n                </a>\n            </td>\n                <td class="fw-light fs-6">\n                    <small class>\n                    LAC-{{ task.id }}\n                    </small>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light text-bg-secondary">\n                        {{ task.project if task.project else "Unknown Project" }}\n                    </span>\n                </td>\n                <td class="fs-6" data-contributor-column>{{ task.assigned_to if task.assigned_to else "Unassigned" }}</td>\n                <td class="fs-6">{{ task.story_points }}</td>\n                <td class="fs-6">\n                    <span class="badge rounded-pill fw-light text-bg-light">\n                        {{ task.task_type }}\n                    </span>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light {% if task.completed %}text-bg-success{% else %}text-bg-warning{% endif %}">\n                        {{ "Completed" if task.completed else "In Progress" }}\n                    </span>\n                </td>\n                <td>\n                    <!-- Delete Icon -->\n                    <button class="btn btn-dark btn-sm delete-task-btn" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .2rem; --bs-btn-font-size: .75rem;" data-task-id="{{ task.id }}" aria-label="Deletes task {{ task.id }}">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n            </tr>\n            {% for child in tasks if child.parent_id == task.id %}\n                {{ render_task(child, tasks, depth + 1) }}\n            {% endfor %}\n            {% endmacro %}\n            \n            <!-- Render top-level tasks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:46:29.349784', 'updated_at': '2025-01-16T19:22:36.238473'}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'description': 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitHub Login involves integrating OAuth 2.0, which both services support. The complexity depends on your app‚Äôs existing setup, frameworks, and experience with third-party authentication. Below is a breakdown:\n\nKey Steps for Implementing Google or GitHub Login\n\t1.\tSet Up OAuth Credentials:\n\t‚Ä¢\tRegister your application in the Google Cloud Console or GitHub Developer Settings.\n\t‚Ä¢\tObtain the client ID and client secret.\n\t2.\tInstall Required Libraries:\n\t‚Ä¢\tUse a library for OAuth (e.g., flask-oauthlib, python-social-auth, or authlib).\n\t‚Ä¢\tPopular frameworks like Flask and Django already have robust integrations for OAuth providers.\n\t3.\tBackend Configuration:\n\t‚Ä¢\tImplement an endpoint to handle the OAuth flow (/auth/login/google or /auth/login/github).\n\t‚Ä¢\tConfigure your app to send users to Google or GitHub‚Äôs authentication page.\n\t‚Ä¢\tHandle the OAuth callback to exchange the authorization code for an access token.\n\t‚Ä¢\tVerify the token and fetch user information (e.g., email, name).\n\t4.\tLink OAuth to User Registration:\n\t‚Ä¢\tOn successful login, create or retrieve a user in your database.\n\t‚Ä¢\tStore the user‚Äôs details like email, OAuth provider ID, and access token.\n\t5.\tFrontend Integration (if applicable):\n\t‚Ä¢\tAdd ‚ÄúLogin with Google‚Äù or ‚ÄúLogin with GitHub‚Äù buttons.\n\t‚Ä¢\tRedirect to your backend‚Äôs OAuth endpoint when clicked.', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T12:15:54.291625', 'updated_at': '2025-01-16T19:22:36.239866'}, {'id': 62, 'name': 'Add OAuth integration for Google Login', 'description': 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.241200'}, {'id': 64, 'name': 'Setup project credentials for Google API', 'description': 'Generate client ID and secret from Google API Console for your application.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-01-16T19:22:36.242497'}, {'id': 67, 'name': 'Test Google OAuth flow', 'description': 'Verify the OAuth flow using test accounts and check the token exchange.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.243780'}, {'id': 65, 'name': 'Implement backend endpoints for Google OAuth', 'description': 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-01-16T19:22:36.244932'}, {'id': 63, 'name': 'Add OAuth integration for GitHub Login', 'description': 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.246358'}, {'id': 68, 'name': 'Register application in GitHub Developer Console', 'description': 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.247746'}, {'id': 69, 'name': 'Handle callback from GitHub', 'description': 'Implement the callback endpoint to process the authorization code from GitHub.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.248912'}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'description': 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 18, 'status': 'Not Started', 'created_at': '2025-01-07T19:53:50.085064', 'updated_at': '2025-01-16T19:22:36.250169'}, {'id': 100, 'name': '1.1 User Registration', 'description': 'As a user, I want to register with a username, email, and password so that I can create an account and access the system.\n\n**Acceptance Criteria:**\n\n‚Ä¢\tUser can input valid username, email, and password.\n‚Ä¢\tUsername and email must be unique.\n‚Ä¢\tErrors are displayed for invalid inputs or duplicate accounts.\n‚Ä¢\tPasswords must meet complexity requirements and be securely stored.\n‚Ä¢\tSuccessful registration redirects users to a login page.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:59:09.044667', 'updated_at': '2025-01-16T19:22:36.251812'}, {'id': 107, 'name': '1.1.1 Database Changes for User Registration', 'description': '1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.\n   CREATE TABLE public.users (\n       id SERIAL PRIMARY KEY,\n       username VARCHAR(50) UNIQUE NOT NULL,\n       email VARCHAR(100) UNIQUE NOT NULL,\n       password_hash VARCHAR(255) NOT NULL,\n       created_at TIMESTAMP DEFAULT NOW(),\n       updated_at TIMESTAMP DEFAULT NOW()\n);\n\n\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-11T11:36:20.238219'}, {'id': 108, 'name': '1.1.2 Backend API for Registration', 'description': '‚Ä¢\tCreate an endpoint POST /api/register:\n‚Ä¢\tValidate input fields.\n‚Ä¢\tHash the password using bcrypt or argon2.\n‚Ä¢\tInsert the user into the users table.\n‚Ä¢\tReturn success/failure responses.\ndddhfff\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:33.067643'}, {'id': 112, 'name': '1.2.2 Frontend Login Page', 'description': 'Develop a frontend form for user login with email and password inputs.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.683644'}, {'id': 109, 'name': '1.1.3 Create Frontend Registration Page', 'description': 'Develop a frontend form to collect user registration details.\n‚Ä¢\tAdd a form for username, email, and password inputs.\n‚Ä¢\tUse client-side validation (e.g., email format).\n‚Ä¢\tSend a POST request to /api/register.\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.684988'}, {'id': 110, 'name': '1.1.4 Unit Tests for Registration', 'description': 'Write unit tests for:\n\n‚Ä¢\tValid registration.\n‚Ä¢\tDuplicate username/email scenarios.\n‚Ä¢\tInvalid input handling.\nff', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.686902'}, {'id': 101, 'name': '1.2 User Login', 'description': 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n‚Ä¢\tUsers can log in with a valid email and password.\n‚Ä¢\tErrors are displayed for invalid credentials.\n‚Ä¢\tSuccessful login stores a session or JWT token.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:25:53.687936'}, {'id': 111, 'name': '1.2.1 Backend API for Login', 'description': 'Create POST /api/login endpoint to handle user login.\njjsjj', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.689096'}, {'id': 113, 'name': '1.2.3 Session Management', 'description': 'Implement secure session handling using cookies or JWT.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:20.968680'}, {'id': 114, 'name': '1.2.4 Unit Tests for Login', 'description': 'Write tests for successful and failed login attempts.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:22:36.265866'}, {'id': 106, 'name': 'Password Reset', 'description': 'As a user, I want to reset my password securely using email.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.267247'}, {'id': 128, 'name': 'Frontend Password Reset Page', 'description': 'Develop a page for users to enter a new password using a valid token.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.269158'}, {'id': 129, 'name': 'Testing Password Reset', 'description': 'Write tests for email delivery, token validation, and password updates.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.270849'}, {'id': 102, 'name': 'Logout', 'description': 'As a user, I want to log out so that I can end my session securely.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.272605'}, {'id': 117, 'name': 'Tests for Logout', 'description': 'Verify session invalidation and redirection to the login page.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.274575'}, {'id': 116, 'name': 'Frontend Logout Button', 'description': 'Add a logout button to the UI and handle session clearing.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-09T12:31:17.939784'}, {'id': 115, 'name': 'Backend API for Logout', 'description': 'Create POST /api/logout endpoint to invalidate user sessions.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.277547'}, {'id': 61, 'name': 'Parent task assignment', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-04T22:31:45.205815', 'updated_at': '2025-01-16T19:22:36.279012'}, {'id': 45, 'name': 'Display Default Value in Dropdown', 'description': 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.280493'}, {'id': 50, 'name': 'Retrieve Current Parent Task', 'description': 'Retrieve the current parent task‚Äôs ID and name from the backend.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'In Progress', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:22.274304'}, {'id': 51, 'name': 'Set Default Value', 'description': 'Set the default value in the dropdown based on the retrieved data.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 45, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 1, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.283309'}, {'id': 46, 'name': 'Search for Parent Tasks', 'description': 'Allow users to search for tasks dynamically in the dropdown by typing.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.284882'}, {'id': 54, 'name': 'Test Partial Matching', 'description': 'Ensure the search results update in real-time as the user types.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:29.251047'}, {'id': 47, 'name': 'Handle Large Datasets Efficiently', 'description': 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:26:23.067490'}, {'id': 56, 'name': 'Paginate API Responses', 'description': 'Implement server-side filtering and pagination for large datasets.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:16.233517'}, {'id': 55, 'name': 'Enable Lazy Loading', 'description': 'Enable lazy loading or virtualization in Virtual Select.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:08.099271'}, {'id': 48, 'name': 'Select and Deselect Parent Tasks', 'description': 'Allow users to select a parent task or deselect by choosing "None."', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:25:59.651639'}, {'id': 57, 'name': 'Ensure None Option Availability', 'description': 'Add ‚ÄúNone‚Äù as a selectable option and ensure it stays at the top of the list.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:51.310240'}, {'id': 58, 'name': 'Handle Selection Events', 'description': 'Implement event listeners to update the form‚Äôs state when the selection changes.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:43.569501'}, {'id': 49, 'name': 'Integrate Dropdown with Task Form', 'description': 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:25:36.133259'}, {'id': 59, 'name': 'Bind Dropdown to Form Field', 'description': 'Bind the dropdown to the form‚Äôs parent task field.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:15.491910'}, {'id': 60, 'name': 'Test Form Submission', 'description': 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:28.367797'}, {'id': 41, 'name': 'Implement Searchable Dropdown', 'description': 'As a user, I want a searchable dropdown for parent task assignment.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Completed', 'created_at': '2025-01-03T09:14:28.285904', 'updated_at': '2025-02-11T08:25:07.992524'}, {'id': 52, 'name': 'Add Search Box to Dropdown', 'description': 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:01.469601'}, {'id': 53, 'name': 'Implement AJAX Search', 'description': 'Implement AJAX-based search to fetch tasks dynamically from the backend.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:24:54.245010'}, {'id': 42, 'name': 'Choose Dropdown Library', 'description': 'Research and decide on the dropdown library to use.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-11T08:24:47.274896'}, {'id': 43, 'name': 'Integrate Dropdown Library', 'description': 'Integrate the chosen dropdown library into the project.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Completed', 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-11T08:24:33.908549'}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t‚Ä¢\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t‚Ä¢\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t‚Ä¢\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-02-11T08:24:26.494016'}, {'id': 85, 'name': 'Assign multiple contributors to a task', 'description': 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:32:39.466022', 'updated_at': '2025-02-11T08:24:21.069473'}, {'id': 90, 'name': 'Update frontend to display and manage multiple contributors', 'description': 'Allow users to view, add, or remove multiple contributors via the UI.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-11T08:24:13.204884'}, {'id': 88, 'name': 'Update database schema for multiple contributors', 'description': 'Modify the task table to support many-to-many relationships for contributors.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-11T08:24:05.873554'}, {'id': 89, 'name': 'Develop backend API for adding contributors to a task', 'description': 'Create endpoints to add, update, and remove contributors for a task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-11T08:23:58.436495'}, {'id': 86, 'name': 'Allow designation of task owner', 'description': 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:29.330562', 'updated_at': '2025-02-11T08:23:51.269557'}, {'id': 93, 'name': 'Update frontend to manage task ownership', 'description': 'Allow users to assign or update the task owner via the UI.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-11T08:23:42.771565'}, {'id': 91, 'name': 'Update database schema for task ownership', 'description': 'Add a column or relationship to assign a single owner per task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-11T08:23:33.670381'}, {'id': 92, 'name': 'Develop backend API for assigning task owner', 'description': 'Create endpoints to assign or update the owner of a task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-11T09:19:44.027744'}, {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-02-11T08:23:23.402442'}, {'id': 96, 'name': 'Allow admin users to create and customize contributor roles via frontend', 'description': 'Provide UI functionality for admins to manage contributor roles dynamically.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T08:23:13.139282'}, {'id': 94, 'name': 'Add database support for contributor roles', 'description': 'Introduce a roles table and link contributors to specific roles for tasks.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T08:22:56.181530'}, {'id': 95, 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T08:22:02.276492'}, {'id': 127, 'name': 'Backend API for Password Reset', 'description': 'Create endpoints to handle password reset requests and token validation.\ndfdf\n\nasdasd', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-10T23:59:50.734037'}, {'id': 126, 'name': 'Email Configuration for Password Reset', 'description': 'Configure email service to send password reset links.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.334340'}, {'id': 104, 'name': 'Middleware for Role Enforcement', 'description': 'As a system, I want to enforce role-based access to specific routes.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:23:40.346816'}, {'id': 122, 'name': 'Testing Role Enforcement', 'description': 'Write tests to ensure proper access control based on roles.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-01-16T19:23:58.185693'}, {'id': 121, 'name': 'Develop Role Enforcement Middleware', 'description': 'Implement middleware to check user roles for access control.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-01-16T19:23:58.187439'}, {'id': 105, 'name': 'Profile Management', 'description': 'As a user, I want to update my profile (username, email, password).', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.339830'}, {'id': 123, 'name': 'Backend API for Profile Management', 'description': 'Create PATCH /api/profile endpoint to update user details.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-01-16T19:24:19.678781'}, {'id': 125, 'name': 'Testing Profile Updates', 'description': 'Write tests for profile update functionality.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-01-16T19:24:19.680382'}]
2025-02-14 00:16:21,286 DEBUG: Task types: ['all', 'Epic', 'Subtask', 'User Story']
2025-02-14 00:16:21,286 DEBUG: Projects: [<Project Project Alpha (ID: 1)>, <Project Project Beta (ID: 2)>, <Project Project Gamma (ID: 3)>, <Project Project Theta (ID: 4)>, <Project Project Delta (ID: 5)>, <Project PMS - Feature Requests (ID: 7)>, <Project PMS - Backlog (ID: 6)>]
