diff --git a/.gitignore b/.gitignore
index 7735ef0..f44d30e 100644
--- a/.gitignore
+++ b/.gitignore
@@ -32,3 +32,32 @@ node_modules
 
 # docs
 docs/session_notes/*.md
+
+# miscellaneous
+scripts_for_documentation/
+scripts_for_testing/
+project_documentation/
+exports/
+out/
+
+extract_javascript_variables_from_files.js
+extract_python_variables_from_file.py
+extracted_variables.txt
+js_variables.txt
+kill_process_on_port_5000.py
+list_all_routes.py
+list_routes.py
+schema.sql
+
+# log files
+app.log
+app.log.1
+app.log.2
+app.log.3
+app.log.4
+app.log.5
+error.log
+myapp.log
+
+
+
diff --git a/app/routes/api_routes.py b/app/routes/api_routes.py
index b27ace1..f731227 100644
--- a/app/routes/api_routes.py
+++ b/app/routes/api_routes.py
@@ -1,6 +1,7 @@
 import logging
 import traceback
 from sqlalchemy.exc import IntegrityError
+from sqlalchemy.orm.attributes import flag_modified
 from flask import Blueprint, request, jsonify, make_response
 from flask_cors import CORS
 from flask_wtf.csrf import generate_csrf
@@ -63,110 +64,74 @@ def get_csrf_token():
 def list_tasks_json():
     """API endpoint to fetch tasks in JSON format for the Next.js frontend."""
     logger.info("Entering list_tasks_json route...")
-
-    # Extract query parameters
-    project_id = request.args.get("project_id", type=int)
-    contributor_id = request.args.get("contributor_id", type=int)
+    logger.info(f"📡 Incoming Filters: {request.args}")  # ✅ Add this here
+
+    # Extract query parameters (handling multiple selections)
+    project_ids = request.args.getlist("project_ids", type=int)  # ✅ Supports multiple project IDs
+    logger.debug(f"Received project_ids from request: {project_ids}")
+    contributor_ids = request.args.getlist("contributor_id", type=int)  # ✅ Supports multiple contributors
+    task_types = request.args.getlist("task_type")  # ✅ Supports multiple task types
+    statuses = request.args.getlist("status")  # ✅ Supports multiple statuses
+    hide_completed = request.args.get("hide_completed", "false").lower() == "true"  # ✅ Hide completed tasks checkbox
     show_archived = request.args.get("show_archived", "false").lower() == "true"
-    task_type = request.args.get("task_type", "all")
-    completion_status = request.args.get("completion_status")
     hierarchical = request.args.get("hierarchical", "false").lower() == "true"
     page = request.args.get("page", 1, type=int)
     per_page = request.args.get("per_page", 700, type=int)
 
-    filters = {
-        "is_archived": show_archived,
-        "contributor_id": contributor_id,
-        "task_type": task_type if task_type != "all" else None,
-        "completion_status": completion_status,
-        "project_id": project_id,
-    }
-    filters = {k: v for k, v in filters.items() if v is not None}
+    # Build filtering conditions dynamically
+    filters = []
+    if project_ids:
+        filters.append(Task.project_id.in_(project_ids))
+    if contributor_ids:
+        filters.append(Task.contributor_id.in_(contributor_ids))
+    if task_types:
+        filters.append(Task.task_type.in_(task_types))
+    if statuses:
+        filters.append(Task.status.in_(statuses))
+    if hide_completed:
+        filters.append(Task.status != "Completed")  # ✅ Exclude completed tasks
+    if not show_archived:
+        filters.append(Task.is_archived == False)
+
     logger.debug(f"Filters used in API: {filters}")
 
     try:
-        if project_id:
-            if hierarchical:
-                # 🔥 Optimized Recursive SQL Query for Hierarchical Data
-                sql = """
-                WITH RECURSIVE task_hierarchy AS (
-                    SELECT 
-                        id, name, description, task_type, is_archived, completed, 
-                        parent_id, project_id, contributor_id, story_points, status, sort_order
-                    FROM task
-                    WHERE project_id = %s AND parent_id IS NULL
-                    UNION ALL
-                    SELECT 
-                        t.id, t.name, t.description, t.task_type, t.is_archived, t.completed, 
-                        t.parent_id, t.project_id, t.contributor_id, t.story_points, t.status, t.sort_order
-                    FROM task t
-                    INNER JOIN task_hierarchy th ON t.parent_id = th.id
-                )
-                SELECT * FROM task_hierarchy ORDER BY sort_order;
-                """
-                result = db.session.execute(sql, (project_id,))
-                all_tasks = [dict(row) for row in result]
-
-                # Convert flat result into a nested structure
-                task_map = {task["id"]: task for task in all_tasks}
-                for task in all_tasks:
-                    task.setdefault("children", [])
-                    if task["parent_id"]:
-                        task_map[task["parent_id"]]["children"].append(task)
-
-                tasks = [task for task in all_tasks if task["parent_id"] is None]
-
-            else:
-                # 🔥 Optimized Flat Query with Pagination
-                sql = """
-                SELECT id, name, description, task_type, is_archived, completed, 
-                       parent_id, project_id, contributor_id, story_points, status, sort_order
-                FROM task
-                WHERE project_id = %s
-                ORDER BY sort_order
-                LIMIT %s OFFSET %s;
-                """
-                result = db.session.execute(sql, (project_id, per_page, (page - 1) * per_page))
-                tasks = [dict(row) for row in result]
-
-            # Pagination metadata
-            pagination = {
-                "page": page,
-                "per_page": per_page,
-                "total": len(tasks),
-                "pages": (len(tasks) + per_page - 1) // per_page,
-                "page_numbers": TaskService.generate_page_numbers(
-                    current_page=page,
-                    total_pages=(len(tasks) + per_page - 1) // per_page
-                ),
-            }
+        # Create base query with filters dynamically applied
+        query = Task.query.filter(*filters).order_by(Task.sort_order)
 
+        # Handle hierarchical fetching (if enabled)
+        if hierarchical:
+            tasks = TaskService.fetch_hierarchical_tasks(query)
         else:
-            # 🔥 Use TaskService to Filter & Paginate Tasks Without Project Filtering
-            tasks_query = TaskService.filter_tasks(filters=filters)
-            pagination_obj = tasks_query.paginate(page=page, per_page=per_page, error_out=False)
+            pagination_obj = query.paginate(page=page, per_page=per_page, error_out=False)
             tasks = [task.to_dict() for task in pagination_obj.items]
 
-            pagination = {
-                "page": pagination_obj.page,
-                "per_page": pagination_obj.per_page,
-                "total": pagination_obj.total,
-                "pages": pagination_obj.pages,
-                "page_numbers": TaskService.generate_page_numbers(
-                    current_page=pagination_obj.page,
-                    total_pages=pagination_obj.pages
-                ),
-            }
-
-        # Fetch additional metadata
-        task_types = ["all"] + [t[0] for t in db.session.query(Task.task_type).distinct()]
+        # Pagination metadata
+        pagination = {
+            "page": pagination_obj.page,
+            "per_page": pagination_obj.per_page,
+            "total": pagination_obj.total,
+            "pages": pagination_obj.pages,
+            "page_numbers": TaskService.generate_page_numbers(
+                current_page=pagination_obj.page,
+                total_pages=pagination_obj.pages
+            ),
+        }
+
+        # Fetch additional metadata for frontend filters
+        task_types_available = ["all"] + [t[0] for t in db.session.query(Task.task_type).distinct()]
         projects = Project.query.options(db.lazyload(Project.contributors)).all()
 
         return jsonify({
             "tasks": tasks,
             "pagination": pagination,
-            "filters": filters,
-            "task_types": task_types,
+            "filters": {
+                "project_ids": project_ids,
+                "task_types": task_types,
+                "statuses": statuses,
+                "hide_completed": hide_completed,
+            },
+            "task_types_available": task_types_available,
             "projects": [{"id": p.id, "name": p.name} for p in projects],
         })
 
@@ -632,6 +597,7 @@ def update_task(data, task_id):
                     if task.priority != data["priority"]:  # ✅ Prevent redundant updates
                         task.priority = data["priority"]
                         updated_fields.append("priority")
+                        flag_modified(task, "priority") # ✅ Force SQLAlchemy to detect the change
                         logger.debug(f"Updated priority for Task ID {task_id}")
 
         # ✅ Handle general task field updates
@@ -643,9 +609,10 @@ def update_task(data, task_id):
             task.description = data["description"]
             updated_fields.append("description")
 
-        if "parent_id" in data and data["parent_id"] != task.parent_id:
-            task.parent_id = data["parent_id"]
-            updated_fields.append("parent_id")
+        if "parent_id" in data:
+            if data["parent_id"] is not None and data["parent_id"] != task.parent_id:
+                task.parent_id = data["parent_id"]
+                updated_fields.append("parent_id")
 
         if "project_id" in data and data["project_id"] != task.project_id:
             task.project_id = data["project_id"]
@@ -683,6 +650,7 @@ def update_task(data, task_id):
             task.updated_at = datetime.utcnow()
             db.session.commit()
             logger.info(f"Task ID {task_id} updated successfully. Updated fields: {updated_fields}")
+            logger.info(f"Updated Priority Value: {task.priority}")  # ✅ Log priority value before returning
 
             # ✅ WebSocket event for task update
             socketio.emit("update_task", {
diff --git a/app/tasks/models.py b/app/tasks/models.py
index 531f8a7..658d1d1 100644
--- a/app/tasks/models.py
+++ b/app/tasks/models.py
@@ -33,12 +33,16 @@ class Task(db.Model):
     @validates("priority", "epic_priority")
     def validate_priority(self, key, value):
         logger.debug(f"🔍 Validating priority: key={key}, value={value}, task_type={self.task_type}")
-        
+
         if self.task_type == "Epic" and key == "priority":
             raise ValueError("Epics cannot have priority.")
+
         if self.task_type != "Epic" and key == "epic_priority":
             logger.warning(f"🚨 Unexpected epic_priority for non-Epic task: {self.to_dict()}")
-            return None  # ✅ Instead of raising an error, just ignore it for now
+            return None  
+
+        logger.info(f"✅ Priority validation passed: {value}")  # ✅ Add this log
+        return value
     
     
     is_archived = db.Column(db.Boolean, default=False, index=True)
@@ -245,6 +249,7 @@ class Task(db.Model):
         logger.info("No circular reference detected.")
             
     def to_dict(self):
+        logger.info(f"🔍 Task {self.id} - priority before response: {self.priority}")
         return {
             "id": self.id,
             "name": self.name,
diff --git a/app/tasks/routes.py b/app/tasks/routes.py
index b747506..b214360 100644
--- a/app/tasks/routes.py
+++ b/app/tasks/routes.py
@@ -340,7 +340,7 @@ def available_tasks():
         task_type = request.args.get("task_type", type=str)
         search_term = request.args.get("term", type=str, default="")
         project_id = request.args.get("project_id", type=int)
-        limit = request.args.get("limit", 30, type=int)
+        limit = request.args.get("limit", 50, type=int)
         page = request.args.get("page", 1, type=int)
 
         # Log query parameters
diff --git a/frontend/package-lock.json b/frontend/package-lock.json
index ffb82f0..25ec090 100644
--- a/frontend/package-lock.json
+++ b/frontend/package-lock.json
@@ -34,7 +34,8 @@
       },
       "devDependencies": {
         "@eslint/eslintrc": "^3",
-        "eslint": "^9",
+        "@next/eslint-plugin-next": "^15.2.1",
+        "eslint": "^9.22.0",
         "eslint-config-next": "15.1.7",
         "postcss": "^8",
         "tailwindcss": "^3.4.1"
@@ -54,9 +55,9 @@
       }
     },
     "node_modules/@babel/runtime": {
-      "version": "7.26.7",
-      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.26.7.tgz",
-      "integrity": "sha512-AOPI3D+a8dXnja+iwsUqGRjr1BbZIe771sXdapOtYI531gSqpi92vXivKcq2asu/DFpdl1ceFAKZyRzK2PCVcQ==",
+      "version": "7.26.9",
+      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.26.9.tgz",
+      "integrity": "sha512-aA63XwOkcl4xxQa3HjPMqOP6LiK0ZDv3mUPYEFXkpHbaFjtGggE1A61FjFzJnB+p7/oy2gA8E+rcBNl/zC1tMg==",
       "license": "MIT",
       "dependencies": {
         "regenerator-runtime": "^0.14.0"
@@ -132,10 +133,20 @@
         "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
       }
     },
+    "node_modules/@eslint/config-helpers": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/@eslint/config-helpers/-/config-helpers-0.1.0.tgz",
+      "integrity": "sha512-kLrdPDJE1ckPo94kmPPf9Hfd0DU0Jw6oKYrhe+pwSC0iTUInmTa+w6fw8sGgcfkFJGNdWOUeOaDM4quW4a7OkA==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      }
+    },
     "node_modules/@eslint/core": {
-      "version": "0.11.0",
-      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.11.0.tgz",
-      "integrity": "sha512-DWUB2pksgNEb6Bz2fggIy1wh6fGgZP4Xyy/Mt0QZPiloKKXerbqq9D3SBQTlCRYOrcRPu4vuz+CGjwdfqxnoWA==",
+      "version": "0.12.0",
+      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.12.0.tgz",
+      "integrity": "sha512-cmrR6pytBuSMTaBweKoGMwu3EiHiEC+DoyupPmlZ0HxBJBtIxwe+j/E4XPIKNx+Q74c8lXKPwYawBf5glsTkHg==",
       "dev": true,
       "license": "Apache-2.0",
       "dependencies": {
@@ -146,9 +157,9 @@
       }
     },
     "node_modules/@eslint/eslintrc": {
-      "version": "3.2.0",
-      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.2.0.tgz",
-      "integrity": "sha512-grOjVNN8P3hjJn/eIETF1wwd12DdnwFDoyceUJLYYdkpbwq3nLi+4fqrTAONx7XDALqlL220wC/RHSC/QTI/0w==",
+      "version": "3.3.0",
+      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.3.0.tgz",
+      "integrity": "sha512-yaVPAiNAalnCZedKLdR21GOGILMLKPyqSLWaAjQFvYA2i/ciDi8ArYVr69Anohb6cH2Ukhqti4aFnYyPm8wdwQ==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -170,9 +181,9 @@
       }
     },
     "node_modules/@eslint/js": {
-      "version": "9.20.0",
-      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.20.0.tgz",
-      "integrity": "sha512-iZA07H9io9Wn836aVTytRaNqh00Sad+EamwOVJT12GTLw1VGMFV/4JaME+JjLtr9fiGaoWgYnS54wrfWsSs4oQ==",
+      "version": "9.22.0",
+      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.22.0.tgz",
+      "integrity": "sha512-vLFajx9o8d1/oL2ZkpMYbkLv8nDB6yaIwFNt7nI4+I80U/z03SxmfOMsLbvWr3p7C+Wnoh//aOu2pQW8cS0HCQ==",
       "dev": true,
       "license": "MIT",
       "engines": {
@@ -190,32 +201,19 @@
       }
     },
     "node_modules/@eslint/plugin-kit": {
-      "version": "0.2.5",
-      "resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.2.5.tgz",
-      "integrity": "sha512-lB05FkqEdUg2AA0xEbUz0SnkXT1LcCTa438W4IWTUh4hdOnVbQyOJ81OrDXsJk/LSiJHubgGEFoR5EHq1NsH1A==",
+      "version": "0.2.7",
+      "resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.2.7.tgz",
+      "integrity": "sha512-JubJ5B2pJ4k4yGxaNLdbjrnk9d/iDz6/q8wOilpIowd6PJPgaxCuHBnBszq7Ce2TyMrywm5r4PnKm6V3iiZF+g==",
       "dev": true,
       "license": "Apache-2.0",
       "dependencies": {
-        "@eslint/core": "^0.10.0",
+        "@eslint/core": "^0.12.0",
         "levn": "^0.4.1"
       },
       "engines": {
         "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
       }
     },
-    "node_modules/@eslint/plugin-kit/node_modules/@eslint/core": {
-      "version": "0.10.0",
-      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.10.0.tgz",
-      "integrity": "sha512-gFHJ+xBOo4G3WRlR1e/3G8A6/KZAH6zcE/hkLRCZTi/B9avAG365QhFA8uOGzTMqgTghpn7/fSnscW++dpMSAw==",
-      "dev": true,
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@types/json-schema": "^7.0.15"
-      },
-      "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
-      }
-    },
     "node_modules/@floating-ui/core": {
       "version": "1.6.9",
       "resolved": "https://registry.npmjs.org/@floating-ui/core/-/core-1.6.9.tgz",
@@ -320,9 +318,9 @@
       }
     },
     "node_modules/@humanwhocodes/retry": {
-      "version": "0.4.1",
-      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.1.tgz",
-      "integrity": "sha512-c7hNEllBlenFTHBky65mhq8WD2kbN9Q6gk0bTk8lSBvc554jpXSkST1iePudpt7+A/AQvuHs9EMqjHDXMY1lrA==",
+      "version": "0.4.2",
+      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.2.tgz",
+      "integrity": "sha512-xeO57FpIu4p1Ri3Jq/EXq4ClRm86dVF2z/+kvFnyqVYRavTZmaFaUBbWCOuuTh0o/g7DSsk6kc2vrS4Vl5oPOQ==",
       "dev": true,
       "license": "Apache-2.0",
       "engines": {
@@ -772,9 +770,9 @@
       "license": "MIT"
     },
     "node_modules/@next/eslint-plugin-next": {
-      "version": "15.1.7",
-      "resolved": "https://registry.npmjs.org/@next/eslint-plugin-next/-/eslint-plugin-next-15.1.7.tgz",
-      "integrity": "sha512-kRP7RjSxfTO13NE317ek3mSGzoZlI33nc/i5hs1KaWpK+egs85xg0DJ4p32QEiHnR0mVjuUfhRIun7awqfL7pQ==",
+      "version": "15.2.1",
+      "resolved": "https://registry.npmjs.org/@next/eslint-plugin-next/-/eslint-plugin-next-15.2.1.tgz",
+      "integrity": "sha512-6ppeToFd02z38SllzWxayLxjjNfzvc7Wm07gQOKSLjyASvKcXjNStZrLXMHuaWkhjqxe+cnhb2uzfWXm1VEj/Q==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -1253,19 +1251,6 @@
         "url": "https://opencollective.com/parcel"
       }
     },
-    "node_modules/@parcel/watcher/node_modules/detect-libc": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-1.0.3.tgz",
-      "integrity": "sha512-pGjwhsmsp4kL2RTz08wcOlGN83otlqHeD/Z5T8GXZB+/YcpQ/dgo+lbU8ZsGxV0HIvqqxo9l7mqYwyYMD9bKDg==",
-      "license": "Apache-2.0",
-      "optional": true,
-      "bin": {
-        "detect-libc": "bin/detect-libc.js"
-      },
-      "engines": {
-        "node": ">=0.10"
-      }
-    },
     "node_modules/@pkgjs/parseargs": {
       "version": "0.11.0",
       "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
@@ -2165,17 +2150,17 @@
       "license": "MIT"
     },
     "node_modules/@typescript-eslint/eslint-plugin": {
-      "version": "8.24.0",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-8.24.0.tgz",
-      "integrity": "sha512-aFcXEJJCI4gUdXgoo/j9udUYIHgF23MFkg09LFz2dzEmU0+1Plk4rQWv/IYKvPHAtlkkGoB3m5e6oUp+JPsNaQ==",
+      "version": "8.26.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-8.26.0.tgz",
+      "integrity": "sha512-cLr1J6pe56zjKYajK6SSSre6nl1Gj6xDp1TY0trpgPzjVbgDwd09v2Ws37LABxzkicmUjhEeg/fAUjPJJB1v5Q==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
         "@eslint-community/regexpp": "^4.10.0",
-        "@typescript-eslint/scope-manager": "8.24.0",
-        "@typescript-eslint/type-utils": "8.24.0",
-        "@typescript-eslint/utils": "8.24.0",
-        "@typescript-eslint/visitor-keys": "8.24.0",
+        "@typescript-eslint/scope-manager": "8.26.0",
+        "@typescript-eslint/type-utils": "8.26.0",
+        "@typescript-eslint/utils": "8.26.0",
+        "@typescript-eslint/visitor-keys": "8.26.0",
         "graphemer": "^1.4.0",
         "ignore": "^5.3.1",
         "natural-compare": "^1.4.0",
@@ -2191,20 +2176,20 @@
       "peerDependencies": {
         "@typescript-eslint/parser": "^8.0.0 || ^8.0.0-alpha.0",
         "eslint": "^8.57.0 || ^9.0.0",
-        "typescript": ">=4.8.4 <5.8.0"
+        "typescript": ">=4.8.4 <5.9.0"
       }
     },
     "node_modules/@typescript-eslint/parser": {
-      "version": "8.24.0",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-8.24.0.tgz",
-      "integrity": "sha512-MFDaO9CYiard9j9VepMNa9MTcqVvSny2N4hkY6roquzj8pdCBRENhErrteaQuu7Yjn1ppk0v1/ZF9CG3KIlrTA==",
+      "version": "8.26.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-8.26.0.tgz",
+      "integrity": "sha512-mNtXP9LTVBy14ZF3o7JG69gRPBK/2QWtQd0j0oH26HcY/foyJJau6pNUez7QrM5UHnSvwlQcJXKsk0I99B9pOA==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@typescript-eslint/scope-manager": "8.24.0",
-        "@typescript-eslint/types": "8.24.0",
-        "@typescript-eslint/typescript-estree": "8.24.0",
-        "@typescript-eslint/visitor-keys": "8.24.0",
+        "@typescript-eslint/scope-manager": "8.26.0",
+        "@typescript-eslint/types": "8.26.0",
+        "@typescript-eslint/typescript-estree": "8.26.0",
+        "@typescript-eslint/visitor-keys": "8.26.0",
         "debug": "^4.3.4"
       },
       "engines": {
@@ -2216,18 +2201,18 @@
       },
       "peerDependencies": {
         "eslint": "^8.57.0 || ^9.0.0",
-        "typescript": ">=4.8.4 <5.8.0"
+        "typescript": ">=4.8.4 <5.9.0"
       }
     },
     "node_modules/@typescript-eslint/scope-manager": {
-      "version": "8.24.0",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-8.24.0.tgz",
-      "integrity": "sha512-HZIX0UByphEtdVBKaQBgTDdn9z16l4aTUz8e8zPQnyxwHBtf5vtl1L+OhH+m1FGV9DrRmoDuYKqzVrvWDcDozw==",
+      "version": "8.26.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-8.26.0.tgz",
+      "integrity": "sha512-E0ntLvsfPqnPwng8b8y4OGuzh/iIOm2z8U3S9zic2TeMLW61u5IH2Q1wu0oSTkfrSzwbDJIB/Lm8O3//8BWMPA==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@typescript-eslint/types": "8.24.0",
-        "@typescript-eslint/visitor-keys": "8.24.0"
+        "@typescript-eslint/types": "8.26.0",
+        "@typescript-eslint/visitor-keys": "8.26.0"
       },
       "engines": {
         "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
@@ -2238,14 +2223,14 @@
       }
     },
     "node_modules/@typescript-eslint/type-utils": {
-      "version": "8.24.0",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-8.24.0.tgz",
-      "integrity": "sha512-8fitJudrnY8aq0F1wMiPM1UUgiXQRJ5i8tFjq9kGfRajU+dbPyOuHbl0qRopLEidy0MwqgTHDt6CnSeXanNIwA==",
+      "version": "8.26.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-8.26.0.tgz",
+      "integrity": "sha512-ruk0RNChLKz3zKGn2LwXuVoeBcUMh+jaqzN461uMMdxy5H9epZqIBtYj7UiPXRuOpaALXGbmRuZQhmwHhaS04Q==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@typescript-eslint/typescript-estree": "8.24.0",
-        "@typescript-eslint/utils": "8.24.0",
+        "@typescript-eslint/typescript-estree": "8.26.0",
+        "@typescript-eslint/utils": "8.26.0",
         "debug": "^4.3.4",
         "ts-api-utils": "^2.0.1"
       },
@@ -2258,13 +2243,13 @@
       },
       "peerDependencies": {
         "eslint": "^8.57.0 || ^9.0.0",
-        "typescript": ">=4.8.4 <5.8.0"
+        "typescript": ">=4.8.4 <5.9.0"
       }
     },
     "node_modules/@typescript-eslint/types": {
-      "version": "8.24.0",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-8.24.0.tgz",
-      "integrity": "sha512-VacJCBTyje7HGAw7xp11q439A+zeGG0p0/p2zsZwpnMzjPB5WteaWqt4g2iysgGFafrqvyLWqq6ZPZAOCoefCw==",
+      "version": "8.26.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-8.26.0.tgz",
+      "integrity": "sha512-89B1eP3tnpr9A8L6PZlSjBvnJhWXtYfZhECqlBl1D9Lme9mHO6iWlsprBtVenQvY1HMhax1mWOjhtL3fh/u+pA==",
       "dev": true,
       "license": "MIT",
       "engines": {
@@ -2276,14 +2261,14 @@
       }
     },
     "node_modules/@typescript-eslint/typescript-estree": {
-      "version": "8.24.0",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-8.24.0.tgz",
-      "integrity": "sha512-ITjYcP0+8kbsvT9bysygfIfb+hBj6koDsu37JZG7xrCiy3fPJyNmfVtaGsgTUSEuTzcvME5YI5uyL5LD1EV5ZQ==",
+      "version": "8.26.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-8.26.0.tgz",
+      "integrity": "sha512-tiJ1Hvy/V/oMVRTbEOIeemA2XoylimlDQ03CgPPNaHYZbpsc78Hmngnt+WXZfJX1pjQ711V7g0H7cSJThGYfPQ==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@typescript-eslint/types": "8.24.0",
-        "@typescript-eslint/visitor-keys": "8.24.0",
+        "@typescript-eslint/types": "8.26.0",
+        "@typescript-eslint/visitor-keys": "8.26.0",
         "debug": "^4.3.4",
         "fast-glob": "^3.3.2",
         "is-glob": "^4.0.3",
@@ -2299,7 +2284,7 @@
         "url": "https://opencollective.com/typescript-eslint"
       },
       "peerDependencies": {
-        "typescript": ">=4.8.4 <5.8.0"
+        "typescript": ">=4.8.4 <5.9.0"
       }
     },
     "node_modules/@typescript-eslint/typescript-estree/node_modules/brace-expansion": {
@@ -2359,16 +2344,16 @@
       }
     },
     "node_modules/@typescript-eslint/utils": {
-      "version": "8.24.0",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-8.24.0.tgz",
-      "integrity": "sha512-07rLuUBElvvEb1ICnafYWr4hk8/U7X9RDCOqd9JcAMtjh/9oRmcfN4yGzbPVirgMR0+HLVHehmu19CWeh7fsmQ==",
+      "version": "8.26.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-8.26.0.tgz",
+      "integrity": "sha512-2L2tU3FVwhvU14LndnQCA2frYC8JnPDVKyQtWFPf8IYFMt/ykEN1bPolNhNbCVgOmdzTlWdusCTKA/9nKrf8Ig==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
         "@eslint-community/eslint-utils": "^4.4.0",
-        "@typescript-eslint/scope-manager": "8.24.0",
-        "@typescript-eslint/types": "8.24.0",
-        "@typescript-eslint/typescript-estree": "8.24.0"
+        "@typescript-eslint/scope-manager": "8.26.0",
+        "@typescript-eslint/types": "8.26.0",
+        "@typescript-eslint/typescript-estree": "8.26.0"
       },
       "engines": {
         "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
@@ -2379,17 +2364,17 @@
       },
       "peerDependencies": {
         "eslint": "^8.57.0 || ^9.0.0",
-        "typescript": ">=4.8.4 <5.8.0"
+        "typescript": ">=4.8.4 <5.9.0"
       }
     },
     "node_modules/@typescript-eslint/visitor-keys": {
-      "version": "8.24.0",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-8.24.0.tgz",
-      "integrity": "sha512-kArLq83QxGLbuHrTMoOEWO+l2MwsNS2TGISEdx8xgqpkbytB07XmlQyQdNDrCc1ecSqx0cnmhGvpX+VBwqqSkg==",
+      "version": "8.26.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-8.26.0.tgz",
+      "integrity": "sha512-2z8JQJWAzPdDd51dRQ/oqIJxe99/hoLIqmf8RMCAJQtYDc535W/Jt2+RTP4bP0aKeBG1F65yjIZuczOXCmbWwg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@typescript-eslint/types": "8.24.0",
+        "@typescript-eslint/types": "8.26.0",
         "eslint-visitor-keys": "^4.2.0"
       },
       "engines": {
@@ -2401,9 +2386,9 @@
       }
     },
     "node_modules/acorn": {
-      "version": "8.14.0",
-      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.14.0.tgz",
-      "integrity": "sha512-cl669nCJTZBsL97OF4kUQm5g5hC2uihk0NxY3WENAC0TYdILVkAyHymAntgxGkl7K+t0cXIrH5siy5S4XkFycA==",
+      "version": "8.14.1",
+      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.14.1.tgz",
+      "integrity": "sha512-OvQ/2pUDKmgfCg++xsTX1wGxfTaszcHVcTctW4UJB4hibJx2HXxxO5UmVgyjMa+ZDsiaf5wWLXYpRWMmBI0QHg==",
       "dev": true,
       "license": "MIT",
       "bin": {
@@ -2716,9 +2701,9 @@
       }
     },
     "node_modules/axe-core": {
-      "version": "4.10.2",
-      "resolved": "https://registry.npmjs.org/axe-core/-/axe-core-4.10.2.tgz",
-      "integrity": "sha512-RE3mdQ7P3FRSe7eqCWoeQ/Z9QXrtniSjp1wUjt5nRC3WIpz5rSCve6o3fsZ2aCpJtrZjSZgjwXAoTO5k4tEI0w==",
+      "version": "4.10.3",
+      "resolved": "https://registry.npmjs.org/axe-core/-/axe-core-4.10.3.tgz",
+      "integrity": "sha512-Xm7bpRXnDSX2YE2YFfBk2FnF0ep6tmG7xPh8iHee8MIcrgq762Nkce856dYtJYLkuIoYZvGfTs/PbZhideTcEg==",
       "dev": true,
       "license": "MPL-2.0",
       "engines": {
@@ -2840,14 +2825,14 @@
       }
     },
     "node_modules/call-bound": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.3.tgz",
-      "integrity": "sha512-YTd+6wGlNlPxSuri7Y6X8tY2dmm12UMH66RpKMhiX6rsk5wXXnYgbUcOt8kiS31/AjfoTOvCsE+w8nZQLQnzHA==",
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
+      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "call-bind-apply-helpers": "^1.0.1",
-        "get-intrinsic": "^1.2.6"
+        "call-bind-apply-helpers": "^1.0.2",
+        "get-intrinsic": "^1.3.0"
       },
       "engines": {
         "node": ">= 0.4"
@@ -2877,9 +2862,9 @@
       }
     },
     "node_modules/caniuse-lite": {
-      "version": "1.0.30001699",
-      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001699.tgz",
-      "integrity": "sha512-b+uH5BakXZ9Do9iK+CkDmctUSEqZl+SP056vc5usa0PL+ev5OHw003rZXcnjNDv3L8P5j6rwT6C0BPKSikW08w==",
+      "version": "1.0.30001702",
+      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001702.tgz",
+      "integrity": "sha512-LoPe/D7zioC0REI5W73PeR1e1MLCipRGq/VkovJnd6Df+QVqT+vT33OXCp8QUd7kA7RZrHWxb1B36OQKI/0gOA==",
       "funding": [
         {
           "type": "opencollective",
@@ -2914,41 +2899,18 @@
       }
     },
     "node_modules/chokidar": {
-      "version": "3.6.0",
-      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
-      "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
-      "dev": true,
+      "version": "4.0.3",
+      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-4.0.3.tgz",
+      "integrity": "sha512-Qgzu8kfBvo+cA4962jnP1KkS6Dop5NS6g7R5LFYJr4b8Ub94PPQXUksCw9PvXoeXPRRddRNC5C1JQUR2SMGtnA==",
       "license": "MIT",
       "dependencies": {
-        "anymatch": "~3.1.2",
-        "braces": "~3.0.2",
-        "glob-parent": "~5.1.2",
-        "is-binary-path": "~2.1.0",
-        "is-glob": "~4.0.1",
-        "normalize-path": "~3.0.0",
-        "readdirp": "~3.6.0"
+        "readdirp": "^4.0.1"
       },
       "engines": {
-        "node": ">= 8.10.0"
+        "node": ">= 14.16.0"
       },
       "funding": {
         "url": "https://paulmillr.com/funding/"
-      },
-      "optionalDependencies": {
-        "fsevents": "~2.3.2"
-      }
-    },
-    "node_modules/chokidar/node_modules/glob-parent": {
-      "version": "5.1.2",
-      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
-      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "is-glob": "^4.0.1"
-      },
-      "engines": {
-        "node": ">= 6"
       }
     },
     "node_modules/classnames": {
@@ -3209,13 +3171,16 @@
       }
     },
     "node_modules/detect-libc": {
-      "version": "2.0.3",
-      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.3.tgz",
-      "integrity": "sha512-bwy0MGW55bG41VqxxypOsdSdGqLwXPI/focwgTYCFMbdUiBAxLg9CFzG08sz2aqzknwiX7Hkl0bQENjg8iLByw==",
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-1.0.3.tgz",
+      "integrity": "sha512-pGjwhsmsp4kL2RTz08wcOlGN83otlqHeD/Z5T8GXZB+/YcpQ/dgo+lbU8ZsGxV0HIvqqxo9l7mqYwyYMD9bKDg==",
       "license": "Apache-2.0",
       "optional": true,
+      "bin": {
+        "detect-libc": "bin/detect-libc.js"
+      },
       "engines": {
-        "node": ">=8"
+        "node": ">=0.10"
       }
     },
     "node_modules/detect-node-es": {
@@ -3545,22 +3510,23 @@
       }
     },
     "node_modules/eslint": {
-      "version": "9.20.1",
-      "resolved": "https://registry.npmjs.org/eslint/-/eslint-9.20.1.tgz",
-      "integrity": "sha512-m1mM33o6dBUjxl2qb6wv6nGNwCAsns1eKtaQ4l/NPHeTvhiUPbtdfMyktxN4B3fgHIgsYh1VT3V9txblpQHq+g==",
+      "version": "9.22.0",
+      "resolved": "https://registry.npmjs.org/eslint/-/eslint-9.22.0.tgz",
+      "integrity": "sha512-9V/QURhsRN40xuHXWjV64yvrzMjcz7ZyNoF2jJFmy9j/SLk0u1OLSZgXi28MrXjymnjEGSR80WCdab3RGMDveQ==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
         "@eslint-community/eslint-utils": "^4.2.0",
         "@eslint-community/regexpp": "^4.12.1",
-        "@eslint/config-array": "^0.19.0",
-        "@eslint/core": "^0.11.0",
-        "@eslint/eslintrc": "^3.2.0",
-        "@eslint/js": "9.20.0",
-        "@eslint/plugin-kit": "^0.2.5",
+        "@eslint/config-array": "^0.19.2",
+        "@eslint/config-helpers": "^0.1.0",
+        "@eslint/core": "^0.12.0",
+        "@eslint/eslintrc": "^3.3.0",
+        "@eslint/js": "9.22.0",
+        "@eslint/plugin-kit": "^0.2.7",
         "@humanfs/node": "^0.16.6",
         "@humanwhocodes/module-importer": "^1.0.1",
-        "@humanwhocodes/retry": "^0.4.1",
+        "@humanwhocodes/retry": "^0.4.2",
         "@types/estree": "^1.0.6",
         "@types/json-schema": "^7.0.15",
         "ajv": "^6.12.4",
@@ -3568,7 +3534,7 @@
         "cross-spawn": "^7.0.6",
         "debug": "^4.3.2",
         "escape-string-regexp": "^4.0.0",
-        "eslint-scope": "^8.2.0",
+        "eslint-scope": "^8.3.0",
         "eslint-visitor-keys": "^4.2.0",
         "espree": "^10.3.0",
         "esquery": "^1.5.0",
@@ -3632,6 +3598,16 @@
         }
       }
     },
+    "node_modules/eslint-config-next/node_modules/@next/eslint-plugin-next": {
+      "version": "15.1.7",
+      "resolved": "https://registry.npmjs.org/@next/eslint-plugin-next/-/eslint-plugin-next-15.1.7.tgz",
+      "integrity": "sha512-kRP7RjSxfTO13NE317ek3mSGzoZlI33nc/i5hs1KaWpK+egs85xg0DJ4p32QEiHnR0mVjuUfhRIun7awqfL7pQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "fast-glob": "3.3.1"
+      }
+    },
     "node_modules/eslint-import-resolver-node": {
       "version": "0.3.9",
       "resolved": "https://registry.npmjs.org/eslint-import-resolver-node/-/eslint-import-resolver-node-0.3.9.tgz",
@@ -3655,20 +3631,19 @@
       }
     },
     "node_modules/eslint-import-resolver-typescript": {
-      "version": "3.7.0",
-      "resolved": "https://registry.npmjs.org/eslint-import-resolver-typescript/-/eslint-import-resolver-typescript-3.7.0.tgz",
-      "integrity": "sha512-Vrwyi8HHxY97K5ebydMtffsWAn1SCR9eol49eCd5fJS4O1WV7PaAjbcjmbfJJSMz/t4Mal212Uz/fQZrOB8mow==",
+      "version": "3.8.3",
+      "resolved": "https://registry.npmjs.org/eslint-import-resolver-typescript/-/eslint-import-resolver-typescript-3.8.3.tgz",
+      "integrity": "sha512-A0bu4Ks2QqDWNpeEgTQMPTngaMhuDu4yv6xpftBMAf+1ziXnpx+eSR1WRfoPTe2BAiAjHFZ7kSNx1fvr5g5pmQ==",
       "dev": true,
       "license": "ISC",
       "dependencies": {
         "@nolyfill/is-core-module": "1.0.39",
         "debug": "^4.3.7",
         "enhanced-resolve": "^5.15.0",
-        "fast-glob": "^3.3.2",
-        "get-tsconfig": "^4.7.5",
+        "get-tsconfig": "^4.10.0",
         "is-bun-module": "^1.0.2",
-        "is-glob": "^4.0.3",
-        "stable-hash": "^0.0.4"
+        "stable-hash": "^0.0.4",
+        "tinyglobby": "^0.2.12"
       },
       "engines": {
         "node": "^14.18.0 || >=16.0.0"
@@ -3690,36 +3665,6 @@
         }
       }
     },
-    "node_modules/eslint-import-resolver-typescript/node_modules/fast-glob": {
-      "version": "3.3.3",
-      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.3.tgz",
-      "integrity": "sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@nodelib/fs.stat": "^2.0.2",
-        "@nodelib/fs.walk": "^1.2.3",
-        "glob-parent": "^5.1.2",
-        "merge2": "^1.3.0",
-        "micromatch": "^4.0.8"
-      },
-      "engines": {
-        "node": ">=8.6.0"
-      }
-    },
-    "node_modules/eslint-import-resolver-typescript/node_modules/glob-parent": {
-      "version": "5.1.2",
-      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
-      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "is-glob": "^4.0.1"
-      },
-      "engines": {
-        "node": ">= 6"
-      }
-    },
     "node_modules/eslint-module-utils": {
       "version": "2.12.0",
       "resolved": "https://registry.npmjs.org/eslint-module-utils/-/eslint-module-utils-2.12.0.tgz",
@@ -3866,9 +3811,9 @@
       }
     },
     "node_modules/eslint-plugin-react-hooks": {
-      "version": "5.1.0",
-      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-5.1.0.tgz",
-      "integrity": "sha512-mpJRtPgHN2tNAvZ35AMfqeB3Xqeo273QxrHJsbBEPWODRM4r0yB6jfoROqKEYrOn27UtRPpcpHc2UqyBSuUNTw==",
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-5.2.0.tgz",
+      "integrity": "sha512-+f15FfK64YQwZdJNELETdn5ibXEUQmW1DZL6KXhNnc2heoy/sg9VJJeT7n8TlMWouzWqSWavFkIhHyIbIAEapg==",
       "dev": true,
       "license": "MIT",
       "engines": {
@@ -3907,9 +3852,9 @@
       }
     },
     "node_modules/eslint-scope": {
-      "version": "8.2.0",
-      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.2.0.tgz",
-      "integrity": "sha512-PHlWUfG6lvPc3yvP5A4PNyBL1W8fkDUccmI21JUu/+GKZBoH/W5u6usENXUrWFRsyoW5ACUjFGgAFQp5gUlb/A==",
+      "version": "8.3.0",
+      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.3.0.tgz",
+      "integrity": "sha512-pUNxi75F8MJ/GdeKtVLSbYg4ZI34J6C0C7sbL4YOp2exGwen7ZsuBqKzUhXd0qMQ362yET3z+uPwKeg/0C2XCQ==",
       "dev": true,
       "license": "BSD-2-Clause",
       "dependencies": {
@@ -4051,9 +3996,9 @@
       "license": "MIT"
     },
     "node_modules/fastq": {
-      "version": "1.19.0",
-      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.0.tgz",
-      "integrity": "sha512-7SFSRCNjBQIZH/xZR3iy5iQYR8aGBE0h3VG6/cwlbrpdciNYBMotQav8c1XI3HjHH+NikUpP53nPdlZSdWmFzA==",
+      "version": "1.19.1",
+      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.1.tgz",
+      "integrity": "sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==",
       "dev": true,
       "license": "ISC",
       "dependencies": {
@@ -4118,9 +4063,9 @@
       }
     },
     "node_modules/flatted": {
-      "version": "3.3.2",
-      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.2.tgz",
-      "integrity": "sha512-AiwGJM8YcNOaobumgtng+6NHuOqC3A7MixFeDafM3X9cIUM+xUXoS5Vfgf+OihAYe20fxqNM9yPBXJzRtZ/4eA==",
+      "version": "3.3.3",
+      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
+      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
       "dev": true,
       "license": "ISC"
     },
@@ -4141,13 +4086,13 @@
       }
     },
     "node_modules/foreground-child": {
-      "version": "3.3.0",
-      "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-3.3.0.tgz",
-      "integrity": "sha512-Ld2g8rrAyMYFXBhEqMz8ZAHBi4J4uS1i/CxGMDnjyFWddMXLVcDp051DZfu+t7+ab7Wv6SMqpWmyFIj5UbfFvg==",
+      "version": "3.3.1",
+      "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-3.3.1.tgz",
+      "integrity": "sha512-gIXjKqtFuWEgzFRJA9WCQeSJLZDjgJUOMCMzxtvFq/37KojM1BFGufqsCy0r4qSQmYLsZYMeyRqzIWOMup03sw==",
       "dev": true,
       "license": "ISC",
       "dependencies": {
-        "cross-spawn": "^7.0.0",
+        "cross-spawn": "^7.0.6",
         "signal-exit": "^4.0.1"
       },
       "engines": {
@@ -4214,18 +4159,18 @@
       }
     },
     "node_modules/get-intrinsic": {
-      "version": "1.2.7",
-      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.7.tgz",
-      "integrity": "sha512-VW6Pxhsrk0KAOqs3WEd0klDiF/+V7gQOpAvY1jVU/LHmaD/kQO4523aiJuikX/QAKYiW6x8Jh+RJej1almdtCA==",
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
+      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "call-bind-apply-helpers": "^1.0.1",
+        "call-bind-apply-helpers": "^1.0.2",
         "es-define-property": "^1.0.1",
         "es-errors": "^1.3.0",
-        "es-object-atoms": "^1.0.0",
+        "es-object-atoms": "^1.1.1",
         "function-bind": "^1.1.2",
-        "get-proto": "^1.0.0",
+        "get-proto": "^1.0.1",
         "gopd": "^1.2.0",
         "has-symbols": "^1.1.0",
         "hasown": "^2.0.2",
@@ -5366,9 +5311,9 @@
       }
     },
     "node_modules/nanoid": {
-      "version": "3.3.8",
-      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.8.tgz",
-      "integrity": "sha512-WNLf5Sd8oZxOm+TzppcYk8gVOgP+l58xNy58D0nbUnOxOWRWvlcCV4kUF7ltmI6PsrLl/BgKEyS4mqsGChFN0w==",
+      "version": "3.3.9",
+      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.9.tgz",
+      "integrity": "sha512-SppoicMGpZvbF1l3z4x7No3OlIjP7QJvC9XR7AhZr1kL133KHnKPztkKDc+Ir4aJ/1VhTySrtKhrsycmrMQfvg==",
       "funding": [
         {
           "type": "github",
@@ -5808,9 +5753,9 @@
       }
     },
     "node_modules/postcss": {
-      "version": "8.5.2",
-      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.2.tgz",
-      "integrity": "sha512-MjOadfU3Ys9KYoX0AdkBlFEF1Vx37uCCeN4ZHnmwm9FfpbsGWMZeBLMmmpY+6Ocqod7mkdZ0DT31OlbsFrLlkA==",
+      "version": "8.5.3",
+      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.3.tgz",
+      "integrity": "sha512-dle9A3yYxlBSrt8Fu+IpjGT8SY8hN0mlaA6GY8t0P5PjIOZemULz/E2Bnm/2dcUOena75OTNkHI76uZBNUUq3A==",
       "dev": true,
       "funding": [
         {
@@ -6104,9 +6049,9 @@
       }
     },
     "node_modules/prosemirror-schema-list": {
-      "version": "1.5.0",
-      "resolved": "https://registry.npmjs.org/prosemirror-schema-list/-/prosemirror-schema-list-1.5.0.tgz",
-      "integrity": "sha512-gg1tAfH1sqpECdhIHOA/aLg2VH3ROKBWQ4m8Qp9mBKrOxQRW61zc+gMCI8nh22gnBzd1t2u1/NPLmO3nAa3ssg==",
+      "version": "1.5.1",
+      "resolved": "https://registry.npmjs.org/prosemirror-schema-list/-/prosemirror-schema-list-1.5.1.tgz",
+      "integrity": "sha512-927lFx/uwyQaGwJxLWCZRkjXG0p48KpMj6ueoYiu4JX05GGuGcgzAy62dfiV8eFZftgyBUvLx76RsMe20fJl+Q==",
       "license": "MIT",
       "dependencies": {
         "prosemirror-model": "^1.0.0",
@@ -6154,18 +6099,18 @@
       }
     },
     "node_modules/prosemirror-transform": {
-      "version": "1.10.2",
-      "resolved": "https://registry.npmjs.org/prosemirror-transform/-/prosemirror-transform-1.10.2.tgz",
-      "integrity": "sha512-2iUq0wv2iRoJO/zj5mv8uDUriOHWzXRnOTVgCzSXnktS/2iQRa3UUQwVlkBlYZFtygw6Nh1+X4mGqoYBINn5KQ==",
+      "version": "1.10.3",
+      "resolved": "https://registry.npmjs.org/prosemirror-transform/-/prosemirror-transform-1.10.3.tgz",
+      "integrity": "sha512-Nhh/+1kZGRINbEHmVu39oynhcap4hWTs/BlU7NnxWj3+l0qi8I1mu67v6mMdEe/ltD8hHvU4FV6PHiCw2VSpMw==",
       "license": "MIT",
       "dependencies": {
         "prosemirror-model": "^1.21.0"
       }
     },
     "node_modules/prosemirror-view": {
-      "version": "1.38.0",
-      "resolved": "https://registry.npmjs.org/prosemirror-view/-/prosemirror-view-1.38.0.tgz",
-      "integrity": "sha512-O45kxXQTaP9wPdXhp8TKqCR+/unS/gnfg9Q93svQcB3j0mlp2XSPAmsPefxHADwzC+fbNS404jqRxm3UQaGvgw==",
+      "version": "1.38.1",
+      "resolved": "https://registry.npmjs.org/prosemirror-view/-/prosemirror-view-1.38.1.tgz",
+      "integrity": "sha512-4FH/uM1A4PNyrxXbD+RAbAsf0d/mM0D/wAKSVVWK7o0A9Q/oOXJBrw786mBf2Vnrs/Edly6dH6Z2gsb7zWwaUw==",
       "license": "MIT",
       "dependencies": {
         "prosemirror-model": "^1.20.0",
@@ -6389,16 +6334,16 @@
       }
     },
     "node_modules/readdirp": {
-      "version": "3.6.0",
-      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
-      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
-      "dev": true,
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-4.1.2.tgz",
+      "integrity": "sha512-GDhwkLfywWL2s6vEjyhri+eXmfH6j1L7JE27WhqLeYzoh/A3DBaYGEj2H/HFZCn/kMfim73FXxEJTw06WtxQwg==",
       "license": "MIT",
-      "dependencies": {
-        "picomatch": "^2.2.1"
-      },
       "engines": {
-        "node": ">=8.10.0"
+        "node": ">= 14.18.0"
+      },
+      "funding": {
+        "type": "individual",
+        "url": "https://paulmillr.com/funding/"
       }
     },
     "node_modules/redux": {
@@ -6499,9 +6444,9 @@
       }
     },
     "node_modules/reusify": {
-      "version": "1.0.4",
-      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz",
-      "integrity": "sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==",
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
+      "integrity": "sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==",
       "dev": true,
       "license": "MIT",
       "engines": {
@@ -6614,34 +6559,6 @@
         "@parcel/watcher": "^2.4.1"
       }
     },
-    "node_modules/sass/node_modules/chokidar": {
-      "version": "4.0.3",
-      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-4.0.3.tgz",
-      "integrity": "sha512-Qgzu8kfBvo+cA4962jnP1KkS6Dop5NS6g7R5LFYJr4b8Ub94PPQXUksCw9PvXoeXPRRddRNC5C1JQUR2SMGtnA==",
-      "license": "MIT",
-      "dependencies": {
-        "readdirp": "^4.0.1"
-      },
-      "engines": {
-        "node": ">= 14.16.0"
-      },
-      "funding": {
-        "url": "https://paulmillr.com/funding/"
-      }
-    },
-    "node_modules/sass/node_modules/readdirp": {
-      "version": "4.1.2",
-      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-4.1.2.tgz",
-      "integrity": "sha512-GDhwkLfywWL2s6vEjyhri+eXmfH6j1L7JE27WhqLeYzoh/A3DBaYGEj2H/HFZCn/kMfim73FXxEJTw06WtxQwg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 14.18.0"
-      },
-      "funding": {
-        "type": "individual",
-        "url": "https://paulmillr.com/funding/"
-      }
-    },
     "node_modules/scheduler": {
       "version": "0.25.0",
       "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.25.0.tgz",
@@ -6750,6 +6667,16 @@
         "@img/sharp-win32-x64": "0.33.5"
       }
     },
+    "node_modules/sharp/node_modules/detect-libc": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.3.tgz",
+      "integrity": "sha512-bwy0MGW55bG41VqxxypOsdSdGqLwXPI/focwgTYCFMbdUiBAxLg9CFzG08sz2aqzknwiX7Hkl0bQENjg8iLByw==",
+      "license": "Apache-2.0",
+      "optional": true,
+      "engines": {
+        "node": ">=8"
+      }
+    },
     "node_modules/shebang-command": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
@@ -7308,6 +7235,44 @@
         "node": ">=14.0.0"
       }
     },
+    "node_modules/tailwindcss/node_modules/chokidar": {
+      "version": "3.6.0",
+      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
+      "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "anymatch": "~3.1.2",
+        "braces": "~3.0.2",
+        "glob-parent": "~5.1.2",
+        "is-binary-path": "~2.1.0",
+        "is-glob": "~4.0.1",
+        "normalize-path": "~3.0.0",
+        "readdirp": "~3.6.0"
+      },
+      "engines": {
+        "node": ">= 8.10.0"
+      },
+      "funding": {
+        "url": "https://paulmillr.com/funding/"
+      },
+      "optionalDependencies": {
+        "fsevents": "~2.3.2"
+      }
+    },
+    "node_modules/tailwindcss/node_modules/chokidar/node_modules/glob-parent": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
+      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "is-glob": "^4.0.1"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
     "node_modules/tailwindcss/node_modules/fast-glob": {
       "version": "3.3.3",
       "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.3.tgz",
@@ -7338,6 +7303,19 @@
         "node": ">= 6"
       }
     },
+    "node_modules/tailwindcss/node_modules/readdirp": {
+      "version": "3.6.0",
+      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
+      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "picomatch": "^2.2.1"
+      },
+      "engines": {
+        "node": ">=8.10.0"
+      }
+    },
     "node_modules/tapable": {
       "version": "2.2.1",
       "resolved": "https://registry.npmjs.org/tapable/-/tapable-2.2.1.tgz",
@@ -7377,6 +7355,51 @@
       "integrity": "sha512-+FbBPE1o9QAYvviau/qC5SE3caw21q3xkvWKBtja5vgqOWIHHJ3ioaq1VPfn/Szqctz2bU/oYeKd9/z5BL+PVg==",
       "license": "MIT"
     },
+    "node_modules/tinyglobby": {
+      "version": "0.2.12",
+      "resolved": "https://registry.npmjs.org/tinyglobby/-/tinyglobby-0.2.12.tgz",
+      "integrity": "sha512-qkf4trmKSIiMTs/E63cxH+ojC2unam7rJ0WrauAzpT3ECNTxGRMlaXxVbfxMUC/w0LaYk6jQ4y/nGR9uBO3tww==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "fdir": "^6.4.3",
+        "picomatch": "^4.0.2"
+      },
+      "engines": {
+        "node": ">=12.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/SuperchupuDev"
+      }
+    },
+    "node_modules/tinyglobby/node_modules/fdir": {
+      "version": "6.4.3",
+      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.4.3.tgz",
+      "integrity": "sha512-PMXmW2y1hDDfTSRc9gaXIuCCRpuoz3Kaz8cUelp3smouvfT632ozg2vrT6lJsHKKOF59YLbOGfAWGUcKEfRMQw==",
+      "dev": true,
+      "license": "MIT",
+      "peerDependencies": {
+        "picomatch": "^3 || ^4"
+      },
+      "peerDependenciesMeta": {
+        "picomatch": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/tinyglobby/node_modules/picomatch": {
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.2.tgz",
+      "integrity": "sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/jonschlinkert"
+      }
+    },
     "node_modules/tippy.js": {
       "version": "6.3.7",
       "resolved": "https://registry.npmjs.org/tippy.js/-/tippy.js-6.3.7.tgz",
@@ -7530,9 +7553,9 @@
       }
     },
     "node_modules/typescript": {
-      "version": "5.7.3",
-      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.7.3.tgz",
-      "integrity": "sha512-84MVSjMEHP+FQRPy3pX9sTVV/INIex71s9TL2Gm5FG/WG1SqXeKyZ0k7/blY/4FdOzI12CBy1vGc4og/eus0fw==",
+      "version": "5.8.2",
+      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.8.2.tgz",
+      "integrity": "sha512-aJn6wq13/afZp/jT9QZmwEjDqqvSGp1VT5GVg+f/t6/oVyrgXM6BY1h9BRh/O5p3PlUPAe+WuiEZOmb/49RqoQ==",
       "dev": true,
       "license": "Apache-2.0",
       "peer": true,
diff --git a/frontend/package.json b/frontend/package.json
index a2f4526..60d5739 100644
--- a/frontend/package.json
+++ b/frontend/package.json
@@ -35,7 +35,8 @@
   },
   "devDependencies": {
     "@eslint/eslintrc": "^3",
-    "eslint": "^9",
+    "@next/eslint-plugin-next": "^15.2.1",
+    "eslint": "^9.22.0",
     "eslint-config-next": "15.1.7",
     "postcss": "^8",
     "tailwindcss": "^3.4.1"
diff --git a/frontend/src/app/alltasks/page.js b/frontend/src/app/alltasks/page.js
index 2f2ade9..6072959 100644
--- a/frontend/src/app/alltasks/page.js
+++ b/frontend/src/app/alltasks/page.js
@@ -1,45 +1,49 @@
-"use client";
-
-import { useEffect, useState, useRef, forwardRef, useCallback } from "react";
-import io from "socket.io-client"; // ✅ Import WebSocket client
-
-
-
+'use client';
 
+import { useEffect, useState, useRef, forwardRef, useCallback } from 'react';
+import io from 'socket.io-client'; // ✅ Import WebSocket client
 
 // import { useQuery } from 'react-query';
 import { debounce } from 'lodash';
-import { useParams, useRouter, usePathname } from "next/navigation"; // ✅ Navigation imports
-import { useDraggable } from "react-use-draggable-scroll";
+import { useParams, useRouter, usePathname } from 'next/navigation'; // ✅ Navigation imports
+import { useDraggable } from 'react-use-draggable-scroll';
 import {
   ChevronDownIcon,
   ChevronRightIcon,
   UserCircleIcon,
   ClipboardDocumentCheckIcon,
   BookmarkIcon,
-  XMarkIcon,  // ✅ Add this icon
-} from "@heroicons/react/24/solid";
-import Card from "@/components/Card";
-import { ArrowsPointingOutIcon } from "@heroicons/react/24/outline";
-import { DragDropContext, Droppable, Draggable } from "@hello-pangea/dnd";
-import TiptapEditor from "@/components/TiptapEditor"; // ✅ Import the Tiptap Editor
-import ParentTaskSelector from "@/components/ParentTaskSelector";
+  XMarkIcon, // ✅ Add this icon
+} from '@heroicons/react/24/solid';
+import Card from '@/components/Card';
+import { ArrowsPointingOutIcon } from '@heroicons/react/24/outline';
+import { DragDropContext, Droppable, Draggable } from '@hello-pangea/dnd';
+import TiptapEditor from '@/components/TiptapEditor'; // ✅ Import the Tiptap Editor
+import ParentTaskSelector from '@/components/ParentTaskSelector';
 import '../styles/custom.css';
+import Image from 'next/image';
 //import { useSession } from "next-auth/react"; // what is this for?
 
-const socket = io("http://127.0.0.1:5000");
-window.socket = socket; // ✅ Expose socket globally for debugging
-
 export default function AllTasks() {
+  const [socket, setSocket] = useState(null);
 
-  // 🔍 Debugging: Detect Page Reloads
   useEffect(() => {
-    const reloadListener = () => console.trace("⛔ Page is reloading! Stack trace:");
-    window.addEventListener("beforeunload", reloadListener);
+    // ✅ Ensure WebSocket is initialized only on the client-side
+    if (typeof window !== 'undefined') {
+      const newSocket = io('http://127.0.0.1:5000');
+      setSocket(newSocket);
+      console.log('✅ WebSocket Connected:', newSocket);
+
+      // ✅ Expose socket globally for debugging (client-side only)
+      window.socket = newSocket;
 
-    return () => window.removeEventListener("beforeunload", reloadListener);
+      return () => {
+        console.log('⚠️ Disconnecting WebSocket...');
+        newSocket.disconnect(); // ✅ Cleanup WebSocket connection
+      };
+    }
   }, []);
-  
+
   const [selectedTask, setSelectedTask] = useState(null); // ✅ Tracks currently selected task
   const [tasks, setTasks] = useState([]);
   const [contributors, setContributors] = useState([]);
@@ -48,12 +52,17 @@ export default function AllTasks() {
   const [expandedTasks, setExpandedTasks] = useState({});
   const [darkMode, setDarkMode] = useState(true);
   const [projects, setProjects] = useState([]);
+  const [project, setProject] = useState(null);
+  const [selectedProject, setSelectedProject] = useState(null);
+
   const [filters, setFilters] = useState({
-    project: "",
-    taskType: "",
-    status: "",
+    project_ids: [],
+    taskType: [],
+    status: [],
+    hideCompleted: false, // ✅ New filter to hide completed tasks
   });
-  const [selectedProjectId, setSelectedProjectId] = useState("");  // ✅ Track default project
+  const [selectedProjectIds, setSelectedProjectIds] = useState([]); // ✅ For filtering (array)
+  const [selectedProjectId, setSelectedProjectId] = useState(''); // ✅ For task assignment (string/number)
   const [isModalOpen, setIsModalOpen] = useState(false);
 
   // // ✅ Restore modal state from localStorage on component mount
@@ -81,50 +90,61 @@ export default function AllTasks() {
   };
 
   const handleTitleKeyDown = (e) => {
-    if (e.key === "Enter") {
+    if (e.key === 'Enter') {
       setEditingTaskId(null); // Exit edit mode on Enter key press
     }
   };
 
   const [isEditingNewTask, setIsEditingNewTask] = useState(false);
-  
-  
 
   // ✅ Fetch Contributors based on whether a project is selected
   useEffect(() => {
     if (!selectedProjectId) {
-      console.log("🔄 Fetching all contributors...");
-      fetch("http://127.0.0.1:5000/api/contributors") // ✅ Updated API now includes projects array
+      console.log('🔄 Fetching all contributors...');
+      fetch('http://127.0.0.1:5000/api/contributors') // ✅ Updated API now includes projects array
         .then((res) => res.json())
         .then((data) => {
           if (!Array.isArray(data)) {
-            console.error("❌ Contributors API response is not an array!", data);
+            console.error(
+              '❌ Contributors API response is not an array!',
+              data
+            );
             return;
           }
 
-          // 🔹 Ensure `projects` is always an array
+          // 🔥 Define cleanedData before using it
           const cleanedData = data.map((c) => ({
             ...c,
             projects: Array.isArray(c.projects) ? c.projects : [], // Normalize `projects`
           }));
 
-          console.log("✅ Global Contributors loaded:", cleanedData);
+          console.log('✅ Global Contributors loaded:', cleanedData);
           setContributors(cleanedData);
         })
         .catch((error) =>
-          console.error("❌ Error fetching global contributors:", error)
+          console.error('❌ Error fetching global contributors:', error)
         );
     } else {
-      console.log(`🔄 Fetching contributors for project ID ${selectedProjectId}...`);
-      fetch(`http://127.0.0.1:5000/api/projects/${selectedProjectId}/contributors/manage`)
+      console.log(
+        `🔄 Fetching contributors for project ID ${selectedProjectId}...`
+      );
+      fetch(
+        `http://127.0.0.1:5000/api/projects/${selectedProjectId}/contributors/manage`
+      )
         .then((res) => res.json())
         .then((data) => {
           if (!Array.isArray(data)) {
-            console.error("❌ Project Contributors API response is not an array!", data);
+            console.error(
+              '❌ Project Contributors API response is not an array!',
+              data
+            );
             return;
           }
 
-          console.log(`✅ Contributors for project ${selectedProjectId} loaded:`, data);
+          console.log(
+            `✅ Contributors for project ${selectedProjectId} loaded:`,
+            data
+          );
 
           // ✅ Ensure contributors have `is_in_project` properly flagged
           const updatedData = data.map((c) => ({
@@ -135,14 +155,35 @@ export default function AllTasks() {
           setContributors(updatedData);
         })
         .catch((error) =>
-          console.error(`❌ Error fetching contributors for project ${selectedProjectId}:`, error)
+          console.error(
+            `❌ Error fetching contributors for project ${selectedProjectId}:`,
+            error
+          )
         );
     }
   }, [selectedProjectId]); // ✅ Re-run when selectedProjectId changes
 
+  // ✅ Ensure WebSocket is initialized on client-side
+  useEffect(() => {
+    if (typeof window !== 'undefined') {
+      const newSocket = io('http://127.0.0.1:5000');
+      setSocket(newSocket);
+      console.log('✅ WebSocket Connected:', newSocket);
+
+      window.socket = newSocket; // ✅ Expose globally for debugging
+
+      return () => {
+        console.log('⚠️ Disconnecting WebSocket...');
+        newSocket.disconnect();
+      };
+    }
+  }, []);
+
   // ✅ WebSocket: Listen for contributor updates
   useEffect(() => {
-    socket.on("update_contributors", (updatedContributor) => {
+    if (!socket) return; // Ensure socket is available
+
+    const handleUpdateContributor = (updatedContributor) => {
       console.log("📡 WebSocket Update: Contributor Changed!", updatedContributor);
 
       setContributors((prevContributors) => {
@@ -159,789 +200,737 @@ export default function AllTasks() {
         }
         return [...prevContributors, updatedContributor];
       });
-    });
+
+      // ✅ Update task list to reflect contributor change
+      setTasks((prevTasks) =>
+        prevTasks.map((task) =>
+          task.contributor_id === updatedContributor.id
+            ? { ...task, contributor_name: updatedContributor.name }
+            : task
+        )
+      );
+    };
+
+    socket.on("update_contributors", handleUpdateContributor);
 
     return () => {
-      socket.off("update_contributors"); // ✅ Cleanup listener
+      socket.off("update_contributors", handleUpdateContributor); // ✅ Cleanup listener
     };
-  }, []);
+  }, [socket]);
 
-  // ✅ WebSocket: Listen for task updates (Handles ALL task field updates)
+  // ✅ WebSocket: Listen for task updates
   useEffect(() => {
-    socket.on("update_task", (updatedTask) => {
-        console.log("📡 WebSocket Update: Task Updated!", updatedTask);
+    if (!socket) return; // ✅ Prevents running if socket is null
 
-        setTasks((prevTasks) =>
-            prevTasks.map((task) =>
-                task.id === updatedTask.taskId
-                    ? { ...task, [updatedTask.field]: updatedTask.value }
-                    : task
-            )
-        );
+    const handleUpdateTask = (updatedTask) => {
+      console.log('📡 WebSocket Update: Task Updated!', updatedTask);
 
-        // ✅ Update task inside the modal if it's open
-        if (selectedTask && selectedTask.id === updatedTask.taskId) {
-            setSelectedTask((prev) => ({
-                ...prev,
-                [updatedTask.field]: updatedTask.value,
-            }));
-        }
-    });
+      setFilteredTasks((prevTasks) =>
+        prevTasks.map((task) =>
+          task.id === updatedTask.id ? updatedTask : task
+        )
+      );
+
+      // ✅ Update task inside the modal if it's open
+      if (selectedTask && selectedTask.id === updatedTask.id) {
+        setSelectedTask((prev) => ({
+          ...prev,
+          [updatedTask.field]: updatedTask.value,
+        }));
+      }
+    };
+
+    socket.on('update_task', handleUpdateTask);
 
     return () => {
-        socket.off("update_task"); // ✅ Cleanup listener on unmount
+      socket.off('update_task', handleUpdateTask); // ✅ Cleanup listener on unmount
     };
-  }, [selectedTask]);
+  }, [socket, selectedTask]); // ✅ Re-run when `socket` or `selectedTask` changes
 
   useEffect(() => {
-      socket.on("task_created", (newTask) => {
-          console.log("📡 WebSocket: New Task Created! Full Data:", newTask);
-          
-          // Check if task exists in payload
-          if (!newTask || !newTask.task || !newTask.task.id) {
-              console.error("🚨 Invalid WebSocket Task Data Received!", newTask);
-              return;
-          }
+    if (!socket) return; // ✅ Prevent running if socket is null
 
-          console.log("🔎 Task ID:", newTask.task.id, " Parent ID:", newTask.task.parent_id);
+    const handleTaskCreated = (newTask) => {
+      console.log('📡 WebSocket: New Task Created! Full Data:', newTask);
 
-          setTasks((prevTasks) => {
-              const updatedTasks = [...prevTasks, newTask.task].sort((a, b) => a.sort_order - b.sort_order);
-              console.log("🔄 Updated Task List from WebSocket:", updatedTasks);
-              return updatedTasks;
-          });
+      if (!newTask || !newTask.task || !newTask.task.id) {
+        console.error('🚨 Invalid WebSocket Task Data Received!', newTask);
+        return;
+      }
 
-          setFilteredTasks((prevFilteredTasks) => {
-              const updatedFilteredTasks = [...prevFilteredTasks, newTask.task].sort((a, b) => a.sort_order - b.sort_order);
-              return updatedFilteredTasks;
-          });
+      console.log(
+        '🔎 Task ID:',
+        newTask.task.id,
+        ' Parent ID:',
+        newTask.task.parent_id
+      );
 
-          setExpandedTasks((prev) => ({
-              ...prev,
-              [newTask.task.parent_id]: true, // ✅ Keep parent expanded
-          }));
+      setTasks((prevTasks) => {
+        const updatedTasks = [...prevTasks, newTask.task].sort(
+          (a, b) => a.sort_order - b.sort_order
+        );
+        console.log('🔄 Updated Task List from WebSocket:', updatedTasks);
+        return updatedTasks;
+      });
 
-          setTimeout(() => {
-              const inputField = document.getElementById(`task-title-${newTask.task.id}`);
-              if (inputField) {
-                  inputField.focus();
-                  inputField.select();
-              }
-          }, 100);
+      setFilteredTasks((prevFilteredTasks) => {
+        return [...prevFilteredTasks, newTask.task].sort(
+          (a, b) => a.sort_order - b.sort_order
+        );
       });
 
-      return () => {
-          socket.off("task_created");
-      };
-  }, []);
+      setExpandedTasks((prev) => ({
+        ...prev,
+        [newTask.task.parent_id]: true, // ✅ Keep parent expanded
+      }));
+
+      setTimeout(() => {
+        const inputField = document.getElementById(
+          `task-title-${newTask.task.id}`
+        );
+        if (inputField) {
+          inputField.focus();
+          inputField.select();
+        }
+      }, 100);
+    };
+
+    socket.on('task_created', handleTaskCreated); // ✅ Attach listener
+
+    return () => {
+      socket.off('task_created', handleTaskCreated); // ✅ Cleanup listener on unmount
+    };
+  }, [socket]); // ✅ Re-run when `socket` is updated
 
   // Automatically Refetch Contributors When Project Changes
   useEffect(() => {
-    console.log(`📡 Selected project changed to: ${selectedProjectId}, refetching contributors...`);
+    console.log(
+      `📡 Selected project changed to: ${selectedProjectId}, refetching contributors...`
+    );
   }, [selectedProjectId]);
 
+  const handleDropdownChange = (taskId, newContributorId) => {
+    // ✅ Update the UI immediately
+    setTasks((prevTasks) =>
+      prevTasks.map((task) =>
+        task.id === taskId ? { ...task, contributor_id: newContributorId } : task
+      )
+    );
+  
+    // ✅ Send update to API
+    handleContributorChange(taskId, newContributorId);
+  
+    // ✅ WebSocket: Notify other clients in real-time
+    if (socket) {
+      socket.emit('update_task', {
+        taskId,
+        contributor_id: newContributorId,
+      });
+    }
+  };
+
   const handleContributorChange = async (taskId, newContributorId) => {
-      console.log(`📌 handleContributorChange called with Task ID: ${taskId}, Contributor ID: ${newContributorId}`);
+    console.log(
+      `📌 handleContributorChange called with Task ID: ${taskId}, Contributor ID: ${newContributorId}`
+    );
 
-      try {
-          // Fetch the current contributors of the task's project
-          const task = tasks.find(t => t.id === taskId);
-          if (!task) {
-              console.error(`❌ Error: taskId is undefined!`, { taskId, newContributorId });
-              return;
-          }
+    try {
+      // Fetch the current contributors of the task's project
+      const task = tasks.find((t) => t.id === taskId);
+      if (!task) {
+        console.error(`❌ Error: taskId is undefined!`, {
+          taskId,
+          newContributorId,
+        });
+        return;
+      }
 
-          const projectId = task.project_id;
+      const projectId = task.project_id;
 
-          // ✅ Fetch the current contributors of the task's project
-          const contributorsResponse = await fetch(`http://127.0.0.1:5000/api/projects/${projectId}/contributors/manage`);
-          let projectContributors = await contributorsResponse.json();
+      // ✅ Fetch the current contributors of the task's project
+      const contributorsResponse = await fetch(
+        `http://127.0.0.1:5000/api/projects/${projectId}/contributors/manage`
+      );
+      let projectContributors = await contributorsResponse.json();
 
-          // ✅ Ensure projectContributors is an array
-          if (!Array.isArray(projectContributors)) {
-              console.error("❌ Error: API response for contributors is not an array!", projectContributors);
-              return;
-          }
+      // ✅ Ensure projectContributors is an array
+      if (!Array.isArray(projectContributors)) {
+        console.error(
+          '❌ Error: API response for contributors is not an array!',
+          projectContributors
+        );
+        return;
+      }
 
-          console.log(`📡 Contributors in project ${projectId}:`, projectContributors);
-
-          // 🔴 LOG ISSUE: Is the contributor already in the list?
-          console.log(`🔍 Checking if Contributor ID ${newContributorId} is already in the project...`);
-
-          // If contributor is NOT in the project, add them first
-          if (!projectContributors.some(c => c.id === parseInt(newContributorId))) {
-              console.log(`➕ Contributor ${newContributorId} is NOT in project ${projectId}, adding...`);
-
-              await fetch(`http://127.0.0.1:5000/api/projects/${projectId}/contributors/manage`, {
-                  method: "POST",
-                  headers: { "Content-Type": "application/json" },
-                  body: JSON.stringify({ contributor_id: newContributorId }),
-              });
-
-              // Refetch the updated project contributors after adding
-              const updatedContributorsRes = await fetch(`http://127.0.0.1:5000/api/projects/${projectId}/contributors/manage`);
-              const updatedContributors = await updatedContributorsRes.json();  // ✅ Correct variable name
-              console.log(`✅ Updated Contributors in project ${projectId}:`, updatedContributors);
-
-              // ✅ Update UI with latest contributors list
-              setContributors((prevContributors) => {
-                const updatedSet = new Set(updatedContributors.map(c => c.id));
-                return [
-                    ...prevContributors.filter(c => !updatedSet.has(c.id)), // Keep old contributors not in the new list
-                    ...updatedContributors.map((c) => ({
-                        ...c,
-                        is_in_project: c.is_in_project ?? false, // Ensure proper flagging
-                    })),
-                ];
-            });
+      console.log(
+        `📡 Contributors in project ${projectId}:`,
+        projectContributors
+      );
+
+      // 🔴 LOG ISSUE: Is the contributor already in the list?
+      console.log(
+        `🔍 Checking if Contributor ID ${newContributorId} is already in the project...`
+      );
+
+      // If contributor is NOT in the project, add them first
+      if (
+        !projectContributors.some((c) => c.id === parseInt(newContributorId))
+      ) {
+        console.log(
+          `➕ Contributor ${newContributorId} is NOT in project ${projectId}, adding...`
+        );
+
+        await fetch(
+          `http://127.0.0.1:5000/api/projects/${projectId}/contributors/manage`,
+          {
+            method: 'POST',
+            headers: { 'Content-Type': 'application/json' },
+            body: JSON.stringify({ contributor_id: newContributorId }),
           }
+        );
 
-          // 🔴 LOG ISSUE: Does the contributor exist in the state after update?
-          console.log("🔍 Updated contributor state: ", contributors);
+        // Refetch the updated project contributors after adding
+        const updatedContributorsRes = await fetch(
+          `http://127.0.0.1:5000/api/projects/${projectId}/contributors/manage`
+        );
+        const updatedContributors = await updatedContributorsRes.json(); // ✅ Correct variable name
+        console.log(
+          `✅ Updated Contributors in project ${projectId}:`,
+          updatedContributors
+        );
 
-          // Now assign the contributor to the task
-          const response = await fetch(`http://127.0.0.1:5000/api/tasks/${taskId}`, {
-              method: "PATCH",
-              headers: { "Content-Type": "application/json" },
-              body: JSON.stringify({ contributor_id: newContributorId }),
-          });
+        // ✅ Update UI with latest contributors list
+        setContributors((prevContributors) => {
+          const updatedSet = new Set(updatedContributors.map((c) => c.id));
+          return [
+            ...prevContributors.filter((c) => !updatedSet.has(c.id)), // Keep old contributors not in the new list
+            ...updatedContributors.map((c) => ({
+              ...c,
+              is_in_project: c.is_in_project ?? false, // Ensure proper flagging
+            })),
+          ];
+        });
+      }
 
-          if (!response.ok) throw new Error("Failed to assign contributor");
+      // 🔴 LOG ISSUE: Does the contributor exist in the state after update?
+      console.log('🔍 Updated contributor state: ', contributors);
 
-          const updatedTask = await response.json();
-          console.log("✅ Contributor assigned successfully:", updatedTask);
+      // Now assign the contributor to the task
+      const response = await fetch(
+        `http://127.0.0.1:5000/api/tasks/${taskId}`,
+        {
+          method: 'PATCH',
+          headers: { 'Content-Type': 'application/json' },
+          body: JSON.stringify({ contributor_id: newContributorId }),
+        }
+      );
 
-          // ✅ Update the local tasks state
-          setTasks((prevTasks) =>
-              prevTasks.map((task) =>
-                  task.id === taskId
-                      ? { ...task, contributor_id: newContributorId, contributor_name: updatedTask.task.contributor_name }
-                      : task
-              )
-          );
+      if (!response.ok) throw new Error('Failed to assign contributor');
 
-          // ✅ Update `selectedTask` in TaskModal immediately
-          setSelectedTask((prevTask) => ({
-              ...prevTask,
-              contributor_id: newContributorId,
-              contributor_name: updatedTask.task.contributor_name,
-          }));
+      const updatedTask = await response.json();
+      console.log('✅ Contributor assigned successfully:', updatedTask);
 
+      // ✅ Update the local tasks state
+      setTasks((prevTasks) =>
+        prevTasks.map((task) =>
+          task.id === taskId
+            ? {
+                ...task,
+                contributor_id: newContributorId,
+                contributor_name: updatedTask.task.contributor_name,
+              }
+            : task
+        )
+      );
 
-          // ✅ WebSocket: Notify all clients about the change
-          socket.emit("update_task", {
-              taskId,
-              contributor_id: newContributorId,
-              contributor_name: updatedTask.task.contributor_name,
-          });
+      // ✅ Update `selectedTask` in TaskModal immediately
+      setSelectedTask((prevTask) => ({
+        ...prevTask,
+        contributor_id: newContributorId,
+        contributor_name: updatedTask.task.contributor_name,
+      }));
 
-      } catch (error) {
-          console.error("❌ Error assigning contributor:", error);
-      }
+      // ✅ WebSocket: Notify all clients about the change
+      socket.emit('update_task', {
+        taskId,
+        contributor_id: newContributorId,
+        contributor_name: updatedTask.task.contributor_name,
+      });
+    } catch (error) {
+      console.error('❌ Error assigning contributor:', error);
+    }
   };
 
   // ✅ Debugging log for modal state changes
   useEffect(() => {
-      if (isModalOpen) {
-          console.log("🔄 isModalOpen changed:", isModalOpen);
-      }
+    if (isModalOpen) {
+      console.log('🔄 isModalOpen changed:', isModalOpen);
+    }
   }, [isModalOpen]);
 
+  // Fetches all projects when the page loads. 
+  // ✅ This ensures that there is always a project available when the app loads, but it does NOT assign projects to tasks. That is handled separately.
   useEffect(() => {
-    console.log("🛠️ Step 1: Fetching projects...");
-    fetch("http://127.0.0.1:5000/api/projects")
+    console.log('🛠️ Step 1: Fetching projects...');
+    fetch('http://127.0.0.1:5000/api/projects')
       .then((response) => response.json())
       .then((projects) => {
-        console.log("✅ Step 2: Projects loaded:", projects);
+        console.log('✅ Step 2: Projects loaded:', projects);
         setProjects(projects);
-  
+
         // Find "Miscellaneous" project and set it as default
-        const miscProject = (Array.isArray(projects) ? projects : []).find(p => p.name === "Miscellaneous");
+        const miscProject = (Array.isArray(projects) ? projects : []).find(
+          (p) => p.name === 'Miscellaneous'
+        );
         if (miscProject) {
-          console.log("✅ Step 3: Defaulting to 'Miscellaneous' project", miscProject.id);
+          console.log(
+            "✅ Step 3: Defaulting to 'Miscellaneous' project",
+            miscProject.id
+          );
           setSelectedProjectId(miscProject.id);
         } else {
           console.warn("⚠️ 'Miscellaneous' project not found. Creating it...");
           // Create "Miscellaneous" project if it doesn't exist
-          fetch("http://127.0.0.1:5000/api/projects", {
-            method: "POST",
-            headers: { "Content-Type": "application/json" },
-            body: JSON.stringify({ name: "Miscellaneous" }),
+          fetch('http://127.0.0.1:5000/api/projects', {
+            method: 'POST',
+            headers: { 'Content-Type': 'application/json' },
+            body: JSON.stringify({ name: 'Miscellaneous' }),
           })
             .then((response) => response.json())
             .then((newProject) => {
-              console.log("✅ Step 4: 'Miscellaneous' project created:", newProject);
+              console.log(
+                "✅ Step 4: 'Miscellaneous' project created:",
+                newProject
+              );
               setSelectedProjectId(newProject.id);
               setProjects((prev) => [...prev, newProject]); // Add to state
             })
-            .catch((error) => console.error("🚨 Step 5: Error creating 'Miscellaneous' project:", error));
+            .catch((error) =>
+              console.error(
+                "🚨 Step 5: Error creating 'Miscellaneous' project:",
+                error
+              )
+            );
         }
       })
-      .catch((error) => console.error("🚨 Step 6: Error fetching projects:", error));
+      .catch((error) =>
+        console.error('🚨 Step 6: Error fetching projects:', error)
+      );
   }, []);
 
-  // ✅ Ensure taskData updates when selectedProjectId changes
-  const [taskData, setTaskData] = useState(selectedTask || {
-      name: "",
-      description: "",
-      task_type: "User Story",
-      priority: "Unset",
-      status: "Not Started",
-      project_id: "", // Ensure selectedProjectId is defined
-  });
+  // ✅ Ensure filters update when projects load
+  useEffect(() => {
+    console.log("🔄 Projects updated, ensuring filters are applied:", projects);
+    if (projects.length > 0 && !filters.project_ids.length) {
+      setFilters((prevFilters) => ({
+        ...prevFilters,
+        project_ids: [projects[0].id], // ✅ Ensures at least one project is selected
+      }));
+    }
+  }, [projects]); // ✅ Runs when projects change
 
+  // ✅ Ensure taskData updates when selectedProjectId changes
+  const [taskData, setTaskData] = useState(
+    selectedTask || {
+      name: '',
+      description: '',
+      task_type: 'User Story',
+      priority: 'Unset',
+      status: 'Not Started',
+      project_id: '', // Ensure selectedProjectId is defined
+    }
+  );
 
   useEffect(() => {
-      if (selectedProjectId && !taskData.project_id) { // ✅ Only update if project_id is empty
-          setTaskData((prev) => ({
-              ...prev,
-              project_id: selectedProjectId,
-          }));
-      }
-  }, [selectedProjectId]); 
+    if (selectedProjectId && !taskData.project_id) {
+      // ✅ Only update if project_id is empty
+      setTaskData((prev) => ({
+        ...prev,
+        project_id: selectedProjectId,
+      }));
+    }
+  }, [selectedProjectId, taskData.project_id]);
 
   useEffect(() => {
-    console.log("Task Data:", taskData);
+    console.log('Task Data:', taskData);
   }, [taskData]);
 
   // ✅ Updated createNewTask - Immediately saves task before opening modal
   const createNewTask = useCallback(async () => {
-    console.log("🛠️ Step 5: createNewTask triggered - Saving task before opening modal...");
+    console.log(
+      '🛠️ Step 5: createNewTask triggered - Saving task before opening modal...'
+    );
 
     // ✅ Ensure projects are loaded
     if (projects.length === 0) {
-        console.warn("⚠️ Step 6a: No projects available, fetching projects...");
-        try {
-            const response = await fetch("http://127.0.0.1:5000/api/projects");
-            const fetchedProjects = await response.json();
-            setProjects(fetchedProjects);
-        } catch (error) {
-            console.error("🚨 Step 6b: Error fetching projects:", error);
-            return;
-        }
+      console.warn('⚠️ Step 6a: No projects available, fetching projects...');
+      try {
+        const response = await fetch('http://127.0.0.1:5000/api/projects');
+        const fetchedProjects = await response.json();
+        setProjects(fetchedProjects);
+      } catch (error) {
+        console.error('🚨 Step 6b: Error fetching projects:', error);
+        return;
+      }
     }
 
     // ✅ Find or create the "Miscellaneous" project
-    let miscProject = projects.find(p => p.name === "Miscellaneous");
+    let miscProject = projects.find((p) => p.name === 'Miscellaneous');
     let defaultProjectId = miscProject ? miscProject.id : null;
 
     if (!defaultProjectId) {
-        console.warn("⚠️ Step 7a: 'Miscellaneous' project not found. Creating it...");
-        try {
-            const response = await fetch("http://127.0.0.1:5000/api/projects", {
-                method: "POST",
-                headers: { "Content-Type": "application/json" },
-                body: JSON.stringify({ name: "Miscellaneous" }),
-            });
-            const newProject = await response.json();
-            console.log("✅ Step 7b: 'Miscellaneous' project created:", newProject);
-            defaultProjectId = newProject.id;
-            setProjects(prev => [...prev, newProject]); // Add to state
-        } catch (error) {
-            console.error("🚨 Step 7c: Error creating 'Miscellaneous' project:", error);
-            return;
-        }
+      console.warn(
+        "⚠️ Step 7a: 'Miscellaneous' project not found. Creating it..."
+      );
+      try {
+        const response = await fetch('http://127.0.0.1:5000/api/projects', {
+          method: 'POST',
+          headers: { 'Content-Type': 'application/json' },
+          body: JSON.stringify({ name: 'Miscellaneous' }),
+        });
+        const newProject = await response.json();
+        console.log("✅ Step 7b: 'Miscellaneous' project created:", newProject);
+        defaultProjectId = newProject.id;
+        setProjects((prev) => [...prev, newProject]); // Add to state
+      } catch (error) {
+        console.error(
+          "🚨 Step 7c: Error creating 'Miscellaneous' project:",
+          error
+        );
+        return;
+      }
     }
 
     // ✅ Step 8: Create the new task immediately
     let taskPayload = {
-        title: "Untitled Task",
-        description: "",
-        task_type: "User Story",
-        priority: "Unset",
-        status: "Not Started",
-        project_id: defaultProjectId, // ✅ Default project
+      title: 'Untitled Task',
+      description: '',
+      task_type: 'User Story',
+      priority: 'Unset',
+      status: 'Not Started',
+      project_id: defaultProjectId, // ✅ Default project
     };
 
     // ✅ Only include `epic_priority` if the task is an Epic
-    if (taskPayload.task_type === "Epic") {
-      taskPayload.epic_priority = "Unset"; // Default for Epics
+    if (taskPayload.task_type === 'Epic') {
+      taskPayload.epic_priority = 'Unset'; // Default for Epics
     } else {
       delete taskPayload.epic_priority; // ✅ Completely remove epic_priority for non-Epics
     }
-    
-    console.log("📡 Task Payload before sending:", JSON.stringify(taskPayload, null, 2));
-    
-    try {
-        const response = await fetch("http://127.0.0.1:5000/api/tasks", {
-            method: "POST",
-            headers: { "Content-Type": "application/json" },
-            body: JSON.stringify(taskPayload),
-        });
 
-        if (!response.ok) {
-            const errorText = await response.text();
-            console.error("🚨 Step 10a: Task creation failed!", errorText);
-            return;
-        }
+    console.log(
+      '📡 Task Payload before sending:',
+      JSON.stringify(taskPayload, null, 2)
+    );
 
-        const newTask = await response.json();
-        console.log("✅ Step 10b: New Task Created - checking 'newTask':", newTask);
-        // ✅ Ensure `project_id` is in state before opening modal
-        console.log("🛠️ Step 10c: Checking Task Object 'newTask.task':", newTask.task);
-        console.log("🔍 Step 10d: Checkign project_id presence 'newTask?.task?.project_id':", newTask?.task?.project_id);
+    try {
+      const response = await fetch('http://127.0.0.1:5000/api/tasks', {
+        method: 'POST',
+        headers: { 'Content-Type': 'application/json' },
+        body: JSON.stringify(taskPayload),
+      });
 
-        if (!newTask.task) {
-            console.error("🚨 Step 10c-error: Response does not contain a 'task' object!", newTask);
-            return;
-        }
+      if (!response.ok) {
+        const errorText = await response.text();
+        console.error('🚨 Step 10a: Task creation failed!', errorText);
+        return;
+      }
 
-        // ✅ Ensure `tasks` is updated so `handleFieldChange` can find task 319
-        setTasks((prevTasks) => [...prevTasks, newTask.task]); 
+      const newTask = await response.json();
+      console.log(
+        "✅ Step 10b: New Task Created - checking 'newTask':",
+        newTask
+      );
+      // ✅ Ensure `project_id` is in state before opening modal
+      console.log(
+        "🛠️ Step 10c: Checking Task Object 'newTask.task':",
+        newTask.task
+      );
+      console.log(
+        "🔍 Step 10d: Checkign project_id presence 'newTask?.task?.project_id':",
+        newTask?.task?.project_id
+      );
 
-        
-        
-        // Ensure `project_id` exists before proceeding
-        if (!newTask.task.project_id) {
-            console.error("🚨 Step 10d: New Task missing project_id!", newTask.task);
-            return;
-        }
+      if (!newTask.task) {
+        console.error(
+          "🚨 Step 10c-error: Response does not contain a 'task' object!",
+          newTask
+        );
+        return;
+      }
 
-        setTaskData((prev) => ({
-            ...newTask.task,
-            project_id: newTask.task.project_id || defaultProjectId,
-        }));
-        setSelectedTask(newTask.task);
-        setTaskData(newTask.task);  // ✅ Ensure `taskData` is in sync
-        setIsModalOpen(true);
+      // ✅ Ensure `tasks` is updated so `handleFieldChange` can find task 319
+      setTasks((prevTasks) => [...prevTasks, newTask.task]);
 
+      // Ensure `project_id` exists before proceeding
+      if (!newTask.task.project_id) {
+        console.error(
+          '🚨 Step 10d: New Task missing project_id!',
+          newTask.task
+        );
+        return;
+      }
+
+      setTaskData((prev) => ({
+        ...newTask.task,
+        project_id: newTask.task.project_id || defaultProjectId,
+      }));
+      setSelectedTask(newTask.task);
+      setTaskData(newTask.task); // ✅ Ensure `taskData` is in sync
+      setIsModalOpen(true);
     } catch (error) {
-        console.error("🚨 Step 13: Error creating new task:", error);
+      console.error('🚨 Step 13: Error creating new task:', error);
     }
-  }, [projects, selectedProjectId]);
-
+  }, [projects]);
 
   // Handles the creation of a new task under a parent task
   const handleCreateTask = async (parentId, taskType) => {
-      console.log(`🛠️ Creating new ${taskType} under parent ${parentId}`);
+    console.log(`🛠️ Creating new ${taskType} under parent ${parentId}`);
 
-      const newTaskTitle = "New Subtask"; // Default title
-      setIsEditingNewTask(false); // Reset edit flag
+    const newTaskTitle = 'New Subtask'; // Default title
+    setIsEditingNewTask(false); // Reset edit flag
 
-      const taskPayload = {
-          title: taskType === "User Story" ? "New User Story" : "New Subtask",
-          task_type: taskType,
-          parent_id: parentId,
-          project_id: selectedProjectId,
-      };
+    const taskPayload = {
+      title: taskType === 'User Story' ? 'New User Story' : 'New Subtask',
+      task_type: taskType,
+      parent_id: parentId,
+      project_id: selectedProjectId,
+    };
 
-      console.log("📡 Sending Task Payload:", JSON.stringify(taskPayload, null, 2));
+    console.log(
+      '📡 Sending Task Payload:',
+      JSON.stringify(taskPayload, null, 2)
+    );
 
-      try {
-          const response = await fetch("http://127.0.0.1:5000/api/tasks", {
-              method: "POST",
-              headers: { "Content-Type": "application/json" },
-              body: JSON.stringify(taskPayload),
-          });
-
-          console.log("📩 API Response Status:", response.status);
+    try {
+      const response = await fetch('http://127.0.0.1:5000/api/tasks', {
+        method: 'POST',
+        headers: { 'Content-Type': 'application/json' },
+        body: JSON.stringify(taskPayload),
+      });
 
-          if (!response.ok) {
-              const errorText = await response.text();
-              console.error("🚨 Task creation failed! API Response:", errorText);
-              throw new Error(`Task creation failed - ${errorText}`);
-          }
+      console.log('📩 API Response Status:', response.status);
 
-          const newTask = await response.json();
-          console.log("✅ Task created successfully:", newTask);
+      if (!response.ok) {
+        const errorText = await response.text();
+        console.error('🚨 Task creation failed! API Response:', errorText);
+        throw new Error(`Task creation failed - ${errorText}`);
+      }
 
-          // 🔹 Keep Parent Task Expanded
-          setExpandedTasks((prev) => ({
-              ...prev,
-              [parentId]: true, // ✅ Keep parent expanded
-          }));
+      const newTask = await response.json();
+      console.log('✅ Task created successfully:', newTask);
 
-          // 🔹 Add New Task to the UI at the End of Its Parent
-          setTasks((prevTasks) => {
-            return prevTasks.map((task) => {
-              if (task.id === newTask.task.parent_id) {
-                return {
-                  ...task,
-                  children: [...(task.children || []), { ...newTask.task, project_id: task.project_id }],
-                };
-              }
-              return task;
-            });
-          });
+      // 🔹 Keep Parent Task Expanded
+      setExpandedTasks((prev) => ({
+        ...prev,
+        [parentId]: true, // ✅ Keep parent expanded
+      }));
 
-          // ✅ Ensure new task is in edit mode
-          setEditingTaskId(newTask.task.id);
-          setIsEditingNewTask(true);
-            
-          setFilteredTasks((prevFilteredTasks) => {
-              const updatedFilteredTasks = [...prevFilteredTasks, newTask.task];
-              console.log("🔄 Updated Filtered Task List:", updatedFilteredTasks);
-              return updatedFilteredTasks;
-          });
+      // 🔹 Add New Task to the UI at the End of Its Parent
+      setTasks((prevTasks) => {
+        return prevTasks.map((task) => {
+          if (task.id === newTask.task.parent_id) {
+            return {
+              ...task,
+              children: [
+                ...(task.children || []),
+                { ...newTask.task, project_id: task.project_id },
+              ],
+            };
+          }
+          return task;
+        });
+      });
 
-          // 🔹 Emit WebSocket Event to Inform Other Clients
-          socket.emit("task_created", newTask.task);
+      // ✅ Ensure new task is in edit mode
+      setEditingTaskId(newTask.task.id);
+      setIsEditingNewTask(true);
 
-          // 🔹 Automatically Focus and Select the Task Title for Editing
-          setTimeout(() => {
+      setFilteredTasks((prevFilteredTasks) => {
+        const updatedFilteredTasks = [...prevFilteredTasks, newTask.task];
+        console.log('🔄 Updated Filtered Task List:', updatedFilteredTasks);
+        return updatedFilteredTasks;
+      });
 
-          //  const newTaskElement = document.querySelector(`[data-task-id="${newTask.task.id}"]`);
-              const inputField = document.getElementById(`task-title-${newTask.task.id}`);
-              if (inputField) {
-                  inputField.focus();
-                  inputField.select();
-              }
-          }, 100);
+      // 🔹 Emit WebSocket Event to Inform Other Clients
+      socket.emit('task_created', newTask.task);
 
-      } catch (error) {
-          console.error("❌ Error creating task:", error);
-      }
+      // 🔹 Automatically Focus and Select the Task Title for Editing
+      setTimeout(() => {
+        //  const newTaskElement = document.querySelector(`[data-task-id="${newTask.task.id}"]`);
+        const inputField = document.getElementById(
+          `task-title-${newTask.task.id}`
+        );
+        if (inputField) {
+          inputField.focus();
+          inputField.select();
+        }
+      }, 100);
+    } catch (error) {
+      console.error('❌ Error creating task:', error);
+    }
   };
 
   const handleTitleChange = async (taskId, newTitle) => {
-      console.log(`📌 Updating title for task ${taskId} -> ${newTitle}`);
-      
-      setTasks((prevTasks) =>
-          prevTasks.map((task) =>
-              task.id === taskId ? { ...task, name: newTitle } : task
-          )
-      );
-
-      try {
-          const response = await fetch(`http://127.0.0.1:5000/api/tasks/${taskId}`, {
-              method: "PATCH",
-              headers: { "Content-Type": "application/json" },
-              body: JSON.stringify({ name: newTitle }),
-          });
-
-          if (!response.ok) throw new Error("Failed to update task title");
-          console.log(`✅ Task ${taskId} title updated successfully!`);
-      } catch (error) {
-          console.error(`❌ Error updating task ${taskId} title:`, error);
-      }
-  };
-
-
-// Old version of handleFieldChange
-  // const handleFieldChange = useCallback(async (taskId, field, value) => {
-  //   console.log(`📌 Row 210 - Step 21: handleFieldChange called with taskId: ${taskId}, field: '${field}', value: '${value}'`);
-
-  //   if (!taskId) {
-  //       console.error("🚨 Error: taskId is undefined or null!");
-  //       return;
-  //   }
-    
-  //   const taskToUpdate = tasks.find(task => task.id === taskId);
-  //   console.log("🔍 row 218-Step 22: Checking if task exists in local state:", taskToUpdate);
-
-  //   if (!taskToUpdate || taskToUpdate[field] === value) {
-  //       console.warn(`⚠️ row 221-Step 23: No changes detected for ${field}, skipping API call.`);
-  //       return;
-  //   }
-    
-  //   // ✅ Update `taskData` immediately to reflect UI changes before API call
-  //   setTaskData((prevTaskData) => ({
-  //     ...prevTaskData,
-  //     [field]: value,
-  //   }));
-
-  //   try {
-  //       const payload = { [field]: value };
-  //       console.log("📡 Step 24: Sending update to API for", field);
-  //       const response = await fetch(`http://127.0.0.1:5000/api/tasks/${taskId}`, {
-  //           method: "PATCH",
-  //           headers: { "Content-Type": "application/json" },
-  //           body: JSON.stringify(payload),
-  //       });
-
-        
-  //       if (!response.ok) {
-  //           console.error("🚨 Step 26: API Error - Response not OK", response.status);
-  //           const errorText = await response.text();
-  //           throw new Error(`Failed to update ${field}: HTTP ${errorText}`);
-  //       }
-
-  //       const responseData = await response.json();
-  //       console.log("📩 Step 25: API Response Received:", responseData);
-
-  //       console.log(`✅ Step 27: Successfully updated '${field}' for Task ${taskId} to '${value}'`);
-
-  //       // ✅ Emit WebSocket Event for Real-Time Updates (for description, title, status and sort order changes)
-  //       const fieldsToBroadcast = ["title", "description", "status", "sort_order"];
-  //       if (fieldsToBroadcast.includes(field)) {
-  //           console.log(`📡 Emitting WebSocket event for '${field}' update...`);
-  //           socket.emit("update_task", { taskId, field, value });
-  //       }
-
-  //       // ✅ Handle Project Update (Ensure Project Name is Reflected)
-  //       let updatedProjectName = taskToUpdate.project;
-  //       if (field === "project_id") {
-  //           console.log("📌 Step 28: Checking project name for project_id:", value);
-  //           console.log("📌 Current projects state:", projects);
-            
-  //           if (!Array.isArray(projects)) {
-  //               console.error("🚨 projects is not an array!", projects);
-  //           }
-        
-  //           const updatedProject = projects.find((p) => p.id === parseInt(value, 10));
-  //           updatedProjectName = updatedProject ? updatedProject.name : "Unknown Project";
-
-  //           console.log(`✅ Step 29: Updated project name: ${updatedProjectName}`);
-  //       }
-
-  //       // ✅ Handle Contributor Updates - Ensure Contributor Name is Reflected
-  //       let updatedContributorId = taskToUpdate.contributor_id;
-  //       let updatedContributorName = taskToUpdate.contributor_name;
-  //       if (field === "contributor_id") {
-  //           updatedContributorId = responseData?.task?.contributor_id || value;
-  //           updatedContributorName = responseData?.task?.contributor_name || "Unassigned";
-  //       }
-
-  //       // ✅ Update Local Task State in `tasks` array
-  //       console.log("🔄 Step 29: Updating local state with new values...");
-  //       setTasks((prevTasks) =>
-  //           prevTasks.map((task) =>
-  //               task.id === taskId 
-  //                   ? { 
-  //                       ...task,
-  //                       [field]: value,
-  //                       ...(field === "project_id" && { project: updatedProjectName }),
-  //                       ...(field === "contributor_id" && {
-  //                           contributor_id: updatedContributorId,
-  //                           contributor_name: updatedContributorName,
-  //                       }),
-  //                     } 
-  //                   : task
-  //           )
-  //       );
-
-  //       // ✅ If the modal is open for this task, update `selectedTask` as well
-  //       if (selectedTask && selectedTask.id === taskId) {
-  //           console.log("🔄 Step 31: Updating selectedTask state in modal...");
-  //           setSelectedTask((prev) => ({
-  //               ...prev, 
-  //               [field]: value,
-  //               ...(field === "project_id" && { project: updatedProjectName }),
-  //               ...(field === "contributor_id" && {
-  //                   contributor_id: updatedContributorId,
-  //                   contributor_name: updatedContributorName,
-  //               }),
-  //           }));
-  //       }
-
-  //   } catch (error) {
-  //       console.error(`🚨 Step 31: Error updating ${field}:`, error);
-  //   }
-  // }, [projects, selectedTask, tasks]);
-
-
-  // -----------------Backup of old version, changed to new version 4 march 15:30-----------------
-
-
-  // Backup of old version, changed to new version 4 march 15:30 
-  //  ✅ Debounce the handleFieldChange function (Replaces the old handleFieldChange function)
-  // const debouncedSaveRef = useRef(
-  //   debounce(
-  //     async (taskId, field, value, tasks, projects, selectedTask, setTasks, setSelectedTask, socket) => {
-  //       console.log(`📌 Debounced Save Triggered for Task ${taskId}: ${field} → ${value}`);
-  
-  //       if (!taskId) {
-  //         console.error("🚨 Error: taskId is undefined or null!");
-  //         return;
-  //       }
+    console.log(`📌 Updating title for task ${taskId} -> ${newTitle}`);
   
-  //       const taskToUpdate = tasks.find(task => task.id === taskId);
-  //       if (!taskToUpdate) {
-  //         console.error("❌ Error: Task not found in state!", { taskId, field, value });
-  //         return;
-  //       }
-
-  //       if (!taskToUpdate || taskToUpdate[field] === value) {
-  //         console.warn(`⚠️ No actual change detected for '${field}', skipping save.`);
-  //         return;
-  //       }
-
-  //       // 🔥 **NEW: Ensure `parent_id` is included in the update to maintain hierarchy**
-  //       const updatedTaskData = {
-  //         [field]: value,
-  //         parent_id: taskToUpdate.parent_id ?? null,  // ✅ Preserve parent_id if it exists
-  //       };
+    // ✅ Optimistically update the UI before API request
+    setTasks((prevTasks) =>
+      prevTasks.map((task) =>
+        task.id === taskId ? { ...task, name: newTitle } : task
+      )
+    );
   
-  //       // ✅ Optimistic UI Update
-  //       setTaskData(prev => ({ ...prev, [field]: value }));
-  
-  //       try {
-  //         const payload = { [field]: value };
-  //         console.log("📡 Sending update to API for", field);
-  //         console.log("📡 Sending update to API with payload:", updatedTaskData);
-        
-  //         const response = await fetch(`http://127.0.0.1:5000/api/tasks/${taskId}`, {
-  //           method: "PATCH",
-  //           headers: { "Content-Type": "application/json" },
-  //           body: JSON.stringify(payload),
-  //         });
-  
-  //         if (!response.ok) {
-  //           console.error("🚨 API Error:", response.status);
-  //           throw new Error(`Failed to update ${field}`);
-  //         }
-  
-  //         const responseData = await response.json();
-  //         console.log(`✅ Successfully updated '${field}' for Task ${taskId}`);
-  
-  //         // ✅ WebSocket Update - Only Broadcast if it's an important field
-  //         const fieldsToBroadcast = ["title", "description", "status", "sort_order"];
-  //         if (fieldsToBroadcast.includes(field)) {
-  //           console.log(`📡 Emitting WebSocket update for '${field}'`);
-  //           socket.emit("update_task", { taskId, field, value });
-  //         }
+    // ✅ Ensure `selectedTask` updates immediately to reflect UI changes
+    setSelectedTask((prev) => (prev?.id === taskId ? { ...prev, name: newTitle } : prev));
   
-  //         // ✅ Handle Project Update (Ensure Project Name is Reflected)
-  //         let updatedProjectName = taskToUpdate.project;
-  //         if (field === "project_id") {
-  //           console.log("📌 Checking project name for project_id:", value);
-  //           const updatedProject = projects.find((p) => p.id === parseInt(value, 10));
-  //           updatedProjectName = updatedProject ? updatedProject.name : "Unknown Project";
-  //           console.log(`✅ Updated project name: ${updatedProjectName}`);
-  //         }
+    // ✅ Ensure `taskData` updates immediately to reflect UI changes
+    setTaskData((prev) => (prev?.id === taskId ? { ...prev, name: newTitle } : prev));
   
-  //         // ✅ Handle Contributor Updates - Ensure Contributor Name is Reflected
-  //         let updatedContributorId = taskToUpdate.contributor_id;
-  //         let updatedContributorName = taskToUpdate.contributor_name;
-  //         if (field === "contributor_id") {
-  //           updatedContributorId = responseData?.task?.contributor_id || value;
-  //           updatedContributorName = responseData?.task?.contributor_name || "Unassigned";
-  //         }
+    try {
+      const response = await fetch(`http://127.0.0.1:5000/api/tasks/${taskId}`, {
+        method: 'PATCH',
+        headers: { 'Content-Type': 'application/json' },
+        body: JSON.stringify({ name: newTitle }),
+      });
   
-  //         // ✅ Update Local Task State in `tasks` array
-  //         console.log("🔄 Updating local state with new values...");
-  //         setTasks(prevTasks =>
-  //           prevTasks.map(task =>
-  //             task.id === taskId
-  //               ? {
-  //                   ...task,
-  //                   [field]: value,
-  //                   ...(field === "project_id" && { project: updatedProjectName }),
-  //                   ...(field === "contributor_id" && {
-  //                     contributor_id: updatedContributorId,
-  //                     contributor_name: updatedContributorName,
-  //                   }),
-  //                 }
-  //               : task
-  //           )
-  //         );
+      if (!response.ok) throw new Error('Failed to update task title');
   
-  //         // ✅ If the modal is open for this task, update `selectedTask` as well
-  //         if (selectedTask && selectedTask.id === taskId) {
-  //           console.log("🔄 Updating selectedTask state in modal...");
-  //           setSelectedTask(prev => ({
-  //             ...prev,
-  //             [field]: value,
-  //             parent_id: taskToUpdate.parent_id, // ✅ Ensure parent_id remains intact in modal
-  //             ...(field === "project_id" && { project: updatedProjectName }),
-  //             ...(field === "contributor_id" && {
-  //               contributor_id: updatedContributorId,
-  //               contributor_name: updatedContributorName,
-  //             }),
-  //           }));
-  //         }
-  //       } catch (error) {
-  //         console.error(`🚨 Error updating ${field}:`, error);
-  //       }
-  //     },
-  //     1000 // ✅ Debounce delay of 1000ms
-  //   )
-  // );
+      console.log(`✅ Task ${taskId} title updated successfully!`);
+    } catch (error) {
+      console.error(`❌ Error updating task ${taskId} title:`, error);
+    }
+  };
 
   //---------------------New version of debouncedSavRef since 4 march 15:30---------------------//
 
   const debouncedSaveRef = useRef(
     debounce(
-      async (taskId, field, value, tasks, projects, selectedTask, setTasks, setSelectedTask, socket) => {
-        console.log(`📌 Debounced Save Triggered for Task ${taskId}: ${field} → ${value}`);
-  
+      async (
+        taskId,
+        field,
+        value,
+        tasks,
+        projects,
+        selectedTask,
+        setTasks,
+        setSelectedTask,
+        socket
+      ) => {
+        console.log(
+          `📌 Debounced Save Triggered for Task ${taskId}: ${field} → ${value}`
+        );
+
         if (!taskId) {
-          console.error("🚨 Error: taskId is undefined or null!");
+          console.error('🚨 Error: taskId is undefined or null!');
           return;
         }
-  
-        const taskToUpdate = tasks.find(task => task.id === taskId);
+
+        const taskToUpdate = tasks.find((task) => task.id === taskId);
         if (!taskToUpdate) {
-          console.error("❌ Error: Task not found in state!", { taskId, field, value });
+          console.error('❌ Error: Task not found in state!', {
+            taskId,
+            field,
+            value,
+          });
           return;
         }
-  
+
         if (!taskToUpdate || taskToUpdate[field] === value) {
-          console.warn(`⚠️ No actual change detected for '${field}', skipping save.`);
+          console.warn(
+            `⚠️ No actual change detected for '${field}', skipping save.`
+          );
           return;
         }
-  
+
         // ✅ Check if we're updating the parent task
-        const isParentUpdate = field === "parent_id";
-  
+        const isParentUpdate = field === 'parent_id';
+
         // ✅ Choose correct API URL
         const apiUrl = isParentUpdate
-          ? `http://127.0.0.1:5000/api/tasks/${taskId}/parent`  // 🔥 Dedicated parent update route
-          : `http://127.0.0.1:5000/api/tasks/${taskId}`;        // 🔥 General update route
-  
+          ? `http://127.0.0.1:5000/api/tasks/${taskId}/parent` // 🔥 Dedicated parent update route
+          : `http://127.0.0.1:5000/api/tasks/${taskId}`; // 🔥 General update route
+
         // ✅ Format payload correctly
         const payload = isParentUpdate
-          ? { new_parent_id: value || null }  // 🔥 Ensure correct structure for parent updates
+          ? { new_parent_id: value || null } // 🔥 Ensure correct structure for parent updates
           : { [field]: value };
-  
+
         try {
           console.log(`📡 Sending update to API: ${apiUrl}`, payload);
-  
+
           const response = await fetch(apiUrl, {
-            method: "PATCH",  // 🔥 Always use PATCH
-            headers: { "Content-Type": "application/json" },
+            method: 'PATCH', // 🔥 Always use PATCH
+            headers: { 'Content-Type': 'application/json' },
             body: JSON.stringify(payload),
           });
-  
+
           if (!response.ok) {
-            console.error("🚨 API Error:", response.status);
+            console.error('🚨 API Error:', response.status);
             throw new Error(`Failed to update ${field}`);
           }
-  
+
           const responseData = await response.json();
           console.log(`✅ Successfully updated '${field}' for Task ${taskId}`);
-  
+
           // ✅ WebSocket Update (Different event for parent updates)
           if (isParentUpdate) {
-            console.log("📡 Emitting WebSocket event: task_parent_updated");
-            socket.emit("task_parent_updated", { taskId, new_parent_id: value || null });
+            console.log('📡 Emitting WebSocket event: task_parent_updated');
+            socket.emit('task_parent_updated', {
+              taskId,
+              new_parent_id: value || null,
+            });
           } else {
-            const fieldsToBroadcast = ["title", "description", "status", "sort_order"];
+            const fieldsToBroadcast = [
+              'title',
+              'description',
+              'status',
+              'sort_order',
+            ];
             if (fieldsToBroadcast.includes(field)) {
               console.log(`📡 Emitting WebSocket update for '${field}'`);
-              socket.emit("update_task", { taskId, field, value });
+              socket.emit('update_task', { taskId, field, value });
             }
           }
-  
+
           // ✅ Handle Project Update (ONLY for project_id changes)
           let updatedProjectName = taskToUpdate.project;
           let updatedContributorId = taskToUpdate.contributor_id;
           let updatedContributorName = taskToUpdate.contributor_name;
-  
-          if (!isParentUpdate) {  // 🔥 Ensure these updates are skipped for parent_id changes
-            if (field === "project_id") {
-              console.log("📌 Checking project name for project_id:", value);
-              const updatedProject = projects.find((p) => p.id === parseInt(value, 10));
-              updatedProjectName = updatedProject ? updatedProject.name : "Unknown Project";
+
+          if (!isParentUpdate) {
+            // 🔥 Ensure these updates are skipped for parent_id changes
+            if (field === 'project_id') {
+              console.log('📌 Checking project name for project_id:', value);
+              const updatedProject = projects.find(
+                (p) => p.id === parseInt(value, 10)
+              );
+              updatedProjectName = updatedProject
+                ? updatedProject.name
+                : 'Unknown Project';
               console.log(`✅ Updated project name: ${updatedProjectName}`);
             }
-  
+
             // ✅ Handle Contributor Updates - Ensure Contributor Name is Reflected
-            if (field === "contributor_id") {
-              updatedContributorId = responseData?.task?.contributor_id || value;
-              updatedContributorName = responseData?.task?.contributor_name || "Unassigned";
+            if (field === 'contributor_id') {
+              updatedContributorId =
+                responseData?.task?.contributor_id || value;
+              updatedContributorName =
+                responseData?.task?.contributor_name || 'Unassigned';
             }
           }
-  
+
           // ✅ Update Local State in `tasks`
-          setTasks(prevTasks =>
-            prevTasks.map(task =>
+          setTasks((prevTasks) =>
+            prevTasks.map((task) =>
               task.id === taskId
                 ? {
                     ...task,
                     [field]: value,
-                    ...(field === "project_id" && { project: updatedProjectName }),
-                    ...(field === "contributor_id" && {
+                    ...(field === 'project_id' && {
+                      project: updatedProjectName,
+                    }),
+                    ...(field === 'contributor_id' && {
                       contributor_id: updatedContributorId,
                       contributor_name: updatedContributorName,
                     }),
@@ -949,82 +938,97 @@ export default function AllTasks() {
                 : task
             )
           );
-  
+
           // ✅ Ensure modal state updates correctly
           if (selectedTask?.id === taskId) {
-            setSelectedTask(prev => ({
+            setSelectedTask((prev) => ({
               ...prev,
               [field]: value,
-              ...(field === "project_id" && { project: updatedProjectName }),
-              ...(field === "contributor_id" && {
+              ...(field === 'project_id' && { project: updatedProjectName }),
+              ...(field === 'contributor_id' && {
                 contributor_id: updatedContributorId,
                 contributor_name: updatedContributorName,
               }),
             }));
           }
-  
         } catch (error) {
           console.error(`🚨 Error updating ${field}:`, error);
         }
       },
-      1000 // ✅ Debounce delay of 1000ms
+      50 // ✅ Debounce delay of 1000ms
     )
   );
-  
+
   // ✅ Ensure `handleFieldChange` correctly triggers debounced save with parent_id
-  const handleFieldChange = useCallback((taskId, field, value) => {
-    debouncedSaveRef.current(taskId, field, value, tasks, projects, selectedTask, setTasks, setSelectedTask, socket);
-  }, [tasks, projects, selectedTask]);
+  const handleFieldChange = useCallback(
+    (taskId, field, value) => {
+      debouncedSaveRef.current(
+        taskId,
+        field,
+        value,
+        tasks,
+        projects,
+        selectedTask,
+        setTasks,
+        setSelectedTask,
+        socket
+      );
+    },
+    [tasks, projects, selectedTask, socket]
+  );
 
   const saveParentAssignment = async () => {
     const payload = {
-      task_type: taskData.task_type,  // ✅ Needed for validation
-      task_id: taskData.id,  // ✅ Task being updated
-      parent_id: taskData.parent_id,  // ✅ New parent task
-      project_id: taskData.project_id,  // ✅ Ensure project consistency
+      task_type: taskData.task_type, // ✅ Needed for validation
+      task_id: taskData.id, // ✅ Task being updated
+      parent_id: taskData.parent_id, // ✅ New parent task
+      project_id: taskData.project_id, // ✅ Ensure project consistency
     };
-  
+
     try {
       const response = await fetch(`/api/tasks`, {
-        method: "POST",
-        headers: { "Content-Type": "application/json" },
+        method: 'POST',
+        headers: { 'Content-Type': 'application/json' },
         body: JSON.stringify(payload),
-        credentials: "include",
+        credentials: 'include',
       });
-  
-      if (!response.ok) throw new Error("Failed to assign parent task");
-      console.log("✅ Parent task assigned successfully!");
+
+      if (!response.ok) throw new Error('Failed to assign parent task');
+      console.log('✅ Parent task assigned successfully!');
     } catch (error) {
-      console.error("Error assigning parent task:", error);
+      console.error('Error assigning parent task:', error);
     }
   };
-  
+
   const handleDeleteTask = async (taskId) => {
-    if (!window.confirm("Are you sure you want to delete this task?")) return;
-  
+    if (!window.confirm('Are you sure you want to delete this task?')) return;
+
     try {
-      const response = await fetch(`http://127.0.0.1:5000/api/tasks/delete/${taskId}`, {
-        method: "DELETE",
-      });
-  
-      if (!response.ok) throw new Error("Failed to delete task");
-  
+      const response = await fetch(
+        `http://127.0.0.1:5000/api/tasks/delete/${taskId}`,
+        {
+          method: 'DELETE',
+        }
+      );
+
+      if (!response.ok) throw new Error('Failed to delete task');
+
       // ✅ Remove task from local state
       setTasks((prevTasks) => prevTasks.filter((task) => task.id !== taskId));
-  
+
       // ✅ Close modal if the deleted task was open
       if (selectedTask?.id === taskId) {
         setSelectedTask(null);
       }
-  
+
       console.log(`Deleted Task ID: ${taskId}`);
     } catch (error) {
-      console.error("Error deleting task:", error);
+      console.error('Error deleting task:', error);
     }
   };
 
   useEffect(() => {
-    fetch("http://127.0.0.1:5000/api/tasks")
+    fetch('http://127.0.0.1:5000/api/tasks')
       .then((response) => response.json())
       .then((data) => {
         const tasksArray = Array.isArray(data) ? data : data.tasks || [];
@@ -1037,7 +1041,7 @@ export default function AllTasks() {
         });
         setTaskStatus(initialStatus);
       })
-      .catch((error) => console.error("Error fetching tasks:", error));
+      .catch((error) => console.error('Error fetching tasks:', error));
   }, []);
 
   const [loadingProjects, setLoadingProjects] = useState(false);
@@ -1047,28 +1051,42 @@ export default function AllTasks() {
     async function fetchData() {
       setLoadingProjects(true);
       try {
-        const projectsRes = await fetch("http://127.0.0.1:5000/api/projects");
-        if (!projectsRes.ok) throw new Error(`HTTP error! Status: ${projectsRes.status}`);
+        const projectsRes = await fetch('http://127.0.0.1:5000/api/projects');
+        if (!projectsRes.ok)
+          throw new Error(`HTTP error! Status: ${projectsRes.status}`);
         setProjects(await projectsRes.json());
       } catch (error) {
-        console.error("Error fetching projects:", error);
+        console.error('Error fetching projects:', error);
       } finally {
         setLoadingProjects(false);
-      } 
+      }
     }
     fetchData();
   }, []);
 
   useEffect(() => {
-    let filtered = tasks.filter((task) => {
-      return (
-        (filters.project ? task.project === filters.project : true) &&
-        (filters.taskType ? task.task_type === filters.taskType : true) &&
-        (filters.status ? task.status === filters.status : true)
-      );
+    console.log('📡 Fetching filtered tasks from backend...', filters);
+
+    const queryParams = new URLSearchParams({
+      taskType: filters.taskType.length > 0 ? filters.taskType.join(',') : '',
+      status: filters.status.length > 0 ? filters.status.join(',') : '',
+      hideCompleted: filters.hideCompleted,
     });
-    setFilteredTasks(filtered);
-  }, [filters, tasks]);
+
+    if (filters.project_ids.length > 0) {
+      filters.project_ids.forEach((id) =>
+        queryParams.append('project_ids', id)
+      );
+    }
+
+    fetch(`http://127.0.0.1:5000/api/tasks?${queryParams.toString()}`)
+      .then((response) => response.json())
+      .then((data) => {
+        const tasksArray = Array.isArray(data) ? data : data.tasks || [];
+        setFilteredTasks(tasksArray);
+      })
+      .catch((error) => console.error('Error fetching filtered tasks:', error));
+  }, [filters]);
 
   const handlePriorityChange = async (taskId, newPriority) => {
     const taskToUpdate = tasks.find((task) => task.id === taskId);
@@ -1078,49 +1096,52 @@ export default function AllTasks() {
     }
 
     try {
-        const response = await fetch(`http://127.0.0.1:5000/api/tasks/${taskId}`, {
-          method: "PATCH",
-          headers: { "Content-Type": "application/json" },
+      const response = await fetch(
+        `http://127.0.0.1:5000/api/tasks/${taskId}`,
+        {
+          method: 'PATCH',
+          headers: { 'Content-Type': 'application/json' },
           body: JSON.stringify({ priority: newPriority }),
-        });
-    
-        if (!response.ok) throw new Error("Failed to update priority");
-        console.log(`Updated priority for Task ${taskId} to ${newPriority}`);
-    
-        // ✅ Update local state after API success
-        setTasks((prevTasks) =>
-          prevTasks.map((task) =>
-            task.id === taskId ? { ...task, priority: newPriority } : task
-          )
-        );
+        }
+      );
+
+      if (!response.ok) throw new Error('Failed to update priority');
+      console.log(`Updated priority for Task ${taskId} to ${newPriority}`);
 
+      // ✅ Update local state after API success
+      setTasks((prevTasks) =>
+        prevTasks.map((task) =>
+          task.id === taskId ? { ...task, priority: newPriority } : task
+        )
+      );
 
-        console.log(`Updated priority for Task ${taskId} to ${newPriority}`);
+      console.log(`Updated priority for Task ${taskId} to ${newPriority}`);
     } catch (error) {
-        console.error("Error updating priority:", error);
+      console.error('Error updating priority:', error);
     }
   };
 
   const openTaskModal = async (task) => {
     try {
-      console.log("Opening modal for:", task);
-      const response = await fetch(`http://127.0.0.1:5000/api/tasks/${task.id}`);
-      if (!response.ok) throw new Error("Failed to fetch task details");
-      
+      console.log('Opening modal for:', task);
+      const response = await fetch(
+        `http://127.0.0.1:5000/api/tasks/${task.id}`
+      );
+      if (!response.ok) throw new Error('Failed to fetch task details');
+
       const taskData = await response.json();
       setSelectedTask(taskData); // ✅ Ensure modal gets up-to-date data
 
       // ✅ Set modal open after task data is set
       setTimeout(() => {
-          console.log("🚀 Opening modal after fetching task data");
-          setIsModalOpen(true);
+        console.log('🚀 Opening modal after fetching task data');
+        setIsModalOpen(true);
       }, 100);
-
     } catch (error) {
-        console.error("Error fetching task details:", error);
+      console.error('Error fetching task details:', error);
     }
   };
-  
+
   const closeModal = () => {
     setSelectedTask(null);
   };
@@ -1137,303 +1158,151 @@ export default function AllTasks() {
   //         try {
   //             const res = await fetch("http://127.0.0.1:5000/api/csrf", {
   //                 method: "GET",
-  //                 //credentials: "include",
-  //             });
-  //             const data = await res.json();
-  //             csrfToken = data.csrf_token;
-  //         } catch (error) {
-  //             console.error("❌ Failed to fetch CSRF token:", error);
-  //         }
-  //     }
-
-  //     console.log("✅ CSRF Token:", csrfToken);
-  //     return csrfToken;
-  // };
-
-  // Version 1
-  // ✅ Drag & Drop Handler
-  // const handleDragEnd = async (result) => {
-  //   if (!result.destination) return;
-
-  //   const movedTask = filteredTasks[result.source.index];
-  //   const targetTask = filteredTasks[result.destination.index];
-
-  //   if (!movedTask || !movedTask.id) {
-  //       console.error("❌ ERROR: movedTask is undefined or missing an ID!", movedTask);
-  //       return;
-  //   }
-
-  //   console.log("🟢 Drag Event:", result);
-  //   console.log("📡 Moved Task ID:", movedTask.id);
-  //   console.log("📌 New Order Index (Destination):", result.destination.index);
-
-    
-  //   // reorderedTasks.splice(result.destination.index, 0, movedTask);
-  //   // setFilteredTasks(reorderedTasks);
-
-  //   // // Step 2: Fetch CSRF Token
-  //   // const csrfToken = await getCsrfToken();
-    
-  //   // if (!csrfToken) {
-  //   //     console.error("🚨 No CSRF token found! Aborting API call.");
-  //   //     return;
-  //   // }
-
-  //   // Step 3: Send API Request to Persist Sorting
-  //   try {
-  //     let response;
-
-  //     if (result.destination.droppableId !== result.source.droppableId) {
-  //       if (!targetTask) {
-  //           console.error("❌ ERROR: targetTask is missing for parent update!", result);
-  //           return;
-  //       }
-    
-  //       console.log(`🔄 Moving task ${movedTask.id} inside new parent ${targetTask.id}`);
-    
-  //       response = await fetch(`http://localhost:5000/api/tasks/${movedTask.id}/parent`, {
-  //           method: "PUT",
-  //           headers: { "Content-Type": "application/json" },
-  //           credentials: "include",
-  //           body: JSON.stringify({ new_parent_id: targetTask.id }),
-  //       });
-
-  //       } else {
-  //           // ✅ Reordering task within the same hierarchy
-  //           response = await fetch(`http://localhost:5000/api/tasks/${movedTask.id}/sort`, {
-  //               method: "PUT",
-  //               headers: { "Content-Type": "application/json" },
-  //               credentials: "include",
-  //               body: JSON.stringify({ new_order_index: result.destination.index }),
-  //           });
-  //       }
-
-  //       if (!response.ok) {
-  //           // const errorText = await response.text();
-  //           throw new Error(`HTTP error! Status: ${response.status}`);
-  //       }
-
-  //       const data = await response.json();
-  //       console.log("✅ Task sorting updated successfully:", data);
-
-  //       socket.emit("task_sorted", {
-  //           taskId: movedTask.id,
-  //           new_order_index: result.destination.index,
-  //           new_parent_id: movedTask.parent_id, // Ensures correct hierarchy updates
-  //       });
-
-  //       // ✅ Fetch updated tasks after sorting/moving
-  //       const updatedTasksResponse = await fetch("http://localhost:5000/api/tasks");
-  //       const updatedTasks = await updatedTasksResponse.json();
-  //       setFilteredTasks(updatedTasks.tasks);
-
-  //   } catch (error) {
-  //       console.error("❌ Error updating task sorting:", error);
-  //   }
-  // };
-
-  //Version 2
-  // // ✅ Drag & Drop Handler
-  // const handleDragEnd = async (result) => {
-  //   console.log("🟢 Step 1: Drag & Drop Event Triggered:", result);
-
-  //   if (!result.destination) 
-  //     console.log("⚠️ Step 2.a: No valid destination. Drag event ignored.");
-  //     return;
-
-
-
-  //   const movedTask = filteredTasks[result.source.index];
-  //   const targetTask = filteredTasks[result.destination.index];
-
-  //   if (!movedTask || !movedTask.id) {
-  //       console.error("❌ ERROR: movedTask is undefined or missing an ID!", movedTask);
-  //       return;
-  //   }
+  //                 //credentials: "include",
+  //             });
+  //             const data = await res.json();
+  //             csrfToken = data.csrf_token;
+  //         } catch (error) {
+  //             console.error("❌ Failed to fetch CSRF token:", error);
+  //         }
+  //     }
 
-  //   console.log("📢 Drag & Drop Event:", result);
-  //   console.log("📦 Moved Task:", movedTask);
-  //   console.log("🎯 Target Task:", targetTask);
-  //   console.log("📍 Destination Index:", result.destination.index);
-  //   console.log("🔄 Parent Change:", result.destination.droppableId !== result.source.droppableId);
-
-  //   // ✅ Optimistically update UI BEFORE API request
-  //   setFilteredTasks((prevTasks) => {
-  //       const updatedTasks = [...prevTasks];
-  //       updatedTasks.splice(result.source.index, 1); // Remove moved task
-  //       updatedTasks.splice(result.destination.index, 0, movedTask); // Insert in new position
-  //       return updatedTasks;
-  //   });
-
-  //   try {
-  //       let response;
-
-  //       // ✅ Check if the task is moved inside another (Parent Change)
-  //       if (result.destination.droppableId !== result.source.droppableId) {
-  //           if (!targetTask) {
-  //               console.error("❌ ERROR: targetTask is missing for parent update!", result);
-  //               return;
-  //           }
-
-  //           // Prevent invalid parent assignments
-  //           if (movedTask.task_type === "User Story" && targetTask.task_type !== "Epic") {
-  //             alert("A User Story can only be assigned to an Epic.");
-  //             return;
-  //           }
-  //           if (movedTask.task_type === "Subtask" && targetTask.task_type !== "User Story") {
-  //               alert("A Subtask can only be assigned to a User Story.");
-  //               return;
-  //           }
-
-  //           console.log(`🔄 Moving task ${movedTask.id} inside new parent ${targetTask.id}`);
-
-  //           response = await fetch(`http://localhost:5000/api/tasks/${movedTask.id}/parent`, {
-  //               method: "PUT",
-  //               headers: { "Content-Type": "application/json" },
-  //               credentials: "include",
-  //               body: JSON.stringify({ new_parent_id: targetTask.id }),
-  //           });
-
-  //       } else {
-  //           // ✅ Reordering task within the same hierarchy
-  //           console.log(`🔄 Reordering task ${movedTask.id} to new index ${result.destination.index}`);
-
-  //           response = await fetch(`http://localhost:5000/api/tasks/${movedTask.id}/sort`, {
-  //               method: "PUT",
-  //               headers: { "Content-Type": "application/json" },
-  //               credentials: "include",
-  //               body: JSON.stringify({ new_order_index: result.destination.index }),
-  //           });
-  //       }
-
-  //       if (!response.ok) {
-  //           throw new Error(`HTTP error! Status: ${response.status}`);
-  //       }
-
-  //       const data = await response.json();
-  //       console.log("✅ Task sorting updated successfully:", data);
-
-  //       // ✅ Emit WebSocket event for real-time update
-  //       socket.emit("task_sorted", {
-  //           taskId: movedTask.id,
-  //           new_order_index: result.destination.index,
-  //           new_parent_id: movedTask.parent_id, // Ensures correct hierarchy updates
-  //       });
-
-  //       // ✅ Fetch updated tasks after sorting/moving
-  //       const updatedTasksResponse = await fetch("http://localhost:5000/api/tasks");
-  //       const updatedTasks = await updatedTasksResponse.json();
-  //       setFilteredTasks(updatedTasks.tasks);
-
-  //   } catch (error) {
-  //       console.error("❌ Error updating task sorting:", error);
-  //   }
+  //     console.log("✅ CSRF Token:", csrfToken);
+  //     return csrfToken;
   // };
 
+  
+
   // Version 3
   // ✅ Drag & Drop Handler with Detailed Execution Steps
   const handleDragEnd = async (result) => {
-    console.log("🟢 Step 1: Drag & Drop Event Triggered:", result);
+    console.log('🟢 Step 1: Drag & Drop Event Triggered:', result);
 
     // ✅ Step 2: Check if there’s a valid destination
-    if (!result.destination) {  
-        console.log("⚠️ Step 2.a: No valid destination. Drag event ignored.");
-        return;
+    if (!result.destination) {
+      console.log('⚠️ Step 2.a: No valid destination. Drag event ignored.');
+      return;
     }
-    console.log("✅ Step 2.b: Valid destination found, proceeding...");
+    console.log('✅ Step 2.b: Valid destination found, proceeding...');
 
     // ✅ Step 3: Identify Moved & Target Task
     const movedTask = filteredTasks[result.source.index];
     const targetTask = filteredTasks[result.destination.index];
 
-    console.log("📦 Step 3.a: Moved Task:", movedTask);
-    console.log("🎯 Step 3.b: Target Task:", targetTask || "None (Reordering in same list)");
+    console.log('📦 Step 3.a: Moved Task:', movedTask);
+    console.log(
+      '🎯 Step 3.b: Target Task:',
+      targetTask || 'None (Reordering in same list)'
+    );
 
     // ✅ Step 3.c: If movedTask is missing → exit
     if (!movedTask || !movedTask.id) {
-        console.error("❌ Step 3.c: ERROR: movedTask is undefined or missing an ID!", movedTask);
-        return;
+      console.error(
+        '❌ Step 3.c: ERROR: movedTask is undefined or missing an ID!',
+        movedTask
+      );
+      return;
     }
 
     // ✅ Step 4: Detect Parent Change
-    const isParentChange = result.destination.droppableId !== result.source.droppableId;
-    console.log("🔄 Step 4.a: Parent Change Detected:", isParentChange);
-    console.log("📍 Step 4.b: Destination Index:", result.destination.index);
+    const isParentChange =
+      result.destination.droppableId !== result.source.droppableId;
+    console.log('🔄 Step 4.a: Parent Change Detected:', isParentChange);
+    console.log('📍 Step 4.b: Destination Index:', result.destination.index);
 
     // ✅ Step 5: Optimistic UI Update Before API Request
-    console.log("🖼️ Step 5.a: Updating UI optimistically...");
+    console.log('🖼️ Step 5.a: Updating UI optimistically...');
     setFilteredTasks((prevTasks) => {
-        const updatedTasks = [...prevTasks];
-        updatedTasks.splice(result.source.index, 1);
-        updatedTasks.splice(result.destination.index, 0, movedTask);
-        console.log("✅ Step 5.b: UI Updated Locally:", updatedTasks);
-        return updatedTasks;
+      const updatedTasks = [...prevTasks];
+      updatedTasks.splice(result.source.index, 1);
+      updatedTasks.splice(result.destination.index, 0, movedTask);
+      console.log('✅ Step 5.b: UI Updated Locally:', updatedTasks);
+      return updatedTasks;
     });
 
     try {
-        let response;
-
-        // ✅ Step 6: Handle Parent Change
-        if (isParentChange) {
-            if (!targetTask) {
-                console.error("❌ Step 6.a: ERROR: targetTask is missing for parent update!", result);
-                return;
-            }
-
-            // 🚨 Step 6.b: Prevent invalid parent assignments
-            if (movedTask.task_type === "User Story" && targetTask.task_type !== "Epic") {
-                alert("A User Story can only be assigned to an Epic.");
-                return;
-            }
-            if (movedTask.task_type === "Subtask" && targetTask.task_type !== "User Story") {
-                alert("A Subtask can only be assigned to a User Story.");
-                return;
-            }
-
-            console.log(`🔄 Step 6.c: Moving task ${movedTask.id} inside new parent ${targetTask.id}`);
-            response = await fetch(`http://localhost:5000/api/tasks/${movedTask.id}/parent`, {
-                method: "PUT",
-                headers: { "Content-Type": "application/json" },
-                credentials: "include",
-                body: JSON.stringify({ new_parent_id: targetTask.id }),
-            });
-
-        } else {
-            // ✅ Step 7: Handle Reordering (Within Same List)
-            console.log(`🔄 Step 7.a: Reordering task ${movedTask.id} to new index ${result.destination.index}`);
-            response = await fetch(`http://localhost:5000/api/tasks/${movedTask.id}/sort`, {
-                method: "PUT",
-                headers: { "Content-Type": "application/json" },
-                credentials: "include",
-                body: JSON.stringify({ new_order_index: result.destination.index }),
-            });
+      let response;
+
+      // ✅ Step 6: Handle Parent Change
+      if (isParentChange) {
+        if (!targetTask) {
+          console.error(
+            '❌ Step 6.a: ERROR: targetTask is missing for parent update!',
+            result
+          );
+          return;
         }
 
-        // ✅ Step 8: Handle API Response
-        if (!response.ok) {
-            throw new Error(`HTTP error! Status: ${response.status}`);
+        // 🚨 Step 6.b: Prevent invalid parent assignments
+        if (
+          movedTask.task_type === 'User Story' &&
+          targetTask.task_type !== 'Epic'
+        ) {
+          alert('A User Story can only be assigned to an Epic.');
+          return;
         }
+        if (
+          movedTask.task_type === 'Subtask' &&
+          targetTask.task_type !== 'User Story'
+        ) {
+          alert('A Subtask can only be assigned to a User Story.');
+          return;
+        }
+
+        console.log(
+          `🔄 Step 6.c: Moving task ${movedTask.id} inside new parent ${targetTask.id}`
+        );
+        response = await fetch(
+          `http://localhost:5000/api/tasks/${movedTask.id}/parent`,
+          {
+            method: 'PUT',
+            headers: { 'Content-Type': 'application/json' },
+            credentials: 'include',
+            body: JSON.stringify({ new_parent_id: targetTask.id }),
+          }
+        );
+      } else {
+        // ✅ Step 7: Handle Reordering (Within Same List)
+        console.log(
+          `🔄 Step 7.a: Reordering task ${movedTask.id} to new index ${result.destination.index}`
+        );
+        response = await fetch(
+          `http://localhost:5000/api/tasks/${movedTask.id}/sort`,
+          {
+            method: 'PUT',
+            headers: { 'Content-Type': 'application/json' },
+            credentials: 'include',
+            body: JSON.stringify({ new_order_index: result.destination.index }),
+          }
+        );
+      }
 
-        const data = await response.json();
-        console.log("✅ Step 9: Task sorting/moving updated successfully:", data);
+      // ✅ Step 8: Handle API Response
+      if (!response.ok) {
+        throw new Error(`HTTP error! Status: ${response.status}`);
+      }
 
-        // ✅ Step 10: Emit WebSocket Event for Real-Time Update
-        console.log("📡 Step 10: Emitting WebSocket event...");
-        socket.emit("task_sorted", {
-            taskId: movedTask.id,
-            new_order_index: result.destination.index,
-            new_parent_id: movedTask.parent_id,
-        });
+      const data = await response.json();
+      console.log('✅ Step 9: Task sorting/moving updated successfully:', data);
 
-        // ✅ Step 11: Fetch Updated Tasks After Sorting/Moving
-        console.log("🔄 Step 11.a: Fetching updated tasks from API...");
-        const updatedTasksResponse = await fetch("http://localhost:5000/api/tasks");
-        const updatedTasks = await updatedTasksResponse.json();
-        console.log("✅ Step 11.b: Updated tasks received:", updatedTasks);
-        setFilteredTasks(updatedTasks.tasks);
+      // ✅ Step 10: Emit WebSocket Event for Real-Time Update
+      console.log('📡 Step 10: Emitting WebSocket event...');
+      socket.emit('task_sorted', {
+        taskId: movedTask.id,
+        new_order_index: result.destination.index,
+        new_parent_id: movedTask.parent_id,
+      });
 
+      // ✅ Step 11: Fetch Updated Tasks After Sorting/Moving
+      console.log('🔄 Step 11.a: Fetching updated tasks from API...');
+      const updatedTasksResponse = await fetch(
+        'http://localhost:5000/api/tasks'
+      );
+      const updatedTasks = await updatedTasksResponse.json();
+      console.log('✅ Step 11.b: Updated tasks received:', updatedTasks);
+      setFilteredTasks(updatedTasks.tasks);
     } catch (error) {
-        console.error("❌ Step 12: Error updating task sorting:", error);
+      console.error('❌ Step 12: Error updating task sorting:', error);
     }
   };
 
@@ -1441,10 +1310,10 @@ export default function AllTasks() {
   const toggleExpand = (taskId) => {
     setExpandedTasks((prev) => {
       const newExpandedTasks = { ...prev, [taskId]: !prev[taskId] };
-      console.log("🔄 Expanding Task:", taskId, "State:", newExpandedTasks);
+      console.log('🔄 Expanding Task:', taskId, 'State:', newExpandedTasks);
       return newExpandedTasks;
     });
-  
+
     // Force React to re-render to ensure button visibility
     setFilteredTasks((prev) => [...prev]);
   };
@@ -1456,21 +1325,27 @@ export default function AllTasks() {
       .map((task, index) => (
         <Draggable key={task.id} draggableId={task.id.toString()} index={index}>
           {(provided) => (
-            <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps} className="group">
+            <div
+              ref={provided.innerRef}
+              {...provided.draggableProps}
+              {...provided.dragHandleProps}
+              className="group"
+            >
               <div
                 className="task-row grid grid-cols-[minmax(40px,60px)_minmax(40px,60px)_minmax(300px,1fr)_minmax(50px,80px)_minmax(150px,200px)_minmax(130px,180px)_minmax(60px,100px)_minmax(100px,140px)_minmax(100px,140px)_minmax(130px,180px)_minmax(50px,80px)]
                 gap-4 p-3 border-b border-gray-700 items-center hover:bg-gray-700 transition duration-200"
                 style={{ paddingLeft: `${depth * 20}px` }} // ✅ Indent Child Tasks
-              >     
+              >
                 <span className="text-center">
                   <input type="checkbox" />
                 </span>
 
-                {/* ✅ Expand/Collapse Toggle */}
                 {/* ✅ Expand/Collapse Toggle */}
                 <span
                   className={`text-center cursor-pointer ${
-                    task.task_type !== "Subtask" ? "opacity-80 hover:opacity-100" : ""
+                    task.task_type !== 'Subtask'
+                      ? 'opacity-80 hover:opacity-100'
+                      : ''
                   }`}
                   onClick={() => toggleExpand(task.id)}
                 >
@@ -1481,13 +1356,12 @@ export default function AllTasks() {
                       <ChevronRightIcon className="w-6 h-6 text-white" />
                     )
                   ) : (
-                    task.task_type !== "Subtask" && (
-                      expandedTasks[task.id] ? (
-                        <ChevronDownIcon className="w-6 h-6 text-gray-200 opacity-70 hover:opacity-100" />
-                      ) : (
-                        <ChevronRightIcon className="w-6 h-6 text-gray-200 opacity-70 hover:opacity-100" />
-                      )
-                    )
+                    task.task_type !== 'Subtask' &&
+                    (expandedTasks[task.id] ? (
+                      <ChevronDownIcon className="w-6 h-6 text-gray-200 opacity-70 hover:opacity-100" />
+                    ) : (
+                      <ChevronRightIcon className="w-6 h-6 text-gray-200 opacity-70 hover:opacity-100" />
+                    ))
                   )}
                 </span>
 
@@ -1503,23 +1377,25 @@ export default function AllTasks() {
                 </span>*/}
 
                 {/* ✅ Task Title */}
-                <span className="flex items-center relative w-full">
+                <span className="flex items-center relative min-w-64">
                   <div key={task.id} className="task-container">
                     {editingTaskId === task.id ? (
                       <input
                         id={`task-title-${task.id}`}
                         type="text"
                         value={task.name}
-                        onChange={(e) => handleTitleChange(task.id, e.target.value)}
+                        onChange={(e) =>
+                          handleTitleChange(task.id, e.target.value)
+                        }
                         onBlur={handleTitleBlur} // Exit edit mode when focus is lost
                         onKeyDown={handleTitleKeyDown} // Allow pressing "Enter" to save and exit
                         autoFocus // ✅ Auto-focus on edit
-                        className="task-title-input w-full focus:ring"
+                        className="task-title-input focus:ring"
                       />
                     ) : (
                       <button
                         onClick={() => handleTitleClick(task.id)}
-                        className="task-title-text text-left w-full px-2 py-1 bg-transparent border border-transparent hover:border-gray-400 rounded-md transition-all"
+                        className="task-title-text"
                       >
                         {task.name}
                       </button>
@@ -1544,52 +1420,78 @@ export default function AllTasks() {
                 <span className="task-project">{task.project}</span>
                 {/* ✅ Contributor Dropdown inside Task List */}
                 <span className="text-center">
-                <select
-                  name="contributor_id"
-                  className="contributor-dropdown mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
-                  value={task.contributor_id || ""}
-                  onChange={(e) => {
-                    if (!task.id) {
-                      console.error("🚨 Cannot assign contributor: Task ID is undefined!", task);
-                      return;
-                    }
-                    handleContributorChange(task.id, e.target.value);
-                  }}
-                >
-                  <option value="">Unassigned</option>
-                  {contributors.map((c) => {
-                    const contributorProjects = Array.isArray(c.projects) ? c.projects : [];
-                    const taskProjectId = task.project_id ?? null;
-                    const isContributorInProject = contributorProjects.includes(taskProjectId);
-                    const isAssignedContributor = task.contributor_id === c.id; // ✅ Check if this contributor is assigned to the task
-
-                    return (
-                      <option key={c.id} value={c.id}>
-                        {c.name} {!isAssignedContributor && (isContributorInProject ? "✅ (In Project)" : "➕ (Add to Project)")}
-                      </option>
-                    );
-                  })}
-                </select>
+                  <select
+                    name="contributor_id"
+                    className="contributor-dropdown mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
+                    value={task.contributor_id || ''}
+                    onChange={(e) => {
+                      if (!task.id) {
+                        console.error(
+                          '🚨 Cannot assign contributor: Task ID is undefined!',
+                          task
+                        );
+                        return;
+                      }
+
+                      // ✅ Update UI immediately while waiting for API/WebSocket
+                      setTasks((prevTasks) =>
+                        prevTasks.map((t) =>
+                          t.id === task.id ? { ...t, contributor_id: e.target.value } : t
+                        )
+                      );
+
+                      handleContributorChange(task.id, e.target.value);
+                    }}
+                  >
+                    <option value="">Unassigned</option>
+                    {contributors?.map((c) => {
+                      const contributorProjects = Array.isArray(c.projects) ? c.projects : [];
+                      const taskProjectId = task.project_id ? task.project_id : null;
+                      const isContributorInProject =
+                        Array.isArray(contributorProjects) && contributorProjects.includes(taskProjectId);
+                      const isAssignedContributor = task.contributor_id === c.id;
+
+                      return (
+                        <option key={c.id} value={c.id}>
+                          {c.name}{' '}
+                          {!isAssignedContributor &&
+                            (isContributorInProject
+                              ? '✅ (In Project)'
+                              : '➕ (Add to Project)')}
+                        </option>
+                      );
+                    })}
+                  </select>
+                </span>
+                <span className="task-story-points text-center">
+                  {task.story_points || '-'}
                 </span>
-                <span className="task-story-points text-center">{task.story_points || "-"}</span>
 
                 {/* ✅ Task Type Badge */}
-                <span className={`task-type-badge px-3 text-center ${
-                  task.task_type === "Epic"
-                    ? "epic-style"
-                    : task.task_type === "User Story"
-                    ? "user-story-style"
-                    : "subtask-style"
-                }`}>
+                <span
+                  className={`task-type-badge px-3 text-center ${
+                    task.task_type === 'Epic'
+                      ? 'epic-style'
+                      : task.task_type === 'User Story'
+                        ? 'user-story-style'
+                        : 'subtask-style'
+                  }`}
+                >
                   {task.task_type}
                 </span>
 
                 {/* ✅ Priority Dropdown - Show Epic Priority for Epics */}
-                {task.task_type === "Epic" ? (
+                {task.task_type === 'Epic' ? (
                   <select
                     className="priority-dropdown p-2 bg-gray-700 text-white rounded text-center"
-                    value={task.epic_priority || ""}
-                    onChange={(e) => handleFieldChange(task.id, "epic_priority", e.target.value)}
+                    value={task.epic_priority || ''}
+                    onChange={(e) =>
+                      handleFieldChange(
+                        task.id,
+                        'epic_priority',
+                        e.target.value
+                      )
+                    }
                   >
                     <option value="P0">P0 - Highest</option>
                     <option value="P1">P1 - High</option>
@@ -1600,8 +1502,10 @@ export default function AllTasks() {
                 ) : (
                   <select
                     className="priority-dropdown p-2 bg-gray-700 text-white rounded text-center"
-                    value={task.priority || ""}
-                    onChange={(e) => handleFieldChange(task.id, "priority", e.target.value)}
+                    value={task.priority || ''}
+                    onChange={(e) =>
+                      handleFieldChange(task.id, 'priority', e.target.value)
+                    }
                   >
                     <option value="Low">Low</option>
                     <option value="Medium">Medium</option>
@@ -1614,7 +1518,9 @@ export default function AllTasks() {
                 <select
                   className="task-status-dropdown p-2 bg-gray-700 text-white rounded text-center"
                   value={task.status}
-                  onChange={(e) => handleFieldChange(task.id, "status", e.target.value)}
+                  onChange={(e) =>
+                    handleFieldChange(task.id, 'status', e.target.value)
+                  }
                 >
                   <option value="Not Started">Not Started</option>
                   <option value="In Progress">In Progress</option>
@@ -1632,13 +1538,14 @@ export default function AllTasks() {
 
               {/* ✅ Render Nested Tasks (Only If Expanded) */}
               {expandedTasks[task.id] && (
-                <div className="pl-5"> {/* ✅ Ensures proper indentation */}
-
+                <div className="pl-5">
+                  {' '}
+                  {/* ✅ Ensures proper indentation */}
                   {/* ✅ Render existing subtasks first */}
                   {renderTasks(tasks, task.id, depth + 1)}
-
                   {/* ✅ NEW: Add Task Button Inside Task Row */}
-                  {(task.task_type === "Epic" || task.task_type === "User Story") && (
+                  {(task.task_type === 'Epic' ||
+                    task.task_type === 'User Story') && (
                     <div
                       className="task-row grid grid-cols-[minmax(40px,60px)_minmax(40px,60px)_minmax(300px,1fr)_minmax(50px,80px)_minmax(150px,200px)_minmax(130px,180px)_minmax(60px,100px)_minmax(100px,140px)_minmax(100px,140px)_minmax(130px,180px)_minmax(50px,80px)]
                       gap-4 p-3 border-b border-gray-700 items-center hover:bg-gray-700 transition duration-200"
@@ -1648,9 +1555,17 @@ export default function AllTasks() {
                       <span className="text-left col-span-2">
                         <button
                           className="text-blue-400 hover:text-blue-600 px-2 py-1 rounded transition hover:bg-gray-800"
-                          onClick={() => handleCreateTask(task.id, task.task_type === "Epic" ? "User Story" : "Subtask")}
+                          onClick={() =>
+                            handleCreateTask(
+                              task.id,
+                              task.task_type === 'Epic'
+                                ? 'User Story'
+                                : 'Subtask'
+                            )
+                          }
                         >
-                          Add {task.task_type === "Epic" ? "User Story" : "Subtask"}
+                          Add{' '}
+                          {task.task_type === 'Epic' ? 'User Story' : 'Subtask'}
                         </button>
                       </span>
                     </div>
@@ -1664,92 +1579,180 @@ export default function AllTasks() {
   };
 
   return (
-    <div className={`min-h-screen ${darkMode ? "bg-gray-900 text-white" : "bg-gray-100 text-black"} px-10 py-8 mt-16`}
-    style={{ backgroundImage: "url('/background.svg')", backgroundSize: "cover", backgroundRepeat: "no-repeat", backgroundAttachment: "fixed", position: "relative", backgroundPosition: "center center" }}>
-
+    <div
+      className={`min-h-screen ${darkMode ? 'bg-gray-900 text-white' : 'bg-gray-100 text-black'} px-10 py-8 mt-16`}
+      style={{
+        backgroundImage: "url('/background.svg')",
+        backgroundSize: 'cover',
+        backgroundRepeat: 'no-repeat',
+        backgroundAttachment: 'fixed',
+        position: 'relative',
+        backgroundPosition: 'center center',
+      }}
+    >
       {/* ✅ Fixed Navigation Menu & Theme Toggle */}
       <nav className="fixed top-0 left-0 w-full bg-gray-800 p-4 flex items-center justify-between shadow-md z-50">
         <div className="flex items-center space-x-4">
-          <img src="/logo.png" alt="PMS Logo" className="h-8 w-auto hidden sm:block" onError={(e) => e.target.style.display = 'none'} />
+          <Image
+            src="/logo.png"
+            alt="PMS Logo"
+            width={100} // ✅ Required: Explicit width
+            height={40} // ✅ Required: Explicit height
+            className="h-8 w-auto hidden sm:block"
+          />
           <span className="text-white text-xl font-bold sm:hidden">PMS</span>
         </div>
-        
+
         <div className="flex items-center space-x-6">
-          <a href="http://127.0.0.1:5000/dashboard" className="text-gray-300 hover:text-white">Overview</a>
-          <a href="http://127.0.0.1:5000/tasks/" className="text-gray-300 hover:text-white">All Tasks (Old)</a>
-          <a href="http://localhost:3000/alltasks" className="text-white font-bold">All Tasks (React)</a>
-          <button className="p-2 bg-gray-700 text-white hover:bg-gray-600 rounded" onClick={() => setDarkMode(!darkMode)}>
-            {darkMode ? "☀️ Light Mode" : "🌙 Dark Mode"}
+          <a
+            href="http://127.0.0.1:5000/dashboard"
+            className="text-gray-300 hover:text-white"
+          >
+            Overview
+          </a>
+          <a
+            href="http://127.0.0.1:5000/tasks/"
+            className="text-gray-300 hover:text-white"
+          >
+            All Tasks (Old)
+          </a>
+          <a
+            href="http://localhost:3000/alltasks"
+            className="text-white font-bold"
+          >
+            All Tasks (React)
+          </a>
+          <button
+            className="p-2 bg-gray-700 text-white hover:bg-gray-600 rounded"
+            onClick={() => setDarkMode(!darkMode)}
+          >
+            {darkMode ? '☀️ Light Mode' : '🌙 Dark Mode'}
           </button>
         </div>
       </nav>
 
       {/* Filters */}
       <div className="grid grid-cols-4 gap-4 mb-6">
-        {/* Project Filter */}
+        {/* Project Filter - Multi-Select */}
         <select
+          multiple
           className="p-2 bg-gray-800 text-white border border-gray-600 rounded"
-          onChange={(e) => setFilters({ ...filters, project: e.target.value })}
+          value={filters.project_ids} // ✅ Change to plural
+          onChange={(e) => {
+            const selectedValues = Array.from(
+              e.target.selectedOptions,
+              (option) => option.value
+            );
+            setFilters((prevFilters) => ({
+              ...prevFilters,
+              project_ids: selectedValues,
+            })); // ✅ Ensure consistency
+          }}
         >
-          <option value="">All Projects</option>
-          {Array.isArray(projects) ? (
-            projects.map((project) => (
-              <option key={project.id} value={project.name}>
-                {project.name}
-              </option>
-          ))
-        ) : (
-          <option disabled>Loading...</option>
-        )}
+          {projects.map((project) => (
+            <option key={project.id} value={String(project.id)}>
+              {' '}
+              {/* Ensure value is a string */}
+              {project.name}
+            </option>
+          ))}
         </select>
 
-        {/* Task Type Filter */}
+        {/* Task Type Filter - Multi-Select */}
         <select
+          multiple
           className="p-2 bg-gray-800 text-white border border-gray-600 rounded"
-          onChange={(e) => setFilters({ ...filters, taskType: e.target.value })}
+          value={filters.taskType}
+          onChange={(e) => {
+            const selectedValues = Array.from(
+              e.target.selectedOptions,
+              (option) => option.value
+            );
+            setFilters((prevFilters) => ({
+              ...prevFilters,
+              taskType: selectedValues,
+            }));
+          }}
         >
-          <option value="">All Task Types</option>
           <option value="Epic">Epic</option>
           <option value="User Story">User Story</option>
           <option value="Subtask">Subtask</option>
         </select>
 
-        {/* Status Filter */}
+        {/* Status Filter - Multi-Select */}
         <select
+          multiple
           className="p-2 bg-gray-800 text-white border border-gray-600 rounded"
-          onChange={(e) => setFilters({ ...filters, status: e.target.value })}
+          value={filters.status}
+          onChange={(e) => {
+            const selectedValues = Array.from(
+              e.target.selectedOptions,
+              (option) => option.value
+            );
+            setFilters((prevFilters) => ({
+              ...prevFilters,
+              status: selectedValues,
+            }));
+          }}
         >
-          <option value="">All Statuses</option>
           <option value="Not Started">Not Started</option>
           <option value="In Progress">In Progress</option>
+          <option value="Blocked">Blocked</option>
           <option value="Completed">Completed</option>
         </select>
 
+        {/* Hide Completed Tasks Checkbox */}
+        <label className="flex items-center space-x-2">
+          <input
+            type="checkbox"
+            checked={filters.hideCompleted}
+            onChange={(e) =>
+              setFilters((prev) => ({
+                ...prev,
+                hideCompleted: e.target.checked,
+              }))
+            }
+          />
+          <span className="text-white">Hide Completed</span>
+        </label>
+
         {/* Clear Filters Button */}
         <button
           className="p-2 bg-red-500 hover:bg-red-700 rounded"
-          onClick={() => setFilters({ project: "", taskType: "", status: "" })}
+          onClick={() =>
+            setFilters({
+              project_ids: [],
+              taskType: [],
+              status: [],
+              hideCompleted: false,
+            })
+          }
         >
           Clear Filters
         </button>
       </div>
 
       {/* ✅ "New Task" Button */}
-      <button 
+      <button
         className="new-task-button top-20 left-8 z-50 p-3 bg-blue-500 hover:bg-blue-700 text-white font-semibold rounded-lg shadow-lg transition duration-200"
-        onClick={createNewTask}>
-          ➕ New Task
+        onClick={createNewTask}
+      >
+        ➕ New Task
       </button>
 
       {/* ✅ Task List Background Fix */}
-      <div className={` p-6 rounded-md shadow-md ${darkMode ? "bg-gray-800" : "bg-gray-300"}`}
-        style={{ backgroundColor: "rgba(21, 22, 34, 0.8)" }}
+      <div
+        className={` p-6 rounded-md shadow-md ${darkMode ? 'bg-gray-800' : 'bg-gray-300'}`}
+        style={{ backgroundColor: 'rgba(21, 22, 34, 0.8)' }}
       >
-
         {/* ✅ Header Row (Fixed Column Alignment) */}
-        <div className="grid grid-cols-[minmax(40px,60px)_minmax(40px,60px)_minmax(250px,1fr)_minmax(50px,80px)_minmax(150px,200px)_minmax(130px,180px)_minmax(60px,100px)_minmax(100px,140px)_minmax(80px,140px)_minmax(90px,180px)_minmax(30px,80px)]
-          gap-4 p-2 font-bold bg-gray-700 rounded-md text-white">
-          <span className="text-center"><input type="checkbox" id="selectAll" /></span>
+        <div
+          className="grid grid-cols-[minmax(40px,60px)_minmax(40px,60px)_minmax(250px,1fr)_minmax(50px,80px)_minmax(150px,200px)_minmax(130px,180px)_minmax(60px,100px)_minmax(100px,140px)_minmax(80px,140px)_minmax(90px,180px)_minmax(30px,80px)]
+          gap-4 p-2 font-bold bg-gray-700 rounded-md text-white"
+        >
+          <span className="text-center">
+            <input type="checkbox" id="selectAll" />
+          </span>
           <span className="">Toggle</span>
           {/*<span className="">Icon</span>*/}
           <span className="text-left">Task Title</span>
@@ -1779,17 +1782,19 @@ export default function AllTasks() {
         <div
           className="modal-overlay"
           onMouseDown={(e) => {
-            console.log("❌ Modal background clicked, attempting to close");
-            console.log("Event target:", e.target);
-            console.log("Event currentTarget:", e.currentTarget);
-            console.log("Event type:", e.type);
+            console.log('❌ Modal background clicked, attempting to close');
+            console.log('Event target:', e.target);
+            console.log('Event currentTarget:', e.currentTarget);
+            console.log('Event type:', e.type);
             onClose();
           }}
         >
           <div
             className="modal-content"
             onMouseDown={(e) => {
-              console.log("✅ Click inside modal detected - stopping propagation");
+              console.log(
+                '✅ Click inside modal detected - stopping propagation'
+              );
               e.stopPropagation();
             }}
           >
@@ -1800,7 +1805,9 @@ export default function AllTasks() {
               projects={projects}
               selectedProjectId={selectedProjectId} // ✅ Pass selectedProjectId to modal
               onClose={() => {
-                console.log("❌ Modal Close Button Clicked! isModalOpen → false");
+                console.log(
+                  '❌ Modal Close Button Clicked! isModalOpen → false'
+                );
                 setIsModalOpen(false);
               }}
               handleFieldChange={handleFieldChange}
@@ -1810,85 +1817,98 @@ export default function AllTasks() {
           </div>
         </div>
       )}
-
     </div>
   );
 }
 
+{
+  /* ------------------------Task details modal----------------------- */
+}
 
-
-
-
-
-
-
-{/* ------------------------Task details modal----------------------- */}
-
-
-
-
-
-
-
-
-function TaskModal({ isOpen, selectedTask, setSelectedTask, projects, selectedProjectId, onClose, handleFieldChange, handleContributorChange, ParentTaskSelector }) {
-  console.log("🔄 Received isOpen prop:", isOpen); // Log the received prop)
+function TaskModal({
+  isOpen,
+  selectedTask,
+  setSelectedTask,
+  projects,
+  selectedProjectId,
+  onClose,
+  handleFieldChange,
+  handleContributorChange,
+  ParentTaskSelector,
+}) {
+  console.log('🔄 Received isOpen prop:', isOpen); // Log the received prop)
   const defaultTask = {
-    name: "",
-    description: "",
-    priority: "Unset",
-    status: "Not Started",
+    name: '',
+    description: '',
+    priority: 'Unset',
+    status: 'Not Started',
     project_id: selectedProjectId, // ✅ Using selectedProjectId from props to Default to Miscellaneous
     contributor_id: null,
     story_points: 0,
   };
 
   // ✅ Ensure we always have a valid task object
-  const [taskData, setTaskData] = useState(selectedTask || {
-    name: "",
-    description: "",
-    task_type: "User Story",
-    priority: "Unset",
-    status: "Not Started",
-    project_id: selectedProjectId || "", // Ensure selectedProjectId is defined
-  });
+  const [taskData, setTaskData] = useState(
+    selectedTask || {
+      name: '',
+      description: '',
+      task_type: 'User Story',
+      priority: 'Unset',
+      status: 'Not Started',
+      project_id: selectedProjectId || '', // Ensure selectedProjectId is defined
+    }
+  );
   const router = useRouter();
   const pathname = usePathname();
 
   const [contributors, setContributors] = useState([]);
 
   useEffect(() => {
-      if (!selectedTask || !selectedTask.project_id) {
-          console.warn("⚠️ TaskModal Warning: No selectedTask or project_id is undefined!", selectedTask);
-          return;
-      }
-
-      console.log(`🔄 Fetching contributors for project_id: ${selectedTask.project_id}`);
+    if (!selectedTask || !selectedTask.project_id) {
+      console.warn(
+        '⚠️ TaskModal Warning: No selectedTask or project_id is undefined!',
+        selectedTask
+      );
+      return;
+    }
 
-      fetch(`http://127.0.0.1:5000/api/projects/${selectedTask.project_id}/contributors/manage`)
-          .then((res) => res.json())
-          .then((data) => {
-              if (!Array.isArray(data)) {
-                  console.error("❌ Project Contributors API response is not an array!", data);
-                  return;
-              }
-              console.log(`✅ Contributors loaded for project ${selectedTask.project_id}:`, data);
-              setContributors(data);
-          })
-          .catch((error) => console.error("❌ Error fetching contributors:", error));
+    console.log(
+      `🔄 Fetching contributors for project_id: ${selectedTask.project_id}`
+    );
 
-  }, [selectedTask?.project_id]); // ✅ Runs when `selectedTask.project_id` changes
+    fetch(
+      `http://127.0.0.1:5000/api/projects/${selectedTask.project_id}/contributors/manage`
+    )
+      .then((res) => res.json())
+      .then((data) => {
+        if (!Array.isArray(data)) {
+          console.error(
+            '❌ Project Contributors API response is not an array!',
+            data
+          );
+          return;
+        }
+        console.log(
+          `✅ Contributors loaded for project ${selectedTask.project_id}:`,
+          data
+        );
+        setContributors(data);
+      })
+      .catch((error) =>
+        console.error('❌ Error fetching contributors:', error)
+      );
+  }, [selectedTask, selectedTask?.project_id]); // ✅ Runs when `selectedTask.project_id` changes
 
-  const [viewMode, setViewMode] = useState("side");
+  const [viewMode, setViewMode] = useState('side');
 
   // ✅ Define scrollRef here
   const scrollRef = useRef(null);
 
   useEffect(() => {
-    console.log("🛠️ TaskModal useEffect triggered! isOpen:", isOpen);
-    
+    console.log('🛠️ TaskModal useEffect triggered! isOpen:', isOpen);
+
     if (!isOpen) {
-      console.log("❌ Modal is closed - Check what triggered this!");
+      console.log('❌ Modal is closed - Check what triggered this!');
     }
   }, [isOpen]);
 
@@ -1897,46 +1917,58 @@ function TaskModal({ isOpen, selectedTask, setSelectedTask, projects, selectedPr
     setTaskData(selectedTask || {});
   }, [selectedTask]);
 
-
   // ✅ Track if project_id is set
-  const [readyToFetchContributors, setReadyToFetchContributors] = useState(false);
+  const [readyToFetchContributors, setReadyToFetchContributors] =
+    useState(false);
   const effectRun = useRef(false); // ✅ Prevents double execution in strict mode
 
   // ✅ NEW: Set "Miscellaneous" as default if no project is selected
   useEffect(() => {
-    console.log("📌 Checking available projects before assigning default:", projects);
-
-    if (!selectedTask) { // ✅ Only for new tasks
-        const miscProject = projects.find(p => p.name === "Miscellaneous");
-
-        if (miscProject) {
-            console.log("✅ 'Miscellaneous' project found, using ID:", miscProject.id);
-            setTaskData((prev) => ({
-                ...prev,
-                name: "",
-                description: "",
-                task_type: "User Story",
-                priority: "Unset",
-                status: "Not Started",
-                project_id: miscProject.id,  // ✅ Default to "Miscellaneous"
-            }));
-            setReadyToFetchContributors(true);  // ✅ Now project_id is available
-        } else {
-          console.warn("⚠️ 'Miscellaneous' project is missing!");
-          setReadyToFetchContributors(false);
-        }
+    console.log(
+      '📌 Checking available projects before assigning default:',
+      projects
+    );
+
+    if (!selectedTask) {
+      // ✅ Only for new tasks
+      const miscProject = projects.find((p) => p.name === 'Miscellaneous');
+
+      if (miscProject) {
+        console.log(
+          "✅ 'Miscellaneous' project found, using ID:",
+          miscProject.id
+        );
+        setTaskData((prev) => ({
+          ...prev,
+          name: '',
+          description: '',
+          task_type: 'User Story',
+          priority: 'Unset',
+          status: 'Not Started',
+          project_id: miscProject.id, // ✅ Default to "Miscellaneous"
+        }));
+        setReadyToFetchContributors(true); // ✅ Now project_id is available
+      } else {
+        console.warn("⚠️ 'Miscellaneous' project is missing!");
+        setReadyToFetchContributors(false);
+      }
     }
   }, [selectedTask, projects]);
 
   // ✅ Define debouncedSave inside TaskModal with correct reference
-  const debouncedSaveRef = useRef(debounce((taskId, field, value, handleFieldChange) => {
-    console.log(`🔥 Debounced Save Triggered at ${new Date().toISOString()} for ${field}:`, value);
-    if (typeof handleFieldChange === "function") {
-      handleFieldChange(taskId, field, value);
-    } else {
-      console.error("🚨 handleFieldChange is not defined inside debounce!");
-    }
-  }, 1000));
+  const debouncedSaveRef = useRef(
+    debounce((taskId, field, value, handleFieldChange) => {
+      console.log(
+        `🔥 Debounced Save Triggered at ${new Date().toISOString()} for ${field}:`,
+        value
+      );
+      if (typeof handleFieldChange === 'function') {
+        handleFieldChange(taskId, field, value);
+      } else {
+        console.error('🚨 handleFieldChange is not defined inside debounce!');
+      }
+    }, 1500)
+  );
 
   const handleMouseDown = (event) => {
     if (scrollRef.current) {
@@ -1946,10 +1978,10 @@ function TaskModal({ isOpen, selectedTask, setSelectedTask, projects, selectedPr
 
   const handleCreateNewTask = () => {
     setSelectedTask({
-      name: "",
-      description: "",
-      priority: "Medium",
-      status: "Not Started",
+      name: '',
+      description: '',
+      priority: 'Medium',
+      status: 'Not Started',
       project_id: selectedProject?.id || null, // Default to selected project
       contributor_id: null, // Unassigned by default
       story_points: 0,
@@ -1957,137 +1989,155 @@ function TaskModal({ isOpen, selectedTask, setSelectedTask, projects, selectedPr
     setIsModalOpen(true);
   };
 
-  const [taskNameWarning, setTaskNameWarning] = useState(""); // ✅ Store warning message
+  const [taskNameWarning, setTaskNameWarning] = useState(''); // ✅ Store warning message
 
   const validateTaskName = (taskName) => {
-      console.log("🔍 Validating Task Name:", taskName);
-      // Check for existing tasks with the same name
-      if (tasks.some(task => task.name === taskName)) {
-          setTaskNameWarning("⚠️ A task with this name already exists.");
-      } else {
-          setTaskNameWarning(""); // Clear warning when name is unique
-      }
+    console.log('🔍 Validating Task Name:', taskName);
+    // Check for existing tasks with the same name
+    if (tasks.some((task) => task.name === taskName)) {
+      setTaskNameWarning('⚠️ A task with this name already exists.');
+    } else {
+      setTaskNameWarning(''); // Clear warning when name is unique
+    }
   };
 
   const debouncedHandleChange = debounce((event) => {
-      const { name, value } = event.currentTarget;
-      console.log(`🛠️ Debounced handleChange triggered for '${name}' → '${value}'`);
+    const { name, value } = event.currentTarget;
+    console.log(
+      `🛠️ Debounced handleChange triggered for '${name}' → '${value}'`
+    );
 
-      setTaskData(prev => ({ ...prev, [name]: value }));
+    setTaskData((prev) => ({ ...prev, [name]: value }));
 
-      // ✅ Only validate the name field for new tasks
-      if (!selectedTask?.id && name === "name") {
-          validateTaskName(value);
-      }
+    // ✅ Only validate the name field for new tasks
+    if (!selectedTask?.id && name === 'name') {
+      validateTaskName(value);
+    }
   }, 500);
 
-
   const handleChange = async (eventOrValue, fieldName = null) => {
-      eventOrValue.persist?.(); // ✅ Ensure the event is available inside debounce (if event-based)
-
-      let name, value;
-
-      // ✅ Handle inline contentEditable changes for both title (name) and description
-      if (typeof eventOrValue === "string" && fieldName) {
-          name = fieldName; // 🔹 Field name explicitly provided (e.g., "name" or "description")
-          value = eventOrValue; // 🔹 Use the passed string value
-
-          // ✅ If the field being updated is "description", update taskData immediately
-          if (fieldName === "description") {
-              setTaskData((prev) => ({ ...prev, description: value }));
-
-              // ✅ If the task already exists, trigger a debounced save
-              if (taskData.id) {
-                  debouncedSaveRef.current(taskData.id, "description", value, handleFieldChange);
-              }
-              return; // ✅ Prevents further execution
-          }
-      }
-      // ✅ Handle normal form inputs (e.g., select, input fields)
-      else if (eventOrValue.target) {
-          ({ name, value } = eventOrValue.target);
-      }
-      // ❌ If neither case applies, log an error and return early
-      else {
-          console.error("🚨 Unexpected event format in handleChange:", eventOrValue);
-          return;
+    eventOrValue.persist?.(); // ✅ Ensure the event is available inside debounce (if event-based)
+
+    let name, value;
+
+    // ✅ Handle inline contentEditable changes for both title (name) and description
+    if (typeof eventOrValue === 'string' && fieldName) {
+      name = fieldName; // 🔹 Field name explicitly provided (e.g., "name" or "description")
+      value = eventOrValue; // 🔹 Use the passed string value
+
+      // ✅ If the field being updated is "description", update taskData immediately
+      if (fieldName === 'description') {
+        setTaskData((prev) => ({ ...prev, description: value }));
+
+        // ✅ If the task already exists, trigger a debounced save
+        if (taskData.id) {
+          debouncedSaveRef.current(
+            taskData.id,
+            'description',
+            value,
+            handleFieldChange
+          );
+        }
+        return; // ✅ Prevents further execution
       }
+    }
+    // ✅ Handle normal form inputs (e.g., select, input fields)
+    else if (eventOrValue.target) {
+      ({ name, value } = eventOrValue.target);
+    }
+    // ❌ If neither case applies, log an error and return early
+    else {
+      console.error(
+        '🚨 Unexpected event format in handleChange:',
+        eventOrValue
+      );
+      return;
+    }
 
-      console.log(`🛠️ handleChange triggered for '${name}' → '${value}'`);
-
-      // ✅ Update `taskData` state immediately for instant UI feedback
-      setTaskData((prev) => ({
-          ...prev,
-          [name]: value,
-      }));
+    console.log(`🛠️ handleChange triggered for '${name}' → '${value}'`);
 
-      console.log("🔄 Step 11a: Updated taskData:", taskData);
+    // ✅ Update `taskData` state immediately for instant UI feedback
+    setTaskData((prev) => ({
+      ...prev,
+      [name]: value,
+    }));
 
-      // ✅ If editing an existing task, update it using `handleFieldChange`
-      if (taskData.id || selectedTask?.id) { 
-          console.log(`📌 Step 12: Updating existing task ${taskData.id || selectedTask?.id}`);
-          debouncedSaveRef.current(taskData.id || selectedTask?.id, name, value, handleFieldChange);
-          return;
-      }
+    console.log('🔄 Step 11a: Updated taskData:', taskData);
 
-      // ✅ If creating a new task (no ID yet), create it when the first field is edited
-      try {
-          console.log("📡 Step 14: Creating new task...");
-
-          const response = await fetch("http://127.0.0.1:5000/api/tasks", {
-              method: "POST",
-              headers: { "Content-Type": "application/json" },
-              body: JSON.stringify({
-                  title: taskData.name || "Untitled Task",  // ✅ Ensure title is always set
-                  description: taskData.description || "",
-                  task_type: taskData.task_type || "User Story",
-                  priority: taskData.priority || "Unset",
-                  status: taskData.status || "Not Started",
-                  project_id: taskData.project_id || selectedProjectId,  // ✅ Ensure `project_id` is defined
-              }),
-          });
+    // ✅ If editing an existing task, update it using `handleFieldChange`
+    if (taskData.id || selectedTask?.id) {
+      console.log(
+        `📌 Step 12: Updating existing task ${taskData.id || selectedTask?.id}`
+      );
+      debouncedSaveRef.current(
+        taskData.id || selectedTask?.id,
+        name,
+        value,
+        handleFieldChange
+      );
+      return;
+    }
 
-          const responseData = await response.json();
-          console.log("📩 Step 15: API Response:", responseData);
+    // ✅ If creating a new task (no ID yet), create it when the first field is edited
+    try {
+      console.log('📡 Step 14: Creating new task...');
+
+      const response = await fetch('http://127.0.0.1:5000/api/tasks', {
+        method: 'POST',
+        headers: { 'Content-Type': 'application/json' },
+        body: JSON.stringify({
+          title: taskData.name || 'Untitled Task', // ✅ Ensure title is always set
+          description: taskData.description || '',
+          task_type: taskData.task_type || 'User Story',
+          priority: taskData.priority || 'Unset',
+          status: taskData.status || 'Not Started',
+          project_id: taskData.project_id || selectedProjectId, // ✅ Ensure `project_id` is defined
+        }),
+      });
 
-          // ✅ Handle warnings (e.g., duplicate task name)
-          if (responseData.warning) {
-              console.warn(`⚠️ Step 16: Task name warning: ${responseData.warning}`);
-              setTaskNameWarning(responseData.warning);
-          } else {
-              setTaskNameWarning("");
-          }
+      const responseData = await response.json();
+      console.log('📩 Step 15: API Response:', responseData);
 
-          console.log(`✅ Task Created - ID: ${responseData.task.id}, Name: "${responseData.task.name}"`);
+      // ✅ Handle warnings (e.g., duplicate task name)
+      if (responseData.warning) {
+        console.warn(`⚠️ Step 16: Task name warning: ${responseData.warning}`);
+        setTaskNameWarning(responseData.warning);
+      } else {
+        setTaskNameWarning('');
+      }
 
-          // ✅ Update state with new task ID (so future updates use `handleFieldChange`)
-          setTaskData((prev) => ({
-              ...prev,
-              id: responseData.task.id,
-          }));
+      console.log(
+        `✅ Task Created - ID: ${responseData.task.id}, Name: "${responseData.task.name}"`
+      );
 
-          console.log("🔄 Step 18: Updated taskData with new ID:", taskData);
+      // ✅ Update state with new task ID (so future updates use `handleFieldChange`)
+      setTaskData((prev) => ({
+        ...prev,
+        id: responseData.task.id,
+      }));
 
-          // ✅ Ensure `setSelectedTask` is defined before calling it
-          if (typeof setSelectedTask === "function") {
-              setSelectedTask(responseData.task);
-          } else {
-              console.error("🚨 setSelectedTask is not available.");
-          }
+      console.log('🔄 Step 18: Updated taskData with new ID:', taskData);
 
-      } catch (error) {
-          console.error("🚨 Step 20: Error creating new task:", error);
+      // ✅ Ensure `setSelectedTask` is defined before calling it
+      if (typeof setSelectedTask === 'function') {
+        setSelectedTask(responseData.task);
+      } else {
+        console.error('🚨 setSelectedTask is not available.');
       }
+    } catch (error) {
+      console.error('🚨 Step 20: Error creating new task:', error);
+    }
   };
 
   // ✅ Cleanup Effect to prevent debounce issues
   useEffect(() => {
-      return () => {
-          console.log("🛑 Cancelling debouncedSave, but NOT closing modal.");
-          debouncedSaveRef.current.cancel();
-      };
-  }, []);
+    const debouncedSave = debouncedSaveRef.current; // ✅ Store reference
 
+    return () => {
+      console.log('🛑 Cancelling debouncedSave, but NOT closing modal.');
+      debouncedSave.cancel(); // ✅ Use the stored reference
+    };
+  }, []);
 
   /*
   // ✅ Fetch Contributors AFTER taskData.project_id is updated (Prevents double execution)
@@ -2132,10 +2182,12 @@ function TaskModal({ isOpen, selectedTask, setSelectedTask, projects, selectedPr
 */
 
   useEffect(() => {
-      if (!selectedTask || !selectedTask.project_id) {
-          console.warn("⚠️ TaskModal Warning: selectedTask or project_id is undefined!");
-          return;
-      }
+    if (!selectedTask || !selectedTask.project_id) {
+      console.warn(
+        '⚠️ TaskModal Warning: selectedTask or project_id is undefined!'
+      );
+      return;
+    }
   }, [selectedTask]);
 
   // ✅ Animation State for Side View when switching from Modal
@@ -2150,11 +2202,11 @@ function TaskModal({ isOpen, selectedTask, setSelectedTask, projects, selectedPr
   // }, [viewMode]);
 
   useEffect(() => {
-      console.log("🔄 Modal View Updated:", viewMode);
+    console.log('🔄 Modal View Updated:', viewMode);
   }, [viewMode]);
 
   const closeModal = () => {
-    setSelectedTask(null);  // ✅ Clears modal when closed
+    setSelectedTask(null); // ✅ Clears modal when closed
   };
 
   if (!selectedTask && !isOpen) return null;
@@ -2164,102 +2216,138 @@ function TaskModal({ isOpen, selectedTask, setSelectedTask, projects, selectedPr
       <div ref={scrollRef} className="modal-container">
         <div
           className={`task-modal side-view-modal transition-slow p-6 rounded-lg shadow-lg relative z-50
-            ${viewMode === "side" ? "side-view-modal-active" : ""}
+            ${viewMode === 'side' ? 'side-view-modal-active' : ''}
           `}
         >
-        {/* ✅ Close Button - Top Left */}
-        <button 
-          onClick={onClose} 
-          className="close-view-btn absolute top-4 left-4 p-2 bg-transparent text-white hover:text-gray-400"
-        >
-          <svg 
-            xmlns="http://www.w3.org/2000/svg" 
-            viewBox="0 0 24 24" 
-            fill="currentColor" 
-            className="close-modal-arrow"
+          {/* ✅ Close Button - Top Left */}
+          <button
+            onClick={onClose}
+            className="close-view-btn absolute top-4 left-4 p-2 bg-transparent text-white hover:text-gray-400"
           >
-            <path d="M19.1642 12L12.9571 5.79291L11.5429 7.20712L16.3358 12L11.5429 16.7929L12.9571 18.2071L19.1642 12ZM13.5143 12L7.30722 5.79291L5.89301 7.20712L10.6859 12L5.89301 16.7929L7.30722 18.2071L13.5143 12Z"></path>
-          </svg>
-        </button>
-
-        {/* ✅ Close "X" Button - Top Right */}
-        <div className="absolute top-4 right-6 flex space-x-3">
-          <button onClick={onClose} className="text-gray-200 hover:text-white">
-            <XMarkIcon className="w-6 h-6" />
+            <svg
+              xmlns="http://www.w3.org/2000/svg"
+              viewBox="0 0 24 24"
+              fill="currentColor"
+              className="close-modal-arrow"
+            >
+              <path d="M19.1642 12L12.9571 5.79291L11.5429 7.20712L16.3358 12L11.5429 16.7929L12.9571 18.2071L19.1642 12ZM13.5143 12L7.30722 5.79291L5.89301 7.20712L10.6859 12L5.89301 16.7929L7.30722 18.2071L13.5143 12Z"></path>
+            </svg>
           </button>
-        </div>
 
-        {/* ✅ Header (Draggable, Only Includes Title & Close Button) */}
-        <div 
-          className="task-modal-header flex justify-between items-center border-b pb-4 mt-10 drag-handle cursor-move"
-          onMouseDown={handleMouseDown} // ✅ Correctly references function
-        >
-          <div className="flex flex-col w-full">
-          <h2
-            className="text-xl font-bold outline-none focus:ring focus:ring-blue-300 p-1 rounded-md"
-            contentEditable
-            suppressContentEditableWarning
-            onBlur={(e) => handleChange(e.target.innerText.trim(), "name")}  // ✅ Correctly passing "name"
-            onKeyDown={(e) => {
-              if (e.key === "Enter") {
-                e.preventDefault(); // ✅ Prevents new line
-                e.target.blur(); // ✅ Saves and exits edit mode
-              }
-            }}
+          {/* ✅ Close "X" Button - Top Right */}
+          <div className="absolute top-4 right-6 flex space-x-3">
+            <button
+              onClick={onClose}
+              className="text-gray-200 hover:text-white"
+            >
+              <XMarkIcon className="w-6 h-6" />
+            </button>
+          </div>
+
+          {/* ✅ Header (Draggable, Only Includes Title & Close Button) */}
+          <div
+            className="task-modal-header flex justify-between items-center border-b pb-4 mt-10 drag-handle cursor-move"
+            onMouseDown={handleMouseDown} // ✅ Correctly references function
           >
-            {taskData.name}
-          </h2>
-            {/* ✅ Display Task Name Warning */}
-            {taskNameWarning && (
-              <p className="mt-1 text-yellow-500 text-sm">
-                ⚠️ {taskNameWarning}
-              </p>
-            )}
+            <div className="flex flex-col w-full">
+              <h2
+                className="text-xl font-bold outline-none focus:ring focus:ring-blue-300 p-1 rounded-md"
+                contentEditable
+                suppressContentEditableWarning
+                onBlur={(e) => handleChange(e.target.innerText.trim(), 'name')} // ✅ Correctly passing "name"
+                onKeyDown={(e) => {
+                  if (e.key === 'Enter') {
+                    e.preventDefault(); // ✅ Prevents new line
+                    e.target.blur(); // ✅ Saves and exits edit mode
+                  }
+                }}
+              >
+                {taskData.name}
+              </h2>
+              {/* ✅ Display Task Name Warning */}
+              {taskNameWarning && (
+                <p className="mt-1 text-yellow-500 text-sm">
+                  ⚠️ {taskNameWarning}
+                </p>
+              )}
+            </div>
           </div>
-        </div>
 
-        {/* ✅ Task Form */}
-        <form className="mt-4 grid grid-cols-12 gap-4">
-          {/* ✅ Left Column */}
+          {/* ✅ Task Form */}
+          <form className="mt-4 grid grid-cols-12 gap-4">
+            {/* ✅ Left Column */}
             <div className="task-modal-left col-span-10">
               <div className="mb-4">
-                <label className="label block text-sm font-medium text-gray-700">Description</label>
-                <TiptapEditor 
-                  value={taskData.description} 
-                  onChange={(newContent) => handleChange(newContent, "description")} 
+                <label className="label block text-sm font-medium text-gray-700">
+                  Description
+                </label>
+                <TiptapEditor
+                  value={taskData.description}
+                  onChange={(newContent) =>
+                    handleChange(newContent, 'description')
+                  }
                 />
               </div>
             </div>
 
             {/* ✅ Right Column */}
-            <div className="task-modal-right col-span-2 space-y-4 pl-1"> 
+            <div className="task-modal-right col-span-2 space-y-4 pl-1">
               <div className="mb-4">
-                <label className="label block text-sm font-medium text-gray-700">Project</label>
+                <label className="label block text-sm font-medium text-gray-700">
+                  Project
+                </label>
                 <select
                   name="project_id"
                   className="select-project mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
-                  value={taskData.project_id || ""}
+                  value={taskData.project_id || ''}
                   onChange={(e) => {
                     const selectedProjectId = e.target.value;
-                    console.log(`🎯 Row 1125-Project change: Step 1: Project selected: ${selectedProjectId} for task ${taskData.id}`); // <-- ADD THIS LINE
+                    console.log(
+                      `🎯 Row 1125-Project change: Step 1: Project selected: ${selectedProjectId} for task ${taskData.id}`
+                    ); // <-- ADD THIS LINE
 
                     // ✅ Ensure taskData has a valid task ID before updating
                     if (!taskData.id) {
-                      console.error("🚨 Cannot update project, task ID is missing!", taskData);
+                      console.error(
+                        '🚨 Cannot update project, task ID is missing!',
+                        taskData
+                      );
+                      return;
+                    }
+
+                    // ✅ Prevent selecting an invalid project
+                    if (
+                      !projects.some(
+                        (p) => p.id === parseInt(selectedProjectId, 10)
+                      )
+                    ) {
+                      console.warn(
+                        '⚠️ Invalid project selection!',
+                        selectedProjectId
+                      );
                       return;
                     }
-                    
+
                     // ✅ Update the backend
-                    handleFieldChange(taskData.id, "project_id", selectedProjectId);
+                    handleFieldChange(
+                      taskData.id,
+                      'project_id',
+                      selectedProjectId
+                    );
 
                     // ✅ Log when "Miscellaneous" is selected
-                    const selectedProject = projects.find((p) => p.id === parseInt(selectedProjectId, 10));
-                    if (selectedProject?.name === "Miscellaneous") {
-                        console.log("⚠️ Task is assigned to 'Miscellaneous'. Consider selecting a project.");
+                    const selectedProject = projects.find(
+                      (p) => p.id === parseInt(selectedProjectId, 10)
+                    );
+                    if (selectedProject?.name === 'Miscellaneous') {
+                      console.log(
+                        "⚠️ Task is assigned to 'Miscellaneous'. Consider selecting a project."
+                      );
                     }
                   }}
                 >
-                  <option value="">Select Project</option> {/* ✅ Add a placeholder option */}
+                  <option value="">Select Project</option>{' '}
+                  {/* ✅ Add a placeholder option */}
                   {projects.length > 0 ? (
                     projects.map((project) => (
                       <option key={project.id} value={project.id}>
@@ -2280,10 +2368,12 @@ function TaskModal({ isOpen, selectedTask, setSelectedTask, projects, selectedPr
               </div>
 
               <div className="mb-4">
-                <label className="label block text-sm font-medium">Parent Task</label>
+                <label className="label block text-sm font-medium">
+                  Parent Task
+                </label>
                 {/* ✅ Parent Task Selector Inside Modal */}
-                <ParentTaskSelector 
-                  taskData={selectedTask} 
+                <ParentTaskSelector
+                  taskData={selectedTask}
                   setTaskData={setSelectedTask}
                   handleFieldChange={handleFieldChange}
                   socket={socket}
@@ -2291,12 +2381,16 @@ function TaskModal({ isOpen, selectedTask, setSelectedTask, projects, selectedPr
               </div>
 
               <div className="mb-4">
-                <label className="label block text-sm font-medium">Task Type</label>
+                <label className="label block text-sm font-medium">
+                  Task Type
+                </label>
                 <select
                   name="task_type"
                   className="select-task-type mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2 transition-all duration-300"
-                  value={taskData.task_type ?? "User Story"} // ✅ Default to "User Story" if task_type is undefined
-                  onChange={(e) => handleFieldChange(taskData.id, "task_type", e.target.value)}
+                  value={taskData.task_type ?? 'User Story'} // ✅ Default to "User Story" if task_type is undefined
+                  onChange={(e) =>
+                    handleFieldChange(taskData.id, 'task_type', e.target.value)
+                  }
                 >
                   <option value="Epic">Epic</option>
                   <option value="User Story">User Story</option>
@@ -2305,13 +2399,21 @@ function TaskModal({ isOpen, selectedTask, setSelectedTask, projects, selectedPr
               </div>
 
               <div className="mb-4">
-                <label className="select-priority label block text-sm font-medium">Priority</label>
-                {taskData.task_type === "Epic" ? (
+                <label className="select-priority label block text-sm font-medium">
+                  Priority
+                </label>
+                {taskData.task_type === 'Epic' ? (
                   <select
                     name="epic_priority"
                     className="select-priority mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2 transition-all duration-300"
-                    value={taskData.epic_priority ?? "Unset"} // ✅ Default to "Unset" if epic_priority is undefined
-                    onChange={(e) => handleFieldChange(taskData.id, "epic_priority", e.target.value)}
+                    value={taskData.epic_priority ?? 'Unset'} // ✅ Default to "Unset" if epic_priority is undefined
+                    onChange={(e) =>
+                      handleFieldChange(
+                        taskData.id,
+                        'epic_priority',
+                        e.target.value
+                      )
+                    }
                   >
                     <option value="P0">P0 - Highest</option>
                     <option value="P1">P1 - High</option>
@@ -2323,8 +2425,10 @@ function TaskModal({ isOpen, selectedTask, setSelectedTask, projects, selectedPr
                   <select
                     name="priority"
                     className="select-priority mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2 transition-all duration-300"
-                    value={taskData.priority ?? "Unset"} // ✅ Default to "Unset" if priority is undefined
-                    onChange={(e) => handleFieldChange(taskData.id, "priority", e.target.value)}
+                    value={taskData.priority ?? 'Unset'} // ✅ Default to "Unset" if priority is undefined
+                    onChange={(e) =>
+                      handleFieldChange(taskData.id, 'priority', e.target.value)
+                    }
                   >
                     <option value="Low">Low</option>
                     <option value="Medium">Medium</option>
@@ -2335,17 +2439,26 @@ function TaskModal({ isOpen, selectedTask, setSelectedTask, projects, selectedPr
               </div>
 
               <div className="mb-4">
-                <label className="label block text-sm font-medium">Task Status</label>
+                <label className="label block text-sm font-medium">
+                  Task Status
+                </label>
                 <select
                   name="status"
                   className={`select-status mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2 transition-all duration-300 ${
-                    taskData.status === "Not Started" ? "status-not-started" :
-                    taskData.status === "In Progress" ? "status-in-progress" :
-                    taskData.status === "Blocked" ? "status-blocked" :
-                    taskData.status === "Completed" ? "status-completed" : ""
+                    taskData.status === 'Not Started'
+                      ? 'status-not-started'
+                      : taskData.status === 'In Progress'
+                        ? 'status-in-progress'
+                        : taskData.status === 'Blocked'
+                          ? 'status-blocked'
+                          : taskData.status === 'Completed'
+                            ? 'status-completed'
+                            : ''
                   }`}
-                  value={taskData.status ?? "Not Started"} // ✅ Default to "Not Started" if status is undefined  
-                  onChange={(e) => handleFieldChange(taskData.id, "status", e.target.value)}
+                  value={taskData.status ?? 'Not Started'} // ✅ Default to "Not Started" if status is undefined
+                  onChange={(e) =>
+                    handleFieldChange(taskData.id, 'status', e.target.value)
+                  }
                 >
                   <option value="Not Started">Not Started</option>
                   <option value="In Progress">In Progress</option>
@@ -2355,42 +2468,61 @@ function TaskModal({ isOpen, selectedTask, setSelectedTask, projects, selectedPr
               </div>
 
               <div className="mb-4">
-                <label className="label block text-sm font-medium">Estimate (Story Points)</label>
+                <label className="label block text-sm font-medium">
+                  Estimate (Story Points)
+                </label>
                 <input
                   type="number"
                   name="story_points"
                   className="input-story-points mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
-                  value={taskData.story_points || ""} // ✅ Default to empty string if story_points is undefined
-                  onChange={(e) => handleFieldChange(taskData.id, "story_points", e.target.value)}
+                  value={taskData.story_points || ''} // ✅ Default to empty string if story_points is undefined
+                  onChange={(e) =>
+                    handleFieldChange(
+                      taskData.id,
+                      'story_points',
+                      e.target.value
+                    )
+                  }
                 />
               </div>
 
               <div className="mb-4">
-                <label className="label block text-sm font-medium text-gray-100">Owner</label>
+                <label className="label block text-sm font-medium text-gray-100">
+                  Owner
+                </label>
                 <select
                   name="contributor_id"
                   className="select-contributor mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
-                  value={taskData.contributor_id || ""}
+                  value={taskData.contributor_id || ''}
                   onChange={(e) => {
-                    const newContributorId = e.target.value || "unassigned";
-                    console.log(`🔄 Assigning Contributor ID: ${newContributorId} to Task ${taskData.id}`);
-                  
+                    const newContributorId = e.target.value || 'unassigned';
+                    console.log(
+                      `🔄 Assigning Contributor ID: ${newContributorId} to Task ${taskData.id}`
+                    );
+
                     setTaskData((prevTaskData) => ({
                       ...prevTaskData,
-                      contributor_id: newContributorId, 
+                      contributor_id: newContributorId,
                     }));
-                  
+
                     if (taskData.id) {
-                      handleContributorChange(taskData.id, newContributorId).then(() => {
-                        console.log(`📡 Emitting WebSocket event: contributor_updated → Task ID: ${taskData.id}, Contributor ID: ${newContributorId}`);
-                  
-                        socket.emit("contributor_updated", {
+                      handleContributorChange(
+                        taskData.id,
+                        newContributorId
+                      ).then(() => {
+                        console.log(
+                          `📡 Emitting WebSocket event: contributor_updated → Task ID: ${taskData.id}, Contributor ID: ${newContributorId}`
+                        );
+
+                        socket.emit('contributor_updated', {
                           taskId: taskData.id,
-                          contributorId: newContributorId
+                          contributorId: newContributorId,
                         });
                       });
                     } else {
-                      console.warn("⚠️ Task ID is missing, contributor update skipped!");
+                      console.warn(
+                        '⚠️ Task ID is missing, contributor update skipped!'
+                      );
                     }
                   }}
                 >
@@ -2407,7 +2539,10 @@ function TaskModal({ isOpen, selectedTask, setSelectedTask, projects, selectedPr
 
           {/* ✅ Footer Buttons */}
           <div className="mt-6 flex justify-end space-x-4">
-            <button onClick={onClose} className="px-4 py-2 bg-gray-400 text-white rounded-md">
+            <button
+              onClick={onClose}
+              className="px-4 py-2 bg-gray-400 text-white rounded-md"
+            >
               Close
             </button>
           </div>
@@ -2415,4 +2550,4 @@ function TaskModal({ isOpen, selectedTask, setSelectedTask, projects, selectedPr
       </div>
     </div>
   );
-}
\ No newline at end of file
+}
diff --git a/frontend/src/app/styles/custom.css b/frontend/src/app/styles/custom.css
index a052052..9e8f164 100644
--- a/frontend/src/app/styles/custom.css
+++ b/frontend/src/app/styles/custom.css
@@ -48,7 +48,7 @@
     display: flex;
     justify-content: center;
     align-items: center;
-    padding: 0.5rem 1rem;
+    padding: 0.5rem 1.0rem;
     border-radius: 0.55rem;
     background-color: #2563eb; /* Blue-600 */
     color: #fff;
@@ -61,15 +61,51 @@
   }
 
   input.task-title-input {
-    width: 100% !important; /* ✅ Ensure full width */
-    padding: 6px 10px; /* ✅ Add padding for better UX */
-    font-size: 16px;
+    width: 85% !important; /* ✅ Ensure full width */
+    padding: 6px 20px; /* ✅ Add padding for better UX */
     border: 1px solid #ccc; /* ✅ Border for visibility */
     border-radius: 4px;
+    font-size: 1.2rem;
+    font-weight: 500;
     background-color: transparent; /* ✅ Keep background consistent */
     outline: none; /* ✅ Remove default focus outline */
   }
 
+  /* External CSS file (e.g., styles.css or custom.css) */
+  .task-title-text {
+    text-align: left;         /* text-left */
+    width: 85%;
+    font-size: 1.2rem;
+    font-weight: 700;             /* w-full */
+    padding: 0.5rem 0.125rem; /* px-2 py-1 */
+    background: transparent;  /* bg-transparent */
+    border: 1px solid transparent; /* border border-transparent */
+    border-radius: 0.375rem;  /* rounded-md */
+    transition: all 0.2s ease-in-out; /* transition-all */
+    white-space: nowrap;
+    overflow: hidden;
+    text-overflow: ellipsis;
+  }
+
+  button.task-title-text {
+    text-align: left;         /* text-left */
+    font-size: 1.2rem;
+    font-weight: 700;             /* w-full */
+    padding: 0.5rem 0.9rem; /* px-2 py-1 */
+    background: transparent;  /* bg-transparent */
+    border: 1px solid transparent; /* border border-transparent */
+    border-radius: 0.375rem;  /* rounded-md */
+    transition: all 0.2s ease-in-out; /* transition-all */
+    white-space: nowrap;
+    overflow: hidden;
+    text-overflow: ellipsis;
+  }
+
+  .task-title-text:hover {
+    border-color: transparent; /* hover:border-gray-400 */
+    background: #1f2937;
+  }
+
   .task-container {
     display: flex;
     flex-grow: 1;
diff --git a/schema.sql b/schema.sql
index 6c564eb..6a01515 100644
--- a/schema.sql
+++ b/schema.sql
@@ -3,7 +3,7 @@
 --
 
 -- Dumped from database version 14.15 (Homebrew)
--- Dumped by pg_dump version 14.15 (Homebrew)
+-- Dumped by pg_dump version 14.17 (Homebrew)
 
 SET statement_timeout = 0;
 SET lock_timeout = 0;
@@ -16,6 +16,37 @@ SET xmloption = content;
 SET client_min_messages = warning;
 SET row_security = off;
 
+--
+-- Name: epic_priority; Type: TYPE; Schema: public; Owner: fredrik_cederborg
+--
+
+CREATE TYPE public.epic_priority AS ENUM (
+    'Unset',
+    'P0',
+    'P1',
+    'P2',
+    'P3',
+    'P4'
+);
+
+
+ALTER TYPE public.epic_priority OWNER TO fredrik_cederborg;
+
+--
+-- Name: task_priority; Type: TYPE; Schema: public; Owner: pythonproject_user
+--
+
+CREATE TYPE public.task_priority AS ENUM (
+    'Unset',
+    'Low',
+    'Medium',
+    'High',
+    'Critical'
+);
+
+
+ALTER TYPE public.task_priority OWNER TO pythonproject_user;
+
 SET default_tablespace = '';
 
 SET default_table_access_method = heap;
@@ -72,12 +103,13 @@ ALTER SEQUENCE public.contributor_id_seq OWNED BY public.contributor.id;
 CREATE TABLE public.project (
     id integer NOT NULL,
     name character varying(100) NOT NULL,
-    start_date date NOT NULL,
-    end_date date NOT NULL,
+    start_date date DEFAULT now() NOT NULL,
+    end_date date DEFAULT now() NOT NULL,
     completed_story_points integer,
     created_at timestamp without time zone DEFAULT now() NOT NULL,
     updated_at timestamp without time zone DEFAULT now() NOT NULL,
     scope integer,
+    description text,
     CONSTRAINT no_whitespace_in_name CHECK (((name)::text = TRIM(BOTH FROM name)))
 );
 
@@ -137,7 +169,9 @@ CREATE TABLE public.task (
     created_at timestamp without time zone DEFAULT now(),
     updated_at timestamp without time zone DEFAULT now() NOT NULL,
     completed_date timestamp without time zone,
-    status character varying(20) DEFAULT 'Not Started'::character varying NOT NULL
+    status character varying(20) DEFAULT 'Not Started'::character varying NOT NULL,
+    priority public.task_priority DEFAULT 'Medium'::public.task_priority,
+    epic_priority public.epic_priority
 );
 
 
@@ -242,14 +276,6 @@ ALTER TABLE ONLY public.task
     ADD CONSTRAINT task_pkey PRIMARY KEY (id);
 
 
---
--- Name: task unique_task_name_per_parent; Type: CONSTRAINT; Schema: public; Owner: pythonproject_user
---
-
-ALTER TABLE ONLY public.task
-    ADD CONSTRAINT unique_task_name_per_parent UNIQUE (name, parent_id);
-
-
 --
 -- Name: ix_task_completed; Type: INDEX; Schema: public; Owner: pythonproject_user
 --
