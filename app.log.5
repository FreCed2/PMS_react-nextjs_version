2025-02-11 09:21:22,390 DEBUG: Tasks passed to template: [{'id': 290, 'name': 'issue: error when changing task type and', 'description': 'issue: error when changing task type and parent task before saving', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:00:03.417734', 'updated_at': '2025-02-10T09:15:09.284969'}, {'id': 298, 'name': 'example user story with parent epic 297', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 297, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:41:01.907455', 'updated_at': '2025-02-10T14:59:04.142570'}, {'id': 275, 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-10T08:38:37.622196'}, {'id': 276, 'name': 'add support for priority', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-10T08:28:47.447612'}, {'id': 264, 'name': 'close all / open all childtasks', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-02-10T08:47:14.915970'}, {'id': 285, 'name': 'add text truncation to project names in task list', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-10T09:45:47.029729'}, {'id': 257, 'name': 'Update Task API Integration', 'description': "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-02-05T22:55:49.566819', 'updated_at': '2025-02-05T22:18:17.807154'}, {'id': 294, 'name': 'issue: task table filters not working', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:19:21.022598', 'updated_at': '2025-02-10T10:19:21.024676'}, {'id': 267, 'name': 'improvements to toggles and nested tasks', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:29:12.464594', 'updated_at': '2025-02-10T08:47:24.581680'}, {'id': 271, 'name': 'make sure dynamically added rows has the exact same styling and includes every element', 'description': 'Missing elements:\n- Open link\n- Default project\n- Project name should be inside a pill\n- Task type should be in a pill\n- Estimations should be 0, not N/A\n- Make sure font size is matching\n- status should have the dropdown inside a pill\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:21:07.108431', 'updated_at': '2025-02-10T08:38:47.340105'}, {'id': 283, 'name': 'fix update title', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:58.769700', 'updated_at': '2025-02-10T08:46:47.282087'}, {'id': 273, 'name': 'disable parent task selector in epics', 'description': 'and add text, Epic can´t have parent tasks', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:45:20.740910', 'updated_at': '2025-02-10T08:39:17.639890'}, {'id': 269, 'name': 'fix styling for sweetalert', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-02-08T15:54:56.717846', 'updated_at': '2025-02-10T08:39:32.172437'}, {'id': 286, 'name': 'add support for labels/tags', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:46:23.985620', 'updated_at': '2025-02-10T09:46:23.987564'}, {'id': 299, 'name': 'example sub task with parent user story 298', 'description': 'Test update 1\nTest update 2\nTest update 3', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 298, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:42:38.905700', 'updated_at': '2025-02-10T23:23:08.671464'}, {'id': 266, 'name': 'highlight the nested tasks', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-02-10T08:47:04.382929'}, {'id': 279, 'name': 'github integration', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:38.238202', 'updated_at': '2025-02-10T08:39:24.168451'}, {'id': 289, 'name': 'issue: parent task is lost when updating task', 'description': '', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:56:25.273984', 'updated_at': '2025-02-10T09:12:47.626993'}, {'id': 272, 'name': 'implement a markdown text editor like notion', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-02-10T08:28:39.669255'}, {'id': 278, 'name': 'search feature for tasks list', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:03.369833', 'updated_at': '2025-02-10T08:39:04.005957'}, {'id': 281, 'name': 'add high level plan', 'description': 'Add some sort of high level plan that aims to keep PM/PO´s on track and not get lost into the details of an overwhelminly large backlog', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:27:01.218606', 'updated_at': '2025-02-10T08:38:54.754760'}, {'id': 287, 'name': 'when moving a parent item to another project make sure the subtasks are moved as well', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:48:31.986870', 'updated_at': '2025-02-10T09:48:31.988859'}, {'id': 293, 'name': 'click on title should copy the task title and id to clipboard', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:16:33.508209', 'updated_at': '2025-02-10T10:16:33.510414'}, {'id': 277, 'name': 'custom task workflow statuses', 'description': 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- Custom status\n-- Custom status\n- In Progress\n-- Custom status\n-- Custom status\n-- Custom status\n- Completed\n-- Custom status\n-- Custom status\n\n2. How can we track a task through different stages and save the sequence of events or stages the task has gone through?\nI´m thinking it could be good for mapping out processes, identifying bottlenecks and provide valuable insights while improving and streamlining workflows.\n- Stages\n- Contacts taken\n- Respons time \n- Time to action after responses\n- Dependencies\n\nNeed to be able to record every action related to this action.\nCommunication integrations\n- Slack\n- Email\n- Text messages\n- Phonecalls\n- Calendar events, meetings\n- Zoom, Google meet, Teams etc..\n\n\n2. Set custom statuses per project (can use tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:16:03.352588', 'updated_at': '2025-02-10T08:38:28.123328'}, {'id': 274, 'name': 'add support for goals, initiatives, okr´s', 'description': 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:46:27.204912', 'updated_at': '2025-02-10T08:28:17.663922'}, {'id': 280, 'name': 'logging (task and project history)', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:37:44.435112', 'updated_at': '2025-02-10T08:28:28.947805'}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:17.786154', 'updated_at': '2025-02-10T09:41:17.787861'}, {'id': 296, 'name': 'issue: contributor is lost after updating task', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:26:43.881947', 'updated_at': '2025-02-10T10:26:43.884004'}, {'id': 288, 'name': 'when trying to move subtask to another project, make sure a warning is displayed', 'description': 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be lost"\nOR\n\nIs it possible, and is it desireable to keep parent child relationships across projects?\nSo that a parent can be in one project but the child tasks can be in different projects?\n\nLets say \nParent epic is \n"Internationalisation"\nChild user stories are\n- Timezones\n- Language\n- Currency\n- Day, Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:54:36.297869', 'updated_at': '2025-02-10T08:54:51.840686'}, {'id': 284, 'name': 'add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-10T09:42:27.720908'}, {'id': 295, 'name': 'issue: drag and drop errors', 'description': '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:22:54.461413', 'updated_at': '2025-02-10T10:22:54.462542'}, {'id': 297, 'name': 'example parent epic', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:39:51.620509', 'updated_at': '2025-02-10T10:39:51.622712'}, {'id': 292, 'name': 'issue: assigning contributor does not work', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:11:12.273779', 'updated_at': '2025-02-10T10:11:12.274809'}, {'id': 265, 'name': 'smooth transition for toggles', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-02-10T08:46:55.831743'}, {'id': 270, 'name': 'the newest task', 'description': '', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:07:34.368035', 'updated_at': '2025-02-10T01:07:34.372478'}, {'id': 291, 'name': 'add dropdowns in task list for changing: project, assigned to, estimate and task type (labels/tags)', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-02-10T10:09:52.997455'}, {'id': 136, 'name': 'Page scroll should stay in position when reloading', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-16T18:21:50.187247', 'updated_at': '2025-01-16T19:22:36.214901'}, {'id': 130, 'name': 'Implement the Map of Task Relationships solution for drag-and-drop', 'description': 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.093022', 'updated_at': '2025-01-16T19:22:36.216705'}, {'id': 133, 'name': 'Step 4: Enhance Logging in models.py', 'description': 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nupdating the Task model in the following ways:\n\n1.\tLog Changes to parent_id:\n\t•\tLog changes to parent_id during updates, including old and new values.\n\t2.\tValidate Hierarchy with Logging:\n\t•\tLog detailed messages when validating hierarchy changes, especially for circular dependency checks.\n\nHere’s how the models.py can be updated:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy import func, cast, CheckConstraint\nfrom sqlalchemy.orm import validates\nfrom app.extensions.db import db\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\nclass Task(db.Model):\n    __tablename__ = "task"\n    \n    # Other columns...\n\n    parent_id = db.Column(\n        db.Integer, db.ForeignKey("task.id"), index=True, nullable=True\n    )\n\n    # Relationships\n    parent = db.relationship(\n        "Task", remote_side=[id], back_populates="children", lazy="select"\n    )\n    children = db.relationship(\n        "Task", back_populates="parent", lazy="select"\n    )\n\n    \n\n\n    @staticmethod\n    def _validate_no_circular_references(new_parent_id):\n        """\n        Validates that there are no circular references in the task hierarchy.\n\n        Args:\n            new_parent_id (int): The new parent ID to validate.\n\n        Raises:\n            ValueError: If a circular reference is detected.\n        """\n        visited = set()\n        current_parent_id = new_parent_id\n\n        logger.info(f"Validating circular references for parent ID: {new_parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error(\n                    f"Circular reference detected: Parent ID {current_parent_id} already visited."\n                )\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            # Fetch the next parent_id in the hierarchy\n            parent = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not parent:\n                break  # Exit if no parent is found\n            current_parent_id = parent.parent_id\n\n        logger.info("No circular reference detected.")\n\n    @validates(\'parent_id\', \'task_type\')\n    def validate_task_changes(self, key, value):\n        """\n        Validates changes to \'parent_id\' and \'task_type\'.\n        Ensures hierarchy validity and checks for circular references.\n        """\n        logger.debug(f"Validating {key} change for Task {self.id}: {value}")\n\n        if key == \'parent_id\':\n            # Log changes to parent_id\n            if self.id and value != self.parent_id:\n                logger.info(f"Task {self.id}: Updating \'parent_id\' from {self.parent_id} to {value}")\n\n            # Prevent a task from being its own parent\n            if value and value == self.id:\n                logger.error("A task cannot be its own parent.")\n                raise ValueError("A task cannot be its own parent.")\n\n            # Check for circular references\n            if value:\n                Task.check_circular_reference(self.id, value)\n\n        elif key == \'task_type\':\n            # Log changes to task_type\n            if self.id and value != self.task_type:\n                logger.info(f"Task {self.id}: Updating \'task_type\' from {self.task_type} to {value}")\n\n        # Check hierarchy rules without triggering further validation\n        if key in [\'parent_id\', \'task_type\']:\n            self._validate_hierarchy_change(key, value)\n\n        logger.info(f"Validation passed for {key}: {value}")\n        return value\n\n    def _validate_hierarchy_change(self, key, value):\n        """\n        Validates hierarchy rules for the task based on `task_type` and `parent_id`.\n        """\n        if key == \'parent_id\' and value:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=value).first()\n            if not parent_task:\n                raise ValueError("Parent task does not exist.")\n\n            logger.debug(f"Validating hierarchy: Task {self.id}, Parent Type: {parent_task.task_type}")\n            if self.task_type == "User Story" and parent_task.task_type != "Epic":\n                raise ValueError("User Stories must have an Epic as a parent.")\n            if self.task_type == "Subtask" and parent_task.task_type != "User Story":\n                raise ValueError("Subtasks must have a User Story as a parent.")\n\n        elif key == \'task_type\' and self.parent_id:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=self.parent_id).first()\n            if parent_task:\n                logger.debug(f"Validating hierarchy: Task Type: {value}, Parent Type: {parent_task.task_type}")\n                if value == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError("User Stories must have an Epic as a parent.")\n                if value == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError("Subtasks must have a User Story as a parent.")\n\n        logger.info(f"Hierarchy validation passed for Task {self.id if self.id else \'New Task\'}.")\n\n    @staticmethod\n    def check_circular_reference(task_id, parent_id):\n        """\n        Iteratively checks for circular references in the task hierarchy.\n        Prevents stack overflow on deep hierarchies.\n        """\n        visited = set()\n        current_parent_id = parent_id\n\n        logger.info(f"Checking circular reference for Task {task_id} with Parent ID: {parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error("Circular reference detected!")\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            if current_parent_id == task_id:\n                logger.error("A task cannot be its own ancestor.")\n                raise ValueError("A task cannot be its own ancestor.")\n\n            # Fetch the next parent_id in the hierarchy\n            task = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not task:\n                break\n            current_parent_id = task.parent_id\n\n        logger.info("Circular reference check passed.")\n```\nKey Enhancements:\n\t1.\tlog_and_validate_parent_id_change:\n\t•\tLogs the old and new parent_id whenever it changes.\n\t•\tEnsures no circular references are introduced.\n\t2.\t_validate_no_circular_references:\n\t•\tValidates the parent_id field to prevent circular dependencies.\n\t•\tLogs progress and raises detailed errors if violations occur.\n\t3.\tlog_and_validate_task_type_change:\n\t•\tLogs changes to task_type with the old and new values.\n\t•\tRevalidates hierarchy rules when task_type changes.\n\t4.\tDetailed Logging for Circular Reference Validation:\n\t•\t_validate_no_circular_references and check_circular_reference methods log every step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t•\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:44:08.340041', 'updated_at': '2025-01-16T19:22:36.219710'}, {'id': 132, 'name': 'Step 1: Update tasks_table_interactions.js', 'description': '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the map for efficient parent-child relationship lookups instead of DOM traversal.\n\n```\nexport const TaskManager = {\n    init: function (csrfToken) {\n        this.csrfToken = csrfToken;\n        this.initTaskParentMap(); // Initialize the map\n        this.initDragAndDrop(); // Initialize drag-and-drop functionality\n    },\n\n    // Initialize a global map for task relationships\n    taskParentMap: new Map(),\n\n    // Build the taskParentMap from the DOM\n    initTaskParentMap: function () {\n        console.log("Initializing Task Parent Map...");\n        const rows = document.querySelectorAll("tr[data-task-id]");\n\n        rows.forEach((row) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = parseInt(row.dataset.parentId, 10) || null;\n            this.taskParentMap.set(taskId, parentId);\n        });\n\n        console.log("Task Parent Map initialized:", Array.from(this.taskParentMap.entries()));\n    },\n\n    // Update the map dynamically after drag-and-drop\n    updateTaskParentMap: function (taskId, parentId) {\n        console.log(`Updating Task Parent Map: Task ${taskId} -> Parent ${parentId}`);\n        this.taskParentMap.set(taskId, parentId);\n    },\n\n    initDragAndDrop: function () {\n        if (window.isDragAndDropInitialized) {\n            console.log("Drag-and-drop is already initialized.");\n            return;\n        }\n\n        console.log("Initializing drag-and-drop within TaskManager...");\n\n        const tableBody = document.querySelector("tbody");\n        if (!tableBody) {\n            console.warn("Task table body not found for drag-and-drop initialization");\n            return;\n        }\n\n        // Initialize Sortable.js for drag-and-drop functionality\n        Sortable.create(tableBody, {\n            handle: ".task-row", // Only draggable via `.task-row` elements\n            animation: 150, // Smooth animation\n            filter: ".task-open-link", // Prevent dragging on task links\n            preventOnFilter: true, // Prevent drag if filtered element is clicked\n            onEnd: async (event) => {\n                try {\n                    console.log("Drag-and-drop operation started...");\n                    const rows = Array.from(event.from.querySelectorAll(".task-row"));\n                    const reorderedTasks = [];\n\n                    rows.forEach((row, index) => {\n                        const taskId = parseInt(row.dataset.taskId, 10);\n                        let parentId = null;\n\n                        // Get the parent ID from the map or fallback to the dataset\n                        if (row.classList.contains("subtask-row")) {\n                            const parentRow = row.previousElementSibling;\n                            parentId = parentRow\n                                ? parseInt(parentRow.dataset.taskId, 10)\n                                : this.taskParentMap.get(taskId) || null;\n                        }\n\n                        // Update the taskParentMap dynamically\n                        this.updateTaskParentMap(taskId, parentId);\n\n                        reorderedTasks.push({\n                            id: taskId,\n                            sort_order: index + 1,\n                            parent_id: parentId,\n                        });\n                    });\n\n                    console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n                    console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n                    // Send the payload to the backend\n                    const response = await fetch("/tasks/reorder_subtasks", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                            "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n                        },\n                        body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n                    });\n\n                    if (!response.ok) {\n                        const errorData = await response.json();\n                        console.error("Error reordering tasks:", errorData);\n                        alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n                        return;\n                    }\n\n                    const data = await response.json();\n                    console.log("Task reordering successful:", data);\n\n                } catch (error) {\n                    console.error("Error during drag-and-drop operation:", error);\n                    alert("An unexpected error occurred while reordering tasks.");\n                }\n            },\n        });\n\n        window.isDragAndDropInitialized = true;\n        console.log("Drag-and-drop initialized successfully.");\n    },\n};\n```\n\nKey Updates:\n\t1.\tPrecomputed Map (taskParentMap):\n\t•\tThe initTaskParentMap function initializes the map by iterating over DOM elements and mapping each task’s ID to its parent ID.\n\t•\tThe updateTaskParentMap dynamically updates the map when tasks are reordered.\n\t2.\tEfficient Parent Lookup:\n\t•\tThe parentId is derived from the precomputed map rather than DOM traversal.\n\t3.\tBackend Payload:\n\t•\tA structured payload (reorderedTasks) is sent to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t•\tCSRF protection is ensured by passing the token to the request headers.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:44:08.338301', 'updated_at': '2025-02-06T21:59:17.417466'}, {'id': 134, 'name': 'Step 2: Update the Backend in routes.py', 'description': 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\nPlan for step 2:\n\t1.\tVerify the payload structure:\n\t•\tEnsure that the payload includes all necessary fields (id, sort_order, parent_id) for each task.\n\t•\tValidate that the parent-child relationships in the precomputed map (taskParentMap) are reflected correctly in the payload.\n\t2.\tSubmit the payload to the backend:\n\t•\tEnhance the fetch request in the onEnd function of initDragAndDrop to log detailed submission data.\n\t•\tConfirm the payload integrity in the browser console before submission.\n\t3.\tUpdate backend logging:\n\t•\tAdd logging to /reorder_subtasks in routes.py to confirm receipt of the correct payload and process parent-child updates.\n\t•\tLog before and after database updates for better debugging.\n\n-----\nUpdated tasks_table_interactions.js\n\nReplace this section:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    let parentId = null;\n```\nWith:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    const parentId = this.taskParentMap.get(taskId) || null;\n```\nThe this.taskParentMap provides a precomputed and dynamic mapping of taskId to parentId. By using this map, we avoid relying on DOM traversal logic (row.closest or row.previousElementSibling) during drag-and-drop operations, which can sometimes be unreliable or cumbersome.\n\nFull Revised onEnd section:\n```\nonEnd: async (event) => {\n    try {\n        console.log("Drag-and-drop operation started...");\n        const rows = Array.from(event.from.querySelectorAll(".task-row"));\n        const reorderedTasks = [];\n\n        rows.forEach((row, index) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = this.taskParentMap.get(taskId) || null;\n\n            // Update the taskParentMap dynamically\n            this.updateTaskParentMap(taskId, parentId);\n\n            reorderedTasks.push({\n                id: taskId,\n                sort_order: index + 1,\n                parent_id: parentId,\n            });\n        });\n\n        console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n        console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n        // Send the payload to the backend\n        const response = await fetch("/tasks/reorder_subtasks", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n            },\n            body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error("Error reordering tasks:", errorData);\n            alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n            return;\n        }\n\n        const data = await response.json();\n        console.log("Task reordering successful:", data);\n\n    } catch (error) {\n        console.error("Error during drag-and-drop operation:", error);\n        alert("An unexpected error occurred while reordering tasks.");\n    }\n}\n```\n---------------------------------\nEnsure updates include:\n\t•\tBetter Logging: Adding logs for key events such as database changes and validation results.\n\t•\tInput Validation: Ensure all required fields (id, sort_order, parent_id) exist in the payload.\n\t•\tPost-Commit Validation: Confirm database updates after the commit.\n\t•\tImproved Error Handling: Include specific error messages and consistent rollback mechanisms.\n\nBelow is the revised reorder_subtasks route with descriptive comments for each section:\n```\n@bp.route("/reorder_subtasks", methods=["POST"])\ndef reorder_subtasks():\n    """\n    Reorder subtasks globally or reassign them to a different parent.\n\n    Steps:\n    - Parse and validate input from the frontend.\n    - Update parent-child relationships and sort order in the database.\n    - Commit changes and return a success response.\n    - Handle errors gracefully and provide detailed logs for debugging.\n    """\n    logger.info("Entering reorder_subtasks route...")\n    logger.info(f"Received payload for reordering tasks: {request.json}")\n\n    try:\n        # Step 1: Parse input\n        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered\n        ordered_tasks = request.json.get("ordered_tasks", [])\n\n        logger.debug(f"Parsed parent_id: {parent_id}")\n        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")\n\n        # Step 2: Validate input\n        if not isinstance(ordered_tasks, list) or not all(\n            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task\n            for task in ordered_tasks\n        ):\n            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")\n            return jsonify({\n                "error": "Invalid input format for \'ordered_tasks\'. Each task must include \'id\', \'sort_order\', and \'parent_id\'."\n            }), 400\n\n        # Step 3: Validate parent task (if applicable)\n        if parent_id is not None:\n            parent_task = Task.query.get(parent_id)\n            if not parent_task:\n                logger.error(f"Parent task with ID {parent_id} not found.")\n                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400\n\n        logger.info("Input validation passed. Proceeding with task updates...")\n\n        # Step 4: Process updates for each subtask\n        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation\n\n        for task_data in ordered_tasks:\n            subtask_id = task_data["id"]\n            sort_order = task_data["sort_order"]\n            new_parent_id = task_data["parent_id"]\n\n            # Fetch the subtask from the database\n            subtask = Task.query.get(subtask_id)\n            if not subtask:\n                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")\n                continue\n\n            # Log and update parent_id if it changes\n            if new_parent_id is not None and new_parent_id != subtask.parent_id:\n                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")\n                subtask.parent_id = new_parent_id\n\n            # Update sort order\n            subtask.sort_order = sort_order\n            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")\n\n            # Add to the list of updated subtasks for validation\n            updated_subtasks.append(subtask)\n\n        # Step 5: Commit changes to the database\n        try:\n            db.session.commit()\n            logger.info(f"Subtasks reordered successfully: {[task[\'id\'] for task in ordered_tasks]}")\n        except Exception as e:\n            logger.error(f"Error committing changes to the database: {str(e)}")\n            db.session.rollback()\n            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500\n\n        # Step 6: Post-commit validation\n        for subtask in updated_subtasks:\n            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")\n            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")\n\n        # Step 7: Return success response\n        return jsonify({\n            "success": True,\n            "message": "Subtasks reordered successfully.",\n            "updated_subtasks": [subtask.id for subtask in updated_subtasks]\n        }), 200\n\n    except Exception as e:\n        # Step 8: Handle unexpected errors\n        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)\n        db.session.rollback()\n        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500\n```\nKey Changes and Descriptive Comments\n\t1.\tInput Parsing:\n\t•\tExtracts parent_id and ordered_tasks from the request payload.\n\t•\tLogs the parsed values for debugging.\n\t2.\tInput Validation:\n\t•\tEnsures ordered_tasks is a list of dictionaries with the required keys.\n\t•\tValidates parent_id if provided, ensuring the parent task exists in the database.\n\t3.\tUpdate Processing:\n\t•\tIterates through ordered_tasks, updating each task’s parent_id and sort_order.\n\t•\tLogs changes for each task.\n\t4.\tDatabase Commit:\n\t•\tCommits all updates in a single transaction.\n\t•\tLogs success or rolls back changes in case of an error.\n\t5.\tPost-Commit Validation:\n\t•\tVerifies that the parent_id and sort_order changes were successfully saved to the database.\n\t6.\tError Handling:\n\t•\tCaptures and logs exceptions during processing or committing.\n\t•\tProvides meaningful error messages to the frontend.\n\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:46:29.348853', 'updated_at': '2025-02-06T21:59:21.617065'}, {'id': 131, 'name': 'Step 5: Update utils.py', 'description': 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nChanges to Make:\n\t1.\tEnhance Task Filtering:\n\t•\tEnsure the filters handle parent-child relationships explicitly.\n\t•\tAdd options to include or exclude subtasks in queries.\n\t2.\tUtility Function for Debugging Parent-Child Relationships:\n\t•\tProvide a function to generate a map or list of parent-child relationships for debugging purposes.\n\t3.\tValidation Functions:\n\t•\tAdd a utility function to validate parent-child relationships and ensure no circular dependencies.\n\nUpdated utils.py Code:\n```\nimport logging\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import joinedload\nfrom app.extensions.db import db\nfrom app.tasks.models import Task\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\n\nclass TaskService:\n    @staticmethod\n    def filter_tasks(filters=None, include_subtasks=True, page=None, per_page=None):\n        """\n        Dynamically filters tasks with an option to include or exclude subtasks.\n\n        Args:\n            filters (dict): Filtering criteria.\n            include_subtasks (bool): Whether to include subtasks in the query.\n            page (int, optional): Page number for pagination.\n            per_page (int, optional): Items per page for pagination.\n\n        Returns:\n            Query or Pagination: A SQLAlchemy query object or paginated results.\n        """\n        query = Task.query.options(\n            db.joinedload(Task.project).joinedload(Project.contributors),\n            db.joinedload(Task.contributor),\n            db.joinedload(Task.children),\n        ).order_by(Task.sort_order)\n\n        if filters:\n            logger.debug(f"Applying filters: {filters}")\n\n            # Apply standard filters\n            if "is_archived" in filters:\n                query = query.filter(Task.is_archived == filters["is_archived"])\n            if "project_id" in filters:\n                query = query.filter(Task.project_id == filters["project_id"])\n            if "task_type" in filters:\n                if isinstance(filters["task_type"], list):\n                    query = query.filter(Task.task_type.in_(filters["task_type"]))\n                else:\n                    query = query.filter(Task.task_type == filters["task_type"])\n            if "completion_status" in filters:\n                completion_map = {"completed": True, "in_progress": False}\n                if filters["completion_status"] in completion_map:\n                    query = query.filter(Task.completed == completion_map[filters["completion_status"]])\n\n            # Optionally exclude subtasks\n            if not include_subtasks:\n                query = query.filter(Task.task_type != "Subtask")\n\n        logger.debug(f"Generated query: {query}")\n\n        # Pagination\n        if page and per_page:\n            return query.paginate(page=page, per_page=per_page, error_out=False)\n        return query\n\n    @staticmethod\n    def debug_parent_child_relationships(project_id=None):\n        """\n        Generates a debug map of parent-child relationships for all tasks.\n\n        Args:\n            project_id (int, optional): Restrict to tasks from a specific project.\n\n        Returns:\n            dict: A dictionary mapping parent IDs to their child task IDs.\n        """\n        query = Task.query\n        if project_id:\n            query = query.filter(Task.project_id == project_id)\n\n        tasks = query.options(\n            db.load_only(Task.id, Task.parent_id)\n        ).all()\n\n        relationship_map = {}\n        for task in tasks:\n            if task.parent_id not in relationship_map:\n                relationship_map[task.parent_id] = []\n            relationship_map[task.parent_id].append(task.id)\n\n        logger.debug(f"Parent-Child Relationship Map: {relationship_map}")\n        return relationship_map\n\n    @staticmethod\n    def validate_parent_child_relationships():\n        """\n        Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.\n\n        Raises:\n            ValueError: If invalid relationships are detected.\n        """\n        tasks = Task.query.options(db.joinedload(Task.parent)).all()\n\n        for task in tasks:\n            if task.parent_id:\n                parent_task = task.parent\n                if not parent_task:\n                    raise ValueError(f"Task {task.id} has an invalid parent ID {task.parent_id}.")\n\n                # Validate hierarchy rules\n                if task.task_type == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError(f"User Story {task.id} must have an Epic as its parent.")\n                if task.task_type == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError(f"Subtask {task.id} must have a User Story as its parent.")\n\n        logger.info("All parent-child relationships are valid.")\n\n    @staticmethod\n    def get_all_task_ids_with_parents():\n        """\n        Returns a flat list of tasks with their parent IDs for debugging.\n\n        Returns:\n            list: A list of tuples (task_id, parent_id).\n        """\n        tasks = Task.query.with_entities(Task.id, Task.parent_id).all()\n        logger.debug(f"Task IDs with Parent IDs: {tasks}")\n        return tasks\n```\n\n\nExplanation of Changes:\n\t1.\tfilter_tasks Enhancements:\n\t•\tAdded include_subtasks parameter to optionally exclude subtasks from the query.\n\t2.\tdebug_parent_child_relationships:\n\t•\tCreates a parent-child relationship map for debugging purposes.\n\t3.\tvalidate_parent_child_relationships:\n\t•\tIterates through all tasks to validate parent-child hierarchy and ensures no invalid relationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t•\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.091824', 'updated_at': '2025-01-16T19:22:36.236691'}, {'id': 135, 'name': 'Step 3: Update list.html', 'description': 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already includes everything needed. No required changes.\n\nHere´s the relevant section of list.html:\n\n```\n<tr id="task-{{ task.id }}"\n                class="task-row {% if task.task_type == \'Subtask\' %}subtask-row{% elif task.task_type == \'User Story\' %}user-story-row{% elif task.task_type == \'Epic\' %}epic-row{% endif %}"\n                style="background-color: \n                {% if task.task_type == \'Subtask\' %}\n                    rgba(200, 230, 255, 0.5); /* Light blue for Subtask */\n                {% elif task.task_type == \'User Story\' %}\n                    rgba(255, 255, 200, 0.5); /* Light yellow for User Story */\n                {% elif task.task_type == \'Epic\' %}\n                    rgba(255, 200, 200, 0.5); /* Light red for Epic */\n                {% else %}\n                    rgba(240, 240, 240, 1); /* Default light gray */\n                {% endif %};"\n                data-task-id="{{ task.id }}"\n                data-parent-id="{{ task.parent_id or \'\' }}"\n                data-level="{{ depth }}">\n                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>\n                <td>\n                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}\n                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}" aria-label="Toggle details for task {{ task.name }}">\n                        <i class="bi bi-chevron-right"></i>\n                    </button>\n                    {% endif %}\n                </td>\n                <td class="fw-medium fs-6 \n                {% if task.task_type == \'Epic\' %}\n                    epic-cell\n                {% elif task.task_type == \'User Story\' %}\n                    user-story-cell\n                {% elif task.task_type == \'Subtask\' %}\n                    subtask-cell\n                {% endif %}" \n                style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">\n                <span class="bi fs-6\n                {% if task.task_type == \'Epic\' %}\n                    bi-circle-fill\n                {% elif task.task_type == \'User Story\' %}\n                    bi-circle-half\n                {% elif task.task_type == \'Subtask\' %}\n                    bi-circle\n                {% endif %}">\n                </span>\n                {{ task.name }}\n                <small class="text-muted fw-light">\n                    (Parent-ID: {{ task.parent_id or \'None\' }})\n                </small>\n                <!-- Open Link -->\n                <a href="#" class="task-open-link" data-task-id="{{ task.id }}">\n                    <i class="bi bi-arrows-angle-expand" style="font-size: 0.8rem; color: white;"></i>\n                    Open\n                </a>\n            </td>\n                <td class="fw-light fs-6">\n                    <small class>\n                    LAC-{{ task.id }}\n                    </small>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light text-bg-secondary">\n                        {{ task.project if task.project else "Unknown Project" }}\n                    </span>\n                </td>\n                <td class="fs-6" data-contributor-column>{{ task.assigned_to if task.assigned_to else "Unassigned" }}</td>\n                <td class="fs-6">{{ task.story_points }}</td>\n                <td class="fs-6">\n                    <span class="badge rounded-pill fw-light text-bg-light">\n                        {{ task.task_type }}\n                    </span>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light {% if task.completed %}text-bg-success{% else %}text-bg-warning{% endif %}">\n                        {{ "Completed" if task.completed else "In Progress" }}\n                    </span>\n                </td>\n                <td>\n                    <!-- Delete Icon -->\n                    <button class="btn btn-dark btn-sm delete-task-btn" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .2rem; --bs-btn-font-size: .75rem;" data-task-id="{{ task.id }}" aria-label="Deletes task {{ task.id }}">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n            </tr>\n            {% for child in tasks if child.parent_id == task.id %}\n                {{ render_task(child, tasks, depth + 1) }}\n            {% endfor %}\n            {% endmacro %}\n            \n            <!-- Render top-level tasks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:46:29.349784', 'updated_at': '2025-01-16T19:22:36.238473'}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'description': 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitHub Login involves integrating OAuth 2.0, which both services support. The complexity depends on your app’s existing setup, frameworks, and experience with third-party authentication. Below is a breakdown:\n\nKey Steps for Implementing Google or GitHub Login\n\t1.\tSet Up OAuth Credentials:\n\t•\tRegister your application in the Google Cloud Console or GitHub Developer Settings.\n\t•\tObtain the client ID and client secret.\n\t2.\tInstall Required Libraries:\n\t•\tUse a library for OAuth (e.g., flask-oauthlib, python-social-auth, or authlib).\n\t•\tPopular frameworks like Flask and Django already have robust integrations for OAuth providers.\n\t3.\tBackend Configuration:\n\t•\tImplement an endpoint to handle the OAuth flow (/auth/login/google or /auth/login/github).\n\t•\tConfigure your app to send users to Google or GitHub’s authentication page.\n\t•\tHandle the OAuth callback to exchange the authorization code for an access token.\n\t•\tVerify the token and fetch user information (e.g., email, name).\n\t4.\tLink OAuth to User Registration:\n\t•\tOn successful login, create or retrieve a user in your database.\n\t•\tStore the user’s details like email, OAuth provider ID, and access token.\n\t5.\tFrontend Integration (if applicable):\n\t•\tAdd “Login with Google” or “Login with GitHub” buttons.\n\t•\tRedirect to your backend’s OAuth endpoint when clicked.', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T12:15:54.291625', 'updated_at': '2025-01-16T19:22:36.239866'}, {'id': 62, 'name': 'Add OAuth integration for Google Login', 'description': 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.241200'}, {'id': 64, 'name': 'Setup project credentials for Google API', 'description': 'Generate client ID and secret from Google API Console for your application.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-01-16T19:22:36.242497'}, {'id': 67, 'name': 'Test Google OAuth flow', 'description': 'Verify the OAuth flow using test accounts and check the token exchange.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.243780'}, {'id': 65, 'name': 'Implement backend endpoints for Google OAuth', 'description': 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-01-16T19:22:36.244932'}, {'id': 63, 'name': 'Add OAuth integration for GitHub Login', 'description': 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.246358'}, {'id': 68, 'name': 'Register application in GitHub Developer Console', 'description': 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.247746'}, {'id': 69, 'name': 'Handle callback from GitHub', 'description': 'Implement the callback endpoint to process the authorization code from GitHub.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.248912'}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'description': 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 18, 'status': 'Not Started', 'created_at': '2025-01-07T19:53:50.085064', 'updated_at': '2025-01-16T19:22:36.250169'}, {'id': 100, 'name': '1.1 User Registration', 'description': 'As a user, I want to register with a username, email, and password so that I can create an account and access the system.\n\n**Acceptance Criteria:**\n\n•\tUser can input valid username, email, and password.\n•\tUsername and email must be unique.\n•\tErrors are displayed for invalid inputs or duplicate accounts.\n•\tPasswords must meet complexity requirements and be securely stored.\n•\tSuccessful registration redirects users to a login page.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:59:09.044667', 'updated_at': '2025-01-16T19:22:36.251812'}, {'id': 107, 'name': '1.1.1 Database Changes for User Registration', 'description': '1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.\n   CREATE TABLE public.users (\n       id SERIAL PRIMARY KEY,\n       username VARCHAR(50) UNIQUE NOT NULL,\n       email VARCHAR(100) UNIQUE NOT NULL,\n       password_hash VARCHAR(255) NOT NULL,\n       created_at TIMESTAMP DEFAULT NOW(),\n       updated_at TIMESTAMP DEFAULT NOW()\n);\n\n\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:30.747962'}, {'id': 108, 'name': '1.1.2 Backend API for Registration', 'description': '•\tCreate an endpoint POST /api/register:\n•\tValidate input fields.\n•\tHash the password using bcrypt or argon2.\n•\tInsert the user into the users table.\n•\tReturn success/failure responses.\ndddhfff\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:33.067643'}, {'id': 112, 'name': '1.2.2 Frontend Login Page', 'description': 'Develop a frontend form for user login with email and password inputs.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.683644'}, {'id': 109, 'name': '1.1.3 Create Frontend Registration Page', 'description': 'Develop a frontend form to collect user registration details.\n•\tAdd a form for username, email, and password inputs.\n•\tUse client-side validation (e.g., email format).\n•\tSend a POST request to /api/register.\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.684988'}, {'id': 110, 'name': '1.1.4 Unit Tests for Registration', 'description': 'Write unit tests for:\n\n•\tValid registration.\n•\tDuplicate username/email scenarios.\n•\tInvalid input handling.\nff', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.686902'}, {'id': 101, 'name': '1.2 User Login', 'description': 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n•\tUsers can log in with a valid email and password.\n•\tErrors are displayed for invalid credentials.\n•\tSuccessful login stores a session or JWT token.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:25:53.687936'}, {'id': 111, 'name': '1.2.1 Backend API for Login', 'description': 'Create POST /api/login endpoint to handle user login.\njjsjj', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.689096'}, {'id': 113, 'name': '1.2.3 Session Management', 'description': 'Implement secure session handling using cookies or JWT.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:20.968680'}, {'id': 114, 'name': '1.2.4 Unit Tests for Login', 'description': 'Write tests for successful and failed login attempts.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:22:36.265866'}, {'id': 106, 'name': 'Password Reset', 'description': 'As a user, I want to reset my password securely using email.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.267247'}, {'id': 128, 'name': 'Frontend Password Reset Page', 'description': 'Develop a page for users to enter a new password using a valid token.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.269158'}, {'id': 129, 'name': 'Testing Password Reset', 'description': 'Write tests for email delivery, token validation, and password updates.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.270849'}, {'id': 102, 'name': 'Logout', 'description': 'As a user, I want to log out so that I can end my session securely.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.272605'}, {'id': 117, 'name': 'Tests for Logout', 'description': 'Verify session invalidation and redirection to the login page.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.274575'}, {'id': 116, 'name': 'Frontend Logout Button', 'description': 'Add a logout button to the UI and handle session clearing.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-09T12:31:17.939784'}, {'id': 115, 'name': 'Backend API for Logout', 'description': 'Create POST /api/logout endpoint to invalidate user sessions.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.277547'}, {'id': 61, 'name': 'Parent task assignment', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-04T22:31:45.205815', 'updated_at': '2025-01-16T19:22:36.279012'}, {'id': 45, 'name': 'Display Default Value in Dropdown', 'description': 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.280493'}, {'id': 50, 'name': 'Retrieve Current Parent Task', 'description': 'Retrieve the current parent task’s ID and name from the backend.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 2, 'status': 'In Progress', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-10T07:41:43.569807'}, {'id': 51, 'name': 'Set Default Value', 'description': 'Set the default value in the dropdown based on the retrieved data.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 45, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 1, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.283309'}, {'id': 46, 'name': 'Search for Parent Tasks', 'description': 'Allow users to search for tasks dynamically in the dropdown by typing.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.284882'}, {'id': 54, 'name': 'Test Partial Matching', 'description': 'Ensure the search results update in real-time as the user types.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.286248'}, {'id': 47, 'name': 'Handle Large Datasets Efficiently', 'description': 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 13, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.287641'}, {'id': 56, 'name': 'Paginate API Responses', 'description': 'Implement server-side filtering and pagination for large datasets.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.289338'}, {'id': 55, 'name': 'Enable Lazy Loading', 'description': 'Enable lazy loading or virtualization in Virtual Select.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.290910'}, {'id': 48, 'name': 'Select and Deselect Parent Tasks', 'description': 'Allow users to select a parent task or deselect by choosing "None."', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.292389'}, {'id': 57, 'name': 'Ensure None Option Availability', 'description': 'Add “None” as a selectable option and ensure it stays at the top of the list.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.294045'}, {'id': 58, 'name': 'Handle Selection Events', 'description': 'Implement event listeners to update the form’s state when the selection changes.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.295385'}, {'id': 49, 'name': 'Integrate Dropdown with Task Form', 'description': 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.296814'}, {'id': 59, 'name': 'Bind Dropdown to Form Field', 'description': 'Bind the dropdown to the form’s parent task field.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-09T23:48:08.770907'}, {'id': 60, 'name': 'Test Form Submission', 'description': 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.299971'}, {'id': 41, 'name': 'Implement Searchable Dropdown', 'description': 'As a user, I want a searchable dropdown for parent task assignment.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Completed', 'created_at': '2025-01-03T09:14:28.285904', 'updated_at': '2025-02-10T07:41:33.252945'}, {'id': 52, 'name': 'Add Search Box to Dropdown', 'description': 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-10T07:40:33.847642'}, {'id': 53, 'name': 'Implement AJAX Search', 'description': 'Implement AJAX-based search to fetch tasks dynamically from the backend.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-09T07:55:00.680183'}, {'id': 42, 'name': 'Choose Dropdown Library', 'description': 'Research and decide on the dropdown library to use.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-10T07:41:18.814716'}, {'id': 43, 'name': 'Integrate Dropdown Library', 'description': 'Integrate the chosen dropdown library into the project.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Completed', 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-10T07:41:23.756572'}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t•\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t•\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-01-16T19:22:36.311560'}, {'id': 85, 'name': 'Assign multiple contributors to a task', 'description': 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:32:39.466022', 'updated_at': '2025-01-16T19:22:36.313789'}, {'id': 90, 'name': 'Update frontend to display and manage multiple contributors', 'description': 'Allow users to view, add, or remove multiple contributors via the UI.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-01-16T19:22:36.315695'}, {'id': 88, 'name': 'Update database schema for multiple contributors', 'description': 'Modify the task table to support many-to-many relationships for contributors.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-01-16T19:22:36.317500'}, {'id': 89, 'name': 'Develop backend API for adding contributors to a task', 'description': 'Create endpoints to add, update, and remove contributors for a task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-01-16T19:22:36.319281'}, {'id': 86, 'name': 'Allow designation of task owner', 'description': 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:29.330562', 'updated_at': '2025-01-16T19:22:36.320840'}, {'id': 93, 'name': 'Update frontend to manage task ownership', 'description': 'Allow users to assign or update the task owner via the UI.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-01-16T19:22:36.322637'}, {'id': 91, 'name': 'Update database schema for task ownership', 'description': 'Add a column or relationship to assign a single owner per task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-01-16T19:22:36.324051'}, {'id': 92, 'name': 'Develop backend API for assigning task owner', 'description': 'Create endpoints to assign or update the owner of a task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-11T09:19:44.027744'}, {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-01-16T19:22:36.326985'}, {'id': 96, 'name': 'Allow admin users to create and customize contributor roles via frontend', 'description': 'Provide UI functionality for admins to manage contributor roles dynamically.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-01-16T19:22:36.328562'}, {'id': 94, 'name': 'Add database support for contributor roles', 'description': 'Introduce a roles table and link contributors to specific roles for tasks.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-01-16T19:22:36.329887'}, {'id': 95, 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T00:05:23.555198'}, {'id': 127, 'name': 'Backend API for Password Reset', 'description': 'Create endpoints to handle password reset requests and token validation.\ndfdf\n\nasdasd', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-10T23:59:50.734037'}, {'id': 126, 'name': 'Email Configuration for Password Reset', 'description': 'Configure email service to send password reset links.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.334340'}, {'id': 104, 'name': 'Middleware for Role Enforcement', 'description': 'As a system, I want to enforce role-based access to specific routes.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:23:40.346816'}, {'id': 122, 'name': 'Testing Role Enforcement', 'description': 'Write tests to ensure proper access control based on roles.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-01-16T19:23:58.185693'}, {'id': 121, 'name': 'Develop Role Enforcement Middleware', 'description': 'Implement middleware to check user roles for access control.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-01-16T19:23:58.187439'}, {'id': 105, 'name': 'Profile Management', 'description': 'As a user, I want to update my profile (username, email, password).', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.339830'}, {'id': 123, 'name': 'Backend API for Profile Management', 'description': 'Create PATCH /api/profile endpoint to update user details.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-01-16T19:24:19.678781'}, {'id': 125, 'name': 'Testing Profile Updates', 'description': 'Write tests for profile update functionality.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-01-16T19:24:19.680382'}]
2025-02-11 09:21:22,396 DEBUG: Task types: ['all', 'Epic', 'Subtask', 'User Story']
2025-02-11 09:21:22,396 DEBUG: Projects: [<Project Project Alpha (ID: 1)>, <Project Project Beta (ID: 2)>, <Project Project Gamma (ID: 3)>, <Project Project Theta (ID: 4)>, <Project Project Delta (ID: 5)>, <Project PMS - Feature Requests (ID: 7)>, <Project PMS - Backlog (ID: 6)>]
2025-02-11 09:21:22,397 DEBUG: Tasks response: [{'id': 290, 'name': 'issue: error when changing task type and', 'description': 'issue: error when changing task type and parent task before saving', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:00:03.417734', 'updated_at': '2025-02-10T09:15:09.284969'}, {'id': 298, 'name': 'example user story with parent epic 297', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 297, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:41:01.907455', 'updated_at': '2025-02-10T14:59:04.142570'}, {'id': 275, 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-10T08:38:37.622196'}, {'id': 276, 'name': 'add support for priority', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-10T08:28:47.447612'}, {'id': 264, 'name': 'close all / open all childtasks', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-02-10T08:47:14.915970'}, {'id': 285, 'name': 'add text truncation to project names in task list', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-10T09:45:47.029729'}, {'id': 257, 'name': 'Update Task API Integration', 'description': "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-02-05T22:55:49.566819', 'updated_at': '2025-02-05T22:18:17.807154'}, {'id': 294, 'name': 'issue: task table filters not working', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:19:21.022598', 'updated_at': '2025-02-10T10:19:21.024676'}, {'id': 267, 'name': 'improvements to toggles and nested tasks', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:29:12.464594', 'updated_at': '2025-02-10T08:47:24.581680'}, {'id': 271, 'name': 'make sure dynamically added rows has the exact same styling and includes every element', 'description': 'Missing elements:\n- Open link\n- Default project\n- Project name should be inside a pill\n- Task type should be in a pill\n- Estimations should be 0, not N/A\n- Make sure font size is matching\n- status should have the dropdown inside a pill\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:21:07.108431', 'updated_at': '2025-02-10T08:38:47.340105'}, {'id': 283, 'name': 'fix update title', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:58.769700', 'updated_at': '2025-02-10T08:46:47.282087'}, {'id': 273, 'name': 'disable parent task selector in epics', 'description': 'and add text, Epic can´t have parent tasks', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:45:20.740910', 'updated_at': '2025-02-10T08:39:17.639890'}, {'id': 269, 'name': 'fix styling for sweetalert', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-02-08T15:54:56.717846', 'updated_at': '2025-02-10T08:39:32.172437'}, {'id': 286, 'name': 'add support for labels/tags', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:46:23.985620', 'updated_at': '2025-02-10T09:46:23.987564'}, {'id': 299, 'name': 'example sub task with parent user story 298', 'description': 'Test update 1\nTest update 2\nTest update 3', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 298, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:42:38.905700', 'updated_at': '2025-02-10T23:23:08.671464'}, {'id': 266, 'name': 'highlight the nested tasks', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-02-10T08:47:04.382929'}, {'id': 279, 'name': 'github integration', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:38.238202', 'updated_at': '2025-02-10T08:39:24.168451'}, {'id': 289, 'name': 'issue: parent task is lost when updating task', 'description': '', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:56:25.273984', 'updated_at': '2025-02-10T09:12:47.626993'}, {'id': 272, 'name': 'implement a markdown text editor like notion', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-02-10T08:28:39.669255'}, {'id': 278, 'name': 'search feature for tasks list', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:03.369833', 'updated_at': '2025-02-10T08:39:04.005957'}, {'id': 281, 'name': 'add high level plan', 'description': 'Add some sort of high level plan that aims to keep PM/PO´s on track and not get lost into the details of an overwhelminly large backlog', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:27:01.218606', 'updated_at': '2025-02-10T08:38:54.754760'}, {'id': 287, 'name': 'when moving a parent item to another project make sure the subtasks are moved as well', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:48:31.986870', 'updated_at': '2025-02-10T09:48:31.988859'}, {'id': 293, 'name': 'click on title should copy the task title and id to clipboard', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:16:33.508209', 'updated_at': '2025-02-10T10:16:33.510414'}, {'id': 277, 'name': 'custom task workflow statuses', 'description': 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- Custom status\n-- Custom status\n- In Progress\n-- Custom status\n-- Custom status\n-- Custom status\n- Completed\n-- Custom status\n-- Custom status\n\n2. How can we track a task through different stages and save the sequence of events or stages the task has gone through?\nI´m thinking it could be good for mapping out processes, identifying bottlenecks and provide valuable insights while improving and streamlining workflows.\n- Stages\n- Contacts taken\n- Respons time \n- Time to action after responses\n- Dependencies\n\nNeed to be able to record every action related to this action.\nCommunication integrations\n- Slack\n- Email\n- Text messages\n- Phonecalls\n- Calendar events, meetings\n- Zoom, Google meet, Teams etc..\n\n\n2. Set custom statuses per project (can use tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:16:03.352588', 'updated_at': '2025-02-10T08:38:28.123328'}, {'id': 274, 'name': 'add support for goals, initiatives, okr´s', 'description': 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:46:27.204912', 'updated_at': '2025-02-10T08:28:17.663922'}, {'id': 280, 'name': 'logging (task and project history)', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:37:44.435112', 'updated_at': '2025-02-10T08:28:28.947805'}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:17.786154', 'updated_at': '2025-02-10T09:41:17.787861'}, {'id': 296, 'name': 'issue: contributor is lost after updating task', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:26:43.881947', 'updated_at': '2025-02-10T10:26:43.884004'}, {'id': 288, 'name': 'when trying to move subtask to another project, make sure a warning is displayed', 'description': 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be lost"\nOR\n\nIs it possible, and is it desireable to keep parent child relationships across projects?\nSo that a parent can be in one project but the child tasks can be in different projects?\n\nLets say \nParent epic is \n"Internationalisation"\nChild user stories are\n- Timezones\n- Language\n- Currency\n- Day, Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:54:36.297869', 'updated_at': '2025-02-10T08:54:51.840686'}, {'id': 284, 'name': 'add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-10T09:42:27.720908'}, {'id': 295, 'name': 'issue: drag and drop errors', 'description': '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:22:54.461413', 'updated_at': '2025-02-10T10:22:54.462542'}, {'id': 297, 'name': 'example parent epic', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:39:51.620509', 'updated_at': '2025-02-10T10:39:51.622712'}, {'id': 292, 'name': 'issue: assigning contributor does not work', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:11:12.273779', 'updated_at': '2025-02-10T10:11:12.274809'}, {'id': 265, 'name': 'smooth transition for toggles', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-02-10T08:46:55.831743'}, {'id': 270, 'name': 'the newest task', 'description': '', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:07:34.368035', 'updated_at': '2025-02-10T01:07:34.372478'}, {'id': 291, 'name': 'add dropdowns in task list for changing: project, assigned to, estimate and task type (labels/tags)', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-02-10T10:09:52.997455'}, {'id': 136, 'name': 'Page scroll should stay in position when reloading', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-16T18:21:50.187247', 'updated_at': '2025-01-16T19:22:36.214901'}, {'id': 130, 'name': 'Implement the Map of Task Relationships solution for drag-and-drop', 'description': 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.093022', 'updated_at': '2025-01-16T19:22:36.216705'}, {'id': 133, 'name': 'Step 4: Enhance Logging in models.py', 'description': 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nupdating the Task model in the following ways:\n\n1.\tLog Changes to parent_id:\n\t•\tLog changes to parent_id during updates, including old and new values.\n\t2.\tValidate Hierarchy with Logging:\n\t•\tLog detailed messages when validating hierarchy changes, especially for circular dependency checks.\n\nHere’s how the models.py can be updated:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy import func, cast, CheckConstraint\nfrom sqlalchemy.orm import validates\nfrom app.extensions.db import db\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\nclass Task(db.Model):\n    __tablename__ = "task"\n    \n    # Other columns...\n\n    parent_id = db.Column(\n        db.Integer, db.ForeignKey("task.id"), index=True, nullable=True\n    )\n\n    # Relationships\n    parent = db.relationship(\n        "Task", remote_side=[id], back_populates="children", lazy="select"\n    )\n    children = db.relationship(\n        "Task", back_populates="parent", lazy="select"\n    )\n\n    \n\n\n    @staticmethod\n    def _validate_no_circular_references(new_parent_id):\n        """\n        Validates that there are no circular references in the task hierarchy.\n\n        Args:\n            new_parent_id (int): The new parent ID to validate.\n\n        Raises:\n            ValueError: If a circular reference is detected.\n        """\n        visited = set()\n        current_parent_id = new_parent_id\n\n        logger.info(f"Validating circular references for parent ID: {new_parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error(\n                    f"Circular reference detected: Parent ID {current_parent_id} already visited."\n                )\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            # Fetch the next parent_id in the hierarchy\n            parent = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not parent:\n                break  # Exit if no parent is found\n            current_parent_id = parent.parent_id\n\n        logger.info("No circular reference detected.")\n\n    @validates(\'parent_id\', \'task_type\')\n    def validate_task_changes(self, key, value):\n        """\n        Validates changes to \'parent_id\' and \'task_type\'.\n        Ensures hierarchy validity and checks for circular references.\n        """\n        logger.debug(f"Validating {key} change for Task {self.id}: {value}")\n\n        if key == \'parent_id\':\n            # Log changes to parent_id\n            if self.id and value != self.parent_id:\n                logger.info(f"Task {self.id}: Updating \'parent_id\' from {self.parent_id} to {value}")\n\n            # Prevent a task from being its own parent\n            if value and value == self.id:\n                logger.error("A task cannot be its own parent.")\n                raise ValueError("A task cannot be its own parent.")\n\n            # Check for circular references\n            if value:\n                Task.check_circular_reference(self.id, value)\n\n        elif key == \'task_type\':\n            # Log changes to task_type\n            if self.id and value != self.task_type:\n                logger.info(f"Task {self.id}: Updating \'task_type\' from {self.task_type} to {value}")\n\n        # Check hierarchy rules without triggering further validation\n        if key in [\'parent_id\', \'task_type\']:\n            self._validate_hierarchy_change(key, value)\n\n        logger.info(f"Validation passed for {key}: {value}")\n        return value\n\n    def _validate_hierarchy_change(self, key, value):\n        """\n        Validates hierarchy rules for the task based on `task_type` and `parent_id`.\n        """\n        if key == \'parent_id\' and value:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=value).first()\n            if not parent_task:\n                raise ValueError("Parent task does not exist.")\n\n            logger.debug(f"Validating hierarchy: Task {self.id}, Parent Type: {parent_task.task_type}")\n            if self.task_type == "User Story" and parent_task.task_type != "Epic":\n                raise ValueError("User Stories must have an Epic as a parent.")\n            if self.task_type == "Subtask" and parent_task.task_type != "User Story":\n                raise ValueError("Subtasks must have a User Story as a parent.")\n\n        elif key == \'task_type\' and self.parent_id:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=self.parent_id).first()\n            if parent_task:\n                logger.debug(f"Validating hierarchy: Task Type: {value}, Parent Type: {parent_task.task_type}")\n                if value == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError("User Stories must have an Epic as a parent.")\n                if value == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError("Subtasks must have a User Story as a parent.")\n\n        logger.info(f"Hierarchy validation passed for Task {self.id if self.id else \'New Task\'}.")\n\n    @staticmethod\n    def check_circular_reference(task_id, parent_id):\n        """\n        Iteratively checks for circular references in the task hierarchy.\n        Prevents stack overflow on deep hierarchies.\n        """\n        visited = set()\n        current_parent_id = parent_id\n\n        logger.info(f"Checking circular reference for Task {task_id} with Parent ID: {parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error("Circular reference detected!")\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            if current_parent_id == task_id:\n                logger.error("A task cannot be its own ancestor.")\n                raise ValueError("A task cannot be its own ancestor.")\n\n            # Fetch the next parent_id in the hierarchy\n            task = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not task:\n                break\n            current_parent_id = task.parent_id\n\n        logger.info("Circular reference check passed.")\n```\nKey Enhancements:\n\t1.\tlog_and_validate_parent_id_change:\n\t•\tLogs the old and new parent_id whenever it changes.\n\t•\tEnsures no circular references are introduced.\n\t2.\t_validate_no_circular_references:\n\t•\tValidates the parent_id field to prevent circular dependencies.\n\t•\tLogs progress and raises detailed errors if violations occur.\n\t3.\tlog_and_validate_task_type_change:\n\t•\tLogs changes to task_type with the old and new values.\n\t•\tRevalidates hierarchy rules when task_type changes.\n\t4.\tDetailed Logging for Circular Reference Validation:\n\t•\t_validate_no_circular_references and check_circular_reference methods log every step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t•\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:44:08.340041', 'updated_at': '2025-01-16T19:22:36.219710'}, {'id': 132, 'name': 'Step 1: Update tasks_table_interactions.js', 'description': '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the map for efficient parent-child relationship lookups instead of DOM traversal.\n\n```\nexport const TaskManager = {\n    init: function (csrfToken) {\n        this.csrfToken = csrfToken;\n        this.initTaskParentMap(); // Initialize the map\n        this.initDragAndDrop(); // Initialize drag-and-drop functionality\n    },\n\n    // Initialize a global map for task relationships\n    taskParentMap: new Map(),\n\n    // Build the taskParentMap from the DOM\n    initTaskParentMap: function () {\n        console.log("Initializing Task Parent Map...");\n        const rows = document.querySelectorAll("tr[data-task-id]");\n\n        rows.forEach((row) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = parseInt(row.dataset.parentId, 10) || null;\n            this.taskParentMap.set(taskId, parentId);\n        });\n\n        console.log("Task Parent Map initialized:", Array.from(this.taskParentMap.entries()));\n    },\n\n    // Update the map dynamically after drag-and-drop\n    updateTaskParentMap: function (taskId, parentId) {\n        console.log(`Updating Task Parent Map: Task ${taskId} -> Parent ${parentId}`);\n        this.taskParentMap.set(taskId, parentId);\n    },\n\n    initDragAndDrop: function () {\n        if (window.isDragAndDropInitialized) {\n            console.log("Drag-and-drop is already initialized.");\n            return;\n        }\n\n        console.log("Initializing drag-and-drop within TaskManager...");\n\n        const tableBody = document.querySelector("tbody");\n        if (!tableBody) {\n            console.warn("Task table body not found for drag-and-drop initialization");\n            return;\n        }\n\n        // Initialize Sortable.js for drag-and-drop functionality\n        Sortable.create(tableBody, {\n            handle: ".task-row", // Only draggable via `.task-row` elements\n            animation: 150, // Smooth animation\n            filter: ".task-open-link", // Prevent dragging on task links\n            preventOnFilter: true, // Prevent drag if filtered element is clicked\n            onEnd: async (event) => {\n                try {\n                    console.log("Drag-and-drop operation started...");\n                    const rows = Array.from(event.from.querySelectorAll(".task-row"));\n                    const reorderedTasks = [];\n\n                    rows.forEach((row, index) => {\n                        const taskId = parseInt(row.dataset.taskId, 10);\n                        let parentId = null;\n\n                        // Get the parent ID from the map or fallback to the dataset\n                        if (row.classList.contains("subtask-row")) {\n                            const parentRow = row.previousElementSibling;\n                            parentId = parentRow\n                                ? parseInt(parentRow.dataset.taskId, 10)\n                                : this.taskParentMap.get(taskId) || null;\n                        }\n\n                        // Update the taskParentMap dynamically\n                        this.updateTaskParentMap(taskId, parentId);\n\n                        reorderedTasks.push({\n                            id: taskId,\n                            sort_order: index + 1,\n                            parent_id: parentId,\n                        });\n                    });\n\n                    console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n                    console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n                    // Send the payload to the backend\n                    const response = await fetch("/tasks/reorder_subtasks", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                            "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n                        },\n                        body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n                    });\n\n                    if (!response.ok) {\n                        const errorData = await response.json();\n                        console.error("Error reordering tasks:", errorData);\n                        alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n                        return;\n                    }\n\n                    const data = await response.json();\n                    console.log("Task reordering successful:", data);\n\n                } catch (error) {\n                    console.error("Error during drag-and-drop operation:", error);\n                    alert("An unexpected error occurred while reordering tasks.");\n                }\n            },\n        });\n\n        window.isDragAndDropInitialized = true;\n        console.log("Drag-and-drop initialized successfully.");\n    },\n};\n```\n\nKey Updates:\n\t1.\tPrecomputed Map (taskParentMap):\n\t•\tThe initTaskParentMap function initializes the map by iterating over DOM elements and mapping each task’s ID to its parent ID.\n\t•\tThe updateTaskParentMap dynamically updates the map when tasks are reordered.\n\t2.\tEfficient Parent Lookup:\n\t•\tThe parentId is derived from the precomputed map rather than DOM traversal.\n\t3.\tBackend Payload:\n\t•\tA structured payload (reorderedTasks) is sent to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t•\tCSRF protection is ensured by passing the token to the request headers.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:44:08.338301', 'updated_at': '2025-02-06T21:59:17.417466'}, {'id': 134, 'name': 'Step 2: Update the Backend in routes.py', 'description': 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\nPlan for step 2:\n\t1.\tVerify the payload structure:\n\t•\tEnsure that the payload includes all necessary fields (id, sort_order, parent_id) for each task.\n\t•\tValidate that the parent-child relationships in the precomputed map (taskParentMap) are reflected correctly in the payload.\n\t2.\tSubmit the payload to the backend:\n\t•\tEnhance the fetch request in the onEnd function of initDragAndDrop to log detailed submission data.\n\t•\tConfirm the payload integrity in the browser console before submission.\n\t3.\tUpdate backend logging:\n\t•\tAdd logging to /reorder_subtasks in routes.py to confirm receipt of the correct payload and process parent-child updates.\n\t•\tLog before and after database updates for better debugging.\n\n-----\nUpdated tasks_table_interactions.js\n\nReplace this section:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    let parentId = null;\n```\nWith:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    const parentId = this.taskParentMap.get(taskId) || null;\n```\nThe this.taskParentMap provides a precomputed and dynamic mapping of taskId to parentId. By using this map, we avoid relying on DOM traversal logic (row.closest or row.previousElementSibling) during drag-and-drop operations, which can sometimes be unreliable or cumbersome.\n\nFull Revised onEnd section:\n```\nonEnd: async (event) => {\n    try {\n        console.log("Drag-and-drop operation started...");\n        const rows = Array.from(event.from.querySelectorAll(".task-row"));\n        const reorderedTasks = [];\n\n        rows.forEach((row, index) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = this.taskParentMap.get(taskId) || null;\n\n            // Update the taskParentMap dynamically\n            this.updateTaskParentMap(taskId, parentId);\n\n            reorderedTasks.push({\n                id: taskId,\n                sort_order: index + 1,\n                parent_id: parentId,\n            });\n        });\n\n        console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n        console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n        // Send the payload to the backend\n        const response = await fetch("/tasks/reorder_subtasks", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n            },\n            body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error("Error reordering tasks:", errorData);\n            alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n            return;\n        }\n\n        const data = await response.json();\n        console.log("Task reordering successful:", data);\n\n    } catch (error) {\n        console.error("Error during drag-and-drop operation:", error);\n        alert("An unexpected error occurred while reordering tasks.");\n    }\n}\n```\n---------------------------------\nEnsure updates include:\n\t•\tBetter Logging: Adding logs for key events such as database changes and validation results.\n\t•\tInput Validation: Ensure all required fields (id, sort_order, parent_id) exist in the payload.\n\t•\tPost-Commit Validation: Confirm database updates after the commit.\n\t•\tImproved Error Handling: Include specific error messages and consistent rollback mechanisms.\n\nBelow is the revised reorder_subtasks route with descriptive comments for each section:\n```\n@bp.route("/reorder_subtasks", methods=["POST"])\ndef reorder_subtasks():\n    """\n    Reorder subtasks globally or reassign them to a different parent.\n\n    Steps:\n    - Parse and validate input from the frontend.\n    - Update parent-child relationships and sort order in the database.\n    - Commit changes and return a success response.\n    - Handle errors gracefully and provide detailed logs for debugging.\n    """\n    logger.info("Entering reorder_subtasks route...")\n    logger.info(f"Received payload for reordering tasks: {request.json}")\n\n    try:\n        # Step 1: Parse input\n        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered\n        ordered_tasks = request.json.get("ordered_tasks", [])\n\n        logger.debug(f"Parsed parent_id: {parent_id}")\n        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")\n\n        # Step 2: Validate input\n        if not isinstance(ordered_tasks, list) or not all(\n            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task\n            for task in ordered_tasks\n        ):\n            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")\n            return jsonify({\n                "error": "Invalid input format for \'ordered_tasks\'. Each task must include \'id\', \'sort_order\', and \'parent_id\'."\n            }), 400\n\n        # Step 3: Validate parent task (if applicable)\n        if parent_id is not None:\n            parent_task = Task.query.get(parent_id)\n            if not parent_task:\n                logger.error(f"Parent task with ID {parent_id} not found.")\n                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400\n\n        logger.info("Input validation passed. Proceeding with task updates...")\n\n        # Step 4: Process updates for each subtask\n        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation\n\n        for task_data in ordered_tasks:\n            subtask_id = task_data["id"]\n            sort_order = task_data["sort_order"]\n            new_parent_id = task_data["parent_id"]\n\n            # Fetch the subtask from the database\n            subtask = Task.query.get(subtask_id)\n            if not subtask:\n                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")\n                continue\n\n            # Log and update parent_id if it changes\n            if new_parent_id is not None and new_parent_id != subtask.parent_id:\n                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")\n                subtask.parent_id = new_parent_id\n\n            # Update sort order\n            subtask.sort_order = sort_order\n            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")\n\n            # Add to the list of updated subtasks for validation\n            updated_subtasks.append(subtask)\n\n        # Step 5: Commit changes to the database\n        try:\n            db.session.commit()\n            logger.info(f"Subtasks reordered successfully: {[task[\'id\'] for task in ordered_tasks]}")\n        except Exception as e:\n            logger.error(f"Error committing changes to the database: {str(e)}")\n            db.session.rollback()\n            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500\n\n        # Step 6: Post-commit validation\n        for subtask in updated_subtasks:\n            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")\n            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")\n\n        # Step 7: Return success response\n        return jsonify({\n            "success": True,\n            "message": "Subtasks reordered successfully.",\n            "updated_subtasks": [subtask.id for subtask in updated_subtasks]\n        }), 200\n\n    except Exception as e:\n        # Step 8: Handle unexpected errors\n        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)\n        db.session.rollback()\n        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500\n```\nKey Changes and Descriptive Comments\n\t1.\tInput Parsing:\n\t•\tExtracts parent_id and ordered_tasks from the request payload.\n\t•\tLogs the parsed values for debugging.\n\t2.\tInput Validation:\n\t•\tEnsures ordered_tasks is a list of dictionaries with the required keys.\n\t•\tValidates parent_id if provided, ensuring the parent task exists in the database.\n\t3.\tUpdate Processing:\n\t•\tIterates through ordered_tasks, updating each task’s parent_id and sort_order.\n\t•\tLogs changes for each task.\n\t4.\tDatabase Commit:\n\t•\tCommits all updates in a single transaction.\n\t•\tLogs success or rolls back changes in case of an error.\n\t5.\tPost-Commit Validation:\n\t•\tVerifies that the parent_id and sort_order changes were successfully saved to the database.\n\t6.\tError Handling:\n\t•\tCaptures and logs exceptions during processing or committing.\n\t•\tProvides meaningful error messages to the frontend.\n\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:46:29.348853', 'updated_at': '2025-02-06T21:59:21.617065'}, {'id': 131, 'name': 'Step 5: Update utils.py', 'description': 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nChanges to Make:\n\t1.\tEnhance Task Filtering:\n\t•\tEnsure the filters handle parent-child relationships explicitly.\n\t•\tAdd options to include or exclude subtasks in queries.\n\t2.\tUtility Function for Debugging Parent-Child Relationships:\n\t•\tProvide a function to generate a map or list of parent-child relationships for debugging purposes.\n\t3.\tValidation Functions:\n\t•\tAdd a utility function to validate parent-child relationships and ensure no circular dependencies.\n\nUpdated utils.py Code:\n```\nimport logging\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import joinedload\nfrom app.extensions.db import db\nfrom app.tasks.models import Task\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\n\nclass TaskService:\n    @staticmethod\n    def filter_tasks(filters=None, include_subtasks=True, page=None, per_page=None):\n        """\n        Dynamically filters tasks with an option to include or exclude subtasks.\n\n        Args:\n            filters (dict): Filtering criteria.\n            include_subtasks (bool): Whether to include subtasks in the query.\n            page (int, optional): Page number for pagination.\n            per_page (int, optional): Items per page for pagination.\n\n        Returns:\n            Query or Pagination: A SQLAlchemy query object or paginated results.\n        """\n        query = Task.query.options(\n            db.joinedload(Task.project).joinedload(Project.contributors),\n            db.joinedload(Task.contributor),\n            db.joinedload(Task.children),\n        ).order_by(Task.sort_order)\n\n        if filters:\n            logger.debug(f"Applying filters: {filters}")\n\n            # Apply standard filters\n            if "is_archived" in filters:\n                query = query.filter(Task.is_archived == filters["is_archived"])\n            if "project_id" in filters:\n                query = query.filter(Task.project_id == filters["project_id"])\n            if "task_type" in filters:\n                if isinstance(filters["task_type"], list):\n                    query = query.filter(Task.task_type.in_(filters["task_type"]))\n                else:\n                    query = query.filter(Task.task_type == filters["task_type"])\n            if "completion_status" in filters:\n                completion_map = {"completed": True, "in_progress": False}\n                if filters["completion_status"] in completion_map:\n                    query = query.filter(Task.completed == completion_map[filters["completion_status"]])\n\n            # Optionally exclude subtasks\n            if not include_subtasks:\n                query = query.filter(Task.task_type != "Subtask")\n\n        logger.debug(f"Generated query: {query}")\n\n        # Pagination\n        if page and per_page:\n            return query.paginate(page=page, per_page=per_page, error_out=False)\n        return query\n\n    @staticmethod\n    def debug_parent_child_relationships(project_id=None):\n        """\n        Generates a debug map of parent-child relationships for all tasks.\n\n        Args:\n            project_id (int, optional): Restrict to tasks from a specific project.\n\n        Returns:\n            dict: A dictionary mapping parent IDs to their child task IDs.\n        """\n        query = Task.query\n        if project_id:\n            query = query.filter(Task.project_id == project_id)\n\n        tasks = query.options(\n            db.load_only(Task.id, Task.parent_id)\n        ).all()\n\n        relationship_map = {}\n        for task in tasks:\n            if task.parent_id not in relationship_map:\n                relationship_map[task.parent_id] = []\n            relationship_map[task.parent_id].append(task.id)\n\n        logger.debug(f"Parent-Child Relationship Map: {relationship_map}")\n        return relationship_map\n\n    @staticmethod\n    def validate_parent_child_relationships():\n        """\n        Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.\n\n        Raises:\n            ValueError: If invalid relationships are detected.\n        """\n        tasks = Task.query.options(db.joinedload(Task.parent)).all()\n\n        for task in tasks:\n            if task.parent_id:\n                parent_task = task.parent\n                if not parent_task:\n                    raise ValueError(f"Task {task.id} has an invalid parent ID {task.parent_id}.")\n\n                # Validate hierarchy rules\n                if task.task_type == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError(f"User Story {task.id} must have an Epic as its parent.")\n                if task.task_type == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError(f"Subtask {task.id} must have a User Story as its parent.")\n\n        logger.info("All parent-child relationships are valid.")\n\n    @staticmethod\n    def get_all_task_ids_with_parents():\n        """\n        Returns a flat list of tasks with their parent IDs for debugging.\n\n        Returns:\n            list: A list of tuples (task_id, parent_id).\n        """\n        tasks = Task.query.with_entities(Task.id, Task.parent_id).all()\n        logger.debug(f"Task IDs with Parent IDs: {tasks}")\n        return tasks\n```\n\n\nExplanation of Changes:\n\t1.\tfilter_tasks Enhancements:\n\t•\tAdded include_subtasks parameter to optionally exclude subtasks from the query.\n\t2.\tdebug_parent_child_relationships:\n\t•\tCreates a parent-child relationship map for debugging purposes.\n\t3.\tvalidate_parent_child_relationships:\n\t•\tIterates through all tasks to validate parent-child hierarchy and ensures no invalid relationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t•\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.091824', 'updated_at': '2025-01-16T19:22:36.236691'}, {'id': 135, 'name': 'Step 3: Update list.html', 'description': 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already includes everything needed. No required changes.\n\nHere´s the relevant section of list.html:\n\n```\n<tr id="task-{{ task.id }}"\n                class="task-row {% if task.task_type == \'Subtask\' %}subtask-row{% elif task.task_type == \'User Story\' %}user-story-row{% elif task.task_type == \'Epic\' %}epic-row{% endif %}"\n                style="background-color: \n                {% if task.task_type == \'Subtask\' %}\n                    rgba(200, 230, 255, 0.5); /* Light blue for Subtask */\n                {% elif task.task_type == \'User Story\' %}\n                    rgba(255, 255, 200, 0.5); /* Light yellow for User Story */\n                {% elif task.task_type == \'Epic\' %}\n                    rgba(255, 200, 200, 0.5); /* Light red for Epic */\n                {% else %}\n                    rgba(240, 240, 240, 1); /* Default light gray */\n                {% endif %};"\n                data-task-id="{{ task.id }}"\n                data-parent-id="{{ task.parent_id or \'\' }}"\n                data-level="{{ depth }}">\n                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>\n                <td>\n                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}\n                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}" aria-label="Toggle details for task {{ task.name }}">\n                        <i class="bi bi-chevron-right"></i>\n                    </button>\n                    {% endif %}\n                </td>\n                <td class="fw-medium fs-6 \n                {% if task.task_type == \'Epic\' %}\n                    epic-cell\n                {% elif task.task_type == \'User Story\' %}\n                    user-story-cell\n                {% elif task.task_type == \'Subtask\' %}\n                    subtask-cell\n                {% endif %}" \n                style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">\n                <span class="bi fs-6\n                {% if task.task_type == \'Epic\' %}\n                    bi-circle-fill\n                {% elif task.task_type == \'User Story\' %}\n                    bi-circle-half\n                {% elif task.task_type == \'Subtask\' %}\n                    bi-circle\n                {% endif %}">\n                </span>\n                {{ task.name }}\n                <small class="text-muted fw-light">\n                    (Parent-ID: {{ task.parent_id or \'None\' }})\n                </small>\n                <!-- Open Link -->\n                <a href="#" class="task-open-link" data-task-id="{{ task.id }}">\n                    <i class="bi bi-arrows-angle-expand" style="font-size: 0.8rem; color: white;"></i>\n                    Open\n                </a>\n            </td>\n                <td class="fw-light fs-6">\n                    <small class>\n                    LAC-{{ task.id }}\n                    </small>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light text-bg-secondary">\n                        {{ task.project if task.project else "Unknown Project" }}\n                    </span>\n                </td>\n                <td class="fs-6" data-contributor-column>{{ task.assigned_to if task.assigned_to else "Unassigned" }}</td>\n                <td class="fs-6">{{ task.story_points }}</td>\n                <td class="fs-6">\n                    <span class="badge rounded-pill fw-light text-bg-light">\n                        {{ task.task_type }}\n                    </span>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light {% if task.completed %}text-bg-success{% else %}text-bg-warning{% endif %}">\n                        {{ "Completed" if task.completed else "In Progress" }}\n                    </span>\n                </td>\n                <td>\n                    <!-- Delete Icon -->\n                    <button class="btn btn-dark btn-sm delete-task-btn" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .2rem; --bs-btn-font-size: .75rem;" data-task-id="{{ task.id }}" aria-label="Deletes task {{ task.id }}">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n            </tr>\n            {% for child in tasks if child.parent_id == task.id %}\n                {{ render_task(child, tasks, depth + 1) }}\n            {% endfor %}\n            {% endmacro %}\n            \n            <!-- Render top-level tasks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:46:29.349784', 'updated_at': '2025-01-16T19:22:36.238473'}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'description': 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitHub Login involves integrating OAuth 2.0, which both services support. The complexity depends on your app’s existing setup, frameworks, and experience with third-party authentication. Below is a breakdown:\n\nKey Steps for Implementing Google or GitHub Login\n\t1.\tSet Up OAuth Credentials:\n\t•\tRegister your application in the Google Cloud Console or GitHub Developer Settings.\n\t•\tObtain the client ID and client secret.\n\t2.\tInstall Required Libraries:\n\t•\tUse a library for OAuth (e.g., flask-oauthlib, python-social-auth, or authlib).\n\t•\tPopular frameworks like Flask and Django already have robust integrations for OAuth providers.\n\t3.\tBackend Configuration:\n\t•\tImplement an endpoint to handle the OAuth flow (/auth/login/google or /auth/login/github).\n\t•\tConfigure your app to send users to Google or GitHub’s authentication page.\n\t•\tHandle the OAuth callback to exchange the authorization code for an access token.\n\t•\tVerify the token and fetch user information (e.g., email, name).\n\t4.\tLink OAuth to User Registration:\n\t•\tOn successful login, create or retrieve a user in your database.\n\t•\tStore the user’s details like email, OAuth provider ID, and access token.\n\t5.\tFrontend Integration (if applicable):\n\t•\tAdd “Login with Google” or “Login with GitHub” buttons.\n\t•\tRedirect to your backend’s OAuth endpoint when clicked.', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T12:15:54.291625', 'updated_at': '2025-01-16T19:22:36.239866'}, {'id': 62, 'name': 'Add OAuth integration for Google Login', 'description': 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.241200'}, {'id': 64, 'name': 'Setup project credentials for Google API', 'description': 'Generate client ID and secret from Google API Console for your application.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-01-16T19:22:36.242497'}, {'id': 67, 'name': 'Test Google OAuth flow', 'description': 'Verify the OAuth flow using test accounts and check the token exchange.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.243780'}, {'id': 65, 'name': 'Implement backend endpoints for Google OAuth', 'description': 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-01-16T19:22:36.244932'}, {'id': 63, 'name': 'Add OAuth integration for GitHub Login', 'description': 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.246358'}, {'id': 68, 'name': 'Register application in GitHub Developer Console', 'description': 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.247746'}, {'id': 69, 'name': 'Handle callback from GitHub', 'description': 'Implement the callback endpoint to process the authorization code from GitHub.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.248912'}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'description': 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 18, 'status': 'Not Started', 'created_at': '2025-01-07T19:53:50.085064', 'updated_at': '2025-01-16T19:22:36.250169'}, {'id': 100, 'name': '1.1 User Registration', 'description': 'As a user, I want to register with a username, email, and password so that I can create an account and access the system.\n\n**Acceptance Criteria:**\n\n•\tUser can input valid username, email, and password.\n•\tUsername and email must be unique.\n•\tErrors are displayed for invalid inputs or duplicate accounts.\n•\tPasswords must meet complexity requirements and be securely stored.\n•\tSuccessful registration redirects users to a login page.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:59:09.044667', 'updated_at': '2025-01-16T19:22:36.251812'}, {'id': 107, 'name': '1.1.1 Database Changes for User Registration', 'description': '1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.\n   CREATE TABLE public.users (\n       id SERIAL PRIMARY KEY,\n       username VARCHAR(50) UNIQUE NOT NULL,\n       email VARCHAR(100) UNIQUE NOT NULL,\n       password_hash VARCHAR(255) NOT NULL,\n       created_at TIMESTAMP DEFAULT NOW(),\n       updated_at TIMESTAMP DEFAULT NOW()\n);\n\n\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:30.747962'}, {'id': 108, 'name': '1.1.2 Backend API for Registration', 'description': '•\tCreate an endpoint POST /api/register:\n•\tValidate input fields.\n•\tHash the password using bcrypt or argon2.\n•\tInsert the user into the users table.\n•\tReturn success/failure responses.\ndddhfff\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:33.067643'}, {'id': 112, 'name': '1.2.2 Frontend Login Page', 'description': 'Develop a frontend form for user login with email and password inputs.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.683644'}, {'id': 109, 'name': '1.1.3 Create Frontend Registration Page', 'description': 'Develop a frontend form to collect user registration details.\n•\tAdd a form for username, email, and password inputs.\n•\tUse client-side validation (e.g., email format).\n•\tSend a POST request to /api/register.\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.684988'}, {'id': 110, 'name': '1.1.4 Unit Tests for Registration', 'description': 'Write unit tests for:\n\n•\tValid registration.\n•\tDuplicate username/email scenarios.\n•\tInvalid input handling.\nff', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.686902'}, {'id': 101, 'name': '1.2 User Login', 'description': 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n•\tUsers can log in with a valid email and password.\n•\tErrors are displayed for invalid credentials.\n•\tSuccessful login stores a session or JWT token.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:25:53.687936'}, {'id': 111, 'name': '1.2.1 Backend API for Login', 'description': 'Create POST /api/login endpoint to handle user login.\njjsjj', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.689096'}, {'id': 113, 'name': '1.2.3 Session Management', 'description': 'Implement secure session handling using cookies or JWT.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:20.968680'}, {'id': 114, 'name': '1.2.4 Unit Tests for Login', 'description': 'Write tests for successful and failed login attempts.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:22:36.265866'}, {'id': 106, 'name': 'Password Reset', 'description': 'As a user, I want to reset my password securely using email.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.267247'}, {'id': 128, 'name': 'Frontend Password Reset Page', 'description': 'Develop a page for users to enter a new password using a valid token.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.269158'}, {'id': 129, 'name': 'Testing Password Reset', 'description': 'Write tests for email delivery, token validation, and password updates.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.270849'}, {'id': 102, 'name': 'Logout', 'description': 'As a user, I want to log out so that I can end my session securely.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.272605'}, {'id': 117, 'name': 'Tests for Logout', 'description': 'Verify session invalidation and redirection to the login page.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.274575'}, {'id': 116, 'name': 'Frontend Logout Button', 'description': 'Add a logout button to the UI and handle session clearing.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-09T12:31:17.939784'}, {'id': 115, 'name': 'Backend API for Logout', 'description': 'Create POST /api/logout endpoint to invalidate user sessions.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.277547'}, {'id': 61, 'name': 'Parent task assignment', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-04T22:31:45.205815', 'updated_at': '2025-01-16T19:22:36.279012'}, {'id': 45, 'name': 'Display Default Value in Dropdown', 'description': 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.280493'}, {'id': 50, 'name': 'Retrieve Current Parent Task', 'description': 'Retrieve the current parent task’s ID and name from the backend.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 2, 'status': 'In Progress', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-10T07:41:43.569807'}, {'id': 51, 'name': 'Set Default Value', 'description': 'Set the default value in the dropdown based on the retrieved data.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 45, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 1, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.283309'}, {'id': 46, 'name': 'Search for Parent Tasks', 'description': 'Allow users to search for tasks dynamically in the dropdown by typing.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.284882'}, {'id': 54, 'name': 'Test Partial Matching', 'description': 'Ensure the search results update in real-time as the user types.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.286248'}, {'id': 47, 'name': 'Handle Large Datasets Efficiently', 'description': 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 13, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.287641'}, {'id': 56, 'name': 'Paginate API Responses', 'description': 'Implement server-side filtering and pagination for large datasets.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.289338'}, {'id': 55, 'name': 'Enable Lazy Loading', 'description': 'Enable lazy loading or virtualization in Virtual Select.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.290910'}, {'id': 48, 'name': 'Select and Deselect Parent Tasks', 'description': 'Allow users to select a parent task or deselect by choosing "None."', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.292389'}, {'id': 57, 'name': 'Ensure None Option Availability', 'description': 'Add “None” as a selectable option and ensure it stays at the top of the list.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.294045'}, {'id': 58, 'name': 'Handle Selection Events', 'description': 'Implement event listeners to update the form’s state when the selection changes.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.295385'}, {'id': 49, 'name': 'Integrate Dropdown with Task Form', 'description': 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.296814'}, {'id': 59, 'name': 'Bind Dropdown to Form Field', 'description': 'Bind the dropdown to the form’s parent task field.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-09T23:48:08.770907'}, {'id': 60, 'name': 'Test Form Submission', 'description': 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.299971'}, {'id': 41, 'name': 'Implement Searchable Dropdown', 'description': 'As a user, I want a searchable dropdown for parent task assignment.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Completed', 'created_at': '2025-01-03T09:14:28.285904', 'updated_at': '2025-02-10T07:41:33.252945'}, {'id': 52, 'name': 'Add Search Box to Dropdown', 'description': 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-10T07:40:33.847642'}, {'id': 53, 'name': 'Implement AJAX Search', 'description': 'Implement AJAX-based search to fetch tasks dynamically from the backend.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-09T07:55:00.680183'}, {'id': 42, 'name': 'Choose Dropdown Library', 'description': 'Research and decide on the dropdown library to use.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-10T07:41:18.814716'}, {'id': 43, 'name': 'Integrate Dropdown Library', 'description': 'Integrate the chosen dropdown library into the project.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Completed', 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-10T07:41:23.756572'}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t•\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t•\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-01-16T19:22:36.311560'}, {'id': 85, 'name': 'Assign multiple contributors to a task', 'description': 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:32:39.466022', 'updated_at': '2025-01-16T19:22:36.313789'}, {'id': 90, 'name': 'Update frontend to display and manage multiple contributors', 'description': 'Allow users to view, add, or remove multiple contributors via the UI.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-01-16T19:22:36.315695'}, {'id': 88, 'name': 'Update database schema for multiple contributors', 'description': 'Modify the task table to support many-to-many relationships for contributors.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-01-16T19:22:36.317500'}, {'id': 89, 'name': 'Develop backend API for adding contributors to a task', 'description': 'Create endpoints to add, update, and remove contributors for a task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-01-16T19:22:36.319281'}, {'id': 86, 'name': 'Allow designation of task owner', 'description': 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:29.330562', 'updated_at': '2025-01-16T19:22:36.320840'}, {'id': 93, 'name': 'Update frontend to manage task ownership', 'description': 'Allow users to assign or update the task owner via the UI.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-01-16T19:22:36.322637'}, {'id': 91, 'name': 'Update database schema for task ownership', 'description': 'Add a column or relationship to assign a single owner per task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-01-16T19:22:36.324051'}, {'id': 92, 'name': 'Develop backend API for assigning task owner', 'description': 'Create endpoints to assign or update the owner of a task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-11T09:19:44.027744'}, {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-01-16T19:22:36.326985'}, {'id': 96, 'name': 'Allow admin users to create and customize contributor roles via frontend', 'description': 'Provide UI functionality for admins to manage contributor roles dynamically.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-01-16T19:22:36.328562'}, {'id': 94, 'name': 'Add database support for contributor roles', 'description': 'Introduce a roles table and link contributors to specific roles for tasks.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-01-16T19:22:36.329887'}, {'id': 95, 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T00:05:23.555198'}, {'id': 127, 'name': 'Backend API for Password Reset', 'description': 'Create endpoints to handle password reset requests and token validation.\ndfdf\n\nasdasd', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-10T23:59:50.734037'}, {'id': 126, 'name': 'Email Configuration for Password Reset', 'description': 'Configure email service to send password reset links.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.334340'}, {'id': 104, 'name': 'Middleware for Role Enforcement', 'description': 'As a system, I want to enforce role-based access to specific routes.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:23:40.346816'}, {'id': 122, 'name': 'Testing Role Enforcement', 'description': 'Write tests to ensure proper access control based on roles.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-01-16T19:23:58.185693'}, {'id': 121, 'name': 'Develop Role Enforcement Middleware', 'description': 'Implement middleware to check user roles for access control.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-01-16T19:23:58.187439'}, {'id': 105, 'name': 'Profile Management', 'description': 'As a user, I want to update my profile (username, email, password).', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.339830'}, {'id': 123, 'name': 'Backend API for Profile Management', 'description': 'Create PATCH /api/profile endpoint to update user details.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-01-16T19:24:19.678781'}, {'id': 125, 'name': 'Testing Profile Updates', 'description': 'Write tests for profile update functionality.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-01-16T19:24:19.680382'}]
2025-02-11 09:21:22,434 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-11 09:21:22,435 INFO: [cached since 557.2s ago] {'param_1': 2}
2025-02-11 09:21:22,435 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:21:22,436 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-11 09:21:22,436 INFO: [cached since 557.2s ago] {'param_1': 3}
2025-02-11 09:21:22,436 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:21:22,436 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-11 09:21:22,436 INFO: [cached since 557.2s ago] {'param_1': 4}
2025-02-11 09:21:22,436 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:21:22,436 DEBUG: Row (4, 'Fredrik')
2025-02-11 09:21:22,437 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-11 09:21:22,437 INFO: [cached since 557.2s ago] {'param_1': 5}
2025-02-11 09:21:22,437 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:21:22,438 INFO: ROLLBACK
2025-02-11 09:21:22,438 INFO: 127.0.0.1 - - [11/Feb/2025 09:21:22] "GET /tasks/?page=1&is_archived=False HTTP/1.1" 200 -
2025-02-11 09:21:22,511 INFO: 127.0.0.1 - - [11/Feb/2025 09:21:22] "GET /static/custom.css HTTP/1.1" 200 -
2025-02-11 09:21:22,514 INFO: 127.0.0.1 - - [11/Feb/2025 09:21:22] "GET /static/js/filters.js HTTP/1.1" 200 -
2025-02-11 09:21:22,514 INFO: 127.0.0.1 - - [11/Feb/2025 09:21:22] "GET /static/js/tasks_table_interactions.js HTTP/1.1" 200 -
2025-02-11 09:21:22,519 INFO: 127.0.0.1 - - [11/Feb/2025 09:21:22] "GET /static/js/modals.js HTTP/1.1" 200 -
2025-02-11 09:21:22,590 INFO: 127.0.0.1 - - [11/Feb/2025 09:21:22] "GET /static/images/background.svg HTTP/1.1" 200 -
2025-02-11 09:21:22,952 INFO: 127.0.0.1 - - [11/Feb/2025 09:21:22] "GET /static/favicon.ico HTTP/1.1" 200 -
2025-02-11 09:21:26,143 INFO: Fetching task details for Task ID 95.
2025-02-11 09:21:26,144 INFO: Fetching task with ID 95.
2025-02-11 09:21:26,144 INFO: BEGIN (implicit)
2025-02-11 09:21:26,145 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:21:26,145 INFO: [cached since 553.4s ago] {'pk_1': 95}
2025-02-11 09:21:26,146 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:21:26,146 DEBUG: Row (95, 'Develop backend API for managing contributor roles', 67, 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'Subtask', False, False, 'Not Started', 87, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 2, 11, 0, 5, 23, 555198), None)
2025-02-11 09:21:26,146 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x12b743470>, 'sort_order': 67, 'task_type': 'Subtask', 'contributor_id': None, 'id': 95, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), 'status': 'Not Started', 'project_id': 6, 'updated_at': datetime.datetime(2025, 2, 11, 0, 5, 23, 555198), 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'parent_id': 87, 'story_points': 8, 'completed_date': None}
2025-02-11 09:21:26,147 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-11 09:21:26,147 INFO: [cached since 553.4s ago] {'pk_1': 6}
2025-02-11 09:21:26,148 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at')
2025-02-11 09:21:26,154 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298))
2025-02-11 09:21:26,154 INFO: Task ID 95 fetched with parent ID: 87
2025-02-11 09:21:26,155 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:21:26,155 INFO: [cached since 553.4s ago] {'pk_1': 87}
2025-02-11 09:21:26,157 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:21:26,157 DEBUG: Row (87, 'Create and customize contributor roles', 64, 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'User Story', False, False, 'Not Started', 84, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), None)
2025-02-11 09:21:26,157 INFO: Task with ID 95 fetched successfully.
2025-02-11 09:21:26,158 DEBUG: Fetched Task Data: {'id': 95, 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T00:05:23.555198', 'contributor_name': 'Unassigned', 'parent': {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-01-16T19:22:36.326985'}}
2025-02-11 09:21:26,158 INFO: Task details fetched successfully for Task ID 95.
2025-02-11 09:21:26,158 INFO: ROLLBACK
2025-02-11 09:21:26,158 INFO: 127.0.0.1 - - [11/Feb/2025 09:21:26] "GET /api/tasks/95 HTTP/1.1" 200 -
2025-02-11 09:21:26,674 INFO: Fetching task details for Task ID 87.
2025-02-11 09:21:26,674 INFO: Fetching task with ID 87.
2025-02-11 09:21:26,675 INFO: BEGIN (implicit)
2025-02-11 09:21:26,675 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:21:26,676 INFO: [cached since 553.9s ago] {'pk_1': 87}
2025-02-11 09:21:26,676 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:21:26,677 DEBUG: Row (87, 'Create and customize contributor roles', 64, 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'User Story', False, False, 'Not Started', 84, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), None)
2025-02-11 09:21:26,677 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x12b740710>, 'sort_order': 64, 'task_type': 'User Story', 'contributor_id': None, 'id': 87, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), 'status': 'Not Started', 'project_id': 6, 'updated_at': datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'parent_id': 84, 'story_points': 8, 'completed_date': None}
2025-02-11 09:21:26,678 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-11 09:21:26,678 INFO: [cached since 553.9s ago] {'pk_1': 6}
2025-02-11 09:21:26,678 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at')
2025-02-11 09:21:26,678 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298))
2025-02-11 09:21:26,679 INFO: Task ID 87 fetched with parent ID: 84
2025-02-11 09:21:26,679 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:21:26,679 INFO: [cached since 553.9s ago] {'pk_1': 84}
2025-02-11 09:21:26,680 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:21:26,681 DEBUG: Row (84, 'Enhance Task Contributor Management', 55, 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI ... (335 characters truncated) ... onalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'Epic', False, False, 'Not Started', None, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 30, 21, 149869), datetime.datetime(2025, 1, 16, 19, 22, 36, 311560), None)
2025-02-11 09:21:26,682 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:21:26,682 INFO: [cached since 553.4s ago] {'pk_1': 5}
2025-02-11 09:21:26,683 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:21:26,683 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:21:26,683 INFO: Task with ID 87 fetched successfully.
2025-02-11 09:21:26,684 DEBUG: Fetched Task Data: {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-01-16T19:22:36.326985', 'contributor_name': 'Unassigned', 'parent': {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t•\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t•\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-01-16T19:22:36.311560'}}
2025-02-11 09:21:26,684 INFO: Task details fetched successfully for Task ID 87.
2025-02-11 09:21:26,684 INFO: ROLLBACK
2025-02-11 09:21:26,684 INFO: 127.0.0.1 - - [11/Feb/2025 09:21:26] "GET /api/tasks/87 HTTP/1.1" 200 -
2025-02-11 09:21:27,395 INFO: Fetching task details for Task ID 95.
2025-02-11 09:21:27,396 INFO: Fetching task with ID 95.
2025-02-11 09:21:27,396 INFO: BEGIN (implicit)
2025-02-11 09:21:27,397 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:21:27,397 INFO: [cached since 554.6s ago] {'pk_1': 95}
2025-02-11 09:21:27,399 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:21:27,399 DEBUG: Row (95, 'Develop backend API for managing contributor roles', 67, 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'Subtask', False, False, 'Not Started', 87, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 2, 11, 0, 5, 23, 555198), None)
2025-02-11 09:21:27,399 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x12b740170>, 'sort_order': 67, 'task_type': 'Subtask', 'contributor_id': None, 'id': 95, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), 'status': 'Not Started', 'project_id': 6, 'updated_at': datetime.datetime(2025, 2, 11, 0, 5, 23, 555198), 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'parent_id': 87, 'story_points': 8, 'completed_date': None}
2025-02-11 09:21:27,400 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-11 09:21:27,400 INFO: [cached since 554.6s ago] {'pk_1': 6}
2025-02-11 09:21:27,401 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at')
2025-02-11 09:21:27,401 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298))
2025-02-11 09:21:27,402 INFO: Task ID 95 fetched with parent ID: 87
2025-02-11 09:21:27,402 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:21:27,403 INFO: [cached since 554.6s ago] {'pk_1': 87}
2025-02-11 09:21:27,403 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:21:27,404 DEBUG: Row (87, 'Create and customize contributor roles', 64, 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'User Story', False, False, 'Not Started', 84, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), None)
2025-02-11 09:21:27,404 INFO: Task with ID 95 fetched successfully.
2025-02-11 09:21:27,404 DEBUG: Fetched Task Data: {'id': 95, 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T00:05:23.555198', 'contributor_name': 'Unassigned', 'parent': {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-01-16T19:22:36.326985'}}
2025-02-11 09:21:27,404 INFO: Task details fetched successfully for Task ID 95.
2025-02-11 09:21:27,405 INFO: ROLLBACK
2025-02-11 09:21:27,405 INFO: 127.0.0.1 - - [11/Feb/2025 09:21:27] "GET /api/tasks/95 HTTP/1.1" 200 -
2025-02-11 09:21:27,611 INFO: Fetching task details for Task ID 87.
2025-02-11 09:21:27,612 INFO: Fetching task with ID 87.
2025-02-11 09:21:27,612 INFO: BEGIN (implicit)
2025-02-11 09:21:27,613 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:21:27,613 INFO: [cached since 554.9s ago] {'pk_1': 87}
2025-02-11 09:21:27,614 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:21:27,614 DEBUG: Row (87, 'Create and customize contributor roles', 64, 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'User Story', False, False, 'Not Started', 84, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), None)
2025-02-11 09:21:27,614 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x12b743410>, 'sort_order': 64, 'task_type': 'User Story', 'contributor_id': None, 'id': 87, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), 'status': 'Not Started', 'project_id': 6, 'updated_at': datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'parent_id': 84, 'story_points': 8, 'completed_date': None}
2025-02-11 09:21:27,615 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-11 09:21:27,615 INFO: [cached since 554.9s ago] {'pk_1': 6}
2025-02-11 09:21:27,616 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at')
2025-02-11 09:21:27,616 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298))
2025-02-11 09:21:27,617 INFO: Task ID 87 fetched with parent ID: 84
2025-02-11 09:21:27,617 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:21:27,618 INFO: [cached since 554.9s ago] {'pk_1': 84}
2025-02-11 09:21:27,618 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:21:27,619 DEBUG: Row (84, 'Enhance Task Contributor Management', 55, 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI ... (335 characters truncated) ... onalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'Epic', False, False, 'Not Started', None, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 30, 21, 149869), datetime.datetime(2025, 1, 16, 19, 22, 36, 311560), None)
2025-02-11 09:21:27,620 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:21:27,620 INFO: [cached since 554.3s ago] {'pk_1': 5}
2025-02-11 09:21:27,620 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:21:27,621 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:21:27,621 INFO: Task with ID 87 fetched successfully.
2025-02-11 09:21:27,621 DEBUG: Fetched Task Data: {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-01-16T19:22:36.326985', 'contributor_name': 'Unassigned', 'parent': {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t•\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t•\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-01-16T19:22:36.311560'}}
2025-02-11 09:21:27,622 INFO: Task details fetched successfully for Task ID 87.
2025-02-11 09:21:27,622 INFO: ROLLBACK
2025-02-11 09:21:27,623 INFO: 127.0.0.1 - - [11/Feb/2025 09:21:27] "GET /api/tasks/87 HTTP/1.1" 200 -
2025-02-11 09:21:30,142 INFO: Assigning contributor to task ID 95
2025-02-11 09:21:30,142 INFO: Received data: {'contributor_id': 5}
2025-02-11 09:21:30,142 INFO: Contributor ID received: 5
2025-02-11 09:21:30,143 INFO: BEGIN (implicit)
2025-02-11 09:21:30,143 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:21:30,143 INFO: [cached since 557.4s ago] {'pk_1': 95}
2025-02-11 09:21:30,144 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:21:30,144 DEBUG: Row (95, 'Develop backend API for managing contributor roles', 67, 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'Subtask', False, False, 'Not Started', 87, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 2, 11, 0, 5, 23, 555198), None)
2025-02-11 09:21:30,145 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:21:30,145 INFO: [cached since 106.1s ago] {'pk_1': 5}
2025-02-11 09:21:30,145 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:21:30,146 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:21:30,146 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name 
FROM project LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project.id = project_contributor_1.project_id 
WHERE project.id = %(pk_1)s
2025-02-11 09:21:30,146 INFO: [cached since 106.1s ago] {'pk_1': 6}
2025-02-11 09:21:30,147 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at', 'contributor_1_id', 'contributor_1_name')
2025-02-11 09:21:30,147 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:21:30,150 INFO: UPDATE task SET contributor_id=%(contributor_id)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-02-11 09:21:30,150 INFO: [cached since 106.1s ago] {'contributor_id': 5, 'updated_at': datetime.datetime(2025, 2, 11, 8, 21, 30, 150064, tzinfo=datetime.timezone.utc), 'task_id': 95}
2025-02-11 09:21:30,151 INFO: COMMIT
2025-02-11 09:21:30,153 INFO: BEGIN (implicit)
2025-02-11 09:21:30,153 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:21:30,153 INFO: [cached since 106.1s ago] {'pk_1': 5}
2025-02-11 09:21:30,154 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:21:30,154 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:21:30,155 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:21:30,155 INFO: [cached since 106.1s ago] {'pk_1': 95}
2025-02-11 09:21:30,156 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:21:30,156 DEBUG: Row (95, 'Develop backend API for managing contributor roles', 67, 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'Subtask', False, False, 'Not Started', 87, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 2, 11, 9, 21, 30, 150064), None)
2025-02-11 09:21:30,157 INFO: ROLLBACK
2025-02-11 09:21:30,157 INFO: 127.0.0.1 - - [11/Feb/2025 09:21:30] "POST /tasks/95/assign_contributor HTTP/1.1" 200 -
2025-02-11 09:21:32,541 INFO: Assigning contributor to task ID 95
2025-02-11 09:21:32,542 INFO: Received data: {'contributor_id': 5}
2025-02-11 09:21:32,542 INFO: Contributor ID received: 5
2025-02-11 09:21:32,543 INFO: BEGIN (implicit)
2025-02-11 09:21:32,543 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:21:32,543 INFO: [cached since 559.8s ago] {'pk_1': 95}
2025-02-11 09:21:32,544 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:21:32,544 DEBUG: Row (95, 'Develop backend API for managing contributor roles', 67, 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'Subtask', False, False, 'Not Started', 87, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 2, 11, 9, 21, 30, 150064), None)
2025-02-11 09:21:32,545 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:21:32,545 INFO: [cached since 108.5s ago] {'pk_1': 5}
2025-02-11 09:21:32,546 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:21:32,546 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:21:32,546 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name 
FROM project LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project.id = project_contributor_1.project_id 
WHERE project.id = %(pk_1)s
2025-02-11 09:21:32,547 INFO: [cached since 108.5s ago] {'pk_1': 6}
2025-02-11 09:21:32,547 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at', 'contributor_1_id', 'contributor_1_name')
2025-02-11 09:21:32,547 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:21:32,549 INFO: COMMIT
2025-02-11 09:21:32,551 INFO: BEGIN (implicit)
2025-02-11 09:21:32,551 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:21:32,551 INFO: [cached since 108.5s ago] {'pk_1': 5}
2025-02-11 09:21:32,552 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:21:32,553 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:21:32,553 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:21:32,553 INFO: [cached since 108.5s ago] {'pk_1': 95}
2025-02-11 09:21:32,554 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:21:32,554 DEBUG: Row (95, 'Develop backend API for managing contributor roles', 67, 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'Subtask', False, False, 'Not Started', 87, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 2, 11, 9, 21, 30, 150064), None)
2025-02-11 09:21:32,555 INFO: ROLLBACK
2025-02-11 09:21:32,555 INFO: 127.0.0.1 - - [11/Feb/2025 09:21:32] "POST /tasks/95/assign_contributor HTTP/1.1" 200 -
2025-02-11 09:21:40,937 INFO: Entering list_tasks route...
2025-02-11 09:21:40,940 DEBUG: Filters used: {'is_archived': False}
2025-02-11 09:21:40,943 DEBUG: Applying filters: {'is_archived': False}
2025-02-11 09:21:40,947 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-11 09:21:40,947 INFO: BEGIN (implicit)
2025-02-11 09:21:40,948 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-11 09:21:40,948 INFO: [cached since 575.8s ago] {'param_1': 110, 'param_2': 0}
2025-02-11 09:21:40,956 DEBUG: Col ('anon_1_task_id', 'anon_1_task_name', 'anon_1_task_sort_order', 'anon_1_task_description', 'anon_1_task_task_type', 'anon_1_task_is_archived', 'anon_1_task_completed', 'anon_1_task_status', 'anon_1_task_parent_id', 'anon_1_task_project_id', 'anon_1_task_contributor_id', 'anon_1_task_story_points', 'anon_1_task_created_at', 'anon_1_task_updated_at', 'anon_1_task_completed_date', 'task_1_id', 'task_1_name', 'task_1_sort_order', 'task_1_description', 'task_1_task_type', 'task_1_is_archived', 'task_1_completed', 'task_1_status', 'task_1_parent_id', 'task_1_project_id', 'task_1_contributor_id', 'task_1_story_points', 'task_1_created_at', 'task_1_updated_at', 'task_1_completed_date', 'contributor_1_id', 'contributor_1_name', 'project_1_id', 'project_1_name', 'project_1_start_date', 'project_1_end_date', 'project_1_scope', 'project_1_completed_story_points', 'project_1_created_at', 'project_1_updated_at', 'contributor_2_id', 'contributor_2_name')
2025-02-11 09:21:40,957 DEBUG: Row (290, 'issue: error when changing task type and', 0, 'issue: error when changing task type and parent task before saving', 'Subtask', False, False, 'Not Started', 130, 6, None, 0, datetime.datetime(2025, 2, 10, 9, 0, 3, 417734), datetime.datetime(2025, 2, 10, 9, 15, 9, 284969), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,957 DEBUG: Row (298, 'example user story with parent epic 297', 0, '', 'User Story', False, False, 'Not Started', 297, 1, None, 0, datetime.datetime(2025, 2, 10, 9, 41, 1, 907455), datetime.datetime(2025, 2, 10, 14, 59, 4, 142570), None, 299, 'example sub task with parent user story 298', 0, 'Test update 1\nTest update 2\nTest update 3', 'Subtask', False, False, 'Not Started', 298, 1, None, 0, datetime.datetime(2025, 2, 10, 9, 42, 38, 905700), datetime.datetime(2025, 2, 10, 23, 23, 8, 671464), None, None, None, 1, 'Project Alpha', datetime.date(2024, 1, 1), datetime.date(2024, 12, 31), None, 0, datetime.datetime(2024, 12, 11, 1, 16, 28, 688881), datetime.datetime(2024, 12, 11, 1, 16, 28, 688881), None, None)
2025-02-11 09:21:40,957 DEBUG: Row (275, 'add sprints, cycles', 0, 'Make naming customizable', 'Epic', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 0, 48, 52, 680022), datetime.datetime(2025, 2, 10, 8, 38, 37, 622196), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:21:40,957 DEBUG: Row (276, 'add support for priority', 0, '', 'Epic', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 0, 49, 26, 189497), datetime.datetime(2025, 2, 10, 8, 28, 47, 447612), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:21:40,958 DEBUG: Row (264, 'close all / open all childtasks', 0, '', 'User Story', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 8, 2, 25, 20, 101418), datetime.datetime(2025, 2, 10, 8, 47, 14, 915970), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:21:40,958 DEBUG: Row (285, 'add text truncation to project names in task list', 0, '', 'Epic', False, False, 'Not Started', None, 6, None, 0, datetime.datetime(2025, 2, 10, 8, 45, 47, 27805), datetime.datetime(2025, 2, 10, 9, 45, 47, 29729), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,958 DEBUG: Row (257, 'Update Task API Integration', 0, "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'Subtask', False, False, 'Not Started', 240, 6, 5, 3, datetime.datetime(2025, 2, 5, 22, 55, 49, 566819), datetime.datetime(2025, 2, 5, 22, 18, 17, 807154), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:21:40,958 DEBUG: Row (294, 'issue: task table filters not working', 0, '', 'User Story', False, False, 'Not Started', None, 6, None, 0, datetime.datetime(2025, 2, 10, 9, 19, 21, 22598), datetime.datetime(2025, 2, 10, 10, 19, 21, 24676), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,958 DEBUG: Row (267, 'improvements to toggles and nested tasks', 0, '', 'Epic', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 8, 2, 29, 12, 464594), datetime.datetime(2025, 2, 10, 8, 47, 24, 581680), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:21:40,958 DEBUG: Row (271, 'make sure dynamically added rows has the exact same styling and includes every element', 0, 'Missing elements:\n- Open link\n- Default project\n- Project name should be inside a pill\n- Task type should be in a pill\n- Estimations should be 0, not N/A\n- Make sure font size is matching\n- status should have the dropdown inside a pill\n', 'Epic', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 0, 21, 7, 108431), datetime.datetime(2025, 2, 10, 8, 38, 47, 340105), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:21:40,958 DEBUG: Row (283, 'fix update title', 0, '', 'User Story', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 8, 41, 58, 769700), datetime.datetime(2025, 2, 10, 8, 46, 47, 282087), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:21:40,958 DEBUG: Row (273, 'disable parent task selector in epics', 0, 'and add text, Epic can´t have parent tasks', 'Epic', False, False, 'Not Started', None, 6, None, 0, datetime.datetime(2025, 2, 10, 0, 45, 20, 740910), datetime.datetime(2025, 2, 10, 8, 39, 17, 639890), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,958 DEBUG: Row (269, 'fix styling for sweetalert', 0, '', 'User Story', False, False, 'In Progress', None, 6, None, 0, datetime.datetime(2025, 2, 8, 15, 54, 56, 717846), datetime.datetime(2025, 2, 10, 8, 39, 32, 172437), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,958 DEBUG: Row (286, 'add support for labels/tags', 0, '', 'User Story', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 8, 46, 23, 985620), datetime.datetime(2025, 2, 10, 9, 46, 23, 987564), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:21:40,958 DEBUG: Row (299, 'example sub task with parent user story 298', 0, 'Test update 1\nTest update 2\nTest update 3', 'Subtask', False, False, 'Not Started', 298, 1, None, 0, datetime.datetime(2025, 2, 10, 9, 42, 38, 905700), datetime.datetime(2025, 2, 10, 23, 23, 8, 671464), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 1, 'Project Alpha', datetime.date(2024, 1, 1), datetime.date(2024, 12, 31), None, 0, datetime.datetime(2024, 12, 11, 1, 16, 28, 688881), datetime.datetime(2024, 12, 11, 1, 16, 28, 688881), None, None)
2025-02-11 09:21:40,958 DEBUG: Row (266, 'highlight the nested tasks', 0, '', 'User Story', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 8, 2, 28, 30, 382949), datetime.datetime(2025, 2, 10, 8, 47, 4, 382929), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:21:40,958 DEBUG: Row (279, 'github integration', 0, '', 'Epic', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 7, 36, 38, 238202), datetime.datetime(2025, 2, 10, 8, 39, 24, 168451), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:21:40,958 DEBUG: Row (289, 'issue: parent task is lost when updating task', 0, '', 'Subtask', False, False, 'Not Started', None, 6, None, 0, datetime.datetime(2025, 2, 10, 8, 56, 25, 273984), datetime.datetime(2025, 2, 10, 9, 12, 47, 626993), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,958 DEBUG: Row (272, 'implement a markdown text editor like notion', 0, '', 'Epic', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 0, 28, 18, 300231), datetime.datetime(2025, 2, 10, 8, 28, 39, 669255), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:21:40,959 DEBUG: Row (278, 'search feature for tasks list', 0, '', 'Epic', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 7, 36, 3, 369833), datetime.datetime(2025, 2, 10, 8, 39, 4, 5957), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:21:40,959 DEBUG: Row (281, 'add high level plan', 0, 'Add some sort of high level plan that aims to keep PM/PO´s on track and not get lost into the details of an overwhelminly large backlog', 'Epic', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 8, 27, 1, 218606), datetime.datetime(2025, 2, 10, 8, 38, 54, 754760), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:21:40,959 DEBUG: Row (287, 'when moving a parent item to another project make sure the subtasks are moved as well', 0, '', 'User Story', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 8, 48, 31, 986870), datetime.datetime(2025, 2, 10, 9, 48, 31, 988859), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:21:40,959 DEBUG: Row (293, 'click on title should copy the task title and id to clipboard', 0, '', 'User Story', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 9, 16, 33, 508209), datetime.datetime(2025, 2, 10, 10, 16, 33, 510414), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:21:40,959 DEBUG: Row (277, 'custom task workflow statuses', 0, 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- ... (780 characters truncated) ...  tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'Epic', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 7, 16, 3, 352588), datetime.datetime(2025, 2, 10, 8, 38, 28, 123328), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:21:40,959 DEBUG: Row (274, 'add support for goals, initiatives, okr´s', 0, 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n', 'Epic', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 0, 46, 27, 204912), datetime.datetime(2025, 2, 10, 8, 28, 17, 663922), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:21:40,959 DEBUG: Row (280, 'logging (task and project history)', 0, '', 'Epic', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 7, 37, 44, 435112), datetime.datetime(2025, 2, 10, 8, 28, 28, 947805), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:21:40,959 DEBUG: Row (282, 'implement same task list in projects but filtered on project', 0, '', 'Epic', False, False, 'Not Started', None, 6, None, 0, datetime.datetime(2025, 2, 10, 8, 41, 17, 786154), datetime.datetime(2025, 2, 10, 9, 41, 17, 787861), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,959 DEBUG: Row (296, 'issue: contributor is lost after updating task', 0, '', 'User Story', False, False, 'Not Started', None, 6, None, 0, datetime.datetime(2025, 2, 10, 9, 26, 43, 881947), datetime.datetime(2025, 2, 10, 10, 26, 43, 884004), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,959 DEBUG: Row (288, 'when trying to move subtask to another project, make sure a warning is displayed', 0, 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be l ... (312 characters truncated) ... , Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'Epic', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 8, 54, 36, 297869), datetime.datetime(2025, 2, 10, 8, 54, 51, 840686), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:21:40,959 DEBUG: Row (284, 'add type "issue/bug"', 0, '', 'Epic', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 8, 42, 27, 719439), datetime.datetime(2025, 2, 10, 9, 42, 27, 720908), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:21:40,960 DEBUG: Row (295, 'issue: drag and drop errors', 0, '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'User Story', False, False, 'Not Started', None, 6, None, 0, datetime.datetime(2025, 2, 10, 9, 22, 54, 461413), datetime.datetime(2025, 2, 10, 10, 22, 54, 462542), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,960 DEBUG: Row (297, 'example parent epic', 0, '', 'Epic', False, False, 'Not Started', None, 1, None, 0, datetime.datetime(2025, 2, 10, 9, 39, 51, 620509), datetime.datetime(2025, 2, 10, 10, 39, 51, 622712), None, 298, 'example user story with parent epic 297', 0, '', 'User Story', False, False, 'Not Started', 297, 1, None, 0, datetime.datetime(2025, 2, 10, 9, 41, 1, 907455), datetime.datetime(2025, 2, 10, 14, 59, 4, 142570), None, None, None, 1, 'Project Alpha', datetime.date(2024, 1, 1), datetime.date(2024, 12, 31), None, 0, datetime.datetime(2024, 12, 11, 1, 16, 28, 688881), datetime.datetime(2024, 12, 11, 1, 16, 28, 688881), None, None)
2025-02-11 09:21:40,960 DEBUG: Row (292, 'issue: assigning contributor does not work', 0, '', 'User Story', False, False, 'Not Started', None, 6, None, 0, datetime.datetime(2025, 2, 10, 9, 11, 12, 273779), datetime.datetime(2025, 2, 10, 10, 11, 12, 274809), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,960 DEBUG: Row (265, 'smooth transition for toggles', 0, '', 'User Story', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 8, 2, 27, 23, 422612), datetime.datetime(2025, 2, 10, 8, 46, 55, 831743), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:21:40,960 DEBUG: Row (270, 'the newest task', 0, '', 'Subtask', False, False, 'Not Started', None, 1, None, 0, datetime.datetime(2025, 2, 10, 0, 7, 34, 368035), datetime.datetime(2025, 2, 10, 1, 7, 34, 372478), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 1, 'Project Alpha', datetime.date(2024, 1, 1), datetime.date(2024, 12, 31), None, 0, datetime.datetime(2024, 12, 11, 1, 16, 28, 688881), datetime.datetime(2024, 12, 11, 1, 16, 28, 688881), None, None)
2025-02-11 09:21:40,960 DEBUG: Row (291, 'add dropdowns in task list for changing: project, assigned to, estimate and task type (labels/tags)', 0, '', 'User Story', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 9, 9, 52, 988609), datetime.datetime(2025, 2, 10, 10, 9, 52, 997455), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:21:40,960 DEBUG: Row (136, 'Page scroll should stay in position when reloading', 2, '', 'User Story', False, False, 'Not Started', None, 6, None, 0, datetime.datetime(2025, 1, 16, 18, 21, 50, 187247), datetime.datetime(2025, 1, 16, 19, 22, 36, 214901), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,961 DEBUG: Row (130, 'Implement the Map of Task Relationships solution for drag-and-drop', 3, 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'User Story', False, False, 'Not Started', None, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 41, 28, 93022), datetime.datetime(2025, 1, 16, 19, 22, 36, 216705), None, 134, 'Step 2: Update the Backend in routes.py', 6, 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\ ... (8854 characters truncated) ... \tError Handling:\n\t•\tCaptures and logs exceptions during processing or committing.\n\t•\tProvides meaningful error messages to the frontend.\n\n\n', 'Subtask', False, False, 'Completed', 130, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 46, 29, 348853), datetime.datetime(2025, 2, 6, 21, 59, 21, 617065), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,961 DEBUG: Row (130, 'Implement the Map of Task Relationships solution for drag-and-drop', 3, 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'User Story', False, False, 'Not Started', None, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 41, 28, 93022), datetime.datetime(2025, 1, 16, 19, 22, 36, 216705), None, 131, 'Step 5: Update utils.py', 7, 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nCha ... (5732 characters truncated) ... lationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t•\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'Subtask', False, False, 'Not Started', 130, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 41, 28, 91824), datetime.datetime(2025, 1, 16, 19, 22, 36, 236691), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,961 DEBUG: Row (130, 'Implement the Map of Task Relationships solution for drag-and-drop', 3, 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'User Story', False, False, 'Not Started', None, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 41, 28, 93022), datetime.datetime(2025, 1, 16, 19, 22, 36, 216705), None, 132, 'Step 1: Update tasks_table_interactions.js', 5, '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the  ... (5413 characters truncated) ... t to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t•\tCSRF protection is ensured by passing the token to the request headers.', 'Subtask', False, False, 'Completed', 130, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 44, 8, 338301), datetime.datetime(2025, 2, 6, 21, 59, 17, 417466), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,962 DEBUG: Row (130, 'Implement the Map of Task Relationships solution for drag-and-drop', 3, 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'User Story', False, False, 'Not Started', None, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 41, 28, 93022), datetime.datetime(2025, 1, 16, 19, 22, 36, 216705), None, 290, 'issue: error when changing task type and', 0, 'issue: error when changing task type and parent task before saving', 'Subtask', False, False, 'Not Started', 130, 6, None, 0, datetime.datetime(2025, 2, 10, 9, 0, 3, 417734), datetime.datetime(2025, 2, 10, 9, 15, 9, 284969), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,963 DEBUG: Row (130, 'Implement the Map of Task Relationships solution for drag-and-drop', 3, 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'User Story', False, False, 'Not Started', None, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 41, 28, 93022), datetime.datetime(2025, 1, 16, 19, 22, 36, 216705), None, 133, 'Step 4: Enhance Logging in models.py', 4, 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nu ... (7099 characters truncated) ... ry step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t•\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'Subtask', False, False, 'Not Started', 130, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 44, 8, 340041), datetime.datetime(2025, 1, 16, 19, 22, 36, 219710), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,964 DEBUG: Row (130, 'Implement the Map of Task Relationships solution for drag-and-drop', 3, 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'User Story', False, False, 'Not Started', None, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 41, 28, 93022), datetime.datetime(2025, 1, 16, 19, 22, 36, 216705), None, 135, 'Step 3: Update list.html', 8, 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already in ... (4578 characters truncated) ... sks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'Subtask', False, False, 'Not Started', 130, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 46, 29, 349784), datetime.datetime(2025, 1, 16, 19, 22, 36, 238473), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,965 DEBUG: Row (133, 'Step 4: Enhance Logging in models.py', 4, 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nu ... (7099 characters truncated) ... ry step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t•\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'Subtask', False, False, 'Not Started', 130, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 44, 8, 340041), datetime.datetime(2025, 1, 16, 19, 22, 36, 219710), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,965 DEBUG: Row (132, 'Step 1: Update tasks_table_interactions.js', 5, '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the  ... (5413 characters truncated) ... t to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t•\tCSRF protection is ensured by passing the token to the request headers.', 'Subtask', False, False, 'Completed', 130, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 44, 8, 338301), datetime.datetime(2025, 2, 6, 21, 59, 17, 417466), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,966 DEBUG: Row (134, 'Step 2: Update the Backend in routes.py', 6, 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\ ... (8854 characters truncated) ... \tError Handling:\n\t•\tCaptures and logs exceptions during processing or committing.\n\t•\tProvides meaningful error messages to the frontend.\n\n\n', 'Subtask', False, False, 'Completed', 130, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 46, 29, 348853), datetime.datetime(2025, 2, 6, 21, 59, 21, 617065), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,966 DEBUG: Row (131, 'Step 5: Update utils.py', 7, 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nCha ... (5732 characters truncated) ... lationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t•\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'Subtask', False, False, 'Not Started', 130, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 41, 28, 91824), datetime.datetime(2025, 1, 16, 19, 22, 36, 236691), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,967 DEBUG: Row (135, 'Step 3: Update list.html', 8, 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already in ... (4578 characters truncated) ... sks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'Subtask', False, False, 'Not Started', 130, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 46, 29, 349784), datetime.datetime(2025, 1, 16, 19, 22, 36, 238473), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,967 DEBUG: Row (82, 'Implement Third-Party Authentication', 9, 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitH ... (1227 characters truncated) ... egration (if applicable):\n\t•\tAdd “Login with Google” or “Login with GitHub” buttons.\n\t•\tRedirect to your backend’s OAuth endpoint when clicked.', 'Epic', False, False, 'Not Started', None, 6, 5, 8, datetime.datetime(2025, 1, 7, 12, 15, 54, 291625), datetime.datetime(2025, 1, 16, 19, 22, 36, 239866), None, 62, 'Add OAuth integration for Google Login', 10, 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'User Story', False, False, 'Not Started', 82, 6, None, 8, datetime.datetime(2025, 1, 7, 11, 39, 12, 249531), datetime.datetime(2025, 1, 16, 19, 22, 36, 241200), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:21:40,967 DEBUG: Row (82, 'Implement Third-Party Authentication', 9, 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitH ... (1227 characters truncated) ... egration (if applicable):\n\t•\tAdd “Login with Google” or “Login with GitHub” buttons.\n\t•\tRedirect to your backend’s OAuth endpoint when clicked.', 'Epic', False, False, 'Not Started', None, 6, 5, 8, datetime.datetime(2025, 1, 7, 12, 15, 54, 291625), datetime.datetime(2025, 1, 16, 19, 22, 36, 239866), None, 63, 'Add OAuth integration for GitHub Login', 14, 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'User Story', False, False, 'Not Started', 82, 6, None, 8, datetime.datetime(2025, 1, 7, 11, 39, 12, 249531), datetime.datetime(2025, 1, 16, 19, 22, 36, 246358), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:21:40,967 DEBUG: Row (62, 'Add OAuth integration for Google Login', 10, 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'User Story', False, False, 'Not Started', 82, 6, None, 8, datetime.datetime(2025, 1, 7, 11, 39, 12, 249531), datetime.datetime(2025, 1, 16, 19, 22, 36, 241200), None, 67, 'Test Google OAuth flow', 12, 'Verify the OAuth flow using test accounts and check the token exchange.', 'Subtask', False, False, 'Not Started', 62, 6, None, 5, datetime.datetime(2025, 1, 7, 12, 3, 52, 62783), datetime.datetime(2025, 1, 16, 19, 22, 36, 243780), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,967 DEBUG: Row (62, 'Add OAuth integration for Google Login', 10, 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'User Story', False, False, 'Not Started', 82, 6, None, 8, datetime.datetime(2025, 1, 7, 11, 39, 12, 249531), datetime.datetime(2025, 1, 16, 19, 22, 36, 241200), None, 65, 'Implement backend endpoints for Google OAuth', 13, 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'Subtask', False, False, 'Not Started', 62, 6, None, 5, datetime.datetime(2025, 1, 7, 11, 58, 39, 269319), datetime.datetime(2025, 1, 16, 19, 22, 36, 244932), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,968 DEBUG: Row (62, 'Add OAuth integration for Google Login', 10, 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'User Story', False, False, 'Not Started', 82, 6, None, 8, datetime.datetime(2025, 1, 7, 11, 39, 12, 249531), datetime.datetime(2025, 1, 16, 19, 22, 36, 241200), None, 64, 'Setup project credentials for Google API', 11, 'Generate client ID and secret from Google API Console for your application.', 'Subtask', False, False, 'Not Started', 62, 6, None, 3, datetime.datetime(2025, 1, 7, 11, 58, 39, 269319), datetime.datetime(2025, 1, 16, 19, 22, 36, 242497), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,968 DEBUG: Row (64, 'Setup project credentials for Google API', 11, 'Generate client ID and secret from Google API Console for your application.', 'Subtask', False, False, 'Not Started', 62, 6, None, 3, datetime.datetime(2025, 1, 7, 11, 58, 39, 269319), datetime.datetime(2025, 1, 16, 19, 22, 36, 242497), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,968 DEBUG: Row (67, 'Test Google OAuth flow', 12, 'Verify the OAuth flow using test accounts and check the token exchange.', 'Subtask', False, False, 'Not Started', 62, 6, None, 5, datetime.datetime(2025, 1, 7, 12, 3, 52, 62783), datetime.datetime(2025, 1, 16, 19, 22, 36, 243780), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,968 DEBUG: Row (65, 'Implement backend endpoints for Google OAuth', 13, 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'Subtask', False, False, 'Not Started', 62, 6, None, 5, datetime.datetime(2025, 1, 7, 11, 58, 39, 269319), datetime.datetime(2025, 1, 16, 19, 22, 36, 244932), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,968 DEBUG: Row (63, 'Add OAuth integration for GitHub Login', 14, 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'User Story', False, False, 'Not Started', 82, 6, None, 8, datetime.datetime(2025, 1, 7, 11, 39, 12, 249531), datetime.datetime(2025, 1, 16, 19, 22, 36, 246358), None, 69, 'Handle callback from GitHub', 16, 'Implement the callback endpoint to process the authorization code from GitHub.', 'Subtask', False, False, 'Not Started', 63, 6, None, 5, datetime.datetime(2025, 1, 7, 12, 3, 52, 62783), datetime.datetime(2025, 1, 16, 19, 22, 36, 248912), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,968 DEBUG: Row (63, 'Add OAuth integration for GitHub Login', 14, 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'User Story', False, False, 'Not Started', 82, 6, None, 8, datetime.datetime(2025, 1, 7, 11, 39, 12, 249531), datetime.datetime(2025, 1, 16, 19, 22, 36, 246358), None, 68, 'Register application in GitHub Developer Console', 15, 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'Subtask', False, False, 'Not Started', 63, 6, None, 3, datetime.datetime(2025, 1, 7, 12, 3, 52, 62783), datetime.datetime(2025, 1, 16, 19, 22, 36, 247746), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,969 DEBUG: Row (68, 'Register application in GitHub Developer Console', 15, 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'Subtask', False, False, 'Not Started', 63, 6, None, 3, datetime.datetime(2025, 1, 7, 12, 3, 52, 62783), datetime.datetime(2025, 1, 16, 19, 22, 36, 247746), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,969 DEBUG: Row (69, 'Handle callback from GitHub', 16, 'Implement the callback endpoint to process the authorization code from GitHub.', 'Subtask', False, False, 'Not Started', 63, 6, None, 5, datetime.datetime(2025, 1, 7, 12, 3, 52, 62783), datetime.datetime(2025, 1, 16, 19, 22, 36, 248912), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,969 DEBUG: Row (97, '1. Build Basic User Authentication System', 17, 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'Epic', False, False, 'Not Started', None, 6, 5, 18, datetime.datetime(2025, 1, 7, 19, 53, 50, 85064), datetime.datetime(2025, 1, 16, 19, 22, 36, 250169), None, 102, 'Logout', 31, 'As a user, I want to log out so that I can end my session securely.', 'User Story', False, False, 'Not Started', 97, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 37, 47, 717804), datetime.datetime(2025, 1, 16, 19, 22, 36, 272605), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:21:40,970 DEBUG: Row (97, '1. Build Basic User Authentication System', 17, 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'Epic', False, False, 'Not Started', None, 6, 5, 18, datetime.datetime(2025, 1, 7, 19, 53, 50, 85064), datetime.datetime(2025, 1, 16, 19, 22, 36, 250169), None, 101, '1.2 User Login', 24, 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n•\tUsers can log in with a valid email and password.\n•\tErrors are displayed for invalid credentials.\n•\tSuccessful login stores a session or JWT token.', 'User Story', False, False, 'Not Started', 97, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 37, 47, 717804), datetime.datetime(2025, 1, 16, 19, 25, 53, 687936), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:21:40,970 DEBUG: Row (97, '1. Build Basic User Authentication System', 17, 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'Epic', False, False, 'Not Started', None, 6, 5, 18, datetime.datetime(2025, 1, 7, 19, 53, 50, 85064), datetime.datetime(2025, 1, 16, 19, 22, 36, 250169), None, 100, '1.1 User Registration', 18, 'As a user, I want to register with a username, email, and password so that I can create an account and access the system.\n\n**Acceptance Criteria:** ... (148 characters truncated) ... licate accounts.\n•\tPasswords must meet complexity requirements and be securely stored.\n•\tSuccessful registration redirects users to a login page.', 'User Story', False, False, 'Not Started', 97, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 59, 9, 44667), datetime.datetime(2025, 1, 16, 19, 22, 36, 251812), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:21:40,970 DEBUG: Row (97, '1. Build Basic User Authentication System', 17, 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'Epic', False, False, 'Not Started', None, 6, 5, 18, datetime.datetime(2025, 1, 7, 19, 53, 50, 85064), datetime.datetime(2025, 1, 16, 19, 22, 36, 250169), None, 106, 'Password Reset', 28, 'As a user, I want to reset my password securely using email.', 'User Story', False, False, 'Not Started', 97, 6, None, 8, datetime.datetime(2025, 1, 7, 20, 37, 47, 717804), datetime.datetime(2025, 1, 16, 19, 22, 36, 267247), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:21:40,970 DEBUG: Row (100, '1.1 User Registration', 18, 'As a user, I want to register with a username, email, and password so that I can create an account and access the system.\n\n**Acceptance Criteria:** ... (148 characters truncated) ... licate accounts.\n•\tPasswords must meet complexity requirements and be securely stored.\n•\tSuccessful registration redirects users to a login page.', 'User Story', False, False, 'Not Started', 97, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 59, 9, 44667), datetime.datetime(2025, 1, 16, 19, 22, 36, 251812), None, 110, '1.1.4 Unit Tests for Registration', 23, 'Write unit tests for:\n\n•\tValid registration.\n•\tDuplicate username/email scenarios.\n•\tInvalid input handling.\nff', 'Subtask', False, False, 'Not Started', 100, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 40, 16, 86402), datetime.datetime(2025, 1, 16, 19, 25, 53, 686902), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,970 DEBUG: Row (100, '1.1 User Registration', 18, 'As a user, I want to register with a username, email, and password so that I can create an account and access the system.\n\n**Acceptance Criteria:** ... (148 characters truncated) ... licate accounts.\n•\tPasswords must meet complexity requirements and be securely stored.\n•\tSuccessful registration redirects users to a login page.', 'User Story', False, False, 'Not Started', 97, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 59, 9, 44667), datetime.datetime(2025, 1, 16, 19, 22, 36, 251812), None, 107, '1.1.1 Database Changes for User Registration', 19, '1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.\n   CREATE TABLE public.users (\n       id SERIAL PR ... (95 characters truncated) ... NULL,\n       password_hash VARCHAR(255) NOT NULL,\n       created_at TIMESTAMP DEFAULT NOW(),\n       updated_at TIMESTAMP DEFAULT NOW()\n);\n\n\n\n', 'Subtask', False, False, 'Not Started', 100, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 40, 16, 86402), datetime.datetime(2025, 1, 16, 19, 25, 30, 747962), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,971 DEBUG: Row (100, '1.1 User Registration', 18, 'As a user, I want to register with a username, email, and password so that I can create an account and access the system.\n\n**Acceptance Criteria:** ... (148 characters truncated) ... licate accounts.\n•\tPasswords must meet complexity requirements and be securely stored.\n•\tSuccessful registration redirects users to a login page.', 'User Story', False, False, 'Not Started', 97, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 59, 9, 44667), datetime.datetime(2025, 1, 16, 19, 22, 36, 251812), None, 109, '1.1.3 Create Frontend Registration Page', 22, 'Develop a frontend form to collect user registration details.\n•\tAdd a form for username, email, and password inputs.\n•\tUse client-side validation (e.g., email format).\n•\tSend a POST request to /api/register.\n\n', 'Subtask', False, False, 'Not Started', 100, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 40, 16, 86402), datetime.datetime(2025, 1, 16, 19, 25, 53, 684988), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,971 DEBUG: Row (100, '1.1 User Registration', 18, 'As a user, I want to register with a username, email, and password so that I can create an account and access the system.\n\n**Acceptance Criteria:** ... (148 characters truncated) ... licate accounts.\n•\tPasswords must meet complexity requirements and be securely stored.\n•\tSuccessful registration redirects users to a login page.', 'User Story', False, False, 'Not Started', 97, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 59, 9, 44667), datetime.datetime(2025, 1, 16, 19, 22, 36, 251812), None, 108, '1.1.2 Backend API for Registration', 20, '•\tCreate an endpoint POST /api/register:\n•\tValidate input fields.\n•\tHash the password using bcrypt or argon2.\n•\tInsert the user into the users table.\n•\tReturn success/failure responses.\ndddhfff\n', 'Subtask', False, False, 'Not Started', 100, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 40, 16, 86402), datetime.datetime(2025, 1, 16, 19, 25, 33, 67643), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,971 DEBUG: Row (107, '1.1.1 Database Changes for User Registration', 19, '1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.\n   CREATE TABLE public.users (\n       id SERIAL PR ... (95 characters truncated) ... NULL,\n       password_hash VARCHAR(255) NOT NULL,\n       created_at TIMESTAMP DEFAULT NOW(),\n       updated_at TIMESTAMP DEFAULT NOW()\n);\n\n\n\n', 'Subtask', False, False, 'Not Started', 100, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 40, 16, 86402), datetime.datetime(2025, 1, 16, 19, 25, 30, 747962), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,971 DEBUG: Row (108, '1.1.2 Backend API for Registration', 20, '•\tCreate an endpoint POST /api/register:\n•\tValidate input fields.\n•\tHash the password using bcrypt or argon2.\n•\tInsert the user into the users table.\n•\tReturn success/failure responses.\ndddhfff\n', 'Subtask', False, False, 'Not Started', 100, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 40, 16, 86402), datetime.datetime(2025, 1, 16, 19, 25, 33, 67643), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,971 DEBUG: Row (112, '1.2.2 Frontend Login Page', 21, 'Develop a frontend form for user login with email and password inputs.', 'Subtask', False, False, 'Not Started', 101, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 40, 32, 986548), datetime.datetime(2025, 1, 16, 19, 25, 53, 683644), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,971 DEBUG: Row (109, '1.1.3 Create Frontend Registration Page', 22, 'Develop a frontend form to collect user registration details.\n•\tAdd a form for username, email, and password inputs.\n•\tUse client-side validation (e.g., email format).\n•\tSend a POST request to /api/register.\n\n', 'Subtask', False, False, 'Not Started', 100, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 40, 16, 86402), datetime.datetime(2025, 1, 16, 19, 25, 53, 684988), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,971 DEBUG: Row (110, '1.1.4 Unit Tests for Registration', 23, 'Write unit tests for:\n\n•\tValid registration.\n•\tDuplicate username/email scenarios.\n•\tInvalid input handling.\nff', 'Subtask', False, False, 'Not Started', 100, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 40, 16, 86402), datetime.datetime(2025, 1, 16, 19, 25, 53, 686902), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,971 DEBUG: Row (101, '1.2 User Login', 24, 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n•\tUsers can log in with a valid email and password.\n•\tErrors are displayed for invalid credentials.\n•\tSuccessful login stores a session or JWT token.', 'User Story', False, False, 'Not Started', 97, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 37, 47, 717804), datetime.datetime(2025, 1, 16, 19, 25, 53, 687936), None, 111, '1.2.1 Backend API for Login', 25, 'Create POST /api/login endpoint to handle user login.\njjsjj', 'Subtask', False, False, 'Not Started', 101, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 40, 32, 986548), datetime.datetime(2025, 1, 16, 19, 25, 53, 689096), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,972 DEBUG: Row (101, '1.2 User Login', 24, 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n•\tUsers can log in with a valid email and password.\n•\tErrors are displayed for invalid credentials.\n•\tSuccessful login stores a session or JWT token.', 'User Story', False, False, 'Not Started', 97, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 37, 47, 717804), datetime.datetime(2025, 1, 16, 19, 25, 53, 687936), None, 112, '1.2.2 Frontend Login Page', 21, 'Develop a frontend form for user login with email and password inputs.', 'Subtask', False, False, 'Not Started', 101, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 40, 32, 986548), datetime.datetime(2025, 1, 16, 19, 25, 53, 683644), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,972 DEBUG: Row (101, '1.2 User Login', 24, 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n•\tUsers can log in with a valid email and password.\n•\tErrors are displayed for invalid credentials.\n•\tSuccessful login stores a session or JWT token.', 'User Story', False, False, 'Not Started', 97, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 37, 47, 717804), datetime.datetime(2025, 1, 16, 19, 25, 53, 687936), None, 114, '1.2.4 Unit Tests for Login', 27, 'Write tests for successful and failed login attempts.', 'Subtask', False, False, 'Not Started', 101, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 40, 32, 986548), datetime.datetime(2025, 1, 16, 19, 22, 36, 265866), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,972 DEBUG: Row (101, '1.2 User Login', 24, 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n•\tUsers can log in with a valid email and password.\n•\tErrors are displayed for invalid credentials.\n•\tSuccessful login stores a session or JWT token.', 'User Story', False, False, 'Not Started', 97, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 37, 47, 717804), datetime.datetime(2025, 1, 16, 19, 25, 53, 687936), None, 113, '1.2.3 Session Management', 26, 'Implement secure session handling using cookies or JWT.', 'Subtask', False, False, 'Not Started', 101, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 40, 32, 986548), datetime.datetime(2025, 1, 16, 19, 25, 20, 968680), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,972 DEBUG: Row (111, '1.2.1 Backend API for Login', 25, 'Create POST /api/login endpoint to handle user login.\njjsjj', 'Subtask', False, False, 'Not Started', 101, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 40, 32, 986548), datetime.datetime(2025, 1, 16, 19, 25, 53, 689096), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,972 DEBUG: Row (113, '1.2.3 Session Management', 26, 'Implement secure session handling using cookies or JWT.', 'Subtask', False, False, 'Not Started', 101, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 40, 32, 986548), datetime.datetime(2025, 1, 16, 19, 25, 20, 968680), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,972 DEBUG: Row (114, '1.2.4 Unit Tests for Login', 27, 'Write tests for successful and failed login attempts.', 'Subtask', False, False, 'Not Started', 101, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 40, 32, 986548), datetime.datetime(2025, 1, 16, 19, 22, 36, 265866), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,972 DEBUG: Row (106, 'Password Reset', 28, 'As a user, I want to reset my password securely using email.', 'User Story', False, False, 'Not Started', 97, 6, None, 8, datetime.datetime(2025, 1, 7, 20, 37, 47, 717804), datetime.datetime(2025, 1, 16, 19, 22, 36, 267247), None, 129, 'Testing Password Reset', 30, 'Write tests for email delivery, token validation, and password updates.', 'Subtask', False, False, 'Not Started', 106, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 41, 36, 413402), datetime.datetime(2025, 1, 16, 19, 22, 36, 270849), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,972 DEBUG: Row (106, 'Password Reset', 28, 'As a user, I want to reset my password securely using email.', 'User Story', False, False, 'Not Started', 97, 6, None, 8, datetime.datetime(2025, 1, 7, 20, 37, 47, 717804), datetime.datetime(2025, 1, 16, 19, 22, 36, 267247), None, 128, 'Frontend Password Reset Page', 29, 'Develop a page for users to enter a new password using a valid token.', 'Subtask', False, False, 'Not Started', 106, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 41, 36, 413402), datetime.datetime(2025, 1, 16, 19, 22, 36, 269158), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,972 DEBUG: Row (128, 'Frontend Password Reset Page', 29, 'Develop a page for users to enter a new password using a valid token.', 'Subtask', False, False, 'Not Started', 106, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 41, 36, 413402), datetime.datetime(2025, 1, 16, 19, 22, 36, 269158), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,972 DEBUG: Row (129, 'Testing Password Reset', 30, 'Write tests for email delivery, token validation, and password updates.', 'Subtask', False, False, 'Not Started', 106, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 41, 36, 413402), datetime.datetime(2025, 1, 16, 19, 22, 36, 270849), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,973 DEBUG: Row (102, 'Logout', 31, 'As a user, I want to log out so that I can end my session securely.', 'User Story', False, False, 'Not Started', 97, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 37, 47, 717804), datetime.datetime(2025, 1, 16, 19, 22, 36, 272605), None, 117, 'Tests for Logout', 32, 'Verify session invalidation and redirection to the login page.', 'Subtask', False, False, 'Not Started', 102, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 40, 45, 815252), datetime.datetime(2025, 1, 16, 19, 22, 36, 274575), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,973 DEBUG: Row (102, 'Logout', 31, 'As a user, I want to log out so that I can end my session securely.', 'User Story', False, False, 'Not Started', 97, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 37, 47, 717804), datetime.datetime(2025, 1, 16, 19, 22, 36, 272605), None, 115, 'Backend API for Logout', 34, 'Create POST /api/logout endpoint to invalidate user sessions.', 'Subtask', False, False, 'Not Started', 102, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 40, 45, 815252), datetime.datetime(2025, 1, 16, 19, 22, 36, 277547), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,973 DEBUG: Row (117, 'Tests for Logout', 32, 'Verify session invalidation and redirection to the login page.', 'Subtask', False, False, 'Not Started', 102, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 40, 45, 815252), datetime.datetime(2025, 1, 16, 19, 22, 36, 274575), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,973 DEBUG: Row (116, 'Frontend Logout Button', 33, 'Add a logout button to the UI and handle session clearing.', 'Subtask', False, False, 'Not Started', None, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 40, 45, 815252), datetime.datetime(2025, 2, 9, 12, 31, 17, 939784), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,973 DEBUG: Row (115, 'Backend API for Logout', 34, 'Create POST /api/logout endpoint to invalidate user sessions.', 'Subtask', False, False, 'Not Started', 102, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 40, 45, 815252), datetime.datetime(2025, 1, 16, 19, 22, 36, 277547), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,973 DEBUG: Row (61, 'Parent task assignment', 35, '', 'Epic', False, False, 'Not Started', None, 6, 5, 0, datetime.datetime(2025, 1, 4, 22, 31, 45, 205815), datetime.datetime(2025, 1, 16, 19, 22, 36, 279012), None, 49, 'Integrate Dropdown with Task Form', 47, 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'User Story', False, False, 'Not Started', 61, 6, None, 5, datetime.datetime(2025, 1, 4, 1, 47, 25, 942574), datetime.datetime(2025, 1, 16, 19, 22, 36, 296814), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:21:40,973 DEBUG: Row (61, 'Parent task assignment', 35, '', 'Epic', False, False, 'Not Started', None, 6, 5, 0, datetime.datetime(2025, 1, 4, 22, 31, 45, 205815), datetime.datetime(2025, 1, 16, 19, 22, 36, 279012), None, 45, 'Display Default Value in Dropdown', 36, 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'User Story', False, False, 'Not Started', 61, 6, None, 3, datetime.datetime(2025, 1, 4, 1, 47, 25, 942574), datetime.datetime(2025, 1, 16, 19, 22, 36, 280493), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:21:40,973 DEBUG: Row (61, 'Parent task assignment', 35, '', 'Epic', False, False, 'Not Started', None, 6, 5, 0, datetime.datetime(2025, 1, 4, 22, 31, 45, 205815), datetime.datetime(2025, 1, 16, 19, 22, 36, 279012), None, 46, 'Search for Parent Tasks', 39, 'Allow users to search for tasks dynamically in the dropdown by typing.', 'User Story', False, False, 'Not Started', 61, 6, None, 8, datetime.datetime(2025, 1, 4, 1, 47, 25, 942574), datetime.datetime(2025, 1, 16, 19, 22, 36, 284882), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:21:40,973 DEBUG: Row (61, 'Parent task assignment', 35, '', 'Epic', False, False, 'Not Started', None, 6, 5, 0, datetime.datetime(2025, 1, 4, 22, 31, 45, 205815), datetime.datetime(2025, 1, 16, 19, 22, 36, 279012), None, 48, 'Select and Deselect Parent Tasks', 44, 'Allow users to select a parent task or deselect by choosing "None."', 'User Story', False, False, 'Not Started', 61, 6, None, 5, datetime.datetime(2025, 1, 4, 1, 47, 25, 942574), datetime.datetime(2025, 1, 16, 19, 22, 36, 292389), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:21:40,973 DEBUG: Row (61, 'Parent task assignment', 35, '', 'Epic', False, False, 'Not Started', None, 6, 5, 0, datetime.datetime(2025, 1, 4, 22, 31, 45, 205815), datetime.datetime(2025, 1, 16, 19, 22, 36, 279012), None, 47, 'Handle Large Datasets Efficiently', 41, 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'User Story', False, False, 'Not Started', 61, 6, None, 13, datetime.datetime(2025, 1, 4, 1, 47, 25, 942574), datetime.datetime(2025, 1, 16, 19, 22, 36, 287641), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:21:40,973 DEBUG: Row (45, 'Display Default Value in Dropdown', 36, 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'User Story', False, False, 'Not Started', 61, 6, None, 3, datetime.datetime(2025, 1, 4, 1, 47, 25, 942574), datetime.datetime(2025, 1, 16, 19, 22, 36, 280493), None, 51, 'Set Default Value', 38, 'Set the default value in the dropdown based on the retrieved data.', 'Subtask', False, False, 'Not Started', 45, 6, None, 1, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 1, 16, 19, 22, 36, 283309), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,973 DEBUG: Row (50, 'Retrieve Current Parent Task', 37, 'Retrieve the current parent task’s ID and name from the backend.', 'Subtask', False, False, 'In Progress', None, 6, None, 2, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 2, 10, 7, 41, 43, 569807), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,973 DEBUG: Row (51, 'Set Default Value', 38, 'Set the default value in the dropdown based on the retrieved data.', 'Subtask', False, False, 'Not Started', 45, 6, None, 1, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 1, 16, 19, 22, 36, 283309), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,973 DEBUG: Row (46, 'Search for Parent Tasks', 39, 'Allow users to search for tasks dynamically in the dropdown by typing.', 'User Story', False, False, 'Not Started', 61, 6, None, 8, datetime.datetime(2025, 1, 4, 1, 47, 25, 942574), datetime.datetime(2025, 1, 16, 19, 22, 36, 284882), None, 54, 'Test Partial Matching', 40, 'Ensure the search results update in real-time as the user types.', 'Subtask', False, False, 'Not Started', 46, 6, None, 2, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 1, 16, 19, 22, 36, 286248), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,973 DEBUG: Row (54, 'Test Partial Matching', 40, 'Ensure the search results update in real-time as the user types.', 'Subtask', False, False, 'Not Started', 46, 6, None, 2, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 1, 16, 19, 22, 36, 286248), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,973 DEBUG: Row (47, 'Handle Large Datasets Efficiently', 41, 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'User Story', False, False, 'Not Started', 61, 6, None, 13, datetime.datetime(2025, 1, 4, 1, 47, 25, 942574), datetime.datetime(2025, 1, 16, 19, 22, 36, 287641), None, 56, 'Paginate API Responses', 42, 'Implement server-side filtering and pagination for large datasets.', 'Subtask', False, False, 'Not Started', 47, 6, None, 8, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 1, 16, 19, 22, 36, 289338), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,974 DEBUG: Row (47, 'Handle Large Datasets Efficiently', 41, 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'User Story', False, False, 'Not Started', 61, 6, None, 13, datetime.datetime(2025, 1, 4, 1, 47, 25, 942574), datetime.datetime(2025, 1, 16, 19, 22, 36, 287641), None, 55, 'Enable Lazy Loading', 43, 'Enable lazy loading or virtualization in Virtual Select.', 'Subtask', False, False, 'Not Started', 47, 6, None, 8, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 1, 16, 19, 22, 36, 290910), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,974 DEBUG: Row (56, 'Paginate API Responses', 42, 'Implement server-side filtering and pagination for large datasets.', 'Subtask', False, False, 'Not Started', 47, 6, None, 8, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 1, 16, 19, 22, 36, 289338), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,974 DEBUG: Row (55, 'Enable Lazy Loading', 43, 'Enable lazy loading or virtualization in Virtual Select.', 'Subtask', False, False, 'Not Started', 47, 6, None, 8, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 1, 16, 19, 22, 36, 290910), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,974 DEBUG: Row (48, 'Select and Deselect Parent Tasks', 44, 'Allow users to select a parent task or deselect by choosing "None."', 'User Story', False, False, 'Not Started', 61, 6, None, 5, datetime.datetime(2025, 1, 4, 1, 47, 25, 942574), datetime.datetime(2025, 1, 16, 19, 22, 36, 292389), None, 57, 'Ensure None Option Availability', 45, 'Add “None” as a selectable option and ensure it stays at the top of the list.', 'Subtask', False, False, 'Not Started', 48, 6, None, 2, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 1, 16, 19, 22, 36, 294045), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,974 DEBUG: Row (48, 'Select and Deselect Parent Tasks', 44, 'Allow users to select a parent task or deselect by choosing "None."', 'User Story', False, False, 'Not Started', 61, 6, None, 5, datetime.datetime(2025, 1, 4, 1, 47, 25, 942574), datetime.datetime(2025, 1, 16, 19, 22, 36, 292389), None, 58, 'Handle Selection Events', 46, 'Implement event listeners to update the form’s state when the selection changes.', 'Subtask', False, False, 'Not Started', 48, 6, None, 3, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 1, 16, 19, 22, 36, 295385), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,974 DEBUG: Row (57, 'Ensure None Option Availability', 45, 'Add “None” as a selectable option and ensure it stays at the top of the list.', 'Subtask', False, False, 'Not Started', 48, 6, None, 2, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 1, 16, 19, 22, 36, 294045), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,974 DEBUG: Row (58, 'Handle Selection Events', 46, 'Implement event listeners to update the form’s state when the selection changes.', 'Subtask', False, False, 'Not Started', 48, 6, None, 3, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 1, 16, 19, 22, 36, 295385), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,974 DEBUG: Row (49, 'Integrate Dropdown with Task Form', 47, 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'User Story', False, False, 'Not Started', 61, 6, None, 5, datetime.datetime(2025, 1, 4, 1, 47, 25, 942574), datetime.datetime(2025, 1, 16, 19, 22, 36, 296814), None, 60, 'Test Form Submission', 49, 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'Subtask', False, False, 'Not Started', 49, 6, None, 3, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 1, 16, 19, 22, 36, 299971), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,974 DEBUG: Row (59, 'Bind Dropdown to Form Field', 48, 'Bind the dropdown to the form’s parent task field.', 'Subtask', False, False, 'Not Started', None, 6, None, 2, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 2, 9, 23, 48, 8, 770907), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,974 DEBUG: Row (60, 'Test Form Submission', 49, 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'Subtask', False, False, 'Not Started', 49, 6, None, 3, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 1, 16, 19, 22, 36, 299971), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,974 DEBUG: Row (41, 'Implement Searchable Dropdown', 50, 'As a user, I want a searchable dropdown for parent task assignment.', 'User Story', False, False, 'Completed', None, 6, None, 8, datetime.datetime(2025, 1, 3, 9, 14, 28, 285904), datetime.datetime(2025, 2, 10, 7, 41, 33, 252945), None, 52, 'Add Search Box to Dropdown', 51, 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'Subtask', False, False, 'Completed', 41, 6, None, 3, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 2, 10, 7, 40, 33, 847642), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,974 DEBUG: Row (52, 'Add Search Box to Dropdown', 51, 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'Subtask', False, False, 'Completed', 41, 6, None, 3, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 2, 10, 7, 40, 33, 847642), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,974 DEBUG: Row (53, 'Implement AJAX Search', 52, 'Implement AJAX-based search to fetch tasks dynamically from the backend.', 'Subtask', False, False, 'Not Started', None, 6, None, 5, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 2, 9, 7, 55, 0, 680183), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,974 DEBUG: Row (42, 'Choose Dropdown Library', 53, 'Research and decide on the dropdown library to use.', 'Subtask', False, False, 'Completed', None, 6, None, 3, datetime.datetime(2025, 1, 3, 9, 16, 2, 607548), datetime.datetime(2025, 2, 10, 7, 41, 18, 814716), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,974 DEBUG: Row (43, 'Integrate Dropdown Library', 54, 'Integrate the chosen dropdown library into the project.', 'Subtask', False, False, 'Completed', None, 6, None, 5, datetime.datetime(2025, 1, 3, 9, 16, 2, 607548), datetime.datetime(2025, 2, 10, 7, 41, 23, 756572), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,974 DEBUG: Row (84, 'Enhance Task Contributor Management', 55, 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI ... (335 characters truncated) ... onalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'Epic', False, False, 'Not Started', None, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 30, 21, 149869), datetime.datetime(2025, 1, 16, 19, 22, 36, 311560), None, 85, 'Assign multiple contributors to a task', 56, 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'User Story', False, False, 'Not Started', 84, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 32, 39, 466022), datetime.datetime(2025, 1, 16, 19, 22, 36, 313789), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:21:40,975 DEBUG: Row (84, 'Enhance Task Contributor Management', 55, 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI ... (335 characters truncated) ... onalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'Epic', False, False, 'Not Started', None, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 30, 21, 149869), datetime.datetime(2025, 1, 16, 19, 22, 36, 311560), None, 86, 'Allow designation of task owner', 60, 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'User Story', False, False, 'Not Started', 84, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 33, 29, 330562), datetime.datetime(2025, 1, 16, 19, 22, 36, 320840), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:21:40,975 DEBUG: Row (84, 'Enhance Task Contributor Management', 55, 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI ... (335 characters truncated) ... onalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'Epic', False, False, 'Not Started', None, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 30, 21, 149869), datetime.datetime(2025, 1, 16, 19, 22, 36, 311560), None, 87, 'Create and customize contributor roles', 64, 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'User Story', False, False, 'Not Started', 84, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:21:40,975 DEBUG: Row (85, 'Assign multiple contributors to a task', 56, 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'User Story', False, False, 'Not Started', 84, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 32, 39, 466022), datetime.datetime(2025, 1, 16, 19, 22, 36, 313789), None, 88, 'Update database schema for multiple contributors', 58, 'Modify the task table to support many-to-many relationships for contributors.', 'Subtask', False, False, 'Not Started', 85, 6, None, 3, datetime.datetime(2025, 1, 7, 19, 39, 2, 14761), datetime.datetime(2025, 1, 16, 19, 22, 36, 317500), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,975 DEBUG: Row (85, 'Assign multiple contributors to a task', 56, 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'User Story', False, False, 'Not Started', 84, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 32, 39, 466022), datetime.datetime(2025, 1, 16, 19, 22, 36, 313789), None, 89, 'Develop backend API for adding contributors to a task', 59, 'Create endpoints to add, update, and remove contributors for a task.', 'Subtask', False, False, 'Not Started', 85, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 39, 2, 14761), datetime.datetime(2025, 1, 16, 19, 22, 36, 319281), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,975 DEBUG: Row (85, 'Assign multiple contributors to a task', 56, 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'User Story', False, False, 'Not Started', 84, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 32, 39, 466022), datetime.datetime(2025, 1, 16, 19, 22, 36, 313789), None, 90, 'Update frontend to display and manage multiple contributors', 57, 'Allow users to view, add, or remove multiple contributors via the UI.', 'Subtask', False, False, 'Not Started', 85, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 39, 2, 14761), datetime.datetime(2025, 1, 16, 19, 22, 36, 315695), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,975 DEBUG: Row (90, 'Update frontend to display and manage multiple contributors', 57, 'Allow users to view, add, or remove multiple contributors via the UI.', 'Subtask', False, False, 'Not Started', 85, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 39, 2, 14761), datetime.datetime(2025, 1, 16, 19, 22, 36, 315695), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,975 DEBUG: Row (88, 'Update database schema for multiple contributors', 58, 'Modify the task table to support many-to-many relationships for contributors.', 'Subtask', False, False, 'Not Started', 85, 6, None, 3, datetime.datetime(2025, 1, 7, 19, 39, 2, 14761), datetime.datetime(2025, 1, 16, 19, 22, 36, 317500), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,975 DEBUG: Row (89, 'Develop backend API for adding contributors to a task', 59, 'Create endpoints to add, update, and remove contributors for a task.', 'Subtask', False, False, 'Not Started', 85, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 39, 2, 14761), datetime.datetime(2025, 1, 16, 19, 22, 36, 319281), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,975 DEBUG: Row (86, 'Allow designation of task owner', 60, 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'User Story', False, False, 'Not Started', 84, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 33, 29, 330562), datetime.datetime(2025, 1, 16, 19, 22, 36, 320840), None, 92, 'Develop backend API for assigning task owner', 63, 'Create endpoints to assign or update the owner of a task.', 'Subtask', False, False, 'Not Started', 86, 6, 5, 5, datetime.datetime(2025, 1, 7, 19, 39, 17, 531925), datetime.datetime(2025, 2, 11, 9, 19, 44, 27744), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,975 DEBUG: Row (86, 'Allow designation of task owner', 60, 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'User Story', False, False, 'Not Started', 84, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 33, 29, 330562), datetime.datetime(2025, 1, 16, 19, 22, 36, 320840), None, 91, 'Update database schema for task ownership', 62, 'Add a column or relationship to assign a single owner per task.', 'Subtask', False, False, 'Not Started', 86, 6, None, 3, datetime.datetime(2025, 1, 7, 19, 39, 17, 531925), datetime.datetime(2025, 1, 16, 19, 22, 36, 324051), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,975 DEBUG: Row (86, 'Allow designation of task owner', 60, 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'User Story', False, False, 'Not Started', 84, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 33, 29, 330562), datetime.datetime(2025, 1, 16, 19, 22, 36, 320840), None, 93, 'Update frontend to manage task ownership', 61, 'Allow users to assign or update the task owner via the UI.', 'Subtask', False, False, 'Not Started', 86, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 39, 17, 531925), datetime.datetime(2025, 1, 16, 19, 22, 36, 322637), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,975 DEBUG: Row (93, 'Update frontend to manage task ownership', 61, 'Allow users to assign or update the task owner via the UI.', 'Subtask', False, False, 'Not Started', 86, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 39, 17, 531925), datetime.datetime(2025, 1, 16, 19, 22, 36, 322637), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,975 DEBUG: Row (91, 'Update database schema for task ownership', 62, 'Add a column or relationship to assign a single owner per task.', 'Subtask', False, False, 'Not Started', 86, 6, None, 3, datetime.datetime(2025, 1, 7, 19, 39, 17, 531925), datetime.datetime(2025, 1, 16, 19, 22, 36, 324051), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,975 DEBUG: Row (92, 'Develop backend API for assigning task owner', 63, 'Create endpoints to assign or update the owner of a task.', 'Subtask', False, False, 'Not Started', 86, 6, 5, 5, datetime.datetime(2025, 1, 7, 19, 39, 17, 531925), datetime.datetime(2025, 2, 11, 9, 19, 44, 27744), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:21:40,976 DEBUG: Row (87, 'Create and customize contributor roles', 64, 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'User Story', False, False, 'Not Started', 84, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), None, 96, 'Allow admin users to create and customize contributor roles via frontend', 65, 'Provide UI functionality for admins to manage contributor roles dynamically.', 'Subtask', False, False, 'Not Started', 87, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 1, 16, 19, 22, 36, 328562), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,976 DEBUG: Row (87, 'Create and customize contributor roles', 64, 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'User Story', False, False, 'Not Started', 84, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), None, 95, 'Develop backend API for managing contributor roles', 67, 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'Subtask', False, False, 'Not Started', 87, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 2, 11, 9, 21, 30, 150064), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,976 DEBUG: Row (87, 'Create and customize contributor roles', 64, 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'User Story', False, False, 'Not Started', 84, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), None, 94, 'Add database support for contributor roles', 66, 'Introduce a roles table and link contributors to specific roles for tasks.', 'Subtask', False, False, 'Not Started', 87, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 1, 16, 19, 22, 36, 329887), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,977 DEBUG: Row (96, 'Allow admin users to create and customize contributor roles via frontend', 65, 'Provide UI functionality for admins to manage contributor roles dynamically.', 'Subtask', False, False, 'Not Started', 87, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 1, 16, 19, 22, 36, 328562), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,977 DEBUG: Row (94, 'Add database support for contributor roles', 66, 'Introduce a roles table and link contributors to specific roles for tasks.', 'Subtask', False, False, 'Not Started', 87, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 1, 16, 19, 22, 36, 329887), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:21:40,977 DEBUG: Row (95, 'Develop backend API for managing contributor roles', 67, 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'Subtask', False, False, 'Not Started', 87, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 2, 11, 9, 21, 30, 150064), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:21:40,978 DEBUG: Row (127, 'Backend API for Password Reset', 68, 'Create endpoints to handle password reset requests and token validation.\ndfdf\n\nasdasd', 'Subtask', False, False, 'Not Started', None, 6, 5, 8, datetime.datetime(2025, 1, 7, 20, 41, 36, 413402), datetime.datetime(2025, 2, 10, 23, 59, 50, 734037), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:21:40,978 DEBUG: Row (126, 'Email Configuration for Password Reset', 69, 'Configure email service to send password reset links.', 'Subtask', False, False, 'Not Started', None, 6, 5, 5, datetime.datetime(2025, 1, 7, 20, 41, 36, 413402), datetime.datetime(2025, 1, 16, 19, 22, 36, 334340), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:21:40,978 DEBUG: Row (104, 'Middleware for Role Enforcement', 70, 'As a system, I want to enforce role-based access to specific routes.', 'User Story', False, False, 'Not Started', None, 6, 5, 3, datetime.datetime(2025, 1, 7, 20, 37, 47, 717804), datetime.datetime(2025, 1, 16, 19, 23, 40, 346816), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:21:40,978 DEBUG: Row (122, 'Testing Role Enforcement', 71, 'Write tests to ensure proper access control based on roles.', 'Subtask', False, False, 'Not Started', None, 6, 5, 3, datetime.datetime(2025, 1, 7, 20, 41, 7, 415346), datetime.datetime(2025, 1, 16, 19, 23, 58, 185693), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:21:40,978 DEBUG: Row (121, 'Develop Role Enforcement Middleware', 72, 'Implement middleware to check user roles for access control.', 'Subtask', False, False, 'Not Started', None, 6, 5, 5, datetime.datetime(2025, 1, 7, 20, 41, 7, 415346), datetime.datetime(2025, 1, 16, 19, 23, 58, 187439), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:21:40,978 DEBUG: Row (105, 'Profile Management', 73, 'As a user, I want to update my profile (username, email, password).', 'User Story', False, False, 'Not Started', None, 6, 5, 5, datetime.datetime(2025, 1, 7, 20, 37, 47, 717804), datetime.datetime(2025, 1, 16, 19, 22, 36, 339830), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:21:40,978 DEBUG: Row (123, 'Backend API for Profile Management', 74, 'Create PATCH /api/profile endpoint to update user details.', 'Subtask', False, False, 'Not Started', None, 6, 5, 5, datetime.datetime(2025, 1, 7, 20, 41, 20, 321287), datetime.datetime(2025, 1, 16, 19, 24, 19, 678781), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:21:40,978 DEBUG: Row (125, 'Testing Profile Updates', 75, 'Write tests for profile update functionality.', 'Subtask', False, False, 'Not Started', None, 6, 5, 3, datetime.datetime(2025, 1, 7, 20, 41, 20, 321287), datetime.datetime(2025, 1, 16, 19, 24, 19, 680382), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:21:40,980 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-11 09:21:40,980 INFO: [cached since 575.8s ago] {}
2025-02-11 09:21:40,983 DEBUG: Col ('count_1',)
2025-02-11 09:21:40,983 DEBUG: Row (131,)
2025-02-11 09:21:40,983 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-11 09:21:40,984 INFO: [cached since 575.8s ago] {}
2025-02-11 09:21:40,984 DEBUG: Col ('task_task_type',)
2025-02-11 09:21:40,984 DEBUG: Row ('Epic',)
2025-02-11 09:21:40,985 DEBUG: Row ('Subtask',)
2025-02-11 09:21:40,985 DEBUG: Row ('User Story',)
2025-02-11 09:21:40,985 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-11 09:21:40,985 INFO: [cached since 575.8s ago] {}
2025-02-11 09:21:40,986 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at')
2025-02-11 09:21:40,986 DEBUG: Row (1, 'Project Alpha', datetime.date(2024, 1, 1), datetime.date(2024, 12, 31), None, 0, datetime.datetime(2024, 12, 11, 1, 16, 28, 688881), datetime.datetime(2024, 12, 11, 1, 16, 28, 688881))
2025-02-11 09:21:40,986 DEBUG: Row (2, 'Project Beta', datetime.date(2024, 2, 1), datetime.date(2024, 11, 30), None, 10, datetime.datetime(2024, 12, 11, 1, 16, 28, 688881), datetime.datetime(2024, 12, 11, 1, 16, 28, 688881))
2025-02-11 09:21:40,986 DEBUG: Row (3, 'Project Gamma', datetime.date(2024, 3, 1), datetime.date(2024, 10, 31), None, 20, datetime.datetime(2024, 12, 11, 1, 37, 19, 511738), datetime.datetime(2024, 12, 11, 1, 37, 19, 511738))
2025-02-11 09:21:40,987 DEBUG: Row (4, 'Project Theta', datetime.date(2024, 12, 11), datetime.date(2024, 12, 27), None, 0, datetime.datetime(2024, 12, 12, 19, 26, 42, 642098), datetime.datetime(2024, 12, 12, 19, 26, 42, 642102))
2025-02-11 09:21:40,987 DEBUG: Row (5, 'Project Delta', datetime.date(2025, 1, 4), datetime.date(2025, 3, 8), None, 0, datetime.datetime(2025, 1, 3, 8, 16, 18, 658051), datetime.datetime(2025, 1, 3, 8, 16, 18, 658058))
2025-02-11 09:21:40,987 DEBUG: Row (7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259))
2025-02-11 09:21:40,987 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298))
2025-02-11 09:21:40,988 DEBUG: Tasks passed to template: [{'id': 290, 'name': 'issue: error when changing task type and', 'description': 'issue: error when changing task type and parent task before saving', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:00:03.417734', 'updated_at': '2025-02-10T09:15:09.284969'}, {'id': 298, 'name': 'example user story with parent epic 297', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 297, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:41:01.907455', 'updated_at': '2025-02-10T14:59:04.142570'}, {'id': 275, 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-10T08:38:37.622196'}, {'id': 276, 'name': 'add support for priority', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-10T08:28:47.447612'}, {'id': 264, 'name': 'close all / open all childtasks', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-02-10T08:47:14.915970'}, {'id': 285, 'name': 'add text truncation to project names in task list', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-10T09:45:47.029729'}, {'id': 257, 'name': 'Update Task API Integration', 'description': "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-02-05T22:55:49.566819', 'updated_at': '2025-02-05T22:18:17.807154'}, {'id': 294, 'name': 'issue: task table filters not working', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:19:21.022598', 'updated_at': '2025-02-10T10:19:21.024676'}, {'id': 267, 'name': 'improvements to toggles and nested tasks', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:29:12.464594', 'updated_at': '2025-02-10T08:47:24.581680'}, {'id': 271, 'name': 'make sure dynamically added rows has the exact same styling and includes every element', 'description': 'Missing elements:\n- Open link\n- Default project\n- Project name should be inside a pill\n- Task type should be in a pill\n- Estimations should be 0, not N/A\n- Make sure font size is matching\n- status should have the dropdown inside a pill\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:21:07.108431', 'updated_at': '2025-02-10T08:38:47.340105'}, {'id': 283, 'name': 'fix update title', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:58.769700', 'updated_at': '2025-02-10T08:46:47.282087'}, {'id': 273, 'name': 'disable parent task selector in epics', 'description': 'and add text, Epic can´t have parent tasks', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:45:20.740910', 'updated_at': '2025-02-10T08:39:17.639890'}, {'id': 269, 'name': 'fix styling for sweetalert', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-02-08T15:54:56.717846', 'updated_at': '2025-02-10T08:39:32.172437'}, {'id': 286, 'name': 'add support for labels/tags', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:46:23.985620', 'updated_at': '2025-02-10T09:46:23.987564'}, {'id': 299, 'name': 'example sub task with parent user story 298', 'description': 'Test update 1\nTest update 2\nTest update 3', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 298, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:42:38.905700', 'updated_at': '2025-02-10T23:23:08.671464'}, {'id': 266, 'name': 'highlight the nested tasks', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-02-10T08:47:04.382929'}, {'id': 279, 'name': 'github integration', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:38.238202', 'updated_at': '2025-02-10T08:39:24.168451'}, {'id': 289, 'name': 'issue: parent task is lost when updating task', 'description': '', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:56:25.273984', 'updated_at': '2025-02-10T09:12:47.626993'}, {'id': 272, 'name': 'implement a markdown text editor like notion', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-02-10T08:28:39.669255'}, {'id': 278, 'name': 'search feature for tasks list', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:03.369833', 'updated_at': '2025-02-10T08:39:04.005957'}, {'id': 281, 'name': 'add high level plan', 'description': 'Add some sort of high level plan that aims to keep PM/PO´s on track and not get lost into the details of an overwhelminly large backlog', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:27:01.218606', 'updated_at': '2025-02-10T08:38:54.754760'}, {'id': 287, 'name': 'when moving a parent item to another project make sure the subtasks are moved as well', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:48:31.986870', 'updated_at': '2025-02-10T09:48:31.988859'}, {'id': 293, 'name': 'click on title should copy the task title and id to clipboard', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:16:33.508209', 'updated_at': '2025-02-10T10:16:33.510414'}, {'id': 277, 'name': 'custom task workflow statuses', 'description': 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- Custom status\n-- Custom status\n- In Progress\n-- Custom status\n-- Custom status\n-- Custom status\n- Completed\n-- Custom status\n-- Custom status\n\n2. How can we track a task through different stages and save the sequence of events or stages the task has gone through?\nI´m thinking it could be good for mapping out processes, identifying bottlenecks and provide valuable insights while improving and streamlining workflows.\n- Stages\n- Contacts taken\n- Respons time \n- Time to action after responses\n- Dependencies\n\nNeed to be able to record every action related to this action.\nCommunication integrations\n- Slack\n- Email\n- Text messages\n- Phonecalls\n- Calendar events, meetings\n- Zoom, Google meet, Teams etc..\n\n\n2. Set custom statuses per project (can use tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:16:03.352588', 'updated_at': '2025-02-10T08:38:28.123328'}, {'id': 274, 'name': 'add support for goals, initiatives, okr´s', 'description': 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:46:27.204912', 'updated_at': '2025-02-10T08:28:17.663922'}, {'id': 280, 'name': 'logging (task and project history)', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:37:44.435112', 'updated_at': '2025-02-10T08:28:28.947805'}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:17.786154', 'updated_at': '2025-02-10T09:41:17.787861'}, {'id': 296, 'name': 'issue: contributor is lost after updating task', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:26:43.881947', 'updated_at': '2025-02-10T10:26:43.884004'}, {'id': 288, 'name': 'when trying to move subtask to another project, make sure a warning is displayed', 'description': 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be lost"\nOR\n\nIs it possible, and is it desireable to keep parent child relationships across projects?\nSo that a parent can be in one project but the child tasks can be in different projects?\n\nLets say \nParent epic is \n"Internationalisation"\nChild user stories are\n- Timezones\n- Language\n- Currency\n- Day, Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:54:36.297869', 'updated_at': '2025-02-10T08:54:51.840686'}, {'id': 284, 'name': 'add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-10T09:42:27.720908'}, {'id': 295, 'name': 'issue: drag and drop errors', 'description': '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:22:54.461413', 'updated_at': '2025-02-10T10:22:54.462542'}, {'id': 297, 'name': 'example parent epic', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:39:51.620509', 'updated_at': '2025-02-10T10:39:51.622712'}, {'id': 292, 'name': 'issue: assigning contributor does not work', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:11:12.273779', 'updated_at': '2025-02-10T10:11:12.274809'}, {'id': 265, 'name': 'smooth transition for toggles', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-02-10T08:46:55.831743'}, {'id': 270, 'name': 'the newest task', 'description': '', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:07:34.368035', 'updated_at': '2025-02-10T01:07:34.372478'}, {'id': 291, 'name': 'add dropdowns in task list for changing: project, assigned to, estimate and task type (labels/tags)', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-02-10T10:09:52.997455'}, {'id': 136, 'name': 'Page scroll should stay in position when reloading', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-16T18:21:50.187247', 'updated_at': '2025-01-16T19:22:36.214901'}, {'id': 130, 'name': 'Implement the Map of Task Relationships solution for drag-and-drop', 'description': 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.093022', 'updated_at': '2025-01-16T19:22:36.216705'}, {'id': 133, 'name': 'Step 4: Enhance Logging in models.py', 'description': 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nupdating the Task model in the following ways:\n\n1.\tLog Changes to parent_id:\n\t•\tLog changes to parent_id during updates, including old and new values.\n\t2.\tValidate Hierarchy with Logging:\n\t•\tLog detailed messages when validating hierarchy changes, especially for circular dependency checks.\n\nHere’s how the models.py can be updated:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy import func, cast, CheckConstraint\nfrom sqlalchemy.orm import validates\nfrom app.extensions.db import db\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\nclass Task(db.Model):\n    __tablename__ = "task"\n    \n    # Other columns...\n\n    parent_id = db.Column(\n        db.Integer, db.ForeignKey("task.id"), index=True, nullable=True\n    )\n\n    # Relationships\n    parent = db.relationship(\n        "Task", remote_side=[id], back_populates="children", lazy="select"\n    )\n    children = db.relationship(\n        "Task", back_populates="parent", lazy="select"\n    )\n\n    \n\n\n    @staticmethod\n    def _validate_no_circular_references(new_parent_id):\n        """\n        Validates that there are no circular references in the task hierarchy.\n\n        Args:\n            new_parent_id (int): The new parent ID to validate.\n\n        Raises:\n            ValueError: If a circular reference is detected.\n        """\n        visited = set()\n        current_parent_id = new_parent_id\n\n        logger.info(f"Validating circular references for parent ID: {new_parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error(\n                    f"Circular reference detected: Parent ID {current_parent_id} already visited."\n                )\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            # Fetch the next parent_id in the hierarchy\n            parent = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not parent:\n                break  # Exit if no parent is found\n            current_parent_id = parent.parent_id\n\n        logger.info("No circular reference detected.")\n\n    @validates(\'parent_id\', \'task_type\')\n    def validate_task_changes(self, key, value):\n        """\n        Validates changes to \'parent_id\' and \'task_type\'.\n        Ensures hierarchy validity and checks for circular references.\n        """\n        logger.debug(f"Validating {key} change for Task {self.id}: {value}")\n\n        if key == \'parent_id\':\n            # Log changes to parent_id\n            if self.id and value != self.parent_id:\n                logger.info(f"Task {self.id}: Updating \'parent_id\' from {self.parent_id} to {value}")\n\n            # Prevent a task from being its own parent\n            if value and value == self.id:\n                logger.error("A task cannot be its own parent.")\n                raise ValueError("A task cannot be its own parent.")\n\n            # Check for circular references\n            if value:\n                Task.check_circular_reference(self.id, value)\n\n        elif key == \'task_type\':\n            # Log changes to task_type\n            if self.id and value != self.task_type:\n                logger.info(f"Task {self.id}: Updating \'task_type\' from {self.task_type} to {value}")\n\n        # Check hierarchy rules without triggering further validation\n        if key in [\'parent_id\', \'task_type\']:\n            self._validate_hierarchy_change(key, value)\n\n        logger.info(f"Validation passed for {key}: {value}")\n        return value\n\n    def _validate_hierarchy_change(self, key, value):\n        """\n        Validates hierarchy rules for the task based on `task_type` and `parent_id`.\n        """\n        if key == \'parent_id\' and value:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=value).first()\n            if not parent_task:\n                raise ValueError("Parent task does not exist.")\n\n            logger.debug(f"Validating hierarchy: Task {self.id}, Parent Type: {parent_task.task_type}")\n            if self.task_type == "User Story" and parent_task.task_type != "Epic":\n                raise ValueError("User Stories must have an Epic as a parent.")\n            if self.task_type == "Subtask" and parent_task.task_type != "User Story":\n                raise ValueError("Subtasks must have a User Story as a parent.")\n\n        elif key == \'task_type\' and self.parent_id:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=self.parent_id).first()\n            if parent_task:\n                logger.debug(f"Validating hierarchy: Task Type: {value}, Parent Type: {parent_task.task_type}")\n                if value == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError("User Stories must have an Epic as a parent.")\n                if value == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError("Subtasks must have a User Story as a parent.")\n\n        logger.info(f"Hierarchy validation passed for Task {self.id if self.id else \'New Task\'}.")\n\n    @staticmethod\n    def check_circular_reference(task_id, parent_id):\n        """\n        Iteratively checks for circular references in the task hierarchy.\n        Prevents stack overflow on deep hierarchies.\n        """\n        visited = set()\n        current_parent_id = parent_id\n\n        logger.info(f"Checking circular reference for Task {task_id} with Parent ID: {parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error("Circular reference detected!")\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            if current_parent_id == task_id:\n                logger.error("A task cannot be its own ancestor.")\n                raise ValueError("A task cannot be its own ancestor.")\n\n            # Fetch the next parent_id in the hierarchy\n            task = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not task:\n                break\n            current_parent_id = task.parent_id\n\n        logger.info("Circular reference check passed.")\n```\nKey Enhancements:\n\t1.\tlog_and_validate_parent_id_change:\n\t•\tLogs the old and new parent_id whenever it changes.\n\t•\tEnsures no circular references are introduced.\n\t2.\t_validate_no_circular_references:\n\t•\tValidates the parent_id field to prevent circular dependencies.\n\t•\tLogs progress and raises detailed errors if violations occur.\n\t3.\tlog_and_validate_task_type_change:\n\t•\tLogs changes to task_type with the old and new values.\n\t•\tRevalidates hierarchy rules when task_type changes.\n\t4.\tDetailed Logging for Circular Reference Validation:\n\t•\t_validate_no_circular_references and check_circular_reference methods log every step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t•\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:44:08.340041', 'updated_at': '2025-01-16T19:22:36.219710'}, {'id': 132, 'name': 'Step 1: Update tasks_table_interactions.js', 'description': '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the map for efficient parent-child relationship lookups instead of DOM traversal.\n\n```\nexport const TaskManager = {\n    init: function (csrfToken) {\n        this.csrfToken = csrfToken;\n        this.initTaskParentMap(); // Initialize the map\n        this.initDragAndDrop(); // Initialize drag-and-drop functionality\n    },\n\n    // Initialize a global map for task relationships\n    taskParentMap: new Map(),\n\n    // Build the taskParentMap from the DOM\n    initTaskParentMap: function () {\n        console.log("Initializing Task Parent Map...");\n        const rows = document.querySelectorAll("tr[data-task-id]");\n\n        rows.forEach((row) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = parseInt(row.dataset.parentId, 10) || null;\n            this.taskParentMap.set(taskId, parentId);\n        });\n\n        console.log("Task Parent Map initialized:", Array.from(this.taskParentMap.entries()));\n    },\n\n    // Update the map dynamically after drag-and-drop\n    updateTaskParentMap: function (taskId, parentId) {\n        console.log(`Updating Task Parent Map: Task ${taskId} -> Parent ${parentId}`);\n        this.taskParentMap.set(taskId, parentId);\n    },\n\n    initDragAndDrop: function () {\n        if (window.isDragAndDropInitialized) {\n            console.log("Drag-and-drop is already initialized.");\n            return;\n        }\n\n        console.log("Initializing drag-and-drop within TaskManager...");\n\n        const tableBody = document.querySelector("tbody");\n        if (!tableBody) {\n            console.warn("Task table body not found for drag-and-drop initialization");\n            return;\n        }\n\n        // Initialize Sortable.js for drag-and-drop functionality\n        Sortable.create(tableBody, {\n            handle: ".task-row", // Only draggable via `.task-row` elements\n            animation: 150, // Smooth animation\n            filter: ".task-open-link", // Prevent dragging on task links\n            preventOnFilter: true, // Prevent drag if filtered element is clicked\n            onEnd: async (event) => {\n                try {\n                    console.log("Drag-and-drop operation started...");\n                    const rows = Array.from(event.from.querySelectorAll(".task-row"));\n                    const reorderedTasks = [];\n\n                    rows.forEach((row, index) => {\n                        const taskId = parseInt(row.dataset.taskId, 10);\n                        let parentId = null;\n\n                        // Get the parent ID from the map or fallback to the dataset\n                        if (row.classList.contains("subtask-row")) {\n                            const parentRow = row.previousElementSibling;\n                            parentId = parentRow\n                                ? parseInt(parentRow.dataset.taskId, 10)\n                                : this.taskParentMap.get(taskId) || null;\n                        }\n\n                        // Update the taskParentMap dynamically\n                        this.updateTaskParentMap(taskId, parentId);\n\n                        reorderedTasks.push({\n                            id: taskId,\n                            sort_order: index + 1,\n                            parent_id: parentId,\n                        });\n                    });\n\n                    console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n                    console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n                    // Send the payload to the backend\n                    const response = await fetch("/tasks/reorder_subtasks", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                            "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n                        },\n                        body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n                    });\n\n                    if (!response.ok) {\n                        const errorData = await response.json();\n                        console.error("Error reordering tasks:", errorData);\n                        alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n                        return;\n                    }\n\n                    const data = await response.json();\n                    console.log("Task reordering successful:", data);\n\n                } catch (error) {\n                    console.error("Error during drag-and-drop operation:", error);\n                    alert("An unexpected error occurred while reordering tasks.");\n                }\n            },\n        });\n\n        window.isDragAndDropInitialized = true;\n        console.log("Drag-and-drop initialized successfully.");\n    },\n};\n```\n\nKey Updates:\n\t1.\tPrecomputed Map (taskParentMap):\n\t•\tThe initTaskParentMap function initializes the map by iterating over DOM elements and mapping each task’s ID to its parent ID.\n\t•\tThe updateTaskParentMap dynamically updates the map when tasks are reordered.\n\t2.\tEfficient Parent Lookup:\n\t•\tThe parentId is derived from the precomputed map rather than DOM traversal.\n\t3.\tBackend Payload:\n\t•\tA structured payload (reorderedTasks) is sent to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t•\tCSRF protection is ensured by passing the token to the request headers.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:44:08.338301', 'updated_at': '2025-02-06T21:59:17.417466'}, {'id': 134, 'name': 'Step 2: Update the Backend in routes.py', 'description': 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\nPlan for step 2:\n\t1.\tVerify the payload structure:\n\t•\tEnsure that the payload includes all necessary fields (id, sort_order, parent_id) for each task.\n\t•\tValidate that the parent-child relationships in the precomputed map (taskParentMap) are reflected correctly in the payload.\n\t2.\tSubmit the payload to the backend:\n\t•\tEnhance the fetch request in the onEnd function of initDragAndDrop to log detailed submission data.\n\t•\tConfirm the payload integrity in the browser console before submission.\n\t3.\tUpdate backend logging:\n\t•\tAdd logging to /reorder_subtasks in routes.py to confirm receipt of the correct payload and process parent-child updates.\n\t•\tLog before and after database updates for better debugging.\n\n-----\nUpdated tasks_table_interactions.js\n\nReplace this section:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    let parentId = null;\n```\nWith:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    const parentId = this.taskParentMap.get(taskId) || null;\n```\nThe this.taskParentMap provides a precomputed and dynamic mapping of taskId to parentId. By using this map, we avoid relying on DOM traversal logic (row.closest or row.previousElementSibling) during drag-and-drop operations, which can sometimes be unreliable or cumbersome.\n\nFull Revised onEnd section:\n```\nonEnd: async (event) => {\n    try {\n        console.log("Drag-and-drop operation started...");\n        const rows = Array.from(event.from.querySelectorAll(".task-row"));\n        const reorderedTasks = [];\n\n        rows.forEach((row, index) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = this.taskParentMap.get(taskId) || null;\n\n            // Update the taskParentMap dynamically\n            this.updateTaskParentMap(taskId, parentId);\n\n            reorderedTasks.push({\n                id: taskId,\n                sort_order: index + 1,\n                parent_id: parentId,\n            });\n        });\n\n        console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n        console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n        // Send the payload to the backend\n        const response = await fetch("/tasks/reorder_subtasks", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n            },\n            body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error("Error reordering tasks:", errorData);\n            alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n            return;\n        }\n\n        const data = await response.json();\n        console.log("Task reordering successful:", data);\n\n    } catch (error) {\n        console.error("Error during drag-and-drop operation:", error);\n        alert("An unexpected error occurred while reordering tasks.");\n    }\n}\n```\n---------------------------------\nEnsure updates include:\n\t•\tBetter Logging: Adding logs for key events such as database changes and validation results.\n\t•\tInput Validation: Ensure all required fields (id, sort_order, parent_id) exist in the payload.\n\t•\tPost-Commit Validation: Confirm database updates after the commit.\n\t•\tImproved Error Handling: Include specific error messages and consistent rollback mechanisms.\n\nBelow is the revised reorder_subtasks route with descriptive comments for each section:\n```\n@bp.route("/reorder_subtasks", methods=["POST"])\ndef reorder_subtasks():\n    """\n    Reorder subtasks globally or reassign them to a different parent.\n\n    Steps:\n    - Parse and validate input from the frontend.\n    - Update parent-child relationships and sort order in the database.\n    - Commit changes and return a success response.\n    - Handle errors gracefully and provide detailed logs for debugging.\n    """\n    logger.info("Entering reorder_subtasks route...")\n    logger.info(f"Received payload for reordering tasks: {request.json}")\n\n    try:\n        # Step 1: Parse input\n        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered\n        ordered_tasks = request.json.get("ordered_tasks", [])\n\n        logger.debug(f"Parsed parent_id: {parent_id}")\n        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")\n\n        # Step 2: Validate input\n        if not isinstance(ordered_tasks, list) or not all(\n            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task\n            for task in ordered_tasks\n        ):\n            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")\n            return jsonify({\n                "error": "Invalid input format for \'ordered_tasks\'. Each task must include \'id\', \'sort_order\', and \'parent_id\'."\n            }), 400\n\n        # Step 3: Validate parent task (if applicable)\n        if parent_id is not None:\n            parent_task = Task.query.get(parent_id)\n            if not parent_task:\n                logger.error(f"Parent task with ID {parent_id} not found.")\n                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400\n\n        logger.info("Input validation passed. Proceeding with task updates...")\n\n        # Step 4: Process updates for each subtask\n        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation\n\n        for task_data in ordered_tasks:\n            subtask_id = task_data["id"]\n            sort_order = task_data["sort_order"]\n            new_parent_id = task_data["parent_id"]\n\n            # Fetch the subtask from the database\n            subtask = Task.query.get(subtask_id)\n            if not subtask:\n                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")\n                continue\n\n            # Log and update parent_id if it changes\n            if new_parent_id is not None and new_parent_id != subtask.parent_id:\n                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")\n                subtask.parent_id = new_parent_id\n\n            # Update sort order\n            subtask.sort_order = sort_order\n            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")\n\n            # Add to the list of updated subtasks for validation\n            updated_subtasks.append(subtask)\n\n        # Step 5: Commit changes to the database\n        try:\n            db.session.commit()\n            logger.info(f"Subtasks reordered successfully: {[task[\'id\'] for task in ordered_tasks]}")\n        except Exception as e:\n            logger.error(f"Error committing changes to the database: {str(e)}")\n            db.session.rollback()\n            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500\n\n        # Step 6: Post-commit validation\n        for subtask in updated_subtasks:\n            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")\n            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")\n\n        # Step 7: Return success response\n        return jsonify({\n            "success": True,\n            "message": "Subtasks reordered successfully.",\n            "updated_subtasks": [subtask.id for subtask in updated_subtasks]\n        }), 200\n\n    except Exception as e:\n        # Step 8: Handle unexpected errors\n        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)\n        db.session.rollback()\n        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500\n```\nKey Changes and Descriptive Comments\n\t1.\tInput Parsing:\n\t•\tExtracts parent_id and ordered_tasks from the request payload.\n\t•\tLogs the parsed values for debugging.\n\t2.\tInput Validation:\n\t•\tEnsures ordered_tasks is a list of dictionaries with the required keys.\n\t•\tValidates parent_id if provided, ensuring the parent task exists in the database.\n\t3.\tUpdate Processing:\n\t•\tIterates through ordered_tasks, updating each task’s parent_id and sort_order.\n\t•\tLogs changes for each task.\n\t4.\tDatabase Commit:\n\t•\tCommits all updates in a single transaction.\n\t•\tLogs success or rolls back changes in case of an error.\n\t5.\tPost-Commit Validation:\n\t•\tVerifies that the parent_id and sort_order changes were successfully saved to the database.\n\t6.\tError Handling:\n\t•\tCaptures and logs exceptions during processing or committing.\n\t•\tProvides meaningful error messages to the frontend.\n\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:46:29.348853', 'updated_at': '2025-02-06T21:59:21.617065'}, {'id': 131, 'name': 'Step 5: Update utils.py', 'description': 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nChanges to Make:\n\t1.\tEnhance Task Filtering:\n\t•\tEnsure the filters handle parent-child relationships explicitly.\n\t•\tAdd options to include or exclude subtasks in queries.\n\t2.\tUtility Function for Debugging Parent-Child Relationships:\n\t•\tProvide a function to generate a map or list of parent-child relationships for debugging purposes.\n\t3.\tValidation Functions:\n\t•\tAdd a utility function to validate parent-child relationships and ensure no circular dependencies.\n\nUpdated utils.py Code:\n```\nimport logging\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import joinedload\nfrom app.extensions.db import db\nfrom app.tasks.models import Task\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\n\nclass TaskService:\n    @staticmethod\n    def filter_tasks(filters=None, include_subtasks=True, page=None, per_page=None):\n        """\n        Dynamically filters tasks with an option to include or exclude subtasks.\n\n        Args:\n            filters (dict): Filtering criteria.\n            include_subtasks (bool): Whether to include subtasks in the query.\n            page (int, optional): Page number for pagination.\n            per_page (int, optional): Items per page for pagination.\n\n        Returns:\n            Query or Pagination: A SQLAlchemy query object or paginated results.\n        """\n        query = Task.query.options(\n            db.joinedload(Task.project).joinedload(Project.contributors),\n            db.joinedload(Task.contributor),\n            db.joinedload(Task.children),\n        ).order_by(Task.sort_order)\n\n        if filters:\n            logger.debug(f"Applying filters: {filters}")\n\n            # Apply standard filters\n            if "is_archived" in filters:\n                query = query.filter(Task.is_archived == filters["is_archived"])\n            if "project_id" in filters:\n                query = query.filter(Task.project_id == filters["project_id"])\n            if "task_type" in filters:\n                if isinstance(filters["task_type"], list):\n                    query = query.filter(Task.task_type.in_(filters["task_type"]))\n                else:\n                    query = query.filter(Task.task_type == filters["task_type"])\n            if "completion_status" in filters:\n                completion_map = {"completed": True, "in_progress": False}\n                if filters["completion_status"] in completion_map:\n                    query = query.filter(Task.completed == completion_map[filters["completion_status"]])\n\n            # Optionally exclude subtasks\n            if not include_subtasks:\n                query = query.filter(Task.task_type != "Subtask")\n\n        logger.debug(f"Generated query: {query}")\n\n        # Pagination\n        if page and per_page:\n            return query.paginate(page=page, per_page=per_page, error_out=False)\n        return query\n\n    @staticmethod\n    def debug_parent_child_relationships(project_id=None):\n        """\n        Generates a debug map of parent-child relationships for all tasks.\n\n        Args:\n            project_id (int, optional): Restrict to tasks from a specific project.\n\n        Returns:\n            dict: A dictionary mapping parent IDs to their child task IDs.\n        """\n        query = Task.query\n        if project_id:\n            query = query.filter(Task.project_id == project_id)\n\n        tasks = query.options(\n            db.load_only(Task.id, Task.parent_id)\n        ).all()\n\n        relationship_map = {}\n        for task in tasks:\n            if task.parent_id not in relationship_map:\n                relationship_map[task.parent_id] = []\n            relationship_map[task.parent_id].append(task.id)\n\n        logger.debug(f"Parent-Child Relationship Map: {relationship_map}")\n        return relationship_map\n\n    @staticmethod\n    def validate_parent_child_relationships():\n        """\n        Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.\n\n        Raises:\n            ValueError: If invalid relationships are detected.\n        """\n        tasks = Task.query.options(db.joinedload(Task.parent)).all()\n\n        for task in tasks:\n            if task.parent_id:\n                parent_task = task.parent\n                if not parent_task:\n                    raise ValueError(f"Task {task.id} has an invalid parent ID {task.parent_id}.")\n\n                # Validate hierarchy rules\n                if task.task_type == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError(f"User Story {task.id} must have an Epic as its parent.")\n                if task.task_type == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError(f"Subtask {task.id} must have a User Story as its parent.")\n\n        logger.info("All parent-child relationships are valid.")\n\n    @staticmethod\n    def get_all_task_ids_with_parents():\n        """\n        Returns a flat list of tasks with their parent IDs for debugging.\n\n        Returns:\n            list: A list of tuples (task_id, parent_id).\n        """\n        tasks = Task.query.with_entities(Task.id, Task.parent_id).all()\n        logger.debug(f"Task IDs with Parent IDs: {tasks}")\n        return tasks\n```\n\n\nExplanation of Changes:\n\t1.\tfilter_tasks Enhancements:\n\t•\tAdded include_subtasks parameter to optionally exclude subtasks from the query.\n\t2.\tdebug_parent_child_relationships:\n\t•\tCreates a parent-child relationship map for debugging purposes.\n\t3.\tvalidate_parent_child_relationships:\n\t•\tIterates through all tasks to validate parent-child hierarchy and ensures no invalid relationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t•\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.091824', 'updated_at': '2025-01-16T19:22:36.236691'}, {'id': 135, 'name': 'Step 3: Update list.html', 'description': 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already includes everything needed. No required changes.\n\nHere´s the relevant section of list.html:\n\n```\n<tr id="task-{{ task.id }}"\n                class="task-row {% if task.task_type == \'Subtask\' %}subtask-row{% elif task.task_type == \'User Story\' %}user-story-row{% elif task.task_type == \'Epic\' %}epic-row{% endif %}"\n                style="background-color: \n                {% if task.task_type == \'Subtask\' %}\n                    rgba(200, 230, 255, 0.5); /* Light blue for Subtask */\n                {% elif task.task_type == \'User Story\' %}\n                    rgba(255, 255, 200, 0.5); /* Light yellow for User Story */\n                {% elif task.task_type == \'Epic\' %}\n                    rgba(255, 200, 200, 0.5); /* Light red for Epic */\n                {% else %}\n                    rgba(240, 240, 240, 1); /* Default light gray */\n                {% endif %};"\n                data-task-id="{{ task.id }}"\n                data-parent-id="{{ task.parent_id or \'\' }}"\n                data-level="{{ depth }}">\n                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>\n                <td>\n                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}\n                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}" aria-label="Toggle details for task {{ task.name }}">\n                        <i class="bi bi-chevron-right"></i>\n                    </button>\n                    {% endif %}\n                </td>\n                <td class="fw-medium fs-6 \n                {% if task.task_type == \'Epic\' %}\n                    epic-cell\n                {% elif task.task_type == \'User Story\' %}\n                    user-story-cell\n                {% elif task.task_type == \'Subtask\' %}\n                    subtask-cell\n                {% endif %}" \n                style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">\n                <span class="bi fs-6\n                {% if task.task_type == \'Epic\' %}\n                    bi-circle-fill\n                {% elif task.task_type == \'User Story\' %}\n                    bi-circle-half\n                {% elif task.task_type == \'Subtask\' %}\n                    bi-circle\n                {% endif %}">\n                </span>\n                {{ task.name }}\n                <small class="text-muted fw-light">\n                    (Parent-ID: {{ task.parent_id or \'None\' }})\n                </small>\n                <!-- Open Link -->\n                <a href="#" class="task-open-link" data-task-id="{{ task.id }}">\n                    <i class="bi bi-arrows-angle-expand" style="font-size: 0.8rem; color: white;"></i>\n                    Open\n                </a>\n            </td>\n                <td class="fw-light fs-6">\n                    <small class>\n                    LAC-{{ task.id }}\n                    </small>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light text-bg-secondary">\n                        {{ task.project if task.project else "Unknown Project" }}\n                    </span>\n                </td>\n                <td class="fs-6" data-contributor-column>{{ task.assigned_to if task.assigned_to else "Unassigned" }}</td>\n                <td class="fs-6">{{ task.story_points }}</td>\n                <td class="fs-6">\n                    <span class="badge rounded-pill fw-light text-bg-light">\n                        {{ task.task_type }}\n                    </span>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light {% if task.completed %}text-bg-success{% else %}text-bg-warning{% endif %}">\n                        {{ "Completed" if task.completed else "In Progress" }}\n                    </span>\n                </td>\n                <td>\n                    <!-- Delete Icon -->\n                    <button class="btn btn-dark btn-sm delete-task-btn" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .2rem; --bs-btn-font-size: .75rem;" data-task-id="{{ task.id }}" aria-label="Deletes task {{ task.id }}">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n            </tr>\n            {% for child in tasks if child.parent_id == task.id %}\n                {{ render_task(child, tasks, depth + 1) }}\n            {% endfor %}\n            {% endmacro %}\n            \n            <!-- Render top-level tasks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:46:29.349784', 'updated_at': '2025-01-16T19:22:36.238473'}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'description': 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitHub Login involves integrating OAuth 2.0, which both services support. The complexity depends on your app’s existing setup, frameworks, and experience with third-party authentication. Below is a breakdown:\n\nKey Steps for Implementing Google or GitHub Login\n\t1.\tSet Up OAuth Credentials:\n\t•\tRegister your application in the Google Cloud Console or GitHub Developer Settings.\n\t•\tObtain the client ID and client secret.\n\t2.\tInstall Required Libraries:\n\t•\tUse a library for OAuth (e.g., flask-oauthlib, python-social-auth, or authlib).\n\t•\tPopular frameworks like Flask and Django already have robust integrations for OAuth providers.\n\t3.\tBackend Configuration:\n\t•\tImplement an endpoint to handle the OAuth flow (/auth/login/google or /auth/login/github).\n\t•\tConfigure your app to send users to Google or GitHub’s authentication page.\n\t•\tHandle the OAuth callback to exchange the authorization code for an access token.\n\t•\tVerify the token and fetch user information (e.g., email, name).\n\t4.\tLink OAuth to User Registration:\n\t•\tOn successful login, create or retrieve a user in your database.\n\t•\tStore the user’s details like email, OAuth provider ID, and access token.\n\t5.\tFrontend Integration (if applicable):\n\t•\tAdd “Login with Google” or “Login with GitHub” buttons.\n\t•\tRedirect to your backend’s OAuth endpoint when clicked.', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T12:15:54.291625', 'updated_at': '2025-01-16T19:22:36.239866'}, {'id': 62, 'name': 'Add OAuth integration for Google Login', 'description': 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.241200'}, {'id': 64, 'name': 'Setup project credentials for Google API', 'description': 'Generate client ID and secret from Google API Console for your application.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-01-16T19:22:36.242497'}, {'id': 67, 'name': 'Test Google OAuth flow', 'description': 'Verify the OAuth flow using test accounts and check the token exchange.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.243780'}, {'id': 65, 'name': 'Implement backend endpoints for Google OAuth', 'description': 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-01-16T19:22:36.244932'}, {'id': 63, 'name': 'Add OAuth integration for GitHub Login', 'description': 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.246358'}, {'id': 68, 'name': 'Register application in GitHub Developer Console', 'description': 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.247746'}, {'id': 69, 'name': 'Handle callback from GitHub', 'description': 'Implement the callback endpoint to process the authorization code from GitHub.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.248912'}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'description': 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 18, 'status': 'Not Started', 'created_at': '2025-01-07T19:53:50.085064', 'updated_at': '2025-01-16T19:22:36.250169'}, {'id': 100, 'name': '1.1 User Registration', 'description': 'As a user, I want to register with a username, email, and password so that I can create an account and access the system.\n\n**Acceptance Criteria:**\n\n•\tUser can input valid username, email, and password.\n•\tUsername and email must be unique.\n•\tErrors are displayed for invalid inputs or duplicate accounts.\n•\tPasswords must meet complexity requirements and be securely stored.\n•\tSuccessful registration redirects users to a login page.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:59:09.044667', 'updated_at': '2025-01-16T19:22:36.251812'}, {'id': 107, 'name': '1.1.1 Database Changes for User Registration', 'description': '1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.\n   CREATE TABLE public.users (\n       id SERIAL PRIMARY KEY,\n       username VARCHAR(50) UNIQUE NOT NULL,\n       email VARCHAR(100) UNIQUE NOT NULL,\n       password_hash VARCHAR(255) NOT NULL,\n       created_at TIMESTAMP DEFAULT NOW(),\n       updated_at TIMESTAMP DEFAULT NOW()\n);\n\n\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:30.747962'}, {'id': 108, 'name': '1.1.2 Backend API for Registration', 'description': '•\tCreate an endpoint POST /api/register:\n•\tValidate input fields.\n•\tHash the password using bcrypt or argon2.\n•\tInsert the user into the users table.\n•\tReturn success/failure responses.\ndddhfff\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:33.067643'}, {'id': 112, 'name': '1.2.2 Frontend Login Page', 'description': 'Develop a frontend form for user login with email and password inputs.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.683644'}, {'id': 109, 'name': '1.1.3 Create Frontend Registration Page', 'description': 'Develop a frontend form to collect user registration details.\n•\tAdd a form for username, email, and password inputs.\n•\tUse client-side validation (e.g., email format).\n•\tSend a POST request to /api/register.\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.684988'}, {'id': 110, 'name': '1.1.4 Unit Tests for Registration', 'description': 'Write unit tests for:\n\n•\tValid registration.\n•\tDuplicate username/email scenarios.\n•\tInvalid input handling.\nff', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.686902'}, {'id': 101, 'name': '1.2 User Login', 'description': 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n•\tUsers can log in with a valid email and password.\n•\tErrors are displayed for invalid credentials.\n•\tSuccessful login stores a session or JWT token.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:25:53.687936'}, {'id': 111, 'name': '1.2.1 Backend API for Login', 'description': 'Create POST /api/login endpoint to handle user login.\njjsjj', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.689096'}, {'id': 113, 'name': '1.2.3 Session Management', 'description': 'Implement secure session handling using cookies or JWT.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:20.968680'}, {'id': 114, 'name': '1.2.4 Unit Tests for Login', 'description': 'Write tests for successful and failed login attempts.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:22:36.265866'}, {'id': 106, 'name': 'Password Reset', 'description': 'As a user, I want to reset my password securely using email.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.267247'}, {'id': 128, 'name': 'Frontend Password Reset Page', 'description': 'Develop a page for users to enter a new password using a valid token.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.269158'}, {'id': 129, 'name': 'Testing Password Reset', 'description': 'Write tests for email delivery, token validation, and password updates.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.270849'}, {'id': 102, 'name': 'Logout', 'description': 'As a user, I want to log out so that I can end my session securely.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.272605'}, {'id': 117, 'name': 'Tests for Logout', 'description': 'Verify session invalidation and redirection to the login page.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.274575'}, {'id': 116, 'name': 'Frontend Logout Button', 'description': 'Add a logout button to the UI and handle session clearing.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-09T12:31:17.939784'}, {'id': 115, 'name': 'Backend API for Logout', 'description': 'Create POST /api/logout endpoint to invalidate user sessions.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.277547'}, {'id': 61, 'name': 'Parent task assignment', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-04T22:31:45.205815', 'updated_at': '2025-01-16T19:22:36.279012'}, {'id': 45, 'name': 'Display Default Value in Dropdown', 'description': 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.280493'}, {'id': 50, 'name': 'Retrieve Current Parent Task', 'description': 'Retrieve the current parent task’s ID and name from the backend.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 2, 'status': 'In Progress', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-10T07:41:43.569807'}, {'id': 51, 'name': 'Set Default Value', 'description': 'Set the default value in the dropdown based on the retrieved data.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 45, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 1, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.283309'}, {'id': 46, 'name': 'Search for Parent Tasks', 'description': 'Allow users to search for tasks dynamically in the dropdown by typing.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.284882'}, {'id': 54, 'name': 'Test Partial Matching', 'description': 'Ensure the search results update in real-time as the user types.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.286248'}, {'id': 47, 'name': 'Handle Large Datasets Efficiently', 'description': 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 13, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.287641'}, {'id': 56, 'name': 'Paginate API Responses', 'description': 'Implement server-side filtering and pagination for large datasets.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.289338'}, {'id': 55, 'name': 'Enable Lazy Loading', 'description': 'Enable lazy loading or virtualization in Virtual Select.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.290910'}, {'id': 48, 'name': 'Select and Deselect Parent Tasks', 'description': 'Allow users to select a parent task or deselect by choosing "None."', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.292389'}, {'id': 57, 'name': 'Ensure None Option Availability', 'description': 'Add “None” as a selectable option and ensure it stays at the top of the list.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.294045'}, {'id': 58, 'name': 'Handle Selection Events', 'description': 'Implement event listeners to update the form’s state when the selection changes.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.295385'}, {'id': 49, 'name': 'Integrate Dropdown with Task Form', 'description': 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.296814'}, {'id': 59, 'name': 'Bind Dropdown to Form Field', 'description': 'Bind the dropdown to the form’s parent task field.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-09T23:48:08.770907'}, {'id': 60, 'name': 'Test Form Submission', 'description': 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.299971'}, {'id': 41, 'name': 'Implement Searchable Dropdown', 'description': 'As a user, I want a searchable dropdown for parent task assignment.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Completed', 'created_at': '2025-01-03T09:14:28.285904', 'updated_at': '2025-02-10T07:41:33.252945'}, {'id': 52, 'name': 'Add Search Box to Dropdown', 'description': 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-10T07:40:33.847642'}, {'id': 53, 'name': 'Implement AJAX Search', 'description': 'Implement AJAX-based search to fetch tasks dynamically from the backend.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-09T07:55:00.680183'}, {'id': 42, 'name': 'Choose Dropdown Library', 'description': 'Research and decide on the dropdown library to use.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-10T07:41:18.814716'}, {'id': 43, 'name': 'Integrate Dropdown Library', 'description': 'Integrate the chosen dropdown library into the project.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Completed', 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-10T07:41:23.756572'}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t•\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t•\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-01-16T19:22:36.311560'}, {'id': 85, 'name': 'Assign multiple contributors to a task', 'description': 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:32:39.466022', 'updated_at': '2025-01-16T19:22:36.313789'}, {'id': 90, 'name': 'Update frontend to display and manage multiple contributors', 'description': 'Allow users to view, add, or remove multiple contributors via the UI.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-01-16T19:22:36.315695'}, {'id': 88, 'name': 'Update database schema for multiple contributors', 'description': 'Modify the task table to support many-to-many relationships for contributors.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-01-16T19:22:36.317500'}, {'id': 89, 'name': 'Develop backend API for adding contributors to a task', 'description': 'Create endpoints to add, update, and remove contributors for a task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-01-16T19:22:36.319281'}, {'id': 86, 'name': 'Allow designation of task owner', 'description': 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:29.330562', 'updated_at': '2025-01-16T19:22:36.320840'}, {'id': 93, 'name': 'Update frontend to manage task ownership', 'description': 'Allow users to assign or update the task owner via the UI.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-01-16T19:22:36.322637'}, {'id': 91, 'name': 'Update database schema for task ownership', 'description': 'Add a column or relationship to assign a single owner per task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-01-16T19:22:36.324051'}, {'id': 92, 'name': 'Develop backend API for assigning task owner', 'description': 'Create endpoints to assign or update the owner of a task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-11T09:19:44.027744'}, {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-01-16T19:22:36.326985'}, {'id': 96, 'name': 'Allow admin users to create and customize contributor roles via frontend', 'description': 'Provide UI functionality for admins to manage contributor roles dynamically.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-01-16T19:22:36.328562'}, {'id': 94, 'name': 'Add database support for contributor roles', 'description': 'Introduce a roles table and link contributors to specific roles for tasks.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-01-16T19:22:36.329887'}, {'id': 95, 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T09:21:30.150064'}, {'id': 127, 'name': 'Backend API for Password Reset', 'description': 'Create endpoints to handle password reset requests and token validation.\ndfdf\n\nasdasd', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-10T23:59:50.734037'}, {'id': 126, 'name': 'Email Configuration for Password Reset', 'description': 'Configure email service to send password reset links.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.334340'}, {'id': 104, 'name': 'Middleware for Role Enforcement', 'description': 'As a system, I want to enforce role-based access to specific routes.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:23:40.346816'}, {'id': 122, 'name': 'Testing Role Enforcement', 'description': 'Write tests to ensure proper access control based on roles.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-01-16T19:23:58.185693'}, {'id': 121, 'name': 'Develop Role Enforcement Middleware', 'description': 'Implement middleware to check user roles for access control.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-01-16T19:23:58.187439'}, {'id': 105, 'name': 'Profile Management', 'description': 'As a user, I want to update my profile (username, email, password).', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.339830'}, {'id': 123, 'name': 'Backend API for Profile Management', 'description': 'Create PATCH /api/profile endpoint to update user details.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-01-16T19:24:19.678781'}, {'id': 125, 'name': 'Testing Profile Updates', 'description': 'Write tests for profile update functionality.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-01-16T19:24:19.680382'}]
2025-02-11 09:21:40,992 DEBUG: Task types: ['all', 'Epic', 'Subtask', 'User Story']
2025-02-11 09:21:40,992 DEBUG: Projects: [<Project Project Alpha (ID: 1)>, <Project Project Beta (ID: 2)>, <Project Project Gamma (ID: 3)>, <Project Project Theta (ID: 4)>, <Project Project Delta (ID: 5)>, <Project PMS - Feature Requests (ID: 7)>, <Project PMS - Backlog (ID: 6)>]
2025-02-11 09:21:40,992 DEBUG: Tasks response: [{'id': 290, 'name': 'issue: error when changing task type and', 'description': 'issue: error when changing task type and parent task before saving', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:00:03.417734', 'updated_at': '2025-02-10T09:15:09.284969'}, {'id': 298, 'name': 'example user story with parent epic 297', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 297, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:41:01.907455', 'updated_at': '2025-02-10T14:59:04.142570'}, {'id': 275, 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-10T08:38:37.622196'}, {'id': 276, 'name': 'add support for priority', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-10T08:28:47.447612'}, {'id': 264, 'name': 'close all / open all childtasks', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-02-10T08:47:14.915970'}, {'id': 285, 'name': 'add text truncation to project names in task list', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-10T09:45:47.029729'}, {'id': 257, 'name': 'Update Task API Integration', 'description': "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-02-05T22:55:49.566819', 'updated_at': '2025-02-05T22:18:17.807154'}, {'id': 294, 'name': 'issue: task table filters not working', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:19:21.022598', 'updated_at': '2025-02-10T10:19:21.024676'}, {'id': 267, 'name': 'improvements to toggles and nested tasks', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:29:12.464594', 'updated_at': '2025-02-10T08:47:24.581680'}, {'id': 271, 'name': 'make sure dynamically added rows has the exact same styling and includes every element', 'description': 'Missing elements:\n- Open link\n- Default project\n- Project name should be inside a pill\n- Task type should be in a pill\n- Estimations should be 0, not N/A\n- Make sure font size is matching\n- status should have the dropdown inside a pill\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:21:07.108431', 'updated_at': '2025-02-10T08:38:47.340105'}, {'id': 283, 'name': 'fix update title', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:58.769700', 'updated_at': '2025-02-10T08:46:47.282087'}, {'id': 273, 'name': 'disable parent task selector in epics', 'description': 'and add text, Epic can´t have parent tasks', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:45:20.740910', 'updated_at': '2025-02-10T08:39:17.639890'}, {'id': 269, 'name': 'fix styling for sweetalert', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-02-08T15:54:56.717846', 'updated_at': '2025-02-10T08:39:32.172437'}, {'id': 286, 'name': 'add support for labels/tags', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:46:23.985620', 'updated_at': '2025-02-10T09:46:23.987564'}, {'id': 299, 'name': 'example sub task with parent user story 298', 'description': 'Test update 1\nTest update 2\nTest update 3', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 298, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:42:38.905700', 'updated_at': '2025-02-10T23:23:08.671464'}, {'id': 266, 'name': 'highlight the nested tasks', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-02-10T08:47:04.382929'}, {'id': 279, 'name': 'github integration', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:38.238202', 'updated_at': '2025-02-10T08:39:24.168451'}, {'id': 289, 'name': 'issue: parent task is lost when updating task', 'description': '', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:56:25.273984', 'updated_at': '2025-02-10T09:12:47.626993'}, {'id': 272, 'name': 'implement a markdown text editor like notion', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-02-10T08:28:39.669255'}, {'id': 278, 'name': 'search feature for tasks list', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:03.369833', 'updated_at': '2025-02-10T08:39:04.005957'}, {'id': 281, 'name': 'add high level plan', 'description': 'Add some sort of high level plan that aims to keep PM/PO´s on track and not get lost into the details of an overwhelminly large backlog', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:27:01.218606', 'updated_at': '2025-02-10T08:38:54.754760'}, {'id': 287, 'name': 'when moving a parent item to another project make sure the subtasks are moved as well', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:48:31.986870', 'updated_at': '2025-02-10T09:48:31.988859'}, {'id': 293, 'name': 'click on title should copy the task title and id to clipboard', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:16:33.508209', 'updated_at': '2025-02-10T10:16:33.510414'}, {'id': 277, 'name': 'custom task workflow statuses', 'description': 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- Custom status\n-- Custom status\n- In Progress\n-- Custom status\n-- Custom status\n-- Custom status\n- Completed\n-- Custom status\n-- Custom status\n\n2. How can we track a task through different stages and save the sequence of events or stages the task has gone through?\nI´m thinking it could be good for mapping out processes, identifying bottlenecks and provide valuable insights while improving and streamlining workflows.\n- Stages\n- Contacts taken\n- Respons time \n- Time to action after responses\n- Dependencies\n\nNeed to be able to record every action related to this action.\nCommunication integrations\n- Slack\n- Email\n- Text messages\n- Phonecalls\n- Calendar events, meetings\n- Zoom, Google meet, Teams etc..\n\n\n2. Set custom statuses per project (can use tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:16:03.352588', 'updated_at': '2025-02-10T08:38:28.123328'}, {'id': 274, 'name': 'add support for goals, initiatives, okr´s', 'description': 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:46:27.204912', 'updated_at': '2025-02-10T08:28:17.663922'}, {'id': 280, 'name': 'logging (task and project history)', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:37:44.435112', 'updated_at': '2025-02-10T08:28:28.947805'}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:17.786154', 'updated_at': '2025-02-10T09:41:17.787861'}, {'id': 296, 'name': 'issue: contributor is lost after updating task', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:26:43.881947', 'updated_at': '2025-02-10T10:26:43.884004'}, {'id': 288, 'name': 'when trying to move subtask to another project, make sure a warning is displayed', 'description': 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be lost"\nOR\n\nIs it possible, and is it desireable to keep parent child relationships across projects?\nSo that a parent can be in one project but the child tasks can be in different projects?\n\nLets say \nParent epic is \n"Internationalisation"\nChild user stories are\n- Timezones\n- Language\n- Currency\n- Day, Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:54:36.297869', 'updated_at': '2025-02-10T08:54:51.840686'}, {'id': 284, 'name': 'add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-10T09:42:27.720908'}, {'id': 295, 'name': 'issue: drag and drop errors', 'description': '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:22:54.461413', 'updated_at': '2025-02-10T10:22:54.462542'}, {'id': 297, 'name': 'example parent epic', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:39:51.620509', 'updated_at': '2025-02-10T10:39:51.622712'}, {'id': 292, 'name': 'issue: assigning contributor does not work', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:11:12.273779', 'updated_at': '2025-02-10T10:11:12.274809'}, {'id': 265, 'name': 'smooth transition for toggles', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-02-10T08:46:55.831743'}, {'id': 270, 'name': 'the newest task', 'description': '', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:07:34.368035', 'updated_at': '2025-02-10T01:07:34.372478'}, {'id': 291, 'name': 'add dropdowns in task list for changing: project, assigned to, estimate and task type (labels/tags)', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-02-10T10:09:52.997455'}, {'id': 136, 'name': 'Page scroll should stay in position when reloading', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-16T18:21:50.187247', 'updated_at': '2025-01-16T19:22:36.214901'}, {'id': 130, 'name': 'Implement the Map of Task Relationships solution for drag-and-drop', 'description': 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.093022', 'updated_at': '2025-01-16T19:22:36.216705'}, {'id': 133, 'name': 'Step 4: Enhance Logging in models.py', 'description': 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nupdating the Task model in the following ways:\n\n1.\tLog Changes to parent_id:\n\t•\tLog changes to parent_id during updates, including old and new values.\n\t2.\tValidate Hierarchy with Logging:\n\t•\tLog detailed messages when validating hierarchy changes, especially for circular dependency checks.\n\nHere’s how the models.py can be updated:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy import func, cast, CheckConstraint\nfrom sqlalchemy.orm import validates\nfrom app.extensions.db import db\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\nclass Task(db.Model):\n    __tablename__ = "task"\n    \n    # Other columns...\n\n    parent_id = db.Column(\n        db.Integer, db.ForeignKey("task.id"), index=True, nullable=True\n    )\n\n    # Relationships\n    parent = db.relationship(\n        "Task", remote_side=[id], back_populates="children", lazy="select"\n    )\n    children = db.relationship(\n        "Task", back_populates="parent", lazy="select"\n    )\n\n    \n\n\n    @staticmethod\n    def _validate_no_circular_references(new_parent_id):\n        """\n        Validates that there are no circular references in the task hierarchy.\n\n        Args:\n            new_parent_id (int): The new parent ID to validate.\n\n        Raises:\n            ValueError: If a circular reference is detected.\n        """\n        visited = set()\n        current_parent_id = new_parent_id\n\n        logger.info(f"Validating circular references for parent ID: {new_parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error(\n                    f"Circular reference detected: Parent ID {current_parent_id} already visited."\n                )\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            # Fetch the next parent_id in the hierarchy\n            parent = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not parent:\n                break  # Exit if no parent is found\n            current_parent_id = parent.parent_id\n\n        logger.info("No circular reference detected.")\n\n    @validates(\'parent_id\', \'task_type\')\n    def validate_task_changes(self, key, value):\n        """\n        Validates changes to \'parent_id\' and \'task_type\'.\n        Ensures hierarchy validity and checks for circular references.\n        """\n        logger.debug(f"Validating {key} change for Task {self.id}: {value}")\n\n        if key == \'parent_id\':\n            # Log changes to parent_id\n            if self.id and value != self.parent_id:\n                logger.info(f"Task {self.id}: Updating \'parent_id\' from {self.parent_id} to {value}")\n\n            # Prevent a task from being its own parent\n            if value and value == self.id:\n                logger.error("A task cannot be its own parent.")\n                raise ValueError("A task cannot be its own parent.")\n\n            # Check for circular references\n            if value:\n                Task.check_circular_reference(self.id, value)\n\n        elif key == \'task_type\':\n            # Log changes to task_type\n            if self.id and value != self.task_type:\n                logger.info(f"Task {self.id}: Updating \'task_type\' from {self.task_type} to {value}")\n\n        # Check hierarchy rules without triggering further validation\n        if key in [\'parent_id\', \'task_type\']:\n            self._validate_hierarchy_change(key, value)\n\n        logger.info(f"Validation passed for {key}: {value}")\n        return value\n\n    def _validate_hierarchy_change(self, key, value):\n        """\n        Validates hierarchy rules for the task based on `task_type` and `parent_id`.\n        """\n        if key == \'parent_id\' and value:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=value).first()\n            if not parent_task:\n                raise ValueError("Parent task does not exist.")\n\n            logger.debug(f"Validating hierarchy: Task {self.id}, Parent Type: {parent_task.task_type}")\n            if self.task_type == "User Story" and parent_task.task_type != "Epic":\n                raise ValueError("User Stories must have an Epic as a parent.")\n            if self.task_type == "Subtask" and parent_task.task_type != "User Story":\n                raise ValueError("Subtasks must have a User Story as a parent.")\n\n        elif key == \'task_type\' and self.parent_id:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=self.parent_id).first()\n            if parent_task:\n                logger.debug(f"Validating hierarchy: Task Type: {value}, Parent Type: {parent_task.task_type}")\n                if value == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError("User Stories must have an Epic as a parent.")\n                if value == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError("Subtasks must have a User Story as a parent.")\n\n        logger.info(f"Hierarchy validation passed for Task {self.id if self.id else \'New Task\'}.")\n\n    @staticmethod\n    def check_circular_reference(task_id, parent_id):\n        """\n        Iteratively checks for circular references in the task hierarchy.\n        Prevents stack overflow on deep hierarchies.\n        """\n        visited = set()\n        current_parent_id = parent_id\n\n        logger.info(f"Checking circular reference for Task {task_id} with Parent ID: {parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error("Circular reference detected!")\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            if current_parent_id == task_id:\n                logger.error("A task cannot be its own ancestor.")\n                raise ValueError("A task cannot be its own ancestor.")\n\n            # Fetch the next parent_id in the hierarchy\n            task = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not task:\n                break\n            current_parent_id = task.parent_id\n\n        logger.info("Circular reference check passed.")\n```\nKey Enhancements:\n\t1.\tlog_and_validate_parent_id_change:\n\t•\tLogs the old and new parent_id whenever it changes.\n\t•\tEnsures no circular references are introduced.\n\t2.\t_validate_no_circular_references:\n\t•\tValidates the parent_id field to prevent circular dependencies.\n\t•\tLogs progress and raises detailed errors if violations occur.\n\t3.\tlog_and_validate_task_type_change:\n\t•\tLogs changes to task_type with the old and new values.\n\t•\tRevalidates hierarchy rules when task_type changes.\n\t4.\tDetailed Logging for Circular Reference Validation:\n\t•\t_validate_no_circular_references and check_circular_reference methods log every step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t•\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:44:08.340041', 'updated_at': '2025-01-16T19:22:36.219710'}, {'id': 132, 'name': 'Step 1: Update tasks_table_interactions.js', 'description': '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the map for efficient parent-child relationship lookups instead of DOM traversal.\n\n```\nexport const TaskManager = {\n    init: function (csrfToken) {\n        this.csrfToken = csrfToken;\n        this.initTaskParentMap(); // Initialize the map\n        this.initDragAndDrop(); // Initialize drag-and-drop functionality\n    },\n\n    // Initialize a global map for task relationships\n    taskParentMap: new Map(),\n\n    // Build the taskParentMap from the DOM\n    initTaskParentMap: function () {\n        console.log("Initializing Task Parent Map...");\n        const rows = document.querySelectorAll("tr[data-task-id]");\n\n        rows.forEach((row) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = parseInt(row.dataset.parentId, 10) || null;\n            this.taskParentMap.set(taskId, parentId);\n        });\n\n        console.log("Task Parent Map initialized:", Array.from(this.taskParentMap.entries()));\n    },\n\n    // Update the map dynamically after drag-and-drop\n    updateTaskParentMap: function (taskId, parentId) {\n        console.log(`Updating Task Parent Map: Task ${taskId} -> Parent ${parentId}`);\n        this.taskParentMap.set(taskId, parentId);\n    },\n\n    initDragAndDrop: function () {\n        if (window.isDragAndDropInitialized) {\n            console.log("Drag-and-drop is already initialized.");\n            return;\n        }\n\n        console.log("Initializing drag-and-drop within TaskManager...");\n\n        const tableBody = document.querySelector("tbody");\n        if (!tableBody) {\n            console.warn("Task table body not found for drag-and-drop initialization");\n            return;\n        }\n\n        // Initialize Sortable.js for drag-and-drop functionality\n        Sortable.create(tableBody, {\n            handle: ".task-row", // Only draggable via `.task-row` elements\n            animation: 150, // Smooth animation\n            filter: ".task-open-link", // Prevent dragging on task links\n            preventOnFilter: true, // Prevent drag if filtered element is clicked\n            onEnd: async (event) => {\n                try {\n                    console.log("Drag-and-drop operation started...");\n                    const rows = Array.from(event.from.querySelectorAll(".task-row"));\n                    const reorderedTasks = [];\n\n                    rows.forEach((row, index) => {\n                        const taskId = parseInt(row.dataset.taskId, 10);\n                        let parentId = null;\n\n                        // Get the parent ID from the map or fallback to the dataset\n                        if (row.classList.contains("subtask-row")) {\n                            const parentRow = row.previousElementSibling;\n                            parentId = parentRow\n                                ? parseInt(parentRow.dataset.taskId, 10)\n                                : this.taskParentMap.get(taskId) || null;\n                        }\n\n                        // Update the taskParentMap dynamically\n                        this.updateTaskParentMap(taskId, parentId);\n\n                        reorderedTasks.push({\n                            id: taskId,\n                            sort_order: index + 1,\n                            parent_id: parentId,\n                        });\n                    });\n\n                    console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n                    console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n                    // Send the payload to the backend\n                    const response = await fetch("/tasks/reorder_subtasks", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                            "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n                        },\n                        body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n                    });\n\n                    if (!response.ok) {\n                        const errorData = await response.json();\n                        console.error("Error reordering tasks:", errorData);\n                        alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n                        return;\n                    }\n\n                    const data = await response.json();\n                    console.log("Task reordering successful:", data);\n\n                } catch (error) {\n                    console.error("Error during drag-and-drop operation:", error);\n                    alert("An unexpected error occurred while reordering tasks.");\n                }\n            },\n        });\n\n        window.isDragAndDropInitialized = true;\n        console.log("Drag-and-drop initialized successfully.");\n    },\n};\n```\n\nKey Updates:\n\t1.\tPrecomputed Map (taskParentMap):\n\t•\tThe initTaskParentMap function initializes the map by iterating over DOM elements and mapping each task’s ID to its parent ID.\n\t•\tThe updateTaskParentMap dynamically updates the map when tasks are reordered.\n\t2.\tEfficient Parent Lookup:\n\t•\tThe parentId is derived from the precomputed map rather than DOM traversal.\n\t3.\tBackend Payload:\n\t•\tA structured payload (reorderedTasks) is sent to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t•\tCSRF protection is ensured by passing the token to the request headers.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:44:08.338301', 'updated_at': '2025-02-06T21:59:17.417466'}, {'id': 134, 'name': 'Step 2: Update the Backend in routes.py', 'description': 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\nPlan for step 2:\n\t1.\tVerify the payload structure:\n\t•\tEnsure that the payload includes all necessary fields (id, sort_order, parent_id) for each task.\n\t•\tValidate that the parent-child relationships in the precomputed map (taskParentMap) are reflected correctly in the payload.\n\t2.\tSubmit the payload to the backend:\n\t•\tEnhance the fetch request in the onEnd function of initDragAndDrop to log detailed submission data.\n\t•\tConfirm the payload integrity in the browser console before submission.\n\t3.\tUpdate backend logging:\n\t•\tAdd logging to /reorder_subtasks in routes.py to confirm receipt of the correct payload and process parent-child updates.\n\t•\tLog before and after database updates for better debugging.\n\n-----\nUpdated tasks_table_interactions.js\n\nReplace this section:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    let parentId = null;\n```\nWith:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    const parentId = this.taskParentMap.get(taskId) || null;\n```\nThe this.taskParentMap provides a precomputed and dynamic mapping of taskId to parentId. By using this map, we avoid relying on DOM traversal logic (row.closest or row.previousElementSibling) during drag-and-drop operations, which can sometimes be unreliable or cumbersome.\n\nFull Revised onEnd section:\n```\nonEnd: async (event) => {\n    try {\n        console.log("Drag-and-drop operation started...");\n        const rows = Array.from(event.from.querySelectorAll(".task-row"));\n        const reorderedTasks = [];\n\n        rows.forEach((row, index) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = this.taskParentMap.get(taskId) || null;\n\n            // Update the taskParentMap dynamically\n            this.updateTaskParentMap(taskId, parentId);\n\n            reorderedTasks.push({\n                id: taskId,\n                sort_order: index + 1,\n                parent_id: parentId,\n            });\n        });\n\n        console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n        console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n        // Send the payload to the backend\n        const response = await fetch("/tasks/reorder_subtasks", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n            },\n            body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error("Error reordering tasks:", errorData);\n            alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n            return;\n        }\n\n        const data = await response.json();\n        console.log("Task reordering successful:", data);\n\n    } catch (error) {\n        console.error("Error during drag-and-drop operation:", error);\n        alert("An unexpected error occurred while reordering tasks.");\n    }\n}\n```\n---------------------------------\nEnsure updates include:\n\t•\tBetter Logging: Adding logs for key events such as database changes and validation results.\n\t•\tInput Validation: Ensure all required fields (id, sort_order, parent_id) exist in the payload.\n\t•\tPost-Commit Validation: Confirm database updates after the commit.\n\t•\tImproved Error Handling: Include specific error messages and consistent rollback mechanisms.\n\nBelow is the revised reorder_subtasks route with descriptive comments for each section:\n```\n@bp.route("/reorder_subtasks", methods=["POST"])\ndef reorder_subtasks():\n    """\n    Reorder subtasks globally or reassign them to a different parent.\n\n    Steps:\n    - Parse and validate input from the frontend.\n    - Update parent-child relationships and sort order in the database.\n    - Commit changes and return a success response.\n    - Handle errors gracefully and provide detailed logs for debugging.\n    """\n    logger.info("Entering reorder_subtasks route...")\n    logger.info(f"Received payload for reordering tasks: {request.json}")\n\n    try:\n        # Step 1: Parse input\n        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered\n        ordered_tasks = request.json.get("ordered_tasks", [])\n\n        logger.debug(f"Parsed parent_id: {parent_id}")\n        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")\n\n        # Step 2: Validate input\n        if not isinstance(ordered_tasks, list) or not all(\n            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task\n            for task in ordered_tasks\n        ):\n            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")\n            return jsonify({\n                "error": "Invalid input format for \'ordered_tasks\'. Each task must include \'id\', \'sort_order\', and \'parent_id\'."\n            }), 400\n\n        # Step 3: Validate parent task (if applicable)\n        if parent_id is not None:\n            parent_task = Task.query.get(parent_id)\n            if not parent_task:\n                logger.error(f"Parent task with ID {parent_id} not found.")\n                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400\n\n        logger.info("Input validation passed. Proceeding with task updates...")\n\n        # Step 4: Process updates for each subtask\n        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation\n\n        for task_data in ordered_tasks:\n            subtask_id = task_data["id"]\n            sort_order = task_data["sort_order"]\n            new_parent_id = task_data["parent_id"]\n\n            # Fetch the subtask from the database\n            subtask = Task.query.get(subtask_id)\n            if not subtask:\n                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")\n                continue\n\n            # Log and update parent_id if it changes\n            if new_parent_id is not None and new_parent_id != subtask.parent_id:\n                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")\n                subtask.parent_id = new_parent_id\n\n            # Update sort order\n            subtask.sort_order = sort_order\n            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")\n\n            # Add to the list of updated subtasks for validation\n            updated_subtasks.append(subtask)\n\n        # Step 5: Commit changes to the database\n        try:\n            db.session.commit()\n            logger.info(f"Subtasks reordered successfully: {[task[\'id\'] for task in ordered_tasks]}")\n        except Exception as e:\n            logger.error(f"Error committing changes to the database: {str(e)}")\n            db.session.rollback()\n            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500\n\n        # Step 6: Post-commit validation\n        for subtask in updated_subtasks:\n            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")\n            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")\n\n        # Step 7: Return success response\n        return jsonify({\n            "success": True,\n            "message": "Subtasks reordered successfully.",\n            "updated_subtasks": [subtask.id for subtask in updated_subtasks]\n        }), 200\n\n    except Exception as e:\n        # Step 8: Handle unexpected errors\n        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)\n        db.session.rollback()\n        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500\n```\nKey Changes and Descriptive Comments\n\t1.\tInput Parsing:\n\t•\tExtracts parent_id and ordered_tasks from the request payload.\n\t•\tLogs the parsed values for debugging.\n\t2.\tInput Validation:\n\t•\tEnsures ordered_tasks is a list of dictionaries with the required keys.\n\t•\tValidates parent_id if provided, ensuring the parent task exists in the database.\n\t3.\tUpdate Processing:\n\t•\tIterates through ordered_tasks, updating each task’s parent_id and sort_order.\n\t•\tLogs changes for each task.\n\t4.\tDatabase Commit:\n\t•\tCommits all updates in a single transaction.\n\t•\tLogs success or rolls back changes in case of an error.\n\t5.\tPost-Commit Validation:\n\t•\tVerifies that the parent_id and sort_order changes were successfully saved to the database.\n\t6.\tError Handling:\n\t•\tCaptures and logs exceptions during processing or committing.\n\t•\tProvides meaningful error messages to the frontend.\n\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:46:29.348853', 'updated_at': '2025-02-06T21:59:21.617065'}, {'id': 131, 'name': 'Step 5: Update utils.py', 'description': 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nChanges to Make:\n\t1.\tEnhance Task Filtering:\n\t•\tEnsure the filters handle parent-child relationships explicitly.\n\t•\tAdd options to include or exclude subtasks in queries.\n\t2.\tUtility Function for Debugging Parent-Child Relationships:\n\t•\tProvide a function to generate a map or list of parent-child relationships for debugging purposes.\n\t3.\tValidation Functions:\n\t•\tAdd a utility function to validate parent-child relationships and ensure no circular dependencies.\n\nUpdated utils.py Code:\n```\nimport logging\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import joinedload\nfrom app.extensions.db import db\nfrom app.tasks.models import Task\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\n\nclass TaskService:\n    @staticmethod\n    def filter_tasks(filters=None, include_subtasks=True, page=None, per_page=None):\n        """\n        Dynamically filters tasks with an option to include or exclude subtasks.\n\n        Args:\n            filters (dict): Filtering criteria.\n            include_subtasks (bool): Whether to include subtasks in the query.\n            page (int, optional): Page number for pagination.\n            per_page (int, optional): Items per page for pagination.\n\n        Returns:\n            Query or Pagination: A SQLAlchemy query object or paginated results.\n        """\n        query = Task.query.options(\n            db.joinedload(Task.project).joinedload(Project.contributors),\n            db.joinedload(Task.contributor),\n            db.joinedload(Task.children),\n        ).order_by(Task.sort_order)\n\n        if filters:\n            logger.debug(f"Applying filters: {filters}")\n\n            # Apply standard filters\n            if "is_archived" in filters:\n                query = query.filter(Task.is_archived == filters["is_archived"])\n            if "project_id" in filters:\n                query = query.filter(Task.project_id == filters["project_id"])\n            if "task_type" in filters:\n                if isinstance(filters["task_type"], list):\n                    query = query.filter(Task.task_type.in_(filters["task_type"]))\n                else:\n                    query = query.filter(Task.task_type == filters["task_type"])\n            if "completion_status" in filters:\n                completion_map = {"completed": True, "in_progress": False}\n                if filters["completion_status"] in completion_map:\n                    query = query.filter(Task.completed == completion_map[filters["completion_status"]])\n\n            # Optionally exclude subtasks\n            if not include_subtasks:\n                query = query.filter(Task.task_type != "Subtask")\n\n        logger.debug(f"Generated query: {query}")\n\n        # Pagination\n        if page and per_page:\n            return query.paginate(page=page, per_page=per_page, error_out=False)\n        return query\n\n    @staticmethod\n    def debug_parent_child_relationships(project_id=None):\n        """\n        Generates a debug map of parent-child relationships for all tasks.\n\n        Args:\n            project_id (int, optional): Restrict to tasks from a specific project.\n\n        Returns:\n            dict: A dictionary mapping parent IDs to their child task IDs.\n        """\n        query = Task.query\n        if project_id:\n            query = query.filter(Task.project_id == project_id)\n\n        tasks = query.options(\n            db.load_only(Task.id, Task.parent_id)\n        ).all()\n\n        relationship_map = {}\n        for task in tasks:\n            if task.parent_id not in relationship_map:\n                relationship_map[task.parent_id] = []\n            relationship_map[task.parent_id].append(task.id)\n\n        logger.debug(f"Parent-Child Relationship Map: {relationship_map}")\n        return relationship_map\n\n    @staticmethod\n    def validate_parent_child_relationships():\n        """\n        Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.\n\n        Raises:\n            ValueError: If invalid relationships are detected.\n        """\n        tasks = Task.query.options(db.joinedload(Task.parent)).all()\n\n        for task in tasks:\n            if task.parent_id:\n                parent_task = task.parent\n                if not parent_task:\n                    raise ValueError(f"Task {task.id} has an invalid parent ID {task.parent_id}.")\n\n                # Validate hierarchy rules\n                if task.task_type == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError(f"User Story {task.id} must have an Epic as its parent.")\n                if task.task_type == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError(f"Subtask {task.id} must have a User Story as its parent.")\n\n        logger.info("All parent-child relationships are valid.")\n\n    @staticmethod\n    def get_all_task_ids_with_parents():\n        """\n        Returns a flat list of tasks with their parent IDs for debugging.\n\n        Returns:\n            list: A list of tuples (task_id, parent_id).\n        """\n        tasks = Task.query.with_entities(Task.id, Task.parent_id).all()\n        logger.debug(f"Task IDs with Parent IDs: {tasks}")\n        return tasks\n```\n\n\nExplanation of Changes:\n\t1.\tfilter_tasks Enhancements:\n\t•\tAdded include_subtasks parameter to optionally exclude subtasks from the query.\n\t2.\tdebug_parent_child_relationships:\n\t•\tCreates a parent-child relationship map for debugging purposes.\n\t3.\tvalidate_parent_child_relationships:\n\t•\tIterates through all tasks to validate parent-child hierarchy and ensures no invalid relationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t•\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.091824', 'updated_at': '2025-01-16T19:22:36.236691'}, {'id': 135, 'name': 'Step 3: Update list.html', 'description': 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already includes everything needed. No required changes.\n\nHere´s the relevant section of list.html:\n\n```\n<tr id="task-{{ task.id }}"\n                class="task-row {% if task.task_type == \'Subtask\' %}subtask-row{% elif task.task_type == \'User Story\' %}user-story-row{% elif task.task_type == \'Epic\' %}epic-row{% endif %}"\n                style="background-color: \n                {% if task.task_type == \'Subtask\' %}\n                    rgba(200, 230, 255, 0.5); /* Light blue for Subtask */\n                {% elif task.task_type == \'User Story\' %}\n                    rgba(255, 255, 200, 0.5); /* Light yellow for User Story */\n                {% elif task.task_type == \'Epic\' %}\n                    rgba(255, 200, 200, 0.5); /* Light red for Epic */\n                {% else %}\n                    rgba(240, 240, 240, 1); /* Default light gray */\n                {% endif %};"\n                data-task-id="{{ task.id }}"\n                data-parent-id="{{ task.parent_id or \'\' }}"\n                data-level="{{ depth }}">\n                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>\n                <td>\n                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}\n                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}" aria-label="Toggle details for task {{ task.name }}">\n                        <i class="bi bi-chevron-right"></i>\n                    </button>\n                    {% endif %}\n                </td>\n                <td class="fw-medium fs-6 \n                {% if task.task_type == \'Epic\' %}\n                    epic-cell\n                {% elif task.task_type == \'User Story\' %}\n                    user-story-cell\n                {% elif task.task_type == \'Subtask\' %}\n                    subtask-cell\n                {% endif %}" \n                style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">\n                <span class="bi fs-6\n                {% if task.task_type == \'Epic\' %}\n                    bi-circle-fill\n                {% elif task.task_type == \'User Story\' %}\n                    bi-circle-half\n                {% elif task.task_type == \'Subtask\' %}\n                    bi-circle\n                {% endif %}">\n                </span>\n                {{ task.name }}\n                <small class="text-muted fw-light">\n                    (Parent-ID: {{ task.parent_id or \'None\' }})\n                </small>\n                <!-- Open Link -->\n                <a href="#" class="task-open-link" data-task-id="{{ task.id }}">\n                    <i class="bi bi-arrows-angle-expand" style="font-size: 0.8rem; color: white;"></i>\n                    Open\n                </a>\n            </td>\n                <td class="fw-light fs-6">\n                    <small class>\n                    LAC-{{ task.id }}\n                    </small>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light text-bg-secondary">\n                        {{ task.project if task.project else "Unknown Project" }}\n                    </span>\n                </td>\n                <td class="fs-6" data-contributor-column>{{ task.assigned_to if task.assigned_to else "Unassigned" }}</td>\n                <td class="fs-6">{{ task.story_points }}</td>\n                <td class="fs-6">\n                    <span class="badge rounded-pill fw-light text-bg-light">\n                        {{ task.task_type }}\n                    </span>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light {% if task.completed %}text-bg-success{% else %}text-bg-warning{% endif %}">\n                        {{ "Completed" if task.completed else "In Progress" }}\n                    </span>\n                </td>\n                <td>\n                    <!-- Delete Icon -->\n                    <button class="btn btn-dark btn-sm delete-task-btn" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .2rem; --bs-btn-font-size: .75rem;" data-task-id="{{ task.id }}" aria-label="Deletes task {{ task.id }}">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n            </tr>\n            {% for child in tasks if child.parent_id == task.id %}\n                {{ render_task(child, tasks, depth + 1) }}\n            {% endfor %}\n            {% endmacro %}\n            \n            <!-- Render top-level tasks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:46:29.349784', 'updated_at': '2025-01-16T19:22:36.238473'}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'description': 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitHub Login involves integrating OAuth 2.0, which both services support. The complexity depends on your app’s existing setup, frameworks, and experience with third-party authentication. Below is a breakdown:\n\nKey Steps for Implementing Google or GitHub Login\n\t1.\tSet Up OAuth Credentials:\n\t•\tRegister your application in the Google Cloud Console or GitHub Developer Settings.\n\t•\tObtain the client ID and client secret.\n\t2.\tInstall Required Libraries:\n\t•\tUse a library for OAuth (e.g., flask-oauthlib, python-social-auth, or authlib).\n\t•\tPopular frameworks like Flask and Django already have robust integrations for OAuth providers.\n\t3.\tBackend Configuration:\n\t•\tImplement an endpoint to handle the OAuth flow (/auth/login/google or /auth/login/github).\n\t•\tConfigure your app to send users to Google or GitHub’s authentication page.\n\t•\tHandle the OAuth callback to exchange the authorization code for an access token.\n\t•\tVerify the token and fetch user information (e.g., email, name).\n\t4.\tLink OAuth to User Registration:\n\t•\tOn successful login, create or retrieve a user in your database.\n\t•\tStore the user’s details like email, OAuth provider ID, and access token.\n\t5.\tFrontend Integration (if applicable):\n\t•\tAdd “Login with Google” or “Login with GitHub” buttons.\n\t•\tRedirect to your backend’s OAuth endpoint when clicked.', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T12:15:54.291625', 'updated_at': '2025-01-16T19:22:36.239866'}, {'id': 62, 'name': 'Add OAuth integration for Google Login', 'description': 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.241200'}, {'id': 64, 'name': 'Setup project credentials for Google API', 'description': 'Generate client ID and secret from Google API Console for your application.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-01-16T19:22:36.242497'}, {'id': 67, 'name': 'Test Google OAuth flow', 'description': 'Verify the OAuth flow using test accounts and check the token exchange.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.243780'}, {'id': 65, 'name': 'Implement backend endpoints for Google OAuth', 'description': 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-01-16T19:22:36.244932'}, {'id': 63, 'name': 'Add OAuth integration for GitHub Login', 'description': 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.246358'}, {'id': 68, 'name': 'Register application in GitHub Developer Console', 'description': 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.247746'}, {'id': 69, 'name': 'Handle callback from GitHub', 'description': 'Implement the callback endpoint to process the authorization code from GitHub.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.248912'}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'description': 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 18, 'status': 'Not Started', 'created_at': '2025-01-07T19:53:50.085064', 'updated_at': '2025-01-16T19:22:36.250169'}, {'id': 100, 'name': '1.1 User Registration', 'description': 'As a user, I want to register with a username, email, and password so that I can create an account and access the system.\n\n**Acceptance Criteria:**\n\n•\tUser can input valid username, email, and password.\n•\tUsername and email must be unique.\n•\tErrors are displayed for invalid inputs or duplicate accounts.\n•\tPasswords must meet complexity requirements and be securely stored.\n•\tSuccessful registration redirects users to a login page.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:59:09.044667', 'updated_at': '2025-01-16T19:22:36.251812'}, {'id': 107, 'name': '1.1.1 Database Changes for User Registration', 'description': '1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.\n   CREATE TABLE public.users (\n       id SERIAL PRIMARY KEY,\n       username VARCHAR(50) UNIQUE NOT NULL,\n       email VARCHAR(100) UNIQUE NOT NULL,\n       password_hash VARCHAR(255) NOT NULL,\n       created_at TIMESTAMP DEFAULT NOW(),\n       updated_at TIMESTAMP DEFAULT NOW()\n);\n\n\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:30.747962'}, {'id': 108, 'name': '1.1.2 Backend API for Registration', 'description': '•\tCreate an endpoint POST /api/register:\n•\tValidate input fields.\n•\tHash the password using bcrypt or argon2.\n•\tInsert the user into the users table.\n•\tReturn success/failure responses.\ndddhfff\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:33.067643'}, {'id': 112, 'name': '1.2.2 Frontend Login Page', 'description': 'Develop a frontend form for user login with email and password inputs.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.683644'}, {'id': 109, 'name': '1.1.3 Create Frontend Registration Page', 'description': 'Develop a frontend form to collect user registration details.\n•\tAdd a form for username, email, and password inputs.\n•\tUse client-side validation (e.g., email format).\n•\tSend a POST request to /api/register.\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.684988'}, {'id': 110, 'name': '1.1.4 Unit Tests for Registration', 'description': 'Write unit tests for:\n\n•\tValid registration.\n•\tDuplicate username/email scenarios.\n•\tInvalid input handling.\nff', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.686902'}, {'id': 101, 'name': '1.2 User Login', 'description': 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n•\tUsers can log in with a valid email and password.\n•\tErrors are displayed for invalid credentials.\n•\tSuccessful login stores a session or JWT token.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:25:53.687936'}, {'id': 111, 'name': '1.2.1 Backend API for Login', 'description': 'Create POST /api/login endpoint to handle user login.\njjsjj', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.689096'}, {'id': 113, 'name': '1.2.3 Session Management', 'description': 'Implement secure session handling using cookies or JWT.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:20.968680'}, {'id': 114, 'name': '1.2.4 Unit Tests for Login', 'description': 'Write tests for successful and failed login attempts.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:22:36.265866'}, {'id': 106, 'name': 'Password Reset', 'description': 'As a user, I want to reset my password securely using email.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.267247'}, {'id': 128, 'name': 'Frontend Password Reset Page', 'description': 'Develop a page for users to enter a new password using a valid token.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.269158'}, {'id': 129, 'name': 'Testing Password Reset', 'description': 'Write tests for email delivery, token validation, and password updates.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.270849'}, {'id': 102, 'name': 'Logout', 'description': 'As a user, I want to log out so that I can end my session securely.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.272605'}, {'id': 117, 'name': 'Tests for Logout', 'description': 'Verify session invalidation and redirection to the login page.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.274575'}, {'id': 116, 'name': 'Frontend Logout Button', 'description': 'Add a logout button to the UI and handle session clearing.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-09T12:31:17.939784'}, {'id': 115, 'name': 'Backend API for Logout', 'description': 'Create POST /api/logout endpoint to invalidate user sessions.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.277547'}, {'id': 61, 'name': 'Parent task assignment', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-04T22:31:45.205815', 'updated_at': '2025-01-16T19:22:36.279012'}, {'id': 45, 'name': 'Display Default Value in Dropdown', 'description': 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.280493'}, {'id': 50, 'name': 'Retrieve Current Parent Task', 'description': 'Retrieve the current parent task’s ID and name from the backend.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 2, 'status': 'In Progress', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-10T07:41:43.569807'}, {'id': 51, 'name': 'Set Default Value', 'description': 'Set the default value in the dropdown based on the retrieved data.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 45, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 1, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.283309'}, {'id': 46, 'name': 'Search for Parent Tasks', 'description': 'Allow users to search for tasks dynamically in the dropdown by typing.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.284882'}, {'id': 54, 'name': 'Test Partial Matching', 'description': 'Ensure the search results update in real-time as the user types.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.286248'}, {'id': 47, 'name': 'Handle Large Datasets Efficiently', 'description': 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 13, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.287641'}, {'id': 56, 'name': 'Paginate API Responses', 'description': 'Implement server-side filtering and pagination for large datasets.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.289338'}, {'id': 55, 'name': 'Enable Lazy Loading', 'description': 'Enable lazy loading or virtualization in Virtual Select.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.290910'}, {'id': 48, 'name': 'Select and Deselect Parent Tasks', 'description': 'Allow users to select a parent task or deselect by choosing "None."', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.292389'}, {'id': 57, 'name': 'Ensure None Option Availability', 'description': 'Add “None” as a selectable option and ensure it stays at the top of the list.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.294045'}, {'id': 58, 'name': 'Handle Selection Events', 'description': 'Implement event listeners to update the form’s state when the selection changes.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.295385'}, {'id': 49, 'name': 'Integrate Dropdown with Task Form', 'description': 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.296814'}, {'id': 59, 'name': 'Bind Dropdown to Form Field', 'description': 'Bind the dropdown to the form’s parent task field.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-09T23:48:08.770907'}, {'id': 60, 'name': 'Test Form Submission', 'description': 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.299971'}, {'id': 41, 'name': 'Implement Searchable Dropdown', 'description': 'As a user, I want a searchable dropdown for parent task assignment.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Completed', 'created_at': '2025-01-03T09:14:28.285904', 'updated_at': '2025-02-10T07:41:33.252945'}, {'id': 52, 'name': 'Add Search Box to Dropdown', 'description': 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-10T07:40:33.847642'}, {'id': 53, 'name': 'Implement AJAX Search', 'description': 'Implement AJAX-based search to fetch tasks dynamically from the backend.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-09T07:55:00.680183'}, {'id': 42, 'name': 'Choose Dropdown Library', 'description': 'Research and decide on the dropdown library to use.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-10T07:41:18.814716'}, {'id': 43, 'name': 'Integrate Dropdown Library', 'description': 'Integrate the chosen dropdown library into the project.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Completed', 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-10T07:41:23.756572'}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t•\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t•\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-01-16T19:22:36.311560'}, {'id': 85, 'name': 'Assign multiple contributors to a task', 'description': 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:32:39.466022', 'updated_at': '2025-01-16T19:22:36.313789'}, {'id': 90, 'name': 'Update frontend to display and manage multiple contributors', 'description': 'Allow users to view, add, or remove multiple contributors via the UI.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-01-16T19:22:36.315695'}, {'id': 88, 'name': 'Update database schema for multiple contributors', 'description': 'Modify the task table to support many-to-many relationships for contributors.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-01-16T19:22:36.317500'}, {'id': 89, 'name': 'Develop backend API for adding contributors to a task', 'description': 'Create endpoints to add, update, and remove contributors for a task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-01-16T19:22:36.319281'}, {'id': 86, 'name': 'Allow designation of task owner', 'description': 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:29.330562', 'updated_at': '2025-01-16T19:22:36.320840'}, {'id': 93, 'name': 'Update frontend to manage task ownership', 'description': 'Allow users to assign or update the task owner via the UI.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-01-16T19:22:36.322637'}, {'id': 91, 'name': 'Update database schema for task ownership', 'description': 'Add a column or relationship to assign a single owner per task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-01-16T19:22:36.324051'}, {'id': 92, 'name': 'Develop backend API for assigning task owner', 'description': 'Create endpoints to assign or update the owner of a task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-11T09:19:44.027744'}, {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-01-16T19:22:36.326985'}, {'id': 96, 'name': 'Allow admin users to create and customize contributor roles via frontend', 'description': 'Provide UI functionality for admins to manage contributor roles dynamically.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-01-16T19:22:36.328562'}, {'id': 94, 'name': 'Add database support for contributor roles', 'description': 'Introduce a roles table and link contributors to specific roles for tasks.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-01-16T19:22:36.329887'}, {'id': 95, 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T09:21:30.150064'}, {'id': 127, 'name': 'Backend API for Password Reset', 'description': 'Create endpoints to handle password reset requests and token validation.\ndfdf\n\nasdasd', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-10T23:59:50.734037'}, {'id': 126, 'name': 'Email Configuration for Password Reset', 'description': 'Configure email service to send password reset links.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.334340'}, {'id': 104, 'name': 'Middleware for Role Enforcement', 'description': 'As a system, I want to enforce role-based access to specific routes.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:23:40.346816'}, {'id': 122, 'name': 'Testing Role Enforcement', 'description': 'Write tests to ensure proper access control based on roles.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-01-16T19:23:58.185693'}, {'id': 121, 'name': 'Develop Role Enforcement Middleware', 'description': 'Implement middleware to check user roles for access control.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-01-16T19:23:58.187439'}, {'id': 105, 'name': 'Profile Management', 'description': 'As a user, I want to update my profile (username, email, password).', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.339830'}, {'id': 123, 'name': 'Backend API for Profile Management', 'description': 'Create PATCH /api/profile endpoint to update user details.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-01-16T19:24:19.678781'}, {'id': 125, 'name': 'Testing Profile Updates', 'description': 'Write tests for profile update functionality.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-01-16T19:24:19.680382'}]
2025-02-11 09:21:41,032 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-11 09:21:41,032 INFO: [cached since 575.8s ago] {'param_1': 2}
2025-02-11 09:21:41,033 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:21:41,033 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-11 09:21:41,033 INFO: [cached since 575.8s ago] {'param_1': 3}
2025-02-11 09:21:41,033 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:21:41,034 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-11 09:21:41,034 INFO: [cached since 575.8s ago] {'param_1': 4}
2025-02-11 09:21:41,034 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:21:41,034 DEBUG: Row (4, 'Fredrik')
2025-02-11 09:21:41,034 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-11 09:21:41,034 INFO: [cached since 575.8s ago] {'param_1': 5}
2025-02-11 09:21:41,035 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:21:41,035 INFO: ROLLBACK
2025-02-11 09:21:41,036 INFO: 127.0.0.1 - - [11/Feb/2025 09:21:41] "GET /tasks/?page=1&is_archived=False HTTP/1.1" 200 -
2025-02-11 09:21:41,102 INFO: 127.0.0.1 - - [11/Feb/2025 09:21:41] "GET /static/custom.css HTTP/1.1" 200 -
2025-02-11 09:21:41,111 INFO: 127.0.0.1 - - [11/Feb/2025 09:21:41] "GET /static/js/filters.js HTTP/1.1" 200 -
2025-02-11 09:21:41,116 INFO: 127.0.0.1 - - [11/Feb/2025 09:21:41] "GET /static/js/tasks_table_interactions.js HTTP/1.1" 200 -
2025-02-11 09:21:41,117 INFO: 127.0.0.1 - - [11/Feb/2025 09:21:41] "GET /static/js/modals.js HTTP/1.1" 200 -
2025-02-11 09:21:41,149 INFO: 127.0.0.1 - - [11/Feb/2025 09:21:41] "GET /static/images/background.svg HTTP/1.1" 200 -
2025-02-11 09:21:41,403 INFO: 127.0.0.1 - - [11/Feb/2025 09:21:41] "GET /static/favicon.ico HTTP/1.1" 200 -
2025-02-11 09:21:49,508 INFO: Fetching task details for Task ID 95.
2025-02-11 09:21:49,509 INFO: Fetching task with ID 95.
2025-02-11 09:21:49,509 INFO: BEGIN (implicit)
2025-02-11 09:21:49,510 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:21:49,510 INFO: [cached since 576.8s ago] {'pk_1': 95}
2025-02-11 09:21:49,511 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:21:49,511 DEBUG: Row (95, 'Develop backend API for managing contributor roles', 67, 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'Subtask', False, False, 'Not Started', 87, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 2, 11, 9, 21, 30, 150064), None)
2025-02-11 09:21:49,511 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x12b7d2750>, 'sort_order': 67, 'task_type': 'Subtask', 'contributor_id': 5, 'id': 95, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), 'status': 'Not Started', 'project_id': 6, 'updated_at': datetime.datetime(2025, 2, 11, 9, 21, 30, 150064), 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'parent_id': 87, 'story_points': 8, 'completed_date': None}
2025-02-11 09:21:49,512 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-11 09:21:49,512 INFO: [cached since 576.8s ago] {'pk_1': 6}
2025-02-11 09:21:49,513 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at')
2025-02-11 09:21:49,514 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298))
2025-02-11 09:21:49,518 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:21:49,519 INFO: [cached since 576.2s ago] {'pk_1': 5}
2025-02-11 09:21:49,521 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:21:49,521 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:21:49,521 INFO: Task ID 95 fetched with parent ID: 87
2025-02-11 09:21:49,522 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:21:49,522 INFO: [cached since 576.8s ago] {'pk_1': 87}
2025-02-11 09:21:49,522 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:21:49,522 DEBUG: Row (87, 'Create and customize contributor roles', 64, 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'User Story', False, False, 'Not Started', 84, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), None)
2025-02-11 09:21:49,523 INFO: Task with ID 95 fetched successfully.
2025-02-11 09:21:49,523 DEBUG: Fetched Task Data: {'id': 95, 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T09:21:30.150064', 'contributor_name': 'Fredrik Cederborg', 'parent': {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-01-16T19:22:36.326985'}}
2025-02-11 09:21:49,523 INFO: Task details fetched successfully for Task ID 95.
2025-02-11 09:21:49,523 INFO: ROLLBACK
2025-02-11 09:21:49,523 INFO: 127.0.0.1 - - [11/Feb/2025 09:21:49] "GET /api/tasks/95 HTTP/1.1" 200 -
2025-02-11 09:21:50,042 INFO: Fetching task details for Task ID 87.
2025-02-11 09:21:50,043 INFO: Fetching task with ID 87.
2025-02-11 09:21:50,043 INFO: BEGIN (implicit)
2025-02-11 09:21:50,044 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:21:50,044 INFO: [cached since 577.3s ago] {'pk_1': 87}
2025-02-11 09:21:50,045 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:21:50,045 DEBUG: Row (87, 'Create and customize contributor roles', 64, 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'User Story', False, False, 'Not Started', 84, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), None)
2025-02-11 09:21:50,045 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x12b7d0b30>, 'sort_order': 64, 'task_type': 'User Story', 'contributor_id': None, 'id': 87, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), 'status': 'Not Started', 'project_id': 6, 'updated_at': datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'parent_id': 84, 'story_points': 8, 'completed_date': None}
2025-02-11 09:21:50,045 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-11 09:21:50,046 INFO: [cached since 577.3s ago] {'pk_1': 6}
2025-02-11 09:21:50,046 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at')
2025-02-11 09:21:50,046 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298))
2025-02-11 09:21:50,047 INFO: Task ID 87 fetched with parent ID: 84
2025-02-11 09:21:50,047 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:21:50,047 INFO: [cached since 577.3s ago] {'pk_1': 84}
2025-02-11 09:21:50,049 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:21:50,050 DEBUG: Row (84, 'Enhance Task Contributor Management', 55, 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI ... (335 characters truncated) ... onalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'Epic', False, False, 'Not Started', None, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 30, 21, 149869), datetime.datetime(2025, 1, 16, 19, 22, 36, 311560), None)
2025-02-11 09:21:50,051 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:21:50,051 INFO: [cached since 576.8s ago] {'pk_1': 5}
2025-02-11 09:21:50,051 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:21:50,052 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:21:50,052 INFO: Task with ID 87 fetched successfully.
2025-02-11 09:21:50,052 DEBUG: Fetched Task Data: {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-01-16T19:22:36.326985', 'contributor_name': 'Unassigned', 'parent': {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t•\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t•\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-01-16T19:22:36.311560'}}
2025-02-11 09:21:50,052 INFO: Task details fetched successfully for Task ID 87.
2025-02-11 09:21:50,053 INFO: ROLLBACK
2025-02-11 09:21:50,053 INFO: 127.0.0.1 - - [11/Feb/2025 09:21:50] "GET /api/tasks/87 HTTP/1.1" 200 -
2025-02-11 09:21:50,762 INFO: Fetching task details for Task ID 95.
2025-02-11 09:21:50,762 INFO: Fetching task with ID 95.
2025-02-11 09:21:50,763 INFO: BEGIN (implicit)
2025-02-11 09:21:50,763 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:21:50,763 INFO: [cached since 578s ago] {'pk_1': 95}
2025-02-11 09:21:50,764 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:21:50,765 DEBUG: Row (95, 'Develop backend API for managing contributor roles', 67, 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'Subtask', False, False, 'Not Started', 87, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 2, 11, 9, 21, 30, 150064), None)
2025-02-11 09:21:50,765 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x12b7d2630>, 'sort_order': 67, 'task_type': 'Subtask', 'contributor_id': 5, 'id': 95, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), 'status': 'Not Started', 'project_id': 6, 'updated_at': datetime.datetime(2025, 2, 11, 9, 21, 30, 150064), 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'parent_id': 87, 'story_points': 8, 'completed_date': None}
2025-02-11 09:21:50,766 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-11 09:21:50,766 INFO: [cached since 578s ago] {'pk_1': 6}
2025-02-11 09:21:50,766 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at')
2025-02-11 09:21:50,767 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298))
2025-02-11 09:21:50,767 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:21:50,767 INFO: [cached since 577.5s ago] {'pk_1': 5}
2025-02-11 09:21:50,768 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:21:50,768 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:21:50,768 INFO: Task ID 95 fetched with parent ID: 87
2025-02-11 09:21:50,769 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:21:50,769 INFO: [cached since 578s ago] {'pk_1': 87}
2025-02-11 09:21:50,769 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:21:50,770 DEBUG: Row (87, 'Create and customize contributor roles', 64, 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'User Story', False, False, 'Not Started', 84, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), None)
2025-02-11 09:21:50,770 INFO: Task with ID 95 fetched successfully.
2025-02-11 09:21:50,770 DEBUG: Fetched Task Data: {'id': 95, 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T09:21:30.150064', 'contributor_name': 'Fredrik Cederborg', 'parent': {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-01-16T19:22:36.326985'}}
2025-02-11 09:21:50,770 INFO: Task details fetched successfully for Task ID 95.
2025-02-11 09:21:50,770 INFO: ROLLBACK
2025-02-11 09:21:50,770 INFO: 127.0.0.1 - - [11/Feb/2025 09:21:50] "GET /api/tasks/95 HTTP/1.1" 200 -
2025-02-11 09:21:50,978 INFO: Fetching task details for Task ID 87.
2025-02-11 09:21:50,978 INFO: Fetching task with ID 87.
2025-02-11 09:21:50,979 INFO: BEGIN (implicit)
2025-02-11 09:21:50,979 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:21:50,979 INFO: [cached since 578.2s ago] {'pk_1': 87}
2025-02-11 09:21:50,980 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:21:50,981 DEBUG: Row (87, 'Create and customize contributor roles', 64, 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'User Story', False, False, 'Not Started', 84, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), None)
2025-02-11 09:21:50,981 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x12b7d32f0>, 'sort_order': 64, 'task_type': 'User Story', 'contributor_id': None, 'id': 87, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), 'status': 'Not Started', 'project_id': 6, 'updated_at': datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'parent_id': 84, 'story_points': 8, 'completed_date': None}
2025-02-11 09:21:50,982 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-11 09:21:50,982 INFO: [cached since 578.2s ago] {'pk_1': 6}
2025-02-11 09:21:50,983 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at')
2025-02-11 09:21:50,984 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298))
2025-02-11 09:21:50,984 INFO: Task ID 87 fetched with parent ID: 84
2025-02-11 09:21:50,985 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:21:50,985 INFO: [cached since 578.2s ago] {'pk_1': 84}
2025-02-11 09:21:50,985 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:21:50,987 DEBUG: Row (84, 'Enhance Task Contributor Management', 55, 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI ... (335 characters truncated) ... onalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'Epic', False, False, 'Not Started', None, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 30, 21, 149869), datetime.datetime(2025, 1, 16, 19, 22, 36, 311560), None)
2025-02-11 09:21:50,988 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:21:50,989 INFO: [cached since 577.7s ago] {'pk_1': 5}
2025-02-11 09:21:50,989 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:21:50,989 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:21:50,990 INFO: Task with ID 87 fetched successfully.
2025-02-11 09:21:50,990 DEBUG: Fetched Task Data: {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-01-16T19:22:36.326985', 'contributor_name': 'Unassigned', 'parent': {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t•\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t•\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-01-16T19:22:36.311560'}}
2025-02-11 09:21:50,990 INFO: Task details fetched successfully for Task ID 87.
2025-02-11 09:21:50,990 INFO: ROLLBACK
2025-02-11 09:21:50,990 INFO: 127.0.0.1 - - [11/Feb/2025 09:21:50] "GET /api/tasks/87 HTTP/1.1" 200 -
2025-02-11 09:21:56,460 INFO: Assigning contributor to task ID 95
2025-02-11 09:21:56,460 INFO: Received data: {'contributor_id': 5}
2025-02-11 09:21:56,460 INFO: Contributor ID received: 5
2025-02-11 09:21:56,461 INFO: BEGIN (implicit)
2025-02-11 09:21:56,461 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:21:56,461 INFO: [cached since 583.7s ago] {'pk_1': 95}
2025-02-11 09:21:56,463 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:21:56,463 DEBUG: Row (95, 'Develop backend API for managing contributor roles', 67, 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'Subtask', False, False, 'Not Started', 87, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 2, 11, 9, 21, 30, 150064), None)
2025-02-11 09:21:56,464 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:21:56,464 INFO: [cached since 132.5s ago] {'pk_1': 5}
2025-02-11 09:21:56,466 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:21:56,466 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:21:56,467 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name 
FROM project LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project.id = project_contributor_1.project_id 
WHERE project.id = %(pk_1)s
2025-02-11 09:21:56,467 INFO: [cached since 132.4s ago] {'pk_1': 6}
2025-02-11 09:21:56,468 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at', 'contributor_1_id', 'contributor_1_name')
2025-02-11 09:21:56,469 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:21:56,469 INFO: COMMIT
2025-02-11 09:21:56,470 INFO: BEGIN (implicit)
2025-02-11 09:21:56,471 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:21:56,471 INFO: [cached since 132.4s ago] {'pk_1': 5}
2025-02-11 09:21:56,471 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:21:56,472 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:21:56,472 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:21:56,472 INFO: [cached since 132.4s ago] {'pk_1': 95}
2025-02-11 09:21:56,473 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:21:56,473 DEBUG: Row (95, 'Develop backend API for managing contributor roles', 67, 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'Subtask', False, False, 'Not Started', 87, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 2, 11, 9, 21, 30, 150064), None)
2025-02-11 09:21:56,473 INFO: ROLLBACK
2025-02-11 09:21:56,473 INFO: 127.0.0.1 - - [11/Feb/2025 09:21:56] "POST /tasks/95/assign_contributor HTTP/1.1" 200 -
2025-02-11 09:22:02,261 INFO: save_task triggered
2025-02-11 09:22:02,261 INFO: Payload received: {'title': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'task_id': '95', 'project_id': '6', 'task_type': 'Subtask', 'story_points': 8, 'parent_id': 87, 'contributor_id': None, 'sort_order': 0}
2025-02-11 09:22:02,262 INFO: Update request for Task ID: 95
2025-02-11 09:22:02,263 INFO: BEGIN (implicit)
2025-02-11 09:22:02,263 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:22:02,263 INFO: [cached since 589.5s ago] {'pk_1': '95'}
2025-02-11 09:22:02,265 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:22:02,266 DEBUG: Row (95, 'Develop backend API for managing contributor roles', 67, 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'Subtask', False, False, 'Not Started', 87, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 2, 11, 9, 21, 30, 150064), None)
2025-02-11 09:22:02,267 DEBUG: Received update payload for Task ID 95: {'title': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'task_id': '95', 'project_id': '6', 'task_type': 'Subtask', 'story_points': 8, 'parent_id': 87, 'contributor_id': None, 'sort_order': 0}
2025-02-11 09:22:02,267 DEBUG: Validating parent_id change for Task 95: 87
2025-02-11 09:22:02,267 INFO: Checking circular reference for Task 95 with Parent ID: 87
2025-02-11 09:22:02,269 INFO: SELECT task.parent_id AS task_parent_id 
FROM task 
WHERE task.id = %(id_1)s 
 LIMIT %(param_1)s
2025-02-11 09:22:02,269 INFO: [generated in 0.00038s] {'id_1': 87, 'param_1': 1}
2025-02-11 09:22:02,270 DEBUG: Col ('task_parent_id',)
2025-02-11 09:22:02,270 DEBUG: Row (84,)
2025-02-11 09:22:02,271 INFO: SELECT task.parent_id AS task_parent_id 
FROM task 
WHERE task.id = %(id_1)s 
 LIMIT %(param_1)s
2025-02-11 09:22:02,271 INFO: [cached since 0.002076s ago] {'id_1': 84, 'param_1': 1}
2025-02-11 09:22:02,271 DEBUG: Col ('task_parent_id',)
2025-02-11 09:22:02,271 DEBUG: Row (None,)
2025-02-11 09:22:02,272 INFO: Circular reference check passed.
2025-02-11 09:22:02,272 INFO: SELECT task.task_type AS task_task_type 
FROM task 
WHERE task.id = %(id_1)s 
 LIMIT %(param_1)s
2025-02-11 09:22:02,273 INFO: [generated in 0.00020s] {'id_1': 87, 'param_1': 1}
2025-02-11 09:22:02,273 DEBUG: Col ('task_task_type',)
2025-02-11 09:22:02,273 DEBUG: Row ('User Story',)
2025-02-11 09:22:02,273 DEBUG: Validating hierarchy: Task 95, Parent Type: User Story
2025-02-11 09:22:02,273 INFO: Hierarchy validation passed for Task 95.
2025-02-11 09:22:02,273 INFO: Validation passed for parent_id: 87
2025-02-11 09:22:02,274 DEBUG: Validating task_type change for Task 95: Subtask
2025-02-11 09:22:02,275 INFO: SELECT task.task_type AS task_task_type 
FROM task 
WHERE task.id = %(id_1)s 
 LIMIT %(param_1)s
2025-02-11 09:22:02,275 INFO: [cached since 0.002414s ago] {'id_1': 87, 'param_1': 1}
2025-02-11 09:22:02,275 DEBUG: Col ('task_task_type',)
2025-02-11 09:22:02,275 DEBUG: Row ('User Story',)
2025-02-11 09:22:02,276 DEBUG: Validating hierarchy: Task Type: Subtask, Parent Type: User Story
2025-02-11 09:22:02,276 INFO: Hierarchy validation passed for Task 95.
2025-02-11 09:22:02,276 INFO: Validation passed for task_type: Subtask
2025-02-11 09:22:02,277 INFO: UPDATE task SET updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-02-11 09:22:02,277 INFO: [generated in 0.00018s] {'updated_at': datetime.datetime(2025, 2, 11, 8, 22, 2, 276492), 'task_id': 95}
2025-02-11 09:22:02,278 INFO: COMMIT
2025-02-11 09:22:02,278 INFO: Task ID 95 updated successfully.
2025-02-11 09:22:02,278 INFO: BEGIN (implicit)
2025-02-11 09:22:02,279 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:22:02,279 INFO: [cached since 138.2s ago] {'pk_1': 95}
2025-02-11 09:22:02,279 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:22:02,279 DEBUG: Row (95, 'Develop backend API for managing contributor roles', 67, 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'Subtask', False, False, 'Not Started', 87, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 2, 11, 8, 22, 2, 276492), None)
2025-02-11 09:22:02,280 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:22:02,280 INFO: [cached since 589s ago] {'pk_1': 5}
2025-02-11 09:22:02,280 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:22:02,280 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:22:02,280 INFO: ROLLBACK
2025-02-11 09:22:02,281 INFO: 127.0.0.1 - - [11/Feb/2025 09:22:02] "POST /api/tasks HTTP/1.1" 200 -
2025-02-11 09:22:04,694 INFO: Fetching task details for Task ID 94.
2025-02-11 09:22:04,695 INFO: Fetching task with ID 94.
2025-02-11 09:22:04,695 INFO: BEGIN (implicit)
2025-02-11 09:22:04,696 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:22:04,696 INFO: [cached since 591.9s ago] {'pk_1': 94}
2025-02-11 09:22:04,697 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:22:04,697 DEBUG: Row (94, 'Add database support for contributor roles', 66, 'Introduce a roles table and link contributors to specific roles for tasks.', 'Subtask', False, False, 'Not Started', 87, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 1, 16, 19, 22, 36, 329887), None)
2025-02-11 09:22:04,697 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x12b7d3b30>, 'sort_order': 66, 'task_type': 'Subtask', 'contributor_id': None, 'id': 94, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), 'status': 'Not Started', 'project_id': 6, 'updated_at': datetime.datetime(2025, 1, 16, 19, 22, 36, 329887), 'name': 'Add database support for contributor roles', 'description': 'Introduce a roles table and link contributors to specific roles for tasks.', 'parent_id': 87, 'story_points': 5, 'completed_date': None}
2025-02-11 09:22:04,698 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-11 09:22:04,698 INFO: [cached since 591.9s ago] {'pk_1': 6}
2025-02-11 09:22:04,699 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at')
2025-02-11 09:22:04,699 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298))
2025-02-11 09:22:04,699 INFO: Task ID 94 fetched with parent ID: 87
2025-02-11 09:22:04,700 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:22:04,700 INFO: [cached since 591.9s ago] {'pk_1': 87}
2025-02-11 09:22:04,700 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:22:04,701 DEBUG: Row (87, 'Create and customize contributor roles', 64, 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'User Story', False, False, 'Not Started', 84, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), None)
2025-02-11 09:22:04,701 INFO: Task with ID 94 fetched successfully.
2025-02-11 09:22:04,701 DEBUG: Fetched Task Data: {'id': 94, 'name': 'Add database support for contributor roles', 'description': 'Introduce a roles table and link contributors to specific roles for tasks.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-01-16T19:22:36.329887', 'contributor_name': 'Unassigned', 'parent': {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-01-16T19:22:36.326985'}}
2025-02-11 09:22:04,701 INFO: Task details fetched successfully for Task ID 94.
2025-02-11 09:22:04,702 INFO: ROLLBACK
2025-02-11 09:22:04,702 INFO: 127.0.0.1 - - [11/Feb/2025 09:22:04] "GET /api/tasks/94 HTTP/1.1" 200 -
2025-02-11 09:22:05,214 INFO: Fetching task details for Task ID 87.
2025-02-11 09:22:05,216 INFO: Fetching task with ID 87.
2025-02-11 09:22:05,217 INFO: BEGIN (implicit)
2025-02-11 09:22:05,218 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:22:05,218 INFO: [cached since 592.5s ago] {'pk_1': 87}
2025-02-11 09:22:05,219 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:22:05,220 DEBUG: Row (87, 'Create and customize contributor roles', 64, 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'User Story', False, False, 'Not Started', 84, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), None)
2025-02-11 09:22:05,220 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x12b61d1f0>, 'sort_order': 64, 'task_type': 'User Story', 'contributor_id': None, 'id': 87, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), 'status': 'Not Started', 'project_id': 6, 'updated_at': datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'parent_id': 84, 'story_points': 8, 'completed_date': None}
2025-02-11 09:22:05,220 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-11 09:22:05,220 INFO: [cached since 592.5s ago] {'pk_1': 6}
2025-02-11 09:22:05,221 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at')
2025-02-11 09:22:05,221 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298))
2025-02-11 09:22:05,222 INFO: Task ID 87 fetched with parent ID: 84
2025-02-11 09:22:05,223 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:22:05,223 INFO: [cached since 592.5s ago] {'pk_1': 84}
2025-02-11 09:22:05,223 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:22:05,224 DEBUG: Row (84, 'Enhance Task Contributor Management', 55, 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI ... (335 characters truncated) ... onalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'Epic', False, False, 'Not Started', None, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 30, 21, 149869), datetime.datetime(2025, 1, 16, 19, 22, 36, 311560), None)
2025-02-11 09:22:05,224 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:22:05,224 INFO: [cached since 591.9s ago] {'pk_1': 5}
2025-02-11 09:22:05,224 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:22:05,224 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:22:05,225 INFO: Task with ID 87 fetched successfully.
2025-02-11 09:22:05,225 DEBUG: Fetched Task Data: {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-01-16T19:22:36.326985', 'contributor_name': 'Unassigned', 'parent': {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t•\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t•\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-01-16T19:22:36.311560'}}
2025-02-11 09:22:05,225 INFO: Task details fetched successfully for Task ID 87.
2025-02-11 09:22:05,225 INFO: ROLLBACK
2025-02-11 09:22:05,226 INFO: 127.0.0.1 - - [11/Feb/2025 09:22:05] "GET /api/tasks/87 HTTP/1.1" 200 -
2025-02-11 09:22:05,935 INFO: Fetching task details for Task ID 94.
2025-02-11 09:22:05,935 INFO: Fetching task with ID 94.
2025-02-11 09:22:05,936 INFO: BEGIN (implicit)
2025-02-11 09:22:05,936 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:22:05,936 INFO: [cached since 593.2s ago] {'pk_1': 94}
2025-02-11 09:22:05,937 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:22:05,937 DEBUG: Row (94, 'Add database support for contributor roles', 66, 'Introduce a roles table and link contributors to specific roles for tasks.', 'Subtask', False, False, 'Not Started', 87, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 1, 16, 19, 22, 36, 329887), None)
2025-02-11 09:22:05,938 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x12b7d2690>, 'sort_order': 66, 'task_type': 'Subtask', 'contributor_id': None, 'id': 94, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), 'status': 'Not Started', 'project_id': 6, 'updated_at': datetime.datetime(2025, 1, 16, 19, 22, 36, 329887), 'name': 'Add database support for contributor roles', 'description': 'Introduce a roles table and link contributors to specific roles for tasks.', 'parent_id': 87, 'story_points': 5, 'completed_date': None}
2025-02-11 09:22:05,938 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-11 09:22:05,938 INFO: [cached since 593.2s ago] {'pk_1': 6}
2025-02-11 09:22:05,939 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at')
2025-02-11 09:22:05,939 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298))
2025-02-11 09:22:05,940 INFO: Task ID 94 fetched with parent ID: 87
2025-02-11 09:22:05,940 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:22:05,940 INFO: [cached since 593.2s ago] {'pk_1': 87}
2025-02-11 09:22:05,941 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:22:05,942 DEBUG: Row (87, 'Create and customize contributor roles', 64, 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'User Story', False, False, 'Not Started', 84, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), None)
2025-02-11 09:22:05,942 INFO: Task with ID 94 fetched successfully.
2025-02-11 09:22:05,943 DEBUG: Fetched Task Data: {'id': 94, 'name': 'Add database support for contributor roles', 'description': 'Introduce a roles table and link contributors to specific roles for tasks.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-01-16T19:22:36.329887', 'contributor_name': 'Unassigned', 'parent': {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-01-16T19:22:36.326985'}}
2025-02-11 09:22:05,943 INFO: Task details fetched successfully for Task ID 94.
2025-02-11 09:22:05,943 INFO: ROLLBACK
2025-02-11 09:22:05,944 INFO: 127.0.0.1 - - [11/Feb/2025 09:22:05] "GET /api/tasks/94 HTTP/1.1" 200 -
2025-02-11 09:22:06,149 INFO: Fetching task details for Task ID 87.
2025-02-11 09:22:06,149 INFO: Fetching task with ID 87.
2025-02-11 09:22:06,150 INFO: BEGIN (implicit)
2025-02-11 09:22:06,151 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:22:06,151 INFO: [cached since 593.4s ago] {'pk_1': 87}
2025-02-11 09:22:06,152 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:22:06,152 DEBUG: Row (87, 'Create and customize contributor roles', 64, 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'User Story', False, False, 'Not Started', 84, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), None)
2025-02-11 09:22:06,153 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x12b7d3d70>, 'sort_order': 64, 'task_type': 'User Story', 'contributor_id': None, 'id': 87, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), 'status': 'Not Started', 'project_id': 6, 'updated_at': datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'parent_id': 84, 'story_points': 8, 'completed_date': None}
2025-02-11 09:22:06,153 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-11 09:22:06,153 INFO: [cached since 593.4s ago] {'pk_1': 6}
2025-02-11 09:22:06,154 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at')
2025-02-11 09:22:06,154 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298))
2025-02-11 09:22:06,154 INFO: Task ID 87 fetched with parent ID: 84
2025-02-11 09:22:06,155 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:22:06,156 INFO: [cached since 593.4s ago] {'pk_1': 84}
2025-02-11 09:22:06,157 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:22:06,157 DEBUG: Row (84, 'Enhance Task Contributor Management', 55, 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI ... (335 characters truncated) ... onalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'Epic', False, False, 'Not Started', None, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 30, 21, 149869), datetime.datetime(2025, 1, 16, 19, 22, 36, 311560), None)
2025-02-11 09:22:06,158 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:22:06,158 INFO: [cached since 592.9s ago] {'pk_1': 5}
2025-02-11 09:22:06,159 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:22:06,160 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:22:06,160 INFO: Task with ID 87 fetched successfully.
2025-02-11 09:22:06,160 DEBUG: Fetched Task Data: {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-01-16T19:22:36.326985', 'contributor_name': 'Unassigned', 'parent': {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t•\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t•\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-01-16T19:22:36.311560'}}
2025-02-11 09:22:06,161 INFO: Task details fetched successfully for Task ID 87.
2025-02-11 09:22:06,162 INFO: ROLLBACK
2025-02-11 09:22:06,162 INFO: 127.0.0.1 - - [11/Feb/2025 09:22:06] "GET /api/tasks/87 HTTP/1.1" 200 -
2025-02-11 09:22:08,976 INFO: Assigning contributor to task ID 94
2025-02-11 09:22:08,976 INFO: Received data: {'contributor_id': 5}
2025-02-11 09:22:08,976 INFO: Contributor ID received: 5
2025-02-11 09:22:08,977 INFO: BEGIN (implicit)
2025-02-11 09:22:08,977 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:22:08,978 INFO: [cached since 596.2s ago] {'pk_1': 94}
2025-02-11 09:22:08,979 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:22:08,979 DEBUG: Row (94, 'Add database support for contributor roles', 66, 'Introduce a roles table and link contributors to specific roles for tasks.', 'Subtask', False, False, 'Not Started', 87, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 1, 16, 19, 22, 36, 329887), None)
2025-02-11 09:22:08,980 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:22:08,981 INFO: [cached since 145s ago] {'pk_1': 5}
2025-02-11 09:22:08,982 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:22:08,983 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:22:08,984 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name 
FROM project LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project.id = project_contributor_1.project_id 
WHERE project.id = %(pk_1)s
2025-02-11 09:22:08,984 INFO: [cached since 145s ago] {'pk_1': 6}
2025-02-11 09:22:08,985 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at', 'contributor_1_id', 'contributor_1_name')
2025-02-11 09:22:08,986 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:22:08,986 INFO: UPDATE task SET contributor_id=%(contributor_id)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-02-11 09:22:08,987 INFO: [cached since 145s ago] {'contributor_id': 5, 'updated_at': datetime.datetime(2025, 2, 11, 8, 22, 8, 986884, tzinfo=datetime.timezone.utc), 'task_id': 94}
2025-02-11 09:22:08,988 INFO: COMMIT
2025-02-11 09:22:08,990 INFO: BEGIN (implicit)
2025-02-11 09:22:08,990 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:22:08,990 INFO: [cached since 145s ago] {'pk_1': 5}
2025-02-11 09:22:08,991 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:22:08,991 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:22:08,991 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:22:08,991 INFO: [cached since 145s ago] {'pk_1': 94}
2025-02-11 09:22:08,992 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:22:08,992 DEBUG: Row (94, 'Add database support for contributor roles', 66, 'Introduce a roles table and link contributors to specific roles for tasks.', 'Subtask', False, False, 'Not Started', 87, 6, 5, 5, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 2, 11, 9, 22, 8, 986884), None)
2025-02-11 09:22:08,993 INFO: ROLLBACK
2025-02-11 09:22:08,994 INFO: 127.0.0.1 - - [11/Feb/2025 09:22:08] "POST /tasks/94/assign_contributor HTTP/1.1" 200 -
2025-02-11 09:22:56,146 INFO: save_task triggered
2025-02-11 09:22:56,152 INFO: Payload received: {'title': 'Add database support for contributor roles', 'description': 'Introduce a roles table and link contributors to specific roles for tasks.', 'task_id': '94', 'project_id': '6', 'task_type': 'Subtask', 'story_points': 5, 'parent_id': 87, 'contributor_id': None, 'sort_order': 0}
2025-02-11 09:22:56,152 INFO: Update request for Task ID: 94
2025-02-11 09:22:56,167 INFO: BEGIN (implicit)
2025-02-11 09:22:56,167 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:22:56,167 INFO: [cached since 643.4s ago] {'pk_1': '94'}
2025-02-11 09:22:56,169 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:22:56,171 DEBUG: Row (94, 'Add database support for contributor roles', 66, 'Introduce a roles table and link contributors to specific roles for tasks.', 'Subtask', False, False, 'Not Started', 87, 6, 5, 5, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 2, 11, 9, 22, 8, 986884), None)
2025-02-11 09:22:56,171 DEBUG: Received update payload for Task ID 94: {'title': 'Add database support for contributor roles', 'description': 'Introduce a roles table and link contributors to specific roles for tasks.', 'task_id': '94', 'project_id': '6', 'task_type': 'Subtask', 'story_points': 5, 'parent_id': 87, 'contributor_id': None, 'sort_order': 0}
2025-02-11 09:22:56,172 DEBUG: Validating parent_id change for Task 94: 87
2025-02-11 09:22:56,172 INFO: Checking circular reference for Task 94 with Parent ID: 87
2025-02-11 09:22:56,175 INFO: SELECT task.parent_id AS task_parent_id 
FROM task 
WHERE task.id = %(id_1)s 
 LIMIT %(param_1)s
2025-02-11 09:22:56,175 INFO: [cached since 53.91s ago] {'id_1': 87, 'param_1': 1}
2025-02-11 09:22:56,176 DEBUG: Col ('task_parent_id',)
2025-02-11 09:22:56,176 DEBUG: Row (84,)
2025-02-11 09:22:56,176 INFO: SELECT task.parent_id AS task_parent_id 
FROM task 
WHERE task.id = %(id_1)s 
 LIMIT %(param_1)s
2025-02-11 09:22:56,177 INFO: [cached since 53.91s ago] {'id_1': 84, 'param_1': 1}
2025-02-11 09:22:56,177 DEBUG: Col ('task_parent_id',)
2025-02-11 09:22:56,177 DEBUG: Row (None,)
2025-02-11 09:22:56,177 INFO: Circular reference check passed.
2025-02-11 09:22:56,177 INFO: SELECT task.task_type AS task_task_type 
FROM task 
WHERE task.id = %(id_1)s 
 LIMIT %(param_1)s
2025-02-11 09:22:56,178 INFO: [cached since 53.91s ago] {'id_1': 87, 'param_1': 1}
2025-02-11 09:22:56,178 DEBUG: Col ('task_task_type',)
2025-02-11 09:22:56,178 DEBUG: Row ('User Story',)
2025-02-11 09:22:56,178 DEBUG: Validating hierarchy: Task 94, Parent Type: User Story
2025-02-11 09:22:56,178 INFO: Hierarchy validation passed for Task 94.
2025-02-11 09:22:56,178 INFO: Validation passed for parent_id: 87
2025-02-11 09:22:56,179 DEBUG: Validating task_type change for Task 94: Subtask
2025-02-11 09:22:56,179 INFO: SELECT task.task_type AS task_task_type 
FROM task 
WHERE task.id = %(id_1)s 
 LIMIT %(param_1)s
2025-02-11 09:22:56,179 INFO: [cached since 53.91s ago] {'id_1': 87, 'param_1': 1}
2025-02-11 09:22:56,180 DEBUG: Col ('task_task_type',)
2025-02-11 09:22:56,180 DEBUG: Row ('User Story',)
2025-02-11 09:22:56,180 DEBUG: Validating hierarchy: Task Type: Subtask, Parent Type: User Story
2025-02-11 09:22:56,180 INFO: Hierarchy validation passed for Task 94.
2025-02-11 09:22:56,181 INFO: Validation passed for task_type: Subtask
2025-02-11 09:22:56,181 INFO: UPDATE task SET updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-02-11 09:22:56,182 INFO: [cached since 53.91s ago] {'updated_at': datetime.datetime(2025, 2, 11, 8, 22, 56, 181530), 'task_id': 94}
2025-02-11 09:22:56,185 INFO: COMMIT
2025-02-11 09:22:56,192 INFO: Task ID 94 updated successfully.
2025-02-11 09:22:56,193 INFO: BEGIN (implicit)
2025-02-11 09:22:56,193 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:22:56,194 INFO: [cached since 192.2s ago] {'pk_1': 94}
2025-02-11 09:22:56,213 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:22:56,213 DEBUG: Row (94, 'Add database support for contributor roles', 66, 'Introduce a roles table and link contributors to specific roles for tasks.', 'Subtask', False, False, 'Not Started', 87, 6, 5, 5, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 2, 11, 8, 22, 56, 181530), None)
2025-02-11 09:22:56,237 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:22:56,246 INFO: [cached since 643s ago] {'pk_1': 5}
2025-02-11 09:22:56,253 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:22:56,254 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:22:56,288 INFO: ROLLBACK
2025-02-11 09:22:56,293 INFO: 127.0.0.1 - - [11/Feb/2025 09:22:56] "POST /api/tasks HTTP/1.1" 200 -
2025-02-11 09:23:02,894 INFO: Entering list_tasks route...
2025-02-11 09:23:02,895 DEBUG: Filters used: {'is_archived': False}
2025-02-11 09:23:02,895 DEBUG: Applying filters: {'is_archived': False}
2025-02-11 09:23:02,903 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-11 09:23:02,903 INFO: BEGIN (implicit)
2025-02-11 09:23:02,904 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-11 09:23:02,904 INFO: [cached since 657.7s ago] {'param_1': 110, 'param_2': 0}
2025-02-11 09:23:02,907 DEBUG: Col ('anon_1_task_id', 'anon_1_task_name', 'anon_1_task_sort_order', 'anon_1_task_description', 'anon_1_task_task_type', 'anon_1_task_is_archived', 'anon_1_task_completed', 'anon_1_task_status', 'anon_1_task_parent_id', 'anon_1_task_project_id', 'anon_1_task_contributor_id', 'anon_1_task_story_points', 'anon_1_task_created_at', 'anon_1_task_updated_at', 'anon_1_task_completed_date', 'task_1_id', 'task_1_name', 'task_1_sort_order', 'task_1_description', 'task_1_task_type', 'task_1_is_archived', 'task_1_completed', 'task_1_status', 'task_1_parent_id', 'task_1_project_id', 'task_1_contributor_id', 'task_1_story_points', 'task_1_created_at', 'task_1_updated_at', 'task_1_completed_date', 'contributor_1_id', 'contributor_1_name', 'project_1_id', 'project_1_name', 'project_1_start_date', 'project_1_end_date', 'project_1_scope', 'project_1_completed_story_points', 'project_1_created_at', 'project_1_updated_at', 'contributor_2_id', 'contributor_2_name')
2025-02-11 09:23:02,909 DEBUG: Row (290, 'issue: error when changing task type and', 0, 'issue: error when changing task type and parent task before saving', 'Subtask', False, False, 'Not Started', 130, 6, None, 0, datetime.datetime(2025, 2, 10, 9, 0, 3, 417734), datetime.datetime(2025, 2, 10, 9, 15, 9, 284969), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,909 DEBUG: Row (298, 'example user story with parent epic 297', 0, '', 'User Story', False, False, 'Not Started', 297, 1, None, 0, datetime.datetime(2025, 2, 10, 9, 41, 1, 907455), datetime.datetime(2025, 2, 10, 14, 59, 4, 142570), None, 299, 'example sub task with parent user story 298', 0, 'Test update 1\nTest update 2\nTest update 3', 'Subtask', False, False, 'Not Started', 298, 1, None, 0, datetime.datetime(2025, 2, 10, 9, 42, 38, 905700), datetime.datetime(2025, 2, 10, 23, 23, 8, 671464), None, None, None, 1, 'Project Alpha', datetime.date(2024, 1, 1), datetime.date(2024, 12, 31), None, 0, datetime.datetime(2024, 12, 11, 1, 16, 28, 688881), datetime.datetime(2024, 12, 11, 1, 16, 28, 688881), None, None)
2025-02-11 09:23:02,910 DEBUG: Row (275, 'add sprints, cycles', 0, 'Make naming customizable', 'Epic', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 0, 48, 52, 680022), datetime.datetime(2025, 2, 10, 8, 38, 37, 622196), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:23:02,910 DEBUG: Row (276, 'add support for priority', 0, '', 'Epic', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 0, 49, 26, 189497), datetime.datetime(2025, 2, 10, 8, 28, 47, 447612), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:23:02,910 DEBUG: Row (264, 'close all / open all childtasks', 0, '', 'User Story', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 8, 2, 25, 20, 101418), datetime.datetime(2025, 2, 10, 8, 47, 14, 915970), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:23:02,911 DEBUG: Row (285, 'add text truncation to project names in task list', 0, '', 'Epic', False, False, 'Not Started', None, 6, None, 0, datetime.datetime(2025, 2, 10, 8, 45, 47, 27805), datetime.datetime(2025, 2, 10, 9, 45, 47, 29729), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,911 DEBUG: Row (257, 'Update Task API Integration', 0, "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'Subtask', False, False, 'Not Started', 240, 6, 5, 3, datetime.datetime(2025, 2, 5, 22, 55, 49, 566819), datetime.datetime(2025, 2, 5, 22, 18, 17, 807154), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:23:02,911 DEBUG: Row (294, 'issue: task table filters not working', 0, '', 'User Story', False, False, 'Not Started', None, 6, None, 0, datetime.datetime(2025, 2, 10, 9, 19, 21, 22598), datetime.datetime(2025, 2, 10, 10, 19, 21, 24676), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,911 DEBUG: Row (267, 'improvements to toggles and nested tasks', 0, '', 'Epic', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 8, 2, 29, 12, 464594), datetime.datetime(2025, 2, 10, 8, 47, 24, 581680), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:23:02,911 DEBUG: Row (271, 'make sure dynamically added rows has the exact same styling and includes every element', 0, 'Missing elements:\n- Open link\n- Default project\n- Project name should be inside a pill\n- Task type should be in a pill\n- Estimations should be 0, not N/A\n- Make sure font size is matching\n- status should have the dropdown inside a pill\n', 'Epic', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 0, 21, 7, 108431), datetime.datetime(2025, 2, 10, 8, 38, 47, 340105), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:23:02,911 DEBUG: Row (283, 'fix update title', 0, '', 'User Story', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 8, 41, 58, 769700), datetime.datetime(2025, 2, 10, 8, 46, 47, 282087), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:23:02,911 DEBUG: Row (273, 'disable parent task selector in epics', 0, 'and add text, Epic can´t have parent tasks', 'Epic', False, False, 'Not Started', None, 6, None, 0, datetime.datetime(2025, 2, 10, 0, 45, 20, 740910), datetime.datetime(2025, 2, 10, 8, 39, 17, 639890), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,911 DEBUG: Row (269, 'fix styling for sweetalert', 0, '', 'User Story', False, False, 'In Progress', None, 6, None, 0, datetime.datetime(2025, 2, 8, 15, 54, 56, 717846), datetime.datetime(2025, 2, 10, 8, 39, 32, 172437), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,912 DEBUG: Row (286, 'add support for labels/tags', 0, '', 'User Story', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 8, 46, 23, 985620), datetime.datetime(2025, 2, 10, 9, 46, 23, 987564), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:23:02,912 DEBUG: Row (299, 'example sub task with parent user story 298', 0, 'Test update 1\nTest update 2\nTest update 3', 'Subtask', False, False, 'Not Started', 298, 1, None, 0, datetime.datetime(2025, 2, 10, 9, 42, 38, 905700), datetime.datetime(2025, 2, 10, 23, 23, 8, 671464), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 1, 'Project Alpha', datetime.date(2024, 1, 1), datetime.date(2024, 12, 31), None, 0, datetime.datetime(2024, 12, 11, 1, 16, 28, 688881), datetime.datetime(2024, 12, 11, 1, 16, 28, 688881), None, None)
2025-02-11 09:23:02,912 DEBUG: Row (266, 'highlight the nested tasks', 0, '', 'User Story', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 8, 2, 28, 30, 382949), datetime.datetime(2025, 2, 10, 8, 47, 4, 382929), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:23:02,912 DEBUG: Row (279, 'github integration', 0, '', 'Epic', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 7, 36, 38, 238202), datetime.datetime(2025, 2, 10, 8, 39, 24, 168451), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:23:02,912 DEBUG: Row (289, 'issue: parent task is lost when updating task', 0, '', 'Subtask', False, False, 'Not Started', None, 6, None, 0, datetime.datetime(2025, 2, 10, 8, 56, 25, 273984), datetime.datetime(2025, 2, 10, 9, 12, 47, 626993), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,912 DEBUG: Row (272, 'implement a markdown text editor like notion', 0, '', 'Epic', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 0, 28, 18, 300231), datetime.datetime(2025, 2, 10, 8, 28, 39, 669255), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:23:02,912 DEBUG: Row (278, 'search feature for tasks list', 0, '', 'Epic', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 7, 36, 3, 369833), datetime.datetime(2025, 2, 10, 8, 39, 4, 5957), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:23:02,912 DEBUG: Row (281, 'add high level plan', 0, 'Add some sort of high level plan that aims to keep PM/PO´s on track and not get lost into the details of an overwhelminly large backlog', 'Epic', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 8, 27, 1, 218606), datetime.datetime(2025, 2, 10, 8, 38, 54, 754760), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:23:02,912 DEBUG: Row (287, 'when moving a parent item to another project make sure the subtasks are moved as well', 0, '', 'User Story', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 8, 48, 31, 986870), datetime.datetime(2025, 2, 10, 9, 48, 31, 988859), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:23:02,912 DEBUG: Row (293, 'click on title should copy the task title and id to clipboard', 0, '', 'User Story', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 9, 16, 33, 508209), datetime.datetime(2025, 2, 10, 10, 16, 33, 510414), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:23:02,912 DEBUG: Row (277, 'custom task workflow statuses', 0, 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- ... (780 characters truncated) ...  tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'Epic', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 7, 16, 3, 352588), datetime.datetime(2025, 2, 10, 8, 38, 28, 123328), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:23:02,912 DEBUG: Row (274, 'add support for goals, initiatives, okr´s', 0, 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n', 'Epic', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 0, 46, 27, 204912), datetime.datetime(2025, 2, 10, 8, 28, 17, 663922), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:23:02,913 DEBUG: Row (280, 'logging (task and project history)', 0, '', 'Epic', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 7, 37, 44, 435112), datetime.datetime(2025, 2, 10, 8, 28, 28, 947805), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:23:02,913 DEBUG: Row (282, 'implement same task list in projects but filtered on project', 0, '', 'Epic', False, False, 'Not Started', None, 6, None, 0, datetime.datetime(2025, 2, 10, 8, 41, 17, 786154), datetime.datetime(2025, 2, 10, 9, 41, 17, 787861), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,913 DEBUG: Row (296, 'issue: contributor is lost after updating task', 0, '', 'User Story', False, False, 'Not Started', None, 6, None, 0, datetime.datetime(2025, 2, 10, 9, 26, 43, 881947), datetime.datetime(2025, 2, 10, 10, 26, 43, 884004), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,913 DEBUG: Row (288, 'when trying to move subtask to another project, make sure a warning is displayed', 0, 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be l ... (312 characters truncated) ... , Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'Epic', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 8, 54, 36, 297869), datetime.datetime(2025, 2, 10, 8, 54, 51, 840686), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:23:02,913 DEBUG: Row (284, 'add type "issue/bug"', 0, '', 'Epic', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 8, 42, 27, 719439), datetime.datetime(2025, 2, 10, 9, 42, 27, 720908), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:23:02,913 DEBUG: Row (295, 'issue: drag and drop errors', 0, '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'User Story', False, False, 'Not Started', None, 6, None, 0, datetime.datetime(2025, 2, 10, 9, 22, 54, 461413), datetime.datetime(2025, 2, 10, 10, 22, 54, 462542), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,913 DEBUG: Row (297, 'example parent epic', 0, '', 'Epic', False, False, 'Not Started', None, 1, None, 0, datetime.datetime(2025, 2, 10, 9, 39, 51, 620509), datetime.datetime(2025, 2, 10, 10, 39, 51, 622712), None, 298, 'example user story with parent epic 297', 0, '', 'User Story', False, False, 'Not Started', 297, 1, None, 0, datetime.datetime(2025, 2, 10, 9, 41, 1, 907455), datetime.datetime(2025, 2, 10, 14, 59, 4, 142570), None, None, None, 1, 'Project Alpha', datetime.date(2024, 1, 1), datetime.date(2024, 12, 31), None, 0, datetime.datetime(2024, 12, 11, 1, 16, 28, 688881), datetime.datetime(2024, 12, 11, 1, 16, 28, 688881), None, None)
2025-02-11 09:23:02,913 DEBUG: Row (292, 'issue: assigning contributor does not work', 0, '', 'User Story', False, False, 'Not Started', None, 6, None, 0, datetime.datetime(2025, 2, 10, 9, 11, 12, 273779), datetime.datetime(2025, 2, 10, 10, 11, 12, 274809), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,913 DEBUG: Row (265, 'smooth transition for toggles', 0, '', 'User Story', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 8, 2, 27, 23, 422612), datetime.datetime(2025, 2, 10, 8, 46, 55, 831743), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:23:02,913 DEBUG: Row (270, 'the newest task', 0, '', 'Subtask', False, False, 'Not Started', None, 1, None, 0, datetime.datetime(2025, 2, 10, 0, 7, 34, 368035), datetime.datetime(2025, 2, 10, 1, 7, 34, 372478), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 1, 'Project Alpha', datetime.date(2024, 1, 1), datetime.date(2024, 12, 31), None, 0, datetime.datetime(2024, 12, 11, 1, 16, 28, 688881), datetime.datetime(2024, 12, 11, 1, 16, 28, 688881), None, None)
2025-02-11 09:23:02,913 DEBUG: Row (291, 'add dropdowns in task list for changing: project, assigned to, estimate and task type (labels/tags)', 0, '', 'User Story', False, False, 'Not Started', None, 7, None, 0, datetime.datetime(2025, 2, 10, 9, 9, 52, 988609), datetime.datetime(2025, 2, 10, 10, 9, 52, 997455), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259), None, None)
2025-02-11 09:23:02,913 DEBUG: Row (136, 'Page scroll should stay in position when reloading', 2, '', 'User Story', False, False, 'Not Started', None, 6, None, 0, datetime.datetime(2025, 1, 16, 18, 21, 50, 187247), datetime.datetime(2025, 1, 16, 19, 22, 36, 214901), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,913 DEBUG: Row (130, 'Implement the Map of Task Relationships solution for drag-and-drop', 3, 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'User Story', False, False, 'Not Started', None, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 41, 28, 93022), datetime.datetime(2025, 1, 16, 19, 22, 36, 216705), None, 134, 'Step 2: Update the Backend in routes.py', 6, 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\ ... (8854 characters truncated) ... \tError Handling:\n\t•\tCaptures and logs exceptions during processing or committing.\n\t•\tProvides meaningful error messages to the frontend.\n\n\n', 'Subtask', False, False, 'Completed', 130, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 46, 29, 348853), datetime.datetime(2025, 2, 6, 21, 59, 21, 617065), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,914 DEBUG: Row (130, 'Implement the Map of Task Relationships solution for drag-and-drop', 3, 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'User Story', False, False, 'Not Started', None, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 41, 28, 93022), datetime.datetime(2025, 1, 16, 19, 22, 36, 216705), None, 131, 'Step 5: Update utils.py', 7, 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nCha ... (5732 characters truncated) ... lationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t•\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'Subtask', False, False, 'Not Started', 130, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 41, 28, 91824), datetime.datetime(2025, 1, 16, 19, 22, 36, 236691), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,914 DEBUG: Row (130, 'Implement the Map of Task Relationships solution for drag-and-drop', 3, 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'User Story', False, False, 'Not Started', None, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 41, 28, 93022), datetime.datetime(2025, 1, 16, 19, 22, 36, 216705), None, 132, 'Step 1: Update tasks_table_interactions.js', 5, '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the  ... (5413 characters truncated) ... t to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t•\tCSRF protection is ensured by passing the token to the request headers.', 'Subtask', False, False, 'Completed', 130, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 44, 8, 338301), datetime.datetime(2025, 2, 6, 21, 59, 17, 417466), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,914 DEBUG: Row (130, 'Implement the Map of Task Relationships solution for drag-and-drop', 3, 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'User Story', False, False, 'Not Started', None, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 41, 28, 93022), datetime.datetime(2025, 1, 16, 19, 22, 36, 216705), None, 290, 'issue: error when changing task type and', 0, 'issue: error when changing task type and parent task before saving', 'Subtask', False, False, 'Not Started', 130, 6, None, 0, datetime.datetime(2025, 2, 10, 9, 0, 3, 417734), datetime.datetime(2025, 2, 10, 9, 15, 9, 284969), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,914 DEBUG: Row (130, 'Implement the Map of Task Relationships solution for drag-and-drop', 3, 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'User Story', False, False, 'Not Started', None, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 41, 28, 93022), datetime.datetime(2025, 1, 16, 19, 22, 36, 216705), None, 133, 'Step 4: Enhance Logging in models.py', 4, 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nu ... (7099 characters truncated) ... ry step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t•\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'Subtask', False, False, 'Not Started', 130, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 44, 8, 340041), datetime.datetime(2025, 1, 16, 19, 22, 36, 219710), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,914 DEBUG: Row (130, 'Implement the Map of Task Relationships solution for drag-and-drop', 3, 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'User Story', False, False, 'Not Started', None, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 41, 28, 93022), datetime.datetime(2025, 1, 16, 19, 22, 36, 216705), None, 135, 'Step 3: Update list.html', 8, 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already in ... (4578 characters truncated) ... sks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'Subtask', False, False, 'Not Started', 130, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 46, 29, 349784), datetime.datetime(2025, 1, 16, 19, 22, 36, 238473), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,914 DEBUG: Row (133, 'Step 4: Enhance Logging in models.py', 4, 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nu ... (7099 characters truncated) ... ry step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t•\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'Subtask', False, False, 'Not Started', 130, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 44, 8, 340041), datetime.datetime(2025, 1, 16, 19, 22, 36, 219710), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,915 DEBUG: Row (132, 'Step 1: Update tasks_table_interactions.js', 5, '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the  ... (5413 characters truncated) ... t to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t•\tCSRF protection is ensured by passing the token to the request headers.', 'Subtask', False, False, 'Completed', 130, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 44, 8, 338301), datetime.datetime(2025, 2, 6, 21, 59, 17, 417466), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,915 DEBUG: Row (134, 'Step 2: Update the Backend in routes.py', 6, 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\ ... (8854 characters truncated) ... \tError Handling:\n\t•\tCaptures and logs exceptions during processing or committing.\n\t•\tProvides meaningful error messages to the frontend.\n\n\n', 'Subtask', False, False, 'Completed', 130, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 46, 29, 348853), datetime.datetime(2025, 2, 6, 21, 59, 21, 617065), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,916 DEBUG: Row (131, 'Step 5: Update utils.py', 7, 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nCha ... (5732 characters truncated) ... lationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t•\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'Subtask', False, False, 'Not Started', 130, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 41, 28, 91824), datetime.datetime(2025, 1, 16, 19, 22, 36, 236691), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,916 DEBUG: Row (135, 'Step 3: Update list.html', 8, 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already in ... (4578 characters truncated) ... sks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'Subtask', False, False, 'Not Started', 130, 6, None, 0, datetime.datetime(2025, 1, 15, 9, 46, 29, 349784), datetime.datetime(2025, 1, 16, 19, 22, 36, 238473), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,916 DEBUG: Row (82, 'Implement Third-Party Authentication', 9, 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitH ... (1227 characters truncated) ... egration (if applicable):\n\t•\tAdd “Login with Google” or “Login with GitHub” buttons.\n\t•\tRedirect to your backend’s OAuth endpoint when clicked.', 'Epic', False, False, 'Not Started', None, 6, 5, 8, datetime.datetime(2025, 1, 7, 12, 15, 54, 291625), datetime.datetime(2025, 1, 16, 19, 22, 36, 239866), None, 62, 'Add OAuth integration for Google Login', 10, 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'User Story', False, False, 'Not Started', 82, 6, None, 8, datetime.datetime(2025, 1, 7, 11, 39, 12, 249531), datetime.datetime(2025, 1, 16, 19, 22, 36, 241200), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:23:02,917 DEBUG: Row (82, 'Implement Third-Party Authentication', 9, 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitH ... (1227 characters truncated) ... egration (if applicable):\n\t•\tAdd “Login with Google” or “Login with GitHub” buttons.\n\t•\tRedirect to your backend’s OAuth endpoint when clicked.', 'Epic', False, False, 'Not Started', None, 6, 5, 8, datetime.datetime(2025, 1, 7, 12, 15, 54, 291625), datetime.datetime(2025, 1, 16, 19, 22, 36, 239866), None, 63, 'Add OAuth integration for GitHub Login', 14, 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'User Story', False, False, 'Not Started', 82, 6, None, 8, datetime.datetime(2025, 1, 7, 11, 39, 12, 249531), datetime.datetime(2025, 1, 16, 19, 22, 36, 246358), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:23:02,917 DEBUG: Row (62, 'Add OAuth integration for Google Login', 10, 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'User Story', False, False, 'Not Started', 82, 6, None, 8, datetime.datetime(2025, 1, 7, 11, 39, 12, 249531), datetime.datetime(2025, 1, 16, 19, 22, 36, 241200), None, 67, 'Test Google OAuth flow', 12, 'Verify the OAuth flow using test accounts and check the token exchange.', 'Subtask', False, False, 'Not Started', 62, 6, None, 5, datetime.datetime(2025, 1, 7, 12, 3, 52, 62783), datetime.datetime(2025, 1, 16, 19, 22, 36, 243780), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,917 DEBUG: Row (62, 'Add OAuth integration for Google Login', 10, 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'User Story', False, False, 'Not Started', 82, 6, None, 8, datetime.datetime(2025, 1, 7, 11, 39, 12, 249531), datetime.datetime(2025, 1, 16, 19, 22, 36, 241200), None, 65, 'Implement backend endpoints for Google OAuth', 13, 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'Subtask', False, False, 'Not Started', 62, 6, None, 5, datetime.datetime(2025, 1, 7, 11, 58, 39, 269319), datetime.datetime(2025, 1, 16, 19, 22, 36, 244932), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,917 DEBUG: Row (62, 'Add OAuth integration for Google Login', 10, 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'User Story', False, False, 'Not Started', 82, 6, None, 8, datetime.datetime(2025, 1, 7, 11, 39, 12, 249531), datetime.datetime(2025, 1, 16, 19, 22, 36, 241200), None, 64, 'Setup project credentials for Google API', 11, 'Generate client ID and secret from Google API Console for your application.', 'Subtask', False, False, 'Not Started', 62, 6, None, 3, datetime.datetime(2025, 1, 7, 11, 58, 39, 269319), datetime.datetime(2025, 1, 16, 19, 22, 36, 242497), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,917 DEBUG: Row (64, 'Setup project credentials for Google API', 11, 'Generate client ID and secret from Google API Console for your application.', 'Subtask', False, False, 'Not Started', 62, 6, None, 3, datetime.datetime(2025, 1, 7, 11, 58, 39, 269319), datetime.datetime(2025, 1, 16, 19, 22, 36, 242497), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,917 DEBUG: Row (67, 'Test Google OAuth flow', 12, 'Verify the OAuth flow using test accounts and check the token exchange.', 'Subtask', False, False, 'Not Started', 62, 6, None, 5, datetime.datetime(2025, 1, 7, 12, 3, 52, 62783), datetime.datetime(2025, 1, 16, 19, 22, 36, 243780), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,917 DEBUG: Row (65, 'Implement backend endpoints for Google OAuth', 13, 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'Subtask', False, False, 'Not Started', 62, 6, None, 5, datetime.datetime(2025, 1, 7, 11, 58, 39, 269319), datetime.datetime(2025, 1, 16, 19, 22, 36, 244932), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,918 DEBUG: Row (63, 'Add OAuth integration for GitHub Login', 14, 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'User Story', False, False, 'Not Started', 82, 6, None, 8, datetime.datetime(2025, 1, 7, 11, 39, 12, 249531), datetime.datetime(2025, 1, 16, 19, 22, 36, 246358), None, 69, 'Handle callback from GitHub', 16, 'Implement the callback endpoint to process the authorization code from GitHub.', 'Subtask', False, False, 'Not Started', 63, 6, None, 5, datetime.datetime(2025, 1, 7, 12, 3, 52, 62783), datetime.datetime(2025, 1, 16, 19, 22, 36, 248912), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,918 DEBUG: Row (63, 'Add OAuth integration for GitHub Login', 14, 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'User Story', False, False, 'Not Started', 82, 6, None, 8, datetime.datetime(2025, 1, 7, 11, 39, 12, 249531), datetime.datetime(2025, 1, 16, 19, 22, 36, 246358), None, 68, 'Register application in GitHub Developer Console', 15, 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'Subtask', False, False, 'Not Started', 63, 6, None, 3, datetime.datetime(2025, 1, 7, 12, 3, 52, 62783), datetime.datetime(2025, 1, 16, 19, 22, 36, 247746), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,918 DEBUG: Row (68, 'Register application in GitHub Developer Console', 15, 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'Subtask', False, False, 'Not Started', 63, 6, None, 3, datetime.datetime(2025, 1, 7, 12, 3, 52, 62783), datetime.datetime(2025, 1, 16, 19, 22, 36, 247746), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,918 DEBUG: Row (69, 'Handle callback from GitHub', 16, 'Implement the callback endpoint to process the authorization code from GitHub.', 'Subtask', False, False, 'Not Started', 63, 6, None, 5, datetime.datetime(2025, 1, 7, 12, 3, 52, 62783), datetime.datetime(2025, 1, 16, 19, 22, 36, 248912), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,918 DEBUG: Row (97, '1. Build Basic User Authentication System', 17, 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'Epic', False, False, 'Not Started', None, 6, 5, 18, datetime.datetime(2025, 1, 7, 19, 53, 50, 85064), datetime.datetime(2025, 1, 16, 19, 22, 36, 250169), None, 102, 'Logout', 31, 'As a user, I want to log out so that I can end my session securely.', 'User Story', False, False, 'Not Started', 97, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 37, 47, 717804), datetime.datetime(2025, 1, 16, 19, 22, 36, 272605), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:23:02,918 DEBUG: Row (97, '1. Build Basic User Authentication System', 17, 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'Epic', False, False, 'Not Started', None, 6, 5, 18, datetime.datetime(2025, 1, 7, 19, 53, 50, 85064), datetime.datetime(2025, 1, 16, 19, 22, 36, 250169), None, 101, '1.2 User Login', 24, 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n•\tUsers can log in with a valid email and password.\n•\tErrors are displayed for invalid credentials.\n•\tSuccessful login stores a session or JWT token.', 'User Story', False, False, 'Not Started', 97, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 37, 47, 717804), datetime.datetime(2025, 1, 16, 19, 25, 53, 687936), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:23:02,918 DEBUG: Row (97, '1. Build Basic User Authentication System', 17, 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'Epic', False, False, 'Not Started', None, 6, 5, 18, datetime.datetime(2025, 1, 7, 19, 53, 50, 85064), datetime.datetime(2025, 1, 16, 19, 22, 36, 250169), None, 100, '1.1 User Registration', 18, 'As a user, I want to register with a username, email, and password so that I can create an account and access the system.\n\n**Acceptance Criteria:** ... (148 characters truncated) ... licate accounts.\n•\tPasswords must meet complexity requirements and be securely stored.\n•\tSuccessful registration redirects users to a login page.', 'User Story', False, False, 'Not Started', 97, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 59, 9, 44667), datetime.datetime(2025, 1, 16, 19, 22, 36, 251812), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:23:02,918 DEBUG: Row (97, '1. Build Basic User Authentication System', 17, 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'Epic', False, False, 'Not Started', None, 6, 5, 18, datetime.datetime(2025, 1, 7, 19, 53, 50, 85064), datetime.datetime(2025, 1, 16, 19, 22, 36, 250169), None, 106, 'Password Reset', 28, 'As a user, I want to reset my password securely using email.', 'User Story', False, False, 'Not Started', 97, 6, None, 8, datetime.datetime(2025, 1, 7, 20, 37, 47, 717804), datetime.datetime(2025, 1, 16, 19, 22, 36, 267247), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:23:02,918 DEBUG: Row (100, '1.1 User Registration', 18, 'As a user, I want to register with a username, email, and password so that I can create an account and access the system.\n\n**Acceptance Criteria:** ... (148 characters truncated) ... licate accounts.\n•\tPasswords must meet complexity requirements and be securely stored.\n•\tSuccessful registration redirects users to a login page.', 'User Story', False, False, 'Not Started', 97, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 59, 9, 44667), datetime.datetime(2025, 1, 16, 19, 22, 36, 251812), None, 110, '1.1.4 Unit Tests for Registration', 23, 'Write unit tests for:\n\n•\tValid registration.\n•\tDuplicate username/email scenarios.\n•\tInvalid input handling.\nff', 'Subtask', False, False, 'Not Started', 100, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 40, 16, 86402), datetime.datetime(2025, 1, 16, 19, 25, 53, 686902), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,918 DEBUG: Row (100, '1.1 User Registration', 18, 'As a user, I want to register with a username, email, and password so that I can create an account and access the system.\n\n**Acceptance Criteria:** ... (148 characters truncated) ... licate accounts.\n•\tPasswords must meet complexity requirements and be securely stored.\n•\tSuccessful registration redirects users to a login page.', 'User Story', False, False, 'Not Started', 97, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 59, 9, 44667), datetime.datetime(2025, 1, 16, 19, 22, 36, 251812), None, 107, '1.1.1 Database Changes for User Registration', 19, '1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.\n   CREATE TABLE public.users (\n       id SERIAL PR ... (95 characters truncated) ... NULL,\n       password_hash VARCHAR(255) NOT NULL,\n       created_at TIMESTAMP DEFAULT NOW(),\n       updated_at TIMESTAMP DEFAULT NOW()\n);\n\n\n\n', 'Subtask', False, False, 'Not Started', 100, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 40, 16, 86402), datetime.datetime(2025, 1, 16, 19, 25, 30, 747962), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,919 DEBUG: Row (100, '1.1 User Registration', 18, 'As a user, I want to register with a username, email, and password so that I can create an account and access the system.\n\n**Acceptance Criteria:** ... (148 characters truncated) ... licate accounts.\n•\tPasswords must meet complexity requirements and be securely stored.\n•\tSuccessful registration redirects users to a login page.', 'User Story', False, False, 'Not Started', 97, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 59, 9, 44667), datetime.datetime(2025, 1, 16, 19, 22, 36, 251812), None, 109, '1.1.3 Create Frontend Registration Page', 22, 'Develop a frontend form to collect user registration details.\n•\tAdd a form for username, email, and password inputs.\n•\tUse client-side validation (e.g., email format).\n•\tSend a POST request to /api/register.\n\n', 'Subtask', False, False, 'Not Started', 100, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 40, 16, 86402), datetime.datetime(2025, 1, 16, 19, 25, 53, 684988), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,919 DEBUG: Row (100, '1.1 User Registration', 18, 'As a user, I want to register with a username, email, and password so that I can create an account and access the system.\n\n**Acceptance Criteria:** ... (148 characters truncated) ... licate accounts.\n•\tPasswords must meet complexity requirements and be securely stored.\n•\tSuccessful registration redirects users to a login page.', 'User Story', False, False, 'Not Started', 97, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 59, 9, 44667), datetime.datetime(2025, 1, 16, 19, 22, 36, 251812), None, 108, '1.1.2 Backend API for Registration', 20, '•\tCreate an endpoint POST /api/register:\n•\tValidate input fields.\n•\tHash the password using bcrypt or argon2.\n•\tInsert the user into the users table.\n•\tReturn success/failure responses.\ndddhfff\n', 'Subtask', False, False, 'Not Started', 100, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 40, 16, 86402), datetime.datetime(2025, 1, 16, 19, 25, 33, 67643), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,919 DEBUG: Row (107, '1.1.1 Database Changes for User Registration', 19, '1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.\n   CREATE TABLE public.users (\n       id SERIAL PR ... (95 characters truncated) ... NULL,\n       password_hash VARCHAR(255) NOT NULL,\n       created_at TIMESTAMP DEFAULT NOW(),\n       updated_at TIMESTAMP DEFAULT NOW()\n);\n\n\n\n', 'Subtask', False, False, 'Not Started', 100, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 40, 16, 86402), datetime.datetime(2025, 1, 16, 19, 25, 30, 747962), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,919 DEBUG: Row (108, '1.1.2 Backend API for Registration', 20, '•\tCreate an endpoint POST /api/register:\n•\tValidate input fields.\n•\tHash the password using bcrypt or argon2.\n•\tInsert the user into the users table.\n•\tReturn success/failure responses.\ndddhfff\n', 'Subtask', False, False, 'Not Started', 100, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 40, 16, 86402), datetime.datetime(2025, 1, 16, 19, 25, 33, 67643), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,919 DEBUG: Row (112, '1.2.2 Frontend Login Page', 21, 'Develop a frontend form for user login with email and password inputs.', 'Subtask', False, False, 'Not Started', 101, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 40, 32, 986548), datetime.datetime(2025, 1, 16, 19, 25, 53, 683644), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,919 DEBUG: Row (109, '1.1.3 Create Frontend Registration Page', 22, 'Develop a frontend form to collect user registration details.\n•\tAdd a form for username, email, and password inputs.\n•\tUse client-side validation (e.g., email format).\n•\tSend a POST request to /api/register.\n\n', 'Subtask', False, False, 'Not Started', 100, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 40, 16, 86402), datetime.datetime(2025, 1, 16, 19, 25, 53, 684988), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,919 DEBUG: Row (110, '1.1.4 Unit Tests for Registration', 23, 'Write unit tests for:\n\n•\tValid registration.\n•\tDuplicate username/email scenarios.\n•\tInvalid input handling.\nff', 'Subtask', False, False, 'Not Started', 100, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 40, 16, 86402), datetime.datetime(2025, 1, 16, 19, 25, 53, 686902), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,919 DEBUG: Row (101, '1.2 User Login', 24, 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n•\tUsers can log in with a valid email and password.\n•\tErrors are displayed for invalid credentials.\n•\tSuccessful login stores a session or JWT token.', 'User Story', False, False, 'Not Started', 97, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 37, 47, 717804), datetime.datetime(2025, 1, 16, 19, 25, 53, 687936), None, 111, '1.2.1 Backend API for Login', 25, 'Create POST /api/login endpoint to handle user login.\njjsjj', 'Subtask', False, False, 'Not Started', 101, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 40, 32, 986548), datetime.datetime(2025, 1, 16, 19, 25, 53, 689096), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,919 DEBUG: Row (101, '1.2 User Login', 24, 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n•\tUsers can log in with a valid email and password.\n•\tErrors are displayed for invalid credentials.\n•\tSuccessful login stores a session or JWT token.', 'User Story', False, False, 'Not Started', 97, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 37, 47, 717804), datetime.datetime(2025, 1, 16, 19, 25, 53, 687936), None, 112, '1.2.2 Frontend Login Page', 21, 'Develop a frontend form for user login with email and password inputs.', 'Subtask', False, False, 'Not Started', 101, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 40, 32, 986548), datetime.datetime(2025, 1, 16, 19, 25, 53, 683644), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,919 DEBUG: Row (101, '1.2 User Login', 24, 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n•\tUsers can log in with a valid email and password.\n•\tErrors are displayed for invalid credentials.\n•\tSuccessful login stores a session or JWT token.', 'User Story', False, False, 'Not Started', 97, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 37, 47, 717804), datetime.datetime(2025, 1, 16, 19, 25, 53, 687936), None, 114, '1.2.4 Unit Tests for Login', 27, 'Write tests for successful and failed login attempts.', 'Subtask', False, False, 'Not Started', 101, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 40, 32, 986548), datetime.datetime(2025, 1, 16, 19, 22, 36, 265866), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,919 DEBUG: Row (101, '1.2 User Login', 24, 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n•\tUsers can log in with a valid email and password.\n•\tErrors are displayed for invalid credentials.\n•\tSuccessful login stores a session or JWT token.', 'User Story', False, False, 'Not Started', 97, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 37, 47, 717804), datetime.datetime(2025, 1, 16, 19, 25, 53, 687936), None, 113, '1.2.3 Session Management', 26, 'Implement secure session handling using cookies or JWT.', 'Subtask', False, False, 'Not Started', 101, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 40, 32, 986548), datetime.datetime(2025, 1, 16, 19, 25, 20, 968680), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,919 DEBUG: Row (111, '1.2.1 Backend API for Login', 25, 'Create POST /api/login endpoint to handle user login.\njjsjj', 'Subtask', False, False, 'Not Started', 101, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 40, 32, 986548), datetime.datetime(2025, 1, 16, 19, 25, 53, 689096), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,919 DEBUG: Row (113, '1.2.3 Session Management', 26, 'Implement secure session handling using cookies or JWT.', 'Subtask', False, False, 'Not Started', 101, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 40, 32, 986548), datetime.datetime(2025, 1, 16, 19, 25, 20, 968680), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,920 DEBUG: Row (114, '1.2.4 Unit Tests for Login', 27, 'Write tests for successful and failed login attempts.', 'Subtask', False, False, 'Not Started', 101, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 40, 32, 986548), datetime.datetime(2025, 1, 16, 19, 22, 36, 265866), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,920 DEBUG: Row (106, 'Password Reset', 28, 'As a user, I want to reset my password securely using email.', 'User Story', False, False, 'Not Started', 97, 6, None, 8, datetime.datetime(2025, 1, 7, 20, 37, 47, 717804), datetime.datetime(2025, 1, 16, 19, 22, 36, 267247), None, 129, 'Testing Password Reset', 30, 'Write tests for email delivery, token validation, and password updates.', 'Subtask', False, False, 'Not Started', 106, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 41, 36, 413402), datetime.datetime(2025, 1, 16, 19, 22, 36, 270849), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,920 DEBUG: Row (106, 'Password Reset', 28, 'As a user, I want to reset my password securely using email.', 'User Story', False, False, 'Not Started', 97, 6, None, 8, datetime.datetime(2025, 1, 7, 20, 37, 47, 717804), datetime.datetime(2025, 1, 16, 19, 22, 36, 267247), None, 128, 'Frontend Password Reset Page', 29, 'Develop a page for users to enter a new password using a valid token.', 'Subtask', False, False, 'Not Started', 106, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 41, 36, 413402), datetime.datetime(2025, 1, 16, 19, 22, 36, 269158), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,920 DEBUG: Row (128, 'Frontend Password Reset Page', 29, 'Develop a page for users to enter a new password using a valid token.', 'Subtask', False, False, 'Not Started', 106, 6, None, 5, datetime.datetime(2025, 1, 7, 20, 41, 36, 413402), datetime.datetime(2025, 1, 16, 19, 22, 36, 269158), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,920 DEBUG: Row (129, 'Testing Password Reset', 30, 'Write tests for email delivery, token validation, and password updates.', 'Subtask', False, False, 'Not Started', 106, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 41, 36, 413402), datetime.datetime(2025, 1, 16, 19, 22, 36, 270849), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,920 DEBUG: Row (102, 'Logout', 31, 'As a user, I want to log out so that I can end my session securely.', 'User Story', False, False, 'Not Started', 97, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 37, 47, 717804), datetime.datetime(2025, 1, 16, 19, 22, 36, 272605), None, 117, 'Tests for Logout', 32, 'Verify session invalidation and redirection to the login page.', 'Subtask', False, False, 'Not Started', 102, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 40, 45, 815252), datetime.datetime(2025, 1, 16, 19, 22, 36, 274575), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,920 DEBUG: Row (102, 'Logout', 31, 'As a user, I want to log out so that I can end my session securely.', 'User Story', False, False, 'Not Started', 97, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 37, 47, 717804), datetime.datetime(2025, 1, 16, 19, 22, 36, 272605), None, 115, 'Backend API for Logout', 34, 'Create POST /api/logout endpoint to invalidate user sessions.', 'Subtask', False, False, 'Not Started', 102, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 40, 45, 815252), datetime.datetime(2025, 1, 16, 19, 22, 36, 277547), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,920 DEBUG: Row (117, 'Tests for Logout', 32, 'Verify session invalidation and redirection to the login page.', 'Subtask', False, False, 'Not Started', 102, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 40, 45, 815252), datetime.datetime(2025, 1, 16, 19, 22, 36, 274575), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,921 DEBUG: Row (116, 'Frontend Logout Button', 33, 'Add a logout button to the UI and handle session clearing.', 'Subtask', False, False, 'Not Started', None, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 40, 45, 815252), datetime.datetime(2025, 2, 9, 12, 31, 17, 939784), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,921 DEBUG: Row (115, 'Backend API for Logout', 34, 'Create POST /api/logout endpoint to invalidate user sessions.', 'Subtask', False, False, 'Not Started', 102, 6, None, 3, datetime.datetime(2025, 1, 7, 20, 40, 45, 815252), datetime.datetime(2025, 1, 16, 19, 22, 36, 277547), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,921 DEBUG: Row (61, 'Parent task assignment', 35, '', 'Epic', False, False, 'Not Started', None, 6, 5, 0, datetime.datetime(2025, 1, 4, 22, 31, 45, 205815), datetime.datetime(2025, 1, 16, 19, 22, 36, 279012), None, 49, 'Integrate Dropdown with Task Form', 47, 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'User Story', False, False, 'Not Started', 61, 6, None, 5, datetime.datetime(2025, 1, 4, 1, 47, 25, 942574), datetime.datetime(2025, 1, 16, 19, 22, 36, 296814), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:23:02,921 DEBUG: Row (61, 'Parent task assignment', 35, '', 'Epic', False, False, 'Not Started', None, 6, 5, 0, datetime.datetime(2025, 1, 4, 22, 31, 45, 205815), datetime.datetime(2025, 1, 16, 19, 22, 36, 279012), None, 45, 'Display Default Value in Dropdown', 36, 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'User Story', False, False, 'Not Started', 61, 6, None, 3, datetime.datetime(2025, 1, 4, 1, 47, 25, 942574), datetime.datetime(2025, 1, 16, 19, 22, 36, 280493), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:23:02,921 DEBUG: Row (61, 'Parent task assignment', 35, '', 'Epic', False, False, 'Not Started', None, 6, 5, 0, datetime.datetime(2025, 1, 4, 22, 31, 45, 205815), datetime.datetime(2025, 1, 16, 19, 22, 36, 279012), None, 46, 'Search for Parent Tasks', 39, 'Allow users to search for tasks dynamically in the dropdown by typing.', 'User Story', False, False, 'Not Started', 61, 6, None, 8, datetime.datetime(2025, 1, 4, 1, 47, 25, 942574), datetime.datetime(2025, 1, 16, 19, 22, 36, 284882), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:23:02,921 DEBUG: Row (61, 'Parent task assignment', 35, '', 'Epic', False, False, 'Not Started', None, 6, 5, 0, datetime.datetime(2025, 1, 4, 22, 31, 45, 205815), datetime.datetime(2025, 1, 16, 19, 22, 36, 279012), None, 48, 'Select and Deselect Parent Tasks', 44, 'Allow users to select a parent task or deselect by choosing "None."', 'User Story', False, False, 'Not Started', 61, 6, None, 5, datetime.datetime(2025, 1, 4, 1, 47, 25, 942574), datetime.datetime(2025, 1, 16, 19, 22, 36, 292389), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:23:02,921 DEBUG: Row (61, 'Parent task assignment', 35, '', 'Epic', False, False, 'Not Started', None, 6, 5, 0, datetime.datetime(2025, 1, 4, 22, 31, 45, 205815), datetime.datetime(2025, 1, 16, 19, 22, 36, 279012), None, 47, 'Handle Large Datasets Efficiently', 41, 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'User Story', False, False, 'Not Started', 61, 6, None, 13, datetime.datetime(2025, 1, 4, 1, 47, 25, 942574), datetime.datetime(2025, 1, 16, 19, 22, 36, 287641), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:23:02,921 DEBUG: Row (45, 'Display Default Value in Dropdown', 36, 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'User Story', False, False, 'Not Started', 61, 6, None, 3, datetime.datetime(2025, 1, 4, 1, 47, 25, 942574), datetime.datetime(2025, 1, 16, 19, 22, 36, 280493), None, 51, 'Set Default Value', 38, 'Set the default value in the dropdown based on the retrieved data.', 'Subtask', False, False, 'Not Started', 45, 6, None, 1, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 1, 16, 19, 22, 36, 283309), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,921 DEBUG: Row (50, 'Retrieve Current Parent Task', 37, 'Retrieve the current parent task’s ID and name from the backend.', 'Subtask', False, False, 'In Progress', None, 6, None, 2, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 2, 10, 7, 41, 43, 569807), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,922 DEBUG: Row (51, 'Set Default Value', 38, 'Set the default value in the dropdown based on the retrieved data.', 'Subtask', False, False, 'Not Started', 45, 6, None, 1, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 1, 16, 19, 22, 36, 283309), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,922 DEBUG: Row (46, 'Search for Parent Tasks', 39, 'Allow users to search for tasks dynamically in the dropdown by typing.', 'User Story', False, False, 'Not Started', 61, 6, None, 8, datetime.datetime(2025, 1, 4, 1, 47, 25, 942574), datetime.datetime(2025, 1, 16, 19, 22, 36, 284882), None, 54, 'Test Partial Matching', 40, 'Ensure the search results update in real-time as the user types.', 'Subtask', False, False, 'Not Started', 46, 6, None, 2, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 1, 16, 19, 22, 36, 286248), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,922 DEBUG: Row (54, 'Test Partial Matching', 40, 'Ensure the search results update in real-time as the user types.', 'Subtask', False, False, 'Not Started', 46, 6, None, 2, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 1, 16, 19, 22, 36, 286248), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,922 DEBUG: Row (47, 'Handle Large Datasets Efficiently', 41, 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'User Story', False, False, 'Not Started', 61, 6, None, 13, datetime.datetime(2025, 1, 4, 1, 47, 25, 942574), datetime.datetime(2025, 1, 16, 19, 22, 36, 287641), None, 56, 'Paginate API Responses', 42, 'Implement server-side filtering and pagination for large datasets.', 'Subtask', False, False, 'Not Started', 47, 6, None, 8, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 1, 16, 19, 22, 36, 289338), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,922 DEBUG: Row (47, 'Handle Large Datasets Efficiently', 41, 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'User Story', False, False, 'Not Started', 61, 6, None, 13, datetime.datetime(2025, 1, 4, 1, 47, 25, 942574), datetime.datetime(2025, 1, 16, 19, 22, 36, 287641), None, 55, 'Enable Lazy Loading', 43, 'Enable lazy loading or virtualization in Virtual Select.', 'Subtask', False, False, 'Not Started', 47, 6, None, 8, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 1, 16, 19, 22, 36, 290910), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,922 DEBUG: Row (56, 'Paginate API Responses', 42, 'Implement server-side filtering and pagination for large datasets.', 'Subtask', False, False, 'Not Started', 47, 6, None, 8, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 1, 16, 19, 22, 36, 289338), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,922 DEBUG: Row (55, 'Enable Lazy Loading', 43, 'Enable lazy loading or virtualization in Virtual Select.', 'Subtask', False, False, 'Not Started', 47, 6, None, 8, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 1, 16, 19, 22, 36, 290910), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,922 DEBUG: Row (48, 'Select and Deselect Parent Tasks', 44, 'Allow users to select a parent task or deselect by choosing "None."', 'User Story', False, False, 'Not Started', 61, 6, None, 5, datetime.datetime(2025, 1, 4, 1, 47, 25, 942574), datetime.datetime(2025, 1, 16, 19, 22, 36, 292389), None, 57, 'Ensure None Option Availability', 45, 'Add “None” as a selectable option and ensure it stays at the top of the list.', 'Subtask', False, False, 'Not Started', 48, 6, None, 2, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 1, 16, 19, 22, 36, 294045), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,922 DEBUG: Row (48, 'Select and Deselect Parent Tasks', 44, 'Allow users to select a parent task or deselect by choosing "None."', 'User Story', False, False, 'Not Started', 61, 6, None, 5, datetime.datetime(2025, 1, 4, 1, 47, 25, 942574), datetime.datetime(2025, 1, 16, 19, 22, 36, 292389), None, 58, 'Handle Selection Events', 46, 'Implement event listeners to update the form’s state when the selection changes.', 'Subtask', False, False, 'Not Started', 48, 6, None, 3, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 1, 16, 19, 22, 36, 295385), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,922 DEBUG: Row (57, 'Ensure None Option Availability', 45, 'Add “None” as a selectable option and ensure it stays at the top of the list.', 'Subtask', False, False, 'Not Started', 48, 6, None, 2, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 1, 16, 19, 22, 36, 294045), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,922 DEBUG: Row (58, 'Handle Selection Events', 46, 'Implement event listeners to update the form’s state when the selection changes.', 'Subtask', False, False, 'Not Started', 48, 6, None, 3, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 1, 16, 19, 22, 36, 295385), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,922 DEBUG: Row (49, 'Integrate Dropdown with Task Form', 47, 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'User Story', False, False, 'Not Started', 61, 6, None, 5, datetime.datetime(2025, 1, 4, 1, 47, 25, 942574), datetime.datetime(2025, 1, 16, 19, 22, 36, 296814), None, 60, 'Test Form Submission', 49, 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'Subtask', False, False, 'Not Started', 49, 6, None, 3, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 1, 16, 19, 22, 36, 299971), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,922 DEBUG: Row (59, 'Bind Dropdown to Form Field', 48, 'Bind the dropdown to the form’s parent task field.', 'Subtask', False, False, 'Not Started', None, 6, None, 2, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 2, 9, 23, 48, 8, 770907), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,922 DEBUG: Row (60, 'Test Form Submission', 49, 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'Subtask', False, False, 'Not Started', 49, 6, None, 3, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 1, 16, 19, 22, 36, 299971), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,922 DEBUG: Row (41, 'Implement Searchable Dropdown', 50, 'As a user, I want a searchable dropdown for parent task assignment.', 'User Story', False, False, 'Completed', None, 6, None, 8, datetime.datetime(2025, 1, 3, 9, 14, 28, 285904), datetime.datetime(2025, 2, 10, 7, 41, 33, 252945), None, 52, 'Add Search Box to Dropdown', 51, 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'Subtask', False, False, 'Completed', 41, 6, None, 3, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 2, 10, 7, 40, 33, 847642), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,923 DEBUG: Row (52, 'Add Search Box to Dropdown', 51, 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'Subtask', False, False, 'Completed', 41, 6, None, 3, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 2, 10, 7, 40, 33, 847642), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,923 DEBUG: Row (53, 'Implement AJAX Search', 52, 'Implement AJAX-based search to fetch tasks dynamically from the backend.', 'Subtask', False, False, 'Not Started', None, 6, None, 5, datetime.datetime(2025, 1, 4, 2, 2, 21, 237339), datetime.datetime(2025, 2, 9, 7, 55, 0, 680183), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,923 DEBUG: Row (42, 'Choose Dropdown Library', 53, 'Research and decide on the dropdown library to use.', 'Subtask', False, False, 'Completed', None, 6, None, 3, datetime.datetime(2025, 1, 3, 9, 16, 2, 607548), datetime.datetime(2025, 2, 10, 7, 41, 18, 814716), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,923 DEBUG: Row (43, 'Integrate Dropdown Library', 54, 'Integrate the chosen dropdown library into the project.', 'Subtask', False, False, 'Completed', None, 6, None, 5, datetime.datetime(2025, 1, 3, 9, 16, 2, 607548), datetime.datetime(2025, 2, 10, 7, 41, 23, 756572), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,923 DEBUG: Row (84, 'Enhance Task Contributor Management', 55, 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI ... (335 characters truncated) ... onalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'Epic', False, False, 'Not Started', None, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 30, 21, 149869), datetime.datetime(2025, 1, 16, 19, 22, 36, 311560), None, 85, 'Assign multiple contributors to a task', 56, 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'User Story', False, False, 'Not Started', 84, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 32, 39, 466022), datetime.datetime(2025, 1, 16, 19, 22, 36, 313789), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:23:02,923 DEBUG: Row (84, 'Enhance Task Contributor Management', 55, 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI ... (335 characters truncated) ... onalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'Epic', False, False, 'Not Started', None, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 30, 21, 149869), datetime.datetime(2025, 1, 16, 19, 22, 36, 311560), None, 86, 'Allow designation of task owner', 60, 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'User Story', False, False, 'Not Started', 84, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 33, 29, 330562), datetime.datetime(2025, 1, 16, 19, 22, 36, 320840), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:23:02,923 DEBUG: Row (84, 'Enhance Task Contributor Management', 55, 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI ... (335 characters truncated) ... onalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'Epic', False, False, 'Not Started', None, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 30, 21, 149869), datetime.datetime(2025, 1, 16, 19, 22, 36, 311560), None, 87, 'Create and customize contributor roles', 64, 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'User Story', False, False, 'Not Started', 84, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:23:02,923 DEBUG: Row (85, 'Assign multiple contributors to a task', 56, 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'User Story', False, False, 'Not Started', 84, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 32, 39, 466022), datetime.datetime(2025, 1, 16, 19, 22, 36, 313789), None, 88, 'Update database schema for multiple contributors', 58, 'Modify the task table to support many-to-many relationships for contributors.', 'Subtask', False, False, 'Not Started', 85, 6, None, 3, datetime.datetime(2025, 1, 7, 19, 39, 2, 14761), datetime.datetime(2025, 1, 16, 19, 22, 36, 317500), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,923 DEBUG: Row (85, 'Assign multiple contributors to a task', 56, 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'User Story', False, False, 'Not Started', 84, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 32, 39, 466022), datetime.datetime(2025, 1, 16, 19, 22, 36, 313789), None, 89, 'Develop backend API for adding contributors to a task', 59, 'Create endpoints to add, update, and remove contributors for a task.', 'Subtask', False, False, 'Not Started', 85, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 39, 2, 14761), datetime.datetime(2025, 1, 16, 19, 22, 36, 319281), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,923 DEBUG: Row (85, 'Assign multiple contributors to a task', 56, 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'User Story', False, False, 'Not Started', 84, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 32, 39, 466022), datetime.datetime(2025, 1, 16, 19, 22, 36, 313789), None, 90, 'Update frontend to display and manage multiple contributors', 57, 'Allow users to view, add, or remove multiple contributors via the UI.', 'Subtask', False, False, 'Not Started', 85, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 39, 2, 14761), datetime.datetime(2025, 1, 16, 19, 22, 36, 315695), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,923 DEBUG: Row (90, 'Update frontend to display and manage multiple contributors', 57, 'Allow users to view, add, or remove multiple contributors via the UI.', 'Subtask', False, False, 'Not Started', 85, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 39, 2, 14761), datetime.datetime(2025, 1, 16, 19, 22, 36, 315695), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,923 DEBUG: Row (88, 'Update database schema for multiple contributors', 58, 'Modify the task table to support many-to-many relationships for contributors.', 'Subtask', False, False, 'Not Started', 85, 6, None, 3, datetime.datetime(2025, 1, 7, 19, 39, 2, 14761), datetime.datetime(2025, 1, 16, 19, 22, 36, 317500), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,923 DEBUG: Row (89, 'Develop backend API for adding contributors to a task', 59, 'Create endpoints to add, update, and remove contributors for a task.', 'Subtask', False, False, 'Not Started', 85, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 39, 2, 14761), datetime.datetime(2025, 1, 16, 19, 22, 36, 319281), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,923 DEBUG: Row (86, 'Allow designation of task owner', 60, 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'User Story', False, False, 'Not Started', 84, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 33, 29, 330562), datetime.datetime(2025, 1, 16, 19, 22, 36, 320840), None, 92, 'Develop backend API for assigning task owner', 63, 'Create endpoints to assign or update the owner of a task.', 'Subtask', False, False, 'Not Started', 86, 6, 5, 5, datetime.datetime(2025, 1, 7, 19, 39, 17, 531925), datetime.datetime(2025, 2, 11, 9, 19, 44, 27744), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,924 DEBUG: Row (86, 'Allow designation of task owner', 60, 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'User Story', False, False, 'Not Started', 84, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 33, 29, 330562), datetime.datetime(2025, 1, 16, 19, 22, 36, 320840), None, 91, 'Update database schema for task ownership', 62, 'Add a column or relationship to assign a single owner per task.', 'Subtask', False, False, 'Not Started', 86, 6, None, 3, datetime.datetime(2025, 1, 7, 19, 39, 17, 531925), datetime.datetime(2025, 1, 16, 19, 22, 36, 324051), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,924 DEBUG: Row (86, 'Allow designation of task owner', 60, 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'User Story', False, False, 'Not Started', 84, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 33, 29, 330562), datetime.datetime(2025, 1, 16, 19, 22, 36, 320840), None, 93, 'Update frontend to manage task ownership', 61, 'Allow users to assign or update the task owner via the UI.', 'Subtask', False, False, 'Not Started', 86, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 39, 17, 531925), datetime.datetime(2025, 1, 16, 19, 22, 36, 322637), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,924 DEBUG: Row (93, 'Update frontend to manage task ownership', 61, 'Allow users to assign or update the task owner via the UI.', 'Subtask', False, False, 'Not Started', 86, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 39, 17, 531925), datetime.datetime(2025, 1, 16, 19, 22, 36, 322637), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,924 DEBUG: Row (91, 'Update database schema for task ownership', 62, 'Add a column or relationship to assign a single owner per task.', 'Subtask', False, False, 'Not Started', 86, 6, None, 3, datetime.datetime(2025, 1, 7, 19, 39, 17, 531925), datetime.datetime(2025, 1, 16, 19, 22, 36, 324051), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,925 DEBUG: Row (92, 'Develop backend API for assigning task owner', 63, 'Create endpoints to assign or update the owner of a task.', 'Subtask', False, False, 'Not Started', 86, 6, 5, 5, datetime.datetime(2025, 1, 7, 19, 39, 17, 531925), datetime.datetime(2025, 2, 11, 9, 19, 44, 27744), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:23:02,925 DEBUG: Row (87, 'Create and customize contributor roles', 64, 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'User Story', False, False, 'Not Started', 84, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), None, 96, 'Allow admin users to create and customize contributor roles via frontend', 65, 'Provide UI functionality for admins to manage contributor roles dynamically.', 'Subtask', False, False, 'Not Started', 87, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 1, 16, 19, 22, 36, 328562), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,925 DEBUG: Row (87, 'Create and customize contributor roles', 64, 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'User Story', False, False, 'Not Started', 84, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), None, 95, 'Develop backend API for managing contributor roles', 67, 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'Subtask', False, False, 'Not Started', 87, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 2, 11, 8, 22, 2, 276492), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,926 DEBUG: Row (87, 'Create and customize contributor roles', 64, 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'User Story', False, False, 'Not Started', 84, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), None, 94, 'Add database support for contributor roles', 66, 'Introduce a roles table and link contributors to specific roles for tasks.', 'Subtask', False, False, 'Not Started', 87, 6, 5, 5, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 2, 11, 8, 22, 56, 181530), None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,927 DEBUG: Row (96, 'Allow admin users to create and customize contributor roles via frontend', 65, 'Provide UI functionality for admins to manage contributor roles dynamically.', 'Subtask', False, False, 'Not Started', 87, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 1, 16, 19, 22, 36, 328562), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), None, None)
2025-02-11 09:23:02,927 DEBUG: Row (94, 'Add database support for contributor roles', 66, 'Introduce a roles table and link contributors to specific roles for tasks.', 'Subtask', False, False, 'Not Started', 87, 6, 5, 5, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 2, 11, 8, 22, 56, 181530), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:23:02,927 DEBUG: Row (95, 'Develop backend API for managing contributor roles', 67, 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'Subtask', False, False, 'Not Started', 87, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 2, 11, 8, 22, 2, 276492), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:23:02,927 DEBUG: Row (127, 'Backend API for Password Reset', 68, 'Create endpoints to handle password reset requests and token validation.\ndfdf\n\nasdasd', 'Subtask', False, False, 'Not Started', None, 6, 5, 8, datetime.datetime(2025, 1, 7, 20, 41, 36, 413402), datetime.datetime(2025, 2, 10, 23, 59, 50, 734037), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:23:02,927 DEBUG: Row (126, 'Email Configuration for Password Reset', 69, 'Configure email service to send password reset links.', 'Subtask', False, False, 'Not Started', None, 6, 5, 5, datetime.datetime(2025, 1, 7, 20, 41, 36, 413402), datetime.datetime(2025, 1, 16, 19, 22, 36, 334340), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:23:02,927 DEBUG: Row (104, 'Middleware for Role Enforcement', 70, 'As a system, I want to enforce role-based access to specific routes.', 'User Story', False, False, 'Not Started', None, 6, 5, 3, datetime.datetime(2025, 1, 7, 20, 37, 47, 717804), datetime.datetime(2025, 1, 16, 19, 23, 40, 346816), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:23:02,927 DEBUG: Row (122, 'Testing Role Enforcement', 71, 'Write tests to ensure proper access control based on roles.', 'Subtask', False, False, 'Not Started', None, 6, 5, 3, datetime.datetime(2025, 1, 7, 20, 41, 7, 415346), datetime.datetime(2025, 1, 16, 19, 23, 58, 185693), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:23:02,927 DEBUG: Row (121, 'Develop Role Enforcement Middleware', 72, 'Implement middleware to check user roles for access control.', 'Subtask', False, False, 'Not Started', None, 6, 5, 5, datetime.datetime(2025, 1, 7, 20, 41, 7, 415346), datetime.datetime(2025, 1, 16, 19, 23, 58, 187439), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:23:02,928 DEBUG: Row (105, 'Profile Management', 73, 'As a user, I want to update my profile (username, email, password).', 'User Story', False, False, 'Not Started', None, 6, 5, 5, datetime.datetime(2025, 1, 7, 20, 37, 47, 717804), datetime.datetime(2025, 1, 16, 19, 22, 36, 339830), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:23:02,928 DEBUG: Row (123, 'Backend API for Profile Management', 74, 'Create PATCH /api/profile endpoint to update user details.', 'Subtask', False, False, 'Not Started', None, 6, 5, 5, datetime.datetime(2025, 1, 7, 20, 41, 20, 321287), datetime.datetime(2025, 1, 16, 19, 24, 19, 678781), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:23:02,928 DEBUG: Row (125, 'Testing Profile Updates', 75, 'Write tests for profile update functionality.', 'Subtask', False, False, 'Not Started', None, 6, 5, 3, datetime.datetime(2025, 1, 7, 20, 41, 20, 321287), datetime.datetime(2025, 1, 16, 19, 24, 19, 680382), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 5, 'Fredrik Cederborg', 6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:23:02,930 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-11 09:23:02,930 INFO: [cached since 657.7s ago] {}
2025-02-11 09:23:02,931 DEBUG: Col ('count_1',)
2025-02-11 09:23:02,931 DEBUG: Row (131,)
2025-02-11 09:23:02,932 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-11 09:23:02,932 INFO: [cached since 657.7s ago] {}
2025-02-11 09:23:02,932 DEBUG: Col ('task_task_type',)
2025-02-11 09:23:02,932 DEBUG: Row ('Epic',)
2025-02-11 09:23:02,932 DEBUG: Row ('Subtask',)
2025-02-11 09:23:02,932 DEBUG: Row ('User Story',)
2025-02-11 09:23:02,933 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-11 09:23:02,933 INFO: [cached since 657.7s ago] {}
2025-02-11 09:23:02,933 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at')
2025-02-11 09:23:02,933 DEBUG: Row (1, 'Project Alpha', datetime.date(2024, 1, 1), datetime.date(2024, 12, 31), None, 0, datetime.datetime(2024, 12, 11, 1, 16, 28, 688881), datetime.datetime(2024, 12, 11, 1, 16, 28, 688881))
2025-02-11 09:23:02,933 DEBUG: Row (2, 'Project Beta', datetime.date(2024, 2, 1), datetime.date(2024, 11, 30), None, 10, datetime.datetime(2024, 12, 11, 1, 16, 28, 688881), datetime.datetime(2024, 12, 11, 1, 16, 28, 688881))
2025-02-11 09:23:02,933 DEBUG: Row (3, 'Project Gamma', datetime.date(2024, 3, 1), datetime.date(2024, 10, 31), None, 20, datetime.datetime(2024, 12, 11, 1, 37, 19, 511738), datetime.datetime(2024, 12, 11, 1, 37, 19, 511738))
2025-02-11 09:23:02,933 DEBUG: Row (4, 'Project Theta', datetime.date(2024, 12, 11), datetime.date(2024, 12, 27), None, 0, datetime.datetime(2024, 12, 12, 19, 26, 42, 642098), datetime.datetime(2024, 12, 12, 19, 26, 42, 642102))
2025-02-11 09:23:02,933 DEBUG: Row (5, 'Project Delta', datetime.date(2025, 1, 4), datetime.date(2025, 3, 8), None, 0, datetime.datetime(2025, 1, 3, 8, 16, 18, 658051), datetime.datetime(2025, 1, 3, 8, 16, 18, 658058))
2025-02-11 09:23:02,933 DEBUG: Row (7, 'PMS - Feature Requests', datetime.date(2025, 2, 10), datetime.date(2029, 12, 10), None, 0, datetime.datetime(2025, 2, 10, 9, 27, 36, 160249), datetime.datetime(2025, 2, 10, 9, 27, 36, 160259))
2025-02-11 09:23:02,933 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298))
2025-02-11 09:23:02,934 DEBUG: Tasks passed to template: [{'id': 290, 'name': 'issue: error when changing task type and', 'description': 'issue: error when changing task type and parent task before saving', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:00:03.417734', 'updated_at': '2025-02-10T09:15:09.284969'}, {'id': 298, 'name': 'example user story with parent epic 297', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 297, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:41:01.907455', 'updated_at': '2025-02-10T14:59:04.142570'}, {'id': 275, 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-10T08:38:37.622196'}, {'id': 276, 'name': 'add support for priority', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-10T08:28:47.447612'}, {'id': 264, 'name': 'close all / open all childtasks', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-02-10T08:47:14.915970'}, {'id': 285, 'name': 'add text truncation to project names in task list', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-10T09:45:47.029729'}, {'id': 257, 'name': 'Update Task API Integration', 'description': "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-02-05T22:55:49.566819', 'updated_at': '2025-02-05T22:18:17.807154'}, {'id': 294, 'name': 'issue: task table filters not working', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:19:21.022598', 'updated_at': '2025-02-10T10:19:21.024676'}, {'id': 267, 'name': 'improvements to toggles and nested tasks', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:29:12.464594', 'updated_at': '2025-02-10T08:47:24.581680'}, {'id': 271, 'name': 'make sure dynamically added rows has the exact same styling and includes every element', 'description': 'Missing elements:\n- Open link\n- Default project\n- Project name should be inside a pill\n- Task type should be in a pill\n- Estimations should be 0, not N/A\n- Make sure font size is matching\n- status should have the dropdown inside a pill\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:21:07.108431', 'updated_at': '2025-02-10T08:38:47.340105'}, {'id': 283, 'name': 'fix update title', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:58.769700', 'updated_at': '2025-02-10T08:46:47.282087'}, {'id': 273, 'name': 'disable parent task selector in epics', 'description': 'and add text, Epic can´t have parent tasks', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:45:20.740910', 'updated_at': '2025-02-10T08:39:17.639890'}, {'id': 269, 'name': 'fix styling for sweetalert', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-02-08T15:54:56.717846', 'updated_at': '2025-02-10T08:39:32.172437'}, {'id': 286, 'name': 'add support for labels/tags', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:46:23.985620', 'updated_at': '2025-02-10T09:46:23.987564'}, {'id': 299, 'name': 'example sub task with parent user story 298', 'description': 'Test update 1\nTest update 2\nTest update 3', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 298, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:42:38.905700', 'updated_at': '2025-02-10T23:23:08.671464'}, {'id': 266, 'name': 'highlight the nested tasks', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-02-10T08:47:04.382929'}, {'id': 279, 'name': 'github integration', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:38.238202', 'updated_at': '2025-02-10T08:39:24.168451'}, {'id': 289, 'name': 'issue: parent task is lost when updating task', 'description': '', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:56:25.273984', 'updated_at': '2025-02-10T09:12:47.626993'}, {'id': 272, 'name': 'implement a markdown text editor like notion', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-02-10T08:28:39.669255'}, {'id': 278, 'name': 'search feature for tasks list', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:03.369833', 'updated_at': '2025-02-10T08:39:04.005957'}, {'id': 281, 'name': 'add high level plan', 'description': 'Add some sort of high level plan that aims to keep PM/PO´s on track and not get lost into the details of an overwhelminly large backlog', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:27:01.218606', 'updated_at': '2025-02-10T08:38:54.754760'}, {'id': 287, 'name': 'when moving a parent item to another project make sure the subtasks are moved as well', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:48:31.986870', 'updated_at': '2025-02-10T09:48:31.988859'}, {'id': 293, 'name': 'click on title should copy the task title and id to clipboard', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:16:33.508209', 'updated_at': '2025-02-10T10:16:33.510414'}, {'id': 277, 'name': 'custom task workflow statuses', 'description': 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- Custom status\n-- Custom status\n- In Progress\n-- Custom status\n-- Custom status\n-- Custom status\n- Completed\n-- Custom status\n-- Custom status\n\n2. How can we track a task through different stages and save the sequence of events or stages the task has gone through?\nI´m thinking it could be good for mapping out processes, identifying bottlenecks and provide valuable insights while improving and streamlining workflows.\n- Stages\n- Contacts taken\n- Respons time \n- Time to action after responses\n- Dependencies\n\nNeed to be able to record every action related to this action.\nCommunication integrations\n- Slack\n- Email\n- Text messages\n- Phonecalls\n- Calendar events, meetings\n- Zoom, Google meet, Teams etc..\n\n\n2. Set custom statuses per project (can use tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:16:03.352588', 'updated_at': '2025-02-10T08:38:28.123328'}, {'id': 274, 'name': 'add support for goals, initiatives, okr´s', 'description': 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:46:27.204912', 'updated_at': '2025-02-10T08:28:17.663922'}, {'id': 280, 'name': 'logging (task and project history)', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:37:44.435112', 'updated_at': '2025-02-10T08:28:28.947805'}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:17.786154', 'updated_at': '2025-02-10T09:41:17.787861'}, {'id': 296, 'name': 'issue: contributor is lost after updating task', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:26:43.881947', 'updated_at': '2025-02-10T10:26:43.884004'}, {'id': 288, 'name': 'when trying to move subtask to another project, make sure a warning is displayed', 'description': 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be lost"\nOR\n\nIs it possible, and is it desireable to keep parent child relationships across projects?\nSo that a parent can be in one project but the child tasks can be in different projects?\n\nLets say \nParent epic is \n"Internationalisation"\nChild user stories are\n- Timezones\n- Language\n- Currency\n- Day, Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:54:36.297869', 'updated_at': '2025-02-10T08:54:51.840686'}, {'id': 284, 'name': 'add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-10T09:42:27.720908'}, {'id': 295, 'name': 'issue: drag and drop errors', 'description': '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:22:54.461413', 'updated_at': '2025-02-10T10:22:54.462542'}, {'id': 297, 'name': 'example parent epic', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:39:51.620509', 'updated_at': '2025-02-10T10:39:51.622712'}, {'id': 292, 'name': 'issue: assigning contributor does not work', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:11:12.273779', 'updated_at': '2025-02-10T10:11:12.274809'}, {'id': 265, 'name': 'smooth transition for toggles', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-02-10T08:46:55.831743'}, {'id': 270, 'name': 'the newest task', 'description': '', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:07:34.368035', 'updated_at': '2025-02-10T01:07:34.372478'}, {'id': 291, 'name': 'add dropdowns in task list for changing: project, assigned to, estimate and task type (labels/tags)', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-02-10T10:09:52.997455'}, {'id': 136, 'name': 'Page scroll should stay in position when reloading', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-16T18:21:50.187247', 'updated_at': '2025-01-16T19:22:36.214901'}, {'id': 130, 'name': 'Implement the Map of Task Relationships solution for drag-and-drop', 'description': 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.093022', 'updated_at': '2025-01-16T19:22:36.216705'}, {'id': 133, 'name': 'Step 4: Enhance Logging in models.py', 'description': 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nupdating the Task model in the following ways:\n\n1.\tLog Changes to parent_id:\n\t•\tLog changes to parent_id during updates, including old and new values.\n\t2.\tValidate Hierarchy with Logging:\n\t•\tLog detailed messages when validating hierarchy changes, especially for circular dependency checks.\n\nHere’s how the models.py can be updated:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy import func, cast, CheckConstraint\nfrom sqlalchemy.orm import validates\nfrom app.extensions.db import db\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\nclass Task(db.Model):\n    __tablename__ = "task"\n    \n    # Other columns...\n\n    parent_id = db.Column(\n        db.Integer, db.ForeignKey("task.id"), index=True, nullable=True\n    )\n\n    # Relationships\n    parent = db.relationship(\n        "Task", remote_side=[id], back_populates="children", lazy="select"\n    )\n    children = db.relationship(\n        "Task", back_populates="parent", lazy="select"\n    )\n\n    \n\n\n    @staticmethod\n    def _validate_no_circular_references(new_parent_id):\n        """\n        Validates that there are no circular references in the task hierarchy.\n\n        Args:\n            new_parent_id (int): The new parent ID to validate.\n\n        Raises:\n            ValueError: If a circular reference is detected.\n        """\n        visited = set()\n        current_parent_id = new_parent_id\n\n        logger.info(f"Validating circular references for parent ID: {new_parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error(\n                    f"Circular reference detected: Parent ID {current_parent_id} already visited."\n                )\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            # Fetch the next parent_id in the hierarchy\n            parent = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not parent:\n                break  # Exit if no parent is found\n            current_parent_id = parent.parent_id\n\n        logger.info("No circular reference detected.")\n\n    @validates(\'parent_id\', \'task_type\')\n    def validate_task_changes(self, key, value):\n        """\n        Validates changes to \'parent_id\' and \'task_type\'.\n        Ensures hierarchy validity and checks for circular references.\n        """\n        logger.debug(f"Validating {key} change for Task {self.id}: {value}")\n\n        if key == \'parent_id\':\n            # Log changes to parent_id\n            if self.id and value != self.parent_id:\n                logger.info(f"Task {self.id}: Updating \'parent_id\' from {self.parent_id} to {value}")\n\n            # Prevent a task from being its own parent\n            if value and value == self.id:\n                logger.error("A task cannot be its own parent.")\n                raise ValueError("A task cannot be its own parent.")\n\n            # Check for circular references\n            if value:\n                Task.check_circular_reference(self.id, value)\n\n        elif key == \'task_type\':\n            # Log changes to task_type\n            if self.id and value != self.task_type:\n                logger.info(f"Task {self.id}: Updating \'task_type\' from {self.task_type} to {value}")\n\n        # Check hierarchy rules without triggering further validation\n        if key in [\'parent_id\', \'task_type\']:\n            self._validate_hierarchy_change(key, value)\n\n        logger.info(f"Validation passed for {key}: {value}")\n        return value\n\n    def _validate_hierarchy_change(self, key, value):\n        """\n        Validates hierarchy rules for the task based on `task_type` and `parent_id`.\n        """\n        if key == \'parent_id\' and value:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=value).first()\n            if not parent_task:\n                raise ValueError("Parent task does not exist.")\n\n            logger.debug(f"Validating hierarchy: Task {self.id}, Parent Type: {parent_task.task_type}")\n            if self.task_type == "User Story" and parent_task.task_type != "Epic":\n                raise ValueError("User Stories must have an Epic as a parent.")\n            if self.task_type == "Subtask" and parent_task.task_type != "User Story":\n                raise ValueError("Subtasks must have a User Story as a parent.")\n\n        elif key == \'task_type\' and self.parent_id:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=self.parent_id).first()\n            if parent_task:\n                logger.debug(f"Validating hierarchy: Task Type: {value}, Parent Type: {parent_task.task_type}")\n                if value == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError("User Stories must have an Epic as a parent.")\n                if value == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError("Subtasks must have a User Story as a parent.")\n\n        logger.info(f"Hierarchy validation passed for Task {self.id if self.id else \'New Task\'}.")\n\n    @staticmethod\n    def check_circular_reference(task_id, parent_id):\n        """\n        Iteratively checks for circular references in the task hierarchy.\n        Prevents stack overflow on deep hierarchies.\n        """\n        visited = set()\n        current_parent_id = parent_id\n\n        logger.info(f"Checking circular reference for Task {task_id} with Parent ID: {parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error("Circular reference detected!")\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            if current_parent_id == task_id:\n                logger.error("A task cannot be its own ancestor.")\n                raise ValueError("A task cannot be its own ancestor.")\n\n            # Fetch the next parent_id in the hierarchy\n            task = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not task:\n                break\n            current_parent_id = task.parent_id\n\n        logger.info("Circular reference check passed.")\n```\nKey Enhancements:\n\t1.\tlog_and_validate_parent_id_change:\n\t•\tLogs the old and new parent_id whenever it changes.\n\t•\tEnsures no circular references are introduced.\n\t2.\t_validate_no_circular_references:\n\t•\tValidates the parent_id field to prevent circular dependencies.\n\t•\tLogs progress and raises detailed errors if violations occur.\n\t3.\tlog_and_validate_task_type_change:\n\t•\tLogs changes to task_type with the old and new values.\n\t•\tRevalidates hierarchy rules when task_type changes.\n\t4.\tDetailed Logging for Circular Reference Validation:\n\t•\t_validate_no_circular_references and check_circular_reference methods log every step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t•\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:44:08.340041', 'updated_at': '2025-01-16T19:22:36.219710'}, {'id': 132, 'name': 'Step 1: Update tasks_table_interactions.js', 'description': '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the map for efficient parent-child relationship lookups instead of DOM traversal.\n\n```\nexport const TaskManager = {\n    init: function (csrfToken) {\n        this.csrfToken = csrfToken;\n        this.initTaskParentMap(); // Initialize the map\n        this.initDragAndDrop(); // Initialize drag-and-drop functionality\n    },\n\n    // Initialize a global map for task relationships\n    taskParentMap: new Map(),\n\n    // Build the taskParentMap from the DOM\n    initTaskParentMap: function () {\n        console.log("Initializing Task Parent Map...");\n        const rows = document.querySelectorAll("tr[data-task-id]");\n\n        rows.forEach((row) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = parseInt(row.dataset.parentId, 10) || null;\n            this.taskParentMap.set(taskId, parentId);\n        });\n\n        console.log("Task Parent Map initialized:", Array.from(this.taskParentMap.entries()));\n    },\n\n    // Update the map dynamically after drag-and-drop\n    updateTaskParentMap: function (taskId, parentId) {\n        console.log(`Updating Task Parent Map: Task ${taskId} -> Parent ${parentId}`);\n        this.taskParentMap.set(taskId, parentId);\n    },\n\n    initDragAndDrop: function () {\n        if (window.isDragAndDropInitialized) {\n            console.log("Drag-and-drop is already initialized.");\n            return;\n        }\n\n        console.log("Initializing drag-and-drop within TaskManager...");\n\n        const tableBody = document.querySelector("tbody");\n        if (!tableBody) {\n            console.warn("Task table body not found for drag-and-drop initialization");\n            return;\n        }\n\n        // Initialize Sortable.js for drag-and-drop functionality\n        Sortable.create(tableBody, {\n            handle: ".task-row", // Only draggable via `.task-row` elements\n            animation: 150, // Smooth animation\n            filter: ".task-open-link", // Prevent dragging on task links\n            preventOnFilter: true, // Prevent drag if filtered element is clicked\n            onEnd: async (event) => {\n                try {\n                    console.log("Drag-and-drop operation started...");\n                    const rows = Array.from(event.from.querySelectorAll(".task-row"));\n                    const reorderedTasks = [];\n\n                    rows.forEach((row, index) => {\n                        const taskId = parseInt(row.dataset.taskId, 10);\n                        let parentId = null;\n\n                        // Get the parent ID from the map or fallback to the dataset\n                        if (row.classList.contains("subtask-row")) {\n                            const parentRow = row.previousElementSibling;\n                            parentId = parentRow\n                                ? parseInt(parentRow.dataset.taskId, 10)\n                                : this.taskParentMap.get(taskId) || null;\n                        }\n\n                        // Update the taskParentMap dynamically\n                        this.updateTaskParentMap(taskId, parentId);\n\n                        reorderedTasks.push({\n                            id: taskId,\n                            sort_order: index + 1,\n                            parent_id: parentId,\n                        });\n                    });\n\n                    console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n                    console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n                    // Send the payload to the backend\n                    const response = await fetch("/tasks/reorder_subtasks", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                            "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n                        },\n                        body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n                    });\n\n                    if (!response.ok) {\n                        const errorData = await response.json();\n                        console.error("Error reordering tasks:", errorData);\n                        alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n                        return;\n                    }\n\n                    const data = await response.json();\n                    console.log("Task reordering successful:", data);\n\n                } catch (error) {\n                    console.error("Error during drag-and-drop operation:", error);\n                    alert("An unexpected error occurred while reordering tasks.");\n                }\n            },\n        });\n\n        window.isDragAndDropInitialized = true;\n        console.log("Drag-and-drop initialized successfully.");\n    },\n};\n```\n\nKey Updates:\n\t1.\tPrecomputed Map (taskParentMap):\n\t•\tThe initTaskParentMap function initializes the map by iterating over DOM elements and mapping each task’s ID to its parent ID.\n\t•\tThe updateTaskParentMap dynamically updates the map when tasks are reordered.\n\t2.\tEfficient Parent Lookup:\n\t•\tThe parentId is derived from the precomputed map rather than DOM traversal.\n\t3.\tBackend Payload:\n\t•\tA structured payload (reorderedTasks) is sent to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t•\tCSRF protection is ensured by passing the token to the request headers.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:44:08.338301', 'updated_at': '2025-02-06T21:59:17.417466'}, {'id': 134, 'name': 'Step 2: Update the Backend in routes.py', 'description': 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\nPlan for step 2:\n\t1.\tVerify the payload structure:\n\t•\tEnsure that the payload includes all necessary fields (id, sort_order, parent_id) for each task.\n\t•\tValidate that the parent-child relationships in the precomputed map (taskParentMap) are reflected correctly in the payload.\n\t2.\tSubmit the payload to the backend:\n\t•\tEnhance the fetch request in the onEnd function of initDragAndDrop to log detailed submission data.\n\t•\tConfirm the payload integrity in the browser console before submission.\n\t3.\tUpdate backend logging:\n\t•\tAdd logging to /reorder_subtasks in routes.py to confirm receipt of the correct payload and process parent-child updates.\n\t•\tLog before and after database updates for better debugging.\n\n-----\nUpdated tasks_table_interactions.js\n\nReplace this section:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    let parentId = null;\n```\nWith:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    const parentId = this.taskParentMap.get(taskId) || null;\n```\nThe this.taskParentMap provides a precomputed and dynamic mapping of taskId to parentId. By using this map, we avoid relying on DOM traversal logic (row.closest or row.previousElementSibling) during drag-and-drop operations, which can sometimes be unreliable or cumbersome.\n\nFull Revised onEnd section:\n```\nonEnd: async (event) => {\n    try {\n        console.log("Drag-and-drop operation started...");\n        const rows = Array.from(event.from.querySelectorAll(".task-row"));\n        const reorderedTasks = [];\n\n        rows.forEach((row, index) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = this.taskParentMap.get(taskId) || null;\n\n            // Update the taskParentMap dynamically\n            this.updateTaskParentMap(taskId, parentId);\n\n            reorderedTasks.push({\n                id: taskId,\n                sort_order: index + 1,\n                parent_id: parentId,\n            });\n        });\n\n        console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n        console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n        // Send the payload to the backend\n        const response = await fetch("/tasks/reorder_subtasks", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n            },\n            body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error("Error reordering tasks:", errorData);\n            alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n            return;\n        }\n\n        const data = await response.json();\n        console.log("Task reordering successful:", data);\n\n    } catch (error) {\n        console.error("Error during drag-and-drop operation:", error);\n        alert("An unexpected error occurred while reordering tasks.");\n    }\n}\n```\n---------------------------------\nEnsure updates include:\n\t•\tBetter Logging: Adding logs for key events such as database changes and validation results.\n\t•\tInput Validation: Ensure all required fields (id, sort_order, parent_id) exist in the payload.\n\t•\tPost-Commit Validation: Confirm database updates after the commit.\n\t•\tImproved Error Handling: Include specific error messages and consistent rollback mechanisms.\n\nBelow is the revised reorder_subtasks route with descriptive comments for each section:\n```\n@bp.route("/reorder_subtasks", methods=["POST"])\ndef reorder_subtasks():\n    """\n    Reorder subtasks globally or reassign them to a different parent.\n\n    Steps:\n    - Parse and validate input from the frontend.\n    - Update parent-child relationships and sort order in the database.\n    - Commit changes and return a success response.\n    - Handle errors gracefully and provide detailed logs for debugging.\n    """\n    logger.info("Entering reorder_subtasks route...")\n    logger.info(f"Received payload for reordering tasks: {request.json}")\n\n    try:\n        # Step 1: Parse input\n        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered\n        ordered_tasks = request.json.get("ordered_tasks", [])\n\n        logger.debug(f"Parsed parent_id: {parent_id}")\n        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")\n\n        # Step 2: Validate input\n        if not isinstance(ordered_tasks, list) or not all(\n            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task\n            for task in ordered_tasks\n        ):\n            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")\n            return jsonify({\n                "error": "Invalid input format for \'ordered_tasks\'. Each task must include \'id\', \'sort_order\', and \'parent_id\'."\n            }), 400\n\n        # Step 3: Validate parent task (if applicable)\n        if parent_id is not None:\n            parent_task = Task.query.get(parent_id)\n            if not parent_task:\n                logger.error(f"Parent task with ID {parent_id} not found.")\n                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400\n\n        logger.info("Input validation passed. Proceeding with task updates...")\n\n        # Step 4: Process updates for each subtask\n        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation\n\n        for task_data in ordered_tasks:\n            subtask_id = task_data["id"]\n            sort_order = task_data["sort_order"]\n            new_parent_id = task_data["parent_id"]\n\n            # Fetch the subtask from the database\n            subtask = Task.query.get(subtask_id)\n            if not subtask:\n                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")\n                continue\n\n            # Log and update parent_id if it changes\n            if new_parent_id is not None and new_parent_id != subtask.parent_id:\n                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")\n                subtask.parent_id = new_parent_id\n\n            # Update sort order\n            subtask.sort_order = sort_order\n            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")\n\n            # Add to the list of updated subtasks for validation\n            updated_subtasks.append(subtask)\n\n        # Step 5: Commit changes to the database\n        try:\n            db.session.commit()\n            logger.info(f"Subtasks reordered successfully: {[task[\'id\'] for task in ordered_tasks]}")\n        except Exception as e:\n            logger.error(f"Error committing changes to the database: {str(e)}")\n            db.session.rollback()\n            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500\n\n        # Step 6: Post-commit validation\n        for subtask in updated_subtasks:\n            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")\n            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")\n\n        # Step 7: Return success response\n        return jsonify({\n            "success": True,\n            "message": "Subtasks reordered successfully.",\n            "updated_subtasks": [subtask.id for subtask in updated_subtasks]\n        }), 200\n\n    except Exception as e:\n        # Step 8: Handle unexpected errors\n        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)\n        db.session.rollback()\n        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500\n```\nKey Changes and Descriptive Comments\n\t1.\tInput Parsing:\n\t•\tExtracts parent_id and ordered_tasks from the request payload.\n\t•\tLogs the parsed values for debugging.\n\t2.\tInput Validation:\n\t•\tEnsures ordered_tasks is a list of dictionaries with the required keys.\n\t•\tValidates parent_id if provided, ensuring the parent task exists in the database.\n\t3.\tUpdate Processing:\n\t•\tIterates through ordered_tasks, updating each task’s parent_id and sort_order.\n\t•\tLogs changes for each task.\n\t4.\tDatabase Commit:\n\t•\tCommits all updates in a single transaction.\n\t•\tLogs success or rolls back changes in case of an error.\n\t5.\tPost-Commit Validation:\n\t•\tVerifies that the parent_id and sort_order changes were successfully saved to the database.\n\t6.\tError Handling:\n\t•\tCaptures and logs exceptions during processing or committing.\n\t•\tProvides meaningful error messages to the frontend.\n\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:46:29.348853', 'updated_at': '2025-02-06T21:59:21.617065'}, {'id': 131, 'name': 'Step 5: Update utils.py', 'description': 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nChanges to Make:\n\t1.\tEnhance Task Filtering:\n\t•\tEnsure the filters handle parent-child relationships explicitly.\n\t•\tAdd options to include or exclude subtasks in queries.\n\t2.\tUtility Function for Debugging Parent-Child Relationships:\n\t•\tProvide a function to generate a map or list of parent-child relationships for debugging purposes.\n\t3.\tValidation Functions:\n\t•\tAdd a utility function to validate parent-child relationships and ensure no circular dependencies.\n\nUpdated utils.py Code:\n```\nimport logging\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import joinedload\nfrom app.extensions.db import db\nfrom app.tasks.models import Task\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\n\nclass TaskService:\n    @staticmethod\n    def filter_tasks(filters=None, include_subtasks=True, page=None, per_page=None):\n        """\n        Dynamically filters tasks with an option to include or exclude subtasks.\n\n        Args:\n            filters (dict): Filtering criteria.\n            include_subtasks (bool): Whether to include subtasks in the query.\n            page (int, optional): Page number for pagination.\n            per_page (int, optional): Items per page for pagination.\n\n        Returns:\n            Query or Pagination: A SQLAlchemy query object or paginated results.\n        """\n        query = Task.query.options(\n            db.joinedload(Task.project).joinedload(Project.contributors),\n            db.joinedload(Task.contributor),\n            db.joinedload(Task.children),\n        ).order_by(Task.sort_order)\n\n        if filters:\n            logger.debug(f"Applying filters: {filters}")\n\n            # Apply standard filters\n            if "is_archived" in filters:\n                query = query.filter(Task.is_archived == filters["is_archived"])\n            if "project_id" in filters:\n                query = query.filter(Task.project_id == filters["project_id"])\n            if "task_type" in filters:\n                if isinstance(filters["task_type"], list):\n                    query = query.filter(Task.task_type.in_(filters["task_type"]))\n                else:\n                    query = query.filter(Task.task_type == filters["task_type"])\n            if "completion_status" in filters:\n                completion_map = {"completed": True, "in_progress": False}\n                if filters["completion_status"] in completion_map:\n                    query = query.filter(Task.completed == completion_map[filters["completion_status"]])\n\n            # Optionally exclude subtasks\n            if not include_subtasks:\n                query = query.filter(Task.task_type != "Subtask")\n\n        logger.debug(f"Generated query: {query}")\n\n        # Pagination\n        if page and per_page:\n            return query.paginate(page=page, per_page=per_page, error_out=False)\n        return query\n\n    @staticmethod\n    def debug_parent_child_relationships(project_id=None):\n        """\n        Generates a debug map of parent-child relationships for all tasks.\n\n        Args:\n            project_id (int, optional): Restrict to tasks from a specific project.\n\n        Returns:\n            dict: A dictionary mapping parent IDs to their child task IDs.\n        """\n        query = Task.query\n        if project_id:\n            query = query.filter(Task.project_id == project_id)\n\n        tasks = query.options(\n            db.load_only(Task.id, Task.parent_id)\n        ).all()\n\n        relationship_map = {}\n        for task in tasks:\n            if task.parent_id not in relationship_map:\n                relationship_map[task.parent_id] = []\n            relationship_map[task.parent_id].append(task.id)\n\n        logger.debug(f"Parent-Child Relationship Map: {relationship_map}")\n        return relationship_map\n\n    @staticmethod\n    def validate_parent_child_relationships():\n        """\n        Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.\n\n        Raises:\n            ValueError: If invalid relationships are detected.\n        """\n        tasks = Task.query.options(db.joinedload(Task.parent)).all()\n\n        for task in tasks:\n            if task.parent_id:\n                parent_task = task.parent\n                if not parent_task:\n                    raise ValueError(f"Task {task.id} has an invalid parent ID {task.parent_id}.")\n\n                # Validate hierarchy rules\n                if task.task_type == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError(f"User Story {task.id} must have an Epic as its parent.")\n                if task.task_type == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError(f"Subtask {task.id} must have a User Story as its parent.")\n\n        logger.info("All parent-child relationships are valid.")\n\n    @staticmethod\n    def get_all_task_ids_with_parents():\n        """\n        Returns a flat list of tasks with their parent IDs for debugging.\n\n        Returns:\n            list: A list of tuples (task_id, parent_id).\n        """\n        tasks = Task.query.with_entities(Task.id, Task.parent_id).all()\n        logger.debug(f"Task IDs with Parent IDs: {tasks}")\n        return tasks\n```\n\n\nExplanation of Changes:\n\t1.\tfilter_tasks Enhancements:\n\t•\tAdded include_subtasks parameter to optionally exclude subtasks from the query.\n\t2.\tdebug_parent_child_relationships:\n\t•\tCreates a parent-child relationship map for debugging purposes.\n\t3.\tvalidate_parent_child_relationships:\n\t•\tIterates through all tasks to validate parent-child hierarchy and ensures no invalid relationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t•\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.091824', 'updated_at': '2025-01-16T19:22:36.236691'}, {'id': 135, 'name': 'Step 3: Update list.html', 'description': 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already includes everything needed. No required changes.\n\nHere´s the relevant section of list.html:\n\n```\n<tr id="task-{{ task.id }}"\n                class="task-row {% if task.task_type == \'Subtask\' %}subtask-row{% elif task.task_type == \'User Story\' %}user-story-row{% elif task.task_type == \'Epic\' %}epic-row{% endif %}"\n                style="background-color: \n                {% if task.task_type == \'Subtask\' %}\n                    rgba(200, 230, 255, 0.5); /* Light blue for Subtask */\n                {% elif task.task_type == \'User Story\' %}\n                    rgba(255, 255, 200, 0.5); /* Light yellow for User Story */\n                {% elif task.task_type == \'Epic\' %}\n                    rgba(255, 200, 200, 0.5); /* Light red for Epic */\n                {% else %}\n                    rgba(240, 240, 240, 1); /* Default light gray */\n                {% endif %};"\n                data-task-id="{{ task.id }}"\n                data-parent-id="{{ task.parent_id or \'\' }}"\n                data-level="{{ depth }}">\n                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>\n                <td>\n                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}\n                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}" aria-label="Toggle details for task {{ task.name }}">\n                        <i class="bi bi-chevron-right"></i>\n                    </button>\n                    {% endif %}\n                </td>\n                <td class="fw-medium fs-6 \n                {% if task.task_type == \'Epic\' %}\n                    epic-cell\n                {% elif task.task_type == \'User Story\' %}\n                    user-story-cell\n                {% elif task.task_type == \'Subtask\' %}\n                    subtask-cell\n                {% endif %}" \n                style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">\n                <span class="bi fs-6\n                {% if task.task_type == \'Epic\' %}\n                    bi-circle-fill\n                {% elif task.task_type == \'User Story\' %}\n                    bi-circle-half\n                {% elif task.task_type == \'Subtask\' %}\n                    bi-circle\n                {% endif %}">\n                </span>\n                {{ task.name }}\n                <small class="text-muted fw-light">\n                    (Parent-ID: {{ task.parent_id or \'None\' }})\n                </small>\n                <!-- Open Link -->\n                <a href="#" class="task-open-link" data-task-id="{{ task.id }}">\n                    <i class="bi bi-arrows-angle-expand" style="font-size: 0.8rem; color: white;"></i>\n                    Open\n                </a>\n            </td>\n                <td class="fw-light fs-6">\n                    <small class>\n                    LAC-{{ task.id }}\n                    </small>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light text-bg-secondary">\n                        {{ task.project if task.project else "Unknown Project" }}\n                    </span>\n                </td>\n                <td class="fs-6" data-contributor-column>{{ task.assigned_to if task.assigned_to else "Unassigned" }}</td>\n                <td class="fs-6">{{ task.story_points }}</td>\n                <td class="fs-6">\n                    <span class="badge rounded-pill fw-light text-bg-light">\n                        {{ task.task_type }}\n                    </span>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light {% if task.completed %}text-bg-success{% else %}text-bg-warning{% endif %}">\n                        {{ "Completed" if task.completed else "In Progress" }}\n                    </span>\n                </td>\n                <td>\n                    <!-- Delete Icon -->\n                    <button class="btn btn-dark btn-sm delete-task-btn" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .2rem; --bs-btn-font-size: .75rem;" data-task-id="{{ task.id }}" aria-label="Deletes task {{ task.id }}">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n            </tr>\n            {% for child in tasks if child.parent_id == task.id %}\n                {{ render_task(child, tasks, depth + 1) }}\n            {% endfor %}\n            {% endmacro %}\n            \n            <!-- Render top-level tasks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:46:29.349784', 'updated_at': '2025-01-16T19:22:36.238473'}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'description': 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitHub Login involves integrating OAuth 2.0, which both services support. The complexity depends on your app’s existing setup, frameworks, and experience with third-party authentication. Below is a breakdown:\n\nKey Steps for Implementing Google or GitHub Login\n\t1.\tSet Up OAuth Credentials:\n\t•\tRegister your application in the Google Cloud Console or GitHub Developer Settings.\n\t•\tObtain the client ID and client secret.\n\t2.\tInstall Required Libraries:\n\t•\tUse a library for OAuth (e.g., flask-oauthlib, python-social-auth, or authlib).\n\t•\tPopular frameworks like Flask and Django already have robust integrations for OAuth providers.\n\t3.\tBackend Configuration:\n\t•\tImplement an endpoint to handle the OAuth flow (/auth/login/google or /auth/login/github).\n\t•\tConfigure your app to send users to Google or GitHub’s authentication page.\n\t•\tHandle the OAuth callback to exchange the authorization code for an access token.\n\t•\tVerify the token and fetch user information (e.g., email, name).\n\t4.\tLink OAuth to User Registration:\n\t•\tOn successful login, create or retrieve a user in your database.\n\t•\tStore the user’s details like email, OAuth provider ID, and access token.\n\t5.\tFrontend Integration (if applicable):\n\t•\tAdd “Login with Google” or “Login with GitHub” buttons.\n\t•\tRedirect to your backend’s OAuth endpoint when clicked.', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T12:15:54.291625', 'updated_at': '2025-01-16T19:22:36.239866'}, {'id': 62, 'name': 'Add OAuth integration for Google Login', 'description': 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.241200'}, {'id': 64, 'name': 'Setup project credentials for Google API', 'description': 'Generate client ID and secret from Google API Console for your application.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-01-16T19:22:36.242497'}, {'id': 67, 'name': 'Test Google OAuth flow', 'description': 'Verify the OAuth flow using test accounts and check the token exchange.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.243780'}, {'id': 65, 'name': 'Implement backend endpoints for Google OAuth', 'description': 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-01-16T19:22:36.244932'}, {'id': 63, 'name': 'Add OAuth integration for GitHub Login', 'description': 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.246358'}, {'id': 68, 'name': 'Register application in GitHub Developer Console', 'description': 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.247746'}, {'id': 69, 'name': 'Handle callback from GitHub', 'description': 'Implement the callback endpoint to process the authorization code from GitHub.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.248912'}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'description': 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 18, 'status': 'Not Started', 'created_at': '2025-01-07T19:53:50.085064', 'updated_at': '2025-01-16T19:22:36.250169'}, {'id': 100, 'name': '1.1 User Registration', 'description': 'As a user, I want to register with a username, email, and password so that I can create an account and access the system.\n\n**Acceptance Criteria:**\n\n•\tUser can input valid username, email, and password.\n•\tUsername and email must be unique.\n•\tErrors are displayed for invalid inputs or duplicate accounts.\n•\tPasswords must meet complexity requirements and be securely stored.\n•\tSuccessful registration redirects users to a login page.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:59:09.044667', 'updated_at': '2025-01-16T19:22:36.251812'}, {'id': 107, 'name': '1.1.1 Database Changes for User Registration', 'description': '1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.\n   CREATE TABLE public.users (\n       id SERIAL PRIMARY KEY,\n       username VARCHAR(50) UNIQUE NOT NULL,\n       email VARCHAR(100) UNIQUE NOT NULL,\n       password_hash VARCHAR(255) NOT NULL,\n       created_at TIMESTAMP DEFAULT NOW(),\n       updated_at TIMESTAMP DEFAULT NOW()\n);\n\n\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:30.747962'}, {'id': 108, 'name': '1.1.2 Backend API for Registration', 'description': '•\tCreate an endpoint POST /api/register:\n•\tValidate input fields.\n•\tHash the password using bcrypt or argon2.\n•\tInsert the user into the users table.\n•\tReturn success/failure responses.\ndddhfff\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:33.067643'}, {'id': 112, 'name': '1.2.2 Frontend Login Page', 'description': 'Develop a frontend form for user login with email and password inputs.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.683644'}, {'id': 109, 'name': '1.1.3 Create Frontend Registration Page', 'description': 'Develop a frontend form to collect user registration details.\n•\tAdd a form for username, email, and password inputs.\n•\tUse client-side validation (e.g., email format).\n•\tSend a POST request to /api/register.\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.684988'}, {'id': 110, 'name': '1.1.4 Unit Tests for Registration', 'description': 'Write unit tests for:\n\n•\tValid registration.\n•\tDuplicate username/email scenarios.\n•\tInvalid input handling.\nff', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.686902'}, {'id': 101, 'name': '1.2 User Login', 'description': 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n•\tUsers can log in with a valid email and password.\n•\tErrors are displayed for invalid credentials.\n•\tSuccessful login stores a session or JWT token.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:25:53.687936'}, {'id': 111, 'name': '1.2.1 Backend API for Login', 'description': 'Create POST /api/login endpoint to handle user login.\njjsjj', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.689096'}, {'id': 113, 'name': '1.2.3 Session Management', 'description': 'Implement secure session handling using cookies or JWT.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:20.968680'}, {'id': 114, 'name': '1.2.4 Unit Tests for Login', 'description': 'Write tests for successful and failed login attempts.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:22:36.265866'}, {'id': 106, 'name': 'Password Reset', 'description': 'As a user, I want to reset my password securely using email.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.267247'}, {'id': 128, 'name': 'Frontend Password Reset Page', 'description': 'Develop a page for users to enter a new password using a valid token.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.269158'}, {'id': 129, 'name': 'Testing Password Reset', 'description': 'Write tests for email delivery, token validation, and password updates.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.270849'}, {'id': 102, 'name': 'Logout', 'description': 'As a user, I want to log out so that I can end my session securely.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.272605'}, {'id': 117, 'name': 'Tests for Logout', 'description': 'Verify session invalidation and redirection to the login page.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.274575'}, {'id': 116, 'name': 'Frontend Logout Button', 'description': 'Add a logout button to the UI and handle session clearing.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-09T12:31:17.939784'}, {'id': 115, 'name': 'Backend API for Logout', 'description': 'Create POST /api/logout endpoint to invalidate user sessions.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.277547'}, {'id': 61, 'name': 'Parent task assignment', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-04T22:31:45.205815', 'updated_at': '2025-01-16T19:22:36.279012'}, {'id': 45, 'name': 'Display Default Value in Dropdown', 'description': 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.280493'}, {'id': 50, 'name': 'Retrieve Current Parent Task', 'description': 'Retrieve the current parent task’s ID and name from the backend.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 2, 'status': 'In Progress', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-10T07:41:43.569807'}, {'id': 51, 'name': 'Set Default Value', 'description': 'Set the default value in the dropdown based on the retrieved data.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 45, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 1, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.283309'}, {'id': 46, 'name': 'Search for Parent Tasks', 'description': 'Allow users to search for tasks dynamically in the dropdown by typing.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.284882'}, {'id': 54, 'name': 'Test Partial Matching', 'description': 'Ensure the search results update in real-time as the user types.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.286248'}, {'id': 47, 'name': 'Handle Large Datasets Efficiently', 'description': 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 13, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.287641'}, {'id': 56, 'name': 'Paginate API Responses', 'description': 'Implement server-side filtering and pagination for large datasets.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.289338'}, {'id': 55, 'name': 'Enable Lazy Loading', 'description': 'Enable lazy loading or virtualization in Virtual Select.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.290910'}, {'id': 48, 'name': 'Select and Deselect Parent Tasks', 'description': 'Allow users to select a parent task or deselect by choosing "None."', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.292389'}, {'id': 57, 'name': 'Ensure None Option Availability', 'description': 'Add “None” as a selectable option and ensure it stays at the top of the list.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.294045'}, {'id': 58, 'name': 'Handle Selection Events', 'description': 'Implement event listeners to update the form’s state when the selection changes.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.295385'}, {'id': 49, 'name': 'Integrate Dropdown with Task Form', 'description': 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.296814'}, {'id': 59, 'name': 'Bind Dropdown to Form Field', 'description': 'Bind the dropdown to the form’s parent task field.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-09T23:48:08.770907'}, {'id': 60, 'name': 'Test Form Submission', 'description': 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.299971'}, {'id': 41, 'name': 'Implement Searchable Dropdown', 'description': 'As a user, I want a searchable dropdown for parent task assignment.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Completed', 'created_at': '2025-01-03T09:14:28.285904', 'updated_at': '2025-02-10T07:41:33.252945'}, {'id': 52, 'name': 'Add Search Box to Dropdown', 'description': 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-10T07:40:33.847642'}, {'id': 53, 'name': 'Implement AJAX Search', 'description': 'Implement AJAX-based search to fetch tasks dynamically from the backend.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-09T07:55:00.680183'}, {'id': 42, 'name': 'Choose Dropdown Library', 'description': 'Research and decide on the dropdown library to use.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-10T07:41:18.814716'}, {'id': 43, 'name': 'Integrate Dropdown Library', 'description': 'Integrate the chosen dropdown library into the project.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Completed', 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-10T07:41:23.756572'}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t•\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t•\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-01-16T19:22:36.311560'}, {'id': 85, 'name': 'Assign multiple contributors to a task', 'description': 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:32:39.466022', 'updated_at': '2025-01-16T19:22:36.313789'}, {'id': 90, 'name': 'Update frontend to display and manage multiple contributors', 'description': 'Allow users to view, add, or remove multiple contributors via the UI.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-01-16T19:22:36.315695'}, {'id': 88, 'name': 'Update database schema for multiple contributors', 'description': 'Modify the task table to support many-to-many relationships for contributors.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-01-16T19:22:36.317500'}, {'id': 89, 'name': 'Develop backend API for adding contributors to a task', 'description': 'Create endpoints to add, update, and remove contributors for a task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-01-16T19:22:36.319281'}, {'id': 86, 'name': 'Allow designation of task owner', 'description': 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:29.330562', 'updated_at': '2025-01-16T19:22:36.320840'}, {'id': 93, 'name': 'Update frontend to manage task ownership', 'description': 'Allow users to assign or update the task owner via the UI.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-01-16T19:22:36.322637'}, {'id': 91, 'name': 'Update database schema for task ownership', 'description': 'Add a column or relationship to assign a single owner per task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-01-16T19:22:36.324051'}, {'id': 92, 'name': 'Develop backend API for assigning task owner', 'description': 'Create endpoints to assign or update the owner of a task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-11T09:19:44.027744'}, {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-01-16T19:22:36.326985'}, {'id': 96, 'name': 'Allow admin users to create and customize contributor roles via frontend', 'description': 'Provide UI functionality for admins to manage contributor roles dynamically.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-01-16T19:22:36.328562'}, {'id': 94, 'name': 'Add database support for contributor roles', 'description': 'Introduce a roles table and link contributors to specific roles for tasks.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T08:22:56.181530'}, {'id': 95, 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T08:22:02.276492'}, {'id': 127, 'name': 'Backend API for Password Reset', 'description': 'Create endpoints to handle password reset requests and token validation.\ndfdf\n\nasdasd', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-10T23:59:50.734037'}, {'id': 126, 'name': 'Email Configuration for Password Reset', 'description': 'Configure email service to send password reset links.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.334340'}, {'id': 104, 'name': 'Middleware for Role Enforcement', 'description': 'As a system, I want to enforce role-based access to specific routes.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:23:40.346816'}, {'id': 122, 'name': 'Testing Role Enforcement', 'description': 'Write tests to ensure proper access control based on roles.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-01-16T19:23:58.185693'}, {'id': 121, 'name': 'Develop Role Enforcement Middleware', 'description': 'Implement middleware to check user roles for access control.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-01-16T19:23:58.187439'}, {'id': 105, 'name': 'Profile Management', 'description': 'As a user, I want to update my profile (username, email, password).', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.339830'}, {'id': 123, 'name': 'Backend API for Profile Management', 'description': 'Create PATCH /api/profile endpoint to update user details.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-01-16T19:24:19.678781'}, {'id': 125, 'name': 'Testing Profile Updates', 'description': 'Write tests for profile update functionality.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-01-16T19:24:19.680382'}]
2025-02-11 09:23:02,938 DEBUG: Task types: ['all', 'Epic', 'Subtask', 'User Story']
2025-02-11 09:23:02,938 DEBUG: Projects: [<Project Project Alpha (ID: 1)>, <Project Project Beta (ID: 2)>, <Project Project Gamma (ID: 3)>, <Project Project Theta (ID: 4)>, <Project Project Delta (ID: 5)>, <Project PMS - Feature Requests (ID: 7)>, <Project PMS - Backlog (ID: 6)>]
2025-02-11 09:23:02,938 DEBUG: Tasks response: [{'id': 290, 'name': 'issue: error when changing task type and', 'description': 'issue: error when changing task type and parent task before saving', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:00:03.417734', 'updated_at': '2025-02-10T09:15:09.284969'}, {'id': 298, 'name': 'example user story with parent epic 297', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 297, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:41:01.907455', 'updated_at': '2025-02-10T14:59:04.142570'}, {'id': 275, 'name': 'add sprints, cycles', 'description': 'Make naming customizable', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-10T08:38:37.622196'}, {'id': 276, 'name': 'add support for priority', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-10T08:28:47.447612'}, {'id': 264, 'name': 'close all / open all childtasks', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-02-10T08:47:14.915970'}, {'id': 285, 'name': 'add text truncation to project names in task list', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-10T09:45:47.029729'}, {'id': 257, 'name': 'Update Task API Integration', 'description': "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-02-05T22:55:49.566819', 'updated_at': '2025-02-05T22:18:17.807154'}, {'id': 294, 'name': 'issue: task table filters not working', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:19:21.022598', 'updated_at': '2025-02-10T10:19:21.024676'}, {'id': 267, 'name': 'improvements to toggles and nested tasks', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:29:12.464594', 'updated_at': '2025-02-10T08:47:24.581680'}, {'id': 271, 'name': 'make sure dynamically added rows has the exact same styling and includes every element', 'description': 'Missing elements:\n- Open link\n- Default project\n- Project name should be inside a pill\n- Task type should be in a pill\n- Estimations should be 0, not N/A\n- Make sure font size is matching\n- status should have the dropdown inside a pill\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:21:07.108431', 'updated_at': '2025-02-10T08:38:47.340105'}, {'id': 283, 'name': 'fix update title', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:58.769700', 'updated_at': '2025-02-10T08:46:47.282087'}, {'id': 273, 'name': 'disable parent task selector in epics', 'description': 'and add text, Epic can´t have parent tasks', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:45:20.740910', 'updated_at': '2025-02-10T08:39:17.639890'}, {'id': 269, 'name': 'fix styling for sweetalert', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-02-08T15:54:56.717846', 'updated_at': '2025-02-10T08:39:32.172437'}, {'id': 286, 'name': 'add support for labels/tags', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:46:23.985620', 'updated_at': '2025-02-10T09:46:23.987564'}, {'id': 299, 'name': 'example sub task with parent user story 298', 'description': 'Test update 1\nTest update 2\nTest update 3', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 298, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:42:38.905700', 'updated_at': '2025-02-10T23:23:08.671464'}, {'id': 266, 'name': 'highlight the nested tasks', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-02-10T08:47:04.382929'}, {'id': 279, 'name': 'github integration', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:38.238202', 'updated_at': '2025-02-10T08:39:24.168451'}, {'id': 289, 'name': 'issue: parent task is lost when updating task', 'description': '', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:56:25.273984', 'updated_at': '2025-02-10T09:12:47.626993'}, {'id': 272, 'name': 'implement a markdown text editor like notion', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-02-10T08:28:39.669255'}, {'id': 278, 'name': 'search feature for tasks list', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:03.369833', 'updated_at': '2025-02-10T08:39:04.005957'}, {'id': 281, 'name': 'add high level plan', 'description': 'Add some sort of high level plan that aims to keep PM/PO´s on track and not get lost into the details of an overwhelminly large backlog', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:27:01.218606', 'updated_at': '2025-02-10T08:38:54.754760'}, {'id': 287, 'name': 'when moving a parent item to another project make sure the subtasks are moved as well', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:48:31.986870', 'updated_at': '2025-02-10T09:48:31.988859'}, {'id': 293, 'name': 'click on title should copy the task title and id to clipboard', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:16:33.508209', 'updated_at': '2025-02-10T10:16:33.510414'}, {'id': 277, 'name': 'custom task workflow statuses', 'description': 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- Custom status\n-- Custom status\n- In Progress\n-- Custom status\n-- Custom status\n-- Custom status\n- Completed\n-- Custom status\n-- Custom status\n\n2. How can we track a task through different stages and save the sequence of events or stages the task has gone through?\nI´m thinking it could be good for mapping out processes, identifying bottlenecks and provide valuable insights while improving and streamlining workflows.\n- Stages\n- Contacts taken\n- Respons time \n- Time to action after responses\n- Dependencies\n\nNeed to be able to record every action related to this action.\nCommunication integrations\n- Slack\n- Email\n- Text messages\n- Phonecalls\n- Calendar events, meetings\n- Zoom, Google meet, Teams etc..\n\n\n2. Set custom statuses per project (can use tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:16:03.352588', 'updated_at': '2025-02-10T08:38:28.123328'}, {'id': 274, 'name': 'add support for goals, initiatives, okr´s', 'description': 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:46:27.204912', 'updated_at': '2025-02-10T08:28:17.663922'}, {'id': 280, 'name': 'logging (task and project history)', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:37:44.435112', 'updated_at': '2025-02-10T08:28:28.947805'}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:17.786154', 'updated_at': '2025-02-10T09:41:17.787861'}, {'id': 296, 'name': 'issue: contributor is lost after updating task', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:26:43.881947', 'updated_at': '2025-02-10T10:26:43.884004'}, {'id': 288, 'name': 'when trying to move subtask to another project, make sure a warning is displayed', 'description': 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be lost"\nOR\n\nIs it possible, and is it desireable to keep parent child relationships across projects?\nSo that a parent can be in one project but the child tasks can be in different projects?\n\nLets say \nParent epic is \n"Internationalisation"\nChild user stories are\n- Timezones\n- Language\n- Currency\n- Day, Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:54:36.297869', 'updated_at': '2025-02-10T08:54:51.840686'}, {'id': 284, 'name': 'add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-10T09:42:27.720908'}, {'id': 295, 'name': 'issue: drag and drop errors', 'description': '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:22:54.461413', 'updated_at': '2025-02-10T10:22:54.462542'}, {'id': 297, 'name': 'example parent epic', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:39:51.620509', 'updated_at': '2025-02-10T10:39:51.622712'}, {'id': 292, 'name': 'issue: assigning contributor does not work', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:11:12.273779', 'updated_at': '2025-02-10T10:11:12.274809'}, {'id': 265, 'name': 'smooth transition for toggles', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-02-10T08:46:55.831743'}, {'id': 270, 'name': 'the newest task', 'description': '', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:07:34.368035', 'updated_at': '2025-02-10T01:07:34.372478'}, {'id': 291, 'name': 'add dropdowns in task list for changing: project, assigned to, estimate and task type (labels/tags)', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-02-10T10:09:52.997455'}, {'id': 136, 'name': 'Page scroll should stay in position when reloading', 'description': '', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-16T18:21:50.187247', 'updated_at': '2025-01-16T19:22:36.214901'}, {'id': 130, 'name': 'Implement the Map of Task Relationships solution for drag-and-drop', 'description': 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.093022', 'updated_at': '2025-01-16T19:22:36.216705'}, {'id': 133, 'name': 'Step 4: Enhance Logging in models.py', 'description': 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nupdating the Task model in the following ways:\n\n1.\tLog Changes to parent_id:\n\t•\tLog changes to parent_id during updates, including old and new values.\n\t2.\tValidate Hierarchy with Logging:\n\t•\tLog detailed messages when validating hierarchy changes, especially for circular dependency checks.\n\nHere’s how the models.py can be updated:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy import func, cast, CheckConstraint\nfrom sqlalchemy.orm import validates\nfrom app.extensions.db import db\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\nclass Task(db.Model):\n    __tablename__ = "task"\n    \n    # Other columns...\n\n    parent_id = db.Column(\n        db.Integer, db.ForeignKey("task.id"), index=True, nullable=True\n    )\n\n    # Relationships\n    parent = db.relationship(\n        "Task", remote_side=[id], back_populates="children", lazy="select"\n    )\n    children = db.relationship(\n        "Task", back_populates="parent", lazy="select"\n    )\n\n    \n\n\n    @staticmethod\n    def _validate_no_circular_references(new_parent_id):\n        """\n        Validates that there are no circular references in the task hierarchy.\n\n        Args:\n            new_parent_id (int): The new parent ID to validate.\n\n        Raises:\n            ValueError: If a circular reference is detected.\n        """\n        visited = set()\n        current_parent_id = new_parent_id\n\n        logger.info(f"Validating circular references for parent ID: {new_parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error(\n                    f"Circular reference detected: Parent ID {current_parent_id} already visited."\n                )\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            # Fetch the next parent_id in the hierarchy\n            parent = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not parent:\n                break  # Exit if no parent is found\n            current_parent_id = parent.parent_id\n\n        logger.info("No circular reference detected.")\n\n    @validates(\'parent_id\', \'task_type\')\n    def validate_task_changes(self, key, value):\n        """\n        Validates changes to \'parent_id\' and \'task_type\'.\n        Ensures hierarchy validity and checks for circular references.\n        """\n        logger.debug(f"Validating {key} change for Task {self.id}: {value}")\n\n        if key == \'parent_id\':\n            # Log changes to parent_id\n            if self.id and value != self.parent_id:\n                logger.info(f"Task {self.id}: Updating \'parent_id\' from {self.parent_id} to {value}")\n\n            # Prevent a task from being its own parent\n            if value and value == self.id:\n                logger.error("A task cannot be its own parent.")\n                raise ValueError("A task cannot be its own parent.")\n\n            # Check for circular references\n            if value:\n                Task.check_circular_reference(self.id, value)\n\n        elif key == \'task_type\':\n            # Log changes to task_type\n            if self.id and value != self.task_type:\n                logger.info(f"Task {self.id}: Updating \'task_type\' from {self.task_type} to {value}")\n\n        # Check hierarchy rules without triggering further validation\n        if key in [\'parent_id\', \'task_type\']:\n            self._validate_hierarchy_change(key, value)\n\n        logger.info(f"Validation passed for {key}: {value}")\n        return value\n\n    def _validate_hierarchy_change(self, key, value):\n        """\n        Validates hierarchy rules for the task based on `task_type` and `parent_id`.\n        """\n        if key == \'parent_id\' and value:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=value).first()\n            if not parent_task:\n                raise ValueError("Parent task does not exist.")\n\n            logger.debug(f"Validating hierarchy: Task {self.id}, Parent Type: {parent_task.task_type}")\n            if self.task_type == "User Story" and parent_task.task_type != "Epic":\n                raise ValueError("User Stories must have an Epic as a parent.")\n            if self.task_type == "Subtask" and parent_task.task_type != "User Story":\n                raise ValueError("Subtasks must have a User Story as a parent.")\n\n        elif key == \'task_type\' and self.parent_id:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=self.parent_id).first()\n            if parent_task:\n                logger.debug(f"Validating hierarchy: Task Type: {value}, Parent Type: {parent_task.task_type}")\n                if value == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError("User Stories must have an Epic as a parent.")\n                if value == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError("Subtasks must have a User Story as a parent.")\n\n        logger.info(f"Hierarchy validation passed for Task {self.id if self.id else \'New Task\'}.")\n\n    @staticmethod\n    def check_circular_reference(task_id, parent_id):\n        """\n        Iteratively checks for circular references in the task hierarchy.\n        Prevents stack overflow on deep hierarchies.\n        """\n        visited = set()\n        current_parent_id = parent_id\n\n        logger.info(f"Checking circular reference for Task {task_id} with Parent ID: {parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error("Circular reference detected!")\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            if current_parent_id == task_id:\n                logger.error("A task cannot be its own ancestor.")\n                raise ValueError("A task cannot be its own ancestor.")\n\n            # Fetch the next parent_id in the hierarchy\n            task = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not task:\n                break\n            current_parent_id = task.parent_id\n\n        logger.info("Circular reference check passed.")\n```\nKey Enhancements:\n\t1.\tlog_and_validate_parent_id_change:\n\t•\tLogs the old and new parent_id whenever it changes.\n\t•\tEnsures no circular references are introduced.\n\t2.\t_validate_no_circular_references:\n\t•\tValidates the parent_id field to prevent circular dependencies.\n\t•\tLogs progress and raises detailed errors if violations occur.\n\t3.\tlog_and_validate_task_type_change:\n\t•\tLogs changes to task_type with the old and new values.\n\t•\tRevalidates hierarchy rules when task_type changes.\n\t4.\tDetailed Logging for Circular Reference Validation:\n\t•\t_validate_no_circular_references and check_circular_reference methods log every step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t•\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:44:08.340041', 'updated_at': '2025-01-16T19:22:36.219710'}, {'id': 132, 'name': 'Step 1: Update tasks_table_interactions.js', 'description': '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the map for efficient parent-child relationship lookups instead of DOM traversal.\n\n```\nexport const TaskManager = {\n    init: function (csrfToken) {\n        this.csrfToken = csrfToken;\n        this.initTaskParentMap(); // Initialize the map\n        this.initDragAndDrop(); // Initialize drag-and-drop functionality\n    },\n\n    // Initialize a global map for task relationships\n    taskParentMap: new Map(),\n\n    // Build the taskParentMap from the DOM\n    initTaskParentMap: function () {\n        console.log("Initializing Task Parent Map...");\n        const rows = document.querySelectorAll("tr[data-task-id]");\n\n        rows.forEach((row) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = parseInt(row.dataset.parentId, 10) || null;\n            this.taskParentMap.set(taskId, parentId);\n        });\n\n        console.log("Task Parent Map initialized:", Array.from(this.taskParentMap.entries()));\n    },\n\n    // Update the map dynamically after drag-and-drop\n    updateTaskParentMap: function (taskId, parentId) {\n        console.log(`Updating Task Parent Map: Task ${taskId} -> Parent ${parentId}`);\n        this.taskParentMap.set(taskId, parentId);\n    },\n\n    initDragAndDrop: function () {\n        if (window.isDragAndDropInitialized) {\n            console.log("Drag-and-drop is already initialized.");\n            return;\n        }\n\n        console.log("Initializing drag-and-drop within TaskManager...");\n\n        const tableBody = document.querySelector("tbody");\n        if (!tableBody) {\n            console.warn("Task table body not found for drag-and-drop initialization");\n            return;\n        }\n\n        // Initialize Sortable.js for drag-and-drop functionality\n        Sortable.create(tableBody, {\n            handle: ".task-row", // Only draggable via `.task-row` elements\n            animation: 150, // Smooth animation\n            filter: ".task-open-link", // Prevent dragging on task links\n            preventOnFilter: true, // Prevent drag if filtered element is clicked\n            onEnd: async (event) => {\n                try {\n                    console.log("Drag-and-drop operation started...");\n                    const rows = Array.from(event.from.querySelectorAll(".task-row"));\n                    const reorderedTasks = [];\n\n                    rows.forEach((row, index) => {\n                        const taskId = parseInt(row.dataset.taskId, 10);\n                        let parentId = null;\n\n                        // Get the parent ID from the map or fallback to the dataset\n                        if (row.classList.contains("subtask-row")) {\n                            const parentRow = row.previousElementSibling;\n                            parentId = parentRow\n                                ? parseInt(parentRow.dataset.taskId, 10)\n                                : this.taskParentMap.get(taskId) || null;\n                        }\n\n                        // Update the taskParentMap dynamically\n                        this.updateTaskParentMap(taskId, parentId);\n\n                        reorderedTasks.push({\n                            id: taskId,\n                            sort_order: index + 1,\n                            parent_id: parentId,\n                        });\n                    });\n\n                    console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n                    console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n                    // Send the payload to the backend\n                    const response = await fetch("/tasks/reorder_subtasks", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                            "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n                        },\n                        body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n                    });\n\n                    if (!response.ok) {\n                        const errorData = await response.json();\n                        console.error("Error reordering tasks:", errorData);\n                        alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n                        return;\n                    }\n\n                    const data = await response.json();\n                    console.log("Task reordering successful:", data);\n\n                } catch (error) {\n                    console.error("Error during drag-and-drop operation:", error);\n                    alert("An unexpected error occurred while reordering tasks.");\n                }\n            },\n        });\n\n        window.isDragAndDropInitialized = true;\n        console.log("Drag-and-drop initialized successfully.");\n    },\n};\n```\n\nKey Updates:\n\t1.\tPrecomputed Map (taskParentMap):\n\t•\tThe initTaskParentMap function initializes the map by iterating over DOM elements and mapping each task’s ID to its parent ID.\n\t•\tThe updateTaskParentMap dynamically updates the map when tasks are reordered.\n\t2.\tEfficient Parent Lookup:\n\t•\tThe parentId is derived from the precomputed map rather than DOM traversal.\n\t3.\tBackend Payload:\n\t•\tA structured payload (reorderedTasks) is sent to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t•\tCSRF protection is ensured by passing the token to the request headers.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:44:08.338301', 'updated_at': '2025-02-06T21:59:17.417466'}, {'id': 134, 'name': 'Step 2: Update the Backend in routes.py', 'description': 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\nPlan for step 2:\n\t1.\tVerify the payload structure:\n\t•\tEnsure that the payload includes all necessary fields (id, sort_order, parent_id) for each task.\n\t•\tValidate that the parent-child relationships in the precomputed map (taskParentMap) are reflected correctly in the payload.\n\t2.\tSubmit the payload to the backend:\n\t•\tEnhance the fetch request in the onEnd function of initDragAndDrop to log detailed submission data.\n\t•\tConfirm the payload integrity in the browser console before submission.\n\t3.\tUpdate backend logging:\n\t•\tAdd logging to /reorder_subtasks in routes.py to confirm receipt of the correct payload and process parent-child updates.\n\t•\tLog before and after database updates for better debugging.\n\n-----\nUpdated tasks_table_interactions.js\n\nReplace this section:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    let parentId = null;\n```\nWith:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    const parentId = this.taskParentMap.get(taskId) || null;\n```\nThe this.taskParentMap provides a precomputed and dynamic mapping of taskId to parentId. By using this map, we avoid relying on DOM traversal logic (row.closest or row.previousElementSibling) during drag-and-drop operations, which can sometimes be unreliable or cumbersome.\n\nFull Revised onEnd section:\n```\nonEnd: async (event) => {\n    try {\n        console.log("Drag-and-drop operation started...");\n        const rows = Array.from(event.from.querySelectorAll(".task-row"));\n        const reorderedTasks = [];\n\n        rows.forEach((row, index) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = this.taskParentMap.get(taskId) || null;\n\n            // Update the taskParentMap dynamically\n            this.updateTaskParentMap(taskId, parentId);\n\n            reorderedTasks.push({\n                id: taskId,\n                sort_order: index + 1,\n                parent_id: parentId,\n            });\n        });\n\n        console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n        console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n        // Send the payload to the backend\n        const response = await fetch("/tasks/reorder_subtasks", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n            },\n            body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error("Error reordering tasks:", errorData);\n            alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n            return;\n        }\n\n        const data = await response.json();\n        console.log("Task reordering successful:", data);\n\n    } catch (error) {\n        console.error("Error during drag-and-drop operation:", error);\n        alert("An unexpected error occurred while reordering tasks.");\n    }\n}\n```\n---------------------------------\nEnsure updates include:\n\t•\tBetter Logging: Adding logs for key events such as database changes and validation results.\n\t•\tInput Validation: Ensure all required fields (id, sort_order, parent_id) exist in the payload.\n\t•\tPost-Commit Validation: Confirm database updates after the commit.\n\t•\tImproved Error Handling: Include specific error messages and consistent rollback mechanisms.\n\nBelow is the revised reorder_subtasks route with descriptive comments for each section:\n```\n@bp.route("/reorder_subtasks", methods=["POST"])\ndef reorder_subtasks():\n    """\n    Reorder subtasks globally or reassign them to a different parent.\n\n    Steps:\n    - Parse and validate input from the frontend.\n    - Update parent-child relationships and sort order in the database.\n    - Commit changes and return a success response.\n    - Handle errors gracefully and provide detailed logs for debugging.\n    """\n    logger.info("Entering reorder_subtasks route...")\n    logger.info(f"Received payload for reordering tasks: {request.json}")\n\n    try:\n        # Step 1: Parse input\n        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered\n        ordered_tasks = request.json.get("ordered_tasks", [])\n\n        logger.debug(f"Parsed parent_id: {parent_id}")\n        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")\n\n        # Step 2: Validate input\n        if not isinstance(ordered_tasks, list) or not all(\n            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task\n            for task in ordered_tasks\n        ):\n            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")\n            return jsonify({\n                "error": "Invalid input format for \'ordered_tasks\'. Each task must include \'id\', \'sort_order\', and \'parent_id\'."\n            }), 400\n\n        # Step 3: Validate parent task (if applicable)\n        if parent_id is not None:\n            parent_task = Task.query.get(parent_id)\n            if not parent_task:\n                logger.error(f"Parent task with ID {parent_id} not found.")\n                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400\n\n        logger.info("Input validation passed. Proceeding with task updates...")\n\n        # Step 4: Process updates for each subtask\n        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation\n\n        for task_data in ordered_tasks:\n            subtask_id = task_data["id"]\n            sort_order = task_data["sort_order"]\n            new_parent_id = task_data["parent_id"]\n\n            # Fetch the subtask from the database\n            subtask = Task.query.get(subtask_id)\n            if not subtask:\n                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")\n                continue\n\n            # Log and update parent_id if it changes\n            if new_parent_id is not None and new_parent_id != subtask.parent_id:\n                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")\n                subtask.parent_id = new_parent_id\n\n            # Update sort order\n            subtask.sort_order = sort_order\n            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")\n\n            # Add to the list of updated subtasks for validation\n            updated_subtasks.append(subtask)\n\n        # Step 5: Commit changes to the database\n        try:\n            db.session.commit()\n            logger.info(f"Subtasks reordered successfully: {[task[\'id\'] for task in ordered_tasks]}")\n        except Exception as e:\n            logger.error(f"Error committing changes to the database: {str(e)}")\n            db.session.rollback()\n            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500\n\n        # Step 6: Post-commit validation\n        for subtask in updated_subtasks:\n            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")\n            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")\n\n        # Step 7: Return success response\n        return jsonify({\n            "success": True,\n            "message": "Subtasks reordered successfully.",\n            "updated_subtasks": [subtask.id for subtask in updated_subtasks]\n        }), 200\n\n    except Exception as e:\n        # Step 8: Handle unexpected errors\n        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)\n        db.session.rollback()\n        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500\n```\nKey Changes and Descriptive Comments\n\t1.\tInput Parsing:\n\t•\tExtracts parent_id and ordered_tasks from the request payload.\n\t•\tLogs the parsed values for debugging.\n\t2.\tInput Validation:\n\t•\tEnsures ordered_tasks is a list of dictionaries with the required keys.\n\t•\tValidates parent_id if provided, ensuring the parent task exists in the database.\n\t3.\tUpdate Processing:\n\t•\tIterates through ordered_tasks, updating each task’s parent_id and sort_order.\n\t•\tLogs changes for each task.\n\t4.\tDatabase Commit:\n\t•\tCommits all updates in a single transaction.\n\t•\tLogs success or rolls back changes in case of an error.\n\t5.\tPost-Commit Validation:\n\t•\tVerifies that the parent_id and sort_order changes were successfully saved to the database.\n\t6.\tError Handling:\n\t•\tCaptures and logs exceptions during processing or committing.\n\t•\tProvides meaningful error messages to the frontend.\n\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:46:29.348853', 'updated_at': '2025-02-06T21:59:21.617065'}, {'id': 131, 'name': 'Step 5: Update utils.py', 'description': 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nChanges to Make:\n\t1.\tEnhance Task Filtering:\n\t•\tEnsure the filters handle parent-child relationships explicitly.\n\t•\tAdd options to include or exclude subtasks in queries.\n\t2.\tUtility Function for Debugging Parent-Child Relationships:\n\t•\tProvide a function to generate a map or list of parent-child relationships for debugging purposes.\n\t3.\tValidation Functions:\n\t•\tAdd a utility function to validate parent-child relationships and ensure no circular dependencies.\n\nUpdated utils.py Code:\n```\nimport logging\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import joinedload\nfrom app.extensions.db import db\nfrom app.tasks.models import Task\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\n\nclass TaskService:\n    @staticmethod\n    def filter_tasks(filters=None, include_subtasks=True, page=None, per_page=None):\n        """\n        Dynamically filters tasks with an option to include or exclude subtasks.\n\n        Args:\n            filters (dict): Filtering criteria.\n            include_subtasks (bool): Whether to include subtasks in the query.\n            page (int, optional): Page number for pagination.\n            per_page (int, optional): Items per page for pagination.\n\n        Returns:\n            Query or Pagination: A SQLAlchemy query object or paginated results.\n        """\n        query = Task.query.options(\n            db.joinedload(Task.project).joinedload(Project.contributors),\n            db.joinedload(Task.contributor),\n            db.joinedload(Task.children),\n        ).order_by(Task.sort_order)\n\n        if filters:\n            logger.debug(f"Applying filters: {filters}")\n\n            # Apply standard filters\n            if "is_archived" in filters:\n                query = query.filter(Task.is_archived == filters["is_archived"])\n            if "project_id" in filters:\n                query = query.filter(Task.project_id == filters["project_id"])\n            if "task_type" in filters:\n                if isinstance(filters["task_type"], list):\n                    query = query.filter(Task.task_type.in_(filters["task_type"]))\n                else:\n                    query = query.filter(Task.task_type == filters["task_type"])\n            if "completion_status" in filters:\n                completion_map = {"completed": True, "in_progress": False}\n                if filters["completion_status"] in completion_map:\n                    query = query.filter(Task.completed == completion_map[filters["completion_status"]])\n\n            # Optionally exclude subtasks\n            if not include_subtasks:\n                query = query.filter(Task.task_type != "Subtask")\n\n        logger.debug(f"Generated query: {query}")\n\n        # Pagination\n        if page and per_page:\n            return query.paginate(page=page, per_page=per_page, error_out=False)\n        return query\n\n    @staticmethod\n    def debug_parent_child_relationships(project_id=None):\n        """\n        Generates a debug map of parent-child relationships for all tasks.\n\n        Args:\n            project_id (int, optional): Restrict to tasks from a specific project.\n\n        Returns:\n            dict: A dictionary mapping parent IDs to their child task IDs.\n        """\n        query = Task.query\n        if project_id:\n            query = query.filter(Task.project_id == project_id)\n\n        tasks = query.options(\n            db.load_only(Task.id, Task.parent_id)\n        ).all()\n\n        relationship_map = {}\n        for task in tasks:\n            if task.parent_id not in relationship_map:\n                relationship_map[task.parent_id] = []\n            relationship_map[task.parent_id].append(task.id)\n\n        logger.debug(f"Parent-Child Relationship Map: {relationship_map}")\n        return relationship_map\n\n    @staticmethod\n    def validate_parent_child_relationships():\n        """\n        Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.\n\n        Raises:\n            ValueError: If invalid relationships are detected.\n        """\n        tasks = Task.query.options(db.joinedload(Task.parent)).all()\n\n        for task in tasks:\n            if task.parent_id:\n                parent_task = task.parent\n                if not parent_task:\n                    raise ValueError(f"Task {task.id} has an invalid parent ID {task.parent_id}.")\n\n                # Validate hierarchy rules\n                if task.task_type == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError(f"User Story {task.id} must have an Epic as its parent.")\n                if task.task_type == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError(f"Subtask {task.id} must have a User Story as its parent.")\n\n        logger.info("All parent-child relationships are valid.")\n\n    @staticmethod\n    def get_all_task_ids_with_parents():\n        """\n        Returns a flat list of tasks with their parent IDs for debugging.\n\n        Returns:\n            list: A list of tuples (task_id, parent_id).\n        """\n        tasks = Task.query.with_entities(Task.id, Task.parent_id).all()\n        logger.debug(f"Task IDs with Parent IDs: {tasks}")\n        return tasks\n```\n\n\nExplanation of Changes:\n\t1.\tfilter_tasks Enhancements:\n\t•\tAdded include_subtasks parameter to optionally exclude subtasks from the query.\n\t2.\tdebug_parent_child_relationships:\n\t•\tCreates a parent-child relationship map for debugging purposes.\n\t3.\tvalidate_parent_child_relationships:\n\t•\tIterates through all tasks to validate parent-child hierarchy and ensures no invalid relationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t•\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.091824', 'updated_at': '2025-01-16T19:22:36.236691'}, {'id': 135, 'name': 'Step 3: Update list.html', 'description': 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already includes everything needed. No required changes.\n\nHere´s the relevant section of list.html:\n\n```\n<tr id="task-{{ task.id }}"\n                class="task-row {% if task.task_type == \'Subtask\' %}subtask-row{% elif task.task_type == \'User Story\' %}user-story-row{% elif task.task_type == \'Epic\' %}epic-row{% endif %}"\n                style="background-color: \n                {% if task.task_type == \'Subtask\' %}\n                    rgba(200, 230, 255, 0.5); /* Light blue for Subtask */\n                {% elif task.task_type == \'User Story\' %}\n                    rgba(255, 255, 200, 0.5); /* Light yellow for User Story */\n                {% elif task.task_type == \'Epic\' %}\n                    rgba(255, 200, 200, 0.5); /* Light red for Epic */\n                {% else %}\n                    rgba(240, 240, 240, 1); /* Default light gray */\n                {% endif %};"\n                data-task-id="{{ task.id }}"\n                data-parent-id="{{ task.parent_id or \'\' }}"\n                data-level="{{ depth }}">\n                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>\n                <td>\n                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}\n                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}" aria-label="Toggle details for task {{ task.name }}">\n                        <i class="bi bi-chevron-right"></i>\n                    </button>\n                    {% endif %}\n                </td>\n                <td class="fw-medium fs-6 \n                {% if task.task_type == \'Epic\' %}\n                    epic-cell\n                {% elif task.task_type == \'User Story\' %}\n                    user-story-cell\n                {% elif task.task_type == \'Subtask\' %}\n                    subtask-cell\n                {% endif %}" \n                style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">\n                <span class="bi fs-6\n                {% if task.task_type == \'Epic\' %}\n                    bi-circle-fill\n                {% elif task.task_type == \'User Story\' %}\n                    bi-circle-half\n                {% elif task.task_type == \'Subtask\' %}\n                    bi-circle\n                {% endif %}">\n                </span>\n                {{ task.name }}\n                <small class="text-muted fw-light">\n                    (Parent-ID: {{ task.parent_id or \'None\' }})\n                </small>\n                <!-- Open Link -->\n                <a href="#" class="task-open-link" data-task-id="{{ task.id }}">\n                    <i class="bi bi-arrows-angle-expand" style="font-size: 0.8rem; color: white;"></i>\n                    Open\n                </a>\n            </td>\n                <td class="fw-light fs-6">\n                    <small class>\n                    LAC-{{ task.id }}\n                    </small>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light text-bg-secondary">\n                        {{ task.project if task.project else "Unknown Project" }}\n                    </span>\n                </td>\n                <td class="fs-6" data-contributor-column>{{ task.assigned_to if task.assigned_to else "Unassigned" }}</td>\n                <td class="fs-6">{{ task.story_points }}</td>\n                <td class="fs-6">\n                    <span class="badge rounded-pill fw-light text-bg-light">\n                        {{ task.task_type }}\n                    </span>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light {% if task.completed %}text-bg-success{% else %}text-bg-warning{% endif %}">\n                        {{ "Completed" if task.completed else "In Progress" }}\n                    </span>\n                </td>\n                <td>\n                    <!-- Delete Icon -->\n                    <button class="btn btn-dark btn-sm delete-task-btn" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .2rem; --bs-btn-font-size: .75rem;" data-task-id="{{ task.id }}" aria-label="Deletes task {{ task.id }}">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n            </tr>\n            {% for child in tasks if child.parent_id == task.id %}\n                {{ render_task(child, tasks, depth + 1) }}\n            {% endfor %}\n            {% endmacro %}\n            \n            <!-- Render top-level tasks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:46:29.349784', 'updated_at': '2025-01-16T19:22:36.238473'}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'description': 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitHub Login involves integrating OAuth 2.0, which both services support. The complexity depends on your app’s existing setup, frameworks, and experience with third-party authentication. Below is a breakdown:\n\nKey Steps for Implementing Google or GitHub Login\n\t1.\tSet Up OAuth Credentials:\n\t•\tRegister your application in the Google Cloud Console or GitHub Developer Settings.\n\t•\tObtain the client ID and client secret.\n\t2.\tInstall Required Libraries:\n\t•\tUse a library for OAuth (e.g., flask-oauthlib, python-social-auth, or authlib).\n\t•\tPopular frameworks like Flask and Django already have robust integrations for OAuth providers.\n\t3.\tBackend Configuration:\n\t•\tImplement an endpoint to handle the OAuth flow (/auth/login/google or /auth/login/github).\n\t•\tConfigure your app to send users to Google or GitHub’s authentication page.\n\t•\tHandle the OAuth callback to exchange the authorization code for an access token.\n\t•\tVerify the token and fetch user information (e.g., email, name).\n\t4.\tLink OAuth to User Registration:\n\t•\tOn successful login, create or retrieve a user in your database.\n\t•\tStore the user’s details like email, OAuth provider ID, and access token.\n\t5.\tFrontend Integration (if applicable):\n\t•\tAdd “Login with Google” or “Login with GitHub” buttons.\n\t•\tRedirect to your backend’s OAuth endpoint when clicked.', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T12:15:54.291625', 'updated_at': '2025-01-16T19:22:36.239866'}, {'id': 62, 'name': 'Add OAuth integration for Google Login', 'description': 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.241200'}, {'id': 64, 'name': 'Setup project credentials for Google API', 'description': 'Generate client ID and secret from Google API Console for your application.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-01-16T19:22:36.242497'}, {'id': 67, 'name': 'Test Google OAuth flow', 'description': 'Verify the OAuth flow using test accounts and check the token exchange.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.243780'}, {'id': 65, 'name': 'Implement backend endpoints for Google OAuth', 'description': 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-01-16T19:22:36.244932'}, {'id': 63, 'name': 'Add OAuth integration for GitHub Login', 'description': 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.246358'}, {'id': 68, 'name': 'Register application in GitHub Developer Console', 'description': 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.247746'}, {'id': 69, 'name': 'Handle callback from GitHub', 'description': 'Implement the callback endpoint to process the authorization code from GitHub.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.248912'}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'description': 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 18, 'status': 'Not Started', 'created_at': '2025-01-07T19:53:50.085064', 'updated_at': '2025-01-16T19:22:36.250169'}, {'id': 100, 'name': '1.1 User Registration', 'description': 'As a user, I want to register with a username, email, and password so that I can create an account and access the system.\n\n**Acceptance Criteria:**\n\n•\tUser can input valid username, email, and password.\n•\tUsername and email must be unique.\n•\tErrors are displayed for invalid inputs or duplicate accounts.\n•\tPasswords must meet complexity requirements and be securely stored.\n•\tSuccessful registration redirects users to a login page.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:59:09.044667', 'updated_at': '2025-01-16T19:22:36.251812'}, {'id': 107, 'name': '1.1.1 Database Changes for User Registration', 'description': '1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.\n   CREATE TABLE public.users (\n       id SERIAL PRIMARY KEY,\n       username VARCHAR(50) UNIQUE NOT NULL,\n       email VARCHAR(100) UNIQUE NOT NULL,\n       password_hash VARCHAR(255) NOT NULL,\n       created_at TIMESTAMP DEFAULT NOW(),\n       updated_at TIMESTAMP DEFAULT NOW()\n);\n\n\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:30.747962'}, {'id': 108, 'name': '1.1.2 Backend API for Registration', 'description': '•\tCreate an endpoint POST /api/register:\n•\tValidate input fields.\n•\tHash the password using bcrypt or argon2.\n•\tInsert the user into the users table.\n•\tReturn success/failure responses.\ndddhfff\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:33.067643'}, {'id': 112, 'name': '1.2.2 Frontend Login Page', 'description': 'Develop a frontend form for user login with email and password inputs.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.683644'}, {'id': 109, 'name': '1.1.3 Create Frontend Registration Page', 'description': 'Develop a frontend form to collect user registration details.\n•\tAdd a form for username, email, and password inputs.\n•\tUse client-side validation (e.g., email format).\n•\tSend a POST request to /api/register.\n\n', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.684988'}, {'id': 110, 'name': '1.1.4 Unit Tests for Registration', 'description': 'Write unit tests for:\n\n•\tValid registration.\n•\tDuplicate username/email scenarios.\n•\tInvalid input handling.\nff', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.686902'}, {'id': 101, 'name': '1.2 User Login', 'description': 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n•\tUsers can log in with a valid email and password.\n•\tErrors are displayed for invalid credentials.\n•\tSuccessful login stores a session or JWT token.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:25:53.687936'}, {'id': 111, 'name': '1.2.1 Backend API for Login', 'description': 'Create POST /api/login endpoint to handle user login.\njjsjj', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.689096'}, {'id': 113, 'name': '1.2.3 Session Management', 'description': 'Implement secure session handling using cookies or JWT.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:20.968680'}, {'id': 114, 'name': '1.2.4 Unit Tests for Login', 'description': 'Write tests for successful and failed login attempts.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:22:36.265866'}, {'id': 106, 'name': 'Password Reset', 'description': 'As a user, I want to reset my password securely using email.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.267247'}, {'id': 128, 'name': 'Frontend Password Reset Page', 'description': 'Develop a page for users to enter a new password using a valid token.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.269158'}, {'id': 129, 'name': 'Testing Password Reset', 'description': 'Write tests for email delivery, token validation, and password updates.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.270849'}, {'id': 102, 'name': 'Logout', 'description': 'As a user, I want to log out so that I can end my session securely.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.272605'}, {'id': 117, 'name': 'Tests for Logout', 'description': 'Verify session invalidation and redirection to the login page.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.274575'}, {'id': 116, 'name': 'Frontend Logout Button', 'description': 'Add a logout button to the UI and handle session clearing.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-09T12:31:17.939784'}, {'id': 115, 'name': 'Backend API for Logout', 'description': 'Create POST /api/logout endpoint to invalidate user sessions.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.277547'}, {'id': 61, 'name': 'Parent task assignment', 'description': '', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-04T22:31:45.205815', 'updated_at': '2025-01-16T19:22:36.279012'}, {'id': 45, 'name': 'Display Default Value in Dropdown', 'description': 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.280493'}, {'id': 50, 'name': 'Retrieve Current Parent Task', 'description': 'Retrieve the current parent task’s ID and name from the backend.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 2, 'status': 'In Progress', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-10T07:41:43.569807'}, {'id': 51, 'name': 'Set Default Value', 'description': 'Set the default value in the dropdown based on the retrieved data.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 45, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 1, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.283309'}, {'id': 46, 'name': 'Search for Parent Tasks', 'description': 'Allow users to search for tasks dynamically in the dropdown by typing.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.284882'}, {'id': 54, 'name': 'Test Partial Matching', 'description': 'Ensure the search results update in real-time as the user types.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.286248'}, {'id': 47, 'name': 'Handle Large Datasets Efficiently', 'description': 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 13, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.287641'}, {'id': 56, 'name': 'Paginate API Responses', 'description': 'Implement server-side filtering and pagination for large datasets.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.289338'}, {'id': 55, 'name': 'Enable Lazy Loading', 'description': 'Enable lazy loading or virtualization in Virtual Select.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.290910'}, {'id': 48, 'name': 'Select and Deselect Parent Tasks', 'description': 'Allow users to select a parent task or deselect by choosing "None."', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.292389'}, {'id': 57, 'name': 'Ensure None Option Availability', 'description': 'Add “None” as a selectable option and ensure it stays at the top of the list.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.294045'}, {'id': 58, 'name': 'Handle Selection Events', 'description': 'Implement event listeners to update the form’s state when the selection changes.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.295385'}, {'id': 49, 'name': 'Integrate Dropdown with Task Form', 'description': 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.296814'}, {'id': 59, 'name': 'Bind Dropdown to Form Field', 'description': 'Bind the dropdown to the form’s parent task field.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-09T23:48:08.770907'}, {'id': 60, 'name': 'Test Form Submission', 'description': 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.299971'}, {'id': 41, 'name': 'Implement Searchable Dropdown', 'description': 'As a user, I want a searchable dropdown for parent task assignment.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Completed', 'created_at': '2025-01-03T09:14:28.285904', 'updated_at': '2025-02-10T07:41:33.252945'}, {'id': 52, 'name': 'Add Search Box to Dropdown', 'description': 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-10T07:40:33.847642'}, {'id': 53, 'name': 'Implement AJAX Search', 'description': 'Implement AJAX-based search to fetch tasks dynamically from the backend.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-09T07:55:00.680183'}, {'id': 42, 'name': 'Choose Dropdown Library', 'description': 'Research and decide on the dropdown library to use.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-10T07:41:18.814716'}, {'id': 43, 'name': 'Integrate Dropdown Library', 'description': 'Integrate the chosen dropdown library into the project.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Completed', 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-10T07:41:23.756572'}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t•\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t•\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-01-16T19:22:36.311560'}, {'id': 85, 'name': 'Assign multiple contributors to a task', 'description': 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:32:39.466022', 'updated_at': '2025-01-16T19:22:36.313789'}, {'id': 90, 'name': 'Update frontend to display and manage multiple contributors', 'description': 'Allow users to view, add, or remove multiple contributors via the UI.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-01-16T19:22:36.315695'}, {'id': 88, 'name': 'Update database schema for multiple contributors', 'description': 'Modify the task table to support many-to-many relationships for contributors.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-01-16T19:22:36.317500'}, {'id': 89, 'name': 'Develop backend API for adding contributors to a task', 'description': 'Create endpoints to add, update, and remove contributors for a task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-01-16T19:22:36.319281'}, {'id': 86, 'name': 'Allow designation of task owner', 'description': 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:29.330562', 'updated_at': '2025-01-16T19:22:36.320840'}, {'id': 93, 'name': 'Update frontend to manage task ownership', 'description': 'Allow users to assign or update the task owner via the UI.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-01-16T19:22:36.322637'}, {'id': 91, 'name': 'Update database schema for task ownership', 'description': 'Add a column or relationship to assign a single owner per task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-01-16T19:22:36.324051'}, {'id': 92, 'name': 'Develop backend API for assigning task owner', 'description': 'Create endpoints to assign or update the owner of a task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-11T09:19:44.027744'}, {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-01-16T19:22:36.326985'}, {'id': 96, 'name': 'Allow admin users to create and customize contributor roles via frontend', 'description': 'Provide UI functionality for admins to manage contributor roles dynamically.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-01-16T19:22:36.328562'}, {'id': 94, 'name': 'Add database support for contributor roles', 'description': 'Introduce a roles table and link contributors to specific roles for tasks.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T08:22:56.181530'}, {'id': 95, 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-11T08:22:02.276492'}, {'id': 127, 'name': 'Backend API for Password Reset', 'description': 'Create endpoints to handle password reset requests and token validation.\ndfdf\n\nasdasd', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-10T23:59:50.734037'}, {'id': 126, 'name': 'Email Configuration for Password Reset', 'description': 'Configure email service to send password reset links.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.334340'}, {'id': 104, 'name': 'Middleware for Role Enforcement', 'description': 'As a system, I want to enforce role-based access to specific routes.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:23:40.346816'}, {'id': 122, 'name': 'Testing Role Enforcement', 'description': 'Write tests to ensure proper access control based on roles.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-01-16T19:23:58.185693'}, {'id': 121, 'name': 'Develop Role Enforcement Middleware', 'description': 'Implement middleware to check user roles for access control.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-01-16T19:23:58.187439'}, {'id': 105, 'name': 'Profile Management', 'description': 'As a user, I want to update my profile (username, email, password).', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.339830'}, {'id': 123, 'name': 'Backend API for Profile Management', 'description': 'Create PATCH /api/profile endpoint to update user details.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-01-16T19:24:19.678781'}, {'id': 125, 'name': 'Testing Profile Updates', 'description': 'Write tests for profile update functionality.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-01-16T19:24:19.680382'}]
2025-02-11 09:23:03,136 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-11 09:23:03,137 INFO: [cached since 657.9s ago] {'param_1': 2}
2025-02-11 09:23:03,139 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:23:03,195 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-11 09:23:03,198 INFO: [cached since 657.9s ago] {'param_1': 3}
2025-02-11 09:23:03,206 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:23:03,207 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-11 09:23:03,207 INFO: [cached since 657.9s ago] {'param_1': 4}
2025-02-11 09:23:03,208 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:23:03,209 DEBUG: Row (4, 'Fredrik')
2025-02-11 09:23:03,209 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-11 09:23:03,209 INFO: [cached since 657.9s ago] {'param_1': 5}
2025-02-11 09:23:03,210 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:23:03,211 INFO: ROLLBACK
2025-02-11 09:23:03,211 INFO: 127.0.0.1 - - [11/Feb/2025 09:23:03] "GET /tasks/?page=1&is_archived=False HTTP/1.1" 200 -
2025-02-11 09:23:03,282 INFO: 127.0.0.1 - - [11/Feb/2025 09:23:03] "[36mGET /static/custom.css HTTP/1.1[0m" 304 -
2025-02-11 09:23:03,284 INFO: 127.0.0.1 - - [11/Feb/2025 09:23:03] "[36mGET /static/js/filters.js HTTP/1.1[0m" 304 -
2025-02-11 09:23:03,285 INFO: 127.0.0.1 - - [11/Feb/2025 09:23:03] "[36mGET /static/js/tasks_table_interactions.js HTTP/1.1[0m" 304 -
2025-02-11 09:23:03,286 INFO: 127.0.0.1 - - [11/Feb/2025 09:23:03] "[36mGET /static/js/modals.js HTTP/1.1[0m" 304 -
2025-02-11 09:23:03,294 INFO: 127.0.0.1 - - [11/Feb/2025 09:23:03] "[36mGET /static/images/background.svg HTTP/1.1[0m" 304 -
2025-02-11 09:23:03,437 INFO: 127.0.0.1 - - [11/Feb/2025 09:23:03] "[36mGET /static/favicon.ico HTTP/1.1[0m" 304 -
2025-02-11 09:23:06,990 INFO: Fetching task details for Task ID 96.
2025-02-11 09:23:06,990 INFO: Fetching task with ID 96.
2025-02-11 09:23:06,991 INFO: BEGIN (implicit)
2025-02-11 09:23:06,991 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:06,991 INFO: [cached since 654.2s ago] {'pk_1': 96}
2025-02-11 09:23:06,993 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:06,993 DEBUG: Row (96, 'Allow admin users to create and customize contributor roles via frontend', 65, 'Provide UI functionality for admins to manage contributor roles dynamically.', 'Subtask', False, False, 'Not Started', 87, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 1, 16, 19, 22, 36, 328562), None)
2025-02-11 09:23:06,993 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x12b7d1130>, 'sort_order': 65, 'task_type': 'Subtask', 'contributor_id': None, 'id': 96, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), 'status': 'Not Started', 'project_id': 6, 'updated_at': datetime.datetime(2025, 1, 16, 19, 22, 36, 328562), 'name': 'Allow admin users to create and customize contributor roles via frontend', 'description': 'Provide UI functionality for admins to manage contributor roles dynamically.', 'parent_id': 87, 'story_points': 8, 'completed_date': None}
2025-02-11 09:23:06,994 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-11 09:23:06,994 INFO: [cached since 654.2s ago] {'pk_1': 6}
2025-02-11 09:23:06,995 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at')
2025-02-11 09:23:06,995 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298))
2025-02-11 09:23:06,995 INFO: Task ID 96 fetched with parent ID: 87
2025-02-11 09:23:06,997 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:06,998 INFO: [cached since 654.2s ago] {'pk_1': 87}
2025-02-11 09:23:06,999 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:06,999 DEBUG: Row (87, 'Create and customize contributor roles', 64, 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'User Story', False, False, 'Not Started', 84, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), None)
2025-02-11 09:23:06,999 INFO: Task with ID 96 fetched successfully.
2025-02-11 09:23:06,999 DEBUG: Fetched Task Data: {'id': 96, 'name': 'Allow admin users to create and customize contributor roles via frontend', 'description': 'Provide UI functionality for admins to manage contributor roles dynamically.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-01-16T19:22:36.328562', 'contributor_name': 'Unassigned', 'parent': {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-01-16T19:22:36.326985'}}
2025-02-11 09:23:07,000 INFO: Task details fetched successfully for Task ID 96.
2025-02-11 09:23:07,000 INFO: ROLLBACK
2025-02-11 09:23:07,001 INFO: 127.0.0.1 - - [11/Feb/2025 09:23:07] "GET /api/tasks/96 HTTP/1.1" 200 -
2025-02-11 09:23:07,515 INFO: Fetching task details for Task ID 87.
2025-02-11 09:23:07,515 INFO: Fetching task with ID 87.
2025-02-11 09:23:07,516 INFO: BEGIN (implicit)
2025-02-11 09:23:07,517 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:07,517 INFO: [cached since 654.8s ago] {'pk_1': 87}
2025-02-11 09:23:07,518 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:07,519 DEBUG: Row (87, 'Create and customize contributor roles', 64, 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'User Story', False, False, 'Not Started', 84, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), None)
2025-02-11 09:23:07,519 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x12b7d3770>, 'sort_order': 64, 'task_type': 'User Story', 'contributor_id': None, 'id': 87, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), 'status': 'Not Started', 'project_id': 6, 'updated_at': datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'parent_id': 84, 'story_points': 8, 'completed_date': None}
2025-02-11 09:23:07,519 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-11 09:23:07,520 INFO: [cached since 654.8s ago] {'pk_1': 6}
2025-02-11 09:23:07,520 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at')
2025-02-11 09:23:07,520 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298))
2025-02-11 09:23:07,521 INFO: Task ID 87 fetched with parent ID: 84
2025-02-11 09:23:07,521 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:07,521 INFO: [cached since 654.8s ago] {'pk_1': 84}
2025-02-11 09:23:07,522 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:07,522 DEBUG: Row (84, 'Enhance Task Contributor Management', 55, 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI ... (335 characters truncated) ... onalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'Epic', False, False, 'Not Started', None, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 30, 21, 149869), datetime.datetime(2025, 1, 16, 19, 22, 36, 311560), None)
2025-02-11 09:23:07,523 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:23:07,523 INFO: [cached since 654.2s ago] {'pk_1': 5}
2025-02-11 09:23:07,524 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:23:07,524 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:23:07,524 INFO: Task with ID 87 fetched successfully.
2025-02-11 09:23:07,524 DEBUG: Fetched Task Data: {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-01-16T19:22:36.326985', 'contributor_name': 'Unassigned', 'parent': {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t•\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t•\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-01-16T19:22:36.311560'}}
2025-02-11 09:23:07,525 INFO: Task details fetched successfully for Task ID 87.
2025-02-11 09:23:07,525 INFO: ROLLBACK
2025-02-11 09:23:07,526 INFO: 127.0.0.1 - - [11/Feb/2025 09:23:07] "GET /api/tasks/87 HTTP/1.1" 200 -
2025-02-11 09:23:08,233 INFO: Fetching task details for Task ID 96.
2025-02-11 09:23:08,233 INFO: Fetching task with ID 96.
2025-02-11 09:23:08,234 INFO: BEGIN (implicit)
2025-02-11 09:23:08,234 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:08,234 INFO: [cached since 655.5s ago] {'pk_1': 96}
2025-02-11 09:23:08,235 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:08,236 DEBUG: Row (96, 'Allow admin users to create and customize contributor roles via frontend', 65, 'Provide UI functionality for admins to manage contributor roles dynamically.', 'Subtask', False, False, 'Not Started', 87, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 1, 16, 19, 22, 36, 328562), None)
2025-02-11 09:23:08,236 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x12b7d3bf0>, 'sort_order': 65, 'task_type': 'Subtask', 'contributor_id': None, 'id': 96, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), 'status': 'Not Started', 'project_id': 6, 'updated_at': datetime.datetime(2025, 1, 16, 19, 22, 36, 328562), 'name': 'Allow admin users to create and customize contributor roles via frontend', 'description': 'Provide UI functionality for admins to manage contributor roles dynamically.', 'parent_id': 87, 'story_points': 8, 'completed_date': None}
2025-02-11 09:23:08,236 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-11 09:23:08,237 INFO: [cached since 655.5s ago] {'pk_1': 6}
2025-02-11 09:23:08,237 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at')
2025-02-11 09:23:08,237 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298))
2025-02-11 09:23:08,237 INFO: Task ID 96 fetched with parent ID: 87
2025-02-11 09:23:08,238 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:08,238 INFO: [cached since 655.5s ago] {'pk_1': 87}
2025-02-11 09:23:08,239 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:08,239 DEBUG: Row (87, 'Create and customize contributor roles', 64, 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'User Story', False, False, 'Not Started', 84, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), None)
2025-02-11 09:23:08,239 INFO: Task with ID 96 fetched successfully.
2025-02-11 09:23:08,240 DEBUG: Fetched Task Data: {'id': 96, 'name': 'Allow admin users to create and customize contributor roles via frontend', 'description': 'Provide UI functionality for admins to manage contributor roles dynamically.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-01-16T19:22:36.328562', 'contributor_name': 'Unassigned', 'parent': {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-01-16T19:22:36.326985'}}
2025-02-11 09:23:08,240 INFO: Task details fetched successfully for Task ID 96.
2025-02-11 09:23:08,240 INFO: ROLLBACK
2025-02-11 09:23:08,240 INFO: 127.0.0.1 - - [11/Feb/2025 09:23:08] "GET /api/tasks/96 HTTP/1.1" 200 -
2025-02-11 09:23:08,443 INFO: Fetching task details for Task ID 87.
2025-02-11 09:23:08,443 INFO: Fetching task with ID 87.
2025-02-11 09:23:08,444 INFO: BEGIN (implicit)
2025-02-11 09:23:08,444 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:08,444 INFO: [cached since 655.7s ago] {'pk_1': 87}
2025-02-11 09:23:08,444 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:08,445 DEBUG: Row (87, 'Create and customize contributor roles', 64, 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'User Story', False, False, 'Not Started', 84, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), None)
2025-02-11 09:23:08,445 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x12b7d1d90>, 'sort_order': 64, 'task_type': 'User Story', 'contributor_id': None, 'id': 87, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), 'status': 'Not Started', 'project_id': 6, 'updated_at': datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'parent_id': 84, 'story_points': 8, 'completed_date': None}
2025-02-11 09:23:08,445 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-11 09:23:08,445 INFO: [cached since 655.7s ago] {'pk_1': 6}
2025-02-11 09:23:08,445 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at')
2025-02-11 09:23:08,445 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298))
2025-02-11 09:23:08,445 INFO: Task ID 87 fetched with parent ID: 84
2025-02-11 09:23:08,446 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:08,446 INFO: [cached since 655.7s ago] {'pk_1': 84}
2025-02-11 09:23:08,446 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:08,446 DEBUG: Row (84, 'Enhance Task Contributor Management', 55, 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI ... (335 characters truncated) ... onalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'Epic', False, False, 'Not Started', None, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 30, 21, 149869), datetime.datetime(2025, 1, 16, 19, 22, 36, 311560), None)
2025-02-11 09:23:08,446 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:23:08,447 INFO: [cached since 655.2s ago] {'pk_1': 5}
2025-02-11 09:23:08,447 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:23:08,447 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:23:08,447 INFO: Task with ID 87 fetched successfully.
2025-02-11 09:23:08,447 DEBUG: Fetched Task Data: {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-01-16T19:22:36.326985', 'contributor_name': 'Unassigned', 'parent': {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t•\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t•\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-01-16T19:22:36.311560'}}
2025-02-11 09:23:08,447 INFO: Task details fetched successfully for Task ID 87.
2025-02-11 09:23:08,447 INFO: ROLLBACK
2025-02-11 09:23:08,448 INFO: 127.0.0.1 - - [11/Feb/2025 09:23:08] "GET /api/tasks/87 HTTP/1.1" 200 -
2025-02-11 09:23:11,074 INFO: Assigning contributor to task ID 96
2025-02-11 09:23:11,076 INFO: Received data: {'contributor_id': 5}
2025-02-11 09:23:11,076 INFO: Contributor ID received: 5
2025-02-11 09:23:11,077 INFO: BEGIN (implicit)
2025-02-11 09:23:11,078 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:11,078 INFO: [cached since 658.3s ago] {'pk_1': 96}
2025-02-11 09:23:11,079 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:11,079 DEBUG: Row (96, 'Allow admin users to create and customize contributor roles via frontend', 65, 'Provide UI functionality for admins to manage contributor roles dynamically.', 'Subtask', False, False, 'Not Started', 87, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 1, 16, 19, 22, 36, 328562), None)
2025-02-11 09:23:11,080 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:23:11,080 INFO: [cached since 207.1s ago] {'pk_1': 5}
2025-02-11 09:23:11,081 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:23:11,081 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:23:11,082 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name 
FROM project LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project.id = project_contributor_1.project_id 
WHERE project.id = %(pk_1)s
2025-02-11 09:23:11,083 INFO: [cached since 207.1s ago] {'pk_1': 6}
2025-02-11 09:23:11,083 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at', 'contributor_1_id', 'contributor_1_name')
2025-02-11 09:23:11,084 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:23:11,084 INFO: UPDATE task SET contributor_id=%(contributor_id)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-02-11 09:23:11,084 INFO: [cached since 207.1s ago] {'contributor_id': 5, 'updated_at': datetime.datetime(2025, 2, 11, 8, 23, 11, 84457, tzinfo=datetime.timezone.utc), 'task_id': 96}
2025-02-11 09:23:11,085 INFO: COMMIT
2025-02-11 09:23:11,086 INFO: BEGIN (implicit)
2025-02-11 09:23:11,086 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:23:11,086 INFO: [cached since 207.1s ago] {'pk_1': 5}
2025-02-11 09:23:11,086 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:23:11,086 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:23:11,087 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:11,087 INFO: [cached since 207.1s ago] {'pk_1': 96}
2025-02-11 09:23:11,087 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:11,087 DEBUG: Row (96, 'Allow admin users to create and customize contributor roles via frontend', 65, 'Provide UI functionality for admins to manage contributor roles dynamically.', 'Subtask', False, False, 'Not Started', 87, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 2, 11, 9, 23, 11, 84457), None)
2025-02-11 09:23:11,087 INFO: ROLLBACK
2025-02-11 09:23:11,087 INFO: 127.0.0.1 - - [11/Feb/2025 09:23:11] "POST /tasks/96/assign_contributor HTTP/1.1" 200 -
2025-02-11 09:23:13,124 INFO: save_task triggered
2025-02-11 09:23:13,125 INFO: Payload received: {'title': 'Allow admin users to create and customize contributor roles via frontend', 'description': 'Provide UI functionality for admins to manage contributor roles dynamically.', 'task_id': '96', 'project_id': '6', 'task_type': 'Subtask', 'story_points': 8, 'parent_id': 87, 'contributor_id': None, 'sort_order': 0}
2025-02-11 09:23:13,125 INFO: Update request for Task ID: 96
2025-02-11 09:23:13,126 INFO: BEGIN (implicit)
2025-02-11 09:23:13,126 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:13,126 INFO: [cached since 660.4s ago] {'pk_1': '96'}
2025-02-11 09:23:13,127 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:13,128 DEBUG: Row (96, 'Allow admin users to create and customize contributor roles via frontend', 65, 'Provide UI functionality for admins to manage contributor roles dynamically.', 'Subtask', False, False, 'Not Started', 87, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 2, 11, 9, 23, 11, 84457), None)
2025-02-11 09:23:13,128 DEBUG: Received update payload for Task ID 96: {'title': 'Allow admin users to create and customize contributor roles via frontend', 'description': 'Provide UI functionality for admins to manage contributor roles dynamically.', 'task_id': '96', 'project_id': '6', 'task_type': 'Subtask', 'story_points': 8, 'parent_id': 87, 'contributor_id': None, 'sort_order': 0}
2025-02-11 09:23:13,128 DEBUG: Validating parent_id change for Task 96: 87
2025-02-11 09:23:13,128 INFO: Checking circular reference for Task 96 with Parent ID: 87
2025-02-11 09:23:13,130 INFO: SELECT task.parent_id AS task_parent_id 
FROM task 
WHERE task.id = %(id_1)s 
 LIMIT %(param_1)s
2025-02-11 09:23:13,130 INFO: [cached since 70.86s ago] {'id_1': 87, 'param_1': 1}
2025-02-11 09:23:13,131 DEBUG: Col ('task_parent_id',)
2025-02-11 09:23:13,132 DEBUG: Row (84,)
2025-02-11 09:23:13,133 INFO: SELECT task.parent_id AS task_parent_id 
FROM task 
WHERE task.id = %(id_1)s 
 LIMIT %(param_1)s
2025-02-11 09:23:13,133 INFO: [cached since 70.87s ago] {'id_1': 84, 'param_1': 1}
2025-02-11 09:23:13,133 DEBUG: Col ('task_parent_id',)
2025-02-11 09:23:13,134 DEBUG: Row (None,)
2025-02-11 09:23:13,134 INFO: Circular reference check passed.
2025-02-11 09:23:13,134 INFO: SELECT task.task_type AS task_task_type 
FROM task 
WHERE task.id = %(id_1)s 
 LIMIT %(param_1)s
2025-02-11 09:23:13,135 INFO: [cached since 70.86s ago] {'id_1': 87, 'param_1': 1}
2025-02-11 09:23:13,135 DEBUG: Col ('task_task_type',)
2025-02-11 09:23:13,135 DEBUG: Row ('User Story',)
2025-02-11 09:23:13,136 DEBUG: Validating hierarchy: Task 96, Parent Type: User Story
2025-02-11 09:23:13,136 INFO: Hierarchy validation passed for Task 96.
2025-02-11 09:23:13,136 INFO: Validation passed for parent_id: 87
2025-02-11 09:23:13,136 DEBUG: Validating task_type change for Task 96: Subtask
2025-02-11 09:23:13,137 INFO: SELECT task.task_type AS task_task_type 
FROM task 
WHERE task.id = %(id_1)s 
 LIMIT %(param_1)s
2025-02-11 09:23:13,138 INFO: [cached since 70.87s ago] {'id_1': 87, 'param_1': 1}
2025-02-11 09:23:13,138 DEBUG: Col ('task_task_type',)
2025-02-11 09:23:13,138 DEBUG: Row ('User Story',)
2025-02-11 09:23:13,138 DEBUG: Validating hierarchy: Task Type: Subtask, Parent Type: User Story
2025-02-11 09:23:13,139 INFO: Hierarchy validation passed for Task 96.
2025-02-11 09:23:13,139 INFO: Validation passed for task_type: Subtask
2025-02-11 09:23:13,139 INFO: UPDATE task SET updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-02-11 09:23:13,139 INFO: [cached since 70.86s ago] {'updated_at': datetime.datetime(2025, 2, 11, 8, 23, 13, 139282), 'task_id': 96}
2025-02-11 09:23:13,140 INFO: COMMIT
2025-02-11 09:23:13,141 INFO: Task ID 96 updated successfully.
2025-02-11 09:23:13,142 INFO: BEGIN (implicit)
2025-02-11 09:23:13,143 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:13,143 INFO: [cached since 209.1s ago] {'pk_1': 96}
2025-02-11 09:23:13,144 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:13,144 DEBUG: Row (96, 'Allow admin users to create and customize contributor roles via frontend', 65, 'Provide UI functionality for admins to manage contributor roles dynamically.', 'Subtask', False, False, 'Not Started', 87, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 39, 28, 197613), datetime.datetime(2025, 2, 11, 8, 23, 13, 139282), None)
2025-02-11 09:23:13,145 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:23:13,145 INFO: [cached since 659.9s ago] {'pk_1': 5}
2025-02-11 09:23:13,145 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:23:13,145 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:23:13,145 INFO: ROLLBACK
2025-02-11 09:23:13,146 INFO: 127.0.0.1 - - [11/Feb/2025 09:23:13] "POST /api/tasks HTTP/1.1" 200 -
2025-02-11 09:23:16,958 INFO: Fetching task details for Task ID 87.
2025-02-11 09:23:16,958 INFO: Fetching task with ID 87.
2025-02-11 09:23:16,959 INFO: BEGIN (implicit)
2025-02-11 09:23:16,959 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:16,959 INFO: [cached since 664.2s ago] {'pk_1': 87}
2025-02-11 09:23:16,960 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:16,960 DEBUG: Row (87, 'Create and customize contributor roles', 64, 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'User Story', False, False, 'Not Started', 84, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), None)
2025-02-11 09:23:16,961 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x12b7d1f70>, 'sort_order': 64, 'task_type': 'User Story', 'contributor_id': None, 'id': 87, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), 'status': 'Not Started', 'project_id': 6, 'updated_at': datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'parent_id': 84, 'story_points': 8, 'completed_date': None}
2025-02-11 09:23:16,961 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-11 09:23:16,961 INFO: [cached since 664.2s ago] {'pk_1': 6}
2025-02-11 09:23:16,962 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at')
2025-02-11 09:23:16,962 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298))
2025-02-11 09:23:16,962 INFO: Task ID 87 fetched with parent ID: 84
2025-02-11 09:23:16,963 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:16,964 INFO: [cached since 664.2s ago] {'pk_1': 84}
2025-02-11 09:23:16,965 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:16,965 DEBUG: Row (84, 'Enhance Task Contributor Management', 55, 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI ... (335 characters truncated) ... onalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'Epic', False, False, 'Not Started', None, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 30, 21, 149869), datetime.datetime(2025, 1, 16, 19, 22, 36, 311560), None)
2025-02-11 09:23:16,966 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:23:16,966 INFO: [cached since 663.7s ago] {'pk_1': 5}
2025-02-11 09:23:16,967 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:23:16,967 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:23:16,967 INFO: Task with ID 87 fetched successfully.
2025-02-11 09:23:16,967 DEBUG: Fetched Task Data: {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-01-16T19:22:36.326985', 'contributor_name': 'Unassigned', 'parent': {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t•\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t•\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-01-16T19:22:36.311560'}}
2025-02-11 09:23:16,967 INFO: Task details fetched successfully for Task ID 87.
2025-02-11 09:23:16,968 INFO: ROLLBACK
2025-02-11 09:23:16,969 INFO: 127.0.0.1 - - [11/Feb/2025 09:23:16] "GET /api/tasks/87 HTTP/1.1" 200 -
2025-02-11 09:23:17,477 INFO: Fetching task details for Task ID 84.
2025-02-11 09:23:17,477 INFO: Fetching task with ID 84.
2025-02-11 09:23:17,478 INFO: BEGIN (implicit)
2025-02-11 09:23:17,478 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:17,479 INFO: [cached since 664.7s ago] {'pk_1': 84}
2025-02-11 09:23:17,481 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:17,481 DEBUG: Row (84, 'Enhance Task Contributor Management', 55, 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI ... (335 characters truncated) ... onalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'Epic', False, False, 'Not Started', None, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 30, 21, 149869), datetime.datetime(2025, 1, 16, 19, 22, 36, 311560), None)
2025-02-11 09:23:17,482 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x12b7d00b0>, 'sort_order': 55, 'task_type': 'Epic', 'contributor_id': 5, 'id': 84, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 1, 7, 19, 30, 21, 149869), 'status': 'Not Started', 'project_id': 6, 'updated_at': datetime.datetime(2025, 1, 16, 19, 22, 36, 311560), 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t•\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t•\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'parent_id': None, 'story_points': 8, 'completed_date': None}
2025-02-11 09:23:17,483 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-11 09:23:17,483 INFO: [cached since 664.7s ago] {'pk_1': 6}
2025-02-11 09:23:17,484 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at')
2025-02-11 09:23:17,485 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298))
2025-02-11 09:23:17,486 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:23:17,486 INFO: [cached since 664.2s ago] {'pk_1': 5}
2025-02-11 09:23:17,486 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:23:17,487 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:23:17,487 INFO: Task ID 84 fetched with parent ID: None
2025-02-11 09:23:17,487 INFO: Task with ID 84 fetched successfully.
2025-02-11 09:23:17,487 DEBUG: Fetched Task Data: {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t•\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t•\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-01-16T19:22:36.311560', 'contributor_name': 'Fredrik Cederborg', 'parent': None}
2025-02-11 09:23:17,488 INFO: Task details fetched successfully for Task ID 84.
2025-02-11 09:23:17,488 INFO: ROLLBACK
2025-02-11 09:23:17,489 INFO: 127.0.0.1 - - [11/Feb/2025 09:23:17] "GET /api/tasks/84 HTTP/1.1" 200 -
2025-02-11 09:23:18,194 INFO: Fetching task details for Task ID 87.
2025-02-11 09:23:18,194 INFO: Fetching task with ID 87.
2025-02-11 09:23:18,194 INFO: BEGIN (implicit)
2025-02-11 09:23:18,195 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:18,195 INFO: [cached since 665.4s ago] {'pk_1': 87}
2025-02-11 09:23:18,196 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:18,196 DEBUG: Row (87, 'Create and customize contributor roles', 64, 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'User Story', False, False, 'Not Started', 84, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), None)
2025-02-11 09:23:18,197 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x12b7d30b0>, 'sort_order': 64, 'task_type': 'User Story', 'contributor_id': None, 'id': 87, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), 'status': 'Not Started', 'project_id': 6, 'updated_at': datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'parent_id': 84, 'story_points': 8, 'completed_date': None}
2025-02-11 09:23:18,198 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-11 09:23:18,198 INFO: [cached since 665.4s ago] {'pk_1': 6}
2025-02-11 09:23:18,199 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at')
2025-02-11 09:23:18,200 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298))
2025-02-11 09:23:18,200 INFO: Task ID 87 fetched with parent ID: 84
2025-02-11 09:23:18,201 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:18,202 INFO: [cached since 665.4s ago] {'pk_1': 84}
2025-02-11 09:23:18,203 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:18,205 DEBUG: Row (84, 'Enhance Task Contributor Management', 55, 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI ... (335 characters truncated) ... onalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'Epic', False, False, 'Not Started', None, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 30, 21, 149869), datetime.datetime(2025, 1, 16, 19, 22, 36, 311560), None)
2025-02-11 09:23:18,206 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:23:18,207 INFO: [cached since 664.9s ago] {'pk_1': 5}
2025-02-11 09:23:18,208 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:23:18,208 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:23:18,208 INFO: Task with ID 87 fetched successfully.
2025-02-11 09:23:18,208 DEBUG: Fetched Task Data: {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-01-16T19:22:36.326985', 'contributor_name': 'Unassigned', 'parent': {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t•\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t•\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-01-16T19:22:36.311560'}}
2025-02-11 09:23:18,208 INFO: Task details fetched successfully for Task ID 87.
2025-02-11 09:23:18,209 INFO: ROLLBACK
2025-02-11 09:23:18,209 INFO: 127.0.0.1 - - [11/Feb/2025 09:23:18] "GET /api/tasks/87 HTTP/1.1" 200 -
2025-02-11 09:23:18,414 INFO: Fetching task details for Task ID 84.
2025-02-11 09:23:18,414 INFO: Fetching task with ID 84.
2025-02-11 09:23:18,415 INFO: BEGIN (implicit)
2025-02-11 09:23:18,415 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:18,415 INFO: [cached since 665.7s ago] {'pk_1': 84}
2025-02-11 09:23:18,416 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:18,417 DEBUG: Row (84, 'Enhance Task Contributor Management', 55, 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI ... (335 characters truncated) ... onalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'Epic', False, False, 'Not Started', None, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 30, 21, 149869), datetime.datetime(2025, 1, 16, 19, 22, 36, 311560), None)
2025-02-11 09:23:18,418 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x12b7d2810>, 'sort_order': 55, 'task_type': 'Epic', 'contributor_id': 5, 'id': 84, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 1, 7, 19, 30, 21, 149869), 'status': 'Not Started', 'project_id': 6, 'updated_at': datetime.datetime(2025, 1, 16, 19, 22, 36, 311560), 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t•\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t•\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'parent_id': None, 'story_points': 8, 'completed_date': None}
2025-02-11 09:23:18,419 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-11 09:23:18,419 INFO: [cached since 665.7s ago] {'pk_1': 6}
2025-02-11 09:23:18,420 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at')
2025-02-11 09:23:18,420 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298))
2025-02-11 09:23:18,421 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:23:18,421 INFO: [cached since 665.1s ago] {'pk_1': 5}
2025-02-11 09:23:18,421 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:23:18,422 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:23:18,422 INFO: Task ID 84 fetched with parent ID: None
2025-02-11 09:23:18,422 INFO: Task with ID 84 fetched successfully.
2025-02-11 09:23:18,422 DEBUG: Fetched Task Data: {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t•\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t•\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-01-16T19:22:36.311560', 'contributor_name': 'Fredrik Cederborg', 'parent': None}
2025-02-11 09:23:18,422 INFO: Task details fetched successfully for Task ID 84.
2025-02-11 09:23:18,423 INFO: ROLLBACK
2025-02-11 09:23:18,423 INFO: 127.0.0.1 - - [11/Feb/2025 09:23:18] "GET /api/tasks/84 HTTP/1.1" 200 -
2025-02-11 09:23:21,673 INFO: Assigning contributor to task ID 87
2025-02-11 09:23:21,673 INFO: Received data: {'contributor_id': 5}
2025-02-11 09:23:21,673 INFO: Contributor ID received: 5
2025-02-11 09:23:21,674 INFO: BEGIN (implicit)
2025-02-11 09:23:21,674 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:21,674 INFO: [cached since 668.9s ago] {'pk_1': 87}
2025-02-11 09:23:21,675 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:21,676 DEBUG: Row (87, 'Create and customize contributor roles', 64, 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'User Story', False, False, 'Not Started', 84, 6, None, 8, datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), datetime.datetime(2025, 1, 16, 19, 22, 36, 326985), None)
2025-02-11 09:23:21,677 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:23:21,677 INFO: [cached since 217.7s ago] {'pk_1': 5}
2025-02-11 09:23:21,677 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:23:21,677 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:23:21,678 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name 
FROM project LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project.id = project_contributor_1.project_id 
WHERE project.id = %(pk_1)s
2025-02-11 09:23:21,678 INFO: [cached since 217.7s ago] {'pk_1': 6}
2025-02-11 09:23:21,679 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at', 'contributor_1_id', 'contributor_1_name')
2025-02-11 09:23:21,680 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:23:21,681 INFO: UPDATE task SET contributor_id=%(contributor_id)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-02-11 09:23:21,681 INFO: [cached since 217.7s ago] {'contributor_id': 5, 'updated_at': datetime.datetime(2025, 2, 11, 8, 23, 21, 681307, tzinfo=datetime.timezone.utc), 'task_id': 87}
2025-02-11 09:23:21,682 INFO: COMMIT
2025-02-11 09:23:21,684 INFO: BEGIN (implicit)
2025-02-11 09:23:21,684 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:23:21,684 INFO: [cached since 217.7s ago] {'pk_1': 5}
2025-02-11 09:23:21,685 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:23:21,686 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:23:21,686 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:21,686 INFO: [cached since 217.7s ago] {'pk_1': 87}
2025-02-11 09:23:21,687 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:21,687 DEBUG: Row (87, 'Create and customize contributor roles', 64, 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'User Story', False, False, 'Not Started', 84, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), datetime.datetime(2025, 2, 11, 9, 23, 21, 681307), None)
2025-02-11 09:23:21,688 INFO: ROLLBACK
2025-02-11 09:23:21,688 INFO: 127.0.0.1 - - [11/Feb/2025 09:23:21] "POST /tasks/87/assign_contributor HTTP/1.1" 200 -
2025-02-11 09:23:23,390 INFO: save_task triggered
2025-02-11 09:23:23,390 INFO: Payload received: {'title': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_id': '87', 'project_id': '6', 'task_type': 'User Story', 'story_points': 8, 'parent_id': 84, 'contributor_id': None, 'sort_order': 0}
2025-02-11 09:23:23,391 INFO: Update request for Task ID: 87
2025-02-11 09:23:23,391 INFO: BEGIN (implicit)
2025-02-11 09:23:23,392 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:23,392 INFO: [cached since 670.6s ago] {'pk_1': '87'}
2025-02-11 09:23:23,393 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:23,393 DEBUG: Row (87, 'Create and customize contributor roles', 64, 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'User Story', False, False, 'Not Started', 84, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), datetime.datetime(2025, 2, 11, 9, 23, 21, 681307), None)
2025-02-11 09:23:23,394 DEBUG: Received update payload for Task ID 87: {'title': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_id': '87', 'project_id': '6', 'task_type': 'User Story', 'story_points': 8, 'parent_id': 84, 'contributor_id': None, 'sort_order': 0}
2025-02-11 09:23:23,394 DEBUG: Validating parent_id change for Task 87: 84
2025-02-11 09:23:23,394 INFO: Checking circular reference for Task 87 with Parent ID: 84
2025-02-11 09:23:23,395 INFO: SELECT task.parent_id AS task_parent_id 
FROM task 
WHERE task.id = %(id_1)s 
 LIMIT %(param_1)s
2025-02-11 09:23:23,395 INFO: [cached since 81.13s ago] {'id_1': 84, 'param_1': 1}
2025-02-11 09:23:23,396 DEBUG: Col ('task_parent_id',)
2025-02-11 09:23:23,396 DEBUG: Row (None,)
2025-02-11 09:23:23,396 INFO: Circular reference check passed.
2025-02-11 09:23:23,397 INFO: SELECT task.task_type AS task_task_type 
FROM task 
WHERE task.id = %(id_1)s 
 LIMIT %(param_1)s
2025-02-11 09:23:23,397 INFO: [cached since 81.13s ago] {'id_1': 84, 'param_1': 1}
2025-02-11 09:23:23,398 DEBUG: Col ('task_task_type',)
2025-02-11 09:23:23,399 DEBUG: Row ('Epic',)
2025-02-11 09:23:23,399 DEBUG: Validating hierarchy: Task 87, Parent Type: Epic
2025-02-11 09:23:23,399 INFO: Hierarchy validation passed for Task 87.
2025-02-11 09:23:23,399 INFO: Validation passed for parent_id: 84
2025-02-11 09:23:23,399 DEBUG: Validating task_type change for Task 87: User Story
2025-02-11 09:23:23,400 INFO: SELECT task.task_type AS task_task_type 
FROM task 
WHERE task.id = %(id_1)s 
 LIMIT %(param_1)s
2025-02-11 09:23:23,400 INFO: [cached since 81.13s ago] {'id_1': 84, 'param_1': 1}
2025-02-11 09:23:23,401 DEBUG: Col ('task_task_type',)
2025-02-11 09:23:23,402 DEBUG: Row ('Epic',)
2025-02-11 09:23:23,402 DEBUG: Validating hierarchy: Task Type: User Story, Parent Type: Epic
2025-02-11 09:23:23,402 INFO: Hierarchy validation passed for Task 87.
2025-02-11 09:23:23,402 INFO: Validation passed for task_type: User Story
2025-02-11 09:23:23,402 INFO: UPDATE task SET updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-02-11 09:23:23,402 INFO: [cached since 81.13s ago] {'updated_at': datetime.datetime(2025, 2, 11, 8, 23, 23, 402442), 'task_id': 87}
2025-02-11 09:23:23,403 INFO: COMMIT
2025-02-11 09:23:23,403 INFO: Task ID 87 updated successfully.
2025-02-11 09:23:23,403 INFO: BEGIN (implicit)
2025-02-11 09:23:23,403 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:23,403 INFO: [cached since 219.4s ago] {'pk_1': 87}
2025-02-11 09:23:23,404 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:23,404 DEBUG: Row (87, 'Create and customize contributor roles', 64, 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'User Story', False, False, 'Not Started', 84, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 33, 43, 600461), datetime.datetime(2025, 2, 11, 8, 23, 23, 402442), None)
2025-02-11 09:23:23,404 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:23:23,404 INFO: [cached since 670.1s ago] {'pk_1': 5}
2025-02-11 09:23:23,404 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:23:23,404 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:23:23,405 INFO: ROLLBACK
2025-02-11 09:23:23,405 INFO: 127.0.0.1 - - [11/Feb/2025 09:23:23] "POST /api/tasks HTTP/1.1" 200 -
2025-02-11 09:23:28,144 INFO: Fetching task details for Task ID 91.
2025-02-11 09:23:28,144 INFO: Fetching task with ID 91.
2025-02-11 09:23:28,145 INFO: BEGIN (implicit)
2025-02-11 09:23:28,145 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:28,145 INFO: [cached since 675.4s ago] {'pk_1': 91}
2025-02-11 09:23:28,146 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:28,147 DEBUG: Row (91, 'Update database schema for task ownership', 62, 'Add a column or relationship to assign a single owner per task.', 'Subtask', False, False, 'Not Started', 86, 6, None, 3, datetime.datetime(2025, 1, 7, 19, 39, 17, 531925), datetime.datetime(2025, 1, 16, 19, 22, 36, 324051), None)
2025-02-11 09:23:28,147 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x12b7d15b0>, 'sort_order': 62, 'task_type': 'Subtask', 'contributor_id': None, 'id': 91, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 1, 7, 19, 39, 17, 531925), 'status': 'Not Started', 'project_id': 6, 'updated_at': datetime.datetime(2025, 1, 16, 19, 22, 36, 324051), 'name': 'Update database schema for task ownership', 'description': 'Add a column or relationship to assign a single owner per task.', 'parent_id': 86, 'story_points': 3, 'completed_date': None}
2025-02-11 09:23:28,148 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-11 09:23:28,148 INFO: [cached since 675.4s ago] {'pk_1': 6}
2025-02-11 09:23:28,148 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at')
2025-02-11 09:23:28,148 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298))
2025-02-11 09:23:28,149 INFO: Task ID 91 fetched with parent ID: 86
2025-02-11 09:23:28,149 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:28,149 INFO: [cached since 675.4s ago] {'pk_1': 86}
2025-02-11 09:23:28,150 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:28,151 DEBUG: Row (86, 'Allow designation of task owner', 60, 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'User Story', False, False, 'Not Started', 84, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 33, 29, 330562), datetime.datetime(2025, 1, 16, 19, 22, 36, 320840), None)
2025-02-11 09:23:28,151 INFO: Task with ID 91 fetched successfully.
2025-02-11 09:23:28,151 DEBUG: Fetched Task Data: {'id': 91, 'name': 'Update database schema for task ownership', 'description': 'Add a column or relationship to assign a single owner per task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-01-16T19:22:36.324051', 'contributor_name': 'Unassigned', 'parent': {'id': 86, 'name': 'Allow designation of task owner', 'description': 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:29.330562', 'updated_at': '2025-01-16T19:22:36.320840'}}
2025-02-11 09:23:28,151 INFO: Task details fetched successfully for Task ID 91.
2025-02-11 09:23:28,151 INFO: ROLLBACK
2025-02-11 09:23:28,152 INFO: 127.0.0.1 - - [11/Feb/2025 09:23:28] "GET /api/tasks/91 HTTP/1.1" 200 -
2025-02-11 09:23:28,660 INFO: Fetching task details for Task ID 86.
2025-02-11 09:23:28,660 INFO: Fetching task with ID 86.
2025-02-11 09:23:28,661 INFO: BEGIN (implicit)
2025-02-11 09:23:28,661 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:28,662 INFO: [cached since 675.9s ago] {'pk_1': 86}
2025-02-11 09:23:28,662 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:28,663 DEBUG: Row (86, 'Allow designation of task owner', 60, 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'User Story', False, False, 'Not Started', 84, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 33, 29, 330562), datetime.datetime(2025, 1, 16, 19, 22, 36, 320840), None)
2025-02-11 09:23:28,664 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x12b7d0b90>, 'sort_order': 60, 'task_type': 'User Story', 'contributor_id': None, 'id': 86, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 1, 7, 19, 33, 29, 330562), 'status': 'Not Started', 'project_id': 6, 'updated_at': datetime.datetime(2025, 1, 16, 19, 22, 36, 320840), 'name': 'Allow designation of task owner', 'description': 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'parent_id': 84, 'story_points': 5, 'completed_date': None}
2025-02-11 09:23:28,665 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-11 09:23:28,665 INFO: [cached since 675.9s ago] {'pk_1': 6}
2025-02-11 09:23:28,666 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at')
2025-02-11 09:23:28,666 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298))
2025-02-11 09:23:28,667 INFO: Task ID 86 fetched with parent ID: 84
2025-02-11 09:23:28,667 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:28,667 INFO: [cached since 675.9s ago] {'pk_1': 84}
2025-02-11 09:23:28,668 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:28,669 DEBUG: Row (84, 'Enhance Task Contributor Management', 55, 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI ... (335 characters truncated) ... onalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'Epic', False, False, 'Not Started', None, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 30, 21, 149869), datetime.datetime(2025, 1, 16, 19, 22, 36, 311560), None)
2025-02-11 09:23:28,669 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:23:28,669 INFO: [cached since 675.4s ago] {'pk_1': 5}
2025-02-11 09:23:28,670 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:23:28,670 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:23:28,671 INFO: Task with ID 86 fetched successfully.
2025-02-11 09:23:28,671 DEBUG: Fetched Task Data: {'id': 86, 'name': 'Allow designation of task owner', 'description': 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:29.330562', 'updated_at': '2025-01-16T19:22:36.320840', 'contributor_name': 'Unassigned', 'parent': {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t•\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t•\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-01-16T19:22:36.311560'}}
2025-02-11 09:23:28,671 INFO: Task details fetched successfully for Task ID 86.
2025-02-11 09:23:28,671 INFO: ROLLBACK
2025-02-11 09:23:28,671 INFO: 127.0.0.1 - - [11/Feb/2025 09:23:28] "GET /api/tasks/86 HTTP/1.1" 200 -
2025-02-11 09:23:29,377 INFO: Fetching task details for Task ID 91.
2025-02-11 09:23:29,377 INFO: Fetching task with ID 91.
2025-02-11 09:23:29,378 INFO: BEGIN (implicit)
2025-02-11 09:23:29,378 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:29,378 INFO: [cached since 676.6s ago] {'pk_1': 91}
2025-02-11 09:23:29,379 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:29,379 DEBUG: Row (91, 'Update database schema for task ownership', 62, 'Add a column or relationship to assign a single owner per task.', 'Subtask', False, False, 'Not Started', 86, 6, None, 3, datetime.datetime(2025, 1, 7, 19, 39, 17, 531925), datetime.datetime(2025, 1, 16, 19, 22, 36, 324051), None)
2025-02-11 09:23:29,380 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x12b7d1f70>, 'sort_order': 62, 'task_type': 'Subtask', 'contributor_id': None, 'id': 91, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 1, 7, 19, 39, 17, 531925), 'status': 'Not Started', 'project_id': 6, 'updated_at': datetime.datetime(2025, 1, 16, 19, 22, 36, 324051), 'name': 'Update database schema for task ownership', 'description': 'Add a column or relationship to assign a single owner per task.', 'parent_id': 86, 'story_points': 3, 'completed_date': None}
2025-02-11 09:23:29,380 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-11 09:23:29,380 INFO: [cached since 676.6s ago] {'pk_1': 6}
2025-02-11 09:23:29,381 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at')
2025-02-11 09:23:29,382 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298))
2025-02-11 09:23:29,382 INFO: Task ID 91 fetched with parent ID: 86
2025-02-11 09:23:29,383 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:29,383 INFO: [cached since 676.6s ago] {'pk_1': 86}
2025-02-11 09:23:29,384 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:29,384 DEBUG: Row (86, 'Allow designation of task owner', 60, 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'User Story', False, False, 'Not Started', 84, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 33, 29, 330562), datetime.datetime(2025, 1, 16, 19, 22, 36, 320840), None)
2025-02-11 09:23:29,384 INFO: Task with ID 91 fetched successfully.
2025-02-11 09:23:29,385 DEBUG: Fetched Task Data: {'id': 91, 'name': 'Update database schema for task ownership', 'description': 'Add a column or relationship to assign a single owner per task.', 'task_type': 'Subtask', 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-01-16T19:22:36.324051', 'contributor_name': 'Unassigned', 'parent': {'id': 86, 'name': 'Allow designation of task owner', 'description': 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:29.330562', 'updated_at': '2025-01-16T19:22:36.320840'}}
2025-02-11 09:23:29,385 INFO: Task details fetched successfully for Task ID 91.
2025-02-11 09:23:29,385 INFO: ROLLBACK
2025-02-11 09:23:29,386 INFO: 127.0.0.1 - - [11/Feb/2025 09:23:29] "GET /api/tasks/91 HTTP/1.1" 200 -
2025-02-11 09:23:29,590 INFO: Fetching task details for Task ID 86.
2025-02-11 09:23:29,590 INFO: Fetching task with ID 86.
2025-02-11 09:23:29,592 INFO: BEGIN (implicit)
2025-02-11 09:23:29,593 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:29,593 INFO: [cached since 676.8s ago] {'pk_1': 86}
2025-02-11 09:23:29,594 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:29,595 DEBUG: Row (86, 'Allow designation of task owner', 60, 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'User Story', False, False, 'Not Started', 84, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 33, 29, 330562), datetime.datetime(2025, 1, 16, 19, 22, 36, 320840), None)
2025-02-11 09:23:29,595 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x12b7d15b0>, 'sort_order': 60, 'task_type': 'User Story', 'contributor_id': None, 'id': 86, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 1, 7, 19, 33, 29, 330562), 'status': 'Not Started', 'project_id': 6, 'updated_at': datetime.datetime(2025, 1, 16, 19, 22, 36, 320840), 'name': 'Allow designation of task owner', 'description': 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'parent_id': 84, 'story_points': 5, 'completed_date': None}
2025-02-11 09:23:29,595 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-11 09:23:29,596 INFO: [cached since 676.8s ago] {'pk_1': 6}
2025-02-11 09:23:29,596 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at')
2025-02-11 09:23:29,597 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298))
2025-02-11 09:23:29,597 INFO: Task ID 86 fetched with parent ID: 84
2025-02-11 09:23:29,598 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:29,598 INFO: [cached since 676.8s ago] {'pk_1': 84}
2025-02-11 09:23:29,599 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:29,599 DEBUG: Row (84, 'Enhance Task Contributor Management', 55, 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI ... (335 characters truncated) ... onalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'Epic', False, False, 'Not Started', None, 6, 5, 8, datetime.datetime(2025, 1, 7, 19, 30, 21, 149869), datetime.datetime(2025, 1, 16, 19, 22, 36, 311560), None)
2025-02-11 09:23:29,599 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:23:29,599 INFO: [cached since 676.3s ago] {'pk_1': 5}
2025-02-11 09:23:29,600 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:23:29,600 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:23:29,600 INFO: Task with ID 86 fetched successfully.
2025-02-11 09:23:29,600 DEBUG: Fetched Task Data: {'id': 86, 'name': 'Allow designation of task owner', 'description': 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'task_type': 'User Story', 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T19:33:29.330562', 'updated_at': '2025-01-16T19:22:36.320840', 'contributor_name': 'Unassigned', 'parent': {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t•\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t•\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-01-16T19:22:36.311560'}}
2025-02-11 09:23:29,600 INFO: Task details fetched successfully for Task ID 86.
2025-02-11 09:23:29,600 INFO: ROLLBACK
2025-02-11 09:23:29,601 INFO: 127.0.0.1 - - [11/Feb/2025 09:23:29] "GET /api/tasks/86 HTTP/1.1" 200 -
2025-02-11 09:23:32,307 INFO: Assigning contributor to task ID 91
2025-02-11 09:23:32,308 INFO: Received data: {'contributor_id': 5}
2025-02-11 09:23:32,308 INFO: Contributor ID received: 5
2025-02-11 09:23:32,308 INFO: BEGIN (implicit)
2025-02-11 09:23:32,308 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:32,308 INFO: [cached since 679.6s ago] {'pk_1': 91}
2025-02-11 09:23:32,309 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:32,309 DEBUG: Row (91, 'Update database schema for task ownership', 62, 'Add a column or relationship to assign a single owner per task.', 'Subtask', False, False, 'Not Started', 86, 6, None, 3, datetime.datetime(2025, 1, 7, 19, 39, 17, 531925), datetime.datetime(2025, 1, 16, 19, 22, 36, 324051), None)
2025-02-11 09:23:32,310 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:23:32,310 INFO: [cached since 228.3s ago] {'pk_1': 5}
2025-02-11 09:23:32,310 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:23:32,310 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:23:32,310 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name 
FROM project LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project.id = project_contributor_1.project_id 
WHERE project.id = %(pk_1)s
2025-02-11 09:23:32,310 INFO: [cached since 228.3s ago] {'pk_1': 6}
2025-02-11 09:23:32,311 DEBUG: Col ('project_id', 'project_name', 'project_start_date', 'project_end_date', 'project_scope', 'project_completed_story_points', 'project_created_at', 'project_updated_at', 'contributor_1_id', 'contributor_1_name')
2025-02-11 09:23:32,311 DEBUG: Row (6, 'PMS - Backlog', datetime.date(2025, 1, 3), datetime.date(2025, 1, 8), None, 0, datetime.datetime(2025, 1, 3, 23, 58, 22, 327293), datetime.datetime(2025, 1, 3, 23, 58, 22, 327298), 5, 'Fredrik Cederborg')
2025-02-11 09:23:32,311 INFO: UPDATE task SET contributor_id=%(contributor_id)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-02-11 09:23:32,311 INFO: [cached since 228.3s ago] {'contributor_id': 5, 'updated_at': datetime.datetime(2025, 2, 11, 8, 23, 32, 311809, tzinfo=datetime.timezone.utc), 'task_id': 91}
2025-02-11 09:23:32,312 INFO: COMMIT
2025-02-11 09:23:32,313 INFO: BEGIN (implicit)
2025-02-11 09:23:32,313 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:23:32,313 INFO: [cached since 228.3s ago] {'pk_1': 5}
2025-02-11 09:23:32,314 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:23:32,314 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:23:32,314 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:32,314 INFO: [cached since 228.3s ago] {'pk_1': 91}
2025-02-11 09:23:32,315 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:32,315 DEBUG: Row (91, 'Update database schema for task ownership', 62, 'Add a column or relationship to assign a single owner per task.', 'Subtask', False, False, 'Not Started', 86, 6, 5, 3, datetime.datetime(2025, 1, 7, 19, 39, 17, 531925), datetime.datetime(2025, 2, 11, 9, 23, 32, 311809), None)
2025-02-11 09:23:32,315 INFO: ROLLBACK
2025-02-11 09:23:32,316 INFO: 127.0.0.1 - - [11/Feb/2025 09:23:32] "POST /tasks/91/assign_contributor HTTP/1.1" 200 -
2025-02-11 09:23:33,657 INFO: save_task triggered
2025-02-11 09:23:33,658 INFO: Payload received: {'title': 'Update database schema for task ownership', 'description': 'Add a column or relationship to assign a single owner per task.', 'task_id': '91', 'project_id': '6', 'task_type': 'Subtask', 'story_points': 3, 'parent_id': 86, 'contributor_id': None, 'sort_order': 0}
2025-02-11 09:23:33,658 INFO: Update request for Task ID: 91
2025-02-11 09:23:33,659 INFO: BEGIN (implicit)
2025-02-11 09:23:33,659 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:33,659 INFO: [cached since 680.9s ago] {'pk_1': '91'}
2025-02-11 09:23:33,661 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:33,661 DEBUG: Row (91, 'Update database schema for task ownership', 62, 'Add a column or relationship to assign a single owner per task.', 'Subtask', False, False, 'Not Started', 86, 6, 5, 3, datetime.datetime(2025, 1, 7, 19, 39, 17, 531925), datetime.datetime(2025, 2, 11, 9, 23, 32, 311809), None)
2025-02-11 09:23:33,661 DEBUG: Received update payload for Task ID 91: {'title': 'Update database schema for task ownership', 'description': 'Add a column or relationship to assign a single owner per task.', 'task_id': '91', 'project_id': '6', 'task_type': 'Subtask', 'story_points': 3, 'parent_id': 86, 'contributor_id': None, 'sort_order': 0}
2025-02-11 09:23:33,661 DEBUG: Validating parent_id change for Task 91: 86
2025-02-11 09:23:33,661 INFO: Checking circular reference for Task 91 with Parent ID: 86
2025-02-11 09:23:33,663 INFO: SELECT task.parent_id AS task_parent_id 
FROM task 
WHERE task.id = %(id_1)s 
 LIMIT %(param_1)s
2025-02-11 09:23:33,664 INFO: [cached since 91.4s ago] {'id_1': 86, 'param_1': 1}
2025-02-11 09:23:33,665 DEBUG: Col ('task_parent_id',)
2025-02-11 09:23:33,665 DEBUG: Row (84,)
2025-02-11 09:23:33,666 INFO: SELECT task.parent_id AS task_parent_id 
FROM task 
WHERE task.id = %(id_1)s 
 LIMIT %(param_1)s
2025-02-11 09:23:33,666 INFO: [cached since 91.4s ago] {'id_1': 84, 'param_1': 1}
2025-02-11 09:23:33,666 DEBUG: Col ('task_parent_id',)
2025-02-11 09:23:33,667 DEBUG: Row (None,)
2025-02-11 09:23:33,667 INFO: Circular reference check passed.
2025-02-11 09:23:33,667 INFO: SELECT task.task_type AS task_task_type 
FROM task 
WHERE task.id = %(id_1)s 
 LIMIT %(param_1)s
2025-02-11 09:23:33,667 INFO: [cached since 91.4s ago] {'id_1': 86, 'param_1': 1}
2025-02-11 09:23:33,668 DEBUG: Col ('task_task_type',)
2025-02-11 09:23:33,668 DEBUG: Row ('User Story',)
2025-02-11 09:23:33,668 DEBUG: Validating hierarchy: Task 91, Parent Type: User Story
2025-02-11 09:23:33,668 INFO: Hierarchy validation passed for Task 91.
2025-02-11 09:23:33,668 INFO: Validation passed for parent_id: 86
2025-02-11 09:23:33,669 DEBUG: Validating task_type change for Task 91: Subtask
2025-02-11 09:23:33,669 INFO: SELECT task.task_type AS task_task_type 
FROM task 
WHERE task.id = %(id_1)s 
 LIMIT %(param_1)s
2025-02-11 09:23:33,669 INFO: [cached since 91.4s ago] {'id_1': 86, 'param_1': 1}
2025-02-11 09:23:33,670 DEBUG: Col ('task_task_type',)
2025-02-11 09:23:33,670 DEBUG: Row ('User Story',)
2025-02-11 09:23:33,670 DEBUG: Validating hierarchy: Task Type: Subtask, Parent Type: User Story
2025-02-11 09:23:33,670 INFO: Hierarchy validation passed for Task 91.
2025-02-11 09:23:33,670 INFO: Validation passed for task_type: Subtask
2025-02-11 09:23:33,670 INFO: UPDATE task SET updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-02-11 09:23:33,670 INFO: [cached since 91.4s ago] {'updated_at': datetime.datetime(2025, 2, 11, 8, 23, 33, 670381), 'task_id': 91}
2025-02-11 09:23:33,671 INFO: COMMIT
2025-02-11 09:23:33,673 INFO: Task ID 91 updated successfully.
2025-02-11 09:23:33,673 INFO: BEGIN (implicit)
2025-02-11 09:23:33,674 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:33,674 INFO: [cached since 229.6s ago] {'pk_1': 91}
2025-02-11 09:23:33,674 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:33,675 DEBUG: Row (91, 'Update database schema for task ownership', 62, 'Add a column or relationship to assign a single owner per task.', 'Subtask', False, False, 'Not Started', 86, 6, 5, 3, datetime.datetime(2025, 1, 7, 19, 39, 17, 531925), datetime.datetime(2025, 2, 11, 8, 23, 33, 670381), None)
2025-02-11 09:23:33,675 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-11 09:23:33,675 INFO: [cached since 680.4s ago] {'pk_1': 5}
2025-02-11 09:23:33,675 DEBUG: Col ('contributor_id', 'contributor_name')
2025-02-11 09:23:33,676 DEBUG: Row (5, 'Fredrik Cederborg')
2025-02-11 09:23:33,676 INFO: ROLLBACK
2025-02-11 09:23:33,676 INFO: 127.0.0.1 - - [11/Feb/2025 09:23:33] "POST /api/tasks HTTP/1.1" 200 -
2025-02-11 09:23:36,843 INFO: Fetching task details for Task ID 93.
2025-02-11 09:23:36,843 INFO: Fetching task with ID 93.
2025-02-11 09:23:36,843 INFO: BEGIN (implicit)
2025-02-11 09:23:36,844 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-11 09:23:36,844 INFO: [cached since 684.1s ago] {'pk_1': 93}
2025-02-11 09:23:36,845 DEBUG: Col ('task_id', 'task_name', 'task_sort_order', 'task_description', 'task_task_type', 'task_is_archived', 'task_completed', 'task_status', 'task_parent_id', 'task_project_id', 'task_contributor_id', 'task_story_points', 'task_created_at', 'task_updated_at', 'task_completed_date')
2025-02-11 09:23:36,845 DEBUG: Row (93, 'Update frontend to manage task ownership', 61, 'Allow users to assign or update the task owner via the UI.', 'Subtask', False, False, 'Not Started', 86, 6, None, 5, datetime.datetime(2025, 1, 7, 19, 39, 17, 531925), datetime.datetime(2025, 1, 16, 19, 22, 36, 322637), None)
2025-02-11 09:23:36,845 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x12b7d2ed0>, 'sort_order': 61, 'task_type': 'Subtask', 'contributor_id': None, 'id': 93, 'is_archived': False, 'completed': False, 'created_at': datetime.datetime(2025, 1, 7, 19, 39, 17, 531925), 'status': 'Not Started', 'project_id': 6, 'updated_at': datetime.datetime(2025, 1, 16, 19, 22, 36, 322637), 'name': 'Update frontend to manage task ownership', 'description': 'Allow users to assign or update the task owner via the UI.', 'parent_id': 86, 'story_points': 5, 'completed_date': None}
2025-02-11 09:23:36,846 INFO: SELECT project.id AS project_id, project.name AS project_name, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
