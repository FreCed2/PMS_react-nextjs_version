2025-03-04 15:32:57,217 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-04 15:32:57,282 INFO: [cached since 5825s ago] {}
2025-03-04 15:32:57,283 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 15:32:57,283 INFO: [cached since 5826s ago] {'param_1': 2}
2025-03-04 15:32:57,349 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 15:32:57,352 INFO: [cached since 5826s ago] {'param_1': 3}
2025-03-04 15:32:57,408 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 15:32:57,412 INFO: [cached since 5826s ago] {'param_1': 4}
2025-03-04 15:32:57,409 INFO: ROLLBACK
2025-03-04 15:32:57,430 INFO: 127.0.0.1 - - [04/Mar/2025 15:32:57] "GET /api/tasks HTTP/1.1" 200 -
2025-03-04 15:32:57,430 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 15:32:57,431 INFO: [cached since 5826s ago] {'param_1': 5}
2025-03-04 15:32:57,433 INFO: ROLLBACK
2025-03-04 15:32:57,436 INFO: 127.0.0.1 - - [04/Mar/2025 15:32:57] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-04 15:33:23,760 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=polling&t=l9uulauw HTTP/1.1" 200 -
2025-03-04 15:33:23,764 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "POST /socket.io/?EIO=4&transport=polling&t=l9v03a6m&sid=plGHqplHDs6aOrN6AACo HTTP/1.1" 200 -
2025-03-04 15:33:23,766 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=polling&t=l9v03eh1&sid=plGHqplHDs6aOrN6AACo HTTP/1.1" 200 -
2025-03-04 15:33:23,773 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=Y9V-LVAvbGPYcM0fAABZ HTTP/1.1" 200 -
2025-03-04 15:33:23,776 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=tnOFQVbb2v4PD4Y0AABk HTTP/1.1" 200 -
2025-03-04 15:33:23,780 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=Z8jamqHGcT-rr-AlAAB0 HTTP/1.1" 200 -
2025-03-04 15:33:23,780 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=MThv59RxxJvjcvMsAAB4 HTTP/1.1" 200 -
2025-03-04 15:33:23,781 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=CltFZsJjLx5YzgfCAABW HTTP/1.1" 200 -
2025-03-04 15:33:23,858 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=rKyXSowj5prvr49-AACY HTTP/1.1" 200 -
2025-03-04 15:33:23,783 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=KjsUbXwrpDWNVtlLAACk HTTP/1.1" 200 -
2025-03-04 15:33:23,797 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=WPvrE7DtrNO3cKpRAACI HTTP/1.1" 200 -
2025-03-04 15:33:23,802 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=igxsLFNN-gln7zmbAACQ HTTP/1.1" 200 -
2025-03-04 15:33:23,805 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=xSovEmU40BYKnjNaAABx HTTP/1.1" 200 -
2025-03-04 15:33:23,806 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=kbeCF813uiFD4It2AABo HTTP/1.1" 200 -
2025-03-04 15:33:23,807 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=4FXichFbr-OEUqt8AACE HTTP/1.1" 200 -
2025-03-04 15:33:23,807 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=Gvi09kgeYJRLHoErAAB1 HTTP/1.1" 200 -
2025-03-04 15:33:23,807 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=LG_IxgHuW7_dqxvrAABp HTTP/1.1" 200 -
2025-03-04 15:33:23,807 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=ZAAPYyzydRq3EgYBAABw HTTP/1.1" 200 -
2025-03-04 15:33:23,808 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=Is8cYW9HbA7fr1Q9AACF HTTP/1.1" 200 -
2025-03-04 15:33:23,809 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=YxaWjHLwAQtKQl2dAACJ HTTP/1.1" 200 -
2025-03-04 15:33:23,814 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=o35HUjSdiKqNrVuwAAB8 HTTP/1.1" 200 -
2025-03-04 15:33:23,819 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=WJu90S9BWnrnC2whAACN HTTP/1.1" 200 -
2025-03-04 15:33:23,821 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=240SamBDwRdAxLTcAABl HTTP/1.1" 200 -
2025-03-04 15:33:23,822 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=ZdhZMyi88uAGNlXeAACB HTTP/1.1" 200 -
2025-03-04 15:33:23,827 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=xnirKxvEEbj9pGjvAAB9 HTTP/1.1" 200 -
2025-03-04 15:33:23,831 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=qvfyFFICqr911yiYAAB5 HTTP/1.1" 200 -
2025-03-04 15:33:23,831 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=ZlswNgAPqyjwpFOpAACd HTTP/1.1" 200 -
2025-03-04 15:33:23,831 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=4c5z5QLTQTgr8JdzAABc HTTP/1.1" 200 -
2025-03-04 15:33:23,831 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=ng8DPwtz6pjAneFzAABY HTTP/1.1" 200 -
2025-03-04 15:33:23,834 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=Ui7IDmTco1tKIoSZAACZ HTTP/1.1" 200 -
2025-03-04 15:33:23,843 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=dmBROkLpuFpMITgPAACh HTTP/1.1" 200 -
2025-03-04 15:33:23,844 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=R6kqWYAjt9BTq3J1AABh HTTP/1.1" 200 -
2025-03-04 15:33:23,846 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=kimArvZgzmybRx0OAACV HTTP/1.1" 200 -
2025-03-04 15:33:23,846 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=nl898IN8LyCAA1lJAACl HTTP/1.1" 200 -
2025-03-04 15:33:23,848 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=x4lo8L3PCr9ZAh1VAABd HTTP/1.1" 200 -
2025-03-04 15:33:23,850 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=tmABjCWhG7qWOItiAACR HTTP/1.1" 200 -
2025-03-04 15:33:23,851 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=15TiLhwsVr2Md1TxAABg HTTP/1.1" 200 -
2025-03-04 15:33:23,851 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=z71Cm3W4Nz924McJAACg HTTP/1.1" 200 -
2025-03-04 15:33:23,852 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=lgJH6dgI0Qs0Mf7UAACc HTTP/1.1" 200 -
2025-03-04 15:33:23,852 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=-jcQ_PVvq2p1i1TgAABt HTTP/1.1" 200 -
2025-03-04 15:33:23,852 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=6_aL3Tauj9KyqCmmAACM HTTP/1.1" 200 -
2025-03-04 15:33:23,852 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=8bRiDR0sEzTUaA-hAACU HTTP/1.1" 200 -
2025-03-04 15:33:23,853 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=SoOc2LVsJuGrIMSyAACA HTTP/1.1" 200 -
2025-03-04 15:33:23,791 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:23] "GET /socket.io/?EIO=4&transport=websocket&sid=sEdAIKZjQlaUcvDYAABs HTTP/1.1" 200 -
2025-03-04 15:33:24,164 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:24] "GET /socket.io/?EIO=4&transport=polling&t=l9vb3tly HTTP/1.1" 200 -
2025-03-04 15:33:24,184 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:24] "POST /socket.io/?EIO=4&transport=polling&t=l9vbp7qa&sid=gPJfgGhNpYuhote1AACq HTTP/1.1" 200 -
2025-03-04 15:33:24,201 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:24] "GET /socket.io/?EIO=4&transport=polling&t=l9vbqf3l&sid=gPJfgGhNpYuhote1AACq HTTP/1.1" 200 -
2025-03-04 15:33:24,419 INFO: BEGIN (implicit)
2025-03-04 15:33:24,423 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-04 15:33:24,424 INFO: Entering list_tasks_json route...
2025-03-04 15:33:24,426 INFO: BEGIN (implicit)
2025-03-04 15:33:24,433 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-04 15:33:24,433 INFO: [cached since 5853s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-04 15:33:24,427 INFO: BEGIN (implicit)
2025-03-04 15:33:24,433 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-04 15:33:24,433 INFO: [cached since 5853s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-04 15:33:24,427 INFO: [cached since 5853s ago] {}
2025-03-04 15:33:24,430 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:24] "GET /socket.io/?EIO=4&transport=polling&t=l9vdde52&sid=gPJfgGhNpYuhote1AACq HTTP/1.1" 200 -
2025-03-04 15:33:24,431 DEBUG: Filters used in API: {'is_archived': False}
2025-03-04 15:33:24,439 DEBUG: Applying filters: {'is_archived': False}
2025-03-04 15:33:24,466 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-04 15:33:24,467 INFO: [cached since 5853s ago] {}
2025-03-04 15:33:24,491 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-04 15:33:24,510 INFO: [cached since 5853s ago] {}
2025-03-04 15:33:24,503 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-04 15:33:24,508 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 15:33:24,513 INFO: ROLLBACK
2025-03-04 15:33:24,516 INFO: BEGIN (implicit)
2025-03-04 15:33:24,516 INFO: [cached since 5853s ago] {'param_1': 1}
2025-03-04 15:33:24,518 INFO: ROLLBACK
2025-03-04 15:33:24,529 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-04 15:33:24,534 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:24] "GET /api/projects HTTP/1.1" 200 -
2025-03-04 15:33:24,540 INFO: [cached since 5853s ago] {'param_1': 700, 'param_2': 0}
2025-03-04 15:33:24,538 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:24] "GET /api/projects HTTP/1.1" 200 -
2025-03-04 15:33:24,540 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 15:33:24,541 INFO: [cached since 5853s ago] {'param_1': 2}
2025-03-04 15:33:24,551 INFO: BEGIN (implicit)
2025-03-04 15:33:24,552 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 15:33:24,553 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-04 15:33:24,553 INFO: [cached since 5853s ago] {'param_1': 3}
2025-03-04 15:33:24,555 INFO: [cached since 5853s ago] {'pk_1': 19}
2025-03-04 15:33:24,560 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 15:33:24,560 INFO: [cached since 5853s ago] {'param_1': 4}
2025-03-04 15:33:24,562 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 15:33:24,563 INFO: [cached since 5853s ago] {'param_1': 5}
2025-03-04 15:33:24,564 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-04 15:33:24,564 INFO: [cached since 5853s ago] {}
2025-03-04 15:33:24,567 INFO: ROLLBACK
2025-03-04 15:33:24,568 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-04 15:33:24,569 INFO: [cached since 5853s ago] {'param_1': 19}
2025-03-04 15:33:24,569 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:24] "GET /api/contributors HTTP/1.1" 200 -
2025-03-04 15:33:24,581 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 15:33:24,581 INFO: [cached since 5853s ago] {'param_1': 1}
2025-03-04 15:33:24,585 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 15:33:24,585 INFO: [cached since 5853s ago] {'param_1': 2}
2025-03-04 15:33:24,587 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 15:33:24,589 INFO: [cached since 5853s ago] {'param_1': 3}
2025-03-04 15:33:24,590 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 15:33:24,590 INFO: [cached since 5853s ago] {'param_1': 4}
2025-03-04 15:33:24,592 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 15:33:24,592 INFO: [cached since 5853s ago] {'param_1': 5}
2025-03-04 15:33:24,594 INFO: ROLLBACK
2025-03-04 15:33:24,599 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:24] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-04 15:33:24,662 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-04 15:33:24,662 INFO: [cached since 5853s ago] {}
2025-03-04 15:33:24,665 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-04 15:33:24,666 INFO: [cached since 5853s ago] {}
2025-03-04 15:33:24,671 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-04 15:33:24,672 INFO: [cached since 5853s ago] {}
2025-03-04 15:33:24,679 INFO: ROLLBACK
2025-03-04 15:33:24,680 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:24] "GET /api/tasks HTTP/1.1" 200 -
2025-03-04 15:33:34,268 INFO: Fetching task details for Task ID 386.
2025-03-04 15:33:34,271 INFO: Fetching task with ID 386.
2025-03-04 15:33:34,273 INFO: BEGIN (implicit)
2025-03-04 15:33:34,274 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 15:33:34,274 INFO: [cached since 5884s ago] {'pk_1': 386}
2025-03-04 15:33:34,393 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x10a66e930>, 'epic_priority': None, 'contributor_id': 5, 'story_points': 9, 'id': 386, 'is_archived': False, 'completed_date': None, 'name': 'Test task', 'completed': False, 'sort_order': 1, 'created_at': datetime.datetime(2025, 3, 1, 12, 39, 7, 359868), 'description': '<p>Testing tiptap editor lkjlk</p><hr><p>Write something</p><hr><p>Write something</p><hr><p></p>', 'status': 'In Progress', 'updated_at': datetime.datetime(2025, 3, 4, 9, 6, 32, 689752), 'parent_id': None, 'task_type': 'User Story', 'project_id': 19, 'priority': None}
2025-03-04 15:33:34,393 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-04 15:33:34,394 INFO: [cached since 5852s ago] {'pk_1': 19}
2025-03-04 15:33:34,395 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 15:33:34,395 INFO: [cached since 5852s ago] {'pk_1': 5}
2025-03-04 15:33:34,397 INFO: Task ID 386 fetched with parent ID: None
2025-03-04 15:33:34,397 INFO: Task with ID 386 fetched successfully.
2025-03-04 15:33:34,397 DEBUG: Fetched Task Data: {'id': 386, 'name': 'Test task', 'description': '<p>Testing tiptap editor lkjlk</p><hr><p>Write something</p><hr><p>Write something</p><hr><p></p>', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 9, 'status': 'In Progress', 'sort_order': 1, 'created_at': '2025-03-01T12:39:07.359868', 'updated_at': '2025-03-04T09:06:32.689752', 'contributor_name': 'Fredrik Cederborg', 'parent': None}
2025-03-04 15:33:34,397 INFO: Task details fetched successfully for Task ID 386.
2025-03-04 15:33:34,398 INFO: ROLLBACK
2025-03-04 15:33:34,400 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:34] "GET /api/tasks/386 HTTP/1.1" 200 -
2025-03-04 15:33:34,603 INFO: BEGIN (implicit)
2025-03-04 15:33:34,605 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-04 15:33:34,605 INFO: [cached since 5863s ago] {'pk_1': 19}
2025-03-04 15:33:34,606 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:34] "OPTIONS /tasks/available_tasks?task_type=User%20Story&exclude_task_id=386&page=1&limit=30 HTTP/1.1" 200 -
2025-03-04 15:33:34,607 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:34] "OPTIONS /tasks/available_tasks?task_type=User%20Story&exclude_task_id=386&page=1&limit=30 HTTP/1.1" 200 -
2025-03-04 15:33:34,610 INFO: BEGIN (implicit)
2025-03-04 15:33:34,611 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-04 15:33:34,625 INFO: [cached since 5863s ago] {'pk_1': 19}
2025-03-04 15:33:34,626 INFO: Entering available_tasks route...
2025-03-04 15:33:34,626 DEBUG: Query parameters: task_type=User Story, exclude_task_id=386, search_term=, project_id=None, limit=30, page=1
2025-03-04 15:33:34,633 INFO: BEGIN (implicit)
2025-03-04 15:33:34,633 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 15:33:34,633 INFO: [cached since 5885s ago] {'pk_1': 386}
2025-03-04 15:33:34,634 INFO: Entering available_tasks route...
2025-03-04 15:33:34,634 DEBUG: Query parameters: task_type=User Story, exclude_task_id=386, search_term=, project_id=None, limit=30, page=1
2025-03-04 15:33:34,635 INFO: BEGIN (implicit)
2025-03-04 15:33:34,635 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 15:33:34,635 INFO: [cached since 5885s ago] {'pk_1': 386}
2025-03-04 15:33:34,827 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-04 15:33:34,827 INFO: [cached since 5863s ago] {}
2025-03-04 15:33:34,829 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-04 15:33:34,829 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 386, 'task_type': ['User Story']}
2025-03-04 15:33:34,829 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 386, 'task_type': ['User Story']}
2025-03-04 15:33:34,830 INFO: [cached since 5863s ago] {}
2025-03-04 15:33:34,830 INFO: Validating hierarchy for Task N/A
2025-03-04 15:33:34,830 INFO: Validating hierarchy for Task N/A
2025-03-04 15:33:34,830 INFO: Determining valid parent types for task_type: User Story
2025-03-04 15:33:34,830 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 386, 'task_type': ['Epic']}
2025-03-04 15:33:35,056 INFO: Determining valid parent types for task_type: User Story
2025-03-04 15:33:35,056 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 386, 'task_type': ['Epic']}
2025-03-04 15:33:35,059 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-04 15:33:35,065 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-04 15:33:35,065 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-04 15:33:35,066 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-04 15:33:35,066 INFO: [cached since 5885s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-04 15:33:35,066 INFO: [cached since 5885s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-04 15:33:35,159 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-04 15:33:35,159 INFO: [cached since 5863s ago] {'param_1': 19}
2025-03-04 15:33:35,165 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-04 15:33:35,165 INFO: [cached since 5863s ago] {'param_1': 19}
2025-03-04 15:33:35,170 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 15:33:35,170 INFO: [cached since 5864s ago] {'param_1': 1}
2025-03-04 15:33:35,172 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 15:33:35,172 INFO: [cached since 5864s ago] {'param_1': 1}
2025-03-04 15:33:35,173 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 15:33:35,173 INFO: [cached since 5864s ago] {'param_1': 2}
2025-03-04 15:33:35,174 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 15:33:35,174 INFO: [cached since 5864s ago] {'param_1': 2}
2025-03-04 15:33:35,175 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 15:33:35,175 INFO: [cached since 5864s ago] {'param_1': 3}
2025-03-04 15:33:35,182 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 15:33:35,182 INFO: [cached since 5864s ago] {'param_1': 3}
2025-03-04 15:33:35,183 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 15:33:35,183 INFO: [cached since 5864s ago] {'param_1': 4}
2025-03-04 15:33:35,184 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 15:33:35,184 INFO: [cached since 5864s ago] {'param_1': 4}
2025-03-04 15:33:35,186 DEBUG: Tasks returned: [{'id': 327, 'name': '🏆\xa0Epic: AI-Driven Feature Planning & Estimation', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 267, 'name': 'Improvements to toggles and nested tasks', 'task_type': 'Epic', 'is_parent': False}, {'id': 325, 'name': 'Improve task list responsive grid', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okr´s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 284, 'name': 'Add type "issue/bug"', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notifications', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}]
2025-03-04 15:33:35,186 INFO: ROLLBACK
2025-03-04 15:33:35,190 DEBUG: Tasks returned: [{'id': 327, 'name': '🏆\xa0Epic: AI-Driven Feature Planning & Estimation', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 267, 'name': 'Improvements to toggles and nested tasks', 'task_type': 'Epic', 'is_parent': False}, {'id': 325, 'name': 'Improve task list responsive grid', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okr´s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 284, 'name': 'Add type "issue/bug"', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notifications', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}]
2025-03-04 15:33:35,191 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 15:33:35,192 INFO: ROLLBACK
2025-03-04 15:33:35,192 INFO: [cached since 5864s ago] {'param_1': 5}
2025-03-04 15:33:35,192 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:35] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=386&page=1&limit=30 HTTP/1.1" 200 -
2025-03-04 15:33:35,192 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:35] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=386&page=1&limit=30 HTTP/1.1" 200 -
2025-03-04 15:33:35,193 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 15:33:35,193 INFO: [cached since 5864s ago] {'param_1': 5}
2025-03-04 15:33:35,195 INFO: ROLLBACK
2025-03-04 15:33:35,205 INFO: ROLLBACK
2025-03-04 15:33:35,206 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:35] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-04 15:33:35,215 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:35] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-04 15:33:53,326 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:53] "OPTIONS /api/tasks/386/parent HTTP/1.1" 200 -
2025-03-04 15:33:53,334 INFO: BEGIN (implicit)
2025-03-04 15:33:53,337 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 15:33:53,337 INFO: [cached since 5903s ago] {'pk_1': 386}
2025-03-04 15:33:53,345 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 15:33:53,346 INFO: [cached since 5903s ago] {'pk_1': '284'}
2025-03-04 15:33:53,347 DEBUG: Validating parent_id change for Task 386: 284
2025-03-04 15:33:53,348 INFO: Task 386: Updating 'parent_id' from None to 284
2025-03-04 15:33:53,348 INFO: Checking circular reference for Task 386 with Parent ID: 284
2025-03-04 15:33:53,355 INFO: SELECT task.parent_id AS task_parent_id 
FROM task 
WHERE task.id = %(id_1)s 
 LIMIT %(param_1)s
2025-03-04 15:33:53,356 INFO: [generated in 0.00034s] {'id_1': '284', 'param_1': 1}
2025-03-04 15:33:53,356 INFO: Circular reference check passed.
2025-03-04 15:33:53,357 INFO: SELECT task.task_type AS task_task_type 
FROM task 
WHERE task.id = %(id_1)s 
 LIMIT %(param_1)s
2025-03-04 15:33:53,358 INFO: [generated in 0.00027s] {'id_1': '284', 'param_1': 1}
2025-03-04 15:33:53,358 DEBUG: Validating hierarchy: Task 386, Parent Type: Epic
2025-03-04 15:33:53,358 INFO: Hierarchy validation passed for Task 386.
2025-03-04 15:33:53,358 INFO: Validation passed for parent_id: 284
2025-03-04 15:33:53,366 INFO: UPDATE task SET parent_id=%(parent_id)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 15:33:53,366 INFO: [generated in 0.00036s] {'parent_id': '284', 'updated_at': datetime.datetime(2025, 3, 4, 14, 33, 53, 366530, tzinfo=datetime.timezone.utc), 'task_id': 386}
2025-03-04 15:33:53,386 INFO: COMMIT
2025-03-04 15:33:53,388 INFO: BEGIN (implicit)
2025-03-04 15:33:53,389 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 15:33:53,390 INFO: [generated in 0.00024s] {'pk_1': 386}
2025-03-04 15:33:53,392 INFO: ROLLBACK
2025-03-04 15:33:53,404 INFO: 127.0.0.1 - - [04/Mar/2025 15:33:53] "[35m[1mPUT /api/tasks/386/parent HTTP/1.1[0m" 500 -
2025-03-04 15:39:34,034 INFO: Entering list_tasks route...
2025-03-04 15:39:34,035 DEBUG: Filters used: {'is_archived': False}
2025-03-04 15:39:34,037 DEBUG: Applying filters: {'is_archived': False}
2025-03-04 15:39:34,048 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-04 15:39:34,049 INFO: BEGIN (implicit)
2025-03-04 15:39:34,049 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-04 15:39:34,049 INFO: [cached since 6222s ago] {'param_1': 500, 'param_2': 0}
2025-03-04 15:39:34,088 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-04 15:39:34,088 INFO: [cached since 6222s ago] {}
2025-03-04 15:39:34,090 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-04 15:39:34,090 INFO: [cached since 6222s ago] {}
2025-03-04 15:39:34,091 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-04 15:39:34,091 INFO: [cached since 6222s ago] {}
2025-03-04 15:39:34,094 DEBUG: Tasks passed to template: [{'id': 336, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:07:11.299563', 'updated_at': '2025-02-28T15:07:11.310976'}, {'id': 344, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:16.258493', 'updated_at': '2025-02-28T15:18:16.268248'}, {'id': 342, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:11.944980', 'updated_at': '2025-02-28T15:18:11.954065'}, {'id': 347, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:24:45.846396', 'updated_at': '2025-02-28T15:24:45.860885'}, {'id': 354, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:54:59.543585', 'updated_at': '2025-02-28T15:54:59.553122'}, {'id': 248, 'name': 'Implement Toggle Button', 'description': 'Add a toggle button to switch between hierarchical and flat views.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-05T12:58:14.518518', 'updated_at': '2025-02-28T00:11:48.483207'}, {'id': 350, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:32:49.928206', 'updated_at': '2025-02-28T15:32:49.935531'}, {'id': 338, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:10.122843', 'updated_at': '2025-02-28T15:18:10.128941'}, {'id': 334, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:44:06.347090', 'updated_at': '2025-02-28T14:44:06.354371'}, {'id': 352, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:51:56.533768', 'updated_at': '2025-02-28T15:51:56.563880'}, {'id': 369, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T21:17:46.272998', 'updated_at': '2025-02-28T22:17:46.285417'}, {'id': 351, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:32:58.672570', 'updated_at': '2025-02-28T15:32:58.678298'}, {'id': 341, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:11.691354', 'updated_at': '2025-02-28T15:18:11.699365'}, {'id': 329, 'name': 'Implement an API endpoint for submitting raw feature requests.', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-27T23:13:09.068616', 'updated_at': '2025-03-01T01:00:05.807248'}, {'id': 356, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T15:08:08.061166', 'updated_at': '2025-02-28T16:08:08.066215'}, {'id': 362, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:14:50.969730', 'updated_at': '2025-02-28T19:14:50.979052'}, {'id': 370, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T21:27:30.386959', 'updated_at': '2025-02-28T22:27:30.395572'}, {'id': 353, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:52:04.500938', 'updated_at': '2025-02-28T15:52:04.512331'}, {'id': 244, 'name': 'Scroll to Updated Task', 'description': 'Automatically scroll to the updated task in the list if it’s out of view.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 0, 'created_at': '2025-02-05T12:56:52.818501', 'updated_at': '2025-02-28T00:11:57.987007'}, {'id': 358, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T15:46:04.956844', 'updated_at': '2025-02-28T16:46:04.966511'}, {'id': 366, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:38:39.027061', 'updated_at': '2025-02-28T19:38:39.048248'}, {'id': 367, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:39:25.734101', 'updated_at': '2025-02-28T19:39:25.739322'}, {'id': 340, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:11.061737', 'updated_at': '2025-02-28T15:18:11.075736'}, {'id': 365, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:30:48.877580', 'updated_at': '2025-02-28T19:30:48.887060'}, {'id': 333, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:36:20.683426', 'updated_at': '2025-02-28T14:36:20.691337'}, {'id': 332, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:35:43.663809', 'updated_at': '2025-02-28T14:35:43.673337'}, {'id': 348, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:26:17.632940', 'updated_at': '2025-02-28T15:26:17.642972'}, {'id': 355, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:55:16.105634', 'updated_at': '2025-02-28T15:55:16.131837'}, {'id': 361, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T17:11:52.257703', 'updated_at': '2025-02-28T18:11:52.262071'}, {'id': 337, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:07.626569', 'updated_at': '2025-02-28T15:18:07.632643'}, {'id': 346, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:24:40.311054', 'updated_at': '2025-02-28T15:24:40.322156'}, {'id': 343, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:12.267445', 'updated_at': '2025-02-28T15:18:12.278088'}, {'id': 357, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T15:08:15.356759', 'updated_at': '2025-02-28T16:08:15.371374'}, {'id': 335, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:44:45.530624', 'updated_at': '2025-02-28T14:44:45.542212'}, {'id': 373, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T22:10:59.863170', 'updated_at': '2025-02-28T23:10:59.893542'}, {'id': 292, 'name': 'Issue: assigning contributor does not work', 'description': '<p>### **Summary of problem and solution** The issue was that assigning a contributor to a task via the /tasks//assign_contributor API endpoint resulted in a **400 Bad Request** error. Upon investigation, the following problems were identified: 1. **Missing CSRF Token:** - The request failed due to a missing CSRF token, as shown in the error message: *“Bad Request: The CSRF token is missing.”* - The frontend was not correctly including the CSRF token in the request headers. 1. **JavaScript Error (Undefined CSRF Token Variable):** - The error *“ReferenceError: csrfToken is not defined”* indicated that the CSRF token was not being retrieved properly in the JavaScript code. 1. **Incorrect Fetch Request Headers:** - The fetch request did not include the CSRF token under the correct key (X-CSRFToken). - The script attempted to send the request without properly extracting the CSRF token from the meta tag. ### **Solution** 1. **Include the CSRF Token in the JavaScript Code** The CSRF token was retrieved from the meta tag and used in the request headers: ```jsx // Retrieve CSRF token from meta tag const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\'); ``` This ensures that the CSRF token is correctly fetched and available in the JavaScript scope. 1. **Modify the Fetch Request to Include CSRF Token** The request to assign a contributor was updated to include the token: ```jsx const response = await fetch(`/tasks/${taskId}/assign_contributor`, { method: "POST", headers: { "Content-Type": "application/json", "X-CSRFToken": csrfToken // Include CSRF token }, body: JSON.stringify({ contributor_id: parseInt(contributorId, 10) }), }); ``` - **Ensures the CSRF token is sent in the request headers** so that Flask-WTF does not reject the request. 1. **Verify and Debug Network Requests** - The updated request headers were verified using **Chrome DevTools &gt; Network tab** to ensure the X-CSRFToken was included. - The error messages disappeared, and the contributor assignment request **succeeded with a 200 OK response**. --- ### **Final Outcome** 🚀 The issue was resolved, and contributors can now be assigned successfully to tasks without triggering a CSRF validation error. ### **Key Learnings from This Session** This debugging session covered several important aspects of **web development with Flask and JavaScript**, particularly related to **API requests, CSRF protection, debugging tools, and database interactions**. Here are the key takeaways: --- ### **1. CSRF Protection in API Requests** - **Issue:** The initial error was due to **a missing CSRF token** when making a `POST` request. - **Fix:** The solution was to **retrieve the CSRF token from a meta tag** in the HTML and include it in the request headers. - **Key Learning:** Flask-WTF requires CSRF tokens for form and API submissions to **prevent cross-site request forgery (CSRF) attacks**.✅ Always ensure that API requests include a valid CSRF token. --- ### **2. Debugging JavaScript Fetch Requests** - **Issue:** The JavaScript code was making a fetch request, but the variable `csrfToken` was not properly defined, causing a `ReferenceError`. - **Fix:** Declaring `csrfToken` at the beginning of the script: ```jsx const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\'); ``` - **Key Learning:**✅ JavaScript variables must be defined before they are used.✅ Use browser **developer tools (DevTools) Network tab** to inspect headers, payloads, and responses when debugging API requests. --- ### **3. Structuring Flask Routes for Task Management** - **Issue:** The `assign_contributor` route was failing due to incorrect request payload validation. - **Fix:** Improved the route’s error handling and logging: ```python @bp.route(\'//assign_contributor\', methods=[\'POST\']) def assign_contributor(task_id): try: data = request.get_json() contributor_id = int(data.get(\'contributor_id\', 0)) if not contributor_id: return jsonify({\'error\': \'Valid Contributor ID is required\'}), 400 ``` - **Key Learning:**✅ Always validate incoming data in Flask routes to prevent type errors.✅ Use `request.get_json()` properly and handle missing or incorrect data gracefully. --- ### **4. Utilizing Browser DevTools for Debugging** - **Issue:** The fetch request was failing with a `400 Bad Request`, and the browser console showed `ReferenceError: csrfToken is not defined`. - **Fix:** - Used **Network tab** to inspect the request payload and headers. - Used **Console tab** to catch JavaScript errors early. - **Key Learning:**✅ DevTools is a **critical** tool for diagnosing network request issues.✅ Always **check console errors** before assuming it\'s a backend issue. --- ### **5. Database Queries and ORM Debugging** - **Issue:** Tasks were not being updated correctly, possibly due to missing commit statements. - **Fix:** Ensured that:was executed properly. ```python task.contributor_id = contributor_id db.session.commit() ``` - **Key Learning:**✅ Always call `db.session.commit()` after making changes in SQLAlchemy.✅ Rollback transactions if an error occurs to avoid database inconsistency. --- ### **6. Handling Asynchronous JavaScript Logic** - **Issue:** The `assignContributor` function was executing before the page was fully loaded. - **Fix:** Wrapped it inside a function that ensures elements exist: ``` window.setupContributorAssignment = function () { const assignButton = $("#assign-contributor-btn"); if (!assignButton.length) { setTimeout(setupContributorAssignment, 500); // Retry in 500ms return; } ``` - **Key Learning:**✅ Use `setTimeout` to **retry event binding** when elements are dynamically loaded.✅ Always **check if elements exist before attaching event handlers**. --- ### **7. Best Practices for Flask Logging &amp; Error Handling** - **Issue:** Lack of clear logging when API calls failed. - **Fix:** Added better logging to track failures: ```python logger.info(f"Assigning contributor to task ID {task_id}") try: # Process request... except Exception as e: logger.error(f"Error assigning contributor: {e}") ``` - **Key Learning:**✅ Log **every major step** in API processing to simplify debugging.✅ Differentiate between `logger.info()`, `logger.warning()`, and `logger.error()` based on severity. --- ### **Final Takeaways** 🚀 **Understanding CSRF protection** and **properly structuring API requests** is crucial for secure web applications. 🔍 **Browser DevTools is invaluable** for diagnosing frontend issues, especially in JavaScript. 🐍 **Flask requires proper request validation, database transactions, and logging** to maintain stability. ⚡ **Asynchronous JavaScript must handle dynamic elements carefully** to avoid runtime errors. This session reinforced best practices in **frontend-backend integration, debugging, and security**, making it a great learning experience! 🚀🔥</p>', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 0, 'created_at': '2025-02-10T09:11:12.273779', 'updated_at': '2025-03-04T00:41:24.838143'}, {'id': 265, 'name': 'Smooth transition for toggles', 'description': '<p>Added new description</p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-03-01T15:23:05.271095'}, {'id': 339, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:10.856511', 'updated_at': '2025-02-28T15:18:10.860682'}, {'id': 331, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:35:35.797059', 'updated_at': '2025-02-28T14:35:35.813440'}, {'id': 345, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:53.170926', 'updated_at': '2025-02-28T15:18:53.179222'}, {'id': 327, 'name': '🏆\xa0Epic: AI-Driven Feature Planning & Estimation', 'description': '<h2><strong>Description:&nbsp;</strong></h2><p>AI assists in refining raw feature requests into</p><p>structured plans, generating PRDs, Epics, User Stories, Acceptance Criteria, and Edge Cases. AI also provides intelligent estimations based on historical data and improves accuracy over time.</p><p></p><hr><h2>## Heading</h2><p></p>', 'task_type': 'Epic', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-27T23:02:31.274292', 'updated_at': '2025-03-03T00:13:33.461344'}, {'id': 386, 'name': 'Test task', 'description': '<p>Testing tiptap editor lkjlk</p><hr><p>Write something</p><hr><p>Write something</p><hr><p></p>', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 284, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 9, 'status': 'In Progress', 'sort_order': 1, 'created_at': '2025-03-01T12:39:07.359868', 'updated_at': '2025-03-04T15:33:53.366530'}, {'id': 359, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-28T15:54:42.242569', 'updated_at': '2025-03-01T02:01:18.851236'}, {'id': 291, 'name': 'Add dropdowns in task list for changing: Assigned to, Estimate, Task Type and Status', 'description': '<p>Write Description task description...</p>', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 1, 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-03-01T22:09:13.882787'}, {'id': 245, 'name': 'Apply Dynamic Sorting and Filtering', 'description': 'Ensure the task list dynamically updates its sorting and filtering after a status change.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'In Progress', 'sort_order': 1, 'created_at': '2025-02-05T12:56:52.818501', 'updated_at': '2025-02-28T00:12:01.504825'}, {'id': 64, 'name': 'Setup project credentials for Google API', 'description': 'Generate client ID and secret from Google API Console for your application.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-03-01T02:01:02.546625'}, {'id': 250, 'name': 'Preserve User Preferences', 'description': 'Persist the user’s chosen view state between sessions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-05T12:58:14.518518', 'updated_at': '2025-02-28T00:11:48.483213'}, {'id': 360, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-28T15:54:58.904932', 'updated_at': '2025-03-01T02:01:18.851237'}, {'id': 249, 'name': 'Define View States', 'description': 'Clearly label and define the view states for hierarchical and flat sorting.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-05T12:58:14.518518', 'updated_at': '2025-02-28T00:11:48.483213'}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'description': '<p>Write your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p>', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-03-03T08:46:23.302934'}, {'id': 266, 'name': 'Highlight the nested tasks', 'description': '<p>lkjlkjlkjlkjlkjlkjWrite your task description...</p><p></p><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-03-03T17:32:52.809368'}, {'id': 67, 'name': 'Test Google OAuth flow', 'description': 'Verify the OAuth flow using test accounts and check the token exchange.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-03-01T02:01:02.546635'}, {'id': 243, 'name': 'Highlight Updated Task', 'description': 'Highlight the updated task in the UI to provide immediate visual feedback.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 2, 'created_at': '2025-02-05T12:56:52.818501', 'updated_at': '2025-02-28T00:12:01.504819'}, {'id': 326, 'name': 'Add dropdown in task list for changing: Project', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-26T22:10:15.209008', 'updated_at': '2025-03-01T02:01:12.498734'}, {'id': 295, 'name': 'Issue: drag and drop errors', 'description': '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-10T09:22:54.461413', 'updated_at': '2025-02-28T00:11:55.301307'}, {'id': 290, 'name': 'issue: error when changing task type and', 'description': 'issue: error when changing task type and parent task before saving', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-10T09:00:03.417734', 'updated_at': '2025-03-01T02:01:18.851234'}, {'id': 257, 'name': 'Update Task API Integration', 'description': "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-05T22:55:49.566819', 'updated_at': '2025-02-28T00:11:57.987011'}, {'id': 66, 'name': 'Setup OAuth scopes for Google API', 'description': 'Determine the required OAuth scopes for your application and add them to the configuration.\nedit', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-03-01T02:01:02.546634'}, {'id': 133, 'name': 'Step 4: Enhance Logging in models.py', 'description': 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nupdating the Task model in the following ways:\n\n1.\tLog Changes to parent_id:\n\t•\tLog changes to parent_id during updates, including old and new values.\n\t2.\tValidate Hierarchy with Logging:\n\t•\tLog detailed messages when validating hierarchy changes, especially for circular dependency checks.\n\nHere’s how the models.py can be updated:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy import func, cast, CheckConstraint\nfrom sqlalchemy.orm import validates\nfrom app.extensions.db import db\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\nclass Task(db.Model):\n    __tablename__ = "task"\n    \n    # Other columns...\n\n    parent_id = db.Column(\n        db.Integer, db.ForeignKey("task.id"), index=True, nullable=True\n    )\n\n    # Relationships\n    parent = db.relationship(\n        "Task", remote_side=[id], back_populates="children", lazy="select"\n    )\n    children = db.relationship(\n        "Task", back_populates="parent", lazy="select"\n    )\n\n    \n\n\n    @staticmethod\n    def _validate_no_circular_references(new_parent_id):\n        """\n        Validates that there are no circular references in the task hierarchy.\n\n        Args:\n            new_parent_id (int): The new parent ID to validate.\n\n        Raises:\n            ValueError: If a circular reference is detected.\n        """\n        visited = set()\n        current_parent_id = new_parent_id\n\n        logger.info(f"Validating circular references for parent ID: {new_parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error(\n                    f"Circular reference detected: Parent ID {current_parent_id} already visited."\n                )\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            # Fetch the next parent_id in the hierarchy\n            parent = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not parent:\n                break  # Exit if no parent is found\n            current_parent_id = parent.parent_id\n\n        logger.info("No circular reference detected.")\n\n    @validates(\'parent_id\', \'task_type\')\n    def validate_task_changes(self, key, value):\n        """\n        Validates changes to \'parent_id\' and \'task_type\'.\n        Ensures hierarchy validity and checks for circular references.\n        """\n        logger.debug(f"Validating {key} change for Task {self.id}: {value}")\n\n        if key == \'parent_id\':\n            # Log changes to parent_id\n            if self.id and value != self.parent_id:\n                logger.info(f"Task {self.id}: Updating \'parent_id\' from {self.parent_id} to {value}")\n\n            # Prevent a task from being its own parent\n            if value and value == self.id:\n                logger.error("A task cannot be its own parent.")\n                raise ValueError("A task cannot be its own parent.")\n\n            # Check for circular references\n            if value:\n                Task.check_circular_reference(self.id, value)\n\n        elif key == \'task_type\':\n            # Log changes to task_type\n            if self.id and value != self.task_type:\n                logger.info(f"Task {self.id}: Updating \'task_type\' from {self.task_type} to {value}")\n\n        # Check hierarchy rules without triggering further validation\n        if key in [\'parent_id\', \'task_type\']:\n            self._validate_hierarchy_change(key, value)\n\n        logger.info(f"Validation passed for {key}: {value}")\n        return value\n\n    def _validate_hierarchy_change(self, key, value):\n        """\n        Validates hierarchy rules for the task based on `task_type` and `parent_id`.\n        """\n        if key == \'parent_id\' and value:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=value).first()\n            if not parent_task:\n                raise ValueError("Parent task does not exist.")\n\n            logger.debug(f"Validating hierarchy: Task {self.id}, Parent Type: {parent_task.task_type}")\n            if self.task_type == "User Story" and parent_task.task_type != "Epic":\n                raise ValueError("User Stories must have an Epic as a parent.")\n            if self.task_type == "Subtask" and parent_task.task_type != "User Story":\n                raise ValueError("Subtasks must have a User Story as a parent.")\n\n        elif key == \'task_type\' and self.parent_id:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=self.parent_id).first()\n            if parent_task:\n                logger.debug(f"Validating hierarchy: Task Type: {value}, Parent Type: {parent_task.task_type}")\n                if value == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError("User Stories must have an Epic as a parent.")\n                if value == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError("Subtasks must have a User Story as a parent.")\n\n        logger.info(f"Hierarchy validation passed for Task {self.id if self.id else \'New Task\'}.")\n\n    @staticmethod\n    def check_circular_reference(task_id, parent_id):\n        """\n        Iteratively checks for circular references in the task hierarchy.\n        Prevents stack overflow on deep hierarchies.\n        """\n        visited = set()\n        current_parent_id = parent_id\n\n        logger.info(f"Checking circular reference for Task {task_id} with Parent ID: {parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error("Circular reference detected!")\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            if current_parent_id == task_id:\n                logger.error("A task cannot be its own ancestor.")\n                raise ValueError("A task cannot be its own ancestor.")\n\n            # Fetch the next parent_id in the hierarchy\n            task = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not task:\n                break\n            current_parent_id = task.parent_id\n\n        logger.info("Circular reference check passed.")\n```\nKey Enhancements:\n\t1.\tlog_and_validate_parent_id_change:\n\t•\tLogs the old and new parent_id whenever it changes.\n\t•\tEnsures no circular references are introduced.\n\t2.\t_validate_no_circular_references:\n\t•\tValidates the parent_id field to prevent circular dependencies.\n\t•\tLogs progress and raises detailed errors if violations occur.\n\t3.\tlog_and_validate_task_type_change:\n\t•\tLogs changes to task_type with the old and new values.\n\t•\tRevalidates hierarchy rules when task_type changes.\n\t4.\tDetailed Logging for Circular Reference Validation:\n\t•\t_validate_no_circular_references and check_circular_reference methods log every step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t•\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 4, 'created_at': '2025-01-15T09:44:08.340041', 'updated_at': '2025-03-01T02:01:18.851231'}, {'id': 264, 'name': 'Close all / Open all childtasks', 'description': '<p>Added new description check other tab</p><p></p><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 7, 'status': 'Not Started', 'sort_order': 4, 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-03-03T07:43:17.298288'}, {'id': 328, 'name': '🟢 User Story 1: AI-Generated Feature Refinement\xa0(8 Story Points)', 'description': 'As a\xa0product manager,\xa0I want\xa0AI to refine raw feature requests into structured PRDs, Epics, and User Stories,\xa0So that\xa0I can quickly turn ideas into actionable tasks.\n\n', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 5, 'created_at': '2025-02-27T23:09:37.421629', 'updated_at': '2025-03-03T06:26:25.726905'}, {'id': 287, 'name': 'When moving a parent item to another project make sure the subtasks are moved as well', 'description': '', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 5, 'created_at': '2025-02-10T08:48:31.986870', 'updated_at': '2025-03-01T02:01:12.498732'}, {'id': 132, 'name': 'Step 1: Update tasks_table_interactions.js', 'description': '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the map for efficient parent-child relationship lookups instead of DOM traversal.\n\n```\nexport const TaskManager = {\n    init: function (csrfToken) {\n        this.csrfToken = csrfToken;\n        this.initTaskParentMap(); // Initialize the map\n        this.initDragAndDrop(); // Initialize drag-and-drop functionality\n    },\n\n    // Initialize a global map for task relationships\n    taskParentMap: new Map(),\n\n    // Build the taskParentMap from the DOM\n    initTaskParentMap: function () {\n        console.log("Initializing Task Parent Map...");\n        const rows = document.querySelectorAll("tr[data-task-id]");\n\n        rows.forEach((row) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = parseInt(row.dataset.parentId, 10) || null;\n            this.taskParentMap.set(taskId, parentId);\n        });\n\n        console.log("Task Parent Map initialized:", Array.from(this.taskParentMap.entries()));\n    },\n\n    // Update the map dynamically after drag-and-drop\n    updateTaskParentMap: function (taskId, parentId) {\n        console.log(`Updating Task Parent Map: Task ${taskId} -> Parent ${parentId}`);\n        this.taskParentMap.set(taskId, parentId);\n    },\n\n    initDragAndDrop: function () {\n        if (window.isDragAndDropInitialized) {\n            console.log("Drag-and-drop is already initialized.");\n            return;\n        }\n\n        console.log("Initializing drag-and-drop within TaskManager...");\n\n        const tableBody = document.querySelector("tbody");\n        if (!tableBody) {\n            console.warn("Task table body not found for drag-and-drop initialization");\n            return;\n        }\n\n        // Initialize Sortable.js for drag-and-drop functionality\n        Sortable.create(tableBody, {\n            handle: ".task-row", // Only draggable via `.task-row` elements\n            animation: 150, // Smooth animation\n            filter: ".task-open-link", // Prevent dragging on task links\n            preventOnFilter: true, // Prevent drag if filtered element is clicked\n            onEnd: async (event) => {\n                try {\n                    console.log("Drag-and-drop operation started...");\n                    const rows = Array.from(event.from.querySelectorAll(".task-row"));\n                    const reorderedTasks = [];\n\n                    rows.forEach((row, index) => {\n                        const taskId = parseInt(row.dataset.taskId, 10);\n                        let parentId = null;\n\n                        // Get the parent ID from the map or fallback to the dataset\n                        if (row.classList.contains("subtask-row")) {\n                            const parentRow = row.previousElementSibling;\n                            parentId = parentRow\n                                ? parseInt(parentRow.dataset.taskId, 10)\n                                : this.taskParentMap.get(taskId) || null;\n                        }\n\n                        // Update the taskParentMap dynamically\n                        this.updateTaskParentMap(taskId, parentId);\n\n                        reorderedTasks.push({\n                            id: taskId,\n                            sort_order: index + 1,\n                            parent_id: parentId,\n                        });\n                    });\n\n                    console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n                    console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n                    // Send the payload to the backend\n                    const response = await fetch("/tasks/reorder_subtasks", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                            "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n                        },\n                        body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n                    });\n\n                    if (!response.ok) {\n                        const errorData = await response.json();\n                        console.error("Error reordering tasks:", errorData);\n                        alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n                        return;\n                    }\n\n                    const data = await response.json();\n                    console.log("Task reordering successful:", data);\n\n                } catch (error) {\n                    console.error("Error during drag-and-drop operation:", error);\n                    alert("An unexpected error occurred while reordering tasks.");\n                }\n            },\n        });\n\n        window.isDragAndDropInitialized = true;\n        console.log("Drag-and-drop initialized successfully.");\n    },\n};\n```\n\nKey Updates:\n\t1.\tPrecomputed Map (taskParentMap):\n\t•\tThe initTaskParentMap function initializes the map by iterating over DOM elements and mapping each task’s ID to its parent ID.\n\t•\tThe updateTaskParentMap dynamically updates the map when tasks are reordered.\n\t2.\tEfficient Parent Lookup:\n\t•\tThe parentId is derived from the precomputed map rather than DOM traversal.\n\t3.\tBackend Payload:\n\t•\tA structured payload (reorderedTasks) is sent to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t•\tCSRF protection is ensured by passing the token to the request headers.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'sort_order': 5, 'created_at': '2025-01-15T09:44:08.338301', 'updated_at': '2025-03-01T02:01:18.851229'}, {'id': 134, 'name': 'Step 2: Update the Backend in routes.py', 'description': 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\nPlan for step 2:\n\t1.\tVerify the payload structure:\n\t•\tEnsure that the payload includes all necessary fields (id, sort_order, parent_id) for each task.\n\t•\tValidate that the parent-child relationships in the precomputed map (taskParentMap) are reflected correctly in the payload.\n\t2.\tSubmit the payload to the backend:\n\t•\tEnhance the fetch request in the onEnd function of initDragAndDrop to log detailed submission data.\n\t•\tConfirm the payload integrity in the browser console before submission.\n\t3.\tUpdate backend logging:\n\t•\tAdd logging to /reorder_subtasks in routes.py to confirm receipt of the correct payload and process parent-child updates.\n\t•\tLog before and after database updates for better debugging.\n\n-----\nUpdated tasks_table_interactions.js\n\nReplace this section:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    let parentId = null;\n```\nWith:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    const parentId = this.taskParentMap.get(taskId) || null;\n```\nThe this.taskParentMap provides a precomputed and dynamic mapping of taskId to parentId. By using this map, we avoid relying on DOM traversal logic (row.closest or row.previousElementSibling) during drag-and-drop operations, which can sometimes be unreliable or cumbersome.\n\nFull Revised onEnd section:\n```\nonEnd: async (event) => {\n    try {\n        console.log("Drag-and-drop operation started...");\n        const rows = Array.from(event.from.querySelectorAll(".task-row"));\n        const reorderedTasks = [];\n\n        rows.forEach((row, index) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = this.taskParentMap.get(taskId) || null;\n\n            // Update the taskParentMap dynamically\n            this.updateTaskParentMap(taskId, parentId);\n\n            reorderedTasks.push({\n                id: taskId,\n                sort_order: index + 1,\n                parent_id: parentId,\n            });\n        });\n\n        console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n        console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n        // Send the payload to the backend\n        const response = await fetch("/tasks/reorder_subtasks", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n            },\n            body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error("Error reordering tasks:", errorData);\n            alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n            return;\n        }\n\n        const data = await response.json();\n        console.log("Task reordering successful:", data);\n\n    } catch (error) {\n        console.error("Error during drag-and-drop operation:", error);\n        alert("An unexpected error occurred while reordering tasks.");\n    }\n}\n```\n---------------------------------\nEnsure updates include:\n\t•\tBetter Logging: Adding logs for key events such as database changes and validation results.\n\t•\tInput Validation: Ensure all required fields (id, sort_order, parent_id) exist in the payload.\n\t•\tPost-Commit Validation: Confirm database updates after the commit.\n\t•\tImproved Error Handling: Include specific error messages and consistent rollback mechanisms.\n\nBelow is the revised reorder_subtasks route with descriptive comments for each section:\n```\n@bp.route("/reorder_subtasks", methods=["POST"])\ndef reorder_subtasks():\n    """\n    Reorder subtasks globally or reassign them to a different parent.\n\n    Steps:\n    - Parse and validate input from the frontend.\n    - Update parent-child relationships and sort order in the database.\n    - Commit changes and return a success response.\n    - Handle errors gracefully and provide detailed logs for debugging.\n    """\n    logger.info("Entering reorder_subtasks route...")\n    logger.info(f"Received payload for reordering tasks: {request.json}")\n\n    try:\n        # Step 1: Parse input\n        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered\n        ordered_tasks = request.json.get("ordered_tasks", [])\n\n        logger.debug(f"Parsed parent_id: {parent_id}")\n        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")\n\n        # Step 2: Validate input\n        if not isinstance(ordered_tasks, list) or not all(\n            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task\n            for task in ordered_tasks\n        ):\n            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")\n            return jsonify({\n                "error": "Invalid input format for \'ordered_tasks\'. Each task must include \'id\', \'sort_order\', and \'parent_id\'."\n            }), 400\n\n        # Step 3: Validate parent task (if applicable)\n        if parent_id is not None:\n            parent_task = Task.query.get(parent_id)\n            if not parent_task:\n                logger.error(f"Parent task with ID {parent_id} not found.")\n                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400\n\n        logger.info("Input validation passed. Proceeding with task updates...")\n\n        # Step 4: Process updates for each subtask\n        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation\n\n        for task_data in ordered_tasks:\n            subtask_id = task_data["id"]\n            sort_order = task_data["sort_order"]\n            new_parent_id = task_data["parent_id"]\n\n            # Fetch the subtask from the database\n            subtask = Task.query.get(subtask_id)\n            if not subtask:\n                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")\n                continue\n\n            # Log and update parent_id if it changes\n            if new_parent_id is not None and new_parent_id != subtask.parent_id:\n                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")\n                subtask.parent_id = new_parent_id\n\n            # Update sort order\n            subtask.sort_order = sort_order\n            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")\n\n            # Add to the list of updated subtasks for validation\n            updated_subtasks.append(subtask)\n\n        # Step 5: Commit changes to the database\n        try:\n            db.session.commit()\n            logger.info(f"Subtasks reordered successfully: {[task[\'id\'] for task in ordered_tasks]}")\n        except Exception as e:\n            logger.error(f"Error committing changes to the database: {str(e)}")\n            db.session.rollback()\n            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500\n\n        # Step 6: Post-commit validation\n        for subtask in updated_subtasks:\n            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")\n            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")\n\n        # Step 7: Return success response\n        return jsonify({\n            "success": True,\n            "message": "Subtasks reordered successfully.",\n            "updated_subtasks": [subtask.id for subtask in updated_subtasks]\n        }), 200\n\n    except Exception as e:\n        # Step 8: Handle unexpected errors\n        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)\n        db.session.rollback()\n        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500\n```\nKey Changes and Descriptive Comments\n\t1.\tInput Parsing:\n\t•\tExtracts parent_id and ordered_tasks from the request payload.\n\t•\tLogs the parsed values for debugging.\n\t2.\tInput Validation:\n\t•\tEnsures ordered_tasks is a list of dictionaries with the required keys.\n\t•\tValidates parent_id if provided, ensuring the parent task exists in the database.\n\t3.\tUpdate Processing:\n\t•\tIterates through ordered_tasks, updating each task’s parent_id and sort_order.\n\t•\tLogs changes for each task.\n\t4.\tDatabase Commit:\n\t•\tCommits all updates in a single transaction.\n\t•\tLogs success or rolls back changes in case of an error.\n\t5.\tPost-Commit Validation:\n\t•\tVerifies that the parent_id and sort_order changes were successfully saved to the database.\n\t6.\tError Handling:\n\t•\tCaptures and logs exceptions during processing or committing.\n\t•\tProvides meaningful error messages to the frontend.\n\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'sort_order': 6, 'created_at': '2025-01-15T09:46:29.348853', 'updated_at': '2025-03-01T02:01:18.851232'}, {'id': 286, 'name': 'Implement abels/tags', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 6, 'created_at': '2025-02-10T08:46:23.985620', 'updated_at': '2025-03-01T02:01:12.498730'}, {'id': 296, 'name': 'issue: contributor is lost after updating task', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 7, 'created_at': '2025-02-10T09:26:43.881947', 'updated_at': '2025-02-28T00:11:55.301308'}, {'id': 131, 'name': 'Step 5: Update utils.py', 'description': 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nChanges to Make:\n\t1.\tEnhance Task Filtering:\n\t•\tEnsure the filters handle parent-child relationships explicitly.\n\t•\tAdd options to include or exclude subtasks in queries.\n\t2.\tUtility Function for Debugging Parent-Child Relationships:\n\t•\tProvide a function to generate a map or list of parent-child relationships for debugging purposes.\n\t3.\tValidation Functions:\n\t•\tAdd a utility function to validate parent-child relationships and ensure no circular dependencies.\n\nUpdated utils.py Code:\n```\nimport logging\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import joinedload\nfrom app.extensions.db import db\nfrom app.tasks.models import Task\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\n\nclass TaskService:\n    @staticmethod\n    def filter_tasks(filters=None, include_subtasks=True, page=None, per_page=None):\n        """\n        Dynamically filters tasks with an option to include or exclude subtasks.\n\n        Args:\n            filters (dict): Filtering criteria.\n            include_subtasks (bool): Whether to include subtasks in the query.\n            page (int, optional): Page number for pagination.\n            per_page (int, optional): Items per page for pagination.\n\n        Returns:\n            Query or Pagination: A SQLAlchemy query object or paginated results.\n        """\n        query = Task.query.options(\n            db.joinedload(Task.project).joinedload(Project.contributors),\n            db.joinedload(Task.contributor),\n            db.joinedload(Task.children),\n        ).order_by(Task.sort_order)\n\n        if filters:\n            logger.debug(f"Applying filters: {filters}")\n\n            # Apply standard filters\n            if "is_archived" in filters:\n                query = query.filter(Task.is_archived == filters["is_archived"])\n            if "project_id" in filters:\n                query = query.filter(Task.project_id == filters["project_id"])\n            if "task_type" in filters:\n                if isinstance(filters["task_type"], list):\n                    query = query.filter(Task.task_type.in_(filters["task_type"]))\n                else:\n                    query = query.filter(Task.task_type == filters["task_type"])\n            if "completion_status" in filters:\n                completion_map = {"completed": True, "in_progress": False}\n                if filters["completion_status"] in completion_map:\n                    query = query.filter(Task.completed == completion_map[filters["completion_status"]])\n\n            # Optionally exclude subtasks\n            if not include_subtasks:\n                query = query.filter(Task.task_type != "Subtask")\n\n        logger.debug(f"Generated query: {query}")\n\n        # Pagination\n        if page and per_page:\n            return query.paginate(page=page, per_page=per_page, error_out=False)\n        return query\n\n    @staticmethod\n    def debug_parent_child_relationships(project_id=None):\n        """\n        Generates a debug map of parent-child relationships for all tasks.\n\n        Args:\n            project_id (int, optional): Restrict to tasks from a specific project.\n\n        Returns:\n            dict: A dictionary mapping parent IDs to their child task IDs.\n        """\n        query = Task.query\n        if project_id:\n            query = query.filter(Task.project_id == project_id)\n\n        tasks = query.options(\n            db.load_only(Task.id, Task.parent_id)\n        ).all()\n\n        relationship_map = {}\n        for task in tasks:\n            if task.parent_id not in relationship_map:\n                relationship_map[task.parent_id] = []\n            relationship_map[task.parent_id].append(task.id)\n\n        logger.debug(f"Parent-Child Relationship Map: {relationship_map}")\n        return relationship_map\n\n    @staticmethod\n    def validate_parent_child_relationships():\n        """\n        Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.\n\n        Raises:\n            ValueError: If invalid relationships are detected.\n        """\n        tasks = Task.query.options(db.joinedload(Task.parent)).all()\n\n        for task in tasks:\n            if task.parent_id:\n                parent_task = task.parent\n                if not parent_task:\n                    raise ValueError(f"Task {task.id} has an invalid parent ID {task.parent_id}.")\n\n                # Validate hierarchy rules\n                if task.task_type == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError(f"User Story {task.id} must have an Epic as its parent.")\n                if task.task_type == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError(f"Subtask {task.id} must have a User Story as its parent.")\n\n        logger.info("All parent-child relationships are valid.")\n\n    @staticmethod\n    def get_all_task_ids_with_parents():\n        """\n        Returns a flat list of tasks with their parent IDs for debugging.\n\n        Returns:\n            list: A list of tuples (task_id, parent_id).\n        """\n        tasks = Task.query.with_entities(Task.id, Task.parent_id).all()\n        logger.debug(f"Task IDs with Parent IDs: {tasks}")\n        return tasks\n```\n\n\nExplanation of Changes:\n\t1.\tfilter_tasks Enhancements:\n\t•\tAdded include_subtasks parameter to optionally exclude subtasks from the query.\n\t2.\tdebug_parent_child_relationships:\n\t•\tCreates a parent-child relationship map for debugging purposes.\n\t3.\tvalidate_parent_child_relationships:\n\t•\tIterates through all tasks to validate parent-child hierarchy and ensures no invalid relationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t•\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 7, 'created_at': '2025-01-15T09:41:28.091824', 'updated_at': '2025-03-01T02:01:18.851223'}, {'id': 135, 'name': 'Step 3: Update list.html', 'description': 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already includes everything needed. No required changes.\n\nHere´s the relevant section of list.html:\n\n```\n<tr id="task-{{ task.id }}"\n                class="task-row {% if task.task_type == \'Subtask\' %}subtask-row{% elif task.task_type == \'User Story\' %}user-story-row{% elif task.task_type == \'Epic\' %}epic-row{% endif %}"\n                style="background-color: \n                {% if task.task_type == \'Subtask\' %}\n                    rgba(200, 230, 255, 0.5); /* Light blue for Subtask */\n                {% elif task.task_type == \'User Story\' %}\n                    rgba(255, 255, 200, 0.5); /* Light yellow for User Story */\n                {% elif task.task_type == \'Epic\' %}\n                    rgba(255, 200, 200, 0.5); /* Light red for Epic */\n                {% else %}\n                    rgba(240, 240, 240, 1); /* Default light gray */\n                {% endif %};"\n                data-task-id="{{ task.id }}"\n                data-parent-id="{{ task.parent_id or \'\' }}"\n                data-level="{{ depth }}">\n                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>\n                <td>\n                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}\n                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}" aria-label="Toggle details for task {{ task.name }}">\n                        <i class="bi bi-chevron-right"></i>\n                    </button>\n                    {% endif %}\n                </td>\n                <td class="fw-medium fs-6 \n                {% if task.task_type == \'Epic\' %}\n                    epic-cell\n                {% elif task.task_type == \'User Story\' %}\n                    user-story-cell\n                {% elif task.task_type == \'Subtask\' %}\n                    subtask-cell\n                {% endif %}" \n                style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">\n                <span class="bi fs-6\n                {% if task.task_type == \'Epic\' %}\n                    bi-circle-fill\n                {% elif task.task_type == \'User Story\' %}\n                    bi-circle-half\n                {% elif task.task_type == \'Subtask\' %}\n                    bi-circle\n                {% endif %}">\n                </span>\n                {{ task.name }}\n                <small class="text-muted fw-light">\n                    (Parent-ID: {{ task.parent_id or \'None\' }})\n                </small>\n                <!-- Open Link -->\n                <a href="#" class="task-open-link" data-task-id="{{ task.id }}">\n                    <i class="bi bi-arrows-angle-expand" style="font-size: 0.8rem; color: white;"></i>\n                    Open\n                </a>\n            </td>\n                <td class="fw-light fs-6">\n                    <small class>\n                    LAC-{{ task.id }}\n                    </small>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light text-bg-secondary">\n                        {{ task.project if task.project else "Unknown Project" }}\n                    </span>\n                </td>\n                <td class="fs-6" data-contributor-column>{{ task.assigned_to if task.assigned_to else "Unassigned" }}</td>\n                <td class="fs-6">{{ task.story_points }}</td>\n                <td class="fs-6">\n                    <span class="badge rounded-pill fw-light text-bg-light">\n                        {{ task.task_type }}\n                    </span>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light {% if task.completed %}text-bg-success{% else %}text-bg-warning{% endif %}">\n                        {{ "Completed" if task.completed else "In Progress" }}\n                    </span>\n                </td>\n                <td>\n                    <!-- Delete Icon -->\n                    <button class="btn btn-dark btn-sm delete-task-btn" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .2rem; --bs-btn-font-size: .75rem;" data-task-id="{{ task.id }}" aria-label="Deletes task {{ task.id }}">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n            </tr>\n            {% for child in tasks if child.parent_id == task.id %}\n                {{ render_task(child, tasks, depth + 1) }}\n            {% endfor %}\n            {% endmacro %}\n            \n            <!-- Render top-level tasks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 8, 'created_at': '2025-01-15T09:46:29.349784', 'updated_at': '2025-03-01T02:01:18.851233'}, {'id': 289, 'name': 'issue: parent task is lost when updating task', 'description': '- Summary of the problem and solution\n    \n    **Problem: Parent Task Dropdown Was Not Being Set on Modal Open**\n    \n    The issue was that when opening a task modal, the **parent task dropdown** was not pre-populated with the correct parent task. However, interacting with the dropdown (e.g., clicking on it) would suddenly trigger it to be set correctly. This meant that the dropdown initialization was likely delayed or missing a step in the modal lifecycle.\n    \n    **Debugging Steps and Observations**\n    \n    1. **Task Details Were Fetched Correctly** ✅\n    - The task details, including parent_id, were being fetched from the API successfully.\n    1. **Parent Dropdown Initialization Issues** ❌\n    - The initializeParentDropdown() function was being called, but the dropdown was sometimes **not fully ready** when we tried to set the selected parent task.\n    1. **Clicking the Dropdown Triggered the Parent to Be Set** 🤔\n    - This hinted that the dropdown was not fully ready when setParentDropdown(task.parent_id) was initially called.\n    \n    **Final Solution**\n    \n    1. **Ensuring Dropdown Readiness Before Setting the Parent Task**\n    - We added explicit **delays and checks** to confirm that the dropdown was fully initialized before attempting to set the parent task.\n    \n    Specifically, we:\n    \n    - **Waited for the dropdown to appear in the DOM** using observeParentDropdown().\n    - **Initialized the dropdown** with initializeParentDropdown().\n    - **Waited explicitly for the dropdown to be fully ready** using waitForParentDropdownReady().\n    - **Added a final delay of 200ms** before calling setParentDropdown() to ensure stability.\n    1. **Modifying openTaskModal to Handle Parent Dropdown Setup**\n    - We ensured that initializeParentDropdown() was called **after fetching task details** and before setting the parent task.\n    1. **Confirming the Fix** 🎯\n    - After these fixes, the parent dropdown was **immediately populated** upon opening the modal, without requiring user interaction.\n    \n    **Key Learnings**\n    \n    ✅ **Dropdowns in modals need careful timing** – They might not be ready when you expect them to be.\n    \n    ✅ **Waiting for DOM updates is crucial** – Observing the element ensures it actually exists before interacting with it.\n    \n    ✅ **Explicit delays can prevent race conditions** – A small delay can sometimes resolve timing issues in UI interactions.\n    \n    **Final Result**\n    \n    ✅ The modal now **correctly loads and pre-selects the parent task** without extra clicks! 🎉🚀', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 8, 'created_at': '2025-02-10T08:56:25.273984', 'updated_at': '2025-02-28T00:11:55.301302'}, {'id': 269, 'name': 'Fix styling for sweetalert', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'sort_order': 10, 'created_at': '2025-02-08T15:54:56.717846', 'updated_at': '2025-02-28T00:11:55.301281'}, {'id': 247, 'name': 'Add Temporary Badge', 'description': 'Add a temporary badge or visual indicator to the updated task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 241, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 11, 'created_at': '2025-02-05T12:57:37.151479', 'updated_at': '2025-02-27T08:43:14.054398'}, {'id': 293, 'name': 'Click on title should copy the task title and id to clipboard', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 11, 'created_at': '2025-02-10T09:16:33.508209', 'updated_at': '2025-02-28T00:11:55.301304'}, {'id': 294, 'name': 'Issue: task table filters not working', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 12, 'created_at': '2025-02-10T09:19:21.022598', 'updated_at': '2025-02-28T00:11:55.301306'}, {'id': 240, 'name': 'Update Task Workflow', 'description': 'As a user, I want to update the status of a task so that it reflects the changes in the UI dynamically without reloading the page.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'In Progress', 'sort_order': 14, 'created_at': '2025-02-05T12:54:55.061344', 'updated_at': '2025-02-28T00:11:55.301273'}, {'id': 242, 'name': 'User Control Over Views', 'description': 'As a user, I want to toggle between hierarchical and flat views so that I can switch sorting preferences based on my workflow.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 15, 'created_at': '2025-02-05T12:55:50.108011', 'updated_at': '2025-02-28T00:11:55.301275'}, {'id': 130, 'name': 'Implement the Map of Task Relationships solution for drag-and-drop', 'description': 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 16, 'created_at': '2025-01-15T09:41:28.093022', 'updated_at': '2025-02-28T00:11:55.301271'}, {'id': 246, 'name': 'Toast Notification', 'description': 'Display a toast notification confirming the task status update.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 241, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 16, 'created_at': '2025-02-05T12:57:37.151479', 'updated_at': '2025-02-27T08:43:14.054398'}, {'id': 283, 'name': 'Fix issue with updating task title', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 18, 'created_at': '2025-02-10T08:41:58.769700', 'updated_at': '2025-02-28T00:11:55.301295'}, {'id': 278, 'name': 'Implement search feature for tasks list', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 5, 'project': 'Project Delta', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 4, 'status': 'Not Started', 'sort_order': 19, 'created_at': '2025-02-10T07:36:03.369833', 'updated_at': '2025-02-28T00:11:55.301289'}, {'id': 62, 'name': 'Add OAuth integration for Google Login', 'description': 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 20, 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-02-28T00:11:55.301255'}, {'id': 279, 'name': 'github integration', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 21, 'created_at': '2025-02-10T07:36:38.238202', 'updated_at': '2025-02-28T00:11:55.301290'}, {'id': 65, 'name': 'Implement backend endpoints for Google OAuth', 'description': 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 22, 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-02-28T00:11:55.301260'}, {'id': 241, 'name': 'Provide User Feedback', 'description': 'As a user, I want to receive immediate feedback after updating a task’s status so that I know the update was successful.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 24, 'created_at': '2025-02-05T12:55:19.826398', 'updated_at': '2025-02-28T00:11:55.301274'}, {'id': 41, 'name': 'Implement Searchable Dropdown', 'description': 'As a user, I want a searchable dropdown for parent task assignment.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Completed', 'sort_order': 25, 'created_at': '2025-01-03T09:14:28.285904', 'updated_at': '2025-02-28T00:11:55.301181'}, {'id': 85, 'name': 'Assign multiple contributors to a task', 'description': 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 27, 'created_at': '2025-01-07T19:32:39.466022', 'updated_at': '2025-02-28T00:11:55.301266'}, {'id': 136, 'name': 'Page scroll should stay in position when reloading', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 28, 'created_at': '2025-01-16T18:21:50.187247', 'updated_at': '2025-02-28T00:11:55.301272'}, {'id': 267, 'name': 'Improvements to toggles and nested tasks', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 29, 'created_at': '2025-02-08T02:29:12.464594', 'updated_at': '2025-03-03T14:17:12.065528'}, {'id': 325, 'name': 'Improve task list responsive grid', 'description': '## 🔍 **How Leading Task Management Apps Handle Column Widths**\n\n### 1️⃣ **JIRA (Atlassian)**\n\n🔹 **Dynamic Resizing** (CSS Grid + JavaScript)\n\n- Uses `display: grid` for task tables.\n- Columns are resizable with a drag handle.\n- `grid-template-columns: auto 1fr auto;` for flexibility.\n- **Approach**: Fixed + flexible widths with an adaptive UI.\n\n---\n\n### 2️⃣ **Monday.com**\n\n🔹 **Flexbox-Based Table**\n\n- Uses `display: flex;` instead of `grid` for more control.\n- Columns use **`flex-grow`** to expand dynamically.\n- Drag handles allow users to resize columns.\n- **Approach**: **JavaScript-based column width management** to allow user customization.\n\n---\n\n### 3️⃣ **Asana**\n\n🔹 **Hybrid (Flexbox + JavaScript)**\n\n- Uses **CSS flexbox** for flexible layout.\n- Users can resize columns by dragging.\n- `min-width: 120px;` ensures usability.\n- **Approach**: A combination of `flex` and `min-width` to ensure usability on smaller screens.\n\n---\n\n### 4️⃣ **Linear**\n\n🔹 **CSS Grid with `fr` Units**\n\n- Uses a modern **CSS Grid** approach:\n    \n    ```css\n    grid-template-columns: auto 1fr auto;\n    ```\n    \n- Dynamically adjusts the width of columns **based on content**.\n- Uses `grid-template-columns: minmax(150px, 2fr) 3fr 1fr;` for controlled column expansion.\n- **Approach**: Minimalist UI with focus on speed and responsiveness.\n\n---\n\n### 5️⃣ **Shortcut**\n\n🔹 **Similar to Jira (Resizable Columns)**\n\n- Uses **CSS Grid + JavaScript-based resizing**.\n- Stores user preferences (column order, width) in **local storage**.\n- **Approach**: Persistent column sizes per user, allowing for a **customizable layout**.\n\n---\n\n## ✅ **What’s the Best Approach for Our App?**\n\n### 🎯 **Option 1: CSS Grid (Recommended)**\n\n```css\ngrid-template-columns: 1fr 2fr 1fr;\n```\n\nPros:\n✔ **Modern**\n\n✔ **Auto-resizes based on content**\n\n✔ **Easy to manage**\n\n---\n\n### 🎯 **Option 2: Flexbox (For More Control)**\n\n```css\ndisplay: flex;\nflex-grow: 1;\nmin-width: 120px;\n```\n\nPros:\n✔ **More control over column shrinking/growing**\n\n✔ **Easier to make resizable**\n\n✔ **Ideal for draggable column resizing**\n\n---\n\n### 🎯 **Option 3: JavaScript-Powered Resizing (Advanced)**\n\n- Uses `grid-template-columns` but **lets users drag & resize**.\n- Stores **column widths in local storage**.\n- Uses `ResizeObserver` to listen for changes.\n\nPros:\n✔ **User-friendly (lets users resize columns)**\n\n✔ **Persistent user preferences**\n\n✔ **Great for complex task management apps**\n\n---\n\n## 🔥 **What’s the Best Choice for Us?**\n\n- If you want **simple auto-adjusting columns**, go with **CSS Grid** (`fr` units).\n- If you need **manual resizing**, use **Flexbox + JavaScript**.\n- If you want **fully customizable layouts**, use **JavaScript-powered resizing** like Jira or Monday.\n\nWould you like me to **implement resizable columns** with JavaScript? 🚀', 'task_type': 'Epic', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'sort_order': 30, 'created_at': '2025-02-25T00:02:51.810711', 'updated_at': '2025-03-03T14:17:02.484796'}, {'id': 274, 'name': 'Add support for goals, initiatives, okr´s', 'description': 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n\nölkasdölkk', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P1', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 31, 'created_at': '2025-02-10T00:46:27.204912', 'updated_at': '2025-02-28T00:11:55.301284'}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 32, 'created_at': '2025-02-10T08:41:17.786154', 'updated_at': '2025-03-03T14:16:41.747486'}, {'id': 63, 'name': 'Add OAuth integration for GitHub Login', 'description': 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'sort_order': 32, 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-02-27T08:43:14.054354'}, {'id': 276, 'name': 'Add support for priority', 'description': 'ffasdlkjlkj\nljkkjlkj', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P0', 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 33, 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-28T00:11:55.301286'}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'description': 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- Custom status\n-- Custom status\n- In Progress\n-- Custom status\n-- Custom status\n-- Custom status\n- Completed\n-- Custom status\n-- Custom status\n\n2. How can we track a task through different stages and save the sequence of events or stages the task has gone through?\nI´m thinking it could be good for mapping out processes, identifying bottlenecks and provide valuable insights while improving and streamlining workflows.\n- Stages\n- Contacts taken\n- Respons time \n- Time to action after responses\n- Dependencies\n\nNeed to be able to record every action related to this action.\nCommunication integrations\n- Slack\n- Email\n- Text messages\n- Phonecalls\n- Calendar events, meetings\n- Zoom, Google meet, Teams etc..\n\n\n2. Set custom statuses per project (can use tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 34, 'created_at': '2025-02-10T07:16:03.352588', 'updated_at': '2025-03-03T14:16:31.129766'}, {'id': 68, 'name': 'Register application in GitHub Developer Console', 'description': 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 35, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-02-27T08:43:14.054358'}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'description': 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be lost"\nOR\n\nIs it possible, and is it desireable to keep parent child relationships across projects?\nSo that a parent can be in one project but the child tasks can be in different projects?\n\nLets say \nParent epic is \n"Internationalisation"\nChild user stories are\n- Timezones\n- Language\n- Currency\n- Day, Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 35, 'created_at': '2025-02-10T08:54:36.297869', 'updated_at': '2025-03-03T14:16:24.364985'}, {'id': 284, 'name': 'Add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 36, 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-28T00:11:55.301296'}, {'id': 281, 'name': 'Add a page for roadmap', 'description': 'Add some sort of high level plan that aims to keep PM/PO´s on track and not get lost into the details of an overwhelming large backlog', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 37, 'created_at': '2025-02-10T08:27:01.218606', 'updated_at': '2025-02-28T00:11:55.301293'}, {'id': 69, 'name': 'Handle callback from GitHub', 'description': 'Implement the callback endpoint to process the authorization code from GitHub.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 38, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-02-26T21:53:17.041822'}, {'id': 273, 'name': 'Disable parent task selector in epics', 'description': 'and add text, Epic can´t have parent tasks', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 38, 'created_at': '2025-02-10T00:45:20.740910', 'updated_at': '2025-02-28T00:11:55.301283'}, {'id': 280, 'name': 'logging (task and project history)', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 39, 'created_at': '2025-02-10T07:37:44.435112', 'updated_at': '2025-02-28T00:11:55.301291'}, {'id': 275, 'name': 'Add support for sprints/cycles', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 40, 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-28T00:11:55.301285'}, {'id': 100, 'name': '1.1 User Registration', 'description': '<blockquote><p>As a user, I want to register with a username, email, and password so that I can create an account and access the system. </p></blockquote><p>**Acceptance Criteria:** </p><ul><li><p>• User can input valid username, email, and password.</p></li><li><p>• Username and email must be unique. </p></li><li><p>• Errors are displayed for invalid inputs or duplicate accounts. </p></li><li><p>• Passwords must meet complexity requirements and be securely stored. </p></li><li><p>• Successful registration redirects users to a login page.</p></li></ul><hr><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 41, 'created_at': '2025-01-07T19:59:09.044667', 'updated_at': '2025-03-03T14:20:10.801828'}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'description': 'kkkkkkkjjjjj\nlkajdlökjsdfölkjsdfölkjdf', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 41, 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-28T00:11:55.301297'}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'description': 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitHub Login involves integrating OAuth 2.0, which both services support. The complexity depends on your app’s existing setup, frameworks, and experience with third-party authentication. Below is a breakdown:\n\nKey Steps for Implementing Google or GitHub Login\n\t1.\tSet Up OAuth Credentials:\n\t•\tRegister your application in the Google Cloud Console or GitHub Developer Settings.\n\t•\tObtain the client ID and client secret.\n\t2.\tInstall Required Libraries:\n\t•\tUse a library for OAuth (e.g., flask-oauthlib, python-social-auth, or authlib).\n\t•\tPopular frameworks like Flask and Django already have robust integrations for OAuth providers.\n\t3.\tBackend Configuration:\n\t•\tImplement an endpoint to handle the OAuth flow (/auth/login/google or /auth/login/github).\n\t•\tConfigure your app to send users to Google or GitHub’s authentication page.\n\t•\tHandle the OAuth callback to exchange the authorization code for an access token.\n\t•\tVerify the token and fetch user information (e.g., email, name).\n\t4.\tLink OAuth to User Registration:\n\t•\tOn successful login, create or retrieve a user in your database.\n\t•\tStore the user’s details like email, OAuth provider ID, and access token.\n\t5.\tFrontend Integration (if applicable):\n\t•\tAdd “Login with Google” or “Login with GitHub” buttons.\n\t•\tRedirect to your backend’s OAuth endpoint when clicked.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 42, 'created_at': '2025-01-07T12:15:54.291625', 'updated_at': '2025-02-28T00:11:55.301262'}, {'id': 107, 'name': '1.1.1 Database Changes for User Registration', 'description': '<p>1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.</p><p></p><hr><p>Adding text</p><pre><code>CREATE TABLE public.users ( id SERIAL PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL, created_at TIMESTAMP DEFAULT NOW(), updated_at TIMESTAMP DEFAULT NOW() );</code></pre><p></p>', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 42, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-03-03T20:49:45.725711'}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'description': 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 18, 'status': 'Not Started', 'sort_order': 43, 'created_at': '2025-01-07T19:53:50.085064', 'updated_at': '2025-02-28T00:11:55.301267'}, {'id': 61, 'name': 'Parent task assignment', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'sort_order': 44, 'created_at': '2025-01-04T22:31:45.205815', 'updated_at': '2025-02-28T00:11:55.301224'}, {'id': 108, 'name': '1.1.2 Backend API for Registration', 'description': '•\tCreate an endpoint POST /api/register:\n•\tValidate input fields.\n•\tHash the password using bcrypt or argon2.\n•\tInsert the user into the users table.\n•\tReturn success/failure responses.\ndddhfff\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 44, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-27T08:43:14.054375'}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t•\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t•\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 45, 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-02-28T00:11:55.301265'}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'description': 'PRD: Define roles and permissions to restrict access. Roles include admin, developer, and viewer. Implement middleware for access control checks.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 46, 'created_at': '2025-01-07T19:54:09.204981', 'updated_at': '2025-02-28T00:11:55.301268'}, {'id': 112, 'name': '1.2.2 Frontend Login Page', 'description': 'Develop a frontend form for user login with email and password inputs.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 47, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054377'}, {'id': 83, 'name': 'Notifications', 'description': 'Implement sending notifications to selected people triggered by events.\nCustomizing messages:\nPossibility to adjust how detailed the information should be and what level of technical difficulty the language can contain. Integration to LMS that tailors messages to different target groups and then sends the appropriate version to the appropriate target group.\n\n\n\n- Ready for Release\n   - Send documentation of new feature to support and customer success team\n      - Add technical documentation as file in documentation library.\n      - User documentation\n      - Create and send feature description to Sales & Marketing dep.\n      - Create and send feature description and estimation of added value for company and customer to Investors.\n   - Create and publish release notes online and in inline message system.\n\nRead more: https://www.notion.so/lacunamedia/Create-and-send-messages-triggered-by-events-174979257fc08022b18bc76d3b28a4b3?pvs=4', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 47, 'created_at': '2025-01-07T16:10:54.030609', 'updated_at': '2025-02-28T00:11:55.301263'}, {'id': 99, 'name': 'Enhance User Account Management', 'description': 'PRD: Provide additional account management features for users and admins. Includes profile management, password reset functionality, and audit logging.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'sort_order': 48, 'created_at': '2025-01-07T19:54:20.692949', 'updated_at': '2025-02-28T00:11:55.301269'}, {'id': 109, 'name': '1.1.3 Create Frontend Registration Page', 'description': 'Develop a frontend form to collect user registration details.\n•\tAdd a form for username, email, and password inputs.\n•\tUse client-side validation (e.g., email format).\n•\tSend a POST request to /api/register.\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 49, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-27T08:43:14.054375'}, {'id': 110, 'name': '1.1.4 Unit Tests for Registration', 'description': 'Write unit tests for:\n\n•\tValid registration.\n•\tDuplicate username/email scenarios.\n•\tInvalid input handling.\nff', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 50, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-27T08:43:14.054376'}, {'id': 101, 'name': '1.2 User Login', 'description': 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n•\tUsers can log in with a valid email and password.\n•\tErrors are displayed for invalid credentials.\n•\tSuccessful login stores a session or JWT token.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 52, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054370'}, {'id': 111, 'name': '1.2.1 Backend API for Login', 'description': 'Create POST /api/login endpoint to handle user login.\njjsjj', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 54, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054377'}, {'id': 113, 'name': '1.2.3 Session Management', 'description': 'Implement secure session handling using cookies or JWT.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 55, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054378'}, {'id': 114, 'name': '1.2.4 Unit Tests for Login', 'description': 'Write tests for successful and failed login attempts.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 56, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054379'}, {'id': 106, 'name': 'Password Reset', 'description': 'As a user, I want to reset my password securely using email.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'sort_order': 57, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054373'}, {'id': 128, 'name': 'Frontend Password Reset Page', 'description': 'Develop a page for users to enter a new password using a valid token.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 58, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054388'}, {'id': 129, 'name': 'Testing Password Reset', 'description': 'Write tests for email delivery, token validation, and password updates.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 59, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054389'}, {'id': 102, 'name': 'Logout', 'description': 'As a user, I want to log out so that I can end my session securely.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 60, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054371'}, {'id': 117, 'name': 'Tests for Logout', 'description': 'Verify session invalidation and redirection to the login page.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 61, 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-27T08:43:14.054381'}, {'id': 381, 'name': 'Delete this', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 61, 'created_at': '2025-02-28T23:48:05.992788', 'updated_at': '2025-02-28T23:48:38.311759'}, {'id': 116, 'name': 'Frontend Logout Button', 'description': 'Add a logout button to the UI and handle session clearing.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 62, 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-27T08:43:14.054380'}, {'id': 115, 'name': 'Backend API for Logout', 'description': 'Create POST /api/logout endpoint to invalidate user sessions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 63, 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-27T08:43:14.054379'}, {'id': 45, 'name': 'Display Default Value in Dropdown', 'description': 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 64, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054343'}, {'id': 50, 'name': 'Retrieve Current Parent Task', 'description': 'Retrieve the current parent task’s ID and name from the backend.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Completed', 'sort_order': 65, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054346'}, {'id': 51, 'name': 'Set Default Value', 'description': 'Set the default value in the dropdown based on the retrieved data.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 45, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 1, 'status': 'Not Started', 'sort_order': 66, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054347'}, {'id': 46, 'name': 'Search for Parent Tasks', 'description': 'Allow users to search for tasks dynamically in the dropdown by typing.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'sort_order': 67, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054344'}, {'id': 54, 'name': 'Test Partial Matching', 'description': 'Ensure the search results update in real-time as the user types.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 68, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054349'}, {'id': 47, 'name': 'Handle Large Datasets Efficiently', 'description': 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'sort_order': 69, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054344'}, {'id': 56, 'name': 'Paginate API Responses', 'description': 'Implement server-side filtering and pagination for large datasets.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 70, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054350'}, {'id': 55, 'name': 'Enable Lazy Loading', 'description': 'Enable lazy loading or virtualization in Virtual Select.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 71, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054350'}, {'id': 48, 'name': 'Select and Deselect Parent Tasks', 'description': 'Allow users to select a parent task or deselect by choosing "None."', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 72, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054345'}, {'id': 57, 'name': 'Ensure None Option Availability', 'description': 'Add “None” as a selectable option and ensure it stays at the top of the list.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 73, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054351'}, {'id': 58, 'name': 'Handle Selection Events', 'description': 'Implement event listeners to update the form’s state when the selection changes.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 74, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054352'}, {'id': 49, 'name': 'Integrate Dropdown with Task Form', 'description': 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 75, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054346'}, {'id': 383, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 76, 'created_at': '2025-03-01T01:00:27.095399', 'updated_at': '2025-03-01T02:00:27.103602'}, {'id': 376, 'name': 'Subtask test', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 76, 'created_at': '2025-02-28T23:01:44.247988', 'updated_at': '2025-02-28T23:02:00.075567'}, {'id': 59, 'name': 'Bind Dropdown to Form Field', 'description': 'Bind the dropdown to the form’s parent task field.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'In Progress', 'sort_order': 76, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054352'}, {'id': 60, 'name': 'Test Form Submission', 'description': 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 77, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054353'}, {'id': 52, 'name': 'Add Search Box to Dropdown', 'description': 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 78, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054348'}, {'id': 53, 'name': 'Implement AJAX Search', 'description': 'Implement AJAX-based search to fetch tasks dynamically from the backend.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 79, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054348'}, {'id': 42, 'name': 'Choose Dropdown Library', 'description': 'Research and decide on the dropdown library to use.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 80, 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-27T08:43:14.054341'}, {'id': 378, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 80, 'created_at': '2025-02-28T23:17:32.404713', 'updated_at': '2025-03-01T00:17:32.410920'}, {'id': 43, 'name': 'Integrate Dropdown Library', 'description': 'Integrate the chosen dropdown library into the project.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Completed', 'sort_order': 81, 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-27T08:43:14.054342'}, {'id': 90, 'name': 'Update frontend to display and manage multiple contributors', 'description': 'Allow users to view, add, or remove multiple contributors via the UI.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 82, 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-27T08:43:14.054364'}, {'id': 377, 'name': 'Taskade', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 82, 'created_at': '2025-02-28T23:02:24.453543', 'updated_at': '2025-03-03T18:07:16.276655'}, {'id': 88, 'name': 'Update database schema for multiple contributors', 'description': 'Modify the task table to support many-to-many relationships for contributors.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 83, 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-27T08:43:14.054362'}, {'id': 89, 'name': 'Develop backend API for adding contributors to a task', 'description': 'Create endpoints to add, update, and remove contributors for a task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 84, 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-27T08:43:14.054363'}, {'id': 86, 'name': 'Allow designation of task owner', 'description': 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 85, 'created_at': '2025-01-07T19:33:29.330562', 'updated_at': '2025-02-27T08:43:14.054361'}, {'id': 375, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 85, 'created_at': '2025-02-28T22:48:35.594251', 'updated_at': '2025-02-28T23:48:35.676455'}, {'id': 93, 'name': 'Update frontend to manage task ownership', 'description': 'Allow users to assign or update the task owner via the UI.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 86, 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-27T08:43:14.054365'}, {'id': 384, 'name': 'Changed title', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 86, 'created_at': '2025-03-01T12:06:32.303897', 'updated_at': '2025-03-03T18:06:15.844478'}, {'id': 91, 'name': 'Update database schema for task ownership', 'description': 'Add a column or relationship to assign a single owner per task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 87, 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-27T08:43:14.054364'}, {'id': 92, 'name': 'Develop backend API for assigning task owner', 'description': 'Create endpoints to assign or update the owner of a task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 88, 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-27T08:43:14.054365'}, {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 89, 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-02-27T08:43:14.054362'}, {'id': 96, 'name': 'Allow admin users to create and customize contributor roles via frontend', 'description': 'Provide UI functionality for admins to manage contributor roles dynamically.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 90, 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-27T08:43:14.054367'}, {'id': 94, 'name': 'Add database support for contributor roles', 'description': 'Introduce a roles table and link contributors to specific roles for tasks.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 91, 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-27T08:43:14.054366'}, {'id': 95, 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 92, 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-27T08:43:14.054367'}, {'id': 127, 'name': 'Backend API for Password Reset', 'description': 'Create endpoints to handle password reset requests and token validation.\ndfdf\n\nasdasd', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 93, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054387'}, {'id': 126, 'name': 'Email Configuration for Password Reset', 'description': 'Configure email service to send password reset links.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 94, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054387'}, {'id': 104, 'name': 'Middleware for Role Enforcement', 'description': 'As a system, I want to enforce role-based access to specific routes.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 98, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 95, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054372'}, {'id': 122, 'name': 'Testing Role Enforcement', 'description': 'Write tests to ensure proper access control based on roles.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 96, 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-02-27T08:43:14.054384'}, {'id': 121, 'name': 'Develop Role Enforcement Middleware', 'description': 'Implement middleware to check user roles for access control.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 104, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 97, 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-02-27T08:43:14.054383'}, {'id': 105, 'name': 'Profile Management', 'description': 'As a user, I want to update my profile (username, email, password).', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 99, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 98, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054373'}, {'id': 123, 'name': 'Backend API for Profile Management', 'description': 'Create PATCH /api/profile endpoint to update user details.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 99, 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-02-27T08:43:14.054385'}, {'id': 125, 'name': 'Testing Profile Updates', 'description': 'Write tests for profile update functionality.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 100, 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-02-27T08:43:14.054386'}, {'id': 124, 'name': 'Frontend Profile Page', 'description': 'Develop a profile page for editing user details.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 101, 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-02-27T08:43:14.054385'}, {'id': 103, 'name': 'Role Assignment', 'description': 'As an administrator, I want to assign roles to users so that I can control access to certain features.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 98, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 102, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054372'}, {'id': 120, 'name': 'Testing Role Assignment', 'description': 'Write tests to validate role changes and restrictions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 103, 'created_at': '2025-01-07T20:40:58.383687', 'updated_at': '2025-02-27T08:43:14.054383'}, {'id': 119, 'name': 'Backend API for Role Assignment', 'description': 'Create POST /api/assign-role endpoint to manage user roles.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 104, 'created_at': '2025-01-07T20:40:58.383687', 'updated_at': '2025-02-27T08:43:14.054382'}, {'id': 118, 'name': 'Database Changes for Role Assignment', 'description': 'Add a role column to the users table.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 105, 'created_at': '2025-01-07T20:40:58.383687', 'updated_at': '2025-02-27T08:43:14.054381'}, {'id': 44, 'name': 'Test Performance with 500 Tasks', 'description': 'Ensure dropdown performance remains smooth with 500 tasks.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 107, 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-26T21:53:17.041813'}]
2025-03-04 15:39:34,126 DEBUG: Task types: ['all', 'Subtask', 'Epic', 'User Story']
2025-03-04 15:39:34,126 DEBUG: Projects: [<Project Project Alpha (ID: 1)>, <Project Project Beta (ID: 2)>, <Project Project Gamma (ID: 3)>, <Project Project Theta (ID: 4)>, <Project Project Delta (ID: 5)>, <Project PMS - Feature Requests (ID: 7)>, <Project PMS - Backlog (ID: 6)>, <Project Miscellaneous (ID: 19)>]
2025-03-04 15:39:34,127 DEBUG: Tasks response: [{'id': 336, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:07:11.299563', 'updated_at': '2025-02-28T15:07:11.310976'}, {'id': 344, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:16.258493', 'updated_at': '2025-02-28T15:18:16.268248'}, {'id': 342, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:11.944980', 'updated_at': '2025-02-28T15:18:11.954065'}, {'id': 347, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:24:45.846396', 'updated_at': '2025-02-28T15:24:45.860885'}, {'id': 354, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:54:59.543585', 'updated_at': '2025-02-28T15:54:59.553122'}, {'id': 248, 'name': 'Implement Toggle Button', 'description': 'Add a toggle button to switch between hierarchical and flat views.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-05T12:58:14.518518', 'updated_at': '2025-02-28T00:11:48.483207'}, {'id': 350, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:32:49.928206', 'updated_at': '2025-02-28T15:32:49.935531'}, {'id': 338, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:10.122843', 'updated_at': '2025-02-28T15:18:10.128941'}, {'id': 334, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:44:06.347090', 'updated_at': '2025-02-28T14:44:06.354371'}, {'id': 352, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:51:56.533768', 'updated_at': '2025-02-28T15:51:56.563880'}, {'id': 369, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T21:17:46.272998', 'updated_at': '2025-02-28T22:17:46.285417'}, {'id': 351, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:32:58.672570', 'updated_at': '2025-02-28T15:32:58.678298'}, {'id': 341, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:11.691354', 'updated_at': '2025-02-28T15:18:11.699365'}, {'id': 329, 'name': 'Implement an API endpoint for submitting raw feature requests.', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-27T23:13:09.068616', 'updated_at': '2025-03-01T01:00:05.807248'}, {'id': 356, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T15:08:08.061166', 'updated_at': '2025-02-28T16:08:08.066215'}, {'id': 362, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:14:50.969730', 'updated_at': '2025-02-28T19:14:50.979052'}, {'id': 370, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T21:27:30.386959', 'updated_at': '2025-02-28T22:27:30.395572'}, {'id': 353, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:52:04.500938', 'updated_at': '2025-02-28T15:52:04.512331'}, {'id': 244, 'name': 'Scroll to Updated Task', 'description': 'Automatically scroll to the updated task in the list if it’s out of view.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 0, 'created_at': '2025-02-05T12:56:52.818501', 'updated_at': '2025-02-28T00:11:57.987007'}, {'id': 358, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T15:46:04.956844', 'updated_at': '2025-02-28T16:46:04.966511'}, {'id': 366, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:38:39.027061', 'updated_at': '2025-02-28T19:38:39.048248'}, {'id': 367, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:39:25.734101', 'updated_at': '2025-02-28T19:39:25.739322'}, {'id': 340, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:11.061737', 'updated_at': '2025-02-28T15:18:11.075736'}, {'id': 365, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:30:48.877580', 'updated_at': '2025-02-28T19:30:48.887060'}, {'id': 333, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:36:20.683426', 'updated_at': '2025-02-28T14:36:20.691337'}, {'id': 332, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:35:43.663809', 'updated_at': '2025-02-28T14:35:43.673337'}, {'id': 348, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:26:17.632940', 'updated_at': '2025-02-28T15:26:17.642972'}, {'id': 355, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:55:16.105634', 'updated_at': '2025-02-28T15:55:16.131837'}, {'id': 361, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T17:11:52.257703', 'updated_at': '2025-02-28T18:11:52.262071'}, {'id': 337, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:07.626569', 'updated_at': '2025-02-28T15:18:07.632643'}, {'id': 346, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:24:40.311054', 'updated_at': '2025-02-28T15:24:40.322156'}, {'id': 343, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:12.267445', 'updated_at': '2025-02-28T15:18:12.278088'}, {'id': 357, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T15:08:15.356759', 'updated_at': '2025-02-28T16:08:15.371374'}, {'id': 335, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:44:45.530624', 'updated_at': '2025-02-28T14:44:45.542212'}, {'id': 373, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T22:10:59.863170', 'updated_at': '2025-02-28T23:10:59.893542'}, {'id': 292, 'name': 'Issue: assigning contributor does not work', 'description': '<p>### **Summary of problem and solution** The issue was that assigning a contributor to a task via the /tasks//assign_contributor API endpoint resulted in a **400 Bad Request** error. Upon investigation, the following problems were identified: 1. **Missing CSRF Token:** - The request failed due to a missing CSRF token, as shown in the error message: *“Bad Request: The CSRF token is missing.”* - The frontend was not correctly including the CSRF token in the request headers. 1. **JavaScript Error (Undefined CSRF Token Variable):** - The error *“ReferenceError: csrfToken is not defined”* indicated that the CSRF token was not being retrieved properly in the JavaScript code. 1. **Incorrect Fetch Request Headers:** - The fetch request did not include the CSRF token under the correct key (X-CSRFToken). - The script attempted to send the request without properly extracting the CSRF token from the meta tag. ### **Solution** 1. **Include the CSRF Token in the JavaScript Code** The CSRF token was retrieved from the meta tag and used in the request headers: ```jsx // Retrieve CSRF token from meta tag const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\'); ``` This ensures that the CSRF token is correctly fetched and available in the JavaScript scope. 1. **Modify the Fetch Request to Include CSRF Token** The request to assign a contributor was updated to include the token: ```jsx const response = await fetch(`/tasks/${taskId}/assign_contributor`, { method: "POST", headers: { "Content-Type": "application/json", "X-CSRFToken": csrfToken // Include CSRF token }, body: JSON.stringify({ contributor_id: parseInt(contributorId, 10) }), }); ``` - **Ensures the CSRF token is sent in the request headers** so that Flask-WTF does not reject the request. 1. **Verify and Debug Network Requests** - The updated request headers were verified using **Chrome DevTools &gt; Network tab** to ensure the X-CSRFToken was included. - The error messages disappeared, and the contributor assignment request **succeeded with a 200 OK response**. --- ### **Final Outcome** 🚀 The issue was resolved, and contributors can now be assigned successfully to tasks without triggering a CSRF validation error. ### **Key Learnings from This Session** This debugging session covered several important aspects of **web development with Flask and JavaScript**, particularly related to **API requests, CSRF protection, debugging tools, and database interactions**. Here are the key takeaways: --- ### **1. CSRF Protection in API Requests** - **Issue:** The initial error was due to **a missing CSRF token** when making a `POST` request. - **Fix:** The solution was to **retrieve the CSRF token from a meta tag** in the HTML and include it in the request headers. - **Key Learning:** Flask-WTF requires CSRF tokens for form and API submissions to **prevent cross-site request forgery (CSRF) attacks**.✅ Always ensure that API requests include a valid CSRF token. --- ### **2. Debugging JavaScript Fetch Requests** - **Issue:** The JavaScript code was making a fetch request, but the variable `csrfToken` was not properly defined, causing a `ReferenceError`. - **Fix:** Declaring `csrfToken` at the beginning of the script: ```jsx const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\'); ``` - **Key Learning:**✅ JavaScript variables must be defined before they are used.✅ Use browser **developer tools (DevTools) Network tab** to inspect headers, payloads, and responses when debugging API requests. --- ### **3. Structuring Flask Routes for Task Management** - **Issue:** The `assign_contributor` route was failing due to incorrect request payload validation. - **Fix:** Improved the route’s error handling and logging: ```python @bp.route(\'//assign_contributor\', methods=[\'POST\']) def assign_contributor(task_id): try: data = request.get_json() contributor_id = int(data.get(\'contributor_id\', 0)) if not contributor_id: return jsonify({\'error\': \'Valid Contributor ID is required\'}), 400 ``` - **Key Learning:**✅ Always validate incoming data in Flask routes to prevent type errors.✅ Use `request.get_json()` properly and handle missing or incorrect data gracefully. --- ### **4. Utilizing Browser DevTools for Debugging** - **Issue:** The fetch request was failing with a `400 Bad Request`, and the browser console showed `ReferenceError: csrfToken is not defined`. - **Fix:** - Used **Network tab** to inspect the request payload and headers. - Used **Console tab** to catch JavaScript errors early. - **Key Learning:**✅ DevTools is a **critical** tool for diagnosing network request issues.✅ Always **check console errors** before assuming it\'s a backend issue. --- ### **5. Database Queries and ORM Debugging** - **Issue:** Tasks were not being updated correctly, possibly due to missing commit statements. - **Fix:** Ensured that:was executed properly. ```python task.contributor_id = contributor_id db.session.commit() ``` - **Key Learning:**✅ Always call `db.session.commit()` after making changes in SQLAlchemy.✅ Rollback transactions if an error occurs to avoid database inconsistency. --- ### **6. Handling Asynchronous JavaScript Logic** - **Issue:** The `assignContributor` function was executing before the page was fully loaded. - **Fix:** Wrapped it inside a function that ensures elements exist: ``` window.setupContributorAssignment = function () { const assignButton = $("#assign-contributor-btn"); if (!assignButton.length) { setTimeout(setupContributorAssignment, 500); // Retry in 500ms return; } ``` - **Key Learning:**✅ Use `setTimeout` to **retry event binding** when elements are dynamically loaded.✅ Always **check if elements exist before attaching event handlers**. --- ### **7. Best Practices for Flask Logging &amp; Error Handling** - **Issue:** Lack of clear logging when API calls failed. - **Fix:** Added better logging to track failures: ```python logger.info(f"Assigning contributor to task ID {task_id}") try: # Process request... except Exception as e: logger.error(f"Error assigning contributor: {e}") ``` - **Key Learning:**✅ Log **every major step** in API processing to simplify debugging.✅ Differentiate between `logger.info()`, `logger.warning()`, and `logger.error()` based on severity. --- ### **Final Takeaways** 🚀 **Understanding CSRF protection** and **properly structuring API requests** is crucial for secure web applications. 🔍 **Browser DevTools is invaluable** for diagnosing frontend issues, especially in JavaScript. 🐍 **Flask requires proper request validation, database transactions, and logging** to maintain stability. ⚡ **Asynchronous JavaScript must handle dynamic elements carefully** to avoid runtime errors. This session reinforced best practices in **frontend-backend integration, debugging, and security**, making it a great learning experience! 🚀🔥</p>', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 0, 'created_at': '2025-02-10T09:11:12.273779', 'updated_at': '2025-03-04T00:41:24.838143'}, {'id': 265, 'name': 'Smooth transition for toggles', 'description': '<p>Added new description</p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-03-01T15:23:05.271095'}, {'id': 339, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:10.856511', 'updated_at': '2025-02-28T15:18:10.860682'}, {'id': 331, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:35:35.797059', 'updated_at': '2025-02-28T14:35:35.813440'}, {'id': 345, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:53.170926', 'updated_at': '2025-02-28T15:18:53.179222'}, {'id': 327, 'name': '🏆\xa0Epic: AI-Driven Feature Planning & Estimation', 'description': '<h2><strong>Description:&nbsp;</strong></h2><p>AI assists in refining raw feature requests into</p><p>structured plans, generating PRDs, Epics, User Stories, Acceptance Criteria, and Edge Cases. AI also provides intelligent estimations based on historical data and improves accuracy over time.</p><p></p><hr><h2>## Heading</h2><p></p>', 'task_type': 'Epic', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-27T23:02:31.274292', 'updated_at': '2025-03-03T00:13:33.461344'}, {'id': 386, 'name': 'Test task', 'description': '<p>Testing tiptap editor lkjlk</p><hr><p>Write something</p><hr><p>Write something</p><hr><p></p>', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 284, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 9, 'status': 'In Progress', 'sort_order': 1, 'created_at': '2025-03-01T12:39:07.359868', 'updated_at': '2025-03-04T15:33:53.366530'}, {'id': 359, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-28T15:54:42.242569', 'updated_at': '2025-03-01T02:01:18.851236'}, {'id': 291, 'name': 'Add dropdowns in task list for changing: Assigned to, Estimate, Task Type and Status', 'description': '<p>Write Description task description...</p>', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 1, 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-03-01T22:09:13.882787'}, {'id': 245, 'name': 'Apply Dynamic Sorting and Filtering', 'description': 'Ensure the task list dynamically updates its sorting and filtering after a status change.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'In Progress', 'sort_order': 1, 'created_at': '2025-02-05T12:56:52.818501', 'updated_at': '2025-02-28T00:12:01.504825'}, {'id': 64, 'name': 'Setup project credentials for Google API', 'description': 'Generate client ID and secret from Google API Console for your application.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-03-01T02:01:02.546625'}, {'id': 250, 'name': 'Preserve User Preferences', 'description': 'Persist the user’s chosen view state between sessions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-05T12:58:14.518518', 'updated_at': '2025-02-28T00:11:48.483213'}, {'id': 360, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-28T15:54:58.904932', 'updated_at': '2025-03-01T02:01:18.851237'}, {'id': 249, 'name': 'Define View States', 'description': 'Clearly label and define the view states for hierarchical and flat sorting.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-05T12:58:14.518518', 'updated_at': '2025-02-28T00:11:48.483213'}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'description': '<p>Write your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p>', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-03-03T08:46:23.302934'}, {'id': 266, 'name': 'Highlight the nested tasks', 'description': '<p>lkjlkjlkjlkjlkjlkjWrite your task description...</p><p></p><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-03-03T17:32:52.809368'}, {'id': 67, 'name': 'Test Google OAuth flow', 'description': 'Verify the OAuth flow using test accounts and check the token exchange.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-03-01T02:01:02.546635'}, {'id': 243, 'name': 'Highlight Updated Task', 'description': 'Highlight the updated task in the UI to provide immediate visual feedback.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 2, 'created_at': '2025-02-05T12:56:52.818501', 'updated_at': '2025-02-28T00:12:01.504819'}, {'id': 326, 'name': 'Add dropdown in task list for changing: Project', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-26T22:10:15.209008', 'updated_at': '2025-03-01T02:01:12.498734'}, {'id': 295, 'name': 'Issue: drag and drop errors', 'description': '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-10T09:22:54.461413', 'updated_at': '2025-02-28T00:11:55.301307'}, {'id': 290, 'name': 'issue: error when changing task type and', 'description': 'issue: error when changing task type and parent task before saving', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-10T09:00:03.417734', 'updated_at': '2025-03-01T02:01:18.851234'}, {'id': 257, 'name': 'Update Task API Integration', 'description': "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-05T22:55:49.566819', 'updated_at': '2025-02-28T00:11:57.987011'}, {'id': 66, 'name': 'Setup OAuth scopes for Google API', 'description': 'Determine the required OAuth scopes for your application and add them to the configuration.\nedit', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-03-01T02:01:02.546634'}, {'id': 133, 'name': 'Step 4: Enhance Logging in models.py', 'description': 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nupdating the Task model in the following ways:\n\n1.\tLog Changes to parent_id:\n\t•\tLog changes to parent_id during updates, including old and new values.\n\t2.\tValidate Hierarchy with Logging:\n\t•\tLog detailed messages when validating hierarchy changes, especially for circular dependency checks.\n\nHere’s how the models.py can be updated:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy import func, cast, CheckConstraint\nfrom sqlalchemy.orm import validates\nfrom app.extensions.db import db\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\nclass Task(db.Model):\n    __tablename__ = "task"\n    \n    # Other columns...\n\n    parent_id = db.Column(\n        db.Integer, db.ForeignKey("task.id"), index=True, nullable=True\n    )\n\n    # Relationships\n    parent = db.relationship(\n        "Task", remote_side=[id], back_populates="children", lazy="select"\n    )\n    children = db.relationship(\n        "Task", back_populates="parent", lazy="select"\n    )\n\n    \n\n\n    @staticmethod\n    def _validate_no_circular_references(new_parent_id):\n        """\n        Validates that there are no circular references in the task hierarchy.\n\n        Args:\n            new_parent_id (int): The new parent ID to validate.\n\n        Raises:\n            ValueError: If a circular reference is detected.\n        """\n        visited = set()\n        current_parent_id = new_parent_id\n\n        logger.info(f"Validating circular references for parent ID: {new_parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error(\n                    f"Circular reference detected: Parent ID {current_parent_id} already visited."\n                )\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            # Fetch the next parent_id in the hierarchy\n            parent = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not parent:\n                break  # Exit if no parent is found\n            current_parent_id = parent.parent_id\n\n        logger.info("No circular reference detected.")\n\n    @validates(\'parent_id\', \'task_type\')\n    def validate_task_changes(self, key, value):\n        """\n        Validates changes to \'parent_id\' and \'task_type\'.\n        Ensures hierarchy validity and checks for circular references.\n        """\n        logger.debug(f"Validating {key} change for Task {self.id}: {value}")\n\n        if key == \'parent_id\':\n            # Log changes to parent_id\n            if self.id and value != self.parent_id:\n                logger.info(f"Task {self.id}: Updating \'parent_id\' from {self.parent_id} to {value}")\n\n            # Prevent a task from being its own parent\n            if value and value == self.id:\n                logger.error("A task cannot be its own parent.")\n                raise ValueError("A task cannot be its own parent.")\n\n            # Check for circular references\n            if value:\n                Task.check_circular_reference(self.id, value)\n\n        elif key == \'task_type\':\n            # Log changes to task_type\n            if self.id and value != self.task_type:\n                logger.info(f"Task {self.id}: Updating \'task_type\' from {self.task_type} to {value}")\n\n        # Check hierarchy rules without triggering further validation\n        if key in [\'parent_id\', \'task_type\']:\n            self._validate_hierarchy_change(key, value)\n\n        logger.info(f"Validation passed for {key}: {value}")\n        return value\n\n    def _validate_hierarchy_change(self, key, value):\n        """\n        Validates hierarchy rules for the task based on `task_type` and `parent_id`.\n        """\n        if key == \'parent_id\' and value:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=value).first()\n            if not parent_task:\n                raise ValueError("Parent task does not exist.")\n\n            logger.debug(f"Validating hierarchy: Task {self.id}, Parent Type: {parent_task.task_type}")\n            if self.task_type == "User Story" and parent_task.task_type != "Epic":\n                raise ValueError("User Stories must have an Epic as a parent.")\n            if self.task_type == "Subtask" and parent_task.task_type != "User Story":\n                raise ValueError("Subtasks must have a User Story as a parent.")\n\n        elif key == \'task_type\' and self.parent_id:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=self.parent_id).first()\n            if parent_task:\n                logger.debug(f"Validating hierarchy: Task Type: {value}, Parent Type: {parent_task.task_type}")\n                if value == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError("User Stories must have an Epic as a parent.")\n                if value == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError("Subtasks must have a User Story as a parent.")\n\n        logger.info(f"Hierarchy validation passed for Task {self.id if self.id else \'New Task\'}.")\n\n    @staticmethod\n    def check_circular_reference(task_id, parent_id):\n        """\n        Iteratively checks for circular references in the task hierarchy.\n        Prevents stack overflow on deep hierarchies.\n        """\n        visited = set()\n        current_parent_id = parent_id\n\n        logger.info(f"Checking circular reference for Task {task_id} with Parent ID: {parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error("Circular reference detected!")\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            if current_parent_id == task_id:\n                logger.error("A task cannot be its own ancestor.")\n                raise ValueError("A task cannot be its own ancestor.")\n\n            # Fetch the next parent_id in the hierarchy\n            task = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not task:\n                break\n            current_parent_id = task.parent_id\n\n        logger.info("Circular reference check passed.")\n```\nKey Enhancements:\n\t1.\tlog_and_validate_parent_id_change:\n\t•\tLogs the old and new parent_id whenever it changes.\n\t•\tEnsures no circular references are introduced.\n\t2.\t_validate_no_circular_references:\n\t•\tValidates the parent_id field to prevent circular dependencies.\n\t•\tLogs progress and raises detailed errors if violations occur.\n\t3.\tlog_and_validate_task_type_change:\n\t•\tLogs changes to task_type with the old and new values.\n\t•\tRevalidates hierarchy rules when task_type changes.\n\t4.\tDetailed Logging for Circular Reference Validation:\n\t•\t_validate_no_circular_references and check_circular_reference methods log every step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t•\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 4, 'created_at': '2025-01-15T09:44:08.340041', 'updated_at': '2025-03-01T02:01:18.851231'}, {'id': 264, 'name': 'Close all / Open all childtasks', 'description': '<p>Added new description check other tab</p><p></p><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 7, 'status': 'Not Started', 'sort_order': 4, 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-03-03T07:43:17.298288'}, {'id': 328, 'name': '🟢 User Story 1: AI-Generated Feature Refinement\xa0(8 Story Points)', 'description': 'As a\xa0product manager,\xa0I want\xa0AI to refine raw feature requests into structured PRDs, Epics, and User Stories,\xa0So that\xa0I can quickly turn ideas into actionable tasks.\n\n', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 5, 'created_at': '2025-02-27T23:09:37.421629', 'updated_at': '2025-03-03T06:26:25.726905'}, {'id': 287, 'name': 'When moving a parent item to another project make sure the subtasks are moved as well', 'description': '', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 5, 'created_at': '2025-02-10T08:48:31.986870', 'updated_at': '2025-03-01T02:01:12.498732'}, {'id': 132, 'name': 'Step 1: Update tasks_table_interactions.js', 'description': '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the map for efficient parent-child relationship lookups instead of DOM traversal.\n\n```\nexport const TaskManager = {\n    init: function (csrfToken) {\n        this.csrfToken = csrfToken;\n        this.initTaskParentMap(); // Initialize the map\n        this.initDragAndDrop(); // Initialize drag-and-drop functionality\n    },\n\n    // Initialize a global map for task relationships\n    taskParentMap: new Map(),\n\n    // Build the taskParentMap from the DOM\n    initTaskParentMap: function () {\n        console.log("Initializing Task Parent Map...");\n        const rows = document.querySelectorAll("tr[data-task-id]");\n\n        rows.forEach((row) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = parseInt(row.dataset.parentId, 10) || null;\n            this.taskParentMap.set(taskId, parentId);\n        });\n\n        console.log("Task Parent Map initialized:", Array.from(this.taskParentMap.entries()));\n    },\n\n    // Update the map dynamically after drag-and-drop\n    updateTaskParentMap: function (taskId, parentId) {\n        console.log(`Updating Task Parent Map: Task ${taskId} -> Parent ${parentId}`);\n        this.taskParentMap.set(taskId, parentId);\n    },\n\n    initDragAndDrop: function () {\n        if (window.isDragAndDropInitialized) {\n            console.log("Drag-and-drop is already initialized.");\n            return;\n        }\n\n        console.log("Initializing drag-and-drop within TaskManager...");\n\n        const tableBody = document.querySelector("tbody");\n        if (!tableBody) {\n            console.warn("Task table body not found for drag-and-drop initialization");\n            return;\n        }\n\n        // Initialize Sortable.js for drag-and-drop functionality\n        Sortable.create(tableBody, {\n            handle: ".task-row", // Only draggable via `.task-row` elements\n            animation: 150, // Smooth animation\n            filter: ".task-open-link", // Prevent dragging on task links\n            preventOnFilter: true, // Prevent drag if filtered element is clicked\n            onEnd: async (event) => {\n                try {\n                    console.log("Drag-and-drop operation started...");\n                    const rows = Array.from(event.from.querySelectorAll(".task-row"));\n                    const reorderedTasks = [];\n\n                    rows.forEach((row, index) => {\n                        const taskId = parseInt(row.dataset.taskId, 10);\n                        let parentId = null;\n\n                        // Get the parent ID from the map or fallback to the dataset\n                        if (row.classList.contains("subtask-row")) {\n                            const parentRow = row.previousElementSibling;\n                            parentId = parentRow\n                                ? parseInt(parentRow.dataset.taskId, 10)\n                                : this.taskParentMap.get(taskId) || null;\n                        }\n\n                        // Update the taskParentMap dynamically\n                        this.updateTaskParentMap(taskId, parentId);\n\n                        reorderedTasks.push({\n                            id: taskId,\n                            sort_order: index + 1,\n                            parent_id: parentId,\n                        });\n                    });\n\n                    console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n                    console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n                    // Send the payload to the backend\n                    const response = await fetch("/tasks/reorder_subtasks", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                            "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n                        },\n                        body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n                    });\n\n                    if (!response.ok) {\n                        const errorData = await response.json();\n                        console.error("Error reordering tasks:", errorData);\n                        alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n                        return;\n                    }\n\n                    const data = await response.json();\n                    console.log("Task reordering successful:", data);\n\n                } catch (error) {\n                    console.error("Error during drag-and-drop operation:", error);\n                    alert("An unexpected error occurred while reordering tasks.");\n                }\n            },\n        });\n\n        window.isDragAndDropInitialized = true;\n        console.log("Drag-and-drop initialized successfully.");\n    },\n};\n```\n\nKey Updates:\n\t1.\tPrecomputed Map (taskParentMap):\n\t•\tThe initTaskParentMap function initializes the map by iterating over DOM elements and mapping each task’s ID to its parent ID.\n\t•\tThe updateTaskParentMap dynamically updates the map when tasks are reordered.\n\t2.\tEfficient Parent Lookup:\n\t•\tThe parentId is derived from the precomputed map rather than DOM traversal.\n\t3.\tBackend Payload:\n\t•\tA structured payload (reorderedTasks) is sent to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t•\tCSRF protection is ensured by passing the token to the request headers.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'sort_order': 5, 'created_at': '2025-01-15T09:44:08.338301', 'updated_at': '2025-03-01T02:01:18.851229'}, {'id': 134, 'name': 'Step 2: Update the Backend in routes.py', 'description': 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\nPlan for step 2:\n\t1.\tVerify the payload structure:\n\t•\tEnsure that the payload includes all necessary fields (id, sort_order, parent_id) for each task.\n\t•\tValidate that the parent-child relationships in the precomputed map (taskParentMap) are reflected correctly in the payload.\n\t2.\tSubmit the payload to the backend:\n\t•\tEnhance the fetch request in the onEnd function of initDragAndDrop to log detailed submission data.\n\t•\tConfirm the payload integrity in the browser console before submission.\n\t3.\tUpdate backend logging:\n\t•\tAdd logging to /reorder_subtasks in routes.py to confirm receipt of the correct payload and process parent-child updates.\n\t•\tLog before and after database updates for better debugging.\n\n-----\nUpdated tasks_table_interactions.js\n\nReplace this section:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    let parentId = null;\n```\nWith:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    const parentId = this.taskParentMap.get(taskId) || null;\n```\nThe this.taskParentMap provides a precomputed and dynamic mapping of taskId to parentId. By using this map, we avoid relying on DOM traversal logic (row.closest or row.previousElementSibling) during drag-and-drop operations, which can sometimes be unreliable or cumbersome.\n\nFull Revised onEnd section:\n```\nonEnd: async (event) => {\n    try {\n        console.log("Drag-and-drop operation started...");\n        const rows = Array.from(event.from.querySelectorAll(".task-row"));\n        const reorderedTasks = [];\n\n        rows.forEach((row, index) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = this.taskParentMap.get(taskId) || null;\n\n            // Update the taskParentMap dynamically\n            this.updateTaskParentMap(taskId, parentId);\n\n            reorderedTasks.push({\n                id: taskId,\n                sort_order: index + 1,\n                parent_id: parentId,\n            });\n        });\n\n        console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n        console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n        // Send the payload to the backend\n        const response = await fetch("/tasks/reorder_subtasks", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n            },\n            body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error("Error reordering tasks:", errorData);\n            alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n            return;\n        }\n\n        const data = await response.json();\n        console.log("Task reordering successful:", data);\n\n    } catch (error) {\n        console.error("Error during drag-and-drop operation:", error);\n        alert("An unexpected error occurred while reordering tasks.");\n    }\n}\n```\n---------------------------------\nEnsure updates include:\n\t•\tBetter Logging: Adding logs for key events such as database changes and validation results.\n\t•\tInput Validation: Ensure all required fields (id, sort_order, parent_id) exist in the payload.\n\t•\tPost-Commit Validation: Confirm database updates after the commit.\n\t•\tImproved Error Handling: Include specific error messages and consistent rollback mechanisms.\n\nBelow is the revised reorder_subtasks route with descriptive comments for each section:\n```\n@bp.route("/reorder_subtasks", methods=["POST"])\ndef reorder_subtasks():\n    """\n    Reorder subtasks globally or reassign them to a different parent.\n\n    Steps:\n    - Parse and validate input from the frontend.\n    - Update parent-child relationships and sort order in the database.\n    - Commit changes and return a success response.\n    - Handle errors gracefully and provide detailed logs for debugging.\n    """\n    logger.info("Entering reorder_subtasks route...")\n    logger.info(f"Received payload for reordering tasks: {request.json}")\n\n    try:\n        # Step 1: Parse input\n        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered\n        ordered_tasks = request.json.get("ordered_tasks", [])\n\n        logger.debug(f"Parsed parent_id: {parent_id}")\n        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")\n\n        # Step 2: Validate input\n        if not isinstance(ordered_tasks, list) or not all(\n            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task\n            for task in ordered_tasks\n        ):\n            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")\n            return jsonify({\n                "error": "Invalid input format for \'ordered_tasks\'. Each task must include \'id\', \'sort_order\', and \'parent_id\'."\n            }), 400\n\n        # Step 3: Validate parent task (if applicable)\n        if parent_id is not None:\n            parent_task = Task.query.get(parent_id)\n            if not parent_task:\n                logger.error(f"Parent task with ID {parent_id} not found.")\n                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400\n\n        logger.info("Input validation passed. Proceeding with task updates...")\n\n        # Step 4: Process updates for each subtask\n        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation\n\n        for task_data in ordered_tasks:\n            subtask_id = task_data["id"]\n            sort_order = task_data["sort_order"]\n            new_parent_id = task_data["parent_id"]\n\n            # Fetch the subtask from the database\n            subtask = Task.query.get(subtask_id)\n            if not subtask:\n                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")\n                continue\n\n            # Log and update parent_id if it changes\n            if new_parent_id is not None and new_parent_id != subtask.parent_id:\n                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")\n                subtask.parent_id = new_parent_id\n\n            # Update sort order\n            subtask.sort_order = sort_order\n            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")\n\n            # Add to the list of updated subtasks for validation\n            updated_subtasks.append(subtask)\n\n        # Step 5: Commit changes to the database\n        try:\n            db.session.commit()\n            logger.info(f"Subtasks reordered successfully: {[task[\'id\'] for task in ordered_tasks]}")\n        except Exception as e:\n            logger.error(f"Error committing changes to the database: {str(e)}")\n            db.session.rollback()\n            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500\n\n        # Step 6: Post-commit validation\n        for subtask in updated_subtasks:\n            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")\n            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")\n\n        # Step 7: Return success response\n        return jsonify({\n            "success": True,\n            "message": "Subtasks reordered successfully.",\n            "updated_subtasks": [subtask.id for subtask in updated_subtasks]\n        }), 200\n\n    except Exception as e:\n        # Step 8: Handle unexpected errors\n        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)\n        db.session.rollback()\n        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500\n```\nKey Changes and Descriptive Comments\n\t1.\tInput Parsing:\n\t•\tExtracts parent_id and ordered_tasks from the request payload.\n\t•\tLogs the parsed values for debugging.\n\t2.\tInput Validation:\n\t•\tEnsures ordered_tasks is a list of dictionaries with the required keys.\n\t•\tValidates parent_id if provided, ensuring the parent task exists in the database.\n\t3.\tUpdate Processing:\n\t•\tIterates through ordered_tasks, updating each task’s parent_id and sort_order.\n\t•\tLogs changes for each task.\n\t4.\tDatabase Commit:\n\t•\tCommits all updates in a single transaction.\n\t•\tLogs success or rolls back changes in case of an error.\n\t5.\tPost-Commit Validation:\n\t•\tVerifies that the parent_id and sort_order changes were successfully saved to the database.\n\t6.\tError Handling:\n\t•\tCaptures and logs exceptions during processing or committing.\n\t•\tProvides meaningful error messages to the frontend.\n\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'sort_order': 6, 'created_at': '2025-01-15T09:46:29.348853', 'updated_at': '2025-03-01T02:01:18.851232'}, {'id': 286, 'name': 'Implement abels/tags', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 6, 'created_at': '2025-02-10T08:46:23.985620', 'updated_at': '2025-03-01T02:01:12.498730'}, {'id': 296, 'name': 'issue: contributor is lost after updating task', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 7, 'created_at': '2025-02-10T09:26:43.881947', 'updated_at': '2025-02-28T00:11:55.301308'}, {'id': 131, 'name': 'Step 5: Update utils.py', 'description': 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nChanges to Make:\n\t1.\tEnhance Task Filtering:\n\t•\tEnsure the filters handle parent-child relationships explicitly.\n\t•\tAdd options to include or exclude subtasks in queries.\n\t2.\tUtility Function for Debugging Parent-Child Relationships:\n\t•\tProvide a function to generate a map or list of parent-child relationships for debugging purposes.\n\t3.\tValidation Functions:\n\t•\tAdd a utility function to validate parent-child relationships and ensure no circular dependencies.\n\nUpdated utils.py Code:\n```\nimport logging\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import joinedload\nfrom app.extensions.db import db\nfrom app.tasks.models import Task\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\n\nclass TaskService:\n    @staticmethod\n    def filter_tasks(filters=None, include_subtasks=True, page=None, per_page=None):\n        """\n        Dynamically filters tasks with an option to include or exclude subtasks.\n\n        Args:\n            filters (dict): Filtering criteria.\n            include_subtasks (bool): Whether to include subtasks in the query.\n            page (int, optional): Page number for pagination.\n            per_page (int, optional): Items per page for pagination.\n\n        Returns:\n            Query or Pagination: A SQLAlchemy query object or paginated results.\n        """\n        query = Task.query.options(\n            db.joinedload(Task.project).joinedload(Project.contributors),\n            db.joinedload(Task.contributor),\n            db.joinedload(Task.children),\n        ).order_by(Task.sort_order)\n\n        if filters:\n            logger.debug(f"Applying filters: {filters}")\n\n            # Apply standard filters\n            if "is_archived" in filters:\n                query = query.filter(Task.is_archived == filters["is_archived"])\n            if "project_id" in filters:\n                query = query.filter(Task.project_id == filters["project_id"])\n            if "task_type" in filters:\n                if isinstance(filters["task_type"], list):\n                    query = query.filter(Task.task_type.in_(filters["task_type"]))\n                else:\n                    query = query.filter(Task.task_type == filters["task_type"])\n            if "completion_status" in filters:\n                completion_map = {"completed": True, "in_progress": False}\n                if filters["completion_status"] in completion_map:\n                    query = query.filter(Task.completed == completion_map[filters["completion_status"]])\n\n            # Optionally exclude subtasks\n            if not include_subtasks:\n                query = query.filter(Task.task_type != "Subtask")\n\n        logger.debug(f"Generated query: {query}")\n\n        # Pagination\n        if page and per_page:\n            return query.paginate(page=page, per_page=per_page, error_out=False)\n        return query\n\n    @staticmethod\n    def debug_parent_child_relationships(project_id=None):\n        """\n        Generates a debug map of parent-child relationships for all tasks.\n\n        Args:\n            project_id (int, optional): Restrict to tasks from a specific project.\n\n        Returns:\n            dict: A dictionary mapping parent IDs to their child task IDs.\n        """\n        query = Task.query\n        if project_id:\n            query = query.filter(Task.project_id == project_id)\n\n        tasks = query.options(\n            db.load_only(Task.id, Task.parent_id)\n        ).all()\n\n        relationship_map = {}\n        for task in tasks:\n            if task.parent_id not in relationship_map:\n                relationship_map[task.parent_id] = []\n            relationship_map[task.parent_id].append(task.id)\n\n        logger.debug(f"Parent-Child Relationship Map: {relationship_map}")\n        return relationship_map\n\n    @staticmethod\n    def validate_parent_child_relationships():\n        """\n        Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.\n\n        Raises:\n            ValueError: If invalid relationships are detected.\n        """\n        tasks = Task.query.options(db.joinedload(Task.parent)).all()\n\n        for task in tasks:\n            if task.parent_id:\n                parent_task = task.parent\n                if not parent_task:\n                    raise ValueError(f"Task {task.id} has an invalid parent ID {task.parent_id}.")\n\n                # Validate hierarchy rules\n                if task.task_type == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError(f"User Story {task.id} must have an Epic as its parent.")\n                if task.task_type == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError(f"Subtask {task.id} must have a User Story as its parent.")\n\n        logger.info("All parent-child relationships are valid.")\n\n    @staticmethod\n    def get_all_task_ids_with_parents():\n        """\n        Returns a flat list of tasks with their parent IDs for debugging.\n\n        Returns:\n            list: A list of tuples (task_id, parent_id).\n        """\n        tasks = Task.query.with_entities(Task.id, Task.parent_id).all()\n        logger.debug(f"Task IDs with Parent IDs: {tasks}")\n        return tasks\n```\n\n\nExplanation of Changes:\n\t1.\tfilter_tasks Enhancements:\n\t•\tAdded include_subtasks parameter to optionally exclude subtasks from the query.\n\t2.\tdebug_parent_child_relationships:\n\t•\tCreates a parent-child relationship map for debugging purposes.\n\t3.\tvalidate_parent_child_relationships:\n\t•\tIterates through all tasks to validate parent-child hierarchy and ensures no invalid relationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t•\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 7, 'created_at': '2025-01-15T09:41:28.091824', 'updated_at': '2025-03-01T02:01:18.851223'}, {'id': 135, 'name': 'Step 3: Update list.html', 'description': 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already includes everything needed. No required changes.\n\nHere´s the relevant section of list.html:\n\n```\n<tr id="task-{{ task.id }}"\n                class="task-row {% if task.task_type == \'Subtask\' %}subtask-row{% elif task.task_type == \'User Story\' %}user-story-row{% elif task.task_type == \'Epic\' %}epic-row{% endif %}"\n                style="background-color: \n                {% if task.task_type == \'Subtask\' %}\n                    rgba(200, 230, 255, 0.5); /* Light blue for Subtask */\n                {% elif task.task_type == \'User Story\' %}\n                    rgba(255, 255, 200, 0.5); /* Light yellow for User Story */\n                {% elif task.task_type == \'Epic\' %}\n                    rgba(255, 200, 200, 0.5); /* Light red for Epic */\n                {% else %}\n                    rgba(240, 240, 240, 1); /* Default light gray */\n                {% endif %};"\n                data-task-id="{{ task.id }}"\n                data-parent-id="{{ task.parent_id or \'\' }}"\n                data-level="{{ depth }}">\n                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>\n                <td>\n                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}\n                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}" aria-label="Toggle details for task {{ task.name }}">\n                        <i class="bi bi-chevron-right"></i>\n                    </button>\n                    {% endif %}\n                </td>\n                <td class="fw-medium fs-6 \n                {% if task.task_type == \'Epic\' %}\n                    epic-cell\n                {% elif task.task_type == \'User Story\' %}\n                    user-story-cell\n                {% elif task.task_type == \'Subtask\' %}\n                    subtask-cell\n                {% endif %}" \n                style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">\n                <span class="bi fs-6\n                {% if task.task_type == \'Epic\' %}\n                    bi-circle-fill\n                {% elif task.task_type == \'User Story\' %}\n                    bi-circle-half\n                {% elif task.task_type == \'Subtask\' %}\n                    bi-circle\n                {% endif %}">\n                </span>\n                {{ task.name }}\n                <small class="text-muted fw-light">\n                    (Parent-ID: {{ task.parent_id or \'None\' }})\n                </small>\n                <!-- Open Link -->\n                <a href="#" class="task-open-link" data-task-id="{{ task.id }}">\n                    <i class="bi bi-arrows-angle-expand" style="font-size: 0.8rem; color: white;"></i>\n                    Open\n                </a>\n            </td>\n                <td class="fw-light fs-6">\n                    <small class>\n                    LAC-{{ task.id }}\n                    </small>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light text-bg-secondary">\n                        {{ task.project if task.project else "Unknown Project" }}\n                    </span>\n                </td>\n                <td class="fs-6" data-contributor-column>{{ task.assigned_to if task.assigned_to else "Unassigned" }}</td>\n                <td class="fs-6">{{ task.story_points }}</td>\n                <td class="fs-6">\n                    <span class="badge rounded-pill fw-light text-bg-light">\n                        {{ task.task_type }}\n                    </span>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light {% if task.completed %}text-bg-success{% else %}text-bg-warning{% endif %}">\n                        {{ "Completed" if task.completed else "In Progress" }}\n                    </span>\n                </td>\n                <td>\n                    <!-- Delete Icon -->\n                    <button class="btn btn-dark btn-sm delete-task-btn" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .2rem; --bs-btn-font-size: .75rem;" data-task-id="{{ task.id }}" aria-label="Deletes task {{ task.id }}">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n            </tr>\n            {% for child in tasks if child.parent_id == task.id %}\n                {{ render_task(child, tasks, depth + 1) }}\n            {% endfor %}\n            {% endmacro %}\n            \n            <!-- Render top-level tasks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 8, 'created_at': '2025-01-15T09:46:29.349784', 'updated_at': '2025-03-01T02:01:18.851233'}, {'id': 289, 'name': 'issue: parent task is lost when updating task', 'description': '- Summary of the problem and solution\n    \n    **Problem: Parent Task Dropdown Was Not Being Set on Modal Open**\n    \n    The issue was that when opening a task modal, the **parent task dropdown** was not pre-populated with the correct parent task. However, interacting with the dropdown (e.g., clicking on it) would suddenly trigger it to be set correctly. This meant that the dropdown initialization was likely delayed or missing a step in the modal lifecycle.\n    \n    **Debugging Steps and Observations**\n    \n    1. **Task Details Were Fetched Correctly** ✅\n    - The task details, including parent_id, were being fetched from the API successfully.\n    1. **Parent Dropdown Initialization Issues** ❌\n    - The initializeParentDropdown() function was being called, but the dropdown was sometimes **not fully ready** when we tried to set the selected parent task.\n    1. **Clicking the Dropdown Triggered the Parent to Be Set** 🤔\n    - This hinted that the dropdown was not fully ready when setParentDropdown(task.parent_id) was initially called.\n    \n    **Final Solution**\n    \n    1. **Ensuring Dropdown Readiness Before Setting the Parent Task**\n    - We added explicit **delays and checks** to confirm that the dropdown was fully initialized before attempting to set the parent task.\n    \n    Specifically, we:\n    \n    - **Waited for the dropdown to appear in the DOM** using observeParentDropdown().\n    - **Initialized the dropdown** with initializeParentDropdown().\n    - **Waited explicitly for the dropdown to be fully ready** using waitForParentDropdownReady().\n    - **Added a final delay of 200ms** before calling setParentDropdown() to ensure stability.\n    1. **Modifying openTaskModal to Handle Parent Dropdown Setup**\n    - We ensured that initializeParentDropdown() was called **after fetching task details** and before setting the parent task.\n    1. **Confirming the Fix** 🎯\n    - After these fixes, the parent dropdown was **immediately populated** upon opening the modal, without requiring user interaction.\n    \n    **Key Learnings**\n    \n    ✅ **Dropdowns in modals need careful timing** – They might not be ready when you expect them to be.\n    \n    ✅ **Waiting for DOM updates is crucial** – Observing the element ensures it actually exists before interacting with it.\n    \n    ✅ **Explicit delays can prevent race conditions** – A small delay can sometimes resolve timing issues in UI interactions.\n    \n    **Final Result**\n    \n    ✅ The modal now **correctly loads and pre-selects the parent task** without extra clicks! 🎉🚀', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 8, 'created_at': '2025-02-10T08:56:25.273984', 'updated_at': '2025-02-28T00:11:55.301302'}, {'id': 269, 'name': 'Fix styling for sweetalert', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'sort_order': 10, 'created_at': '2025-02-08T15:54:56.717846', 'updated_at': '2025-02-28T00:11:55.301281'}, {'id': 247, 'name': 'Add Temporary Badge', 'description': 'Add a temporary badge or visual indicator to the updated task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 241, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 11, 'created_at': '2025-02-05T12:57:37.151479', 'updated_at': '2025-02-27T08:43:14.054398'}, {'id': 293, 'name': 'Click on title should copy the task title and id to clipboard', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 11, 'created_at': '2025-02-10T09:16:33.508209', 'updated_at': '2025-02-28T00:11:55.301304'}, {'id': 294, 'name': 'Issue: task table filters not working', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 12, 'created_at': '2025-02-10T09:19:21.022598', 'updated_at': '2025-02-28T00:11:55.301306'}, {'id': 240, 'name': 'Update Task Workflow', 'description': 'As a user, I want to update the status of a task so that it reflects the changes in the UI dynamically without reloading the page.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'In Progress', 'sort_order': 14, 'created_at': '2025-02-05T12:54:55.061344', 'updated_at': '2025-02-28T00:11:55.301273'}, {'id': 242, 'name': 'User Control Over Views', 'description': 'As a user, I want to toggle between hierarchical and flat views so that I can switch sorting preferences based on my workflow.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 15, 'created_at': '2025-02-05T12:55:50.108011', 'updated_at': '2025-02-28T00:11:55.301275'}, {'id': 130, 'name': 'Implement the Map of Task Relationships solution for drag-and-drop', 'description': 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 16, 'created_at': '2025-01-15T09:41:28.093022', 'updated_at': '2025-02-28T00:11:55.301271'}, {'id': 246, 'name': 'Toast Notification', 'description': 'Display a toast notification confirming the task status update.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 241, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 16, 'created_at': '2025-02-05T12:57:37.151479', 'updated_at': '2025-02-27T08:43:14.054398'}, {'id': 283, 'name': 'Fix issue with updating task title', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 18, 'created_at': '2025-02-10T08:41:58.769700', 'updated_at': '2025-02-28T00:11:55.301295'}, {'id': 278, 'name': 'Implement search feature for tasks list', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 5, 'project': 'Project Delta', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 4, 'status': 'Not Started', 'sort_order': 19, 'created_at': '2025-02-10T07:36:03.369833', 'updated_at': '2025-02-28T00:11:55.301289'}, {'id': 62, 'name': 'Add OAuth integration for Google Login', 'description': 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 20, 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-02-28T00:11:55.301255'}, {'id': 279, 'name': 'github integration', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 21, 'created_at': '2025-02-10T07:36:38.238202', 'updated_at': '2025-02-28T00:11:55.301290'}, {'id': 65, 'name': 'Implement backend endpoints for Google OAuth', 'description': 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 22, 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-02-28T00:11:55.301260'}, {'id': 241, 'name': 'Provide User Feedback', 'description': 'As a user, I want to receive immediate feedback after updating a task’s status so that I know the update was successful.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 24, 'created_at': '2025-02-05T12:55:19.826398', 'updated_at': '2025-02-28T00:11:55.301274'}, {'id': 41, 'name': 'Implement Searchable Dropdown', 'description': 'As a user, I want a searchable dropdown for parent task assignment.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Completed', 'sort_order': 25, 'created_at': '2025-01-03T09:14:28.285904', 'updated_at': '2025-02-28T00:11:55.301181'}, {'id': 85, 'name': 'Assign multiple contributors to a task', 'description': 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 27, 'created_at': '2025-01-07T19:32:39.466022', 'updated_at': '2025-02-28T00:11:55.301266'}, {'id': 136, 'name': 'Page scroll should stay in position when reloading', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 28, 'created_at': '2025-01-16T18:21:50.187247', 'updated_at': '2025-02-28T00:11:55.301272'}, {'id': 267, 'name': 'Improvements to toggles and nested tasks', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 29, 'created_at': '2025-02-08T02:29:12.464594', 'updated_at': '2025-03-03T14:17:12.065528'}, {'id': 325, 'name': 'Improve task list responsive grid', 'description': '## 🔍 **How Leading Task Management Apps Handle Column Widths**\n\n### 1️⃣ **JIRA (Atlassian)**\n\n🔹 **Dynamic Resizing** (CSS Grid + JavaScript)\n\n- Uses `display: grid` for task tables.\n- Columns are resizable with a drag handle.\n- `grid-template-columns: auto 1fr auto;` for flexibility.\n- **Approach**: Fixed + flexible widths with an adaptive UI.\n\n---\n\n### 2️⃣ **Monday.com**\n\n🔹 **Flexbox-Based Table**\n\n- Uses `display: flex;` instead of `grid` for more control.\n- Columns use **`flex-grow`** to expand dynamically.\n- Drag handles allow users to resize columns.\n- **Approach**: **JavaScript-based column width management** to allow user customization.\n\n---\n\n### 3️⃣ **Asana**\n\n🔹 **Hybrid (Flexbox + JavaScript)**\n\n- Uses **CSS flexbox** for flexible layout.\n- Users can resize columns by dragging.\n- `min-width: 120px;` ensures usability.\n- **Approach**: A combination of `flex` and `min-width` to ensure usability on smaller screens.\n\n---\n\n### 4️⃣ **Linear**\n\n🔹 **CSS Grid with `fr` Units**\n\n- Uses a modern **CSS Grid** approach:\n    \n    ```css\n    grid-template-columns: auto 1fr auto;\n    ```\n    \n- Dynamically adjusts the width of columns **based on content**.\n- Uses `grid-template-columns: minmax(150px, 2fr) 3fr 1fr;` for controlled column expansion.\n- **Approach**: Minimalist UI with focus on speed and responsiveness.\n\n---\n\n### 5️⃣ **Shortcut**\n\n🔹 **Similar to Jira (Resizable Columns)**\n\n- Uses **CSS Grid + JavaScript-based resizing**.\n- Stores user preferences (column order, width) in **local storage**.\n- **Approach**: Persistent column sizes per user, allowing for a **customizable layout**.\n\n---\n\n## ✅ **What’s the Best Approach for Our App?**\n\n### 🎯 **Option 1: CSS Grid (Recommended)**\n\n```css\ngrid-template-columns: 1fr 2fr 1fr;\n```\n\nPros:\n✔ **Modern**\n\n✔ **Auto-resizes based on content**\n\n✔ **Easy to manage**\n\n---\n\n### 🎯 **Option 2: Flexbox (For More Control)**\n\n```css\ndisplay: flex;\nflex-grow: 1;\nmin-width: 120px;\n```\n\nPros:\n✔ **More control over column shrinking/growing**\n\n✔ **Easier to make resizable**\n\n✔ **Ideal for draggable column resizing**\n\n---\n\n### 🎯 **Option 3: JavaScript-Powered Resizing (Advanced)**\n\n- Uses `grid-template-columns` but **lets users drag & resize**.\n- Stores **column widths in local storage**.\n- Uses `ResizeObserver` to listen for changes.\n\nPros:\n✔ **User-friendly (lets users resize columns)**\n\n✔ **Persistent user preferences**\n\n✔ **Great for complex task management apps**\n\n---\n\n## 🔥 **What’s the Best Choice for Us?**\n\n- If you want **simple auto-adjusting columns**, go with **CSS Grid** (`fr` units).\n- If you need **manual resizing**, use **Flexbox + JavaScript**.\n- If you want **fully customizable layouts**, use **JavaScript-powered resizing** like Jira or Monday.\n\nWould you like me to **implement resizable columns** with JavaScript? 🚀', 'task_type': 'Epic', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'sort_order': 30, 'created_at': '2025-02-25T00:02:51.810711', 'updated_at': '2025-03-03T14:17:02.484796'}, {'id': 274, 'name': 'Add support for goals, initiatives, okr´s', 'description': 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n\nölkasdölkk', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P1', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 31, 'created_at': '2025-02-10T00:46:27.204912', 'updated_at': '2025-02-28T00:11:55.301284'}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 32, 'created_at': '2025-02-10T08:41:17.786154', 'updated_at': '2025-03-03T14:16:41.747486'}, {'id': 63, 'name': 'Add OAuth integration for GitHub Login', 'description': 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'sort_order': 32, 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-02-27T08:43:14.054354'}, {'id': 276, 'name': 'Add support for priority', 'description': 'ffasdlkjlkj\nljkkjlkj', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P0', 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 33, 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-28T00:11:55.301286'}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'description': 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- Custom status\n-- Custom status\n- In Progress\n-- Custom status\n-- Custom status\n-- Custom status\n- Completed\n-- Custom status\n-- Custom status\n\n2. How can we track a task through different stages and save the sequence of events or stages the task has gone through?\nI´m thinking it could be good for mapping out processes, identifying bottlenecks and provide valuable insights while improving and streamlining workflows.\n- Stages\n- Contacts taken\n- Respons time \n- Time to action after responses\n- Dependencies\n\nNeed to be able to record every action related to this action.\nCommunication integrations\n- Slack\n- Email\n- Text messages\n- Phonecalls\n- Calendar events, meetings\n- Zoom, Google meet, Teams etc..\n\n\n2. Set custom statuses per project (can use tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 34, 'created_at': '2025-02-10T07:16:03.352588', 'updated_at': '2025-03-03T14:16:31.129766'}, {'id': 68, 'name': 'Register application in GitHub Developer Console', 'description': 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 35, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-02-27T08:43:14.054358'}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'description': 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be lost"\nOR\n\nIs it possible, and is it desireable to keep parent child relationships across projects?\nSo that a parent can be in one project but the child tasks can be in different projects?\n\nLets say \nParent epic is \n"Internationalisation"\nChild user stories are\n- Timezones\n- Language\n- Currency\n- Day, Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 35, 'created_at': '2025-02-10T08:54:36.297869', 'updated_at': '2025-03-03T14:16:24.364985'}, {'id': 284, 'name': 'Add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 36, 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-28T00:11:55.301296'}, {'id': 281, 'name': 'Add a page for roadmap', 'description': 'Add some sort of high level plan that aims to keep PM/PO´s on track and not get lost into the details of an overwhelming large backlog', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 37, 'created_at': '2025-02-10T08:27:01.218606', 'updated_at': '2025-02-28T00:11:55.301293'}, {'id': 69, 'name': 'Handle callback from GitHub', 'description': 'Implement the callback endpoint to process the authorization code from GitHub.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 38, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-02-26T21:53:17.041822'}, {'id': 273, 'name': 'Disable parent task selector in epics', 'description': 'and add text, Epic can´t have parent tasks', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 38, 'created_at': '2025-02-10T00:45:20.740910', 'updated_at': '2025-02-28T00:11:55.301283'}, {'id': 280, 'name': 'logging (task and project history)', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 39, 'created_at': '2025-02-10T07:37:44.435112', 'updated_at': '2025-02-28T00:11:55.301291'}, {'id': 275, 'name': 'Add support for sprints/cycles', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 40, 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-28T00:11:55.301285'}, {'id': 100, 'name': '1.1 User Registration', 'description': '<blockquote><p>As a user, I want to register with a username, email, and password so that I can create an account and access the system. </p></blockquote><p>**Acceptance Criteria:** </p><ul><li><p>• User can input valid username, email, and password.</p></li><li><p>• Username and email must be unique. </p></li><li><p>• Errors are displayed for invalid inputs or duplicate accounts. </p></li><li><p>• Passwords must meet complexity requirements and be securely stored. </p></li><li><p>• Successful registration redirects users to a login page.</p></li></ul><hr><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 41, 'created_at': '2025-01-07T19:59:09.044667', 'updated_at': '2025-03-03T14:20:10.801828'}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'description': 'kkkkkkkjjjjj\nlkajdlökjsdfölkjsdfölkjdf', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 41, 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-28T00:11:55.301297'}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'description': 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitHub Login involves integrating OAuth 2.0, which both services support. The complexity depends on your app’s existing setup, frameworks, and experience with third-party authentication. Below is a breakdown:\n\nKey Steps for Implementing Google or GitHub Login\n\t1.\tSet Up OAuth Credentials:\n\t•\tRegister your application in the Google Cloud Console or GitHub Developer Settings.\n\t•\tObtain the client ID and client secret.\n\t2.\tInstall Required Libraries:\n\t•\tUse a library for OAuth (e.g., flask-oauthlib, python-social-auth, or authlib).\n\t•\tPopular frameworks like Flask and Django already have robust integrations for OAuth providers.\n\t3.\tBackend Configuration:\n\t•\tImplement an endpoint to handle the OAuth flow (/auth/login/google or /auth/login/github).\n\t•\tConfigure your app to send users to Google or GitHub’s authentication page.\n\t•\tHandle the OAuth callback to exchange the authorization code for an access token.\n\t•\tVerify the token and fetch user information (e.g., email, name).\n\t4.\tLink OAuth to User Registration:\n\t•\tOn successful login, create or retrieve a user in your database.\n\t•\tStore the user’s details like email, OAuth provider ID, and access token.\n\t5.\tFrontend Integration (if applicable):\n\t•\tAdd “Login with Google” or “Login with GitHub” buttons.\n\t•\tRedirect to your backend’s OAuth endpoint when clicked.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 42, 'created_at': '2025-01-07T12:15:54.291625', 'updated_at': '2025-02-28T00:11:55.301262'}, {'id': 107, 'name': '1.1.1 Database Changes for User Registration', 'description': '<p>1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.</p><p></p><hr><p>Adding text</p><pre><code>CREATE TABLE public.users ( id SERIAL PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL, created_at TIMESTAMP DEFAULT NOW(), updated_at TIMESTAMP DEFAULT NOW() );</code></pre><p></p>', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 42, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-03-03T20:49:45.725711'}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'description': 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 18, 'status': 'Not Started', 'sort_order': 43, 'created_at': '2025-01-07T19:53:50.085064', 'updated_at': '2025-02-28T00:11:55.301267'}, {'id': 61, 'name': 'Parent task assignment', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'sort_order': 44, 'created_at': '2025-01-04T22:31:45.205815', 'updated_at': '2025-02-28T00:11:55.301224'}, {'id': 108, 'name': '1.1.2 Backend API for Registration', 'description': '•\tCreate an endpoint POST /api/register:\n•\tValidate input fields.\n•\tHash the password using bcrypt or argon2.\n•\tInsert the user into the users table.\n•\tReturn success/failure responses.\ndddhfff\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 44, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-27T08:43:14.054375'}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t•\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t•\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 45, 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-02-28T00:11:55.301265'}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'description': 'PRD: Define roles and permissions to restrict access. Roles include admin, developer, and viewer. Implement middleware for access control checks.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 46, 'created_at': '2025-01-07T19:54:09.204981', 'updated_at': '2025-02-28T00:11:55.301268'}, {'id': 112, 'name': '1.2.2 Frontend Login Page', 'description': 'Develop a frontend form for user login with email and password inputs.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 47, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054377'}, {'id': 83, 'name': 'Notifications', 'description': 'Implement sending notifications to selected people triggered by events.\nCustomizing messages:\nPossibility to adjust how detailed the information should be and what level of technical difficulty the language can contain. Integration to LMS that tailors messages to different target groups and then sends the appropriate version to the appropriate target group.\n\n\n\n- Ready for Release\n   - Send documentation of new feature to support and customer success team\n      - Add technical documentation as file in documentation library.\n      - User documentation\n      - Create and send feature description to Sales & Marketing dep.\n      - Create and send feature description and estimation of added value for company and customer to Investors.\n   - Create and publish release notes online and in inline message system.\n\nRead more: https://www.notion.so/lacunamedia/Create-and-send-messages-triggered-by-events-174979257fc08022b18bc76d3b28a4b3?pvs=4', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 47, 'created_at': '2025-01-07T16:10:54.030609', 'updated_at': '2025-02-28T00:11:55.301263'}, {'id': 99, 'name': 'Enhance User Account Management', 'description': 'PRD: Provide additional account management features for users and admins. Includes profile management, password reset functionality, and audit logging.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'sort_order': 48, 'created_at': '2025-01-07T19:54:20.692949', 'updated_at': '2025-02-28T00:11:55.301269'}, {'id': 109, 'name': '1.1.3 Create Frontend Registration Page', 'description': 'Develop a frontend form to collect user registration details.\n•\tAdd a form for username, email, and password inputs.\n•\tUse client-side validation (e.g., email format).\n•\tSend a POST request to /api/register.\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 49, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-27T08:43:14.054375'}, {'id': 110, 'name': '1.1.4 Unit Tests for Registration', 'description': 'Write unit tests for:\n\n•\tValid registration.\n•\tDuplicate username/email scenarios.\n•\tInvalid input handling.\nff', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 50, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-27T08:43:14.054376'}, {'id': 101, 'name': '1.2 User Login', 'description': 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n•\tUsers can log in with a valid email and password.\n•\tErrors are displayed for invalid credentials.\n•\tSuccessful login stores a session or JWT token.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 52, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054370'}, {'id': 111, 'name': '1.2.1 Backend API for Login', 'description': 'Create POST /api/login endpoint to handle user login.\njjsjj', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 54, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054377'}, {'id': 113, 'name': '1.2.3 Session Management', 'description': 'Implement secure session handling using cookies or JWT.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 55, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054378'}, {'id': 114, 'name': '1.2.4 Unit Tests for Login', 'description': 'Write tests for successful and failed login attempts.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 56, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054379'}, {'id': 106, 'name': 'Password Reset', 'description': 'As a user, I want to reset my password securely using email.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'sort_order': 57, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054373'}, {'id': 128, 'name': 'Frontend Password Reset Page', 'description': 'Develop a page for users to enter a new password using a valid token.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 58, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054388'}, {'id': 129, 'name': 'Testing Password Reset', 'description': 'Write tests for email delivery, token validation, and password updates.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 59, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054389'}, {'id': 102, 'name': 'Logout', 'description': 'As a user, I want to log out so that I can end my session securely.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 60, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054371'}, {'id': 117, 'name': 'Tests for Logout', 'description': 'Verify session invalidation and redirection to the login page.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 61, 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-27T08:43:14.054381'}, {'id': 381, 'name': 'Delete this', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 61, 'created_at': '2025-02-28T23:48:05.992788', 'updated_at': '2025-02-28T23:48:38.311759'}, {'id': 116, 'name': 'Frontend Logout Button', 'description': 'Add a logout button to the UI and handle session clearing.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 62, 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-27T08:43:14.054380'}, {'id': 115, 'name': 'Backend API for Logout', 'description': 'Create POST /api/logout endpoint to invalidate user sessions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 63, 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-27T08:43:14.054379'}, {'id': 45, 'name': 'Display Default Value in Dropdown', 'description': 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 64, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054343'}, {'id': 50, 'name': 'Retrieve Current Parent Task', 'description': 'Retrieve the current parent task’s ID and name from the backend.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Completed', 'sort_order': 65, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054346'}, {'id': 51, 'name': 'Set Default Value', 'description': 'Set the default value in the dropdown based on the retrieved data.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 45, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 1, 'status': 'Not Started', 'sort_order': 66, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054347'}, {'id': 46, 'name': 'Search for Parent Tasks', 'description': 'Allow users to search for tasks dynamically in the dropdown by typing.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'sort_order': 67, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054344'}, {'id': 54, 'name': 'Test Partial Matching', 'description': 'Ensure the search results update in real-time as the user types.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 68, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054349'}, {'id': 47, 'name': 'Handle Large Datasets Efficiently', 'description': 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'sort_order': 69, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054344'}, {'id': 56, 'name': 'Paginate API Responses', 'description': 'Implement server-side filtering and pagination for large datasets.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 70, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054350'}, {'id': 55, 'name': 'Enable Lazy Loading', 'description': 'Enable lazy loading or virtualization in Virtual Select.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 71, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054350'}, {'id': 48, 'name': 'Select and Deselect Parent Tasks', 'description': 'Allow users to select a parent task or deselect by choosing "None."', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 72, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054345'}, {'id': 57, 'name': 'Ensure None Option Availability', 'description': 'Add “None” as a selectable option and ensure it stays at the top of the list.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 73, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054351'}, {'id': 58, 'name': 'Handle Selection Events', 'description': 'Implement event listeners to update the form’s state when the selection changes.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 74, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054352'}, {'id': 49, 'name': 'Integrate Dropdown with Task Form', 'description': 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 75, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054346'}, {'id': 383, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 76, 'created_at': '2025-03-01T01:00:27.095399', 'updated_at': '2025-03-01T02:00:27.103602'}, {'id': 376, 'name': 'Subtask test', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 76, 'created_at': '2025-02-28T23:01:44.247988', 'updated_at': '2025-02-28T23:02:00.075567'}, {'id': 59, 'name': 'Bind Dropdown to Form Field', 'description': 'Bind the dropdown to the form’s parent task field.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'In Progress', 'sort_order': 76, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054352'}, {'id': 60, 'name': 'Test Form Submission', 'description': 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 77, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054353'}, {'id': 52, 'name': 'Add Search Box to Dropdown', 'description': 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 78, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054348'}, {'id': 53, 'name': 'Implement AJAX Search', 'description': 'Implement AJAX-based search to fetch tasks dynamically from the backend.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 79, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054348'}, {'id': 42, 'name': 'Choose Dropdown Library', 'description': 'Research and decide on the dropdown library to use.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 80, 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-27T08:43:14.054341'}, {'id': 378, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 80, 'created_at': '2025-02-28T23:17:32.404713', 'updated_at': '2025-03-01T00:17:32.410920'}, {'id': 43, 'name': 'Integrate Dropdown Library', 'description': 'Integrate the chosen dropdown library into the project.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Completed', 'sort_order': 81, 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-27T08:43:14.054342'}, {'id': 90, 'name': 'Update frontend to display and manage multiple contributors', 'description': 'Allow users to view, add, or remove multiple contributors via the UI.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 82, 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-27T08:43:14.054364'}, {'id': 377, 'name': 'Taskade', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 82, 'created_at': '2025-02-28T23:02:24.453543', 'updated_at': '2025-03-03T18:07:16.276655'}, {'id': 88, 'name': 'Update database schema for multiple contributors', 'description': 'Modify the task table to support many-to-many relationships for contributors.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 83, 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-27T08:43:14.054362'}, {'id': 89, 'name': 'Develop backend API for adding contributors to a task', 'description': 'Create endpoints to add, update, and remove contributors for a task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 84, 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-27T08:43:14.054363'}, {'id': 86, 'name': 'Allow designation of task owner', 'description': 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 85, 'created_at': '2025-01-07T19:33:29.330562', 'updated_at': '2025-02-27T08:43:14.054361'}, {'id': 375, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 85, 'created_at': '2025-02-28T22:48:35.594251', 'updated_at': '2025-02-28T23:48:35.676455'}, {'id': 93, 'name': 'Update frontend to manage task ownership', 'description': 'Allow users to assign or update the task owner via the UI.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 86, 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-27T08:43:14.054365'}, {'id': 384, 'name': 'Changed title', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 86, 'created_at': '2025-03-01T12:06:32.303897', 'updated_at': '2025-03-03T18:06:15.844478'}, {'id': 91, 'name': 'Update database schema for task ownership', 'description': 'Add a column or relationship to assign a single owner per task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 87, 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-27T08:43:14.054364'}, {'id': 92, 'name': 'Develop backend API for assigning task owner', 'description': 'Create endpoints to assign or update the owner of a task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 88, 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-27T08:43:14.054365'}, {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 89, 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-02-27T08:43:14.054362'}, {'id': 96, 'name': 'Allow admin users to create and customize contributor roles via frontend', 'description': 'Provide UI functionality for admins to manage contributor roles dynamically.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 90, 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-27T08:43:14.054367'}, {'id': 94, 'name': 'Add database support for contributor roles', 'description': 'Introduce a roles table and link contributors to specific roles for tasks.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 91, 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-27T08:43:14.054366'}, {'id': 95, 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 92, 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-27T08:43:14.054367'}, {'id': 127, 'name': 'Backend API for Password Reset', 'description': 'Create endpoints to handle password reset requests and token validation.\ndfdf\n\nasdasd', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 93, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054387'}, {'id': 126, 'name': 'Email Configuration for Password Reset', 'description': 'Configure email service to send password reset links.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 94, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054387'}, {'id': 104, 'name': 'Middleware for Role Enforcement', 'description': 'As a system, I want to enforce role-based access to specific routes.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 98, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 95, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054372'}, {'id': 122, 'name': 'Testing Role Enforcement', 'description': 'Write tests to ensure proper access control based on roles.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 96, 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-02-27T08:43:14.054384'}, {'id': 121, 'name': 'Develop Role Enforcement Middleware', 'description': 'Implement middleware to check user roles for access control.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 104, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 97, 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-02-27T08:43:14.054383'}, {'id': 105, 'name': 'Profile Management', 'description': 'As a user, I want to update my profile (username, email, password).', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 99, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 98, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054373'}, {'id': 123, 'name': 'Backend API for Profile Management', 'description': 'Create PATCH /api/profile endpoint to update user details.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 99, 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-02-27T08:43:14.054385'}, {'id': 125, 'name': 'Testing Profile Updates', 'description': 'Write tests for profile update functionality.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 100, 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-02-27T08:43:14.054386'}, {'id': 124, 'name': 'Frontend Profile Page', 'description': 'Develop a profile page for editing user details.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 101, 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-02-27T08:43:14.054385'}, {'id': 103, 'name': 'Role Assignment', 'description': 'As an administrator, I want to assign roles to users so that I can control access to certain features.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 98, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 102, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054372'}, {'id': 120, 'name': 'Testing Role Assignment', 'description': 'Write tests to validate role changes and restrictions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 103, 'created_at': '2025-01-07T20:40:58.383687', 'updated_at': '2025-02-27T08:43:14.054383'}, {'id': 119, 'name': 'Backend API for Role Assignment', 'description': 'Create POST /api/assign-role endpoint to manage user roles.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 104, 'created_at': '2025-01-07T20:40:58.383687', 'updated_at': '2025-02-27T08:43:14.054382'}, {'id': 118, 'name': 'Database Changes for Role Assignment', 'description': 'Add a role column to the users table.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 105, 'created_at': '2025-01-07T20:40:58.383687', 'updated_at': '2025-02-27T08:43:14.054381'}, {'id': 44, 'name': 'Test Performance with 500 Tasks', 'description': 'Ensure dropdown performance remains smooth with 500 tasks.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 107, 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-26T21:53:17.041813'}]
2025-03-04 15:39:34,257 ERROR: Unexpected error in list_tasks: Could not build url for endpoint 'tasks.list_tasks' with values ['is_archived', 'page']. Did you mean 'tasks_bp.list_tasks' instead?
2025-03-04 15:39:34,261 INFO: ROLLBACK
2025-03-04 15:39:34,261 INFO: 127.0.0.1 - - [04/Mar/2025 15:39:34] "GET /tasks/ HTTP/1.1" 200 -
2025-03-04 15:39:36,953 INFO: Entering list_tasks route...
2025-03-04 15:39:36,953 DEBUG: Filters used: {'is_archived': False}
2025-03-04 15:39:36,954 DEBUG: Applying filters: {'is_archived': False}
2025-03-04 15:39:36,961 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-04 15:39:36,962 INFO: BEGIN (implicit)
2025-03-04 15:39:36,962 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-04 15:39:36,962 INFO: [cached since 6225s ago] {'param_1': 500, 'param_2': 0}
2025-03-04 15:39:37,001 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-04 15:39:37,001 INFO: [cached since 6225s ago] {}
2025-03-04 15:39:37,003 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-04 15:39:37,003 INFO: [cached since 6225s ago] {}
2025-03-04 15:39:37,004 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-04 15:39:37,004 INFO: [cached since 6225s ago] {}
2025-03-04 15:39:37,005 DEBUG: Tasks passed to template: [{'id': 336, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:07:11.299563', 'updated_at': '2025-02-28T15:07:11.310976'}, {'id': 344, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:16.258493', 'updated_at': '2025-02-28T15:18:16.268248'}, {'id': 342, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:11.944980', 'updated_at': '2025-02-28T15:18:11.954065'}, {'id': 347, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:24:45.846396', 'updated_at': '2025-02-28T15:24:45.860885'}, {'id': 354, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:54:59.543585', 'updated_at': '2025-02-28T15:54:59.553122'}, {'id': 248, 'name': 'Implement Toggle Button', 'description': 'Add a toggle button to switch between hierarchical and flat views.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-05T12:58:14.518518', 'updated_at': '2025-02-28T00:11:48.483207'}, {'id': 350, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:32:49.928206', 'updated_at': '2025-02-28T15:32:49.935531'}, {'id': 338, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:10.122843', 'updated_at': '2025-02-28T15:18:10.128941'}, {'id': 334, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:44:06.347090', 'updated_at': '2025-02-28T14:44:06.354371'}, {'id': 352, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:51:56.533768', 'updated_at': '2025-02-28T15:51:56.563880'}, {'id': 369, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T21:17:46.272998', 'updated_at': '2025-02-28T22:17:46.285417'}, {'id': 351, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:32:58.672570', 'updated_at': '2025-02-28T15:32:58.678298'}, {'id': 341, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:11.691354', 'updated_at': '2025-02-28T15:18:11.699365'}, {'id': 329, 'name': 'Implement an API endpoint for submitting raw feature requests.', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-27T23:13:09.068616', 'updated_at': '2025-03-01T01:00:05.807248'}, {'id': 356, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T15:08:08.061166', 'updated_at': '2025-02-28T16:08:08.066215'}, {'id': 362, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:14:50.969730', 'updated_at': '2025-02-28T19:14:50.979052'}, {'id': 370, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T21:27:30.386959', 'updated_at': '2025-02-28T22:27:30.395572'}, {'id': 353, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:52:04.500938', 'updated_at': '2025-02-28T15:52:04.512331'}, {'id': 244, 'name': 'Scroll to Updated Task', 'description': 'Automatically scroll to the updated task in the list if it’s out of view.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 0, 'created_at': '2025-02-05T12:56:52.818501', 'updated_at': '2025-02-28T00:11:57.987007'}, {'id': 358, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T15:46:04.956844', 'updated_at': '2025-02-28T16:46:04.966511'}, {'id': 366, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:38:39.027061', 'updated_at': '2025-02-28T19:38:39.048248'}, {'id': 367, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:39:25.734101', 'updated_at': '2025-02-28T19:39:25.739322'}, {'id': 340, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:11.061737', 'updated_at': '2025-02-28T15:18:11.075736'}, {'id': 365, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:30:48.877580', 'updated_at': '2025-02-28T19:30:48.887060'}, {'id': 333, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:36:20.683426', 'updated_at': '2025-02-28T14:36:20.691337'}, {'id': 332, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:35:43.663809', 'updated_at': '2025-02-28T14:35:43.673337'}, {'id': 348, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:26:17.632940', 'updated_at': '2025-02-28T15:26:17.642972'}, {'id': 355, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:55:16.105634', 'updated_at': '2025-02-28T15:55:16.131837'}, {'id': 361, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T17:11:52.257703', 'updated_at': '2025-02-28T18:11:52.262071'}, {'id': 337, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:07.626569', 'updated_at': '2025-02-28T15:18:07.632643'}, {'id': 346, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:24:40.311054', 'updated_at': '2025-02-28T15:24:40.322156'}, {'id': 343, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:12.267445', 'updated_at': '2025-02-28T15:18:12.278088'}, {'id': 357, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T15:08:15.356759', 'updated_at': '2025-02-28T16:08:15.371374'}, {'id': 335, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:44:45.530624', 'updated_at': '2025-02-28T14:44:45.542212'}, {'id': 373, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T22:10:59.863170', 'updated_at': '2025-02-28T23:10:59.893542'}, {'id': 292, 'name': 'Issue: assigning contributor does not work', 'description': '<p>### **Summary of problem and solution** The issue was that assigning a contributor to a task via the /tasks//assign_contributor API endpoint resulted in a **400 Bad Request** error. Upon investigation, the following problems were identified: 1. **Missing CSRF Token:** - The request failed due to a missing CSRF token, as shown in the error message: *“Bad Request: The CSRF token is missing.”* - The frontend was not correctly including the CSRF token in the request headers. 1. **JavaScript Error (Undefined CSRF Token Variable):** - The error *“ReferenceError: csrfToken is not defined”* indicated that the CSRF token was not being retrieved properly in the JavaScript code. 1. **Incorrect Fetch Request Headers:** - The fetch request did not include the CSRF token under the correct key (X-CSRFToken). - The script attempted to send the request without properly extracting the CSRF token from the meta tag. ### **Solution** 1. **Include the CSRF Token in the JavaScript Code** The CSRF token was retrieved from the meta tag and used in the request headers: ```jsx // Retrieve CSRF token from meta tag const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\'); ``` This ensures that the CSRF token is correctly fetched and available in the JavaScript scope. 1. **Modify the Fetch Request to Include CSRF Token** The request to assign a contributor was updated to include the token: ```jsx const response = await fetch(`/tasks/${taskId}/assign_contributor`, { method: "POST", headers: { "Content-Type": "application/json", "X-CSRFToken": csrfToken // Include CSRF token }, body: JSON.stringify({ contributor_id: parseInt(contributorId, 10) }), }); ``` - **Ensures the CSRF token is sent in the request headers** so that Flask-WTF does not reject the request. 1. **Verify and Debug Network Requests** - The updated request headers were verified using **Chrome DevTools &gt; Network tab** to ensure the X-CSRFToken was included. - The error messages disappeared, and the contributor assignment request **succeeded with a 200 OK response**. --- ### **Final Outcome** 🚀 The issue was resolved, and contributors can now be assigned successfully to tasks without triggering a CSRF validation error. ### **Key Learnings from This Session** This debugging session covered several important aspects of **web development with Flask and JavaScript**, particularly related to **API requests, CSRF protection, debugging tools, and database interactions**. Here are the key takeaways: --- ### **1. CSRF Protection in API Requests** - **Issue:** The initial error was due to **a missing CSRF token** when making a `POST` request. - **Fix:** The solution was to **retrieve the CSRF token from a meta tag** in the HTML and include it in the request headers. - **Key Learning:** Flask-WTF requires CSRF tokens for form and API submissions to **prevent cross-site request forgery (CSRF) attacks**.✅ Always ensure that API requests include a valid CSRF token. --- ### **2. Debugging JavaScript Fetch Requests** - **Issue:** The JavaScript code was making a fetch request, but the variable `csrfToken` was not properly defined, causing a `ReferenceError`. - **Fix:** Declaring `csrfToken` at the beginning of the script: ```jsx const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\'); ``` - **Key Learning:**✅ JavaScript variables must be defined before they are used.✅ Use browser **developer tools (DevTools) Network tab** to inspect headers, payloads, and responses when debugging API requests. --- ### **3. Structuring Flask Routes for Task Management** - **Issue:** The `assign_contributor` route was failing due to incorrect request payload validation. - **Fix:** Improved the route’s error handling and logging: ```python @bp.route(\'//assign_contributor\', methods=[\'POST\']) def assign_contributor(task_id): try: data = request.get_json() contributor_id = int(data.get(\'contributor_id\', 0)) if not contributor_id: return jsonify({\'error\': \'Valid Contributor ID is required\'}), 400 ``` - **Key Learning:**✅ Always validate incoming data in Flask routes to prevent type errors.✅ Use `request.get_json()` properly and handle missing or incorrect data gracefully. --- ### **4. Utilizing Browser DevTools for Debugging** - **Issue:** The fetch request was failing with a `400 Bad Request`, and the browser console showed `ReferenceError: csrfToken is not defined`. - **Fix:** - Used **Network tab** to inspect the request payload and headers. - Used **Console tab** to catch JavaScript errors early. - **Key Learning:**✅ DevTools is a **critical** tool for diagnosing network request issues.✅ Always **check console errors** before assuming it\'s a backend issue. --- ### **5. Database Queries and ORM Debugging** - **Issue:** Tasks were not being updated correctly, possibly due to missing commit statements. - **Fix:** Ensured that:was executed properly. ```python task.contributor_id = contributor_id db.session.commit() ``` - **Key Learning:**✅ Always call `db.session.commit()` after making changes in SQLAlchemy.✅ Rollback transactions if an error occurs to avoid database inconsistency. --- ### **6. Handling Asynchronous JavaScript Logic** - **Issue:** The `assignContributor` function was executing before the page was fully loaded. - **Fix:** Wrapped it inside a function that ensures elements exist: ``` window.setupContributorAssignment = function () { const assignButton = $("#assign-contributor-btn"); if (!assignButton.length) { setTimeout(setupContributorAssignment, 500); // Retry in 500ms return; } ``` - **Key Learning:**✅ Use `setTimeout` to **retry event binding** when elements are dynamically loaded.✅ Always **check if elements exist before attaching event handlers**. --- ### **7. Best Practices for Flask Logging &amp; Error Handling** - **Issue:** Lack of clear logging when API calls failed. - **Fix:** Added better logging to track failures: ```python logger.info(f"Assigning contributor to task ID {task_id}") try: # Process request... except Exception as e: logger.error(f"Error assigning contributor: {e}") ``` - **Key Learning:**✅ Log **every major step** in API processing to simplify debugging.✅ Differentiate between `logger.info()`, `logger.warning()`, and `logger.error()` based on severity. --- ### **Final Takeaways** 🚀 **Understanding CSRF protection** and **properly structuring API requests** is crucial for secure web applications. 🔍 **Browser DevTools is invaluable** for diagnosing frontend issues, especially in JavaScript. 🐍 **Flask requires proper request validation, database transactions, and logging** to maintain stability. ⚡ **Asynchronous JavaScript must handle dynamic elements carefully** to avoid runtime errors. This session reinforced best practices in **frontend-backend integration, debugging, and security**, making it a great learning experience! 🚀🔥</p>', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 0, 'created_at': '2025-02-10T09:11:12.273779', 'updated_at': '2025-03-04T00:41:24.838143'}, {'id': 265, 'name': 'Smooth transition for toggles', 'description': '<p>Added new description</p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-03-01T15:23:05.271095'}, {'id': 339, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:10.856511', 'updated_at': '2025-02-28T15:18:10.860682'}, {'id': 331, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:35:35.797059', 'updated_at': '2025-02-28T14:35:35.813440'}, {'id': 345, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:53.170926', 'updated_at': '2025-02-28T15:18:53.179222'}, {'id': 327, 'name': '🏆\xa0Epic: AI-Driven Feature Planning & Estimation', 'description': '<h2><strong>Description:&nbsp;</strong></h2><p>AI assists in refining raw feature requests into</p><p>structured plans, generating PRDs, Epics, User Stories, Acceptance Criteria, and Edge Cases. AI also provides intelligent estimations based on historical data and improves accuracy over time.</p><p></p><hr><h2>## Heading</h2><p></p>', 'task_type': 'Epic', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-27T23:02:31.274292', 'updated_at': '2025-03-03T00:13:33.461344'}, {'id': 386, 'name': 'Test task', 'description': '<p>Testing tiptap editor lkjlk</p><hr><p>Write something</p><hr><p>Write something</p><hr><p></p>', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 284, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 9, 'status': 'In Progress', 'sort_order': 1, 'created_at': '2025-03-01T12:39:07.359868', 'updated_at': '2025-03-04T15:33:53.366530'}, {'id': 359, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-28T15:54:42.242569', 'updated_at': '2025-03-01T02:01:18.851236'}, {'id': 291, 'name': 'Add dropdowns in task list for changing: Assigned to, Estimate, Task Type and Status', 'description': '<p>Write Description task description...</p>', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 1, 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-03-01T22:09:13.882787'}, {'id': 245, 'name': 'Apply Dynamic Sorting and Filtering', 'description': 'Ensure the task list dynamically updates its sorting and filtering after a status change.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'In Progress', 'sort_order': 1, 'created_at': '2025-02-05T12:56:52.818501', 'updated_at': '2025-02-28T00:12:01.504825'}, {'id': 64, 'name': 'Setup project credentials for Google API', 'description': 'Generate client ID and secret from Google API Console for your application.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-03-01T02:01:02.546625'}, {'id': 250, 'name': 'Preserve User Preferences', 'description': 'Persist the user’s chosen view state between sessions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-05T12:58:14.518518', 'updated_at': '2025-02-28T00:11:48.483213'}, {'id': 360, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-28T15:54:58.904932', 'updated_at': '2025-03-01T02:01:18.851237'}, {'id': 249, 'name': 'Define View States', 'description': 'Clearly label and define the view states for hierarchical and flat sorting.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-05T12:58:14.518518', 'updated_at': '2025-02-28T00:11:48.483213'}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'description': '<p>Write your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p>', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-03-03T08:46:23.302934'}, {'id': 266, 'name': 'Highlight the nested tasks', 'description': '<p>lkjlkjlkjlkjlkjlkjWrite your task description...</p><p></p><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-03-03T17:32:52.809368'}, {'id': 67, 'name': 'Test Google OAuth flow', 'description': 'Verify the OAuth flow using test accounts and check the token exchange.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-03-01T02:01:02.546635'}, {'id': 243, 'name': 'Highlight Updated Task', 'description': 'Highlight the updated task in the UI to provide immediate visual feedback.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 2, 'created_at': '2025-02-05T12:56:52.818501', 'updated_at': '2025-02-28T00:12:01.504819'}, {'id': 326, 'name': 'Add dropdown in task list for changing: Project', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-26T22:10:15.209008', 'updated_at': '2025-03-01T02:01:12.498734'}, {'id': 295, 'name': 'Issue: drag and drop errors', 'description': '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-10T09:22:54.461413', 'updated_at': '2025-02-28T00:11:55.301307'}, {'id': 290, 'name': 'issue: error when changing task type and', 'description': 'issue: error when changing task type and parent task before saving', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-10T09:00:03.417734', 'updated_at': '2025-03-01T02:01:18.851234'}, {'id': 257, 'name': 'Update Task API Integration', 'description': "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-05T22:55:49.566819', 'updated_at': '2025-02-28T00:11:57.987011'}, {'id': 66, 'name': 'Setup OAuth scopes for Google API', 'description': 'Determine the required OAuth scopes for your application and add them to the configuration.\nedit', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-03-01T02:01:02.546634'}, {'id': 133, 'name': 'Step 4: Enhance Logging in models.py', 'description': 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nupdating the Task model in the following ways:\n\n1.\tLog Changes to parent_id:\n\t•\tLog changes to parent_id during updates, including old and new values.\n\t2.\tValidate Hierarchy with Logging:\n\t•\tLog detailed messages when validating hierarchy changes, especially for circular dependency checks.\n\nHere’s how the models.py can be updated:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy import func, cast, CheckConstraint\nfrom sqlalchemy.orm import validates\nfrom app.extensions.db import db\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\nclass Task(db.Model):\n    __tablename__ = "task"\n    \n    # Other columns...\n\n    parent_id = db.Column(\n        db.Integer, db.ForeignKey("task.id"), index=True, nullable=True\n    )\n\n    # Relationships\n    parent = db.relationship(\n        "Task", remote_side=[id], back_populates="children", lazy="select"\n    )\n    children = db.relationship(\n        "Task", back_populates="parent", lazy="select"\n    )\n\n    \n\n\n    @staticmethod\n    def _validate_no_circular_references(new_parent_id):\n        """\n        Validates that there are no circular references in the task hierarchy.\n\n        Args:\n            new_parent_id (int): The new parent ID to validate.\n\n        Raises:\n            ValueError: If a circular reference is detected.\n        """\n        visited = set()\n        current_parent_id = new_parent_id\n\n        logger.info(f"Validating circular references for parent ID: {new_parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error(\n                    f"Circular reference detected: Parent ID {current_parent_id} already visited."\n                )\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            # Fetch the next parent_id in the hierarchy\n            parent = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not parent:\n                break  # Exit if no parent is found\n            current_parent_id = parent.parent_id\n\n        logger.info("No circular reference detected.")\n\n    @validates(\'parent_id\', \'task_type\')\n    def validate_task_changes(self, key, value):\n        """\n        Validates changes to \'parent_id\' and \'task_type\'.\n        Ensures hierarchy validity and checks for circular references.\n        """\n        logger.debug(f"Validating {key} change for Task {self.id}: {value}")\n\n        if key == \'parent_id\':\n            # Log changes to parent_id\n            if self.id and value != self.parent_id:\n                logger.info(f"Task {self.id}: Updating \'parent_id\' from {self.parent_id} to {value}")\n\n            # Prevent a task from being its own parent\n            if value and value == self.id:\n                logger.error("A task cannot be its own parent.")\n                raise ValueError("A task cannot be its own parent.")\n\n            # Check for circular references\n            if value:\n                Task.check_circular_reference(self.id, value)\n\n        elif key == \'task_type\':\n            # Log changes to task_type\n            if self.id and value != self.task_type:\n                logger.info(f"Task {self.id}: Updating \'task_type\' from {self.task_type} to {value}")\n\n        # Check hierarchy rules without triggering further validation\n        if key in [\'parent_id\', \'task_type\']:\n            self._validate_hierarchy_change(key, value)\n\n        logger.info(f"Validation passed for {key}: {value}")\n        return value\n\n    def _validate_hierarchy_change(self, key, value):\n        """\n        Validates hierarchy rules for the task based on `task_type` and `parent_id`.\n        """\n        if key == \'parent_id\' and value:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=value).first()\n            if not parent_task:\n                raise ValueError("Parent task does not exist.")\n\n            logger.debug(f"Validating hierarchy: Task {self.id}, Parent Type: {parent_task.task_type}")\n            if self.task_type == "User Story" and parent_task.task_type != "Epic":\n                raise ValueError("User Stories must have an Epic as a parent.")\n            if self.task_type == "Subtask" and parent_task.task_type != "User Story":\n                raise ValueError("Subtasks must have a User Story as a parent.")\n\n        elif key == \'task_type\' and self.parent_id:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=self.parent_id).first()\n            if parent_task:\n                logger.debug(f"Validating hierarchy: Task Type: {value}, Parent Type: {parent_task.task_type}")\n                if value == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError("User Stories must have an Epic as a parent.")\n                if value == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError("Subtasks must have a User Story as a parent.")\n\n        logger.info(f"Hierarchy validation passed for Task {self.id if self.id else \'New Task\'}.")\n\n    @staticmethod\n    def check_circular_reference(task_id, parent_id):\n        """\n        Iteratively checks for circular references in the task hierarchy.\n        Prevents stack overflow on deep hierarchies.\n        """\n        visited = set()\n        current_parent_id = parent_id\n\n        logger.info(f"Checking circular reference for Task {task_id} with Parent ID: {parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error("Circular reference detected!")\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            if current_parent_id == task_id:\n                logger.error("A task cannot be its own ancestor.")\n                raise ValueError("A task cannot be its own ancestor.")\n\n            # Fetch the next parent_id in the hierarchy\n            task = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not task:\n                break\n            current_parent_id = task.parent_id\n\n        logger.info("Circular reference check passed.")\n```\nKey Enhancements:\n\t1.\tlog_and_validate_parent_id_change:\n\t•\tLogs the old and new parent_id whenever it changes.\n\t•\tEnsures no circular references are introduced.\n\t2.\t_validate_no_circular_references:\n\t•\tValidates the parent_id field to prevent circular dependencies.\n\t•\tLogs progress and raises detailed errors if violations occur.\n\t3.\tlog_and_validate_task_type_change:\n\t•\tLogs changes to task_type with the old and new values.\n\t•\tRevalidates hierarchy rules when task_type changes.\n\t4.\tDetailed Logging for Circular Reference Validation:\n\t•\t_validate_no_circular_references and check_circular_reference methods log every step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t•\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 4, 'created_at': '2025-01-15T09:44:08.340041', 'updated_at': '2025-03-01T02:01:18.851231'}, {'id': 264, 'name': 'Close all / Open all childtasks', 'description': '<p>Added new description check other tab</p><p></p><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 7, 'status': 'Not Started', 'sort_order': 4, 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-03-03T07:43:17.298288'}, {'id': 328, 'name': '🟢 User Story 1: AI-Generated Feature Refinement\xa0(8 Story Points)', 'description': 'As a\xa0product manager,\xa0I want\xa0AI to refine raw feature requests into structured PRDs, Epics, and User Stories,\xa0So that\xa0I can quickly turn ideas into actionable tasks.\n\n', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 5, 'created_at': '2025-02-27T23:09:37.421629', 'updated_at': '2025-03-03T06:26:25.726905'}, {'id': 287, 'name': 'When moving a parent item to another project make sure the subtasks are moved as well', 'description': '', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 5, 'created_at': '2025-02-10T08:48:31.986870', 'updated_at': '2025-03-01T02:01:12.498732'}, {'id': 132, 'name': 'Step 1: Update tasks_table_interactions.js', 'description': '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the map for efficient parent-child relationship lookups instead of DOM traversal.\n\n```\nexport const TaskManager = {\n    init: function (csrfToken) {\n        this.csrfToken = csrfToken;\n        this.initTaskParentMap(); // Initialize the map\n        this.initDragAndDrop(); // Initialize drag-and-drop functionality\n    },\n\n    // Initialize a global map for task relationships\n    taskParentMap: new Map(),\n\n    // Build the taskParentMap from the DOM\n    initTaskParentMap: function () {\n        console.log("Initializing Task Parent Map...");\n        const rows = document.querySelectorAll("tr[data-task-id]");\n\n        rows.forEach((row) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = parseInt(row.dataset.parentId, 10) || null;\n            this.taskParentMap.set(taskId, parentId);\n        });\n\n        console.log("Task Parent Map initialized:", Array.from(this.taskParentMap.entries()));\n    },\n\n    // Update the map dynamically after drag-and-drop\n    updateTaskParentMap: function (taskId, parentId) {\n        console.log(`Updating Task Parent Map: Task ${taskId} -> Parent ${parentId}`);\n        this.taskParentMap.set(taskId, parentId);\n    },\n\n    initDragAndDrop: function () {\n        if (window.isDragAndDropInitialized) {\n            console.log("Drag-and-drop is already initialized.");\n            return;\n        }\n\n        console.log("Initializing drag-and-drop within TaskManager...");\n\n        const tableBody = document.querySelector("tbody");\n        if (!tableBody) {\n            console.warn("Task table body not found for drag-and-drop initialization");\n            return;\n        }\n\n        // Initialize Sortable.js for drag-and-drop functionality\n        Sortable.create(tableBody, {\n            handle: ".task-row", // Only draggable via `.task-row` elements\n            animation: 150, // Smooth animation\n            filter: ".task-open-link", // Prevent dragging on task links\n            preventOnFilter: true, // Prevent drag if filtered element is clicked\n            onEnd: async (event) => {\n                try {\n                    console.log("Drag-and-drop operation started...");\n                    const rows = Array.from(event.from.querySelectorAll(".task-row"));\n                    const reorderedTasks = [];\n\n                    rows.forEach((row, index) => {\n                        const taskId = parseInt(row.dataset.taskId, 10);\n                        let parentId = null;\n\n                        // Get the parent ID from the map or fallback to the dataset\n                        if (row.classList.contains("subtask-row")) {\n                            const parentRow = row.previousElementSibling;\n                            parentId = parentRow\n                                ? parseInt(parentRow.dataset.taskId, 10)\n                                : this.taskParentMap.get(taskId) || null;\n                        }\n\n                        // Update the taskParentMap dynamically\n                        this.updateTaskParentMap(taskId, parentId);\n\n                        reorderedTasks.push({\n                            id: taskId,\n                            sort_order: index + 1,\n                            parent_id: parentId,\n                        });\n                    });\n\n                    console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n                    console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n                    // Send the payload to the backend\n                    const response = await fetch("/tasks/reorder_subtasks", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                            "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n                        },\n                        body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n                    });\n\n                    if (!response.ok) {\n                        const errorData = await response.json();\n                        console.error("Error reordering tasks:", errorData);\n                        alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n                        return;\n                    }\n\n                    const data = await response.json();\n                    console.log("Task reordering successful:", data);\n\n                } catch (error) {\n                    console.error("Error during drag-and-drop operation:", error);\n                    alert("An unexpected error occurred while reordering tasks.");\n                }\n            },\n        });\n\n        window.isDragAndDropInitialized = true;\n        console.log("Drag-and-drop initialized successfully.");\n    },\n};\n```\n\nKey Updates:\n\t1.\tPrecomputed Map (taskParentMap):\n\t•\tThe initTaskParentMap function initializes the map by iterating over DOM elements and mapping each task’s ID to its parent ID.\n\t•\tThe updateTaskParentMap dynamically updates the map when tasks are reordered.\n\t2.\tEfficient Parent Lookup:\n\t•\tThe parentId is derived from the precomputed map rather than DOM traversal.\n\t3.\tBackend Payload:\n\t•\tA structured payload (reorderedTasks) is sent to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t•\tCSRF protection is ensured by passing the token to the request headers.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'sort_order': 5, 'created_at': '2025-01-15T09:44:08.338301', 'updated_at': '2025-03-01T02:01:18.851229'}, {'id': 134, 'name': 'Step 2: Update the Backend in routes.py', 'description': 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\nPlan for step 2:\n\t1.\tVerify the payload structure:\n\t•\tEnsure that the payload includes all necessary fields (id, sort_order, parent_id) for each task.\n\t•\tValidate that the parent-child relationships in the precomputed map (taskParentMap) are reflected correctly in the payload.\n\t2.\tSubmit the payload to the backend:\n\t•\tEnhance the fetch request in the onEnd function of initDragAndDrop to log detailed submission data.\n\t•\tConfirm the payload integrity in the browser console before submission.\n\t3.\tUpdate backend logging:\n\t•\tAdd logging to /reorder_subtasks in routes.py to confirm receipt of the correct payload and process parent-child updates.\n\t•\tLog before and after database updates for better debugging.\n\n-----\nUpdated tasks_table_interactions.js\n\nReplace this section:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    let parentId = null;\n```\nWith:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    const parentId = this.taskParentMap.get(taskId) || null;\n```\nThe this.taskParentMap provides a precomputed and dynamic mapping of taskId to parentId. By using this map, we avoid relying on DOM traversal logic (row.closest or row.previousElementSibling) during drag-and-drop operations, which can sometimes be unreliable or cumbersome.\n\nFull Revised onEnd section:\n```\nonEnd: async (event) => {\n    try {\n        console.log("Drag-and-drop operation started...");\n        const rows = Array.from(event.from.querySelectorAll(".task-row"));\n        const reorderedTasks = [];\n\n        rows.forEach((row, index) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = this.taskParentMap.get(taskId) || null;\n\n            // Update the taskParentMap dynamically\n            this.updateTaskParentMap(taskId, parentId);\n\n            reorderedTasks.push({\n                id: taskId,\n                sort_order: index + 1,\n                parent_id: parentId,\n            });\n        });\n\n        console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n        console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n        // Send the payload to the backend\n        const response = await fetch("/tasks/reorder_subtasks", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n            },\n            body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error("Error reordering tasks:", errorData);\n            alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n            return;\n        }\n\n        const data = await response.json();\n        console.log("Task reordering successful:", data);\n\n    } catch (error) {\n        console.error("Error during drag-and-drop operation:", error);\n        alert("An unexpected error occurred while reordering tasks.");\n    }\n}\n```\n---------------------------------\nEnsure updates include:\n\t•\tBetter Logging: Adding logs for key events such as database changes and validation results.\n\t•\tInput Validation: Ensure all required fields (id, sort_order, parent_id) exist in the payload.\n\t•\tPost-Commit Validation: Confirm database updates after the commit.\n\t•\tImproved Error Handling: Include specific error messages and consistent rollback mechanisms.\n\nBelow is the revised reorder_subtasks route with descriptive comments for each section:\n```\n@bp.route("/reorder_subtasks", methods=["POST"])\ndef reorder_subtasks():\n    """\n    Reorder subtasks globally or reassign them to a different parent.\n\n    Steps:\n    - Parse and validate input from the frontend.\n    - Update parent-child relationships and sort order in the database.\n    - Commit changes and return a success response.\n    - Handle errors gracefully and provide detailed logs for debugging.\n    """\n    logger.info("Entering reorder_subtasks route...")\n    logger.info(f"Received payload for reordering tasks: {request.json}")\n\n    try:\n        # Step 1: Parse input\n        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered\n        ordered_tasks = request.json.get("ordered_tasks", [])\n\n        logger.debug(f"Parsed parent_id: {parent_id}")\n        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")\n\n        # Step 2: Validate input\n        if not isinstance(ordered_tasks, list) or not all(\n            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task\n            for task in ordered_tasks\n        ):\n            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")\n            return jsonify({\n                "error": "Invalid input format for \'ordered_tasks\'. Each task must include \'id\', \'sort_order\', and \'parent_id\'."\n            }), 400\n\n        # Step 3: Validate parent task (if applicable)\n        if parent_id is not None:\n            parent_task = Task.query.get(parent_id)\n            if not parent_task:\n                logger.error(f"Parent task with ID {parent_id} not found.")\n                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400\n\n        logger.info("Input validation passed. Proceeding with task updates...")\n\n        # Step 4: Process updates for each subtask\n        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation\n\n        for task_data in ordered_tasks:\n            subtask_id = task_data["id"]\n            sort_order = task_data["sort_order"]\n            new_parent_id = task_data["parent_id"]\n\n            # Fetch the subtask from the database\n            subtask = Task.query.get(subtask_id)\n            if not subtask:\n                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")\n                continue\n\n            # Log and update parent_id if it changes\n            if new_parent_id is not None and new_parent_id != subtask.parent_id:\n                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")\n                subtask.parent_id = new_parent_id\n\n            # Update sort order\n            subtask.sort_order = sort_order\n            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")\n\n            # Add to the list of updated subtasks for validation\n            updated_subtasks.append(subtask)\n\n        # Step 5: Commit changes to the database\n        try:\n            db.session.commit()\n            logger.info(f"Subtasks reordered successfully: {[task[\'id\'] for task in ordered_tasks]}")\n        except Exception as e:\n            logger.error(f"Error committing changes to the database: {str(e)}")\n            db.session.rollback()\n            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500\n\n        # Step 6: Post-commit validation\n        for subtask in updated_subtasks:\n            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")\n            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")\n\n        # Step 7: Return success response\n        return jsonify({\n            "success": True,\n            "message": "Subtasks reordered successfully.",\n            "updated_subtasks": [subtask.id for subtask in updated_subtasks]\n        }), 200\n\n    except Exception as e:\n        # Step 8: Handle unexpected errors\n        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)\n        db.session.rollback()\n        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500\n```\nKey Changes and Descriptive Comments\n\t1.\tInput Parsing:\n\t•\tExtracts parent_id and ordered_tasks from the request payload.\n\t•\tLogs the parsed values for debugging.\n\t2.\tInput Validation:\n\t•\tEnsures ordered_tasks is a list of dictionaries with the required keys.\n\t•\tValidates parent_id if provided, ensuring the parent task exists in the database.\n\t3.\tUpdate Processing:\n\t•\tIterates through ordered_tasks, updating each task’s parent_id and sort_order.\n\t•\tLogs changes for each task.\n\t4.\tDatabase Commit:\n\t•\tCommits all updates in a single transaction.\n\t•\tLogs success or rolls back changes in case of an error.\n\t5.\tPost-Commit Validation:\n\t•\tVerifies that the parent_id and sort_order changes were successfully saved to the database.\n\t6.\tError Handling:\n\t•\tCaptures and logs exceptions during processing or committing.\n\t•\tProvides meaningful error messages to the frontend.\n\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'sort_order': 6, 'created_at': '2025-01-15T09:46:29.348853', 'updated_at': '2025-03-01T02:01:18.851232'}, {'id': 286, 'name': 'Implement abels/tags', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 6, 'created_at': '2025-02-10T08:46:23.985620', 'updated_at': '2025-03-01T02:01:12.498730'}, {'id': 296, 'name': 'issue: contributor is lost after updating task', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 7, 'created_at': '2025-02-10T09:26:43.881947', 'updated_at': '2025-02-28T00:11:55.301308'}, {'id': 131, 'name': 'Step 5: Update utils.py', 'description': 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nChanges to Make:\n\t1.\tEnhance Task Filtering:\n\t•\tEnsure the filters handle parent-child relationships explicitly.\n\t•\tAdd options to include or exclude subtasks in queries.\n\t2.\tUtility Function for Debugging Parent-Child Relationships:\n\t•\tProvide a function to generate a map or list of parent-child relationships for debugging purposes.\n\t3.\tValidation Functions:\n\t•\tAdd a utility function to validate parent-child relationships and ensure no circular dependencies.\n\nUpdated utils.py Code:\n```\nimport logging\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import joinedload\nfrom app.extensions.db import db\nfrom app.tasks.models import Task\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\n\nclass TaskService:\n    @staticmethod\n    def filter_tasks(filters=None, include_subtasks=True, page=None, per_page=None):\n        """\n        Dynamically filters tasks with an option to include or exclude subtasks.\n\n        Args:\n            filters (dict): Filtering criteria.\n            include_subtasks (bool): Whether to include subtasks in the query.\n            page (int, optional): Page number for pagination.\n            per_page (int, optional): Items per page for pagination.\n\n        Returns:\n            Query or Pagination: A SQLAlchemy query object or paginated results.\n        """\n        query = Task.query.options(\n            db.joinedload(Task.project).joinedload(Project.contributors),\n            db.joinedload(Task.contributor),\n            db.joinedload(Task.children),\n        ).order_by(Task.sort_order)\n\n        if filters:\n            logger.debug(f"Applying filters: {filters}")\n\n            # Apply standard filters\n            if "is_archived" in filters:\n                query = query.filter(Task.is_archived == filters["is_archived"])\n            if "project_id" in filters:\n                query = query.filter(Task.project_id == filters["project_id"])\n            if "task_type" in filters:\n                if isinstance(filters["task_type"], list):\n                    query = query.filter(Task.task_type.in_(filters["task_type"]))\n                else:\n                    query = query.filter(Task.task_type == filters["task_type"])\n            if "completion_status" in filters:\n                completion_map = {"completed": True, "in_progress": False}\n                if filters["completion_status"] in completion_map:\n                    query = query.filter(Task.completed == completion_map[filters["completion_status"]])\n\n            # Optionally exclude subtasks\n            if not include_subtasks:\n                query = query.filter(Task.task_type != "Subtask")\n\n        logger.debug(f"Generated query: {query}")\n\n        # Pagination\n        if page and per_page:\n            return query.paginate(page=page, per_page=per_page, error_out=False)\n        return query\n\n    @staticmethod\n    def debug_parent_child_relationships(project_id=None):\n        """\n        Generates a debug map of parent-child relationships for all tasks.\n\n        Args:\n            project_id (int, optional): Restrict to tasks from a specific project.\n\n        Returns:\n            dict: A dictionary mapping parent IDs to their child task IDs.\n        """\n        query = Task.query\n        if project_id:\n            query = query.filter(Task.project_id == project_id)\n\n        tasks = query.options(\n            db.load_only(Task.id, Task.parent_id)\n        ).all()\n\n        relationship_map = {}\n        for task in tasks:\n            if task.parent_id not in relationship_map:\n                relationship_map[task.parent_id] = []\n            relationship_map[task.parent_id].append(task.id)\n\n        logger.debug(f"Parent-Child Relationship Map: {relationship_map}")\n        return relationship_map\n\n    @staticmethod\n    def validate_parent_child_relationships():\n        """\n        Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.\n\n        Raises:\n            ValueError: If invalid relationships are detected.\n        """\n        tasks = Task.query.options(db.joinedload(Task.parent)).all()\n\n        for task in tasks:\n            if task.parent_id:\n                parent_task = task.parent\n                if not parent_task:\n                    raise ValueError(f"Task {task.id} has an invalid parent ID {task.parent_id}.")\n\n                # Validate hierarchy rules\n                if task.task_type == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError(f"User Story {task.id} must have an Epic as its parent.")\n                if task.task_type == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError(f"Subtask {task.id} must have a User Story as its parent.")\n\n        logger.info("All parent-child relationships are valid.")\n\n    @staticmethod\n    def get_all_task_ids_with_parents():\n        """\n        Returns a flat list of tasks with their parent IDs for debugging.\n\n        Returns:\n            list: A list of tuples (task_id, parent_id).\n        """\n        tasks = Task.query.with_entities(Task.id, Task.parent_id).all()\n        logger.debug(f"Task IDs with Parent IDs: {tasks}")\n        return tasks\n```\n\n\nExplanation of Changes:\n\t1.\tfilter_tasks Enhancements:\n\t•\tAdded include_subtasks parameter to optionally exclude subtasks from the query.\n\t2.\tdebug_parent_child_relationships:\n\t•\tCreates a parent-child relationship map for debugging purposes.\n\t3.\tvalidate_parent_child_relationships:\n\t•\tIterates through all tasks to validate parent-child hierarchy and ensures no invalid relationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t•\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 7, 'created_at': '2025-01-15T09:41:28.091824', 'updated_at': '2025-03-01T02:01:18.851223'}, {'id': 135, 'name': 'Step 3: Update list.html', 'description': 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already includes everything needed. No required changes.\n\nHere´s the relevant section of list.html:\n\n```\n<tr id="task-{{ task.id }}"\n                class="task-row {% if task.task_type == \'Subtask\' %}subtask-row{% elif task.task_type == \'User Story\' %}user-story-row{% elif task.task_type == \'Epic\' %}epic-row{% endif %}"\n                style="background-color: \n                {% if task.task_type == \'Subtask\' %}\n                    rgba(200, 230, 255, 0.5); /* Light blue for Subtask */\n                {% elif task.task_type == \'User Story\' %}\n                    rgba(255, 255, 200, 0.5); /* Light yellow for User Story */\n                {% elif task.task_type == \'Epic\' %}\n                    rgba(255, 200, 200, 0.5); /* Light red for Epic */\n                {% else %}\n                    rgba(240, 240, 240, 1); /* Default light gray */\n                {% endif %};"\n                data-task-id="{{ task.id }}"\n                data-parent-id="{{ task.parent_id or \'\' }}"\n                data-level="{{ depth }}">\n                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>\n                <td>\n                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}\n                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}" aria-label="Toggle details for task {{ task.name }}">\n                        <i class="bi bi-chevron-right"></i>\n                    </button>\n                    {% endif %}\n                </td>\n                <td class="fw-medium fs-6 \n                {% if task.task_type == \'Epic\' %}\n                    epic-cell\n                {% elif task.task_type == \'User Story\' %}\n                    user-story-cell\n                {% elif task.task_type == \'Subtask\' %}\n                    subtask-cell\n                {% endif %}" \n                style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">\n                <span class="bi fs-6\n                {% if task.task_type == \'Epic\' %}\n                    bi-circle-fill\n                {% elif task.task_type == \'User Story\' %}\n                    bi-circle-half\n                {% elif task.task_type == \'Subtask\' %}\n                    bi-circle\n                {% endif %}">\n                </span>\n                {{ task.name }}\n                <small class="text-muted fw-light">\n                    (Parent-ID: {{ task.parent_id or \'None\' }})\n                </small>\n                <!-- Open Link -->\n                <a href="#" class="task-open-link" data-task-id="{{ task.id }}">\n                    <i class="bi bi-arrows-angle-expand" style="font-size: 0.8rem; color: white;"></i>\n                    Open\n                </a>\n            </td>\n                <td class="fw-light fs-6">\n                    <small class>\n                    LAC-{{ task.id }}\n                    </small>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light text-bg-secondary">\n                        {{ task.project if task.project else "Unknown Project" }}\n                    </span>\n                </td>\n                <td class="fs-6" data-contributor-column>{{ task.assigned_to if task.assigned_to else "Unassigned" }}</td>\n                <td class="fs-6">{{ task.story_points }}</td>\n                <td class="fs-6">\n                    <span class="badge rounded-pill fw-light text-bg-light">\n                        {{ task.task_type }}\n                    </span>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light {% if task.completed %}text-bg-success{% else %}text-bg-warning{% endif %}">\n                        {{ "Completed" if task.completed else "In Progress" }}\n                    </span>\n                </td>\n                <td>\n                    <!-- Delete Icon -->\n                    <button class="btn btn-dark btn-sm delete-task-btn" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .2rem; --bs-btn-font-size: .75rem;" data-task-id="{{ task.id }}" aria-label="Deletes task {{ task.id }}">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n            </tr>\n            {% for child in tasks if child.parent_id == task.id %}\n                {{ render_task(child, tasks, depth + 1) }}\n            {% endfor %}\n            {% endmacro %}\n            \n            <!-- Render top-level tasks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 8, 'created_at': '2025-01-15T09:46:29.349784', 'updated_at': '2025-03-01T02:01:18.851233'}, {'id': 289, 'name': 'issue: parent task is lost when updating task', 'description': '- Summary of the problem and solution\n    \n    **Problem: Parent Task Dropdown Was Not Being Set on Modal Open**\n    \n    The issue was that when opening a task modal, the **parent task dropdown** was not pre-populated with the correct parent task. However, interacting with the dropdown (e.g., clicking on it) would suddenly trigger it to be set correctly. This meant that the dropdown initialization was likely delayed or missing a step in the modal lifecycle.\n    \n    **Debugging Steps and Observations**\n    \n    1. **Task Details Were Fetched Correctly** ✅\n    - The task details, including parent_id, were being fetched from the API successfully.\n    1. **Parent Dropdown Initialization Issues** ❌\n    - The initializeParentDropdown() function was being called, but the dropdown was sometimes **not fully ready** when we tried to set the selected parent task.\n    1. **Clicking the Dropdown Triggered the Parent to Be Set** 🤔\n    - This hinted that the dropdown was not fully ready when setParentDropdown(task.parent_id) was initially called.\n    \n    **Final Solution**\n    \n    1. **Ensuring Dropdown Readiness Before Setting the Parent Task**\n    - We added explicit **delays and checks** to confirm that the dropdown was fully initialized before attempting to set the parent task.\n    \n    Specifically, we:\n    \n    - **Waited for the dropdown to appear in the DOM** using observeParentDropdown().\n    - **Initialized the dropdown** with initializeParentDropdown().\n    - **Waited explicitly for the dropdown to be fully ready** using waitForParentDropdownReady().\n    - **Added a final delay of 200ms** before calling setParentDropdown() to ensure stability.\n    1. **Modifying openTaskModal to Handle Parent Dropdown Setup**\n    - We ensured that initializeParentDropdown() was called **after fetching task details** and before setting the parent task.\n    1. **Confirming the Fix** 🎯\n    - After these fixes, the parent dropdown was **immediately populated** upon opening the modal, without requiring user interaction.\n    \n    **Key Learnings**\n    \n    ✅ **Dropdowns in modals need careful timing** – They might not be ready when you expect them to be.\n    \n    ✅ **Waiting for DOM updates is crucial** – Observing the element ensures it actually exists before interacting with it.\n    \n    ✅ **Explicit delays can prevent race conditions** – A small delay can sometimes resolve timing issues in UI interactions.\n    \n    **Final Result**\n    \n    ✅ The modal now **correctly loads and pre-selects the parent task** without extra clicks! 🎉🚀', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 8, 'created_at': '2025-02-10T08:56:25.273984', 'updated_at': '2025-02-28T00:11:55.301302'}, {'id': 269, 'name': 'Fix styling for sweetalert', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'sort_order': 10, 'created_at': '2025-02-08T15:54:56.717846', 'updated_at': '2025-02-28T00:11:55.301281'}, {'id': 247, 'name': 'Add Temporary Badge', 'description': 'Add a temporary badge or visual indicator to the updated task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 241, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 11, 'created_at': '2025-02-05T12:57:37.151479', 'updated_at': '2025-02-27T08:43:14.054398'}, {'id': 293, 'name': 'Click on title should copy the task title and id to clipboard', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 11, 'created_at': '2025-02-10T09:16:33.508209', 'updated_at': '2025-02-28T00:11:55.301304'}, {'id': 294, 'name': 'Issue: task table filters not working', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 12, 'created_at': '2025-02-10T09:19:21.022598', 'updated_at': '2025-02-28T00:11:55.301306'}, {'id': 240, 'name': 'Update Task Workflow', 'description': 'As a user, I want to update the status of a task so that it reflects the changes in the UI dynamically without reloading the page.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'In Progress', 'sort_order': 14, 'created_at': '2025-02-05T12:54:55.061344', 'updated_at': '2025-02-28T00:11:55.301273'}, {'id': 242, 'name': 'User Control Over Views', 'description': 'As a user, I want to toggle between hierarchical and flat views so that I can switch sorting preferences based on my workflow.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 15, 'created_at': '2025-02-05T12:55:50.108011', 'updated_at': '2025-02-28T00:11:55.301275'}, {'id': 130, 'name': 'Implement the Map of Task Relationships solution for drag-and-drop', 'description': 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 16, 'created_at': '2025-01-15T09:41:28.093022', 'updated_at': '2025-02-28T00:11:55.301271'}, {'id': 246, 'name': 'Toast Notification', 'description': 'Display a toast notification confirming the task status update.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 241, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 16, 'created_at': '2025-02-05T12:57:37.151479', 'updated_at': '2025-02-27T08:43:14.054398'}, {'id': 283, 'name': 'Fix issue with updating task title', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 18, 'created_at': '2025-02-10T08:41:58.769700', 'updated_at': '2025-02-28T00:11:55.301295'}, {'id': 278, 'name': 'Implement search feature for tasks list', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 5, 'project': 'Project Delta', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 4, 'status': 'Not Started', 'sort_order': 19, 'created_at': '2025-02-10T07:36:03.369833', 'updated_at': '2025-02-28T00:11:55.301289'}, {'id': 62, 'name': 'Add OAuth integration for Google Login', 'description': 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 20, 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-02-28T00:11:55.301255'}, {'id': 279, 'name': 'github integration', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 21, 'created_at': '2025-02-10T07:36:38.238202', 'updated_at': '2025-02-28T00:11:55.301290'}, {'id': 65, 'name': 'Implement backend endpoints for Google OAuth', 'description': 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 22, 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-02-28T00:11:55.301260'}, {'id': 241, 'name': 'Provide User Feedback', 'description': 'As a user, I want to receive immediate feedback after updating a task’s status so that I know the update was successful.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 24, 'created_at': '2025-02-05T12:55:19.826398', 'updated_at': '2025-02-28T00:11:55.301274'}, {'id': 41, 'name': 'Implement Searchable Dropdown', 'description': 'As a user, I want a searchable dropdown for parent task assignment.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Completed', 'sort_order': 25, 'created_at': '2025-01-03T09:14:28.285904', 'updated_at': '2025-02-28T00:11:55.301181'}, {'id': 85, 'name': 'Assign multiple contributors to a task', 'description': 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 27, 'created_at': '2025-01-07T19:32:39.466022', 'updated_at': '2025-02-28T00:11:55.301266'}, {'id': 136, 'name': 'Page scroll should stay in position when reloading', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 28, 'created_at': '2025-01-16T18:21:50.187247', 'updated_at': '2025-02-28T00:11:55.301272'}, {'id': 267, 'name': 'Improvements to toggles and nested tasks', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 29, 'created_at': '2025-02-08T02:29:12.464594', 'updated_at': '2025-03-03T14:17:12.065528'}, {'id': 325, 'name': 'Improve task list responsive grid', 'description': '## 🔍 **How Leading Task Management Apps Handle Column Widths**\n\n### 1️⃣ **JIRA (Atlassian)**\n\n🔹 **Dynamic Resizing** (CSS Grid + JavaScript)\n\n- Uses `display: grid` for task tables.\n- Columns are resizable with a drag handle.\n- `grid-template-columns: auto 1fr auto;` for flexibility.\n- **Approach**: Fixed + flexible widths with an adaptive UI.\n\n---\n\n### 2️⃣ **Monday.com**\n\n🔹 **Flexbox-Based Table**\n\n- Uses `display: flex;` instead of `grid` for more control.\n- Columns use **`flex-grow`** to expand dynamically.\n- Drag handles allow users to resize columns.\n- **Approach**: **JavaScript-based column width management** to allow user customization.\n\n---\n\n### 3️⃣ **Asana**\n\n🔹 **Hybrid (Flexbox + JavaScript)**\n\n- Uses **CSS flexbox** for flexible layout.\n- Users can resize columns by dragging.\n- `min-width: 120px;` ensures usability.\n- **Approach**: A combination of `flex` and `min-width` to ensure usability on smaller screens.\n\n---\n\n### 4️⃣ **Linear**\n\n🔹 **CSS Grid with `fr` Units**\n\n- Uses a modern **CSS Grid** approach:\n    \n    ```css\n    grid-template-columns: auto 1fr auto;\n    ```\n    \n- Dynamically adjusts the width of columns **based on content**.\n- Uses `grid-template-columns: minmax(150px, 2fr) 3fr 1fr;` for controlled column expansion.\n- **Approach**: Minimalist UI with focus on speed and responsiveness.\n\n---\n\n### 5️⃣ **Shortcut**\n\n🔹 **Similar to Jira (Resizable Columns)**\n\n- Uses **CSS Grid + JavaScript-based resizing**.\n- Stores user preferences (column order, width) in **local storage**.\n- **Approach**: Persistent column sizes per user, allowing for a **customizable layout**.\n\n---\n\n## ✅ **What’s the Best Approach for Our App?**\n\n### 🎯 **Option 1: CSS Grid (Recommended)**\n\n```css\ngrid-template-columns: 1fr 2fr 1fr;\n```\n\nPros:\n✔ **Modern**\n\n✔ **Auto-resizes based on content**\n\n✔ **Easy to manage**\n\n---\n\n### 🎯 **Option 2: Flexbox (For More Control)**\n\n```css\ndisplay: flex;\nflex-grow: 1;\nmin-width: 120px;\n```\n\nPros:\n✔ **More control over column shrinking/growing**\n\n✔ **Easier to make resizable**\n\n✔ **Ideal for draggable column resizing**\n\n---\n\n### 🎯 **Option 3: JavaScript-Powered Resizing (Advanced)**\n\n- Uses `grid-template-columns` but **lets users drag & resize**.\n- Stores **column widths in local storage**.\n- Uses `ResizeObserver` to listen for changes.\n\nPros:\n✔ **User-friendly (lets users resize columns)**\n\n✔ **Persistent user preferences**\n\n✔ **Great for complex task management apps**\n\n---\n\n## 🔥 **What’s the Best Choice for Us?**\n\n- If you want **simple auto-adjusting columns**, go with **CSS Grid** (`fr` units).\n- If you need **manual resizing**, use **Flexbox + JavaScript**.\n- If you want **fully customizable layouts**, use **JavaScript-powered resizing** like Jira or Monday.\n\nWould you like me to **implement resizable columns** with JavaScript? 🚀', 'task_type': 'Epic', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'sort_order': 30, 'created_at': '2025-02-25T00:02:51.810711', 'updated_at': '2025-03-03T14:17:02.484796'}, {'id': 274, 'name': 'Add support for goals, initiatives, okr´s', 'description': 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n\nölkasdölkk', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P1', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 31, 'created_at': '2025-02-10T00:46:27.204912', 'updated_at': '2025-02-28T00:11:55.301284'}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 32, 'created_at': '2025-02-10T08:41:17.786154', 'updated_at': '2025-03-03T14:16:41.747486'}, {'id': 63, 'name': 'Add OAuth integration for GitHub Login', 'description': 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'sort_order': 32, 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-02-27T08:43:14.054354'}, {'id': 276, 'name': 'Add support for priority', 'description': 'ffasdlkjlkj\nljkkjlkj', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P0', 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 33, 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-28T00:11:55.301286'}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'description': 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- Custom status\n-- Custom status\n- In Progress\n-- Custom status\n-- Custom status\n-- Custom status\n- Completed\n-- Custom status\n-- Custom status\n\n2. How can we track a task through different stages and save the sequence of events or stages the task has gone through?\nI´m thinking it could be good for mapping out processes, identifying bottlenecks and provide valuable insights while improving and streamlining workflows.\n- Stages\n- Contacts taken\n- Respons time \n- Time to action after responses\n- Dependencies\n\nNeed to be able to record every action related to this action.\nCommunication integrations\n- Slack\n- Email\n- Text messages\n- Phonecalls\n- Calendar events, meetings\n- Zoom, Google meet, Teams etc..\n\n\n2. Set custom statuses per project (can use tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 34, 'created_at': '2025-02-10T07:16:03.352588', 'updated_at': '2025-03-03T14:16:31.129766'}, {'id': 68, 'name': 'Register application in GitHub Developer Console', 'description': 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 35, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-02-27T08:43:14.054358'}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'description': 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be lost"\nOR\n\nIs it possible, and is it desireable to keep parent child relationships across projects?\nSo that a parent can be in one project but the child tasks can be in different projects?\n\nLets say \nParent epic is \n"Internationalisation"\nChild user stories are\n- Timezones\n- Language\n- Currency\n- Day, Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 35, 'created_at': '2025-02-10T08:54:36.297869', 'updated_at': '2025-03-03T14:16:24.364985'}, {'id': 284, 'name': 'Add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 36, 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-28T00:11:55.301296'}, {'id': 281, 'name': 'Add a page for roadmap', 'description': 'Add some sort of high level plan that aims to keep PM/PO´s on track and not get lost into the details of an overwhelming large backlog', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 37, 'created_at': '2025-02-10T08:27:01.218606', 'updated_at': '2025-02-28T00:11:55.301293'}, {'id': 69, 'name': 'Handle callback from GitHub', 'description': 'Implement the callback endpoint to process the authorization code from GitHub.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 38, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-02-26T21:53:17.041822'}, {'id': 273, 'name': 'Disable parent task selector in epics', 'description': 'and add text, Epic can´t have parent tasks', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 38, 'created_at': '2025-02-10T00:45:20.740910', 'updated_at': '2025-02-28T00:11:55.301283'}, {'id': 280, 'name': 'logging (task and project history)', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 39, 'created_at': '2025-02-10T07:37:44.435112', 'updated_at': '2025-02-28T00:11:55.301291'}, {'id': 275, 'name': 'Add support for sprints/cycles', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 40, 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-28T00:11:55.301285'}, {'id': 100, 'name': '1.1 User Registration', 'description': '<blockquote><p>As a user, I want to register with a username, email, and password so that I can create an account and access the system. </p></blockquote><p>**Acceptance Criteria:** </p><ul><li><p>• User can input valid username, email, and password.</p></li><li><p>• Username and email must be unique. </p></li><li><p>• Errors are displayed for invalid inputs or duplicate accounts. </p></li><li><p>• Passwords must meet complexity requirements and be securely stored. </p></li><li><p>• Successful registration redirects users to a login page.</p></li></ul><hr><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 41, 'created_at': '2025-01-07T19:59:09.044667', 'updated_at': '2025-03-03T14:20:10.801828'}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'description': 'kkkkkkkjjjjj\nlkajdlökjsdfölkjsdfölkjdf', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 41, 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-28T00:11:55.301297'}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'description': 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitHub Login involves integrating OAuth 2.0, which both services support. The complexity depends on your app’s existing setup, frameworks, and experience with third-party authentication. Below is a breakdown:\n\nKey Steps for Implementing Google or GitHub Login\n\t1.\tSet Up OAuth Credentials:\n\t•\tRegister your application in the Google Cloud Console or GitHub Developer Settings.\n\t•\tObtain the client ID and client secret.\n\t2.\tInstall Required Libraries:\n\t•\tUse a library for OAuth (e.g., flask-oauthlib, python-social-auth, or authlib).\n\t•\tPopular frameworks like Flask and Django already have robust integrations for OAuth providers.\n\t3.\tBackend Configuration:\n\t•\tImplement an endpoint to handle the OAuth flow (/auth/login/google or /auth/login/github).\n\t•\tConfigure your app to send users to Google or GitHub’s authentication page.\n\t•\tHandle the OAuth callback to exchange the authorization code for an access token.\n\t•\tVerify the token and fetch user information (e.g., email, name).\n\t4.\tLink OAuth to User Registration:\n\t•\tOn successful login, create or retrieve a user in your database.\n\t•\tStore the user’s details like email, OAuth provider ID, and access token.\n\t5.\tFrontend Integration (if applicable):\n\t•\tAdd “Login with Google” or “Login with GitHub” buttons.\n\t•\tRedirect to your backend’s OAuth endpoint when clicked.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 42, 'created_at': '2025-01-07T12:15:54.291625', 'updated_at': '2025-02-28T00:11:55.301262'}, {'id': 107, 'name': '1.1.1 Database Changes for User Registration', 'description': '<p>1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.</p><p></p><hr><p>Adding text</p><pre><code>CREATE TABLE public.users ( id SERIAL PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL, created_at TIMESTAMP DEFAULT NOW(), updated_at TIMESTAMP DEFAULT NOW() );</code></pre><p></p>', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 42, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-03-03T20:49:45.725711'}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'description': 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 18, 'status': 'Not Started', 'sort_order': 43, 'created_at': '2025-01-07T19:53:50.085064', 'updated_at': '2025-02-28T00:11:55.301267'}, {'id': 61, 'name': 'Parent task assignment', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'sort_order': 44, 'created_at': '2025-01-04T22:31:45.205815', 'updated_at': '2025-02-28T00:11:55.301224'}, {'id': 108, 'name': '1.1.2 Backend API for Registration', 'description': '•\tCreate an endpoint POST /api/register:\n•\tValidate input fields.\n•\tHash the password using bcrypt or argon2.\n•\tInsert the user into the users table.\n•\tReturn success/failure responses.\ndddhfff\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 44, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-27T08:43:14.054375'}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t•\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t•\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 45, 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-02-28T00:11:55.301265'}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'description': 'PRD: Define roles and permissions to restrict access. Roles include admin, developer, and viewer. Implement middleware for access control checks.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 46, 'created_at': '2025-01-07T19:54:09.204981', 'updated_at': '2025-02-28T00:11:55.301268'}, {'id': 112, 'name': '1.2.2 Frontend Login Page', 'description': 'Develop a frontend form for user login with email and password inputs.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 47, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054377'}, {'id': 83, 'name': 'Notifications', 'description': 'Implement sending notifications to selected people triggered by events.\nCustomizing messages:\nPossibility to adjust how detailed the information should be and what level of technical difficulty the language can contain. Integration to LMS that tailors messages to different target groups and then sends the appropriate version to the appropriate target group.\n\n\n\n- Ready for Release\n   - Send documentation of new feature to support and customer success team\n      - Add technical documentation as file in documentation library.\n      - User documentation\n      - Create and send feature description to Sales & Marketing dep.\n      - Create and send feature description and estimation of added value for company and customer to Investors.\n   - Create and publish release notes online and in inline message system.\n\nRead more: https://www.notion.so/lacunamedia/Create-and-send-messages-triggered-by-events-174979257fc08022b18bc76d3b28a4b3?pvs=4', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 47, 'created_at': '2025-01-07T16:10:54.030609', 'updated_at': '2025-02-28T00:11:55.301263'}, {'id': 99, 'name': 'Enhance User Account Management', 'description': 'PRD: Provide additional account management features for users and admins. Includes profile management, password reset functionality, and audit logging.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'sort_order': 48, 'created_at': '2025-01-07T19:54:20.692949', 'updated_at': '2025-02-28T00:11:55.301269'}, {'id': 109, 'name': '1.1.3 Create Frontend Registration Page', 'description': 'Develop a frontend form to collect user registration details.\n•\tAdd a form for username, email, and password inputs.\n•\tUse client-side validation (e.g., email format).\n•\tSend a POST request to /api/register.\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 49, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-27T08:43:14.054375'}, {'id': 110, 'name': '1.1.4 Unit Tests for Registration', 'description': 'Write unit tests for:\n\n•\tValid registration.\n•\tDuplicate username/email scenarios.\n•\tInvalid input handling.\nff', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 50, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-27T08:43:14.054376'}, {'id': 101, 'name': '1.2 User Login', 'description': 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n•\tUsers can log in with a valid email and password.\n•\tErrors are displayed for invalid credentials.\n•\tSuccessful login stores a session or JWT token.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 52, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054370'}, {'id': 111, 'name': '1.2.1 Backend API for Login', 'description': 'Create POST /api/login endpoint to handle user login.\njjsjj', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 54, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054377'}, {'id': 113, 'name': '1.2.3 Session Management', 'description': 'Implement secure session handling using cookies or JWT.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 55, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054378'}, {'id': 114, 'name': '1.2.4 Unit Tests for Login', 'description': 'Write tests for successful and failed login attempts.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 56, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054379'}, {'id': 106, 'name': 'Password Reset', 'description': 'As a user, I want to reset my password securely using email.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'sort_order': 57, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054373'}, {'id': 128, 'name': 'Frontend Password Reset Page', 'description': 'Develop a page for users to enter a new password using a valid token.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 58, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054388'}, {'id': 129, 'name': 'Testing Password Reset', 'description': 'Write tests for email delivery, token validation, and password updates.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 59, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054389'}, {'id': 102, 'name': 'Logout', 'description': 'As a user, I want to log out so that I can end my session securely.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 60, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054371'}, {'id': 117, 'name': 'Tests for Logout', 'description': 'Verify session invalidation and redirection to the login page.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 61, 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-27T08:43:14.054381'}, {'id': 381, 'name': 'Delete this', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 61, 'created_at': '2025-02-28T23:48:05.992788', 'updated_at': '2025-02-28T23:48:38.311759'}, {'id': 116, 'name': 'Frontend Logout Button', 'description': 'Add a logout button to the UI and handle session clearing.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 62, 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-27T08:43:14.054380'}, {'id': 115, 'name': 'Backend API for Logout', 'description': 'Create POST /api/logout endpoint to invalidate user sessions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 63, 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-27T08:43:14.054379'}, {'id': 45, 'name': 'Display Default Value in Dropdown', 'description': 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 64, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054343'}, {'id': 50, 'name': 'Retrieve Current Parent Task', 'description': 'Retrieve the current parent task’s ID and name from the backend.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Completed', 'sort_order': 65, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054346'}, {'id': 51, 'name': 'Set Default Value', 'description': 'Set the default value in the dropdown based on the retrieved data.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 45, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 1, 'status': 'Not Started', 'sort_order': 66, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054347'}, {'id': 46, 'name': 'Search for Parent Tasks', 'description': 'Allow users to search for tasks dynamically in the dropdown by typing.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'sort_order': 67, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054344'}, {'id': 54, 'name': 'Test Partial Matching', 'description': 'Ensure the search results update in real-time as the user types.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 68, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054349'}, {'id': 47, 'name': 'Handle Large Datasets Efficiently', 'description': 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'sort_order': 69, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054344'}, {'id': 56, 'name': 'Paginate API Responses', 'description': 'Implement server-side filtering and pagination for large datasets.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 70, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054350'}, {'id': 55, 'name': 'Enable Lazy Loading', 'description': 'Enable lazy loading or virtualization in Virtual Select.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 71, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054350'}, {'id': 48, 'name': 'Select and Deselect Parent Tasks', 'description': 'Allow users to select a parent task or deselect by choosing "None."', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 72, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054345'}, {'id': 57, 'name': 'Ensure None Option Availability', 'description': 'Add “None” as a selectable option and ensure it stays at the top of the list.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 73, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054351'}, {'id': 58, 'name': 'Handle Selection Events', 'description': 'Implement event listeners to update the form’s state when the selection changes.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 74, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054352'}, {'id': 49, 'name': 'Integrate Dropdown with Task Form', 'description': 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 75, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054346'}, {'id': 383, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 76, 'created_at': '2025-03-01T01:00:27.095399', 'updated_at': '2025-03-01T02:00:27.103602'}, {'id': 376, 'name': 'Subtask test', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 76, 'created_at': '2025-02-28T23:01:44.247988', 'updated_at': '2025-02-28T23:02:00.075567'}, {'id': 59, 'name': 'Bind Dropdown to Form Field', 'description': 'Bind the dropdown to the form’s parent task field.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'In Progress', 'sort_order': 76, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054352'}, {'id': 60, 'name': 'Test Form Submission', 'description': 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 77, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054353'}, {'id': 52, 'name': 'Add Search Box to Dropdown', 'description': 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 78, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054348'}, {'id': 53, 'name': 'Implement AJAX Search', 'description': 'Implement AJAX-based search to fetch tasks dynamically from the backend.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 79, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054348'}, {'id': 42, 'name': 'Choose Dropdown Library', 'description': 'Research and decide on the dropdown library to use.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 80, 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-27T08:43:14.054341'}, {'id': 378, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 80, 'created_at': '2025-02-28T23:17:32.404713', 'updated_at': '2025-03-01T00:17:32.410920'}, {'id': 43, 'name': 'Integrate Dropdown Library', 'description': 'Integrate the chosen dropdown library into the project.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Completed', 'sort_order': 81, 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-27T08:43:14.054342'}, {'id': 90, 'name': 'Update frontend to display and manage multiple contributors', 'description': 'Allow users to view, add, or remove multiple contributors via the UI.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 82, 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-27T08:43:14.054364'}, {'id': 377, 'name': 'Taskade', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 82, 'created_at': '2025-02-28T23:02:24.453543', 'updated_at': '2025-03-03T18:07:16.276655'}, {'id': 88, 'name': 'Update database schema for multiple contributors', 'description': 'Modify the task table to support many-to-many relationships for contributors.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 83, 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-27T08:43:14.054362'}, {'id': 89, 'name': 'Develop backend API for adding contributors to a task', 'description': 'Create endpoints to add, update, and remove contributors for a task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 84, 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-27T08:43:14.054363'}, {'id': 86, 'name': 'Allow designation of task owner', 'description': 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 85, 'created_at': '2025-01-07T19:33:29.330562', 'updated_at': '2025-02-27T08:43:14.054361'}, {'id': 375, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 85, 'created_at': '2025-02-28T22:48:35.594251', 'updated_at': '2025-02-28T23:48:35.676455'}, {'id': 93, 'name': 'Update frontend to manage task ownership', 'description': 'Allow users to assign or update the task owner via the UI.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 86, 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-27T08:43:14.054365'}, {'id': 384, 'name': 'Changed title', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 86, 'created_at': '2025-03-01T12:06:32.303897', 'updated_at': '2025-03-03T18:06:15.844478'}, {'id': 91, 'name': 'Update database schema for task ownership', 'description': 'Add a column or relationship to assign a single owner per task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 87, 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-27T08:43:14.054364'}, {'id': 92, 'name': 'Develop backend API for assigning task owner', 'description': 'Create endpoints to assign or update the owner of a task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 88, 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-27T08:43:14.054365'}, {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 89, 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-02-27T08:43:14.054362'}, {'id': 96, 'name': 'Allow admin users to create and customize contributor roles via frontend', 'description': 'Provide UI functionality for admins to manage contributor roles dynamically.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 90, 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-27T08:43:14.054367'}, {'id': 94, 'name': 'Add database support for contributor roles', 'description': 'Introduce a roles table and link contributors to specific roles for tasks.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 91, 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-27T08:43:14.054366'}, {'id': 95, 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 92, 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-27T08:43:14.054367'}, {'id': 127, 'name': 'Backend API for Password Reset', 'description': 'Create endpoints to handle password reset requests and token validation.\ndfdf\n\nasdasd', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 93, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054387'}, {'id': 126, 'name': 'Email Configuration for Password Reset', 'description': 'Configure email service to send password reset links.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 94, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054387'}, {'id': 104, 'name': 'Middleware for Role Enforcement', 'description': 'As a system, I want to enforce role-based access to specific routes.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 98, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 95, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054372'}, {'id': 122, 'name': 'Testing Role Enforcement', 'description': 'Write tests to ensure proper access control based on roles.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 96, 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-02-27T08:43:14.054384'}, {'id': 121, 'name': 'Develop Role Enforcement Middleware', 'description': 'Implement middleware to check user roles for access control.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 104, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 97, 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-02-27T08:43:14.054383'}, {'id': 105, 'name': 'Profile Management', 'description': 'As a user, I want to update my profile (username, email, password).', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 99, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 98, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054373'}, {'id': 123, 'name': 'Backend API for Profile Management', 'description': 'Create PATCH /api/profile endpoint to update user details.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 99, 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-02-27T08:43:14.054385'}, {'id': 125, 'name': 'Testing Profile Updates', 'description': 'Write tests for profile update functionality.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 100, 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-02-27T08:43:14.054386'}, {'id': 124, 'name': 'Frontend Profile Page', 'description': 'Develop a profile page for editing user details.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 101, 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-02-27T08:43:14.054385'}, {'id': 103, 'name': 'Role Assignment', 'description': 'As an administrator, I want to assign roles to users so that I can control access to certain features.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 98, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 102, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054372'}, {'id': 120, 'name': 'Testing Role Assignment', 'description': 'Write tests to validate role changes and restrictions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 103, 'created_at': '2025-01-07T20:40:58.383687', 'updated_at': '2025-02-27T08:43:14.054383'}, {'id': 119, 'name': 'Backend API for Role Assignment', 'description': 'Create POST /api/assign-role endpoint to manage user roles.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 104, 'created_at': '2025-01-07T20:40:58.383687', 'updated_at': '2025-02-27T08:43:14.054382'}, {'id': 118, 'name': 'Database Changes for Role Assignment', 'description': 'Add a role column to the users table.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 105, 'created_at': '2025-01-07T20:40:58.383687', 'updated_at': '2025-02-27T08:43:14.054381'}, {'id': 44, 'name': 'Test Performance with 500 Tasks', 'description': 'Ensure dropdown performance remains smooth with 500 tasks.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 107, 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-26T21:53:17.041813'}]
2025-03-04 15:39:37,032 DEBUG: Task types: ['all', 'Subtask', 'Epic', 'User Story']
2025-03-04 15:39:37,033 DEBUG: Projects: [<Project Project Alpha (ID: 1)>, <Project Project Beta (ID: 2)>, <Project Project Gamma (ID: 3)>, <Project Project Theta (ID: 4)>, <Project Project Delta (ID: 5)>, <Project PMS - Feature Requests (ID: 7)>, <Project PMS - Backlog (ID: 6)>, <Project Miscellaneous (ID: 19)>]
2025-03-04 15:39:37,034 DEBUG: Tasks response: [{'id': 336, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:07:11.299563', 'updated_at': '2025-02-28T15:07:11.310976'}, {'id': 344, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:16.258493', 'updated_at': '2025-02-28T15:18:16.268248'}, {'id': 342, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:11.944980', 'updated_at': '2025-02-28T15:18:11.954065'}, {'id': 347, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:24:45.846396', 'updated_at': '2025-02-28T15:24:45.860885'}, {'id': 354, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:54:59.543585', 'updated_at': '2025-02-28T15:54:59.553122'}, {'id': 248, 'name': 'Implement Toggle Button', 'description': 'Add a toggle button to switch between hierarchical and flat views.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-05T12:58:14.518518', 'updated_at': '2025-02-28T00:11:48.483207'}, {'id': 350, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:32:49.928206', 'updated_at': '2025-02-28T15:32:49.935531'}, {'id': 338, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:10.122843', 'updated_at': '2025-02-28T15:18:10.128941'}, {'id': 334, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:44:06.347090', 'updated_at': '2025-02-28T14:44:06.354371'}, {'id': 352, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:51:56.533768', 'updated_at': '2025-02-28T15:51:56.563880'}, {'id': 369, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T21:17:46.272998', 'updated_at': '2025-02-28T22:17:46.285417'}, {'id': 351, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:32:58.672570', 'updated_at': '2025-02-28T15:32:58.678298'}, {'id': 341, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:11.691354', 'updated_at': '2025-02-28T15:18:11.699365'}, {'id': 329, 'name': 'Implement an API endpoint for submitting raw feature requests.', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-27T23:13:09.068616', 'updated_at': '2025-03-01T01:00:05.807248'}, {'id': 356, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T15:08:08.061166', 'updated_at': '2025-02-28T16:08:08.066215'}, {'id': 362, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:14:50.969730', 'updated_at': '2025-02-28T19:14:50.979052'}, {'id': 370, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T21:27:30.386959', 'updated_at': '2025-02-28T22:27:30.395572'}, {'id': 353, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:52:04.500938', 'updated_at': '2025-02-28T15:52:04.512331'}, {'id': 244, 'name': 'Scroll to Updated Task', 'description': 'Automatically scroll to the updated task in the list if it’s out of view.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 0, 'created_at': '2025-02-05T12:56:52.818501', 'updated_at': '2025-02-28T00:11:57.987007'}, {'id': 358, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T15:46:04.956844', 'updated_at': '2025-02-28T16:46:04.966511'}, {'id': 366, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:38:39.027061', 'updated_at': '2025-02-28T19:38:39.048248'}, {'id': 367, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:39:25.734101', 'updated_at': '2025-02-28T19:39:25.739322'}, {'id': 340, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:11.061737', 'updated_at': '2025-02-28T15:18:11.075736'}, {'id': 365, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:30:48.877580', 'updated_at': '2025-02-28T19:30:48.887060'}, {'id': 333, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:36:20.683426', 'updated_at': '2025-02-28T14:36:20.691337'}, {'id': 332, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:35:43.663809', 'updated_at': '2025-02-28T14:35:43.673337'}, {'id': 348, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:26:17.632940', 'updated_at': '2025-02-28T15:26:17.642972'}, {'id': 355, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:55:16.105634', 'updated_at': '2025-02-28T15:55:16.131837'}, {'id': 361, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T17:11:52.257703', 'updated_at': '2025-02-28T18:11:52.262071'}, {'id': 337, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:07.626569', 'updated_at': '2025-02-28T15:18:07.632643'}, {'id': 346, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:24:40.311054', 'updated_at': '2025-02-28T15:24:40.322156'}, {'id': 343, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:12.267445', 'updated_at': '2025-02-28T15:18:12.278088'}, {'id': 357, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T15:08:15.356759', 'updated_at': '2025-02-28T16:08:15.371374'}, {'id': 335, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:44:45.530624', 'updated_at': '2025-02-28T14:44:45.542212'}, {'id': 373, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T22:10:59.863170', 'updated_at': '2025-02-28T23:10:59.893542'}, {'id': 292, 'name': 'Issue: assigning contributor does not work', 'description': '<p>### **Summary of problem and solution** The issue was that assigning a contributor to a task via the /tasks//assign_contributor API endpoint resulted in a **400 Bad Request** error. Upon investigation, the following problems were identified: 1. **Missing CSRF Token:** - The request failed due to a missing CSRF token, as shown in the error message: *“Bad Request: The CSRF token is missing.”* - The frontend was not correctly including the CSRF token in the request headers. 1. **JavaScript Error (Undefined CSRF Token Variable):** - The error *“ReferenceError: csrfToken is not defined”* indicated that the CSRF token was not being retrieved properly in the JavaScript code. 1. **Incorrect Fetch Request Headers:** - The fetch request did not include the CSRF token under the correct key (X-CSRFToken). - The script attempted to send the request without properly extracting the CSRF token from the meta tag. ### **Solution** 1. **Include the CSRF Token in the JavaScript Code** The CSRF token was retrieved from the meta tag and used in the request headers: ```jsx // Retrieve CSRF token from meta tag const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\'); ``` This ensures that the CSRF token is correctly fetched and available in the JavaScript scope. 1. **Modify the Fetch Request to Include CSRF Token** The request to assign a contributor was updated to include the token: ```jsx const response = await fetch(`/tasks/${taskId}/assign_contributor`, { method: "POST", headers: { "Content-Type": "application/json", "X-CSRFToken": csrfToken // Include CSRF token }, body: JSON.stringify({ contributor_id: parseInt(contributorId, 10) }), }); ``` - **Ensures the CSRF token is sent in the request headers** so that Flask-WTF does not reject the request. 1. **Verify and Debug Network Requests** - The updated request headers were verified using **Chrome DevTools &gt; Network tab** to ensure the X-CSRFToken was included. - The error messages disappeared, and the contributor assignment request **succeeded with a 200 OK response**. --- ### **Final Outcome** 🚀 The issue was resolved, and contributors can now be assigned successfully to tasks without triggering a CSRF validation error. ### **Key Learnings from This Session** This debugging session covered several important aspects of **web development with Flask and JavaScript**, particularly related to **API requests, CSRF protection, debugging tools, and database interactions**. Here are the key takeaways: --- ### **1. CSRF Protection in API Requests** - **Issue:** The initial error was due to **a missing CSRF token** when making a `POST` request. - **Fix:** The solution was to **retrieve the CSRF token from a meta tag** in the HTML and include it in the request headers. - **Key Learning:** Flask-WTF requires CSRF tokens for form and API submissions to **prevent cross-site request forgery (CSRF) attacks**.✅ Always ensure that API requests include a valid CSRF token. --- ### **2. Debugging JavaScript Fetch Requests** - **Issue:** The JavaScript code was making a fetch request, but the variable `csrfToken` was not properly defined, causing a `ReferenceError`. - **Fix:** Declaring `csrfToken` at the beginning of the script: ```jsx const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\'); ``` - **Key Learning:**✅ JavaScript variables must be defined before they are used.✅ Use browser **developer tools (DevTools) Network tab** to inspect headers, payloads, and responses when debugging API requests. --- ### **3. Structuring Flask Routes for Task Management** - **Issue:** The `assign_contributor` route was failing due to incorrect request payload validation. - **Fix:** Improved the route’s error handling and logging: ```python @bp.route(\'//assign_contributor\', methods=[\'POST\']) def assign_contributor(task_id): try: data = request.get_json() contributor_id = int(data.get(\'contributor_id\', 0)) if not contributor_id: return jsonify({\'error\': \'Valid Contributor ID is required\'}), 400 ``` - **Key Learning:**✅ Always validate incoming data in Flask routes to prevent type errors.✅ Use `request.get_json()` properly and handle missing or incorrect data gracefully. --- ### **4. Utilizing Browser DevTools for Debugging** - **Issue:** The fetch request was failing with a `400 Bad Request`, and the browser console showed `ReferenceError: csrfToken is not defined`. - **Fix:** - Used **Network tab** to inspect the request payload and headers. - Used **Console tab** to catch JavaScript errors early. - **Key Learning:**✅ DevTools is a **critical** tool for diagnosing network request issues.✅ Always **check console errors** before assuming it\'s a backend issue. --- ### **5. Database Queries and ORM Debugging** - **Issue:** Tasks were not being updated correctly, possibly due to missing commit statements. - **Fix:** Ensured that:was executed properly. ```python task.contributor_id = contributor_id db.session.commit() ``` - **Key Learning:**✅ Always call `db.session.commit()` after making changes in SQLAlchemy.✅ Rollback transactions if an error occurs to avoid database inconsistency. --- ### **6. Handling Asynchronous JavaScript Logic** - **Issue:** The `assignContributor` function was executing before the page was fully loaded. - **Fix:** Wrapped it inside a function that ensures elements exist: ``` window.setupContributorAssignment = function () { const assignButton = $("#assign-contributor-btn"); if (!assignButton.length) { setTimeout(setupContributorAssignment, 500); // Retry in 500ms return; } ``` - **Key Learning:**✅ Use `setTimeout` to **retry event binding** when elements are dynamically loaded.✅ Always **check if elements exist before attaching event handlers**. --- ### **7. Best Practices for Flask Logging &amp; Error Handling** - **Issue:** Lack of clear logging when API calls failed. - **Fix:** Added better logging to track failures: ```python logger.info(f"Assigning contributor to task ID {task_id}") try: # Process request... except Exception as e: logger.error(f"Error assigning contributor: {e}") ``` - **Key Learning:**✅ Log **every major step** in API processing to simplify debugging.✅ Differentiate between `logger.info()`, `logger.warning()`, and `logger.error()` based on severity. --- ### **Final Takeaways** 🚀 **Understanding CSRF protection** and **properly structuring API requests** is crucial for secure web applications. 🔍 **Browser DevTools is invaluable** for diagnosing frontend issues, especially in JavaScript. 🐍 **Flask requires proper request validation, database transactions, and logging** to maintain stability. ⚡ **Asynchronous JavaScript must handle dynamic elements carefully** to avoid runtime errors. This session reinforced best practices in **frontend-backend integration, debugging, and security**, making it a great learning experience! 🚀🔥</p>', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 0, 'created_at': '2025-02-10T09:11:12.273779', 'updated_at': '2025-03-04T00:41:24.838143'}, {'id': 265, 'name': 'Smooth transition for toggles', 'description': '<p>Added new description</p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-03-01T15:23:05.271095'}, {'id': 339, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:10.856511', 'updated_at': '2025-02-28T15:18:10.860682'}, {'id': 331, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:35:35.797059', 'updated_at': '2025-02-28T14:35:35.813440'}, {'id': 345, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:53.170926', 'updated_at': '2025-02-28T15:18:53.179222'}, {'id': 327, 'name': '🏆\xa0Epic: AI-Driven Feature Planning & Estimation', 'description': '<h2><strong>Description:&nbsp;</strong></h2><p>AI assists in refining raw feature requests into</p><p>structured plans, generating PRDs, Epics, User Stories, Acceptance Criteria, and Edge Cases. AI also provides intelligent estimations based on historical data and improves accuracy over time.</p><p></p><hr><h2>## Heading</h2><p></p>', 'task_type': 'Epic', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-27T23:02:31.274292', 'updated_at': '2025-03-03T00:13:33.461344'}, {'id': 386, 'name': 'Test task', 'description': '<p>Testing tiptap editor lkjlk</p><hr><p>Write something</p><hr><p>Write something</p><hr><p></p>', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 284, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 9, 'status': 'In Progress', 'sort_order': 1, 'created_at': '2025-03-01T12:39:07.359868', 'updated_at': '2025-03-04T15:33:53.366530'}, {'id': 359, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-28T15:54:42.242569', 'updated_at': '2025-03-01T02:01:18.851236'}, {'id': 291, 'name': 'Add dropdowns in task list for changing: Assigned to, Estimate, Task Type and Status', 'description': '<p>Write Description task description...</p>', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 1, 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-03-01T22:09:13.882787'}, {'id': 245, 'name': 'Apply Dynamic Sorting and Filtering', 'description': 'Ensure the task list dynamically updates its sorting and filtering after a status change.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'In Progress', 'sort_order': 1, 'created_at': '2025-02-05T12:56:52.818501', 'updated_at': '2025-02-28T00:12:01.504825'}, {'id': 64, 'name': 'Setup project credentials for Google API', 'description': 'Generate client ID and secret from Google API Console for your application.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-03-01T02:01:02.546625'}, {'id': 250, 'name': 'Preserve User Preferences', 'description': 'Persist the user’s chosen view state between sessions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-05T12:58:14.518518', 'updated_at': '2025-02-28T00:11:48.483213'}, {'id': 360, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-28T15:54:58.904932', 'updated_at': '2025-03-01T02:01:18.851237'}, {'id': 249, 'name': 'Define View States', 'description': 'Clearly label and define the view states for hierarchical and flat sorting.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-05T12:58:14.518518', 'updated_at': '2025-02-28T00:11:48.483213'}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'description': '<p>Write your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p>', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-03-03T08:46:23.302934'}, {'id': 266, 'name': 'Highlight the nested tasks', 'description': '<p>lkjlkjlkjlkjlkjlkjWrite your task description...</p><p></p><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-03-03T17:32:52.809368'}, {'id': 67, 'name': 'Test Google OAuth flow', 'description': 'Verify the OAuth flow using test accounts and check the token exchange.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-03-01T02:01:02.546635'}, {'id': 243, 'name': 'Highlight Updated Task', 'description': 'Highlight the updated task in the UI to provide immediate visual feedback.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 2, 'created_at': '2025-02-05T12:56:52.818501', 'updated_at': '2025-02-28T00:12:01.504819'}, {'id': 326, 'name': 'Add dropdown in task list for changing: Project', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-26T22:10:15.209008', 'updated_at': '2025-03-01T02:01:12.498734'}, {'id': 295, 'name': 'Issue: drag and drop errors', 'description': '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-10T09:22:54.461413', 'updated_at': '2025-02-28T00:11:55.301307'}, {'id': 290, 'name': 'issue: error when changing task type and', 'description': 'issue: error when changing task type and parent task before saving', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-10T09:00:03.417734', 'updated_at': '2025-03-01T02:01:18.851234'}, {'id': 257, 'name': 'Update Task API Integration', 'description': "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-05T22:55:49.566819', 'updated_at': '2025-02-28T00:11:57.987011'}, {'id': 66, 'name': 'Setup OAuth scopes for Google API', 'description': 'Determine the required OAuth scopes for your application and add them to the configuration.\nedit', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-03-01T02:01:02.546634'}, {'id': 133, 'name': 'Step 4: Enhance Logging in models.py', 'description': 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nupdating the Task model in the following ways:\n\n1.\tLog Changes to parent_id:\n\t•\tLog changes to parent_id during updates, including old and new values.\n\t2.\tValidate Hierarchy with Logging:\n\t•\tLog detailed messages when validating hierarchy changes, especially for circular dependency checks.\n\nHere’s how the models.py can be updated:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy import func, cast, CheckConstraint\nfrom sqlalchemy.orm import validates\nfrom app.extensions.db import db\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\nclass Task(db.Model):\n    __tablename__ = "task"\n    \n    # Other columns...\n\n    parent_id = db.Column(\n        db.Integer, db.ForeignKey("task.id"), index=True, nullable=True\n    )\n\n    # Relationships\n    parent = db.relationship(\n        "Task", remote_side=[id], back_populates="children", lazy="select"\n    )\n    children = db.relationship(\n        "Task", back_populates="parent", lazy="select"\n    )\n\n    \n\n\n    @staticmethod\n    def _validate_no_circular_references(new_parent_id):\n        """\n        Validates that there are no circular references in the task hierarchy.\n\n        Args:\n            new_parent_id (int): The new parent ID to validate.\n\n        Raises:\n            ValueError: If a circular reference is detected.\n        """\n        visited = set()\n        current_parent_id = new_parent_id\n\n        logger.info(f"Validating circular references for parent ID: {new_parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error(\n                    f"Circular reference detected: Parent ID {current_parent_id} already visited."\n                )\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            # Fetch the next parent_id in the hierarchy\n            parent = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not parent:\n                break  # Exit if no parent is found\n            current_parent_id = parent.parent_id\n\n        logger.info("No circular reference detected.")\n\n    @validates(\'parent_id\', \'task_type\')\n    def validate_task_changes(self, key, value):\n        """\n        Validates changes to \'parent_id\' and \'task_type\'.\n        Ensures hierarchy validity and checks for circular references.\n        """\n        logger.debug(f"Validating {key} change for Task {self.id}: {value}")\n\n        if key == \'parent_id\':\n            # Log changes to parent_id\n            if self.id and value != self.parent_id:\n                logger.info(f"Task {self.id}: Updating \'parent_id\' from {self.parent_id} to {value}")\n\n            # Prevent a task from being its own parent\n            if value and value == self.id:\n                logger.error("A task cannot be its own parent.")\n                raise ValueError("A task cannot be its own parent.")\n\n            # Check for circular references\n            if value:\n                Task.check_circular_reference(self.id, value)\n\n        elif key == \'task_type\':\n            # Log changes to task_type\n            if self.id and value != self.task_type:\n                logger.info(f"Task {self.id}: Updating \'task_type\' from {self.task_type} to {value}")\n\n        # Check hierarchy rules without triggering further validation\n        if key in [\'parent_id\', \'task_type\']:\n            self._validate_hierarchy_change(key, value)\n\n        logger.info(f"Validation passed for {key}: {value}")\n        return value\n\n    def _validate_hierarchy_change(self, key, value):\n        """\n        Validates hierarchy rules for the task based on `task_type` and `parent_id`.\n        """\n        if key == \'parent_id\' and value:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=value).first()\n            if not parent_task:\n                raise ValueError("Parent task does not exist.")\n\n            logger.debug(f"Validating hierarchy: Task {self.id}, Parent Type: {parent_task.task_type}")\n            if self.task_type == "User Story" and parent_task.task_type != "Epic":\n                raise ValueError("User Stories must have an Epic as a parent.")\n            if self.task_type == "Subtask" and parent_task.task_type != "User Story":\n                raise ValueError("Subtasks must have a User Story as a parent.")\n\n        elif key == \'task_type\' and self.parent_id:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=self.parent_id).first()\n            if parent_task:\n                logger.debug(f"Validating hierarchy: Task Type: {value}, Parent Type: {parent_task.task_type}")\n                if value == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError("User Stories must have an Epic as a parent.")\n                if value == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError("Subtasks must have a User Story as a parent.")\n\n        logger.info(f"Hierarchy validation passed for Task {self.id if self.id else \'New Task\'}.")\n\n    @staticmethod\n    def check_circular_reference(task_id, parent_id):\n        """\n        Iteratively checks for circular references in the task hierarchy.\n        Prevents stack overflow on deep hierarchies.\n        """\n        visited = set()\n        current_parent_id = parent_id\n\n        logger.info(f"Checking circular reference for Task {task_id} with Parent ID: {parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error("Circular reference detected!")\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            if current_parent_id == task_id:\n                logger.error("A task cannot be its own ancestor.")\n                raise ValueError("A task cannot be its own ancestor.")\n\n            # Fetch the next parent_id in the hierarchy\n            task = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not task:\n                break\n            current_parent_id = task.parent_id\n\n        logger.info("Circular reference check passed.")\n```\nKey Enhancements:\n\t1.\tlog_and_validate_parent_id_change:\n\t•\tLogs the old and new parent_id whenever it changes.\n\t•\tEnsures no circular references are introduced.\n\t2.\t_validate_no_circular_references:\n\t•\tValidates the parent_id field to prevent circular dependencies.\n\t•\tLogs progress and raises detailed errors if violations occur.\n\t3.\tlog_and_validate_task_type_change:\n\t•\tLogs changes to task_type with the old and new values.\n\t•\tRevalidates hierarchy rules when task_type changes.\n\t4.\tDetailed Logging for Circular Reference Validation:\n\t•\t_validate_no_circular_references and check_circular_reference methods log every step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t•\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 4, 'created_at': '2025-01-15T09:44:08.340041', 'updated_at': '2025-03-01T02:01:18.851231'}, {'id': 264, 'name': 'Close all / Open all childtasks', 'description': '<p>Added new description check other tab</p><p></p><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 7, 'status': 'Not Started', 'sort_order': 4, 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-03-03T07:43:17.298288'}, {'id': 328, 'name': '🟢 User Story 1: AI-Generated Feature Refinement\xa0(8 Story Points)', 'description': 'As a\xa0product manager,\xa0I want\xa0AI to refine raw feature requests into structured PRDs, Epics, and User Stories,\xa0So that\xa0I can quickly turn ideas into actionable tasks.\n\n', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 5, 'created_at': '2025-02-27T23:09:37.421629', 'updated_at': '2025-03-03T06:26:25.726905'}, {'id': 287, 'name': 'When moving a parent item to another project make sure the subtasks are moved as well', 'description': '', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 5, 'created_at': '2025-02-10T08:48:31.986870', 'updated_at': '2025-03-01T02:01:12.498732'}, {'id': 132, 'name': 'Step 1: Update tasks_table_interactions.js', 'description': '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the map for efficient parent-child relationship lookups instead of DOM traversal.\n\n```\nexport const TaskManager = {\n    init: function (csrfToken) {\n        this.csrfToken = csrfToken;\n        this.initTaskParentMap(); // Initialize the map\n        this.initDragAndDrop(); // Initialize drag-and-drop functionality\n    },\n\n    // Initialize a global map for task relationships\n    taskParentMap: new Map(),\n\n    // Build the taskParentMap from the DOM\n    initTaskParentMap: function () {\n        console.log("Initializing Task Parent Map...");\n        const rows = document.querySelectorAll("tr[data-task-id]");\n\n        rows.forEach((row) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = parseInt(row.dataset.parentId, 10) || null;\n            this.taskParentMap.set(taskId, parentId);\n        });\n\n        console.log("Task Parent Map initialized:", Array.from(this.taskParentMap.entries()));\n    },\n\n    // Update the map dynamically after drag-and-drop\n    updateTaskParentMap: function (taskId, parentId) {\n        console.log(`Updating Task Parent Map: Task ${taskId} -> Parent ${parentId}`);\n        this.taskParentMap.set(taskId, parentId);\n    },\n\n    initDragAndDrop: function () {\n        if (window.isDragAndDropInitialized) {\n            console.log("Drag-and-drop is already initialized.");\n            return;\n        }\n\n        console.log("Initializing drag-and-drop within TaskManager...");\n\n        const tableBody = document.querySelector("tbody");\n        if (!tableBody) {\n            console.warn("Task table body not found for drag-and-drop initialization");\n            return;\n        }\n\n        // Initialize Sortable.js for drag-and-drop functionality\n        Sortable.create(tableBody, {\n            handle: ".task-row", // Only draggable via `.task-row` elements\n            animation: 150, // Smooth animation\n            filter: ".task-open-link", // Prevent dragging on task links\n            preventOnFilter: true, // Prevent drag if filtered element is clicked\n            onEnd: async (event) => {\n                try {\n                    console.log("Drag-and-drop operation started...");\n                    const rows = Array.from(event.from.querySelectorAll(".task-row"));\n                    const reorderedTasks = [];\n\n                    rows.forEach((row, index) => {\n                        const taskId = parseInt(row.dataset.taskId, 10);\n                        let parentId = null;\n\n                        // Get the parent ID from the map or fallback to the dataset\n                        if (row.classList.contains("subtask-row")) {\n                            const parentRow = row.previousElementSibling;\n                            parentId = parentRow\n                                ? parseInt(parentRow.dataset.taskId, 10)\n                                : this.taskParentMap.get(taskId) || null;\n                        }\n\n                        // Update the taskParentMap dynamically\n                        this.updateTaskParentMap(taskId, parentId);\n\n                        reorderedTasks.push({\n                            id: taskId,\n                            sort_order: index + 1,\n                            parent_id: parentId,\n                        });\n                    });\n\n                    console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n                    console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n                    // Send the payload to the backend\n                    const response = await fetch("/tasks/reorder_subtasks", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                            "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n                        },\n                        body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n                    });\n\n                    if (!response.ok) {\n                        const errorData = await response.json();\n                        console.error("Error reordering tasks:", errorData);\n                        alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n                        return;\n                    }\n\n                    const data = await response.json();\n                    console.log("Task reordering successful:", data);\n\n                } catch (error) {\n                    console.error("Error during drag-and-drop operation:", error);\n                    alert("An unexpected error occurred while reordering tasks.");\n                }\n            },\n        });\n\n        window.isDragAndDropInitialized = true;\n        console.log("Drag-and-drop initialized successfully.");\n    },\n};\n```\n\nKey Updates:\n\t1.\tPrecomputed Map (taskParentMap):\n\t•\tThe initTaskParentMap function initializes the map by iterating over DOM elements and mapping each task’s ID to its parent ID.\n\t•\tThe updateTaskParentMap dynamically updates the map when tasks are reordered.\n\t2.\tEfficient Parent Lookup:\n\t•\tThe parentId is derived from the precomputed map rather than DOM traversal.\n\t3.\tBackend Payload:\n\t•\tA structured payload (reorderedTasks) is sent to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t•\tCSRF protection is ensured by passing the token to the request headers.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'sort_order': 5, 'created_at': '2025-01-15T09:44:08.338301', 'updated_at': '2025-03-01T02:01:18.851229'}, {'id': 134, 'name': 'Step 2: Update the Backend in routes.py', 'description': 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\nPlan for step 2:\n\t1.\tVerify the payload structure:\n\t•\tEnsure that the payload includes all necessary fields (id, sort_order, parent_id) for each task.\n\t•\tValidate that the parent-child relationships in the precomputed map (taskParentMap) are reflected correctly in the payload.\n\t2.\tSubmit the payload to the backend:\n\t•\tEnhance the fetch request in the onEnd function of initDragAndDrop to log detailed submission data.\n\t•\tConfirm the payload integrity in the browser console before submission.\n\t3.\tUpdate backend logging:\n\t•\tAdd logging to /reorder_subtasks in routes.py to confirm receipt of the correct payload and process parent-child updates.\n\t•\tLog before and after database updates for better debugging.\n\n-----\nUpdated tasks_table_interactions.js\n\nReplace this section:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    let parentId = null;\n```\nWith:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    const parentId = this.taskParentMap.get(taskId) || null;\n```\nThe this.taskParentMap provides a precomputed and dynamic mapping of taskId to parentId. By using this map, we avoid relying on DOM traversal logic (row.closest or row.previousElementSibling) during drag-and-drop operations, which can sometimes be unreliable or cumbersome.\n\nFull Revised onEnd section:\n```\nonEnd: async (event) => {\n    try {\n        console.log("Drag-and-drop operation started...");\n        const rows = Array.from(event.from.querySelectorAll(".task-row"));\n        const reorderedTasks = [];\n\n        rows.forEach((row, index) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = this.taskParentMap.get(taskId) || null;\n\n            // Update the taskParentMap dynamically\n            this.updateTaskParentMap(taskId, parentId);\n\n            reorderedTasks.push({\n                id: taskId,\n                sort_order: index + 1,\n                parent_id: parentId,\n            });\n        });\n\n        console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n        console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n        // Send the payload to the backend\n        const response = await fetch("/tasks/reorder_subtasks", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n            },\n            body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error("Error reordering tasks:", errorData);\n            alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n            return;\n        }\n\n        const data = await response.json();\n        console.log("Task reordering successful:", data);\n\n    } catch (error) {\n        console.error("Error during drag-and-drop operation:", error);\n        alert("An unexpected error occurred while reordering tasks.");\n    }\n}\n```\n---------------------------------\nEnsure updates include:\n\t•\tBetter Logging: Adding logs for key events such as database changes and validation results.\n\t•\tInput Validation: Ensure all required fields (id, sort_order, parent_id) exist in the payload.\n\t•\tPost-Commit Validation: Confirm database updates after the commit.\n\t•\tImproved Error Handling: Include specific error messages and consistent rollback mechanisms.\n\nBelow is the revised reorder_subtasks route with descriptive comments for each section:\n```\n@bp.route("/reorder_subtasks", methods=["POST"])\ndef reorder_subtasks():\n    """\n    Reorder subtasks globally or reassign them to a different parent.\n\n    Steps:\n    - Parse and validate input from the frontend.\n    - Update parent-child relationships and sort order in the database.\n    - Commit changes and return a success response.\n    - Handle errors gracefully and provide detailed logs for debugging.\n    """\n    logger.info("Entering reorder_subtasks route...")\n    logger.info(f"Received payload for reordering tasks: {request.json}")\n\n    try:\n        # Step 1: Parse input\n        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered\n        ordered_tasks = request.json.get("ordered_tasks", [])\n\n        logger.debug(f"Parsed parent_id: {parent_id}")\n        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")\n\n        # Step 2: Validate input\n        if not isinstance(ordered_tasks, list) or not all(\n            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task\n            for task in ordered_tasks\n        ):\n            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")\n            return jsonify({\n                "error": "Invalid input format for \'ordered_tasks\'. Each task must include \'id\', \'sort_order\', and \'parent_id\'."\n            }), 400\n\n        # Step 3: Validate parent task (if applicable)\n        if parent_id is not None:\n            parent_task = Task.query.get(parent_id)\n            if not parent_task:\n                logger.error(f"Parent task with ID {parent_id} not found.")\n                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400\n\n        logger.info("Input validation passed. Proceeding with task updates...")\n\n        # Step 4: Process updates for each subtask\n        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation\n\n        for task_data in ordered_tasks:\n            subtask_id = task_data["id"]\n            sort_order = task_data["sort_order"]\n            new_parent_id = task_data["parent_id"]\n\n            # Fetch the subtask from the database\n            subtask = Task.query.get(subtask_id)\n            if not subtask:\n                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")\n                continue\n\n            # Log and update parent_id if it changes\n            if new_parent_id is not None and new_parent_id != subtask.parent_id:\n                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")\n                subtask.parent_id = new_parent_id\n\n            # Update sort order\n            subtask.sort_order = sort_order\n            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")\n\n            # Add to the list of updated subtasks for validation\n            updated_subtasks.append(subtask)\n\n        # Step 5: Commit changes to the database\n        try:\n            db.session.commit()\n            logger.info(f"Subtasks reordered successfully: {[task[\'id\'] for task in ordered_tasks]}")\n        except Exception as e:\n            logger.error(f"Error committing changes to the database: {str(e)}")\n            db.session.rollback()\n            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500\n\n        # Step 6: Post-commit validation\n        for subtask in updated_subtasks:\n            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")\n            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")\n\n        # Step 7: Return success response\n        return jsonify({\n            "success": True,\n            "message": "Subtasks reordered successfully.",\n            "updated_subtasks": [subtask.id for subtask in updated_subtasks]\n        }), 200\n\n    except Exception as e:\n        # Step 8: Handle unexpected errors\n        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)\n        db.session.rollback()\n        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500\n```\nKey Changes and Descriptive Comments\n\t1.\tInput Parsing:\n\t•\tExtracts parent_id and ordered_tasks from the request payload.\n\t•\tLogs the parsed values for debugging.\n\t2.\tInput Validation:\n\t•\tEnsures ordered_tasks is a list of dictionaries with the required keys.\n\t•\tValidates parent_id if provided, ensuring the parent task exists in the database.\n\t3.\tUpdate Processing:\n\t•\tIterates through ordered_tasks, updating each task’s parent_id and sort_order.\n\t•\tLogs changes for each task.\n\t4.\tDatabase Commit:\n\t•\tCommits all updates in a single transaction.\n\t•\tLogs success or rolls back changes in case of an error.\n\t5.\tPost-Commit Validation:\n\t•\tVerifies that the parent_id and sort_order changes were successfully saved to the database.\n\t6.\tError Handling:\n\t•\tCaptures and logs exceptions during processing or committing.\n\t•\tProvides meaningful error messages to the frontend.\n\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'sort_order': 6, 'created_at': '2025-01-15T09:46:29.348853', 'updated_at': '2025-03-01T02:01:18.851232'}, {'id': 286, 'name': 'Implement abels/tags', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 6, 'created_at': '2025-02-10T08:46:23.985620', 'updated_at': '2025-03-01T02:01:12.498730'}, {'id': 296, 'name': 'issue: contributor is lost after updating task', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 7, 'created_at': '2025-02-10T09:26:43.881947', 'updated_at': '2025-02-28T00:11:55.301308'}, {'id': 131, 'name': 'Step 5: Update utils.py', 'description': 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nChanges to Make:\n\t1.\tEnhance Task Filtering:\n\t•\tEnsure the filters handle parent-child relationships explicitly.\n\t•\tAdd options to include or exclude subtasks in queries.\n\t2.\tUtility Function for Debugging Parent-Child Relationships:\n\t•\tProvide a function to generate a map or list of parent-child relationships for debugging purposes.\n\t3.\tValidation Functions:\n\t•\tAdd a utility function to validate parent-child relationships and ensure no circular dependencies.\n\nUpdated utils.py Code:\n```\nimport logging\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import joinedload\nfrom app.extensions.db import db\nfrom app.tasks.models import Task\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\n\nclass TaskService:\n    @staticmethod\n    def filter_tasks(filters=None, include_subtasks=True, page=None, per_page=None):\n        """\n        Dynamically filters tasks with an option to include or exclude subtasks.\n\n        Args:\n            filters (dict): Filtering criteria.\n            include_subtasks (bool): Whether to include subtasks in the query.\n            page (int, optional): Page number for pagination.\n            per_page (int, optional): Items per page for pagination.\n\n        Returns:\n            Query or Pagination: A SQLAlchemy query object or paginated results.\n        """\n        query = Task.query.options(\n            db.joinedload(Task.project).joinedload(Project.contributors),\n            db.joinedload(Task.contributor),\n            db.joinedload(Task.children),\n        ).order_by(Task.sort_order)\n\n        if filters:\n            logger.debug(f"Applying filters: {filters}")\n\n            # Apply standard filters\n            if "is_archived" in filters:\n                query = query.filter(Task.is_archived == filters["is_archived"])\n            if "project_id" in filters:\n                query = query.filter(Task.project_id == filters["project_id"])\n            if "task_type" in filters:\n                if isinstance(filters["task_type"], list):\n                    query = query.filter(Task.task_type.in_(filters["task_type"]))\n                else:\n                    query = query.filter(Task.task_type == filters["task_type"])\n            if "completion_status" in filters:\n                completion_map = {"completed": True, "in_progress": False}\n                if filters["completion_status"] in completion_map:\n                    query = query.filter(Task.completed == completion_map[filters["completion_status"]])\n\n            # Optionally exclude subtasks\n            if not include_subtasks:\n                query = query.filter(Task.task_type != "Subtask")\n\n        logger.debug(f"Generated query: {query}")\n\n        # Pagination\n        if page and per_page:\n            return query.paginate(page=page, per_page=per_page, error_out=False)\n        return query\n\n    @staticmethod\n    def debug_parent_child_relationships(project_id=None):\n        """\n        Generates a debug map of parent-child relationships for all tasks.\n\n        Args:\n            project_id (int, optional): Restrict to tasks from a specific project.\n\n        Returns:\n            dict: A dictionary mapping parent IDs to their child task IDs.\n        """\n        query = Task.query\n        if project_id:\n            query = query.filter(Task.project_id == project_id)\n\n        tasks = query.options(\n            db.load_only(Task.id, Task.parent_id)\n        ).all()\n\n        relationship_map = {}\n        for task in tasks:\n            if task.parent_id not in relationship_map:\n                relationship_map[task.parent_id] = []\n            relationship_map[task.parent_id].append(task.id)\n\n        logger.debug(f"Parent-Child Relationship Map: {relationship_map}")\n        return relationship_map\n\n    @staticmethod\n    def validate_parent_child_relationships():\n        """\n        Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.\n\n        Raises:\n            ValueError: If invalid relationships are detected.\n        """\n        tasks = Task.query.options(db.joinedload(Task.parent)).all()\n\n        for task in tasks:\n            if task.parent_id:\n                parent_task = task.parent\n                if not parent_task:\n                    raise ValueError(f"Task {task.id} has an invalid parent ID {task.parent_id}.")\n\n                # Validate hierarchy rules\n                if task.task_type == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError(f"User Story {task.id} must have an Epic as its parent.")\n                if task.task_type == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError(f"Subtask {task.id} must have a User Story as its parent.")\n\n        logger.info("All parent-child relationships are valid.")\n\n    @staticmethod\n    def get_all_task_ids_with_parents():\n        """\n        Returns a flat list of tasks with their parent IDs for debugging.\n\n        Returns:\n            list: A list of tuples (task_id, parent_id).\n        """\n        tasks = Task.query.with_entities(Task.id, Task.parent_id).all()\n        logger.debug(f"Task IDs with Parent IDs: {tasks}")\n        return tasks\n```\n\n\nExplanation of Changes:\n\t1.\tfilter_tasks Enhancements:\n\t•\tAdded include_subtasks parameter to optionally exclude subtasks from the query.\n\t2.\tdebug_parent_child_relationships:\n\t•\tCreates a parent-child relationship map for debugging purposes.\n\t3.\tvalidate_parent_child_relationships:\n\t•\tIterates through all tasks to validate parent-child hierarchy and ensures no invalid relationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t•\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 7, 'created_at': '2025-01-15T09:41:28.091824', 'updated_at': '2025-03-01T02:01:18.851223'}, {'id': 135, 'name': 'Step 3: Update list.html', 'description': 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already includes everything needed. No required changes.\n\nHere´s the relevant section of list.html:\n\n```\n<tr id="task-{{ task.id }}"\n                class="task-row {% if task.task_type == \'Subtask\' %}subtask-row{% elif task.task_type == \'User Story\' %}user-story-row{% elif task.task_type == \'Epic\' %}epic-row{% endif %}"\n                style="background-color: \n                {% if task.task_type == \'Subtask\' %}\n                    rgba(200, 230, 255, 0.5); /* Light blue for Subtask */\n                {% elif task.task_type == \'User Story\' %}\n                    rgba(255, 255, 200, 0.5); /* Light yellow for User Story */\n                {% elif task.task_type == \'Epic\' %}\n                    rgba(255, 200, 200, 0.5); /* Light red for Epic */\n                {% else %}\n                    rgba(240, 240, 240, 1); /* Default light gray */\n                {% endif %};"\n                data-task-id="{{ task.id }}"\n                data-parent-id="{{ task.parent_id or \'\' }}"\n                data-level="{{ depth }}">\n                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>\n                <td>\n                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}\n                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}" aria-label="Toggle details for task {{ task.name }}">\n                        <i class="bi bi-chevron-right"></i>\n                    </button>\n                    {% endif %}\n                </td>\n                <td class="fw-medium fs-6 \n                {% if task.task_type == \'Epic\' %}\n                    epic-cell\n                {% elif task.task_type == \'User Story\' %}\n                    user-story-cell\n                {% elif task.task_type == \'Subtask\' %}\n                    subtask-cell\n                {% endif %}" \n                style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">\n                <span class="bi fs-6\n                {% if task.task_type == \'Epic\' %}\n                    bi-circle-fill\n                {% elif task.task_type == \'User Story\' %}\n                    bi-circle-half\n                {% elif task.task_type == \'Subtask\' %}\n                    bi-circle\n                {% endif %}">\n                </span>\n                {{ task.name }}\n                <small class="text-muted fw-light">\n                    (Parent-ID: {{ task.parent_id or \'None\' }})\n                </small>\n                <!-- Open Link -->\n                <a href="#" class="task-open-link" data-task-id="{{ task.id }}">\n                    <i class="bi bi-arrows-angle-expand" style="font-size: 0.8rem; color: white;"></i>\n                    Open\n                </a>\n            </td>\n                <td class="fw-light fs-6">\n                    <small class>\n                    LAC-{{ task.id }}\n                    </small>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light text-bg-secondary">\n                        {{ task.project if task.project else "Unknown Project" }}\n                    </span>\n                </td>\n                <td class="fs-6" data-contributor-column>{{ task.assigned_to if task.assigned_to else "Unassigned" }}</td>\n                <td class="fs-6">{{ task.story_points }}</td>\n                <td class="fs-6">\n                    <span class="badge rounded-pill fw-light text-bg-light">\n                        {{ task.task_type }}\n                    </span>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light {% if task.completed %}text-bg-success{% else %}text-bg-warning{% endif %}">\n                        {{ "Completed" if task.completed else "In Progress" }}\n                    </span>\n                </td>\n                <td>\n                    <!-- Delete Icon -->\n                    <button class="btn btn-dark btn-sm delete-task-btn" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .2rem; --bs-btn-font-size: .75rem;" data-task-id="{{ task.id }}" aria-label="Deletes task {{ task.id }}">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n            </tr>\n            {% for child in tasks if child.parent_id == task.id %}\n                {{ render_task(child, tasks, depth + 1) }}\n            {% endfor %}\n            {% endmacro %}\n            \n            <!-- Render top-level tasks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 8, 'created_at': '2025-01-15T09:46:29.349784', 'updated_at': '2025-03-01T02:01:18.851233'}, {'id': 289, 'name': 'issue: parent task is lost when updating task', 'description': '- Summary of the problem and solution\n    \n    **Problem: Parent Task Dropdown Was Not Being Set on Modal Open**\n    \n    The issue was that when opening a task modal, the **parent task dropdown** was not pre-populated with the correct parent task. However, interacting with the dropdown (e.g., clicking on it) would suddenly trigger it to be set correctly. This meant that the dropdown initialization was likely delayed or missing a step in the modal lifecycle.\n    \n    **Debugging Steps and Observations**\n    \n    1. **Task Details Were Fetched Correctly** ✅\n    - The task details, including parent_id, were being fetched from the API successfully.\n    1. **Parent Dropdown Initialization Issues** ❌\n    - The initializeParentDropdown() function was being called, but the dropdown was sometimes **not fully ready** when we tried to set the selected parent task.\n    1. **Clicking the Dropdown Triggered the Parent to Be Set** 🤔\n    - This hinted that the dropdown was not fully ready when setParentDropdown(task.parent_id) was initially called.\n    \n    **Final Solution**\n    \n    1. **Ensuring Dropdown Readiness Before Setting the Parent Task**\n    - We added explicit **delays and checks** to confirm that the dropdown was fully initialized before attempting to set the parent task.\n    \n    Specifically, we:\n    \n    - **Waited for the dropdown to appear in the DOM** using observeParentDropdown().\n    - **Initialized the dropdown** with initializeParentDropdown().\n    - **Waited explicitly for the dropdown to be fully ready** using waitForParentDropdownReady().\n    - **Added a final delay of 200ms** before calling setParentDropdown() to ensure stability.\n    1. **Modifying openTaskModal to Handle Parent Dropdown Setup**\n    - We ensured that initializeParentDropdown() was called **after fetching task details** and before setting the parent task.\n    1. **Confirming the Fix** 🎯\n    - After these fixes, the parent dropdown was **immediately populated** upon opening the modal, without requiring user interaction.\n    \n    **Key Learnings**\n    \n    ✅ **Dropdowns in modals need careful timing** – They might not be ready when you expect them to be.\n    \n    ✅ **Waiting for DOM updates is crucial** – Observing the element ensures it actually exists before interacting with it.\n    \n    ✅ **Explicit delays can prevent race conditions** – A small delay can sometimes resolve timing issues in UI interactions.\n    \n    **Final Result**\n    \n    ✅ The modal now **correctly loads and pre-selects the parent task** without extra clicks! 🎉🚀', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 8, 'created_at': '2025-02-10T08:56:25.273984', 'updated_at': '2025-02-28T00:11:55.301302'}, {'id': 269, 'name': 'Fix styling for sweetalert', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'sort_order': 10, 'created_at': '2025-02-08T15:54:56.717846', 'updated_at': '2025-02-28T00:11:55.301281'}, {'id': 247, 'name': 'Add Temporary Badge', 'description': 'Add a temporary badge or visual indicator to the updated task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 241, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 11, 'created_at': '2025-02-05T12:57:37.151479', 'updated_at': '2025-02-27T08:43:14.054398'}, {'id': 293, 'name': 'Click on title should copy the task title and id to clipboard', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 11, 'created_at': '2025-02-10T09:16:33.508209', 'updated_at': '2025-02-28T00:11:55.301304'}, {'id': 294, 'name': 'Issue: task table filters not working', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 12, 'created_at': '2025-02-10T09:19:21.022598', 'updated_at': '2025-02-28T00:11:55.301306'}, {'id': 240, 'name': 'Update Task Workflow', 'description': 'As a user, I want to update the status of a task so that it reflects the changes in the UI dynamically without reloading the page.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'In Progress', 'sort_order': 14, 'created_at': '2025-02-05T12:54:55.061344', 'updated_at': '2025-02-28T00:11:55.301273'}, {'id': 242, 'name': 'User Control Over Views', 'description': 'As a user, I want to toggle between hierarchical and flat views so that I can switch sorting preferences based on my workflow.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 15, 'created_at': '2025-02-05T12:55:50.108011', 'updated_at': '2025-02-28T00:11:55.301275'}, {'id': 130, 'name': 'Implement the Map of Task Relationships solution for drag-and-drop', 'description': 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 16, 'created_at': '2025-01-15T09:41:28.093022', 'updated_at': '2025-02-28T00:11:55.301271'}, {'id': 246, 'name': 'Toast Notification', 'description': 'Display a toast notification confirming the task status update.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 241, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 16, 'created_at': '2025-02-05T12:57:37.151479', 'updated_at': '2025-02-27T08:43:14.054398'}, {'id': 283, 'name': 'Fix issue with updating task title', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 18, 'created_at': '2025-02-10T08:41:58.769700', 'updated_at': '2025-02-28T00:11:55.301295'}, {'id': 278, 'name': 'Implement search feature for tasks list', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 5, 'project': 'Project Delta', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 4, 'status': 'Not Started', 'sort_order': 19, 'created_at': '2025-02-10T07:36:03.369833', 'updated_at': '2025-02-28T00:11:55.301289'}, {'id': 62, 'name': 'Add OAuth integration for Google Login', 'description': 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 20, 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-02-28T00:11:55.301255'}, {'id': 279, 'name': 'github integration', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 21, 'created_at': '2025-02-10T07:36:38.238202', 'updated_at': '2025-02-28T00:11:55.301290'}, {'id': 65, 'name': 'Implement backend endpoints for Google OAuth', 'description': 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 22, 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-02-28T00:11:55.301260'}, {'id': 241, 'name': 'Provide User Feedback', 'description': 'As a user, I want to receive immediate feedback after updating a task’s status so that I know the update was successful.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 24, 'created_at': '2025-02-05T12:55:19.826398', 'updated_at': '2025-02-28T00:11:55.301274'}, {'id': 41, 'name': 'Implement Searchable Dropdown', 'description': 'As a user, I want a searchable dropdown for parent task assignment.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Completed', 'sort_order': 25, 'created_at': '2025-01-03T09:14:28.285904', 'updated_at': '2025-02-28T00:11:55.301181'}, {'id': 85, 'name': 'Assign multiple contributors to a task', 'description': 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 27, 'created_at': '2025-01-07T19:32:39.466022', 'updated_at': '2025-02-28T00:11:55.301266'}, {'id': 136, 'name': 'Page scroll should stay in position when reloading', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 28, 'created_at': '2025-01-16T18:21:50.187247', 'updated_at': '2025-02-28T00:11:55.301272'}, {'id': 267, 'name': 'Improvements to toggles and nested tasks', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 29, 'created_at': '2025-02-08T02:29:12.464594', 'updated_at': '2025-03-03T14:17:12.065528'}, {'id': 325, 'name': 'Improve task list responsive grid', 'description': '## 🔍 **How Leading Task Management Apps Handle Column Widths**\n\n### 1️⃣ **JIRA (Atlassian)**\n\n🔹 **Dynamic Resizing** (CSS Grid + JavaScript)\n\n- Uses `display: grid` for task tables.\n- Columns are resizable with a drag handle.\n- `grid-template-columns: auto 1fr auto;` for flexibility.\n- **Approach**: Fixed + flexible widths with an adaptive UI.\n\n---\n\n### 2️⃣ **Monday.com**\n\n🔹 **Flexbox-Based Table**\n\n- Uses `display: flex;` instead of `grid` for more control.\n- Columns use **`flex-grow`** to expand dynamically.\n- Drag handles allow users to resize columns.\n- **Approach**: **JavaScript-based column width management** to allow user customization.\n\n---\n\n### 3️⃣ **Asana**\n\n🔹 **Hybrid (Flexbox + JavaScript)**\n\n- Uses **CSS flexbox** for flexible layout.\n- Users can resize columns by dragging.\n- `min-width: 120px;` ensures usability.\n- **Approach**: A combination of `flex` and `min-width` to ensure usability on smaller screens.\n\n---\n\n### 4️⃣ **Linear**\n\n🔹 **CSS Grid with `fr` Units**\n\n- Uses a modern **CSS Grid** approach:\n    \n    ```css\n    grid-template-columns: auto 1fr auto;\n    ```\n    \n- Dynamically adjusts the width of columns **based on content**.\n- Uses `grid-template-columns: minmax(150px, 2fr) 3fr 1fr;` for controlled column expansion.\n- **Approach**: Minimalist UI with focus on speed and responsiveness.\n\n---\n\n### 5️⃣ **Shortcut**\n\n🔹 **Similar to Jira (Resizable Columns)**\n\n- Uses **CSS Grid + JavaScript-based resizing**.\n- Stores user preferences (column order, width) in **local storage**.\n- **Approach**: Persistent column sizes per user, allowing for a **customizable layout**.\n\n---\n\n## ✅ **What’s the Best Approach for Our App?**\n\n### 🎯 **Option 1: CSS Grid (Recommended)**\n\n```css\ngrid-template-columns: 1fr 2fr 1fr;\n```\n\nPros:\n✔ **Modern**\n\n✔ **Auto-resizes based on content**\n\n✔ **Easy to manage**\n\n---\n\n### 🎯 **Option 2: Flexbox (For More Control)**\n\n```css\ndisplay: flex;\nflex-grow: 1;\nmin-width: 120px;\n```\n\nPros:\n✔ **More control over column shrinking/growing**\n\n✔ **Easier to make resizable**\n\n✔ **Ideal for draggable column resizing**\n\n---\n\n### 🎯 **Option 3: JavaScript-Powered Resizing (Advanced)**\n\n- Uses `grid-template-columns` but **lets users drag & resize**.\n- Stores **column widths in local storage**.\n- Uses `ResizeObserver` to listen for changes.\n\nPros:\n✔ **User-friendly (lets users resize columns)**\n\n✔ **Persistent user preferences**\n\n✔ **Great for complex task management apps**\n\n---\n\n## 🔥 **What’s the Best Choice for Us?**\n\n- If you want **simple auto-adjusting columns**, go with **CSS Grid** (`fr` units).\n- If you need **manual resizing**, use **Flexbox + JavaScript**.\n- If you want **fully customizable layouts**, use **JavaScript-powered resizing** like Jira or Monday.\n\nWould you like me to **implement resizable columns** with JavaScript? 🚀', 'task_type': 'Epic', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'sort_order': 30, 'created_at': '2025-02-25T00:02:51.810711', 'updated_at': '2025-03-03T14:17:02.484796'}, {'id': 274, 'name': 'Add support for goals, initiatives, okr´s', 'description': 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n\nölkasdölkk', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P1', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 31, 'created_at': '2025-02-10T00:46:27.204912', 'updated_at': '2025-02-28T00:11:55.301284'}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 32, 'created_at': '2025-02-10T08:41:17.786154', 'updated_at': '2025-03-03T14:16:41.747486'}, {'id': 63, 'name': 'Add OAuth integration for GitHub Login', 'description': 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'sort_order': 32, 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-02-27T08:43:14.054354'}, {'id': 276, 'name': 'Add support for priority', 'description': 'ffasdlkjlkj\nljkkjlkj', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P0', 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 33, 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-28T00:11:55.301286'}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'description': 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- Custom status\n-- Custom status\n- In Progress\n-- Custom status\n-- Custom status\n-- Custom status\n- Completed\n-- Custom status\n-- Custom status\n\n2. How can we track a task through different stages and save the sequence of events or stages the task has gone through?\nI´m thinking it could be good for mapping out processes, identifying bottlenecks and provide valuable insights while improving and streamlining workflows.\n- Stages\n- Contacts taken\n- Respons time \n- Time to action after responses\n- Dependencies\n\nNeed to be able to record every action related to this action.\nCommunication integrations\n- Slack\n- Email\n- Text messages\n- Phonecalls\n- Calendar events, meetings\n- Zoom, Google meet, Teams etc..\n\n\n2. Set custom statuses per project (can use tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 34, 'created_at': '2025-02-10T07:16:03.352588', 'updated_at': '2025-03-03T14:16:31.129766'}, {'id': 68, 'name': 'Register application in GitHub Developer Console', 'description': 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 35, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-02-27T08:43:14.054358'}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'description': 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be lost"\nOR\n\nIs it possible, and is it desireable to keep parent child relationships across projects?\nSo that a parent can be in one project but the child tasks can be in different projects?\n\nLets say \nParent epic is \n"Internationalisation"\nChild user stories are\n- Timezones\n- Language\n- Currency\n- Day, Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 35, 'created_at': '2025-02-10T08:54:36.297869', 'updated_at': '2025-03-03T14:16:24.364985'}, {'id': 284, 'name': 'Add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 36, 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-28T00:11:55.301296'}, {'id': 281, 'name': 'Add a page for roadmap', 'description': 'Add some sort of high level plan that aims to keep PM/PO´s on track and not get lost into the details of an overwhelming large backlog', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 37, 'created_at': '2025-02-10T08:27:01.218606', 'updated_at': '2025-02-28T00:11:55.301293'}, {'id': 69, 'name': 'Handle callback from GitHub', 'description': 'Implement the callback endpoint to process the authorization code from GitHub.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 38, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-02-26T21:53:17.041822'}, {'id': 273, 'name': 'Disable parent task selector in epics', 'description': 'and add text, Epic can´t have parent tasks', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 38, 'created_at': '2025-02-10T00:45:20.740910', 'updated_at': '2025-02-28T00:11:55.301283'}, {'id': 280, 'name': 'logging (task and project history)', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 39, 'created_at': '2025-02-10T07:37:44.435112', 'updated_at': '2025-02-28T00:11:55.301291'}, {'id': 275, 'name': 'Add support for sprints/cycles', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 40, 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-28T00:11:55.301285'}, {'id': 100, 'name': '1.1 User Registration', 'description': '<blockquote><p>As a user, I want to register with a username, email, and password so that I can create an account and access the system. </p></blockquote><p>**Acceptance Criteria:** </p><ul><li><p>• User can input valid username, email, and password.</p></li><li><p>• Username and email must be unique. </p></li><li><p>• Errors are displayed for invalid inputs or duplicate accounts. </p></li><li><p>• Passwords must meet complexity requirements and be securely stored. </p></li><li><p>• Successful registration redirects users to a login page.</p></li></ul><hr><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 41, 'created_at': '2025-01-07T19:59:09.044667', 'updated_at': '2025-03-03T14:20:10.801828'}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'description': 'kkkkkkkjjjjj\nlkajdlökjsdfölkjsdfölkjdf', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 41, 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-28T00:11:55.301297'}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'description': 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitHub Login involves integrating OAuth 2.0, which both services support. The complexity depends on your app’s existing setup, frameworks, and experience with third-party authentication. Below is a breakdown:\n\nKey Steps for Implementing Google or GitHub Login\n\t1.\tSet Up OAuth Credentials:\n\t•\tRegister your application in the Google Cloud Console or GitHub Developer Settings.\n\t•\tObtain the client ID and client secret.\n\t2.\tInstall Required Libraries:\n\t•\tUse a library for OAuth (e.g., flask-oauthlib, python-social-auth, or authlib).\n\t•\tPopular frameworks like Flask and Django already have robust integrations for OAuth providers.\n\t3.\tBackend Configuration:\n\t•\tImplement an endpoint to handle the OAuth flow (/auth/login/google or /auth/login/github).\n\t•\tConfigure your app to send users to Google or GitHub’s authentication page.\n\t•\tHandle the OAuth callback to exchange the authorization code for an access token.\n\t•\tVerify the token and fetch user information (e.g., email, name).\n\t4.\tLink OAuth to User Registration:\n\t•\tOn successful login, create or retrieve a user in your database.\n\t•\tStore the user’s details like email, OAuth provider ID, and access token.\n\t5.\tFrontend Integration (if applicable):\n\t•\tAdd “Login with Google” or “Login with GitHub” buttons.\n\t•\tRedirect to your backend’s OAuth endpoint when clicked.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 42, 'created_at': '2025-01-07T12:15:54.291625', 'updated_at': '2025-02-28T00:11:55.301262'}, {'id': 107, 'name': '1.1.1 Database Changes for User Registration', 'description': '<p>1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.</p><p></p><hr><p>Adding text</p><pre><code>CREATE TABLE public.users ( id SERIAL PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL, created_at TIMESTAMP DEFAULT NOW(), updated_at TIMESTAMP DEFAULT NOW() );</code></pre><p></p>', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 42, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-03-03T20:49:45.725711'}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'description': 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 18, 'status': 'Not Started', 'sort_order': 43, 'created_at': '2025-01-07T19:53:50.085064', 'updated_at': '2025-02-28T00:11:55.301267'}, {'id': 61, 'name': 'Parent task assignment', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'sort_order': 44, 'created_at': '2025-01-04T22:31:45.205815', 'updated_at': '2025-02-28T00:11:55.301224'}, {'id': 108, 'name': '1.1.2 Backend API for Registration', 'description': '•\tCreate an endpoint POST /api/register:\n•\tValidate input fields.\n•\tHash the password using bcrypt or argon2.\n•\tInsert the user into the users table.\n•\tReturn success/failure responses.\ndddhfff\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 44, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-27T08:43:14.054375'}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t•\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t•\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 45, 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-02-28T00:11:55.301265'}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'description': 'PRD: Define roles and permissions to restrict access. Roles include admin, developer, and viewer. Implement middleware for access control checks.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 46, 'created_at': '2025-01-07T19:54:09.204981', 'updated_at': '2025-02-28T00:11:55.301268'}, {'id': 112, 'name': '1.2.2 Frontend Login Page', 'description': 'Develop a frontend form for user login with email and password inputs.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 47, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054377'}, {'id': 83, 'name': 'Notifications', 'description': 'Implement sending notifications to selected people triggered by events.\nCustomizing messages:\nPossibility to adjust how detailed the information should be and what level of technical difficulty the language can contain. Integration to LMS that tailors messages to different target groups and then sends the appropriate version to the appropriate target group.\n\n\n\n- Ready for Release\n   - Send documentation of new feature to support and customer success team\n      - Add technical documentation as file in documentation library.\n      - User documentation\n      - Create and send feature description to Sales & Marketing dep.\n      - Create and send feature description and estimation of added value for company and customer to Investors.\n   - Create and publish release notes online and in inline message system.\n\nRead more: https://www.notion.so/lacunamedia/Create-and-send-messages-triggered-by-events-174979257fc08022b18bc76d3b28a4b3?pvs=4', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 47, 'created_at': '2025-01-07T16:10:54.030609', 'updated_at': '2025-02-28T00:11:55.301263'}, {'id': 99, 'name': 'Enhance User Account Management', 'description': 'PRD: Provide additional account management features for users and admins. Includes profile management, password reset functionality, and audit logging.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'sort_order': 48, 'created_at': '2025-01-07T19:54:20.692949', 'updated_at': '2025-02-28T00:11:55.301269'}, {'id': 109, 'name': '1.1.3 Create Frontend Registration Page', 'description': 'Develop a frontend form to collect user registration details.\n•\tAdd a form for username, email, and password inputs.\n•\tUse client-side validation (e.g., email format).\n•\tSend a POST request to /api/register.\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 49, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-27T08:43:14.054375'}, {'id': 110, 'name': '1.1.4 Unit Tests for Registration', 'description': 'Write unit tests for:\n\n•\tValid registration.\n•\tDuplicate username/email scenarios.\n•\tInvalid input handling.\nff', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 50, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-27T08:43:14.054376'}, {'id': 101, 'name': '1.2 User Login', 'description': 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n•\tUsers can log in with a valid email and password.\n•\tErrors are displayed for invalid credentials.\n•\tSuccessful login stores a session or JWT token.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 52, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054370'}, {'id': 111, 'name': '1.2.1 Backend API for Login', 'description': 'Create POST /api/login endpoint to handle user login.\njjsjj', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 54, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054377'}, {'id': 113, 'name': '1.2.3 Session Management', 'description': 'Implement secure session handling using cookies or JWT.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 55, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054378'}, {'id': 114, 'name': '1.2.4 Unit Tests for Login', 'description': 'Write tests for successful and failed login attempts.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 56, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054379'}, {'id': 106, 'name': 'Password Reset', 'description': 'As a user, I want to reset my password securely using email.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'sort_order': 57, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054373'}, {'id': 128, 'name': 'Frontend Password Reset Page', 'description': 'Develop a page for users to enter a new password using a valid token.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 58, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054388'}, {'id': 129, 'name': 'Testing Password Reset', 'description': 'Write tests for email delivery, token validation, and password updates.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 59, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054389'}, {'id': 102, 'name': 'Logout', 'description': 'As a user, I want to log out so that I can end my session securely.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 60, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054371'}, {'id': 117, 'name': 'Tests for Logout', 'description': 'Verify session invalidation and redirection to the login page.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 61, 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-27T08:43:14.054381'}, {'id': 381, 'name': 'Delete this', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 61, 'created_at': '2025-02-28T23:48:05.992788', 'updated_at': '2025-02-28T23:48:38.311759'}, {'id': 116, 'name': 'Frontend Logout Button', 'description': 'Add a logout button to the UI and handle session clearing.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 62, 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-27T08:43:14.054380'}, {'id': 115, 'name': 'Backend API for Logout', 'description': 'Create POST /api/logout endpoint to invalidate user sessions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 63, 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-27T08:43:14.054379'}, {'id': 45, 'name': 'Display Default Value in Dropdown', 'description': 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 64, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054343'}, {'id': 50, 'name': 'Retrieve Current Parent Task', 'description': 'Retrieve the current parent task’s ID and name from the backend.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Completed', 'sort_order': 65, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054346'}, {'id': 51, 'name': 'Set Default Value', 'description': 'Set the default value in the dropdown based on the retrieved data.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 45, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 1, 'status': 'Not Started', 'sort_order': 66, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054347'}, {'id': 46, 'name': 'Search for Parent Tasks', 'description': 'Allow users to search for tasks dynamically in the dropdown by typing.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'sort_order': 67, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054344'}, {'id': 54, 'name': 'Test Partial Matching', 'description': 'Ensure the search results update in real-time as the user types.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 68, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054349'}, {'id': 47, 'name': 'Handle Large Datasets Efficiently', 'description': 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'sort_order': 69, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054344'}, {'id': 56, 'name': 'Paginate API Responses', 'description': 'Implement server-side filtering and pagination for large datasets.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 70, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054350'}, {'id': 55, 'name': 'Enable Lazy Loading', 'description': 'Enable lazy loading or virtualization in Virtual Select.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 71, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054350'}, {'id': 48, 'name': 'Select and Deselect Parent Tasks', 'description': 'Allow users to select a parent task or deselect by choosing "None."', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 72, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054345'}, {'id': 57, 'name': 'Ensure None Option Availability', 'description': 'Add “None” as a selectable option and ensure it stays at the top of the list.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 73, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054351'}, {'id': 58, 'name': 'Handle Selection Events', 'description': 'Implement event listeners to update the form’s state when the selection changes.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 74, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054352'}, {'id': 49, 'name': 'Integrate Dropdown with Task Form', 'description': 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 75, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054346'}, {'id': 383, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 76, 'created_at': '2025-03-01T01:00:27.095399', 'updated_at': '2025-03-01T02:00:27.103602'}, {'id': 376, 'name': 'Subtask test', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 76, 'created_at': '2025-02-28T23:01:44.247988', 'updated_at': '2025-02-28T23:02:00.075567'}, {'id': 59, 'name': 'Bind Dropdown to Form Field', 'description': 'Bind the dropdown to the form’s parent task field.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'In Progress', 'sort_order': 76, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054352'}, {'id': 60, 'name': 'Test Form Submission', 'description': 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 77, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054353'}, {'id': 52, 'name': 'Add Search Box to Dropdown', 'description': 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 78, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054348'}, {'id': 53, 'name': 'Implement AJAX Search', 'description': 'Implement AJAX-based search to fetch tasks dynamically from the backend.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 79, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054348'}, {'id': 42, 'name': 'Choose Dropdown Library', 'description': 'Research and decide on the dropdown library to use.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 80, 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-27T08:43:14.054341'}, {'id': 378, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 80, 'created_at': '2025-02-28T23:17:32.404713', 'updated_at': '2025-03-01T00:17:32.410920'}, {'id': 43, 'name': 'Integrate Dropdown Library', 'description': 'Integrate the chosen dropdown library into the project.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Completed', 'sort_order': 81, 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-27T08:43:14.054342'}, {'id': 90, 'name': 'Update frontend to display and manage multiple contributors', 'description': 'Allow users to view, add, or remove multiple contributors via the UI.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 82, 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-27T08:43:14.054364'}, {'id': 377, 'name': 'Taskade', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 82, 'created_at': '2025-02-28T23:02:24.453543', 'updated_at': '2025-03-03T18:07:16.276655'}, {'id': 88, 'name': 'Update database schema for multiple contributors', 'description': 'Modify the task table to support many-to-many relationships for contributors.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 83, 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-27T08:43:14.054362'}, {'id': 89, 'name': 'Develop backend API for adding contributors to a task', 'description': 'Create endpoints to add, update, and remove contributors for a task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 84, 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-27T08:43:14.054363'}, {'id': 86, 'name': 'Allow designation of task owner', 'description': 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 85, 'created_at': '2025-01-07T19:33:29.330562', 'updated_at': '2025-02-27T08:43:14.054361'}, {'id': 375, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 85, 'created_at': '2025-02-28T22:48:35.594251', 'updated_at': '2025-02-28T23:48:35.676455'}, {'id': 93, 'name': 'Update frontend to manage task ownership', 'description': 'Allow users to assign or update the task owner via the UI.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 86, 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-27T08:43:14.054365'}, {'id': 384, 'name': 'Changed title', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 86, 'created_at': '2025-03-01T12:06:32.303897', 'updated_at': '2025-03-03T18:06:15.844478'}, {'id': 91, 'name': 'Update database schema for task ownership', 'description': 'Add a column or relationship to assign a single owner per task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 87, 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-27T08:43:14.054364'}, {'id': 92, 'name': 'Develop backend API for assigning task owner', 'description': 'Create endpoints to assign or update the owner of a task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 88, 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-27T08:43:14.054365'}, {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 89, 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-02-27T08:43:14.054362'}, {'id': 96, 'name': 'Allow admin users to create and customize contributor roles via frontend', 'description': 'Provide UI functionality for admins to manage contributor roles dynamically.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 90, 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-27T08:43:14.054367'}, {'id': 94, 'name': 'Add database support for contributor roles', 'description': 'Introduce a roles table and link contributors to specific roles for tasks.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 91, 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-27T08:43:14.054366'}, {'id': 95, 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 92, 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-27T08:43:14.054367'}, {'id': 127, 'name': 'Backend API for Password Reset', 'description': 'Create endpoints to handle password reset requests and token validation.\ndfdf\n\nasdasd', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 93, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054387'}, {'id': 126, 'name': 'Email Configuration for Password Reset', 'description': 'Configure email service to send password reset links.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 94, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054387'}, {'id': 104, 'name': 'Middleware for Role Enforcement', 'description': 'As a system, I want to enforce role-based access to specific routes.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 98, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 95, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054372'}, {'id': 122, 'name': 'Testing Role Enforcement', 'description': 'Write tests to ensure proper access control based on roles.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 96, 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-02-27T08:43:14.054384'}, {'id': 121, 'name': 'Develop Role Enforcement Middleware', 'description': 'Implement middleware to check user roles for access control.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 104, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 97, 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-02-27T08:43:14.054383'}, {'id': 105, 'name': 'Profile Management', 'description': 'As a user, I want to update my profile (username, email, password).', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 99, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 98, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054373'}, {'id': 123, 'name': 'Backend API for Profile Management', 'description': 'Create PATCH /api/profile endpoint to update user details.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 99, 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-02-27T08:43:14.054385'}, {'id': 125, 'name': 'Testing Profile Updates', 'description': 'Write tests for profile update functionality.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 100, 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-02-27T08:43:14.054386'}, {'id': 124, 'name': 'Frontend Profile Page', 'description': 'Develop a profile page for editing user details.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 101, 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-02-27T08:43:14.054385'}, {'id': 103, 'name': 'Role Assignment', 'description': 'As an administrator, I want to assign roles to users so that I can control access to certain features.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 98, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 102, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054372'}, {'id': 120, 'name': 'Testing Role Assignment', 'description': 'Write tests to validate role changes and restrictions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 103, 'created_at': '2025-01-07T20:40:58.383687', 'updated_at': '2025-02-27T08:43:14.054383'}, {'id': 119, 'name': 'Backend API for Role Assignment', 'description': 'Create POST /api/assign-role endpoint to manage user roles.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 104, 'created_at': '2025-01-07T20:40:58.383687', 'updated_at': '2025-02-27T08:43:14.054382'}, {'id': 118, 'name': 'Database Changes for Role Assignment', 'description': 'Add a role column to the users table.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 105, 'created_at': '2025-01-07T20:40:58.383687', 'updated_at': '2025-02-27T08:43:14.054381'}, {'id': 44, 'name': 'Test Performance with 500 Tasks', 'description': 'Ensure dropdown performance remains smooth with 500 tasks.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 107, 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-26T21:53:17.041813'}]
2025-03-04 15:39:37,545 ERROR: Unexpected error in list_tasks: Could not build url for endpoint 'tasks.list_tasks' with values ['is_archived', 'page']. Did you mean 'tasks_bp.list_tasks' instead?
2025-03-04 15:39:37,548 INFO: ROLLBACK
2025-03-04 15:39:37,548 INFO: 127.0.0.1 - - [04/Mar/2025 15:39:37] "GET /tasks/ HTTP/1.1" 200 -
2025-03-04 15:39:37,581 INFO: 127.0.0.1 - - [04/Mar/2025 15:39:37] "[36mGET /static/js/tasks_table_interactions.js HTTP/1.1[0m" 304 -
2025-03-04 15:39:37,582 INFO: 127.0.0.1 - - [04/Mar/2025 15:39:37] "[36mGET /static/custom.css HTTP/1.1[0m" 304 -
2025-03-04 15:39:37,582 INFO: 127.0.0.1 - - [04/Mar/2025 15:39:37] "[36mGET /static/js/filters.js HTTP/1.1[0m" 304 -
2025-03-04 15:39:37,582 INFO: 127.0.0.1 - - [04/Mar/2025 15:39:37] "[36mGET /static/js/modals.js HTTP/1.1[0m" 304 -
2025-03-04 15:39:37,646 INFO: 127.0.0.1 - - [04/Mar/2025 15:39:37] "[36mGET /static/favicon.ico HTTP/1.1[0m" 304 -
2025-03-04 15:40:00,389 INFO: Application started in development mode
2025-03-04 15:40:00,391 DEBUG: This is a debug message from the api_routes module
2025-03-04 15:40:00,927 DEBUG: This is a debug message from the page_routes module
2025-03-04 15:40:00,934 INFO: Blueprints registered successfully
2025-03-04 15:40:08,571 INFO: Entering list_tasks route...
2025-03-04 15:40:08,571 DEBUG: Filters used: {'is_archived': False}
2025-03-04 15:40:08,574 DEBUG: Applying filters: {'is_archived': False}
2025-03-04 15:40:08,582 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-04 15:40:08,583 INFO: BEGIN (implicit)
2025-03-04 15:40:08,584 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-04 15:40:08,584 INFO: [cached since 6257s ago] {'param_1': 500, 'param_2': 0}
2025-03-04 15:40:08,618 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-04 15:40:08,618 INFO: [cached since 6257s ago] {}
2025-03-04 15:40:08,621 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-04 15:40:08,621 INFO: [cached since 6257s ago] {}
2025-03-04 15:40:08,623 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-04 15:40:08,623 INFO: [cached since 6257s ago] {}
2025-03-04 15:40:08,625 DEBUG: Tasks passed to template: [{'id': 336, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:07:11.299563', 'updated_at': '2025-02-28T15:07:11.310976'}, {'id': 344, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:16.258493', 'updated_at': '2025-02-28T15:18:16.268248'}, {'id': 342, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:11.944980', 'updated_at': '2025-02-28T15:18:11.954065'}, {'id': 347, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:24:45.846396', 'updated_at': '2025-02-28T15:24:45.860885'}, {'id': 354, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:54:59.543585', 'updated_at': '2025-02-28T15:54:59.553122'}, {'id': 248, 'name': 'Implement Toggle Button', 'description': 'Add a toggle button to switch between hierarchical and flat views.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-05T12:58:14.518518', 'updated_at': '2025-02-28T00:11:48.483207'}, {'id': 350, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:32:49.928206', 'updated_at': '2025-02-28T15:32:49.935531'}, {'id': 338, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:10.122843', 'updated_at': '2025-02-28T15:18:10.128941'}, {'id': 334, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:44:06.347090', 'updated_at': '2025-02-28T14:44:06.354371'}, {'id': 352, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:51:56.533768', 'updated_at': '2025-02-28T15:51:56.563880'}, {'id': 369, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T21:17:46.272998', 'updated_at': '2025-02-28T22:17:46.285417'}, {'id': 351, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:32:58.672570', 'updated_at': '2025-02-28T15:32:58.678298'}, {'id': 341, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:11.691354', 'updated_at': '2025-02-28T15:18:11.699365'}, {'id': 329, 'name': 'Implement an API endpoint for submitting raw feature requests.', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-27T23:13:09.068616', 'updated_at': '2025-03-01T01:00:05.807248'}, {'id': 356, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T15:08:08.061166', 'updated_at': '2025-02-28T16:08:08.066215'}, {'id': 362, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:14:50.969730', 'updated_at': '2025-02-28T19:14:50.979052'}, {'id': 370, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T21:27:30.386959', 'updated_at': '2025-02-28T22:27:30.395572'}, {'id': 353, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:52:04.500938', 'updated_at': '2025-02-28T15:52:04.512331'}, {'id': 244, 'name': 'Scroll to Updated Task', 'description': 'Automatically scroll to the updated task in the list if it’s out of view.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 0, 'created_at': '2025-02-05T12:56:52.818501', 'updated_at': '2025-02-28T00:11:57.987007'}, {'id': 358, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T15:46:04.956844', 'updated_at': '2025-02-28T16:46:04.966511'}, {'id': 366, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:38:39.027061', 'updated_at': '2025-02-28T19:38:39.048248'}, {'id': 367, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:39:25.734101', 'updated_at': '2025-02-28T19:39:25.739322'}, {'id': 340, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:11.061737', 'updated_at': '2025-02-28T15:18:11.075736'}, {'id': 365, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:30:48.877580', 'updated_at': '2025-02-28T19:30:48.887060'}, {'id': 333, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:36:20.683426', 'updated_at': '2025-02-28T14:36:20.691337'}, {'id': 332, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:35:43.663809', 'updated_at': '2025-02-28T14:35:43.673337'}, {'id': 348, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:26:17.632940', 'updated_at': '2025-02-28T15:26:17.642972'}, {'id': 355, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:55:16.105634', 'updated_at': '2025-02-28T15:55:16.131837'}, {'id': 361, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T17:11:52.257703', 'updated_at': '2025-02-28T18:11:52.262071'}, {'id': 337, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:07.626569', 'updated_at': '2025-02-28T15:18:07.632643'}, {'id': 346, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:24:40.311054', 'updated_at': '2025-02-28T15:24:40.322156'}, {'id': 343, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:12.267445', 'updated_at': '2025-02-28T15:18:12.278088'}, {'id': 357, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T15:08:15.356759', 'updated_at': '2025-02-28T16:08:15.371374'}, {'id': 335, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:44:45.530624', 'updated_at': '2025-02-28T14:44:45.542212'}, {'id': 373, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T22:10:59.863170', 'updated_at': '2025-02-28T23:10:59.893542'}, {'id': 292, 'name': 'Issue: assigning contributor does not work', 'description': '<p>### **Summary of problem and solution** The issue was that assigning a contributor to a task via the /tasks//assign_contributor API endpoint resulted in a **400 Bad Request** error. Upon investigation, the following problems were identified: 1. **Missing CSRF Token:** - The request failed due to a missing CSRF token, as shown in the error message: *“Bad Request: The CSRF token is missing.”* - The frontend was not correctly including the CSRF token in the request headers. 1. **JavaScript Error (Undefined CSRF Token Variable):** - The error *“ReferenceError: csrfToken is not defined”* indicated that the CSRF token was not being retrieved properly in the JavaScript code. 1. **Incorrect Fetch Request Headers:** - The fetch request did not include the CSRF token under the correct key (X-CSRFToken). - The script attempted to send the request without properly extracting the CSRF token from the meta tag. ### **Solution** 1. **Include the CSRF Token in the JavaScript Code** The CSRF token was retrieved from the meta tag and used in the request headers: ```jsx // Retrieve CSRF token from meta tag const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\'); ``` This ensures that the CSRF token is correctly fetched and available in the JavaScript scope. 1. **Modify the Fetch Request to Include CSRF Token** The request to assign a contributor was updated to include the token: ```jsx const response = await fetch(`/tasks/${taskId}/assign_contributor`, { method: "POST", headers: { "Content-Type": "application/json", "X-CSRFToken": csrfToken // Include CSRF token }, body: JSON.stringify({ contributor_id: parseInt(contributorId, 10) }), }); ``` - **Ensures the CSRF token is sent in the request headers** so that Flask-WTF does not reject the request. 1. **Verify and Debug Network Requests** - The updated request headers were verified using **Chrome DevTools &gt; Network tab** to ensure the X-CSRFToken was included. - The error messages disappeared, and the contributor assignment request **succeeded with a 200 OK response**. --- ### **Final Outcome** 🚀 The issue was resolved, and contributors can now be assigned successfully to tasks without triggering a CSRF validation error. ### **Key Learnings from This Session** This debugging session covered several important aspects of **web development with Flask and JavaScript**, particularly related to **API requests, CSRF protection, debugging tools, and database interactions**. Here are the key takeaways: --- ### **1. CSRF Protection in API Requests** - **Issue:** The initial error was due to **a missing CSRF token** when making a `POST` request. - **Fix:** The solution was to **retrieve the CSRF token from a meta tag** in the HTML and include it in the request headers. - **Key Learning:** Flask-WTF requires CSRF tokens for form and API submissions to **prevent cross-site request forgery (CSRF) attacks**.✅ Always ensure that API requests include a valid CSRF token. --- ### **2. Debugging JavaScript Fetch Requests** - **Issue:** The JavaScript code was making a fetch request, but the variable `csrfToken` was not properly defined, causing a `ReferenceError`. - **Fix:** Declaring `csrfToken` at the beginning of the script: ```jsx const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\'); ``` - **Key Learning:**✅ JavaScript variables must be defined before they are used.✅ Use browser **developer tools (DevTools) Network tab** to inspect headers, payloads, and responses when debugging API requests. --- ### **3. Structuring Flask Routes for Task Management** - **Issue:** The `assign_contributor` route was failing due to incorrect request payload validation. - **Fix:** Improved the route’s error handling and logging: ```python @bp.route(\'//assign_contributor\', methods=[\'POST\']) def assign_contributor(task_id): try: data = request.get_json() contributor_id = int(data.get(\'contributor_id\', 0)) if not contributor_id: return jsonify({\'error\': \'Valid Contributor ID is required\'}), 400 ``` - **Key Learning:**✅ Always validate incoming data in Flask routes to prevent type errors.✅ Use `request.get_json()` properly and handle missing or incorrect data gracefully. --- ### **4. Utilizing Browser DevTools for Debugging** - **Issue:** The fetch request was failing with a `400 Bad Request`, and the browser console showed `ReferenceError: csrfToken is not defined`. - **Fix:** - Used **Network tab** to inspect the request payload and headers. - Used **Console tab** to catch JavaScript errors early. - **Key Learning:**✅ DevTools is a **critical** tool for diagnosing network request issues.✅ Always **check console errors** before assuming it\'s a backend issue. --- ### **5. Database Queries and ORM Debugging** - **Issue:** Tasks were not being updated correctly, possibly due to missing commit statements. - **Fix:** Ensured that:was executed properly. ```python task.contributor_id = contributor_id db.session.commit() ``` - **Key Learning:**✅ Always call `db.session.commit()` after making changes in SQLAlchemy.✅ Rollback transactions if an error occurs to avoid database inconsistency. --- ### **6. Handling Asynchronous JavaScript Logic** - **Issue:** The `assignContributor` function was executing before the page was fully loaded. - **Fix:** Wrapped it inside a function that ensures elements exist: ``` window.setupContributorAssignment = function () { const assignButton = $("#assign-contributor-btn"); if (!assignButton.length) { setTimeout(setupContributorAssignment, 500); // Retry in 500ms return; } ``` - **Key Learning:**✅ Use `setTimeout` to **retry event binding** when elements are dynamically loaded.✅ Always **check if elements exist before attaching event handlers**. --- ### **7. Best Practices for Flask Logging &amp; Error Handling** - **Issue:** Lack of clear logging when API calls failed. - **Fix:** Added better logging to track failures: ```python logger.info(f"Assigning contributor to task ID {task_id}") try: # Process request... except Exception as e: logger.error(f"Error assigning contributor: {e}") ``` - **Key Learning:**✅ Log **every major step** in API processing to simplify debugging.✅ Differentiate between `logger.info()`, `logger.warning()`, and `logger.error()` based on severity. --- ### **Final Takeaways** 🚀 **Understanding CSRF protection** and **properly structuring API requests** is crucial for secure web applications. 🔍 **Browser DevTools is invaluable** for diagnosing frontend issues, especially in JavaScript. 🐍 **Flask requires proper request validation, database transactions, and logging** to maintain stability. ⚡ **Asynchronous JavaScript must handle dynamic elements carefully** to avoid runtime errors. This session reinforced best practices in **frontend-backend integration, debugging, and security**, making it a great learning experience! 🚀🔥</p>', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 0, 'created_at': '2025-02-10T09:11:12.273779', 'updated_at': '2025-03-04T00:41:24.838143'}, {'id': 265, 'name': 'Smooth transition for toggles', 'description': '<p>Added new description</p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-03-01T15:23:05.271095'}, {'id': 339, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:10.856511', 'updated_at': '2025-02-28T15:18:10.860682'}, {'id': 331, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:35:35.797059', 'updated_at': '2025-02-28T14:35:35.813440'}, {'id': 345, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:53.170926', 'updated_at': '2025-02-28T15:18:53.179222'}, {'id': 327, 'name': '🏆\xa0Epic: AI-Driven Feature Planning & Estimation', 'description': '<h2><strong>Description:&nbsp;</strong></h2><p>AI assists in refining raw feature requests into</p><p>structured plans, generating PRDs, Epics, User Stories, Acceptance Criteria, and Edge Cases. AI also provides intelligent estimations based on historical data and improves accuracy over time.</p><p></p><hr><h2>## Heading</h2><p></p>', 'task_type': 'Epic', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-27T23:02:31.274292', 'updated_at': '2025-03-03T00:13:33.461344'}, {'id': 386, 'name': 'Test task', 'description': '<p>Testing tiptap editor lkjlk</p><hr><p>Write something</p><hr><p>Write something</p><hr><p></p>', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 284, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 9, 'status': 'In Progress', 'sort_order': 1, 'created_at': '2025-03-01T12:39:07.359868', 'updated_at': '2025-03-04T15:33:53.366530'}, {'id': 359, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-28T15:54:42.242569', 'updated_at': '2025-03-01T02:01:18.851236'}, {'id': 291, 'name': 'Add dropdowns in task list for changing: Assigned to, Estimate, Task Type and Status', 'description': '<p>Write Description task description...</p>', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 1, 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-03-01T22:09:13.882787'}, {'id': 245, 'name': 'Apply Dynamic Sorting and Filtering', 'description': 'Ensure the task list dynamically updates its sorting and filtering after a status change.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'In Progress', 'sort_order': 1, 'created_at': '2025-02-05T12:56:52.818501', 'updated_at': '2025-02-28T00:12:01.504825'}, {'id': 64, 'name': 'Setup project credentials for Google API', 'description': 'Generate client ID and secret from Google API Console for your application.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-03-01T02:01:02.546625'}, {'id': 250, 'name': 'Preserve User Preferences', 'description': 'Persist the user’s chosen view state between sessions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-05T12:58:14.518518', 'updated_at': '2025-02-28T00:11:48.483213'}, {'id': 360, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-28T15:54:58.904932', 'updated_at': '2025-03-01T02:01:18.851237'}, {'id': 249, 'name': 'Define View States', 'description': 'Clearly label and define the view states for hierarchical and flat sorting.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-05T12:58:14.518518', 'updated_at': '2025-02-28T00:11:48.483213'}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'description': '<p>Write your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p>', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-03-03T08:46:23.302934'}, {'id': 266, 'name': 'Highlight the nested tasks', 'description': '<p>lkjlkjlkjlkjlkjlkjWrite your task description...</p><p></p><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-03-03T17:32:52.809368'}, {'id': 67, 'name': 'Test Google OAuth flow', 'description': 'Verify the OAuth flow using test accounts and check the token exchange.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-03-01T02:01:02.546635'}, {'id': 243, 'name': 'Highlight Updated Task', 'description': 'Highlight the updated task in the UI to provide immediate visual feedback.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 2, 'created_at': '2025-02-05T12:56:52.818501', 'updated_at': '2025-02-28T00:12:01.504819'}, {'id': 326, 'name': 'Add dropdown in task list for changing: Project', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-26T22:10:15.209008', 'updated_at': '2025-03-01T02:01:12.498734'}, {'id': 295, 'name': 'Issue: drag and drop errors', 'description': '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-10T09:22:54.461413', 'updated_at': '2025-02-28T00:11:55.301307'}, {'id': 290, 'name': 'issue: error when changing task type and', 'description': 'issue: error when changing task type and parent task before saving', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-10T09:00:03.417734', 'updated_at': '2025-03-01T02:01:18.851234'}, {'id': 257, 'name': 'Update Task API Integration', 'description': "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-05T22:55:49.566819', 'updated_at': '2025-02-28T00:11:57.987011'}, {'id': 66, 'name': 'Setup OAuth scopes for Google API', 'description': 'Determine the required OAuth scopes for your application and add them to the configuration.\nedit', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-03-01T02:01:02.546634'}, {'id': 133, 'name': 'Step 4: Enhance Logging in models.py', 'description': 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nupdating the Task model in the following ways:\n\n1.\tLog Changes to parent_id:\n\t•\tLog changes to parent_id during updates, including old and new values.\n\t2.\tValidate Hierarchy with Logging:\n\t•\tLog detailed messages when validating hierarchy changes, especially for circular dependency checks.\n\nHere’s how the models.py can be updated:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy import func, cast, CheckConstraint\nfrom sqlalchemy.orm import validates\nfrom app.extensions.db import db\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\nclass Task(db.Model):\n    __tablename__ = "task"\n    \n    # Other columns...\n\n    parent_id = db.Column(\n        db.Integer, db.ForeignKey("task.id"), index=True, nullable=True\n    )\n\n    # Relationships\n    parent = db.relationship(\n        "Task", remote_side=[id], back_populates="children", lazy="select"\n    )\n    children = db.relationship(\n        "Task", back_populates="parent", lazy="select"\n    )\n\n    \n\n\n    @staticmethod\n    def _validate_no_circular_references(new_parent_id):\n        """\n        Validates that there are no circular references in the task hierarchy.\n\n        Args:\n            new_parent_id (int): The new parent ID to validate.\n\n        Raises:\n            ValueError: If a circular reference is detected.\n        """\n        visited = set()\n        current_parent_id = new_parent_id\n\n        logger.info(f"Validating circular references for parent ID: {new_parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error(\n                    f"Circular reference detected: Parent ID {current_parent_id} already visited."\n                )\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            # Fetch the next parent_id in the hierarchy\n            parent = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not parent:\n                break  # Exit if no parent is found\n            current_parent_id = parent.parent_id\n\n        logger.info("No circular reference detected.")\n\n    @validates(\'parent_id\', \'task_type\')\n    def validate_task_changes(self, key, value):\n        """\n        Validates changes to \'parent_id\' and \'task_type\'.\n        Ensures hierarchy validity and checks for circular references.\n        """\n        logger.debug(f"Validating {key} change for Task {self.id}: {value}")\n\n        if key == \'parent_id\':\n            # Log changes to parent_id\n            if self.id and value != self.parent_id:\n                logger.info(f"Task {self.id}: Updating \'parent_id\' from {self.parent_id} to {value}")\n\n            # Prevent a task from being its own parent\n            if value and value == self.id:\n                logger.error("A task cannot be its own parent.")\n                raise ValueError("A task cannot be its own parent.")\n\n            # Check for circular references\n            if value:\n                Task.check_circular_reference(self.id, value)\n\n        elif key == \'task_type\':\n            # Log changes to task_type\n            if self.id and value != self.task_type:\n                logger.info(f"Task {self.id}: Updating \'task_type\' from {self.task_type} to {value}")\n\n        # Check hierarchy rules without triggering further validation\n        if key in [\'parent_id\', \'task_type\']:\n            self._validate_hierarchy_change(key, value)\n\n        logger.info(f"Validation passed for {key}: {value}")\n        return value\n\n    def _validate_hierarchy_change(self, key, value):\n        """\n        Validates hierarchy rules for the task based on `task_type` and `parent_id`.\n        """\n        if key == \'parent_id\' and value:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=value).first()\n            if not parent_task:\n                raise ValueError("Parent task does not exist.")\n\n            logger.debug(f"Validating hierarchy: Task {self.id}, Parent Type: {parent_task.task_type}")\n            if self.task_type == "User Story" and parent_task.task_type != "Epic":\n                raise ValueError("User Stories must have an Epic as a parent.")\n            if self.task_type == "Subtask" and parent_task.task_type != "User Story":\n                raise ValueError("Subtasks must have a User Story as a parent.")\n\n        elif key == \'task_type\' and self.parent_id:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=self.parent_id).first()\n            if parent_task:\n                logger.debug(f"Validating hierarchy: Task Type: {value}, Parent Type: {parent_task.task_type}")\n                if value == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError("User Stories must have an Epic as a parent.")\n                if value == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError("Subtasks must have a User Story as a parent.")\n\n        logger.info(f"Hierarchy validation passed for Task {self.id if self.id else \'New Task\'}.")\n\n    @staticmethod\n    def check_circular_reference(task_id, parent_id):\n        """\n        Iteratively checks for circular references in the task hierarchy.\n        Prevents stack overflow on deep hierarchies.\n        """\n        visited = set()\n        current_parent_id = parent_id\n\n        logger.info(f"Checking circular reference for Task {task_id} with Parent ID: {parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error("Circular reference detected!")\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            if current_parent_id == task_id:\n                logger.error("A task cannot be its own ancestor.")\n                raise ValueError("A task cannot be its own ancestor.")\n\n            # Fetch the next parent_id in the hierarchy\n            task = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not task:\n                break\n            current_parent_id = task.parent_id\n\n        logger.info("Circular reference check passed.")\n```\nKey Enhancements:\n\t1.\tlog_and_validate_parent_id_change:\n\t•\tLogs the old and new parent_id whenever it changes.\n\t•\tEnsures no circular references are introduced.\n\t2.\t_validate_no_circular_references:\n\t•\tValidates the parent_id field to prevent circular dependencies.\n\t•\tLogs progress and raises detailed errors if violations occur.\n\t3.\tlog_and_validate_task_type_change:\n\t•\tLogs changes to task_type with the old and new values.\n\t•\tRevalidates hierarchy rules when task_type changes.\n\t4.\tDetailed Logging for Circular Reference Validation:\n\t•\t_validate_no_circular_references and check_circular_reference methods log every step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t•\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 4, 'created_at': '2025-01-15T09:44:08.340041', 'updated_at': '2025-03-01T02:01:18.851231'}, {'id': 264, 'name': 'Close all / Open all childtasks', 'description': '<p>Added new description check other tab</p><p></p><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 7, 'status': 'Not Started', 'sort_order': 4, 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-03-03T07:43:17.298288'}, {'id': 328, 'name': '🟢 User Story 1: AI-Generated Feature Refinement\xa0(8 Story Points)', 'description': 'As a\xa0product manager,\xa0I want\xa0AI to refine raw feature requests into structured PRDs, Epics, and User Stories,\xa0So that\xa0I can quickly turn ideas into actionable tasks.\n\n', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 5, 'created_at': '2025-02-27T23:09:37.421629', 'updated_at': '2025-03-03T06:26:25.726905'}, {'id': 287, 'name': 'When moving a parent item to another project make sure the subtasks are moved as well', 'description': '', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 5, 'created_at': '2025-02-10T08:48:31.986870', 'updated_at': '2025-03-01T02:01:12.498732'}, {'id': 132, 'name': 'Step 1: Update tasks_table_interactions.js', 'description': '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the map for efficient parent-child relationship lookups instead of DOM traversal.\n\n```\nexport const TaskManager = {\n    init: function (csrfToken) {\n        this.csrfToken = csrfToken;\n        this.initTaskParentMap(); // Initialize the map\n        this.initDragAndDrop(); // Initialize drag-and-drop functionality\n    },\n\n    // Initialize a global map for task relationships\n    taskParentMap: new Map(),\n\n    // Build the taskParentMap from the DOM\n    initTaskParentMap: function () {\n        console.log("Initializing Task Parent Map...");\n        const rows = document.querySelectorAll("tr[data-task-id]");\n\n        rows.forEach((row) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = parseInt(row.dataset.parentId, 10) || null;\n            this.taskParentMap.set(taskId, parentId);\n        });\n\n        console.log("Task Parent Map initialized:", Array.from(this.taskParentMap.entries()));\n    },\n\n    // Update the map dynamically after drag-and-drop\n    updateTaskParentMap: function (taskId, parentId) {\n        console.log(`Updating Task Parent Map: Task ${taskId} -> Parent ${parentId}`);\n        this.taskParentMap.set(taskId, parentId);\n    },\n\n    initDragAndDrop: function () {\n        if (window.isDragAndDropInitialized) {\n            console.log("Drag-and-drop is already initialized.");\n            return;\n        }\n\n        console.log("Initializing drag-and-drop within TaskManager...");\n\n        const tableBody = document.querySelector("tbody");\n        if (!tableBody) {\n            console.warn("Task table body not found for drag-and-drop initialization");\n            return;\n        }\n\n        // Initialize Sortable.js for drag-and-drop functionality\n        Sortable.create(tableBody, {\n            handle: ".task-row", // Only draggable via `.task-row` elements\n            animation: 150, // Smooth animation\n            filter: ".task-open-link", // Prevent dragging on task links\n            preventOnFilter: true, // Prevent drag if filtered element is clicked\n            onEnd: async (event) => {\n                try {\n                    console.log("Drag-and-drop operation started...");\n                    const rows = Array.from(event.from.querySelectorAll(".task-row"));\n                    const reorderedTasks = [];\n\n                    rows.forEach((row, index) => {\n                        const taskId = parseInt(row.dataset.taskId, 10);\n                        let parentId = null;\n\n                        // Get the parent ID from the map or fallback to the dataset\n                        if (row.classList.contains("subtask-row")) {\n                            const parentRow = row.previousElementSibling;\n                            parentId = parentRow\n                                ? parseInt(parentRow.dataset.taskId, 10)\n                                : this.taskParentMap.get(taskId) || null;\n                        }\n\n                        // Update the taskParentMap dynamically\n                        this.updateTaskParentMap(taskId, parentId);\n\n                        reorderedTasks.push({\n                            id: taskId,\n                            sort_order: index + 1,\n                            parent_id: parentId,\n                        });\n                    });\n\n                    console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n                    console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n                    // Send the payload to the backend\n                    const response = await fetch("/tasks/reorder_subtasks", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                            "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n                        },\n                        body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n                    });\n\n                    if (!response.ok) {\n                        const errorData = await response.json();\n                        console.error("Error reordering tasks:", errorData);\n                        alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n                        return;\n                    }\n\n                    const data = await response.json();\n                    console.log("Task reordering successful:", data);\n\n                } catch (error) {\n                    console.error("Error during drag-and-drop operation:", error);\n                    alert("An unexpected error occurred while reordering tasks.");\n                }\n            },\n        });\n\n        window.isDragAndDropInitialized = true;\n        console.log("Drag-and-drop initialized successfully.");\n    },\n};\n```\n\nKey Updates:\n\t1.\tPrecomputed Map (taskParentMap):\n\t•\tThe initTaskParentMap function initializes the map by iterating over DOM elements and mapping each task’s ID to its parent ID.\n\t•\tThe updateTaskParentMap dynamically updates the map when tasks are reordered.\n\t2.\tEfficient Parent Lookup:\n\t•\tThe parentId is derived from the precomputed map rather than DOM traversal.\n\t3.\tBackend Payload:\n\t•\tA structured payload (reorderedTasks) is sent to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t•\tCSRF protection is ensured by passing the token to the request headers.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'sort_order': 5, 'created_at': '2025-01-15T09:44:08.338301', 'updated_at': '2025-03-01T02:01:18.851229'}, {'id': 134, 'name': 'Step 2: Update the Backend in routes.py', 'description': 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\nPlan for step 2:\n\t1.\tVerify the payload structure:\n\t•\tEnsure that the payload includes all necessary fields (id, sort_order, parent_id) for each task.\n\t•\tValidate that the parent-child relationships in the precomputed map (taskParentMap) are reflected correctly in the payload.\n\t2.\tSubmit the payload to the backend:\n\t•\tEnhance the fetch request in the onEnd function of initDragAndDrop to log detailed submission data.\n\t•\tConfirm the payload integrity in the browser console before submission.\n\t3.\tUpdate backend logging:\n\t•\tAdd logging to /reorder_subtasks in routes.py to confirm receipt of the correct payload and process parent-child updates.\n\t•\tLog before and after database updates for better debugging.\n\n-----\nUpdated tasks_table_interactions.js\n\nReplace this section:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    let parentId = null;\n```\nWith:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    const parentId = this.taskParentMap.get(taskId) || null;\n```\nThe this.taskParentMap provides a precomputed and dynamic mapping of taskId to parentId. By using this map, we avoid relying on DOM traversal logic (row.closest or row.previousElementSibling) during drag-and-drop operations, which can sometimes be unreliable or cumbersome.\n\nFull Revised onEnd section:\n```\nonEnd: async (event) => {\n    try {\n        console.log("Drag-and-drop operation started...");\n        const rows = Array.from(event.from.querySelectorAll(".task-row"));\n        const reorderedTasks = [];\n\n        rows.forEach((row, index) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = this.taskParentMap.get(taskId) || null;\n\n            // Update the taskParentMap dynamically\n            this.updateTaskParentMap(taskId, parentId);\n\n            reorderedTasks.push({\n                id: taskId,\n                sort_order: index + 1,\n                parent_id: parentId,\n            });\n        });\n\n        console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n        console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n        // Send the payload to the backend\n        const response = await fetch("/tasks/reorder_subtasks", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n            },\n            body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error("Error reordering tasks:", errorData);\n            alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n            return;\n        }\n\n        const data = await response.json();\n        console.log("Task reordering successful:", data);\n\n    } catch (error) {\n        console.error("Error during drag-and-drop operation:", error);\n        alert("An unexpected error occurred while reordering tasks.");\n    }\n}\n```\n---------------------------------\nEnsure updates include:\n\t•\tBetter Logging: Adding logs for key events such as database changes and validation results.\n\t•\tInput Validation: Ensure all required fields (id, sort_order, parent_id) exist in the payload.\n\t•\tPost-Commit Validation: Confirm database updates after the commit.\n\t•\tImproved Error Handling: Include specific error messages and consistent rollback mechanisms.\n\nBelow is the revised reorder_subtasks route with descriptive comments for each section:\n```\n@bp.route("/reorder_subtasks", methods=["POST"])\ndef reorder_subtasks():\n    """\n    Reorder subtasks globally or reassign them to a different parent.\n\n    Steps:\n    - Parse and validate input from the frontend.\n    - Update parent-child relationships and sort order in the database.\n    - Commit changes and return a success response.\n    - Handle errors gracefully and provide detailed logs for debugging.\n    """\n    logger.info("Entering reorder_subtasks route...")\n    logger.info(f"Received payload for reordering tasks: {request.json}")\n\n    try:\n        # Step 1: Parse input\n        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered\n        ordered_tasks = request.json.get("ordered_tasks", [])\n\n        logger.debug(f"Parsed parent_id: {parent_id}")\n        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")\n\n        # Step 2: Validate input\n        if not isinstance(ordered_tasks, list) or not all(\n            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task\n            for task in ordered_tasks\n        ):\n            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")\n            return jsonify({\n                "error": "Invalid input format for \'ordered_tasks\'. Each task must include \'id\', \'sort_order\', and \'parent_id\'."\n            }), 400\n\n        # Step 3: Validate parent task (if applicable)\n        if parent_id is not None:\n            parent_task = Task.query.get(parent_id)\n            if not parent_task:\n                logger.error(f"Parent task with ID {parent_id} not found.")\n                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400\n\n        logger.info("Input validation passed. Proceeding with task updates...")\n\n        # Step 4: Process updates for each subtask\n        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation\n\n        for task_data in ordered_tasks:\n            subtask_id = task_data["id"]\n            sort_order = task_data["sort_order"]\n            new_parent_id = task_data["parent_id"]\n\n            # Fetch the subtask from the database\n            subtask = Task.query.get(subtask_id)\n            if not subtask:\n                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")\n                continue\n\n            # Log and update parent_id if it changes\n            if new_parent_id is not None and new_parent_id != subtask.parent_id:\n                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")\n                subtask.parent_id = new_parent_id\n\n            # Update sort order\n            subtask.sort_order = sort_order\n            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")\n\n            # Add to the list of updated subtasks for validation\n            updated_subtasks.append(subtask)\n\n        # Step 5: Commit changes to the database\n        try:\n            db.session.commit()\n            logger.info(f"Subtasks reordered successfully: {[task[\'id\'] for task in ordered_tasks]}")\n        except Exception as e:\n            logger.error(f"Error committing changes to the database: {str(e)}")\n            db.session.rollback()\n            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500\n\n        # Step 6: Post-commit validation\n        for subtask in updated_subtasks:\n            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")\n            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")\n\n        # Step 7: Return success response\n        return jsonify({\n            "success": True,\n            "message": "Subtasks reordered successfully.",\n            "updated_subtasks": [subtask.id for subtask in updated_subtasks]\n        }), 200\n\n    except Exception as e:\n        # Step 8: Handle unexpected errors\n        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)\n        db.session.rollback()\n        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500\n```\nKey Changes and Descriptive Comments\n\t1.\tInput Parsing:\n\t•\tExtracts parent_id and ordered_tasks from the request payload.\n\t•\tLogs the parsed values for debugging.\n\t2.\tInput Validation:\n\t•\tEnsures ordered_tasks is a list of dictionaries with the required keys.\n\t•\tValidates parent_id if provided, ensuring the parent task exists in the database.\n\t3.\tUpdate Processing:\n\t•\tIterates through ordered_tasks, updating each task’s parent_id and sort_order.\n\t•\tLogs changes for each task.\n\t4.\tDatabase Commit:\n\t•\tCommits all updates in a single transaction.\n\t•\tLogs success or rolls back changes in case of an error.\n\t5.\tPost-Commit Validation:\n\t•\tVerifies that the parent_id and sort_order changes were successfully saved to the database.\n\t6.\tError Handling:\n\t•\tCaptures and logs exceptions during processing or committing.\n\t•\tProvides meaningful error messages to the frontend.\n\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'sort_order': 6, 'created_at': '2025-01-15T09:46:29.348853', 'updated_at': '2025-03-01T02:01:18.851232'}, {'id': 286, 'name': 'Implement abels/tags', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 6, 'created_at': '2025-02-10T08:46:23.985620', 'updated_at': '2025-03-01T02:01:12.498730'}, {'id': 296, 'name': 'issue: contributor is lost after updating task', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 7, 'created_at': '2025-02-10T09:26:43.881947', 'updated_at': '2025-02-28T00:11:55.301308'}, {'id': 131, 'name': 'Step 5: Update utils.py', 'description': 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nChanges to Make:\n\t1.\tEnhance Task Filtering:\n\t•\tEnsure the filters handle parent-child relationships explicitly.\n\t•\tAdd options to include or exclude subtasks in queries.\n\t2.\tUtility Function for Debugging Parent-Child Relationships:\n\t•\tProvide a function to generate a map or list of parent-child relationships for debugging purposes.\n\t3.\tValidation Functions:\n\t•\tAdd a utility function to validate parent-child relationships and ensure no circular dependencies.\n\nUpdated utils.py Code:\n```\nimport logging\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import joinedload\nfrom app.extensions.db import db\nfrom app.tasks.models import Task\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\n\nclass TaskService:\n    @staticmethod\n    def filter_tasks(filters=None, include_subtasks=True, page=None, per_page=None):\n        """\n        Dynamically filters tasks with an option to include or exclude subtasks.\n\n        Args:\n            filters (dict): Filtering criteria.\n            include_subtasks (bool): Whether to include subtasks in the query.\n            page (int, optional): Page number for pagination.\n            per_page (int, optional): Items per page for pagination.\n\n        Returns:\n            Query or Pagination: A SQLAlchemy query object or paginated results.\n        """\n        query = Task.query.options(\n            db.joinedload(Task.project).joinedload(Project.contributors),\n            db.joinedload(Task.contributor),\n            db.joinedload(Task.children),\n        ).order_by(Task.sort_order)\n\n        if filters:\n            logger.debug(f"Applying filters: {filters}")\n\n            # Apply standard filters\n            if "is_archived" in filters:\n                query = query.filter(Task.is_archived == filters["is_archived"])\n            if "project_id" in filters:\n                query = query.filter(Task.project_id == filters["project_id"])\n            if "task_type" in filters:\n                if isinstance(filters["task_type"], list):\n                    query = query.filter(Task.task_type.in_(filters["task_type"]))\n                else:\n                    query = query.filter(Task.task_type == filters["task_type"])\n            if "completion_status" in filters:\n                completion_map = {"completed": True, "in_progress": False}\n                if filters["completion_status"] in completion_map:\n                    query = query.filter(Task.completed == completion_map[filters["completion_status"]])\n\n            # Optionally exclude subtasks\n            if not include_subtasks:\n                query = query.filter(Task.task_type != "Subtask")\n\n        logger.debug(f"Generated query: {query}")\n\n        # Pagination\n        if page and per_page:\n            return query.paginate(page=page, per_page=per_page, error_out=False)\n        return query\n\n    @staticmethod\n    def debug_parent_child_relationships(project_id=None):\n        """\n        Generates a debug map of parent-child relationships for all tasks.\n\n        Args:\n            project_id (int, optional): Restrict to tasks from a specific project.\n\n        Returns:\n            dict: A dictionary mapping parent IDs to their child task IDs.\n        """\n        query = Task.query\n        if project_id:\n            query = query.filter(Task.project_id == project_id)\n\n        tasks = query.options(\n            db.load_only(Task.id, Task.parent_id)\n        ).all()\n\n        relationship_map = {}\n        for task in tasks:\n            if task.parent_id not in relationship_map:\n                relationship_map[task.parent_id] = []\n            relationship_map[task.parent_id].append(task.id)\n\n        logger.debug(f"Parent-Child Relationship Map: {relationship_map}")\n        return relationship_map\n\n    @staticmethod\n    def validate_parent_child_relationships():\n        """\n        Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.\n\n        Raises:\n            ValueError: If invalid relationships are detected.\n        """\n        tasks = Task.query.options(db.joinedload(Task.parent)).all()\n\n        for task in tasks:\n            if task.parent_id:\n                parent_task = task.parent\n                if not parent_task:\n                    raise ValueError(f"Task {task.id} has an invalid parent ID {task.parent_id}.")\n\n                # Validate hierarchy rules\n                if task.task_type == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError(f"User Story {task.id} must have an Epic as its parent.")\n                if task.task_type == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError(f"Subtask {task.id} must have a User Story as its parent.")\n\n        logger.info("All parent-child relationships are valid.")\n\n    @staticmethod\n    def get_all_task_ids_with_parents():\n        """\n        Returns a flat list of tasks with their parent IDs for debugging.\n\n        Returns:\n            list: A list of tuples (task_id, parent_id).\n        """\n        tasks = Task.query.with_entities(Task.id, Task.parent_id).all()\n        logger.debug(f"Task IDs with Parent IDs: {tasks}")\n        return tasks\n```\n\n\nExplanation of Changes:\n\t1.\tfilter_tasks Enhancements:\n\t•\tAdded include_subtasks parameter to optionally exclude subtasks from the query.\n\t2.\tdebug_parent_child_relationships:\n\t•\tCreates a parent-child relationship map for debugging purposes.\n\t3.\tvalidate_parent_child_relationships:\n\t•\tIterates through all tasks to validate parent-child hierarchy and ensures no invalid relationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t•\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 7, 'created_at': '2025-01-15T09:41:28.091824', 'updated_at': '2025-03-01T02:01:18.851223'}, {'id': 135, 'name': 'Step 3: Update list.html', 'description': 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already includes everything needed. No required changes.\n\nHere´s the relevant section of list.html:\n\n```\n<tr id="task-{{ task.id }}"\n                class="task-row {% if task.task_type == \'Subtask\' %}subtask-row{% elif task.task_type == \'User Story\' %}user-story-row{% elif task.task_type == \'Epic\' %}epic-row{% endif %}"\n                style="background-color: \n                {% if task.task_type == \'Subtask\' %}\n                    rgba(200, 230, 255, 0.5); /* Light blue for Subtask */\n                {% elif task.task_type == \'User Story\' %}\n                    rgba(255, 255, 200, 0.5); /* Light yellow for User Story */\n                {% elif task.task_type == \'Epic\' %}\n                    rgba(255, 200, 200, 0.5); /* Light red for Epic */\n                {% else %}\n                    rgba(240, 240, 240, 1); /* Default light gray */\n                {% endif %};"\n                data-task-id="{{ task.id }}"\n                data-parent-id="{{ task.parent_id or \'\' }}"\n                data-level="{{ depth }}">\n                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>\n                <td>\n                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}\n                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}" aria-label="Toggle details for task {{ task.name }}">\n                        <i class="bi bi-chevron-right"></i>\n                    </button>\n                    {% endif %}\n                </td>\n                <td class="fw-medium fs-6 \n                {% if task.task_type == \'Epic\' %}\n                    epic-cell\n                {% elif task.task_type == \'User Story\' %}\n                    user-story-cell\n                {% elif task.task_type == \'Subtask\' %}\n                    subtask-cell\n                {% endif %}" \n                style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">\n                <span class="bi fs-6\n                {% if task.task_type == \'Epic\' %}\n                    bi-circle-fill\n                {% elif task.task_type == \'User Story\' %}\n                    bi-circle-half\n                {% elif task.task_type == \'Subtask\' %}\n                    bi-circle\n                {% endif %}">\n                </span>\n                {{ task.name }}\n                <small class="text-muted fw-light">\n                    (Parent-ID: {{ task.parent_id or \'None\' }})\n                </small>\n                <!-- Open Link -->\n                <a href="#" class="task-open-link" data-task-id="{{ task.id }}">\n                    <i class="bi bi-arrows-angle-expand" style="font-size: 0.8rem; color: white;"></i>\n                    Open\n                </a>\n            </td>\n                <td class="fw-light fs-6">\n                    <small class>\n                    LAC-{{ task.id }}\n                    </small>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light text-bg-secondary">\n                        {{ task.project if task.project else "Unknown Project" }}\n                    </span>\n                </td>\n                <td class="fs-6" data-contributor-column>{{ task.assigned_to if task.assigned_to else "Unassigned" }}</td>\n                <td class="fs-6">{{ task.story_points }}</td>\n                <td class="fs-6">\n                    <span class="badge rounded-pill fw-light text-bg-light">\n                        {{ task.task_type }}\n                    </span>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light {% if task.completed %}text-bg-success{% else %}text-bg-warning{% endif %}">\n                        {{ "Completed" if task.completed else "In Progress" }}\n                    </span>\n                </td>\n                <td>\n                    <!-- Delete Icon -->\n                    <button class="btn btn-dark btn-sm delete-task-btn" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .2rem; --bs-btn-font-size: .75rem;" data-task-id="{{ task.id }}" aria-label="Deletes task {{ task.id }}">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n            </tr>\n            {% for child in tasks if child.parent_id == task.id %}\n                {{ render_task(child, tasks, depth + 1) }}\n            {% endfor %}\n            {% endmacro %}\n            \n            <!-- Render top-level tasks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 8, 'created_at': '2025-01-15T09:46:29.349784', 'updated_at': '2025-03-01T02:01:18.851233'}, {'id': 289, 'name': 'issue: parent task is lost when updating task', 'description': '- Summary of the problem and solution\n    \n    **Problem: Parent Task Dropdown Was Not Being Set on Modal Open**\n    \n    The issue was that when opening a task modal, the **parent task dropdown** was not pre-populated with the correct parent task. However, interacting with the dropdown (e.g., clicking on it) would suddenly trigger it to be set correctly. This meant that the dropdown initialization was likely delayed or missing a step in the modal lifecycle.\n    \n    **Debugging Steps and Observations**\n    \n    1. **Task Details Were Fetched Correctly** ✅\n    - The task details, including parent_id, were being fetched from the API successfully.\n    1. **Parent Dropdown Initialization Issues** ❌\n    - The initializeParentDropdown() function was being called, but the dropdown was sometimes **not fully ready** when we tried to set the selected parent task.\n    1. **Clicking the Dropdown Triggered the Parent to Be Set** 🤔\n    - This hinted that the dropdown was not fully ready when setParentDropdown(task.parent_id) was initially called.\n    \n    **Final Solution**\n    \n    1. **Ensuring Dropdown Readiness Before Setting the Parent Task**\n    - We added explicit **delays and checks** to confirm that the dropdown was fully initialized before attempting to set the parent task.\n    \n    Specifically, we:\n    \n    - **Waited for the dropdown to appear in the DOM** using observeParentDropdown().\n    - **Initialized the dropdown** with initializeParentDropdown().\n    - **Waited explicitly for the dropdown to be fully ready** using waitForParentDropdownReady().\n    - **Added a final delay of 200ms** before calling setParentDropdown() to ensure stability.\n    1. **Modifying openTaskModal to Handle Parent Dropdown Setup**\n    - We ensured that initializeParentDropdown() was called **after fetching task details** and before setting the parent task.\n    1. **Confirming the Fix** 🎯\n    - After these fixes, the parent dropdown was **immediately populated** upon opening the modal, without requiring user interaction.\n    \n    **Key Learnings**\n    \n    ✅ **Dropdowns in modals need careful timing** – They might not be ready when you expect them to be.\n    \n    ✅ **Waiting for DOM updates is crucial** – Observing the element ensures it actually exists before interacting with it.\n    \n    ✅ **Explicit delays can prevent race conditions** – A small delay can sometimes resolve timing issues in UI interactions.\n    \n    **Final Result**\n    \n    ✅ The modal now **correctly loads and pre-selects the parent task** without extra clicks! 🎉🚀', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 8, 'created_at': '2025-02-10T08:56:25.273984', 'updated_at': '2025-02-28T00:11:55.301302'}, {'id': 269, 'name': 'Fix styling for sweetalert', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'sort_order': 10, 'created_at': '2025-02-08T15:54:56.717846', 'updated_at': '2025-02-28T00:11:55.301281'}, {'id': 247, 'name': 'Add Temporary Badge', 'description': 'Add a temporary badge or visual indicator to the updated task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 241, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 11, 'created_at': '2025-02-05T12:57:37.151479', 'updated_at': '2025-02-27T08:43:14.054398'}, {'id': 293, 'name': 'Click on title should copy the task title and id to clipboard', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 11, 'created_at': '2025-02-10T09:16:33.508209', 'updated_at': '2025-02-28T00:11:55.301304'}, {'id': 294, 'name': 'Issue: task table filters not working', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 12, 'created_at': '2025-02-10T09:19:21.022598', 'updated_at': '2025-02-28T00:11:55.301306'}, {'id': 240, 'name': 'Update Task Workflow', 'description': 'As a user, I want to update the status of a task so that it reflects the changes in the UI dynamically without reloading the page.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'In Progress', 'sort_order': 14, 'created_at': '2025-02-05T12:54:55.061344', 'updated_at': '2025-02-28T00:11:55.301273'}, {'id': 242, 'name': 'User Control Over Views', 'description': 'As a user, I want to toggle between hierarchical and flat views so that I can switch sorting preferences based on my workflow.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 15, 'created_at': '2025-02-05T12:55:50.108011', 'updated_at': '2025-02-28T00:11:55.301275'}, {'id': 130, 'name': 'Implement the Map of Task Relationships solution for drag-and-drop', 'description': 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 16, 'created_at': '2025-01-15T09:41:28.093022', 'updated_at': '2025-02-28T00:11:55.301271'}, {'id': 246, 'name': 'Toast Notification', 'description': 'Display a toast notification confirming the task status update.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 241, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 16, 'created_at': '2025-02-05T12:57:37.151479', 'updated_at': '2025-02-27T08:43:14.054398'}, {'id': 283, 'name': 'Fix issue with updating task title', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 18, 'created_at': '2025-02-10T08:41:58.769700', 'updated_at': '2025-02-28T00:11:55.301295'}, {'id': 278, 'name': 'Implement search feature for tasks list', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 5, 'project': 'Project Delta', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 4, 'status': 'Not Started', 'sort_order': 19, 'created_at': '2025-02-10T07:36:03.369833', 'updated_at': '2025-02-28T00:11:55.301289'}, {'id': 62, 'name': 'Add OAuth integration for Google Login', 'description': 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 20, 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-02-28T00:11:55.301255'}, {'id': 279, 'name': 'github integration', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 21, 'created_at': '2025-02-10T07:36:38.238202', 'updated_at': '2025-02-28T00:11:55.301290'}, {'id': 65, 'name': 'Implement backend endpoints for Google OAuth', 'description': 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 22, 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-02-28T00:11:55.301260'}, {'id': 241, 'name': 'Provide User Feedback', 'description': 'As a user, I want to receive immediate feedback after updating a task’s status so that I know the update was successful.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 24, 'created_at': '2025-02-05T12:55:19.826398', 'updated_at': '2025-02-28T00:11:55.301274'}, {'id': 41, 'name': 'Implement Searchable Dropdown', 'description': 'As a user, I want a searchable dropdown for parent task assignment.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Completed', 'sort_order': 25, 'created_at': '2025-01-03T09:14:28.285904', 'updated_at': '2025-02-28T00:11:55.301181'}, {'id': 85, 'name': 'Assign multiple contributors to a task', 'description': 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 27, 'created_at': '2025-01-07T19:32:39.466022', 'updated_at': '2025-02-28T00:11:55.301266'}, {'id': 136, 'name': 'Page scroll should stay in position when reloading', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 28, 'created_at': '2025-01-16T18:21:50.187247', 'updated_at': '2025-02-28T00:11:55.301272'}, {'id': 267, 'name': 'Improvements to toggles and nested tasks', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 29, 'created_at': '2025-02-08T02:29:12.464594', 'updated_at': '2025-03-03T14:17:12.065528'}, {'id': 325, 'name': 'Improve task list responsive grid', 'description': '## 🔍 **How Leading Task Management Apps Handle Column Widths**\n\n### 1️⃣ **JIRA (Atlassian)**\n\n🔹 **Dynamic Resizing** (CSS Grid + JavaScript)\n\n- Uses `display: grid` for task tables.\n- Columns are resizable with a drag handle.\n- `grid-template-columns: auto 1fr auto;` for flexibility.\n- **Approach**: Fixed + flexible widths with an adaptive UI.\n\n---\n\n### 2️⃣ **Monday.com**\n\n🔹 **Flexbox-Based Table**\n\n- Uses `display: flex;` instead of `grid` for more control.\n- Columns use **`flex-grow`** to expand dynamically.\n- Drag handles allow users to resize columns.\n- **Approach**: **JavaScript-based column width management** to allow user customization.\n\n---\n\n### 3️⃣ **Asana**\n\n🔹 **Hybrid (Flexbox + JavaScript)**\n\n- Uses **CSS flexbox** for flexible layout.\n- Users can resize columns by dragging.\n- `min-width: 120px;` ensures usability.\n- **Approach**: A combination of `flex` and `min-width` to ensure usability on smaller screens.\n\n---\n\n### 4️⃣ **Linear**\n\n🔹 **CSS Grid with `fr` Units**\n\n- Uses a modern **CSS Grid** approach:\n    \n    ```css\n    grid-template-columns: auto 1fr auto;\n    ```\n    \n- Dynamically adjusts the width of columns **based on content**.\n- Uses `grid-template-columns: minmax(150px, 2fr) 3fr 1fr;` for controlled column expansion.\n- **Approach**: Minimalist UI with focus on speed and responsiveness.\n\n---\n\n### 5️⃣ **Shortcut**\n\n🔹 **Similar to Jira (Resizable Columns)**\n\n- Uses **CSS Grid + JavaScript-based resizing**.\n- Stores user preferences (column order, width) in **local storage**.\n- **Approach**: Persistent column sizes per user, allowing for a **customizable layout**.\n\n---\n\n## ✅ **What’s the Best Approach for Our App?**\n\n### 🎯 **Option 1: CSS Grid (Recommended)**\n\n```css\ngrid-template-columns: 1fr 2fr 1fr;\n```\n\nPros:\n✔ **Modern**\n\n✔ **Auto-resizes based on content**\n\n✔ **Easy to manage**\n\n---\n\n### 🎯 **Option 2: Flexbox (For More Control)**\n\n```css\ndisplay: flex;\nflex-grow: 1;\nmin-width: 120px;\n```\n\nPros:\n✔ **More control over column shrinking/growing**\n\n✔ **Easier to make resizable**\n\n✔ **Ideal for draggable column resizing**\n\n---\n\n### 🎯 **Option 3: JavaScript-Powered Resizing (Advanced)**\n\n- Uses `grid-template-columns` but **lets users drag & resize**.\n- Stores **column widths in local storage**.\n- Uses `ResizeObserver` to listen for changes.\n\nPros:\n✔ **User-friendly (lets users resize columns)**\n\n✔ **Persistent user preferences**\n\n✔ **Great for complex task management apps**\n\n---\n\n## 🔥 **What’s the Best Choice for Us?**\n\n- If you want **simple auto-adjusting columns**, go with **CSS Grid** (`fr` units).\n- If you need **manual resizing**, use **Flexbox + JavaScript**.\n- If you want **fully customizable layouts**, use **JavaScript-powered resizing** like Jira or Monday.\n\nWould you like me to **implement resizable columns** with JavaScript? 🚀', 'task_type': 'Epic', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'sort_order': 30, 'created_at': '2025-02-25T00:02:51.810711', 'updated_at': '2025-03-03T14:17:02.484796'}, {'id': 274, 'name': 'Add support for goals, initiatives, okr´s', 'description': 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n\nölkasdölkk', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P1', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 31, 'created_at': '2025-02-10T00:46:27.204912', 'updated_at': '2025-02-28T00:11:55.301284'}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 32, 'created_at': '2025-02-10T08:41:17.786154', 'updated_at': '2025-03-03T14:16:41.747486'}, {'id': 63, 'name': 'Add OAuth integration for GitHub Login', 'description': 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'sort_order': 32, 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-02-27T08:43:14.054354'}, {'id': 276, 'name': 'Add support for priority', 'description': 'ffasdlkjlkj\nljkkjlkj', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P0', 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 33, 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-28T00:11:55.301286'}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'description': 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- Custom status\n-- Custom status\n- In Progress\n-- Custom status\n-- Custom status\n-- Custom status\n- Completed\n-- Custom status\n-- Custom status\n\n2. How can we track a task through different stages and save the sequence of events or stages the task has gone through?\nI´m thinking it could be good for mapping out processes, identifying bottlenecks and provide valuable insights while improving and streamlining workflows.\n- Stages\n- Contacts taken\n- Respons time \n- Time to action after responses\n- Dependencies\n\nNeed to be able to record every action related to this action.\nCommunication integrations\n- Slack\n- Email\n- Text messages\n- Phonecalls\n- Calendar events, meetings\n- Zoom, Google meet, Teams etc..\n\n\n2. Set custom statuses per project (can use tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 34, 'created_at': '2025-02-10T07:16:03.352588', 'updated_at': '2025-03-03T14:16:31.129766'}, {'id': 68, 'name': 'Register application in GitHub Developer Console', 'description': 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 35, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-02-27T08:43:14.054358'}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'description': 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be lost"\nOR\n\nIs it possible, and is it desireable to keep parent child relationships across projects?\nSo that a parent can be in one project but the child tasks can be in different projects?\n\nLets say \nParent epic is \n"Internationalisation"\nChild user stories are\n- Timezones\n- Language\n- Currency\n- Day, Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 35, 'created_at': '2025-02-10T08:54:36.297869', 'updated_at': '2025-03-03T14:16:24.364985'}, {'id': 284, 'name': 'Add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 36, 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-28T00:11:55.301296'}, {'id': 281, 'name': 'Add a page for roadmap', 'description': 'Add some sort of high level plan that aims to keep PM/PO´s on track and not get lost into the details of an overwhelming large backlog', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 37, 'created_at': '2025-02-10T08:27:01.218606', 'updated_at': '2025-02-28T00:11:55.301293'}, {'id': 69, 'name': 'Handle callback from GitHub', 'description': 'Implement the callback endpoint to process the authorization code from GitHub.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 38, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-02-26T21:53:17.041822'}, {'id': 273, 'name': 'Disable parent task selector in epics', 'description': 'and add text, Epic can´t have parent tasks', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 38, 'created_at': '2025-02-10T00:45:20.740910', 'updated_at': '2025-02-28T00:11:55.301283'}, {'id': 280, 'name': 'logging (task and project history)', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 39, 'created_at': '2025-02-10T07:37:44.435112', 'updated_at': '2025-02-28T00:11:55.301291'}, {'id': 275, 'name': 'Add support for sprints/cycles', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 40, 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-28T00:11:55.301285'}, {'id': 100, 'name': '1.1 User Registration', 'description': '<blockquote><p>As a user, I want to register with a username, email, and password so that I can create an account and access the system. </p></blockquote><p>**Acceptance Criteria:** </p><ul><li><p>• User can input valid username, email, and password.</p></li><li><p>• Username and email must be unique. </p></li><li><p>• Errors are displayed for invalid inputs or duplicate accounts. </p></li><li><p>• Passwords must meet complexity requirements and be securely stored. </p></li><li><p>• Successful registration redirects users to a login page.</p></li></ul><hr><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 41, 'created_at': '2025-01-07T19:59:09.044667', 'updated_at': '2025-03-03T14:20:10.801828'}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'description': 'kkkkkkkjjjjj\nlkajdlökjsdfölkjsdfölkjdf', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 41, 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-28T00:11:55.301297'}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'description': 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitHub Login involves integrating OAuth 2.0, which both services support. The complexity depends on your app’s existing setup, frameworks, and experience with third-party authentication. Below is a breakdown:\n\nKey Steps for Implementing Google or GitHub Login\n\t1.\tSet Up OAuth Credentials:\n\t•\tRegister your application in the Google Cloud Console or GitHub Developer Settings.\n\t•\tObtain the client ID and client secret.\n\t2.\tInstall Required Libraries:\n\t•\tUse a library for OAuth (e.g., flask-oauthlib, python-social-auth, or authlib).\n\t•\tPopular frameworks like Flask and Django already have robust integrations for OAuth providers.\n\t3.\tBackend Configuration:\n\t•\tImplement an endpoint to handle the OAuth flow (/auth/login/google or /auth/login/github).\n\t•\tConfigure your app to send users to Google or GitHub’s authentication page.\n\t•\tHandle the OAuth callback to exchange the authorization code for an access token.\n\t•\tVerify the token and fetch user information (e.g., email, name).\n\t4.\tLink OAuth to User Registration:\n\t•\tOn successful login, create or retrieve a user in your database.\n\t•\tStore the user’s details like email, OAuth provider ID, and access token.\n\t5.\tFrontend Integration (if applicable):\n\t•\tAdd “Login with Google” or “Login with GitHub” buttons.\n\t•\tRedirect to your backend’s OAuth endpoint when clicked.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 42, 'created_at': '2025-01-07T12:15:54.291625', 'updated_at': '2025-02-28T00:11:55.301262'}, {'id': 107, 'name': '1.1.1 Database Changes for User Registration', 'description': '<p>1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.</p><p></p><hr><p>Adding text</p><pre><code>CREATE TABLE public.users ( id SERIAL PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL, created_at TIMESTAMP DEFAULT NOW(), updated_at TIMESTAMP DEFAULT NOW() );</code></pre><p></p>', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 42, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-03-03T20:49:45.725711'}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'description': 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 18, 'status': 'Not Started', 'sort_order': 43, 'created_at': '2025-01-07T19:53:50.085064', 'updated_at': '2025-02-28T00:11:55.301267'}, {'id': 61, 'name': 'Parent task assignment', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'sort_order': 44, 'created_at': '2025-01-04T22:31:45.205815', 'updated_at': '2025-02-28T00:11:55.301224'}, {'id': 108, 'name': '1.1.2 Backend API for Registration', 'description': '•\tCreate an endpoint POST /api/register:\n•\tValidate input fields.\n•\tHash the password using bcrypt or argon2.\n•\tInsert the user into the users table.\n•\tReturn success/failure responses.\ndddhfff\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 44, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-27T08:43:14.054375'}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t•\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t•\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 45, 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-02-28T00:11:55.301265'}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'description': 'PRD: Define roles and permissions to restrict access. Roles include admin, developer, and viewer. Implement middleware for access control checks.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 46, 'created_at': '2025-01-07T19:54:09.204981', 'updated_at': '2025-02-28T00:11:55.301268'}, {'id': 112, 'name': '1.2.2 Frontend Login Page', 'description': 'Develop a frontend form for user login with email and password inputs.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 47, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054377'}, {'id': 83, 'name': 'Notifications', 'description': 'Implement sending notifications to selected people triggered by events.\nCustomizing messages:\nPossibility to adjust how detailed the information should be and what level of technical difficulty the language can contain. Integration to LMS that tailors messages to different target groups and then sends the appropriate version to the appropriate target group.\n\n\n\n- Ready for Release\n   - Send documentation of new feature to support and customer success team\n      - Add technical documentation as file in documentation library.\n      - User documentation\n      - Create and send feature description to Sales & Marketing dep.\n      - Create and send feature description and estimation of added value for company and customer to Investors.\n   - Create and publish release notes online and in inline message system.\n\nRead more: https://www.notion.so/lacunamedia/Create-and-send-messages-triggered-by-events-174979257fc08022b18bc76d3b28a4b3?pvs=4', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 47, 'created_at': '2025-01-07T16:10:54.030609', 'updated_at': '2025-02-28T00:11:55.301263'}, {'id': 99, 'name': 'Enhance User Account Management', 'description': 'PRD: Provide additional account management features for users and admins. Includes profile management, password reset functionality, and audit logging.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'sort_order': 48, 'created_at': '2025-01-07T19:54:20.692949', 'updated_at': '2025-02-28T00:11:55.301269'}, {'id': 109, 'name': '1.1.3 Create Frontend Registration Page', 'description': 'Develop a frontend form to collect user registration details.\n•\tAdd a form for username, email, and password inputs.\n•\tUse client-side validation (e.g., email format).\n•\tSend a POST request to /api/register.\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 49, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-27T08:43:14.054375'}, {'id': 110, 'name': '1.1.4 Unit Tests for Registration', 'description': 'Write unit tests for:\n\n•\tValid registration.\n•\tDuplicate username/email scenarios.\n•\tInvalid input handling.\nff', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 50, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-27T08:43:14.054376'}, {'id': 101, 'name': '1.2 User Login', 'description': 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n•\tUsers can log in with a valid email and password.\n•\tErrors are displayed for invalid credentials.\n•\tSuccessful login stores a session or JWT token.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 52, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054370'}, {'id': 111, 'name': '1.2.1 Backend API for Login', 'description': 'Create POST /api/login endpoint to handle user login.\njjsjj', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 54, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054377'}, {'id': 113, 'name': '1.2.3 Session Management', 'description': 'Implement secure session handling using cookies or JWT.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 55, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054378'}, {'id': 114, 'name': '1.2.4 Unit Tests for Login', 'description': 'Write tests for successful and failed login attempts.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 56, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054379'}, {'id': 106, 'name': 'Password Reset', 'description': 'As a user, I want to reset my password securely using email.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'sort_order': 57, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054373'}, {'id': 128, 'name': 'Frontend Password Reset Page', 'description': 'Develop a page for users to enter a new password using a valid token.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 58, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054388'}, {'id': 129, 'name': 'Testing Password Reset', 'description': 'Write tests for email delivery, token validation, and password updates.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 59, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054389'}, {'id': 102, 'name': 'Logout', 'description': 'As a user, I want to log out so that I can end my session securely.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 60, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054371'}, {'id': 117, 'name': 'Tests for Logout', 'description': 'Verify session invalidation and redirection to the login page.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 61, 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-27T08:43:14.054381'}, {'id': 381, 'name': 'Delete this', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 61, 'created_at': '2025-02-28T23:48:05.992788', 'updated_at': '2025-02-28T23:48:38.311759'}, {'id': 116, 'name': 'Frontend Logout Button', 'description': 'Add a logout button to the UI and handle session clearing.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 62, 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-27T08:43:14.054380'}, {'id': 115, 'name': 'Backend API for Logout', 'description': 'Create POST /api/logout endpoint to invalidate user sessions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 63, 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-27T08:43:14.054379'}, {'id': 45, 'name': 'Display Default Value in Dropdown', 'description': 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 64, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054343'}, {'id': 50, 'name': 'Retrieve Current Parent Task', 'description': 'Retrieve the current parent task’s ID and name from the backend.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Completed', 'sort_order': 65, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054346'}, {'id': 51, 'name': 'Set Default Value', 'description': 'Set the default value in the dropdown based on the retrieved data.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 45, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 1, 'status': 'Not Started', 'sort_order': 66, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054347'}, {'id': 46, 'name': 'Search for Parent Tasks', 'description': 'Allow users to search for tasks dynamically in the dropdown by typing.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'sort_order': 67, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054344'}, {'id': 54, 'name': 'Test Partial Matching', 'description': 'Ensure the search results update in real-time as the user types.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 68, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054349'}, {'id': 47, 'name': 'Handle Large Datasets Efficiently', 'description': 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'sort_order': 69, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054344'}, {'id': 56, 'name': 'Paginate API Responses', 'description': 'Implement server-side filtering and pagination for large datasets.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 70, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054350'}, {'id': 55, 'name': 'Enable Lazy Loading', 'description': 'Enable lazy loading or virtualization in Virtual Select.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 71, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054350'}, {'id': 48, 'name': 'Select and Deselect Parent Tasks', 'description': 'Allow users to select a parent task or deselect by choosing "None."', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 72, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054345'}, {'id': 57, 'name': 'Ensure None Option Availability', 'description': 'Add “None” as a selectable option and ensure it stays at the top of the list.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 73, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054351'}, {'id': 58, 'name': 'Handle Selection Events', 'description': 'Implement event listeners to update the form’s state when the selection changes.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 74, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054352'}, {'id': 49, 'name': 'Integrate Dropdown with Task Form', 'description': 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 75, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054346'}, {'id': 383, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 76, 'created_at': '2025-03-01T01:00:27.095399', 'updated_at': '2025-03-01T02:00:27.103602'}, {'id': 376, 'name': 'Subtask test', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 76, 'created_at': '2025-02-28T23:01:44.247988', 'updated_at': '2025-02-28T23:02:00.075567'}, {'id': 59, 'name': 'Bind Dropdown to Form Field', 'description': 'Bind the dropdown to the form’s parent task field.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'In Progress', 'sort_order': 76, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054352'}, {'id': 60, 'name': 'Test Form Submission', 'description': 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 77, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054353'}, {'id': 52, 'name': 'Add Search Box to Dropdown', 'description': 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 78, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054348'}, {'id': 53, 'name': 'Implement AJAX Search', 'description': 'Implement AJAX-based search to fetch tasks dynamically from the backend.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 79, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054348'}, {'id': 42, 'name': 'Choose Dropdown Library', 'description': 'Research and decide on the dropdown library to use.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 80, 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-27T08:43:14.054341'}, {'id': 378, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 80, 'created_at': '2025-02-28T23:17:32.404713', 'updated_at': '2025-03-01T00:17:32.410920'}, {'id': 43, 'name': 'Integrate Dropdown Library', 'description': 'Integrate the chosen dropdown library into the project.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Completed', 'sort_order': 81, 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-27T08:43:14.054342'}, {'id': 90, 'name': 'Update frontend to display and manage multiple contributors', 'description': 'Allow users to view, add, or remove multiple contributors via the UI.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 82, 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-27T08:43:14.054364'}, {'id': 377, 'name': 'Taskade', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 82, 'created_at': '2025-02-28T23:02:24.453543', 'updated_at': '2025-03-03T18:07:16.276655'}, {'id': 88, 'name': 'Update database schema for multiple contributors', 'description': 'Modify the task table to support many-to-many relationships for contributors.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 83, 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-27T08:43:14.054362'}, {'id': 89, 'name': 'Develop backend API for adding contributors to a task', 'description': 'Create endpoints to add, update, and remove contributors for a task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 84, 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-27T08:43:14.054363'}, {'id': 86, 'name': 'Allow designation of task owner', 'description': 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 85, 'created_at': '2025-01-07T19:33:29.330562', 'updated_at': '2025-02-27T08:43:14.054361'}, {'id': 375, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 85, 'created_at': '2025-02-28T22:48:35.594251', 'updated_at': '2025-02-28T23:48:35.676455'}, {'id': 93, 'name': 'Update frontend to manage task ownership', 'description': 'Allow users to assign or update the task owner via the UI.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 86, 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-27T08:43:14.054365'}, {'id': 384, 'name': 'Changed title', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 86, 'created_at': '2025-03-01T12:06:32.303897', 'updated_at': '2025-03-03T18:06:15.844478'}, {'id': 91, 'name': 'Update database schema for task ownership', 'description': 'Add a column or relationship to assign a single owner per task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 87, 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-27T08:43:14.054364'}, {'id': 92, 'name': 'Develop backend API for assigning task owner', 'description': 'Create endpoints to assign or update the owner of a task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 88, 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-27T08:43:14.054365'}, {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 89, 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-02-27T08:43:14.054362'}, {'id': 96, 'name': 'Allow admin users to create and customize contributor roles via frontend', 'description': 'Provide UI functionality for admins to manage contributor roles dynamically.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 90, 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-27T08:43:14.054367'}, {'id': 94, 'name': 'Add database support for contributor roles', 'description': 'Introduce a roles table and link contributors to specific roles for tasks.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 91, 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-27T08:43:14.054366'}, {'id': 95, 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 92, 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-27T08:43:14.054367'}, {'id': 127, 'name': 'Backend API for Password Reset', 'description': 'Create endpoints to handle password reset requests and token validation.\ndfdf\n\nasdasd', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 93, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054387'}, {'id': 126, 'name': 'Email Configuration for Password Reset', 'description': 'Configure email service to send password reset links.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 94, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054387'}, {'id': 104, 'name': 'Middleware for Role Enforcement', 'description': 'As a system, I want to enforce role-based access to specific routes.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 98, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 95, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054372'}, {'id': 122, 'name': 'Testing Role Enforcement', 'description': 'Write tests to ensure proper access control based on roles.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 96, 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-02-27T08:43:14.054384'}, {'id': 121, 'name': 'Develop Role Enforcement Middleware', 'description': 'Implement middleware to check user roles for access control.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 104, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 97, 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-02-27T08:43:14.054383'}, {'id': 105, 'name': 'Profile Management', 'description': 'As a user, I want to update my profile (username, email, password).', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 99, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 98, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054373'}, {'id': 123, 'name': 'Backend API for Profile Management', 'description': 'Create PATCH /api/profile endpoint to update user details.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 99, 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-02-27T08:43:14.054385'}, {'id': 125, 'name': 'Testing Profile Updates', 'description': 'Write tests for profile update functionality.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 100, 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-02-27T08:43:14.054386'}, {'id': 124, 'name': 'Frontend Profile Page', 'description': 'Develop a profile page for editing user details.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 101, 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-02-27T08:43:14.054385'}, {'id': 103, 'name': 'Role Assignment', 'description': 'As an administrator, I want to assign roles to users so that I can control access to certain features.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 98, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 102, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054372'}, {'id': 120, 'name': 'Testing Role Assignment', 'description': 'Write tests to validate role changes and restrictions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 103, 'created_at': '2025-01-07T20:40:58.383687', 'updated_at': '2025-02-27T08:43:14.054383'}, {'id': 119, 'name': 'Backend API for Role Assignment', 'description': 'Create POST /api/assign-role endpoint to manage user roles.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 104, 'created_at': '2025-01-07T20:40:58.383687', 'updated_at': '2025-02-27T08:43:14.054382'}, {'id': 118, 'name': 'Database Changes for Role Assignment', 'description': 'Add a role column to the users table.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 105, 'created_at': '2025-01-07T20:40:58.383687', 'updated_at': '2025-02-27T08:43:14.054381'}, {'id': 44, 'name': 'Test Performance with 500 Tasks', 'description': 'Ensure dropdown performance remains smooth with 500 tasks.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 107, 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-26T21:53:17.041813'}]
2025-03-04 15:40:08,638 DEBUG: Task types: ['all', 'Subtask', 'Epic', 'User Story']
2025-03-04 15:40:08,638 DEBUG: Projects: [<Project Project Alpha (ID: 1)>, <Project Project Beta (ID: 2)>, <Project Project Gamma (ID: 3)>, <Project Project Theta (ID: 4)>, <Project Project Delta (ID: 5)>, <Project PMS - Feature Requests (ID: 7)>, <Project PMS - Backlog (ID: 6)>, <Project Miscellaneous (ID: 19)>]
2025-03-04 15:40:08,639 DEBUG: Tasks response: [{'id': 336, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:07:11.299563', 'updated_at': '2025-02-28T15:07:11.310976'}, {'id': 344, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:16.258493', 'updated_at': '2025-02-28T15:18:16.268248'}, {'id': 342, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:11.944980', 'updated_at': '2025-02-28T15:18:11.954065'}, {'id': 347, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:24:45.846396', 'updated_at': '2025-02-28T15:24:45.860885'}, {'id': 354, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:54:59.543585', 'updated_at': '2025-02-28T15:54:59.553122'}, {'id': 248, 'name': 'Implement Toggle Button', 'description': 'Add a toggle button to switch between hierarchical and flat views.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-05T12:58:14.518518', 'updated_at': '2025-02-28T00:11:48.483207'}, {'id': 350, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:32:49.928206', 'updated_at': '2025-02-28T15:32:49.935531'}, {'id': 338, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:10.122843', 'updated_at': '2025-02-28T15:18:10.128941'}, {'id': 334, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:44:06.347090', 'updated_at': '2025-02-28T14:44:06.354371'}, {'id': 352, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:51:56.533768', 'updated_at': '2025-02-28T15:51:56.563880'}, {'id': 369, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T21:17:46.272998', 'updated_at': '2025-02-28T22:17:46.285417'}, {'id': 351, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:32:58.672570', 'updated_at': '2025-02-28T15:32:58.678298'}, {'id': 341, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:11.691354', 'updated_at': '2025-02-28T15:18:11.699365'}, {'id': 329, 'name': 'Implement an API endpoint for submitting raw feature requests.', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-27T23:13:09.068616', 'updated_at': '2025-03-01T01:00:05.807248'}, {'id': 356, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T15:08:08.061166', 'updated_at': '2025-02-28T16:08:08.066215'}, {'id': 362, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:14:50.969730', 'updated_at': '2025-02-28T19:14:50.979052'}, {'id': 370, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T21:27:30.386959', 'updated_at': '2025-02-28T22:27:30.395572'}, {'id': 353, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:52:04.500938', 'updated_at': '2025-02-28T15:52:04.512331'}, {'id': 244, 'name': 'Scroll to Updated Task', 'description': 'Automatically scroll to the updated task in the list if it’s out of view.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 0, 'created_at': '2025-02-05T12:56:52.818501', 'updated_at': '2025-02-28T00:11:57.987007'}, {'id': 358, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T15:46:04.956844', 'updated_at': '2025-02-28T16:46:04.966511'}, {'id': 366, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:38:39.027061', 'updated_at': '2025-02-28T19:38:39.048248'}, {'id': 367, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:39:25.734101', 'updated_at': '2025-02-28T19:39:25.739322'}, {'id': 340, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:11.061737', 'updated_at': '2025-02-28T15:18:11.075736'}, {'id': 365, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:30:48.877580', 'updated_at': '2025-02-28T19:30:48.887060'}, {'id': 333, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:36:20.683426', 'updated_at': '2025-02-28T14:36:20.691337'}, {'id': 332, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:35:43.663809', 'updated_at': '2025-02-28T14:35:43.673337'}, {'id': 348, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:26:17.632940', 'updated_at': '2025-02-28T15:26:17.642972'}, {'id': 355, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:55:16.105634', 'updated_at': '2025-02-28T15:55:16.131837'}, {'id': 361, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T17:11:52.257703', 'updated_at': '2025-02-28T18:11:52.262071'}, {'id': 337, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:07.626569', 'updated_at': '2025-02-28T15:18:07.632643'}, {'id': 346, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:24:40.311054', 'updated_at': '2025-02-28T15:24:40.322156'}, {'id': 343, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:12.267445', 'updated_at': '2025-02-28T15:18:12.278088'}, {'id': 357, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T15:08:15.356759', 'updated_at': '2025-02-28T16:08:15.371374'}, {'id': 335, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:44:45.530624', 'updated_at': '2025-02-28T14:44:45.542212'}, {'id': 373, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T22:10:59.863170', 'updated_at': '2025-02-28T23:10:59.893542'}, {'id': 292, 'name': 'Issue: assigning contributor does not work', 'description': '<p>### **Summary of problem and solution** The issue was that assigning a contributor to a task via the /tasks//assign_contributor API endpoint resulted in a **400 Bad Request** error. Upon investigation, the following problems were identified: 1. **Missing CSRF Token:** - The request failed due to a missing CSRF token, as shown in the error message: *“Bad Request: The CSRF token is missing.”* - The frontend was not correctly including the CSRF token in the request headers. 1. **JavaScript Error (Undefined CSRF Token Variable):** - The error *“ReferenceError: csrfToken is not defined”* indicated that the CSRF token was not being retrieved properly in the JavaScript code. 1. **Incorrect Fetch Request Headers:** - The fetch request did not include the CSRF token under the correct key (X-CSRFToken). - The script attempted to send the request without properly extracting the CSRF token from the meta tag. ### **Solution** 1. **Include the CSRF Token in the JavaScript Code** The CSRF token was retrieved from the meta tag and used in the request headers: ```jsx // Retrieve CSRF token from meta tag const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\'); ``` This ensures that the CSRF token is correctly fetched and available in the JavaScript scope. 1. **Modify the Fetch Request to Include CSRF Token** The request to assign a contributor was updated to include the token: ```jsx const response = await fetch(`/tasks/${taskId}/assign_contributor`, { method: "POST", headers: { "Content-Type": "application/json", "X-CSRFToken": csrfToken // Include CSRF token }, body: JSON.stringify({ contributor_id: parseInt(contributorId, 10) }), }); ``` - **Ensures the CSRF token is sent in the request headers** so that Flask-WTF does not reject the request. 1. **Verify and Debug Network Requests** - The updated request headers were verified using **Chrome DevTools &gt; Network tab** to ensure the X-CSRFToken was included. - The error messages disappeared, and the contributor assignment request **succeeded with a 200 OK response**. --- ### **Final Outcome** 🚀 The issue was resolved, and contributors can now be assigned successfully to tasks without triggering a CSRF validation error. ### **Key Learnings from This Session** This debugging session covered several important aspects of **web development with Flask and JavaScript**, particularly related to **API requests, CSRF protection, debugging tools, and database interactions**. Here are the key takeaways: --- ### **1. CSRF Protection in API Requests** - **Issue:** The initial error was due to **a missing CSRF token** when making a `POST` request. - **Fix:** The solution was to **retrieve the CSRF token from a meta tag** in the HTML and include it in the request headers. - **Key Learning:** Flask-WTF requires CSRF tokens for form and API submissions to **prevent cross-site request forgery (CSRF) attacks**.✅ Always ensure that API requests include a valid CSRF token. --- ### **2. Debugging JavaScript Fetch Requests** - **Issue:** The JavaScript code was making a fetch request, but the variable `csrfToken` was not properly defined, causing a `ReferenceError`. - **Fix:** Declaring `csrfToken` at the beginning of the script: ```jsx const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\'); ``` - **Key Learning:**✅ JavaScript variables must be defined before they are used.✅ Use browser **developer tools (DevTools) Network tab** to inspect headers, payloads, and responses when debugging API requests. --- ### **3. Structuring Flask Routes for Task Management** - **Issue:** The `assign_contributor` route was failing due to incorrect request payload validation. - **Fix:** Improved the route’s error handling and logging: ```python @bp.route(\'//assign_contributor\', methods=[\'POST\']) def assign_contributor(task_id): try: data = request.get_json() contributor_id = int(data.get(\'contributor_id\', 0)) if not contributor_id: return jsonify({\'error\': \'Valid Contributor ID is required\'}), 400 ``` - **Key Learning:**✅ Always validate incoming data in Flask routes to prevent type errors.✅ Use `request.get_json()` properly and handle missing or incorrect data gracefully. --- ### **4. Utilizing Browser DevTools for Debugging** - **Issue:** The fetch request was failing with a `400 Bad Request`, and the browser console showed `ReferenceError: csrfToken is not defined`. - **Fix:** - Used **Network tab** to inspect the request payload and headers. - Used **Console tab** to catch JavaScript errors early. - **Key Learning:**✅ DevTools is a **critical** tool for diagnosing network request issues.✅ Always **check console errors** before assuming it\'s a backend issue. --- ### **5. Database Queries and ORM Debugging** - **Issue:** Tasks were not being updated correctly, possibly due to missing commit statements. - **Fix:** Ensured that:was executed properly. ```python task.contributor_id = contributor_id db.session.commit() ``` - **Key Learning:**✅ Always call `db.session.commit()` after making changes in SQLAlchemy.✅ Rollback transactions if an error occurs to avoid database inconsistency. --- ### **6. Handling Asynchronous JavaScript Logic** - **Issue:** The `assignContributor` function was executing before the page was fully loaded. - **Fix:** Wrapped it inside a function that ensures elements exist: ``` window.setupContributorAssignment = function () { const assignButton = $("#assign-contributor-btn"); if (!assignButton.length) { setTimeout(setupContributorAssignment, 500); // Retry in 500ms return; } ``` - **Key Learning:**✅ Use `setTimeout` to **retry event binding** when elements are dynamically loaded.✅ Always **check if elements exist before attaching event handlers**. --- ### **7. Best Practices for Flask Logging &amp; Error Handling** - **Issue:** Lack of clear logging when API calls failed. - **Fix:** Added better logging to track failures: ```python logger.info(f"Assigning contributor to task ID {task_id}") try: # Process request... except Exception as e: logger.error(f"Error assigning contributor: {e}") ``` - **Key Learning:**✅ Log **every major step** in API processing to simplify debugging.✅ Differentiate between `logger.info()`, `logger.warning()`, and `logger.error()` based on severity. --- ### **Final Takeaways** 🚀 **Understanding CSRF protection** and **properly structuring API requests** is crucial for secure web applications. 🔍 **Browser DevTools is invaluable** for diagnosing frontend issues, especially in JavaScript. 🐍 **Flask requires proper request validation, database transactions, and logging** to maintain stability. ⚡ **Asynchronous JavaScript must handle dynamic elements carefully** to avoid runtime errors. This session reinforced best practices in **frontend-backend integration, debugging, and security**, making it a great learning experience! 🚀🔥</p>', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 0, 'created_at': '2025-02-10T09:11:12.273779', 'updated_at': '2025-03-04T00:41:24.838143'}, {'id': 265, 'name': 'Smooth transition for toggles', 'description': '<p>Added new description</p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-03-01T15:23:05.271095'}, {'id': 339, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:10.856511', 'updated_at': '2025-02-28T15:18:10.860682'}, {'id': 331, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:35:35.797059', 'updated_at': '2025-02-28T14:35:35.813440'}, {'id': 345, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:53.170926', 'updated_at': '2025-02-28T15:18:53.179222'}, {'id': 327, 'name': '🏆\xa0Epic: AI-Driven Feature Planning & Estimation', 'description': '<h2><strong>Description:&nbsp;</strong></h2><p>AI assists in refining raw feature requests into</p><p>structured plans, generating PRDs, Epics, User Stories, Acceptance Criteria, and Edge Cases. AI also provides intelligent estimations based on historical data and improves accuracy over time.</p><p></p><hr><h2>## Heading</h2><p></p>', 'task_type': 'Epic', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-27T23:02:31.274292', 'updated_at': '2025-03-03T00:13:33.461344'}, {'id': 386, 'name': 'Test task', 'description': '<p>Testing tiptap editor lkjlk</p><hr><p>Write something</p><hr><p>Write something</p><hr><p></p>', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 284, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 9, 'status': 'In Progress', 'sort_order': 1, 'created_at': '2025-03-01T12:39:07.359868', 'updated_at': '2025-03-04T15:33:53.366530'}, {'id': 359, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-28T15:54:42.242569', 'updated_at': '2025-03-01T02:01:18.851236'}, {'id': 291, 'name': 'Add dropdowns in task list for changing: Assigned to, Estimate, Task Type and Status', 'description': '<p>Write Description task description...</p>', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 1, 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-03-01T22:09:13.882787'}, {'id': 245, 'name': 'Apply Dynamic Sorting and Filtering', 'description': 'Ensure the task list dynamically updates its sorting and filtering after a status change.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'In Progress', 'sort_order': 1, 'created_at': '2025-02-05T12:56:52.818501', 'updated_at': '2025-02-28T00:12:01.504825'}, {'id': 64, 'name': 'Setup project credentials for Google API', 'description': 'Generate client ID and secret from Google API Console for your application.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-03-01T02:01:02.546625'}, {'id': 250, 'name': 'Preserve User Preferences', 'description': 'Persist the user’s chosen view state between sessions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-05T12:58:14.518518', 'updated_at': '2025-02-28T00:11:48.483213'}, {'id': 360, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-28T15:54:58.904932', 'updated_at': '2025-03-01T02:01:18.851237'}, {'id': 249, 'name': 'Define View States', 'description': 'Clearly label and define the view states for hierarchical and flat sorting.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-05T12:58:14.518518', 'updated_at': '2025-02-28T00:11:48.483213'}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'description': '<p>Write your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p>', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-03-03T08:46:23.302934'}, {'id': 266, 'name': 'Highlight the nested tasks', 'description': '<p>lkjlkjlkjlkjlkjlkjWrite your task description...</p><p></p><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-03-03T17:32:52.809368'}, {'id': 67, 'name': 'Test Google OAuth flow', 'description': 'Verify the OAuth flow using test accounts and check the token exchange.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-03-01T02:01:02.546635'}, {'id': 243, 'name': 'Highlight Updated Task', 'description': 'Highlight the updated task in the UI to provide immediate visual feedback.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 2, 'created_at': '2025-02-05T12:56:52.818501', 'updated_at': '2025-02-28T00:12:01.504819'}, {'id': 326, 'name': 'Add dropdown in task list for changing: Project', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-26T22:10:15.209008', 'updated_at': '2025-03-01T02:01:12.498734'}, {'id': 295, 'name': 'Issue: drag and drop errors', 'description': '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-10T09:22:54.461413', 'updated_at': '2025-02-28T00:11:55.301307'}, {'id': 290, 'name': 'issue: error when changing task type and', 'description': 'issue: error when changing task type and parent task before saving', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-10T09:00:03.417734', 'updated_at': '2025-03-01T02:01:18.851234'}, {'id': 257, 'name': 'Update Task API Integration', 'description': "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-05T22:55:49.566819', 'updated_at': '2025-02-28T00:11:57.987011'}, {'id': 66, 'name': 'Setup OAuth scopes for Google API', 'description': 'Determine the required OAuth scopes for your application and add them to the configuration.\nedit', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-03-01T02:01:02.546634'}, {'id': 133, 'name': 'Step 4: Enhance Logging in models.py', 'description': 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nupdating the Task model in the following ways:\n\n1.\tLog Changes to parent_id:\n\t•\tLog changes to parent_id during updates, including old and new values.\n\t2.\tValidate Hierarchy with Logging:\n\t•\tLog detailed messages when validating hierarchy changes, especially for circular dependency checks.\n\nHere’s how the models.py can be updated:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy import func, cast, CheckConstraint\nfrom sqlalchemy.orm import validates\nfrom app.extensions.db import db\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\nclass Task(db.Model):\n    __tablename__ = "task"\n    \n    # Other columns...\n\n    parent_id = db.Column(\n        db.Integer, db.ForeignKey("task.id"), index=True, nullable=True\n    )\n\n    # Relationships\n    parent = db.relationship(\n        "Task", remote_side=[id], back_populates="children", lazy="select"\n    )\n    children = db.relationship(\n        "Task", back_populates="parent", lazy="select"\n    )\n\n    \n\n\n    @staticmethod\n    def _validate_no_circular_references(new_parent_id):\n        """\n        Validates that there are no circular references in the task hierarchy.\n\n        Args:\n            new_parent_id (int): The new parent ID to validate.\n\n        Raises:\n            ValueError: If a circular reference is detected.\n        """\n        visited = set()\n        current_parent_id = new_parent_id\n\n        logger.info(f"Validating circular references for parent ID: {new_parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error(\n                    f"Circular reference detected: Parent ID {current_parent_id} already visited."\n                )\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            # Fetch the next parent_id in the hierarchy\n            parent = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not parent:\n                break  # Exit if no parent is found\n            current_parent_id = parent.parent_id\n\n        logger.info("No circular reference detected.")\n\n    @validates(\'parent_id\', \'task_type\')\n    def validate_task_changes(self, key, value):\n        """\n        Validates changes to \'parent_id\' and \'task_type\'.\n        Ensures hierarchy validity and checks for circular references.\n        """\n        logger.debug(f"Validating {key} change for Task {self.id}: {value}")\n\n        if key == \'parent_id\':\n            # Log changes to parent_id\n            if self.id and value != self.parent_id:\n                logger.info(f"Task {self.id}: Updating \'parent_id\' from {self.parent_id} to {value}")\n\n            # Prevent a task from being its own parent\n            if value and value == self.id:\n                logger.error("A task cannot be its own parent.")\n                raise ValueError("A task cannot be its own parent.")\n\n            # Check for circular references\n            if value:\n                Task.check_circular_reference(self.id, value)\n\n        elif key == \'task_type\':\n            # Log changes to task_type\n            if self.id and value != self.task_type:\n                logger.info(f"Task {self.id}: Updating \'task_type\' from {self.task_type} to {value}")\n\n        # Check hierarchy rules without triggering further validation\n        if key in [\'parent_id\', \'task_type\']:\n            self._validate_hierarchy_change(key, value)\n\n        logger.info(f"Validation passed for {key}: {value}")\n        return value\n\n    def _validate_hierarchy_change(self, key, value):\n        """\n        Validates hierarchy rules for the task based on `task_type` and `parent_id`.\n        """\n        if key == \'parent_id\' and value:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=value).first()\n            if not parent_task:\n                raise ValueError("Parent task does not exist.")\n\n            logger.debug(f"Validating hierarchy: Task {self.id}, Parent Type: {parent_task.task_type}")\n            if self.task_type == "User Story" and parent_task.task_type != "Epic":\n                raise ValueError("User Stories must have an Epic as a parent.")\n            if self.task_type == "Subtask" and parent_task.task_type != "User Story":\n                raise ValueError("Subtasks must have a User Story as a parent.")\n\n        elif key == \'task_type\' and self.parent_id:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=self.parent_id).first()\n            if parent_task:\n                logger.debug(f"Validating hierarchy: Task Type: {value}, Parent Type: {parent_task.task_type}")\n                if value == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError("User Stories must have an Epic as a parent.")\n                if value == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError("Subtasks must have a User Story as a parent.")\n\n        logger.info(f"Hierarchy validation passed for Task {self.id if self.id else \'New Task\'}.")\n\n    @staticmethod\n    def check_circular_reference(task_id, parent_id):\n        """\n        Iteratively checks for circular references in the task hierarchy.\n        Prevents stack overflow on deep hierarchies.\n        """\n        visited = set()\n        current_parent_id = parent_id\n\n        logger.info(f"Checking circular reference for Task {task_id} with Parent ID: {parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error("Circular reference detected!")\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            if current_parent_id == task_id:\n                logger.error("A task cannot be its own ancestor.")\n                raise ValueError("A task cannot be its own ancestor.")\n\n            # Fetch the next parent_id in the hierarchy\n            task = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not task:\n                break\n            current_parent_id = task.parent_id\n\n        logger.info("Circular reference check passed.")\n```\nKey Enhancements:\n\t1.\tlog_and_validate_parent_id_change:\n\t•\tLogs the old and new parent_id whenever it changes.\n\t•\tEnsures no circular references are introduced.\n\t2.\t_validate_no_circular_references:\n\t•\tValidates the parent_id field to prevent circular dependencies.\n\t•\tLogs progress and raises detailed errors if violations occur.\n\t3.\tlog_and_validate_task_type_change:\n\t•\tLogs changes to task_type with the old and new values.\n\t•\tRevalidates hierarchy rules when task_type changes.\n\t4.\tDetailed Logging for Circular Reference Validation:\n\t•\t_validate_no_circular_references and check_circular_reference methods log every step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t•\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 4, 'created_at': '2025-01-15T09:44:08.340041', 'updated_at': '2025-03-01T02:01:18.851231'}, {'id': 264, 'name': 'Close all / Open all childtasks', 'description': '<p>Added new description check other tab</p><p></p><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 7, 'status': 'Not Started', 'sort_order': 4, 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-03-03T07:43:17.298288'}, {'id': 328, 'name': '🟢 User Story 1: AI-Generated Feature Refinement\xa0(8 Story Points)', 'description': 'As a\xa0product manager,\xa0I want\xa0AI to refine raw feature requests into structured PRDs, Epics, and User Stories,\xa0So that\xa0I can quickly turn ideas into actionable tasks.\n\n', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 5, 'created_at': '2025-02-27T23:09:37.421629', 'updated_at': '2025-03-03T06:26:25.726905'}, {'id': 287, 'name': 'When moving a parent item to another project make sure the subtasks are moved as well', 'description': '', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 5, 'created_at': '2025-02-10T08:48:31.986870', 'updated_at': '2025-03-01T02:01:12.498732'}, {'id': 132, 'name': 'Step 1: Update tasks_table_interactions.js', 'description': '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the map for efficient parent-child relationship lookups instead of DOM traversal.\n\n```\nexport const TaskManager = {\n    init: function (csrfToken) {\n        this.csrfToken = csrfToken;\n        this.initTaskParentMap(); // Initialize the map\n        this.initDragAndDrop(); // Initialize drag-and-drop functionality\n    },\n\n    // Initialize a global map for task relationships\n    taskParentMap: new Map(),\n\n    // Build the taskParentMap from the DOM\n    initTaskParentMap: function () {\n        console.log("Initializing Task Parent Map...");\n        const rows = document.querySelectorAll("tr[data-task-id]");\n\n        rows.forEach((row) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = parseInt(row.dataset.parentId, 10) || null;\n            this.taskParentMap.set(taskId, parentId);\n        });\n\n        console.log("Task Parent Map initialized:", Array.from(this.taskParentMap.entries()));\n    },\n\n    // Update the map dynamically after drag-and-drop\n    updateTaskParentMap: function (taskId, parentId) {\n        console.log(`Updating Task Parent Map: Task ${taskId} -> Parent ${parentId}`);\n        this.taskParentMap.set(taskId, parentId);\n    },\n\n    initDragAndDrop: function () {\n        if (window.isDragAndDropInitialized) {\n            console.log("Drag-and-drop is already initialized.");\n            return;\n        }\n\n        console.log("Initializing drag-and-drop within TaskManager...");\n\n        const tableBody = document.querySelector("tbody");\n        if (!tableBody) {\n            console.warn("Task table body not found for drag-and-drop initialization");\n            return;\n        }\n\n        // Initialize Sortable.js for drag-and-drop functionality\n        Sortable.create(tableBody, {\n            handle: ".task-row", // Only draggable via `.task-row` elements\n            animation: 150, // Smooth animation\n            filter: ".task-open-link", // Prevent dragging on task links\n            preventOnFilter: true, // Prevent drag if filtered element is clicked\n            onEnd: async (event) => {\n                try {\n                    console.log("Drag-and-drop operation started...");\n                    const rows = Array.from(event.from.querySelectorAll(".task-row"));\n                    const reorderedTasks = [];\n\n                    rows.forEach((row, index) => {\n                        const taskId = parseInt(row.dataset.taskId, 10);\n                        let parentId = null;\n\n                        // Get the parent ID from the map or fallback to the dataset\n                        if (row.classList.contains("subtask-row")) {\n                            const parentRow = row.previousElementSibling;\n                            parentId = parentRow\n                                ? parseInt(parentRow.dataset.taskId, 10)\n                                : this.taskParentMap.get(taskId) || null;\n                        }\n\n                        // Update the taskParentMap dynamically\n                        this.updateTaskParentMap(taskId, parentId);\n\n                        reorderedTasks.push({\n                            id: taskId,\n                            sort_order: index + 1,\n                            parent_id: parentId,\n                        });\n                    });\n\n                    console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n                    console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n                    // Send the payload to the backend\n                    const response = await fetch("/tasks/reorder_subtasks", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                            "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n                        },\n                        body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n                    });\n\n                    if (!response.ok) {\n                        const errorData = await response.json();\n                        console.error("Error reordering tasks:", errorData);\n                        alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n                        return;\n                    }\n\n                    const data = await response.json();\n                    console.log("Task reordering successful:", data);\n\n                } catch (error) {\n                    console.error("Error during drag-and-drop operation:", error);\n                    alert("An unexpected error occurred while reordering tasks.");\n                }\n            },\n        });\n\n        window.isDragAndDropInitialized = true;\n        console.log("Drag-and-drop initialized successfully.");\n    },\n};\n```\n\nKey Updates:\n\t1.\tPrecomputed Map (taskParentMap):\n\t•\tThe initTaskParentMap function initializes the map by iterating over DOM elements and mapping each task’s ID to its parent ID.\n\t•\tThe updateTaskParentMap dynamically updates the map when tasks are reordered.\n\t2.\tEfficient Parent Lookup:\n\t•\tThe parentId is derived from the precomputed map rather than DOM traversal.\n\t3.\tBackend Payload:\n\t•\tA structured payload (reorderedTasks) is sent to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t•\tCSRF protection is ensured by passing the token to the request headers.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'sort_order': 5, 'created_at': '2025-01-15T09:44:08.338301', 'updated_at': '2025-03-01T02:01:18.851229'}, {'id': 134, 'name': 'Step 2: Update the Backend in routes.py', 'description': 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\nPlan for step 2:\n\t1.\tVerify the payload structure:\n\t•\tEnsure that the payload includes all necessary fields (id, sort_order, parent_id) for each task.\n\t•\tValidate that the parent-child relationships in the precomputed map (taskParentMap) are reflected correctly in the payload.\n\t2.\tSubmit the payload to the backend:\n\t•\tEnhance the fetch request in the onEnd function of initDragAndDrop to log detailed submission data.\n\t•\tConfirm the payload integrity in the browser console before submission.\n\t3.\tUpdate backend logging:\n\t•\tAdd logging to /reorder_subtasks in routes.py to confirm receipt of the correct payload and process parent-child updates.\n\t•\tLog before and after database updates for better debugging.\n\n-----\nUpdated tasks_table_interactions.js\n\nReplace this section:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    let parentId = null;\n```\nWith:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    const parentId = this.taskParentMap.get(taskId) || null;\n```\nThe this.taskParentMap provides a precomputed and dynamic mapping of taskId to parentId. By using this map, we avoid relying on DOM traversal logic (row.closest or row.previousElementSibling) during drag-and-drop operations, which can sometimes be unreliable or cumbersome.\n\nFull Revised onEnd section:\n```\nonEnd: async (event) => {\n    try {\n        console.log("Drag-and-drop operation started...");\n        const rows = Array.from(event.from.querySelectorAll(".task-row"));\n        const reorderedTasks = [];\n\n        rows.forEach((row, index) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = this.taskParentMap.get(taskId) || null;\n\n            // Update the taskParentMap dynamically\n            this.updateTaskParentMap(taskId, parentId);\n\n            reorderedTasks.push({\n                id: taskId,\n                sort_order: index + 1,\n                parent_id: parentId,\n            });\n        });\n\n        console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n        console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n        // Send the payload to the backend\n        const response = await fetch("/tasks/reorder_subtasks", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n            },\n            body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error("Error reordering tasks:", errorData);\n            alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n            return;\n        }\n\n        const data = await response.json();\n        console.log("Task reordering successful:", data);\n\n    } catch (error) {\n        console.error("Error during drag-and-drop operation:", error);\n        alert("An unexpected error occurred while reordering tasks.");\n    }\n}\n```\n---------------------------------\nEnsure updates include:\n\t•\tBetter Logging: Adding logs for key events such as database changes and validation results.\n\t•\tInput Validation: Ensure all required fields (id, sort_order, parent_id) exist in the payload.\n\t•\tPost-Commit Validation: Confirm database updates after the commit.\n\t•\tImproved Error Handling: Include specific error messages and consistent rollback mechanisms.\n\nBelow is the revised reorder_subtasks route with descriptive comments for each section:\n```\n@bp.route("/reorder_subtasks", methods=["POST"])\ndef reorder_subtasks():\n    """\n    Reorder subtasks globally or reassign them to a different parent.\n\n    Steps:\n    - Parse and validate input from the frontend.\n    - Update parent-child relationships and sort order in the database.\n    - Commit changes and return a success response.\n    - Handle errors gracefully and provide detailed logs for debugging.\n    """\n    logger.info("Entering reorder_subtasks route...")\n    logger.info(f"Received payload for reordering tasks: {request.json}")\n\n    try:\n        # Step 1: Parse input\n        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered\n        ordered_tasks = request.json.get("ordered_tasks", [])\n\n        logger.debug(f"Parsed parent_id: {parent_id}")\n        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")\n\n        # Step 2: Validate input\n        if not isinstance(ordered_tasks, list) or not all(\n            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task\n            for task in ordered_tasks\n        ):\n            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")\n            return jsonify({\n                "error": "Invalid input format for \'ordered_tasks\'. Each task must include \'id\', \'sort_order\', and \'parent_id\'."\n            }), 400\n\n        # Step 3: Validate parent task (if applicable)\n        if parent_id is not None:\n            parent_task = Task.query.get(parent_id)\n            if not parent_task:\n                logger.error(f"Parent task with ID {parent_id} not found.")\n                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400\n\n        logger.info("Input validation passed. Proceeding with task updates...")\n\n        # Step 4: Process updates for each subtask\n        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation\n\n        for task_data in ordered_tasks:\n            subtask_id = task_data["id"]\n            sort_order = task_data["sort_order"]\n            new_parent_id = task_data["parent_id"]\n\n            # Fetch the subtask from the database\n            subtask = Task.query.get(subtask_id)\n            if not subtask:\n                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")\n                continue\n\n            # Log and update parent_id if it changes\n            if new_parent_id is not None and new_parent_id != subtask.parent_id:\n                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")\n                subtask.parent_id = new_parent_id\n\n            # Update sort order\n            subtask.sort_order = sort_order\n            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")\n\n            # Add to the list of updated subtasks for validation\n            updated_subtasks.append(subtask)\n\n        # Step 5: Commit changes to the database\n        try:\n            db.session.commit()\n            logger.info(f"Subtasks reordered successfully: {[task[\'id\'] for task in ordered_tasks]}")\n        except Exception as e:\n            logger.error(f"Error committing changes to the database: {str(e)}")\n            db.session.rollback()\n            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500\n\n        # Step 6: Post-commit validation\n        for subtask in updated_subtasks:\n            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")\n            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")\n\n        # Step 7: Return success response\n        return jsonify({\n            "success": True,\n            "message": "Subtasks reordered successfully.",\n            "updated_subtasks": [subtask.id for subtask in updated_subtasks]\n        }), 200\n\n    except Exception as e:\n        # Step 8: Handle unexpected errors\n        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)\n        db.session.rollback()\n        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500\n```\nKey Changes and Descriptive Comments\n\t1.\tInput Parsing:\n\t•\tExtracts parent_id and ordered_tasks from the request payload.\n\t•\tLogs the parsed values for debugging.\n\t2.\tInput Validation:\n\t•\tEnsures ordered_tasks is a list of dictionaries with the required keys.\n\t•\tValidates parent_id if provided, ensuring the parent task exists in the database.\n\t3.\tUpdate Processing:\n\t•\tIterates through ordered_tasks, updating each task’s parent_id and sort_order.\n\t•\tLogs changes for each task.\n\t4.\tDatabase Commit:\n\t•\tCommits all updates in a single transaction.\n\t•\tLogs success or rolls back changes in case of an error.\n\t5.\tPost-Commit Validation:\n\t•\tVerifies that the parent_id and sort_order changes were successfully saved to the database.\n\t6.\tError Handling:\n\t•\tCaptures and logs exceptions during processing or committing.\n\t•\tProvides meaningful error messages to the frontend.\n\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'sort_order': 6, 'created_at': '2025-01-15T09:46:29.348853', 'updated_at': '2025-03-01T02:01:18.851232'}, {'id': 286, 'name': 'Implement abels/tags', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 6, 'created_at': '2025-02-10T08:46:23.985620', 'updated_at': '2025-03-01T02:01:12.498730'}, {'id': 296, 'name': 'issue: contributor is lost after updating task', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 7, 'created_at': '2025-02-10T09:26:43.881947', 'updated_at': '2025-02-28T00:11:55.301308'}, {'id': 131, 'name': 'Step 5: Update utils.py', 'description': 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nChanges to Make:\n\t1.\tEnhance Task Filtering:\n\t•\tEnsure the filters handle parent-child relationships explicitly.\n\t•\tAdd options to include or exclude subtasks in queries.\n\t2.\tUtility Function for Debugging Parent-Child Relationships:\n\t•\tProvide a function to generate a map or list of parent-child relationships for debugging purposes.\n\t3.\tValidation Functions:\n\t•\tAdd a utility function to validate parent-child relationships and ensure no circular dependencies.\n\nUpdated utils.py Code:\n```\nimport logging\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import joinedload\nfrom app.extensions.db import db\nfrom app.tasks.models import Task\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\n\nclass TaskService:\n    @staticmethod\n    def filter_tasks(filters=None, include_subtasks=True, page=None, per_page=None):\n        """\n        Dynamically filters tasks with an option to include or exclude subtasks.\n\n        Args:\n            filters (dict): Filtering criteria.\n            include_subtasks (bool): Whether to include subtasks in the query.\n            page (int, optional): Page number for pagination.\n            per_page (int, optional): Items per page for pagination.\n\n        Returns:\n            Query or Pagination: A SQLAlchemy query object or paginated results.\n        """\n        query = Task.query.options(\n            db.joinedload(Task.project).joinedload(Project.contributors),\n            db.joinedload(Task.contributor),\n            db.joinedload(Task.children),\n        ).order_by(Task.sort_order)\n\n        if filters:\n            logger.debug(f"Applying filters: {filters}")\n\n            # Apply standard filters\n            if "is_archived" in filters:\n                query = query.filter(Task.is_archived == filters["is_archived"])\n            if "project_id" in filters:\n                query = query.filter(Task.project_id == filters["project_id"])\n            if "task_type" in filters:\n                if isinstance(filters["task_type"], list):\n                    query = query.filter(Task.task_type.in_(filters["task_type"]))\n                else:\n                    query = query.filter(Task.task_type == filters["task_type"])\n            if "completion_status" in filters:\n                completion_map = {"completed": True, "in_progress": False}\n                if filters["completion_status"] in completion_map:\n                    query = query.filter(Task.completed == completion_map[filters["completion_status"]])\n\n            # Optionally exclude subtasks\n            if not include_subtasks:\n                query = query.filter(Task.task_type != "Subtask")\n\n        logger.debug(f"Generated query: {query}")\n\n        # Pagination\n        if page and per_page:\n            return query.paginate(page=page, per_page=per_page, error_out=False)\n        return query\n\n    @staticmethod\n    def debug_parent_child_relationships(project_id=None):\n        """\n        Generates a debug map of parent-child relationships for all tasks.\n\n        Args:\n            project_id (int, optional): Restrict to tasks from a specific project.\n\n        Returns:\n            dict: A dictionary mapping parent IDs to their child task IDs.\n        """\n        query = Task.query\n        if project_id:\n            query = query.filter(Task.project_id == project_id)\n\n        tasks = query.options(\n            db.load_only(Task.id, Task.parent_id)\n        ).all()\n\n        relationship_map = {}\n        for task in tasks:\n            if task.parent_id not in relationship_map:\n                relationship_map[task.parent_id] = []\n            relationship_map[task.parent_id].append(task.id)\n\n        logger.debug(f"Parent-Child Relationship Map: {relationship_map}")\n        return relationship_map\n\n    @staticmethod\n    def validate_parent_child_relationships():\n        """\n        Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.\n\n        Raises:\n            ValueError: If invalid relationships are detected.\n        """\n        tasks = Task.query.options(db.joinedload(Task.parent)).all()\n\n        for task in tasks:\n            if task.parent_id:\n                parent_task = task.parent\n                if not parent_task:\n                    raise ValueError(f"Task {task.id} has an invalid parent ID {task.parent_id}.")\n\n                # Validate hierarchy rules\n                if task.task_type == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError(f"User Story {task.id} must have an Epic as its parent.")\n                if task.task_type == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError(f"Subtask {task.id} must have a User Story as its parent.")\n\n        logger.info("All parent-child relationships are valid.")\n\n    @staticmethod\n    def get_all_task_ids_with_parents():\n        """\n        Returns a flat list of tasks with their parent IDs for debugging.\n\n        Returns:\n            list: A list of tuples (task_id, parent_id).\n        """\n        tasks = Task.query.with_entities(Task.id, Task.parent_id).all()\n        logger.debug(f"Task IDs with Parent IDs: {tasks}")\n        return tasks\n```\n\n\nExplanation of Changes:\n\t1.\tfilter_tasks Enhancements:\n\t•\tAdded include_subtasks parameter to optionally exclude subtasks from the query.\n\t2.\tdebug_parent_child_relationships:\n\t•\tCreates a parent-child relationship map for debugging purposes.\n\t3.\tvalidate_parent_child_relationships:\n\t•\tIterates through all tasks to validate parent-child hierarchy and ensures no invalid relationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t•\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 7, 'created_at': '2025-01-15T09:41:28.091824', 'updated_at': '2025-03-01T02:01:18.851223'}, {'id': 135, 'name': 'Step 3: Update list.html', 'description': 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already includes everything needed. No required changes.\n\nHere´s the relevant section of list.html:\n\n```\n<tr id="task-{{ task.id }}"\n                class="task-row {% if task.task_type == \'Subtask\' %}subtask-row{% elif task.task_type == \'User Story\' %}user-story-row{% elif task.task_type == \'Epic\' %}epic-row{% endif %}"\n                style="background-color: \n                {% if task.task_type == \'Subtask\' %}\n                    rgba(200, 230, 255, 0.5); /* Light blue for Subtask */\n                {% elif task.task_type == \'User Story\' %}\n                    rgba(255, 255, 200, 0.5); /* Light yellow for User Story */\n                {% elif task.task_type == \'Epic\' %}\n                    rgba(255, 200, 200, 0.5); /* Light red for Epic */\n                {% else %}\n                    rgba(240, 240, 240, 1); /* Default light gray */\n                {% endif %};"\n                data-task-id="{{ task.id }}"\n                data-parent-id="{{ task.parent_id or \'\' }}"\n                data-level="{{ depth }}">\n                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>\n                <td>\n                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}\n                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}" aria-label="Toggle details for task {{ task.name }}">\n                        <i class="bi bi-chevron-right"></i>\n                    </button>\n                    {% endif %}\n                </td>\n                <td class="fw-medium fs-6 \n                {% if task.task_type == \'Epic\' %}\n                    epic-cell\n                {% elif task.task_type == \'User Story\' %}\n                    user-story-cell\n                {% elif task.task_type == \'Subtask\' %}\n                    subtask-cell\n                {% endif %}" \n                style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">\n                <span class="bi fs-6\n                {% if task.task_type == \'Epic\' %}\n                    bi-circle-fill\n                {% elif task.task_type == \'User Story\' %}\n                    bi-circle-half\n                {% elif task.task_type == \'Subtask\' %}\n                    bi-circle\n                {% endif %}">\n                </span>\n                {{ task.name }}\n                <small class="text-muted fw-light">\n                    (Parent-ID: {{ task.parent_id or \'None\' }})\n                </small>\n                <!-- Open Link -->\n                <a href="#" class="task-open-link" data-task-id="{{ task.id }}">\n                    <i class="bi bi-arrows-angle-expand" style="font-size: 0.8rem; color: white;"></i>\n                    Open\n                </a>\n            </td>\n                <td class="fw-light fs-6">\n                    <small class>\n                    LAC-{{ task.id }}\n                    </small>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light text-bg-secondary">\n                        {{ task.project if task.project else "Unknown Project" }}\n                    </span>\n                </td>\n                <td class="fs-6" data-contributor-column>{{ task.assigned_to if task.assigned_to else "Unassigned" }}</td>\n                <td class="fs-6">{{ task.story_points }}</td>\n                <td class="fs-6">\n                    <span class="badge rounded-pill fw-light text-bg-light">\n                        {{ task.task_type }}\n                    </span>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light {% if task.completed %}text-bg-success{% else %}text-bg-warning{% endif %}">\n                        {{ "Completed" if task.completed else "In Progress" }}\n                    </span>\n                </td>\n                <td>\n                    <!-- Delete Icon -->\n                    <button class="btn btn-dark btn-sm delete-task-btn" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .2rem; --bs-btn-font-size: .75rem;" data-task-id="{{ task.id }}" aria-label="Deletes task {{ task.id }}">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n            </tr>\n            {% for child in tasks if child.parent_id == task.id %}\n                {{ render_task(child, tasks, depth + 1) }}\n            {% endfor %}\n            {% endmacro %}\n            \n            <!-- Render top-level tasks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 8, 'created_at': '2025-01-15T09:46:29.349784', 'updated_at': '2025-03-01T02:01:18.851233'}, {'id': 289, 'name': 'issue: parent task is lost when updating task', 'description': '- Summary of the problem and solution\n    \n    **Problem: Parent Task Dropdown Was Not Being Set on Modal Open**\n    \n    The issue was that when opening a task modal, the **parent task dropdown** was not pre-populated with the correct parent task. However, interacting with the dropdown (e.g., clicking on it) would suddenly trigger it to be set correctly. This meant that the dropdown initialization was likely delayed or missing a step in the modal lifecycle.\n    \n    **Debugging Steps and Observations**\n    \n    1. **Task Details Were Fetched Correctly** ✅\n    - The task details, including parent_id, were being fetched from the API successfully.\n    1. **Parent Dropdown Initialization Issues** ❌\n    - The initializeParentDropdown() function was being called, but the dropdown was sometimes **not fully ready** when we tried to set the selected parent task.\n    1. **Clicking the Dropdown Triggered the Parent to Be Set** 🤔\n    - This hinted that the dropdown was not fully ready when setParentDropdown(task.parent_id) was initially called.\n    \n    **Final Solution**\n    \n    1. **Ensuring Dropdown Readiness Before Setting the Parent Task**\n    - We added explicit **delays and checks** to confirm that the dropdown was fully initialized before attempting to set the parent task.\n    \n    Specifically, we:\n    \n    - **Waited for the dropdown to appear in the DOM** using observeParentDropdown().\n    - **Initialized the dropdown** with initializeParentDropdown().\n    - **Waited explicitly for the dropdown to be fully ready** using waitForParentDropdownReady().\n    - **Added a final delay of 200ms** before calling setParentDropdown() to ensure stability.\n    1. **Modifying openTaskModal to Handle Parent Dropdown Setup**\n    - We ensured that initializeParentDropdown() was called **after fetching task details** and before setting the parent task.\n    1. **Confirming the Fix** 🎯\n    - After these fixes, the parent dropdown was **immediately populated** upon opening the modal, without requiring user interaction.\n    \n    **Key Learnings**\n    \n    ✅ **Dropdowns in modals need careful timing** – They might not be ready when you expect them to be.\n    \n    ✅ **Waiting for DOM updates is crucial** – Observing the element ensures it actually exists before interacting with it.\n    \n    ✅ **Explicit delays can prevent race conditions** – A small delay can sometimes resolve timing issues in UI interactions.\n    \n    **Final Result**\n    \n    ✅ The modal now **correctly loads and pre-selects the parent task** without extra clicks! 🎉🚀', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 8, 'created_at': '2025-02-10T08:56:25.273984', 'updated_at': '2025-02-28T00:11:55.301302'}, {'id': 269, 'name': 'Fix styling for sweetalert', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'sort_order': 10, 'created_at': '2025-02-08T15:54:56.717846', 'updated_at': '2025-02-28T00:11:55.301281'}, {'id': 247, 'name': 'Add Temporary Badge', 'description': 'Add a temporary badge or visual indicator to the updated task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 241, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 11, 'created_at': '2025-02-05T12:57:37.151479', 'updated_at': '2025-02-27T08:43:14.054398'}, {'id': 293, 'name': 'Click on title should copy the task title and id to clipboard', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 11, 'created_at': '2025-02-10T09:16:33.508209', 'updated_at': '2025-02-28T00:11:55.301304'}, {'id': 294, 'name': 'Issue: task table filters not working', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 12, 'created_at': '2025-02-10T09:19:21.022598', 'updated_at': '2025-02-28T00:11:55.301306'}, {'id': 240, 'name': 'Update Task Workflow', 'description': 'As a user, I want to update the status of a task so that it reflects the changes in the UI dynamically without reloading the page.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'In Progress', 'sort_order': 14, 'created_at': '2025-02-05T12:54:55.061344', 'updated_at': '2025-02-28T00:11:55.301273'}, {'id': 242, 'name': 'User Control Over Views', 'description': 'As a user, I want to toggle between hierarchical and flat views so that I can switch sorting preferences based on my workflow.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 15, 'created_at': '2025-02-05T12:55:50.108011', 'updated_at': '2025-02-28T00:11:55.301275'}, {'id': 130, 'name': 'Implement the Map of Task Relationships solution for drag-and-drop', 'description': 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 16, 'created_at': '2025-01-15T09:41:28.093022', 'updated_at': '2025-02-28T00:11:55.301271'}, {'id': 246, 'name': 'Toast Notification', 'description': 'Display a toast notification confirming the task status update.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 241, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 16, 'created_at': '2025-02-05T12:57:37.151479', 'updated_at': '2025-02-27T08:43:14.054398'}, {'id': 283, 'name': 'Fix issue with updating task title', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 18, 'created_at': '2025-02-10T08:41:58.769700', 'updated_at': '2025-02-28T00:11:55.301295'}, {'id': 278, 'name': 'Implement search feature for tasks list', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 5, 'project': 'Project Delta', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 4, 'status': 'Not Started', 'sort_order': 19, 'created_at': '2025-02-10T07:36:03.369833', 'updated_at': '2025-02-28T00:11:55.301289'}, {'id': 62, 'name': 'Add OAuth integration for Google Login', 'description': 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 20, 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-02-28T00:11:55.301255'}, {'id': 279, 'name': 'github integration', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 21, 'created_at': '2025-02-10T07:36:38.238202', 'updated_at': '2025-02-28T00:11:55.301290'}, {'id': 65, 'name': 'Implement backend endpoints for Google OAuth', 'description': 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 22, 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-02-28T00:11:55.301260'}, {'id': 241, 'name': 'Provide User Feedback', 'description': 'As a user, I want to receive immediate feedback after updating a task’s status so that I know the update was successful.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 24, 'created_at': '2025-02-05T12:55:19.826398', 'updated_at': '2025-02-28T00:11:55.301274'}, {'id': 41, 'name': 'Implement Searchable Dropdown', 'description': 'As a user, I want a searchable dropdown for parent task assignment.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Completed', 'sort_order': 25, 'created_at': '2025-01-03T09:14:28.285904', 'updated_at': '2025-02-28T00:11:55.301181'}, {'id': 85, 'name': 'Assign multiple contributors to a task', 'description': 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 27, 'created_at': '2025-01-07T19:32:39.466022', 'updated_at': '2025-02-28T00:11:55.301266'}, {'id': 136, 'name': 'Page scroll should stay in position when reloading', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 28, 'created_at': '2025-01-16T18:21:50.187247', 'updated_at': '2025-02-28T00:11:55.301272'}, {'id': 267, 'name': 'Improvements to toggles and nested tasks', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 29, 'created_at': '2025-02-08T02:29:12.464594', 'updated_at': '2025-03-03T14:17:12.065528'}, {'id': 325, 'name': 'Improve task list responsive grid', 'description': '## 🔍 **How Leading Task Management Apps Handle Column Widths**\n\n### 1️⃣ **JIRA (Atlassian)**\n\n🔹 **Dynamic Resizing** (CSS Grid + JavaScript)\n\n- Uses `display: grid` for task tables.\n- Columns are resizable with a drag handle.\n- `grid-template-columns: auto 1fr auto;` for flexibility.\n- **Approach**: Fixed + flexible widths with an adaptive UI.\n\n---\n\n### 2️⃣ **Monday.com**\n\n🔹 **Flexbox-Based Table**\n\n- Uses `display: flex;` instead of `grid` for more control.\n- Columns use **`flex-grow`** to expand dynamically.\n- Drag handles allow users to resize columns.\n- **Approach**: **JavaScript-based column width management** to allow user customization.\n\n---\n\n### 3️⃣ **Asana**\n\n🔹 **Hybrid (Flexbox + JavaScript)**\n\n- Uses **CSS flexbox** for flexible layout.\n- Users can resize columns by dragging.\n- `min-width: 120px;` ensures usability.\n- **Approach**: A combination of `flex` and `min-width` to ensure usability on smaller screens.\n\n---\n\n### 4️⃣ **Linear**\n\n🔹 **CSS Grid with `fr` Units**\n\n- Uses a modern **CSS Grid** approach:\n    \n    ```css\n    grid-template-columns: auto 1fr auto;\n    ```\n    \n- Dynamically adjusts the width of columns **based on content**.\n- Uses `grid-template-columns: minmax(150px, 2fr) 3fr 1fr;` for controlled column expansion.\n- **Approach**: Minimalist UI with focus on speed and responsiveness.\n\n---\n\n### 5️⃣ **Shortcut**\n\n🔹 **Similar to Jira (Resizable Columns)**\n\n- Uses **CSS Grid + JavaScript-based resizing**.\n- Stores user preferences (column order, width) in **local storage**.\n- **Approach**: Persistent column sizes per user, allowing for a **customizable layout**.\n\n---\n\n## ✅ **What’s the Best Approach for Our App?**\n\n### 🎯 **Option 1: CSS Grid (Recommended)**\n\n```css\ngrid-template-columns: 1fr 2fr 1fr;\n```\n\nPros:\n✔ **Modern**\n\n✔ **Auto-resizes based on content**\n\n✔ **Easy to manage**\n\n---\n\n### 🎯 **Option 2: Flexbox (For More Control)**\n\n```css\ndisplay: flex;\nflex-grow: 1;\nmin-width: 120px;\n```\n\nPros:\n✔ **More control over column shrinking/growing**\n\n✔ **Easier to make resizable**\n\n✔ **Ideal for draggable column resizing**\n\n---\n\n### 🎯 **Option 3: JavaScript-Powered Resizing (Advanced)**\n\n- Uses `grid-template-columns` but **lets users drag & resize**.\n- Stores **column widths in local storage**.\n- Uses `ResizeObserver` to listen for changes.\n\nPros:\n✔ **User-friendly (lets users resize columns)**\n\n✔ **Persistent user preferences**\n\n✔ **Great for complex task management apps**\n\n---\n\n## 🔥 **What’s the Best Choice for Us?**\n\n- If you want **simple auto-adjusting columns**, go with **CSS Grid** (`fr` units).\n- If you need **manual resizing**, use **Flexbox + JavaScript**.\n- If you want **fully customizable layouts**, use **JavaScript-powered resizing** like Jira or Monday.\n\nWould you like me to **implement resizable columns** with JavaScript? 🚀', 'task_type': 'Epic', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'sort_order': 30, 'created_at': '2025-02-25T00:02:51.810711', 'updated_at': '2025-03-03T14:17:02.484796'}, {'id': 274, 'name': 'Add support for goals, initiatives, okr´s', 'description': 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n\nölkasdölkk', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P1', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 31, 'created_at': '2025-02-10T00:46:27.204912', 'updated_at': '2025-02-28T00:11:55.301284'}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 32, 'created_at': '2025-02-10T08:41:17.786154', 'updated_at': '2025-03-03T14:16:41.747486'}, {'id': 63, 'name': 'Add OAuth integration for GitHub Login', 'description': 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'sort_order': 32, 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-02-27T08:43:14.054354'}, {'id': 276, 'name': 'Add support for priority', 'description': 'ffasdlkjlkj\nljkkjlkj', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P0', 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 33, 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-28T00:11:55.301286'}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'description': 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- Custom status\n-- Custom status\n- In Progress\n-- Custom status\n-- Custom status\n-- Custom status\n- Completed\n-- Custom status\n-- Custom status\n\n2. How can we track a task through different stages and save the sequence of events or stages the task has gone through?\nI´m thinking it could be good for mapping out processes, identifying bottlenecks and provide valuable insights while improving and streamlining workflows.\n- Stages\n- Contacts taken\n- Respons time \n- Time to action after responses\n- Dependencies\n\nNeed to be able to record every action related to this action.\nCommunication integrations\n- Slack\n- Email\n- Text messages\n- Phonecalls\n- Calendar events, meetings\n- Zoom, Google meet, Teams etc..\n\n\n2. Set custom statuses per project (can use tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 34, 'created_at': '2025-02-10T07:16:03.352588', 'updated_at': '2025-03-03T14:16:31.129766'}, {'id': 68, 'name': 'Register application in GitHub Developer Console', 'description': 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 35, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-02-27T08:43:14.054358'}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'description': 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be lost"\nOR\n\nIs it possible, and is it desireable to keep parent child relationships across projects?\nSo that a parent can be in one project but the child tasks can be in different projects?\n\nLets say \nParent epic is \n"Internationalisation"\nChild user stories are\n- Timezones\n- Language\n- Currency\n- Day, Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 35, 'created_at': '2025-02-10T08:54:36.297869', 'updated_at': '2025-03-03T14:16:24.364985'}, {'id': 284, 'name': 'Add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 36, 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-28T00:11:55.301296'}, {'id': 281, 'name': 'Add a page for roadmap', 'description': 'Add some sort of high level plan that aims to keep PM/PO´s on track and not get lost into the details of an overwhelming large backlog', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 37, 'created_at': '2025-02-10T08:27:01.218606', 'updated_at': '2025-02-28T00:11:55.301293'}, {'id': 69, 'name': 'Handle callback from GitHub', 'description': 'Implement the callback endpoint to process the authorization code from GitHub.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 38, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-02-26T21:53:17.041822'}, {'id': 273, 'name': 'Disable parent task selector in epics', 'description': 'and add text, Epic can´t have parent tasks', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 38, 'created_at': '2025-02-10T00:45:20.740910', 'updated_at': '2025-02-28T00:11:55.301283'}, {'id': 280, 'name': 'logging (task and project history)', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 39, 'created_at': '2025-02-10T07:37:44.435112', 'updated_at': '2025-02-28T00:11:55.301291'}, {'id': 275, 'name': 'Add support for sprints/cycles', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 40, 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-28T00:11:55.301285'}, {'id': 100, 'name': '1.1 User Registration', 'description': '<blockquote><p>As a user, I want to register with a username, email, and password so that I can create an account and access the system. </p></blockquote><p>**Acceptance Criteria:** </p><ul><li><p>• User can input valid username, email, and password.</p></li><li><p>• Username and email must be unique. </p></li><li><p>• Errors are displayed for invalid inputs or duplicate accounts. </p></li><li><p>• Passwords must meet complexity requirements and be securely stored. </p></li><li><p>• Successful registration redirects users to a login page.</p></li></ul><hr><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 41, 'created_at': '2025-01-07T19:59:09.044667', 'updated_at': '2025-03-03T14:20:10.801828'}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'description': 'kkkkkkkjjjjj\nlkajdlökjsdfölkjsdfölkjdf', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 41, 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-28T00:11:55.301297'}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'description': 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitHub Login involves integrating OAuth 2.0, which both services support. The complexity depends on your app’s existing setup, frameworks, and experience with third-party authentication. Below is a breakdown:\n\nKey Steps for Implementing Google or GitHub Login\n\t1.\tSet Up OAuth Credentials:\n\t•\tRegister your application in the Google Cloud Console or GitHub Developer Settings.\n\t•\tObtain the client ID and client secret.\n\t2.\tInstall Required Libraries:\n\t•\tUse a library for OAuth (e.g., flask-oauthlib, python-social-auth, or authlib).\n\t•\tPopular frameworks like Flask and Django already have robust integrations for OAuth providers.\n\t3.\tBackend Configuration:\n\t•\tImplement an endpoint to handle the OAuth flow (/auth/login/google or /auth/login/github).\n\t•\tConfigure your app to send users to Google or GitHub’s authentication page.\n\t•\tHandle the OAuth callback to exchange the authorization code for an access token.\n\t•\tVerify the token and fetch user information (e.g., email, name).\n\t4.\tLink OAuth to User Registration:\n\t•\tOn successful login, create or retrieve a user in your database.\n\t•\tStore the user’s details like email, OAuth provider ID, and access token.\n\t5.\tFrontend Integration (if applicable):\n\t•\tAdd “Login with Google” or “Login with GitHub” buttons.\n\t•\tRedirect to your backend’s OAuth endpoint when clicked.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 42, 'created_at': '2025-01-07T12:15:54.291625', 'updated_at': '2025-02-28T00:11:55.301262'}, {'id': 107, 'name': '1.1.1 Database Changes for User Registration', 'description': '<p>1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.</p><p></p><hr><p>Adding text</p><pre><code>CREATE TABLE public.users ( id SERIAL PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL, created_at TIMESTAMP DEFAULT NOW(), updated_at TIMESTAMP DEFAULT NOW() );</code></pre><p></p>', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 42, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-03-03T20:49:45.725711'}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'description': 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 18, 'status': 'Not Started', 'sort_order': 43, 'created_at': '2025-01-07T19:53:50.085064', 'updated_at': '2025-02-28T00:11:55.301267'}, {'id': 61, 'name': 'Parent task assignment', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'sort_order': 44, 'created_at': '2025-01-04T22:31:45.205815', 'updated_at': '2025-02-28T00:11:55.301224'}, {'id': 108, 'name': '1.1.2 Backend API for Registration', 'description': '•\tCreate an endpoint POST /api/register:\n•\tValidate input fields.\n•\tHash the password using bcrypt or argon2.\n•\tInsert the user into the users table.\n•\tReturn success/failure responses.\ndddhfff\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 44, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-27T08:43:14.054375'}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t•\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t•\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t•\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 45, 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-02-28T00:11:55.301265'}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'description': 'PRD: Define roles and permissions to restrict access. Roles include admin, developer, and viewer. Implement middleware for access control checks.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 46, 'created_at': '2025-01-07T19:54:09.204981', 'updated_at': '2025-02-28T00:11:55.301268'}, {'id': 112, 'name': '1.2.2 Frontend Login Page', 'description': 'Develop a frontend form for user login with email and password inputs.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 47, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054377'}, {'id': 83, 'name': 'Notifications', 'description': 'Implement sending notifications to selected people triggered by events.\nCustomizing messages:\nPossibility to adjust how detailed the information should be and what level of technical difficulty the language can contain. Integration to LMS that tailors messages to different target groups and then sends the appropriate version to the appropriate target group.\n\n\n\n- Ready for Release\n   - Send documentation of new feature to support and customer success team\n      - Add technical documentation as file in documentation library.\n      - User documentation\n      - Create and send feature description to Sales & Marketing dep.\n      - Create and send feature description and estimation of added value for company and customer to Investors.\n   - Create and publish release notes online and in inline message system.\n\nRead more: https://www.notion.so/lacunamedia/Create-and-send-messages-triggered-by-events-174979257fc08022b18bc76d3b28a4b3?pvs=4', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 47, 'created_at': '2025-01-07T16:10:54.030609', 'updated_at': '2025-02-28T00:11:55.301263'}, {'id': 99, 'name': 'Enhance User Account Management', 'description': 'PRD: Provide additional account management features for users and admins. Includes profile management, password reset functionality, and audit logging.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'sort_order': 48, 'created_at': '2025-01-07T19:54:20.692949', 'updated_at': '2025-02-28T00:11:55.301269'}, {'id': 109, 'name': '1.1.3 Create Frontend Registration Page', 'description': 'Develop a frontend form to collect user registration details.\n•\tAdd a form for username, email, and password inputs.\n•\tUse client-side validation (e.g., email format).\n•\tSend a POST request to /api/register.\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 49, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-27T08:43:14.054375'}, {'id': 110, 'name': '1.1.4 Unit Tests for Registration', 'description': 'Write unit tests for:\n\n•\tValid registration.\n•\tDuplicate username/email scenarios.\n•\tInvalid input handling.\nff', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 50, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-27T08:43:14.054376'}, {'id': 101, 'name': '1.2 User Login', 'description': 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n•\tUsers can log in with a valid email and password.\n•\tErrors are displayed for invalid credentials.\n•\tSuccessful login stores a session or JWT token.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 52, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054370'}, {'id': 111, 'name': '1.2.1 Backend API for Login', 'description': 'Create POST /api/login endpoint to handle user login.\njjsjj', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 54, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054377'}, {'id': 113, 'name': '1.2.3 Session Management', 'description': 'Implement secure session handling using cookies or JWT.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 55, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054378'}, {'id': 114, 'name': '1.2.4 Unit Tests for Login', 'description': 'Write tests for successful and failed login attempts.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 56, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054379'}, {'id': 106, 'name': 'Password Reset', 'description': 'As a user, I want to reset my password securely using email.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'sort_order': 57, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054373'}, {'id': 128, 'name': 'Frontend Password Reset Page', 'description': 'Develop a page for users to enter a new password using a valid token.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 58, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054388'}, {'id': 129, 'name': 'Testing Password Reset', 'description': 'Write tests for email delivery, token validation, and password updates.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 59, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054389'}, {'id': 102, 'name': 'Logout', 'description': 'As a user, I want to log out so that I can end my session securely.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 60, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054371'}, {'id': 117, 'name': 'Tests for Logout', 'description': 'Verify session invalidation and redirection to the login page.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 61, 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-27T08:43:14.054381'}, {'id': 381, 'name': 'Delete this', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 61, 'created_at': '2025-02-28T23:48:05.992788', 'updated_at': '2025-02-28T23:48:38.311759'}, {'id': 116, 'name': 'Frontend Logout Button', 'description': 'Add a logout button to the UI and handle session clearing.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 62, 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-27T08:43:14.054380'}, {'id': 115, 'name': 'Backend API for Logout', 'description': 'Create POST /api/logout endpoint to invalidate user sessions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 63, 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-27T08:43:14.054379'}, {'id': 45, 'name': 'Display Default Value in Dropdown', 'description': 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 64, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054343'}, {'id': 50, 'name': 'Retrieve Current Parent Task', 'description': 'Retrieve the current parent task’s ID and name from the backend.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Completed', 'sort_order': 65, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054346'}, {'id': 51, 'name': 'Set Default Value', 'description': 'Set the default value in the dropdown based on the retrieved data.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 45, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 1, 'status': 'Not Started', 'sort_order': 66, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054347'}, {'id': 46, 'name': 'Search for Parent Tasks', 'description': 'Allow users to search for tasks dynamically in the dropdown by typing.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'sort_order': 67, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054344'}, {'id': 54, 'name': 'Test Partial Matching', 'description': 'Ensure the search results update in real-time as the user types.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 68, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054349'}, {'id': 47, 'name': 'Handle Large Datasets Efficiently', 'description': 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'sort_order': 69, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054344'}, {'id': 56, 'name': 'Paginate API Responses', 'description': 'Implement server-side filtering and pagination for large datasets.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 70, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054350'}, {'id': 55, 'name': 'Enable Lazy Loading', 'description': 'Enable lazy loading or virtualization in Virtual Select.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 71, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054350'}, {'id': 48, 'name': 'Select and Deselect Parent Tasks', 'description': 'Allow users to select a parent task or deselect by choosing "None."', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 72, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054345'}, {'id': 57, 'name': 'Ensure None Option Availability', 'description': 'Add “None” as a selectable option and ensure it stays at the top of the list.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 73, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054351'}, {'id': 58, 'name': 'Handle Selection Events', 'description': 'Implement event listeners to update the form’s state when the selection changes.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 74, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054352'}, {'id': 49, 'name': 'Integrate Dropdown with Task Form', 'description': 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 75, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054346'}, {'id': 383, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 76, 'created_at': '2025-03-01T01:00:27.095399', 'updated_at': '2025-03-01T02:00:27.103602'}, {'id': 376, 'name': 'Subtask test', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 76, 'created_at': '2025-02-28T23:01:44.247988', 'updated_at': '2025-02-28T23:02:00.075567'}, {'id': 59, 'name': 'Bind Dropdown to Form Field', 'description': 'Bind the dropdown to the form’s parent task field.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'In Progress', 'sort_order': 76, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054352'}, {'id': 60, 'name': 'Test Form Submission', 'description': 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 77, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054353'}, {'id': 52, 'name': 'Add Search Box to Dropdown', 'description': 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 78, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054348'}, {'id': 53, 'name': 'Implement AJAX Search', 'description': 'Implement AJAX-based search to fetch tasks dynamically from the backend.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 79, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054348'}, {'id': 42, 'name': 'Choose Dropdown Library', 'description': 'Research and decide on the dropdown library to use.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 80, 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-27T08:43:14.054341'}, {'id': 378, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 80, 'created_at': '2025-02-28T23:17:32.404713', 'updated_at': '2025-03-01T00:17:32.410920'}, {'id': 43, 'name': 'Integrate Dropdown Library', 'description': 'Integrate the chosen dropdown library into the project.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Completed', 'sort_order': 81, 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-27T08:43:14.054342'}, {'id': 90, 'name': 'Update frontend to display and manage multiple contributors', 'description': 'Allow users to view, add, or remove multiple contributors via the UI.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 82, 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-27T08:43:14.054364'}, {'id': 377, 'name': 'Taskade', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 82, 'created_at': '2025-02-28T23:02:24.453543', 'updated_at': '2025-03-03T18:07:16.276655'}, {'id': 88, 'name': 'Update database schema for multiple contributors', 'description': 'Modify the task table to support many-to-many relationships for contributors.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 83, 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-27T08:43:14.054362'}, {'id': 89, 'name': 'Develop backend API for adding contributors to a task', 'description': 'Create endpoints to add, update, and remove contributors for a task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 84, 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-27T08:43:14.054363'}, {'id': 86, 'name': 'Allow designation of task owner', 'description': 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 85, 'created_at': '2025-01-07T19:33:29.330562', 'updated_at': '2025-02-27T08:43:14.054361'}, {'id': 375, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 85, 'created_at': '2025-02-28T22:48:35.594251', 'updated_at': '2025-02-28T23:48:35.676455'}, {'id': 93, 'name': 'Update frontend to manage task ownership', 'description': 'Allow users to assign or update the task owner via the UI.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 86, 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-27T08:43:14.054365'}, {'id': 384, 'name': 'Changed title', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 86, 'created_at': '2025-03-01T12:06:32.303897', 'updated_at': '2025-03-03T18:06:15.844478'}, {'id': 91, 'name': 'Update database schema for task ownership', 'description': 'Add a column or relationship to assign a single owner per task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 87, 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-27T08:43:14.054364'}, {'id': 92, 'name': 'Develop backend API for assigning task owner', 'description': 'Create endpoints to assign or update the owner of a task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 88, 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-27T08:43:14.054365'}, {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 89, 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-02-27T08:43:14.054362'}, {'id': 96, 'name': 'Allow admin users to create and customize contributor roles via frontend', 'description': 'Provide UI functionality for admins to manage contributor roles dynamically.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 90, 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-27T08:43:14.054367'}, {'id': 94, 'name': 'Add database support for contributor roles', 'description': 'Introduce a roles table and link contributors to specific roles for tasks.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 91, 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-27T08:43:14.054366'}, {'id': 95, 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 92, 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-27T08:43:14.054367'}, {'id': 127, 'name': 'Backend API for Password Reset', 'description': 'Create endpoints to handle password reset requests and token validation.\ndfdf\n\nasdasd', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 93, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054387'}, {'id': 126, 'name': 'Email Configuration for Password Reset', 'description': 'Configure email service to send password reset links.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 94, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054387'}, {'id': 104, 'name': 'Middleware for Role Enforcement', 'description': 'As a system, I want to enforce role-based access to specific routes.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 98, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 95, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054372'}, {'id': 122, 'name': 'Testing Role Enforcement', 'description': 'Write tests to ensure proper access control based on roles.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 96, 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-02-27T08:43:14.054384'}, {'id': 121, 'name': 'Develop Role Enforcement Middleware', 'description': 'Implement middleware to check user roles for access control.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 104, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 97, 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-02-27T08:43:14.054383'}, {'id': 105, 'name': 'Profile Management', 'description': 'As a user, I want to update my profile (username, email, password).', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 99, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 98, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054373'}, {'id': 123, 'name': 'Backend API for Profile Management', 'description': 'Create PATCH /api/profile endpoint to update user details.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 99, 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-02-27T08:43:14.054385'}, {'id': 125, 'name': 'Testing Profile Updates', 'description': 'Write tests for profile update functionality.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 100, 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-02-27T08:43:14.054386'}, {'id': 124, 'name': 'Frontend Profile Page', 'description': 'Develop a profile page for editing user details.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 101, 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-02-27T08:43:14.054385'}, {'id': 103, 'name': 'Role Assignment', 'description': 'As an administrator, I want to assign roles to users so that I can control access to certain features.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 98, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 102, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054372'}, {'id': 120, 'name': 'Testing Role Assignment', 'description': 'Write tests to validate role changes and restrictions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 103, 'created_at': '2025-01-07T20:40:58.383687', 'updated_at': '2025-02-27T08:43:14.054383'}, {'id': 119, 'name': 'Backend API for Role Assignment', 'description': 'Create POST /api/assign-role endpoint to manage user roles.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 104, 'created_at': '2025-01-07T20:40:58.383687', 'updated_at': '2025-02-27T08:43:14.054382'}, {'id': 118, 'name': 'Database Changes for Role Assignment', 'description': 'Add a role column to the users table.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 105, 'created_at': '2025-01-07T20:40:58.383687', 'updated_at': '2025-02-27T08:43:14.054381'}, {'id': 44, 'name': 'Test Performance with 500 Tasks', 'description': 'Ensure dropdown performance remains smooth with 500 tasks.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 107, 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-26T21:53:17.041813'}]
2025-03-04 15:40:08,720 ERROR: Unexpected error in list_tasks: Could not build url for endpoint 'tasks.list_tasks' with values ['is_archived', 'page']. Did you mean 'tasks_bp.list_tasks' instead?
2025-03-04 15:40:08,721 INFO: ROLLBACK
2025-03-04 15:40:08,722 INFO: 127.0.0.1 - - [04/Mar/2025 15:40:08] "GET /tasks/ HTTP/1.1" 200 -
2025-03-04 15:40:08,768 INFO: 127.0.0.1 - - [04/Mar/2025 15:40:08] "[36mGET /static/js/filters.js HTTP/1.1[0m" 304 -
2025-03-04 15:40:08,772 INFO: 127.0.0.1 - - [04/Mar/2025 15:40:08] "[36mGET /static/js/modals.js HTTP/1.1[0m" 304 -
2025-03-04 15:40:08,773 INFO: 127.0.0.1 - - [04/Mar/2025 15:40:08] "[36mGET /static/js/tasks_table_interactions.js HTTP/1.1[0m" 304 -
2025-03-04 15:40:08,774 INFO: 127.0.0.1 - - [04/Mar/2025 15:40:08] "[36mGET /static/custom.css HTTP/1.1[0m" 304 -
2025-03-04 15:40:08,926 INFO: 127.0.0.1 - - [04/Mar/2025 15:40:08] "[36mGET /static/favicon.ico HTTP/1.1[0m" 304 -
2025-03-04 15:40:13,538 INFO: Flash messages: [('danger', 'An unexpected error occurred while fetching tasks.')]
2025-03-04 15:40:13,538 INFO: BEGIN (implicit)
2025-03-04 15:40:13,540 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date 
FROM project LEFT OUTER JOIN task AS task_1 ON project.id = task_1.project_id
2025-03-04 15:40:13,541 INFO: [generated in 0.00047s] {}
2025-03-04 15:40:13,550 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:40:13,551 INFO: [generated in 0.00064s] {'coalesce_2': 0, 'project_id_1': 6}
2025-03-04 15:40:13,555 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:40:13,555 INFO: [generated in 0.00017s] {'coalesce_2': 0, 'project_id_1': 6}
2025-03-04 15:40:13,556 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:40:13,556 INFO: [cached since 0.005339s ago] {'coalesce_2': 0, 'project_id_1': 6}
2025-03-04 15:40:13,556 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:40:13,557 INFO: [cached since 0.001816s ago] {'coalesce_2': 0, 'project_id_1': 6}
2025-03-04 15:40:13,557 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:40:13,557 INFO: [cached since 0.006985s ago] {'coalesce_2': 0, 'project_id_1': 19}
2025-03-04 15:40:13,558 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:40:13,558 INFO: [cached since 0.003403s ago] {'coalesce_2': 0, 'project_id_1': 19}
2025-03-04 15:40:13,559 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:40:13,559 INFO: [cached since 0.008368s ago] {'coalesce_2': 0, 'project_id_1': 19}
2025-03-04 15:40:13,559 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:40:13,559 INFO: [cached since 0.004711s ago] {'coalesce_2': 0, 'project_id_1': 19}
2025-03-04 15:40:13,560 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:40:13,560 INFO: [cached since 0.009595s ago] {'coalesce_2': 0, 'project_id_1': 7}
2025-03-04 15:40:13,561 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:40:13,561 INFO: [cached since 0.005964s ago] {'coalesce_2': 0, 'project_id_1': 7}
2025-03-04 15:40:13,562 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:40:13,562 INFO: [cached since 0.01153s ago] {'coalesce_2': 0, 'project_id_1': 7}
2025-03-04 15:40:13,563 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:40:13,564 INFO: [cached since 0.008892s ago] {'coalesce_2': 0, 'project_id_1': 7}
2025-03-04 15:40:13,565 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:40:13,565 INFO: [cached since 0.01424s ago] {'coalesce_2': 0, 'project_id_1': 5}
2025-03-04 15:40:13,565 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:40:13,565 INFO: [cached since 0.01045s ago] {'coalesce_2': 0, 'project_id_1': 5}
2025-03-04 15:40:13,566 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:40:13,566 INFO: [cached since 0.01537s ago] {'coalesce_2': 0, 'project_id_1': 5}
2025-03-04 15:40:13,566 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:40:13,566 INFO: [cached since 0.01157s ago] {'coalesce_2': 0, 'project_id_1': 5}
2025-03-04 15:40:13,567 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:40:13,567 INFO: [cached since 0.01642s ago] {'coalesce_2': 0, 'project_id_1': 2}
2025-03-04 15:40:13,567 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:40:13,567 INFO: [cached since 0.01259s ago] {'coalesce_2': 0, 'project_id_1': 2}
2025-03-04 15:40:13,568 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:40:13,568 INFO: [cached since 0.01744s ago] {'coalesce_2': 0, 'project_id_1': 2}
2025-03-04 15:40:13,568 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:40:13,568 INFO: [cached since 0.01359s ago] {'coalesce_2': 0, 'project_id_1': 2}
2025-03-04 15:40:13,569 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:40:13,569 INFO: [cached since 0.01841s ago] {'coalesce_2': 0, 'project_id_1': 4}
2025-03-04 15:40:13,569 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:40:13,569 INFO: [cached since 0.01464s ago] {'coalesce_2': 0, 'project_id_1': 4}
2025-03-04 15:40:13,570 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:40:13,570 INFO: [cached since 0.01947s ago] {'coalesce_2': 0, 'project_id_1': 4}
2025-03-04 15:40:13,570 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:40:13,570 INFO: [cached since 0.01571s ago] {'coalesce_2': 0, 'project_id_1': 4}
2025-03-04 15:40:13,571 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:40:13,571 INFO: [cached since 0.02095s ago] {'coalesce_2': 0, 'project_id_1': 1}
2025-03-04 15:40:13,572 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:40:13,572 INFO: [cached since 0.01726s ago] {'coalesce_2': 0, 'project_id_1': 1}
2025-03-04 15:40:13,573 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:40:13,573 INFO: [cached since 0.02217s ago] {'coalesce_2': 0, 'project_id_1': 1}
2025-03-04 15:40:13,573 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:40:13,573 INFO: [cached since 0.01834s ago] {'coalesce_2': 0, 'project_id_1': 1}
2025-03-04 15:40:13,574 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:40:13,574 INFO: [cached since 0.0232s ago] {'coalesce_2': 0, 'project_id_1': 3}
2025-03-04 15:40:13,574 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:40:13,574 INFO: [cached since 0.01936s ago] {'coalesce_2': 0, 'project_id_1': 3}
2025-03-04 15:40:13,575 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:40:13,575 INFO: [cached since 0.02416s ago] {'coalesce_2': 0, 'project_id_1': 3}
2025-03-04 15:40:13,575 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:40:13,575 INFO: [cached since 0.0204s ago] {'coalesce_2': 0, 'project_id_1': 3}
2025-03-04 15:40:13,576 INFO: SELECT count(*) AS count_1 
FROM (SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor) AS anon_1
2025-03-04 15:40:13,577 INFO: [generated in 0.00011s] {}
2025-03-04 15:40:13,578 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project JOIN task ON project.id = task.project_id GROUP BY project.id 
HAVING sum(task.story_points * CAST(task.completed AS INTEGER)) < sum(task.story_points)
2025-03-04 15:40:13,578 INFO: [generated in 0.00015s] {}
2025-03-04 15:40:13,582 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project JOIN task ON project.id = task.project_id GROUP BY project.id 
HAVING sum(task.story_points * CAST(task.completed AS INTEGER)) >= sum(task.story_points)
2025-03-04 15:40:13,582 INFO: [generated in 0.00017s] {}
2025-03-04 15:40:13,583 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project LEFT OUTER JOIN task ON project.id = task.project_id GROUP BY project.id 
HAVING sum(task.story_points * CAST(task.completed AS INTEGER)) IS NULL
2025-03-04 15:40:13,583 INFO: [generated in 0.00012s] {}
2025-03-04 15:40:13,584 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-04 15:40:13,584 INFO: [cached since 6262s ago] {}
2025-03-04 15:40:13,585 INFO: SELECT count(*) AS count_1 
FROM (SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor) AS anon_1
2025-03-04 15:40:13,585 INFO: [cached since 0.008461s ago] {}
2025-03-04 15:40:13,586 INFO: SELECT count(*) AS count_1 
FROM (SELECT DISTINCT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor JOIN project_contributor ON contributor.id = project_contributor.contributor_id) AS anon_1
2025-03-04 15:40:13,586 INFO: [generated in 0.00009s] {}
2025-03-04 15:40:13,588 INFO: SELECT count(*) AS count_1 
FROM (SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor LEFT OUTER JOIN project_contributor ON contributor.id = project_contributor.contributor_id 
WHERE project_contributor.project_id IS NULL) AS anon_1
2025-03-04 15:40:13,588 INFO: [generated in 0.00017s] {}
2025-03-04 15:40:13,720 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:40:13,720 INFO: [cached since 0.17s ago] {'coalesce_2': 0, 'project_id_1': 6}
2025-03-04 15:40:13,721 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 6, 'total_story_points': 447, 'timestamp': '2025-03-04T14:40:13.721502+00:00'}
2025-03-04 15:40:13,721 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:40:13,721 INFO: [cached since 0.1709s ago] {'coalesce_2': 0, 'project_id_1': 19}
2025-03-04 15:40:13,722 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 19, 'total_story_points': 12, 'timestamp': '2025-03-04T14:40:13.722141+00:00'}
2025-03-04 15:40:13,722 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:40:13,722 INFO: [cached since 0.1715s ago] {'coalesce_2': 0, 'project_id_1': 7}
2025-03-04 15:40:13,722 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 7, 'total_story_points': 15, 'timestamp': '2025-03-04T14:40:13.722730+00:00'}
2025-03-04 15:40:13,722 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:40:13,723 INFO: [cached since 0.1721s ago] {'coalesce_2': 0, 'project_id_1': 5}
2025-03-04 15:40:13,723 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 5, 'total_story_points': 4, 'timestamp': '2025-03-04T14:40:13.723338+00:00'}
2025-03-04 15:40:13,723 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:40:13,723 INFO: [cached since 0.1727s ago] {'coalesce_2': 0, 'project_id_1': 2}
2025-03-04 15:40:13,723 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 2, 'total_story_points': 0, 'timestamp': '2025-03-04T14:40:13.723945+00:00'}
2025-03-04 15:40:13,724 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:40:13,724 INFO: [cached since 0.1734s ago] {'coalesce_2': 0, 'project_id_1': 4}
2025-03-04 15:40:13,724 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 4, 'total_story_points': 0, 'timestamp': '2025-03-04T14:40:13.724640+00:00'}
2025-03-04 15:40:13,724 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:40:13,724 INFO: [cached since 0.174s ago] {'coalesce_2': 0, 'project_id_1': 1}
2025-03-04 15:40:13,725 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 1, 'total_story_points': 0, 'timestamp': '2025-03-04T14:40:13.725277+00:00'}
2025-03-04 15:40:13,725 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:40:13,725 INFO: [cached since 0.1747s ago] {'coalesce_2': 0, 'project_id_1': 3}
2025-03-04 15:40:13,725 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 3, 'total_story_points': 0, 'timestamp': '2025-03-04T14:40:13.725974+00:00'}
2025-03-04 15:40:13,726 INFO: ROLLBACK
2025-03-04 15:40:13,726 INFO: 127.0.0.1 - - [04/Mar/2025 15:40:13] "GET /dashboard HTTP/1.1" 200 -
2025-03-04 15:40:13,747 INFO: 127.0.0.1 - - [04/Mar/2025 15:40:13] "[36mGET /static/custom.css HTTP/1.1[0m" 304 -
2025-03-04 15:40:13,748 INFO: 127.0.0.1 - - [04/Mar/2025 15:40:13] "[36mGET /static/custom.js HTTP/1.1[0m" 304 -
2025-03-04 15:41:51,189 INFO:  * Detected change in '/Users/fredrik_cederborg/CodingProjects/PMS_react-next_version/app/routes/api_routes.py', reloading
2025-03-04 15:41:51,899 INFO: Application started in development mode
2025-03-04 15:41:51,904 DEBUG: This is a debug message from the api_routes module
2025-03-04 15:41:52,374 DEBUG: This is a debug message from the page_routes module
2025-03-04 15:41:52,382 INFO: Blueprints registered successfully
2025-03-04 15:41:52,397 WARNING:  * Debugger is active!
2025-03-04 15:41:52,408 INFO:  * Debugger PIN: 937-958-492
2025-03-04 15:41:52,424 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:52] "GET /socket.io/?EIO=4&transport=polling&t=lkr9gedi HTTP/1.1" 200 -
2025-03-04 15:41:52,425 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:52] "GET /socket.io/?EIO=4&transport=polling&t=lkrehinb HTTP/1.1" 200 -
2025-03-04 15:41:52,438 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:52] "POST /socket.io/?EIO=4&transport=polling&t=lkrhowdt&sid=ONAmkbyrVBPedQJNAAAB HTTP/1.1" 200 -
2025-03-04 15:41:52,438 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:52] "GET /socket.io/?EIO=4&transport=polling&t=lkrhp55x&sid=ONAmkbyrVBPedQJNAAAB HTTP/1.1" 200 -
2025-03-04 15:41:52,440 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:52] "POST /socket.io/?EIO=4&transport=polling&t=lkrhxkrl&sid=_dCc7p5I8YdZCw8QAAAA HTTP/1.1" 200 -
2025-03-04 15:41:52,440 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:52] "GET /socket.io/?EIO=4&transport=polling&t=lkrhyaae&sid=_dCc7p5I8YdZCw8QAAAA HTTP/1.1" 200 -
2025-03-04 15:41:52,442 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:52] "GET /socket.io/?EIO=4&transport=polling&t=lkri1tel&sid=ONAmkbyrVBPedQJNAAAB HTTP/1.1" 200 -
2025-03-04 15:41:52,504 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:52] "GET /socket.io/?EIO=4&transport=polling&t=lkrjr88h HTTP/1.1" 200 -
2025-03-04 15:41:52,509 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:52] "POST /socket.io/?EIO=4&transport=polling&t=lkrjuv8e&sid=kC69QR9SK94pNdaKAAAE HTTP/1.1" 200 -
2025-03-04 15:41:52,509 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:52] "GET /socket.io/?EIO=4&transport=polling&t=lkrjvssp&sid=kC69QR9SK94pNdaKAAAE HTTP/1.1" 200 -
2025-03-04 15:41:52,513 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:52] "GET /socket.io/?EIO=4&transport=polling&t=lkrk0wv0&sid=kC69QR9SK94pNdaKAAAE HTTP/1.1" 200 -
2025-03-04 15:41:52,521 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:52] "GET /socket.io/?EIO=4&transport=polling&t=lkrk81ig HTTP/1.1" 200 -
2025-03-04 15:41:52,524 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:52] "POST /socket.io/?EIO=4&transport=polling&t=lkrkbh4o&sid=6AVSFcfyfg-eIYPGAAAG HTTP/1.1" 200 -
2025-03-04 15:41:52,526 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:52] "GET /socket.io/?EIO=4&transport=polling&t=lkrkbrhh&sid=6AVSFcfyfg-eIYPGAAAG HTTP/1.1" 200 -
2025-03-04 15:41:52,537 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:52] "GET /socket.io/?EIO=4&transport=polling&t=lkrknt93 HTTP/1.1" 200 -
2025-03-04 15:41:52,540 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:52] "POST /socket.io/?EIO=4&transport=polling&t=lkrkqnwu&sid=IksY3R9gpbXO7GvIAAAI HTTP/1.1" 200 -
2025-03-04 15:41:52,540 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:52] "GET /socket.io/?EIO=4&transport=polling&t=lkrkrk1k&sid=IksY3R9gpbXO7GvIAAAI HTTP/1.1" 200 -
2025-03-04 15:41:52,606 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:52] "GET /socket.io/?EIO=4&transport=polling&t=lkrmlstf HTTP/1.1" 200 -
2025-03-04 15:41:52,610 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:52] "POST /socket.io/?EIO=4&transport=polling&t=lkrmoyy1&sid=72aJoBM0rBvAfcQYAAAK HTTP/1.1" 200 -
2025-03-04 15:41:52,610 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:52] "GET /socket.io/?EIO=4&transport=polling&t=lkrmovfe&sid=72aJoBM0rBvAfcQYAAAK HTTP/1.1" 200 -
2025-03-04 15:41:52,614 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:52] "GET /socket.io/?EIO=4&transport=polling&t=lkrmsjff HTTP/1.1" 200 -
2025-03-04 15:41:52,615 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:52] "GET /socket.io/?EIO=4&transport=polling&t=lkrmu0vp&sid=72aJoBM0rBvAfcQYAAAK HTTP/1.1" 200 -
2025-03-04 15:41:52,618 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:52] "POST /socket.io/?EIO=4&transport=polling&t=lkrmxinr&sid=Go5Q6P5BseD5QKNVAAAM HTTP/1.1" 200 -
2025-03-04 15:41:52,619 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:52] "GET /socket.io/?EIO=4&transport=polling&t=lkrmxa7f&sid=Go5Q6P5BseD5QKNVAAAM HTTP/1.1" 200 -
2025-03-04 15:41:52,946 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:52] "GET /socket.io/?EIO=4&transport=polling&t=lkrw1049 HTTP/1.1" 200 -
2025-03-04 15:41:52,950 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:52] "POST /socket.io/?EIO=4&transport=polling&t=lkrw4z3s&sid=rEKu1OQSEsnwbsWwAAAO HTTP/1.1" 200 -
2025-03-04 15:41:52,950 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:52] "GET /socket.io/?EIO=4&transport=polling&t=lkrw5gci&sid=rEKu1OQSEsnwbsWwAAAO HTTP/1.1" 200 -
2025-03-04 15:41:52,952 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:52] "GET /socket.io/?EIO=4&transport=polling&t=lkrw88uu&sid=rEKu1OQSEsnwbsWwAAAO HTTP/1.1" 200 -
2025-03-04 15:41:53,267 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:53] "GET /socket.io/?EIO=4&transport=polling&t=lks4uxcu HTTP/1.1" 200 -
2025-03-04 15:41:53,274 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:53] "POST /socket.io/?EIO=4&transport=polling&t=lks51dme&sid=yvplupUMyl3A8UNRAAAQ HTTP/1.1" 200 -
2025-03-04 15:41:53,280 INFO: 127.0.0.1 - - [04/Mar/2025 15:41:53] "GET /socket.io/?EIO=4&transport=polling&t=lks528qm&sid=yvplupUMyl3A8UNRAAAQ HTTP/1.1" 200 -
2025-03-04 15:42:04,603 INFO:  * Detected change in '/Users/fredrik_cederborg/CodingProjects/PMS_react-next_version/app/routes/api_routes.py', reloading
2025-03-04 15:42:05,202 INFO: Application started in development mode
2025-03-04 15:42:05,208 DEBUG: This is a debug message from the api_routes module
2025-03-04 15:42:05,664 DEBUG: This is a debug message from the page_routes module
2025-03-04 15:42:05,671 INFO: Blueprints registered successfully
2025-03-04 15:42:05,684 WARNING:  * Debugger is active!
2025-03-04 15:42:05,691 INFO:  * Debugger PIN: 937-958-492
2025-03-04 15:42:05,710 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:05] "GET /socket.io/?EIO=4&transport=polling&t=ll1frvau HTTP/1.1" 200 -
2025-03-04 15:42:05,710 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:05] "GET /socket.io/?EIO=4&transport=polling&t=ll1gbxi7 HTTP/1.1" 200 -
2025-03-04 15:42:05,711 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:05] "GET /socket.io/?EIO=4&transport=polling&t=ll1oh8xf HTTP/1.1" 200 -
2025-03-04 15:42:05,716 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:05] "POST /socket.io/?EIO=4&transport=polling&t=ll1qpk74&sid=4oU9HWcsBQbRSGc2AAAA HTTP/1.1" 200 -
2025-03-04 15:42:05,717 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:05] "GET /socket.io/?EIO=4&transport=polling&t=ll1qpspd&sid=4oU9HWcsBQbRSGc2AAAA HTTP/1.1" 200 -
2025-03-04 15:42:05,718 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:05] "POST /socket.io/?EIO=4&transport=polling&t=ll1qs866&sid=h1k00KVU8l8Rcu81AAAB HTTP/1.1" 200 -
2025-03-04 15:42:05,718 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:05] "GET /socket.io/?EIO=4&transport=polling&t=ll1qss90&sid=h1k00KVU8l8Rcu81AAAB HTTP/1.1" 200 -
2025-03-04 15:42:05,720 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:05] "POST /socket.io/?EIO=4&transport=polling&t=ll1qspxe&sid=tYX4hhhSMMdGkHtkAAAC HTTP/1.1" 200 -
2025-03-04 15:42:05,721 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:05] "GET /socket.io/?EIO=4&transport=polling&t=ll1qt3te&sid=tYX4hhhSMMdGkHtkAAAC HTTP/1.1" 200 -
2025-03-04 15:42:05,721 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:05] "GET /socket.io/?EIO=4&transport=polling&t=ll1qwrg5&sid=4oU9HWcsBQbRSGc2AAAA HTTP/1.1" 200 -
2025-03-04 15:42:05,725 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:05] "GET /socket.io/?EIO=4&transport=polling&t=ll1r01jq HTTP/1.1" 200 -
2025-03-04 15:42:05,729 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:05] "POST /socket.io/?EIO=4&transport=polling&t=ll1r4e0h&sid=ys3FnenuoS-sR_iVAAAG HTTP/1.1" 200 -
2025-03-04 15:42:05,730 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:05] "GET /socket.io/?EIO=4&transport=polling&t=ll1r4nsj&sid=ys3FnenuoS-sR_iVAAAG HTTP/1.1" 200 -
2025-03-04 15:42:05,763 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:05] "GET /socket.io/?EIO=4&transport=polling&t=ll1s2yu0 HTTP/1.1" 200 -
2025-03-04 15:42:05,767 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:05] "POST /socket.io/?EIO=4&transport=polling&t=ll1s5yh5&sid=Z_XTjY_xGMD6v385AAAI HTTP/1.1" 200 -
2025-03-04 15:42:05,767 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:05] "GET /socket.io/?EIO=4&transport=polling&t=ll1s58jm&sid=Z_XTjY_xGMD6v385AAAI HTTP/1.1" 200 -
2025-03-04 15:42:05,856 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:05] "GET /socket.io/?EIO=4&transport=polling&t=ll1un0be HTTP/1.1" 200 -
2025-03-04 15:42:05,860 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:05] "POST /socket.io/?EIO=4&transport=polling&t=ll1uq5o5&sid=0hwud9NRpZ9ZU2B0AAAK HTTP/1.1" 200 -
2025-03-04 15:42:05,862 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:05] "GET /socket.io/?EIO=4&transport=polling&t=ll1urx2e&sid=0hwud9NRpZ9ZU2B0AAAK HTTP/1.1" 200 -
2025-03-04 15:42:05,974 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:05] "GET /socket.io/?EIO=4&transport=polling&t=ll1xjwxd HTTP/1.1" 200 -
2025-03-04 15:42:05,983 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:05] "POST /socket.io/?EIO=4&transport=polling&t=ll1y5fz7&sid=d7X6rigWO2y1f2sEAAAM HTTP/1.1" 200 -
2025-03-04 15:42:05,983 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:05] "GET /socket.io/?EIO=4&transport=polling&t=ll1y5n7k&sid=d7X6rigWO2y1f2sEAAAM HTTP/1.1" 200 -
2025-03-04 15:42:06,250 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:06] "GET /socket.io/?EIO=4&transport=polling&t=ll25lf19 HTTP/1.1" 200 -
2025-03-04 15:42:06,253 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:06] "POST /socket.io/?EIO=4&transport=polling&t=ll25on49&sid=vsxvBhRESOiqGhSYAAAO HTTP/1.1" 200 -
2025-03-04 15:42:06,254 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:06] "GET /socket.io/?EIO=4&transport=polling&t=ll25o7e8&sid=vsxvBhRESOiqGhSYAAAO HTTP/1.1" 200 -
2025-03-04 15:42:06,256 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:06] "GET /socket.io/?EIO=4&transport=polling&t=ll25rrsd&sid=vsxvBhRESOiqGhSYAAAO HTTP/1.1" 200 -
2025-03-04 15:42:06,265 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:06] "GET /socket.io/?EIO=4&transport=polling&t=ll25wxmg HTTP/1.1" 200 -
2025-03-04 15:42:06,278 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:06] "POST /socket.io/?EIO=4&transport=polling&t=ll263ntl&sid=7l27wPzWfaimui7EAAAQ HTTP/1.1" 200 -
2025-03-04 15:42:06,285 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:06] "GET /socket.io/?EIO=4&transport=polling&t=ll2645gn&sid=7l27wPzWfaimui7EAAAQ HTTP/1.1" 200 -
2025-03-04 15:42:06,292 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:06] "GET /socket.io/?EIO=4&transport=polling&t=ll26o5ku&sid=7l27wPzWfaimui7EAAAQ HTTP/1.1" 200 -
2025-03-04 15:42:08,780 INFO:  * Detected change in '/Users/fredrik_cederborg/CodingProjects/PMS_react-next_version/app/routes/api_routes.py', reloading
2025-03-04 15:42:09,292 INFO: Application started in development mode
2025-03-04 15:42:09,298 DEBUG: This is a debug message from the api_routes module
2025-03-04 15:42:09,668 DEBUG: This is a debug message from the page_routes module
2025-03-04 15:42:09,676 INFO: Blueprints registered successfully
2025-03-04 15:42:09,690 WARNING:  * Debugger is active!
2025-03-04 15:42:09,698 INFO:  * Debugger PIN: 937-958-492
2025-03-04 15:42:09,714 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:09] "GET /socket.io/?EIO=4&transport=polling&t=ll4ora2u HTTP/1.1" 200 -
2025-03-04 15:42:09,717 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:09] "POST /socket.io/?EIO=4&transport=polling&t=ll4tvmj7&sid=xn4NzDNqbENr_QpKAAAA HTTP/1.1" 200 -
2025-03-04 15:42:09,718 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:09] "GET /socket.io/?EIO=4&transport=polling&t=ll4tw0nh&sid=xn4NzDNqbENr_QpKAAAA HTTP/1.1" 200 -
2025-03-04 15:42:09,772 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:09] "GET /socket.io/?EIO=4&transport=polling&t=ll4vesmm HTTP/1.1" 200 -
2025-03-04 15:42:09,775 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:09] "POST /socket.io/?EIO=4&transport=polling&t=ll4vhgtl&sid=Do1KGi_-M2RgqZPdAAAC HTTP/1.1" 200 -
2025-03-04 15:42:09,776 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:09] "GET /socket.io/?EIO=4&transport=polling&t=ll4vi0dg&sid=Do1KGi_-M2RgqZPdAAAC HTTP/1.1" 200 -
2025-03-04 15:42:09,779 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:09] "GET /socket.io/?EIO=4&transport=polling&t=ll4vmp4t&sid=Do1KGi_-M2RgqZPdAAAC HTTP/1.1" 200 -
2025-03-04 15:42:09,933 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:09] "GET /socket.io/?EIO=4&transport=polling&t=ll4zvt49 HTTP/1.1" 200 -
2025-03-04 15:42:09,938 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:09] "POST /socket.io/?EIO=4&transport=polling&t=ll4zykks&sid=i-IT6iJGQqhWKRWkAAAE HTTP/1.1" 200 -
2025-03-04 15:42:09,939 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:09] "GET /socket.io/?EIO=4&transport=polling&t=ll4zzlfn&sid=i-IT6iJGQqhWKRWkAAAE HTTP/1.1" 200 -
2025-03-04 15:42:09,953 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:09] "GET /socket.io/?EIO=4&transport=polling&t=ll50glua HTTP/1.1" 200 -
2025-03-04 15:42:09,956 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:09] "POST /socket.io/?EIO=4&transport=polling&t=ll50ilyg&sid=Q6F3tFyfPFaCHH1EAAAG HTTP/1.1" 200 -
2025-03-04 15:42:09,957 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:09] "GET /socket.io/?EIO=4&transport=polling&t=ll50jxu9&sid=Q6F3tFyfPFaCHH1EAAAG HTTP/1.1" 200 -
2025-03-04 15:42:10,029 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:10] "GET /socket.io/?EIO=4&transport=polling&t=ll52jafo HTTP/1.1" 200 -
2025-03-04 15:42:10,032 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:10] "POST /socket.io/?EIO=4&transport=polling&t=ll52nmc9&sid=1CYKFOlwqQTUHqYyAAAI HTTP/1.1" 200 -
2025-03-04 15:42:10,033 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:10] "GET /socket.io/?EIO=4&transport=polling&t=ll52n0v7&sid=1CYKFOlwqQTUHqYyAAAI HTTP/1.1" 200 -
2025-03-04 15:42:10,270 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:10] "GET /socket.io/?EIO=4&transport=polling&t=ll58z5av HTTP/1.1" 200 -
2025-03-04 15:42:10,274 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:10] "POST /socket.io/?EIO=4&transport=polling&t=ll59c7iy&sid=plMk6qVpyABo2sRGAAAK HTTP/1.1" 200 -
2025-03-04 15:42:10,278 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:10] "GET /socket.io/?EIO=4&transport=polling&t=ll59djq3&sid=plMk6qVpyABo2sRGAAAK HTTP/1.1" 200 -
2025-03-04 15:42:10,351 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:10] "GET /socket.io/?EIO=4&transport=polling&t=ll5bhp7u HTTP/1.1" 200 -
2025-03-04 15:42:10,354 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:10] "POST /socket.io/?EIO=4&transport=polling&t=ll5bk4w9&sid=CMEfNS2IIEhf8bT_AAAM HTTP/1.1" 200 -
2025-03-04 15:42:10,355 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:10] "GET /socket.io/?EIO=4&transport=polling&t=ll5bltq8&sid=CMEfNS2IIEhf8bT_AAAM HTTP/1.1" 200 -
2025-03-04 15:42:10,359 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:10] "GET /socket.io/?EIO=4&transport=polling&t=ll5bqfwx HTTP/1.1" 200 -
2025-03-04 15:42:10,363 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:10] "POST /socket.io/?EIO=4&transport=polling&t=ll5bttlf&sid=SQgrG1OeHTtRQYjbAAAO HTTP/1.1" 200 -
2025-03-04 15:42:10,364 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:10] "GET /socket.io/?EIO=4&transport=polling&t=ll5bushr&sid=SQgrG1OeHTtRQYjbAAAO HTTP/1.1" 200 -
2025-03-04 15:42:10,445 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:10] "GET /socket.io/?EIO=4&transport=polling&t=ll5e28d8 HTTP/1.1" 200 -
2025-03-04 15:42:10,450 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:10] "POST /socket.io/?EIO=4&transport=polling&t=ll5e705j&sid=x4aB3gzxzxyWH2UEAAAQ HTTP/1.1" 200 -
2025-03-04 15:42:10,450 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:10] "GET /socket.io/?EIO=4&transport=polling&t=ll5e7243&sid=x4aB3gzxzxyWH2UEAAAQ HTTP/1.1" 200 -
2025-03-04 15:42:10,453 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:10] "GET /socket.io/?EIO=4&transport=polling&t=ll5ecqz0&sid=x4aB3gzxzxyWH2UEAAAQ HTTP/1.1" 200 -
2025-03-04 15:42:14,848 INFO:  * Detected change in '/Users/fredrik_cederborg/CodingProjects/PMS_react-next_version/app/routes/api_routes.py', reloading
2025-03-04 15:42:15,368 INFO: Application started in development mode
2025-03-04 15:42:15,374 DEBUG: This is a debug message from the api_routes module
2025-03-04 15:42:15,807 DEBUG: This is a debug message from the page_routes module
2025-03-04 15:42:15,816 INFO: Blueprints registered successfully
2025-03-04 15:42:15,830 WARNING:  * Debugger is active!
2025-03-04 15:42:15,839 INFO:  * Debugger PIN: 937-958-492
2025-03-04 15:42:15,859 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:15] "GET /socket.io/?EIO=4&transport=polling&t=ll9j4mnu HTTP/1.1" 200 -
2025-03-04 15:42:15,859 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:15] "GET /socket.io/?EIO=4&transport=polling&t=ll9diwvo HTTP/1.1" 200 -
2025-03-04 15:42:15,869 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:15] "POST /socket.io/?EIO=4&transport=polling&t=ll9kqlgm&sid=87oD429Iqiu53jRpAAAB HTTP/1.1" 200 -
2025-03-04 15:42:15,870 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:15] "GET /socket.io/?EIO=4&transport=polling&t=ll9krgtx&sid=87oD429Iqiu53jRpAAAB HTTP/1.1" 200 -
2025-03-04 15:42:15,870 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:15] "POST /socket.io/?EIO=4&transport=polling&t=ll9kr8ub&sid=2rQ84y7fNGSHHP39AAAA HTTP/1.1" 200 -
2025-03-04 15:42:15,872 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:15] "GET /socket.io/?EIO=4&transport=polling&t=ll9ks9jg&sid=2rQ84y7fNGSHHP39AAAA HTTP/1.1" 200 -
2025-03-04 15:42:16,006 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:16] "GET /socket.io/?EIO=4&transport=polling&t=ll9olf0f HTTP/1.1" 200 -
2025-03-04 15:42:16,009 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:16] "POST /socket.io/?EIO=4&transport=polling&t=ll9onk1c&sid=v86EkOxUR8yQDymBAAAE HTTP/1.1" 200 -
2025-03-04 15:42:16,009 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:16] "GET /socket.io/?EIO=4&transport=polling&t=ll9oowh3&sid=v86EkOxUR8yQDymBAAAE HTTP/1.1" 200 -
2025-03-04 15:42:16,011 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:16] "GET /socket.io/?EIO=4&transport=polling&t=ll9oqacj HTTP/1.1" 200 -
2025-03-04 15:42:16,013 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:16] "POST /socket.io/?EIO=4&transport=polling&t=ll9osi5i&sid=oAfa_KTXPBa1FbGyAAAG HTTP/1.1" 200 -
2025-03-04 15:42:16,014 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:16] "GET /socket.io/?EIO=4&transport=polling&t=ll9osykv&sid=oAfa_KTXPBa1FbGyAAAG HTTP/1.1" 200 -
2025-03-04 15:42:16,113 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:16] "GET /socket.io/?EIO=4&transport=polling&t=ll9rktip HTTP/1.1" 200 -
2025-03-04 15:42:16,117 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:16] "POST /socket.io/?EIO=4&transport=polling&t=ll9rnk6t&sid=s8nfoQRepm6aDgxiAAAI HTTP/1.1" 200 -
2025-03-04 15:42:16,117 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:16] "GET /socket.io/?EIO=4&transport=polling&t=ll9rnebt&sid=s8nfoQRepm6aDgxiAAAI HTTP/1.1" 200 -
2025-03-04 15:42:16,325 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:16] "GET /socket.io/?EIO=4&transport=polling&t=ll9xg6zm HTTP/1.1" 200 -
2025-03-04 15:42:16,329 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:16] "POST /socket.io/?EIO=4&transport=polling&t=ll9xjqxc&sid=chMb0dghg5tv4lz8AAAK HTTP/1.1" 200 -
2025-03-04 15:42:16,330 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:16] "GET /socket.io/?EIO=4&transport=polling&t=ll9xkr4f&sid=chMb0dghg5tv4lz8AAAK HTTP/1.1" 200 -
2025-03-04 15:42:16,333 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:16] "GET /socket.io/?EIO=4&transport=polling&t=ll9xo5k7 HTTP/1.1" 200 -
2025-03-04 15:42:16,336 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:16] "POST /socket.io/?EIO=4&transport=polling&t=ll9xq9w7&sid=i43t6WqVlGHrfWvIAAAM HTTP/1.1" 200 -
2025-03-04 15:42:16,336 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:16] "GET /socket.io/?EIO=4&transport=polling&t=ll9xr5qb&sid=i43t6WqVlGHrfWvIAAAM HTTP/1.1" 200 -
2025-03-04 15:42:16,509 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:16] "GET /socket.io/?EIO=4&transport=polling&t=lla2kxk8 HTTP/1.1" 200 -
2025-03-04 15:42:16,513 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:16] "POST /socket.io/?EIO=4&transport=polling&t=lla2n1e6&sid=DTpq04MqTEYvhwmWAAAO HTTP/1.1" 200 -
2025-03-04 15:42:16,513 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:16] "GET /socket.io/?EIO=4&transport=polling&t=lla2ouar&sid=DTpq04MqTEYvhwmWAAAO HTTP/1.1" 200 -
2025-03-04 15:42:17,268 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:17] "GET /socket.io/?EIO=4&transport=polling&t=llanhm4m HTTP/1.1" 200 -
2025-03-04 15:42:17,277 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:17] "POST /socket.io/?EIO=4&transport=polling&t=llanq4f8&sid=dP6v9r4OB_6VaCbLAAAQ HTTP/1.1" 200 -
2025-03-04 15:42:17,281 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:17] "GET /socket.io/?EIO=4&transport=polling&t=llans0sa&sid=dP6v9r4OB_6VaCbLAAAQ HTTP/1.1" 200 -
2025-03-04 15:42:31,033 INFO: Flash messages: []
2025-03-04 15:42:31,203 INFO: select pg_catalog.version()
2025-03-04 15:42:31,203 INFO: [raw sql] {}
2025-03-04 15:42:31,213 INFO: select current_schema()
2025-03-04 15:42:31,213 INFO: [raw sql] {}
2025-03-04 15:42:31,214 INFO: show standard_conforming_strings
2025-03-04 15:42:31,214 INFO: [raw sql] {}
2025-03-04 15:42:31,214 INFO: BEGIN (implicit)
2025-03-04 15:42:31,220 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date 
FROM project LEFT OUTER JOIN task AS task_1 ON project.id = task_1.project_id
2025-03-04 15:42:31,220 INFO: [generated in 0.00046s] {}
2025-03-04 15:42:31,233 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:42:31,233 INFO: [generated in 0.00025s] {'coalesce_2': 0, 'project_id_1': 6}
2025-03-04 15:42:31,235 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:42:31,235 INFO: [generated in 0.00022s] {'coalesce_2': 0, 'project_id_1': 6}
2025-03-04 15:42:31,236 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:42:31,236 INFO: [cached since 0.003826s ago] {'coalesce_2': 0, 'project_id_1': 6}
2025-03-04 15:42:31,238 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:42:31,238 INFO: [cached since 0.002693s ago] {'coalesce_2': 0, 'project_id_1': 6}
2025-03-04 15:42:31,239 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:42:31,239 INFO: [cached since 0.006424s ago] {'coalesce_2': 0, 'project_id_1': 19}
2025-03-04 15:42:31,240 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:42:31,240 INFO: [cached since 0.005192s ago] {'coalesce_2': 0, 'project_id_1': 19}
2025-03-04 15:42:31,241 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:42:31,241 INFO: [cached since 0.00847s ago] {'coalesce_2': 0, 'project_id_1': 19}
2025-03-04 15:42:31,243 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:42:31,244 INFO: [cached since 0.008521s ago] {'coalesce_2': 0, 'project_id_1': 19}
2025-03-04 15:42:31,246 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:42:31,246 INFO: [cached since 0.01346s ago] {'coalesce_2': 0, 'project_id_1': 7}
2025-03-04 15:42:31,247 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:42:31,247 INFO: [cached since 0.01229s ago] {'coalesce_2': 0, 'project_id_1': 7}
2025-03-04 15:42:31,248 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:42:31,248 INFO: [cached since 0.01549s ago] {'coalesce_2': 0, 'project_id_1': 7}
2025-03-04 15:42:31,249 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:42:31,249 INFO: [cached since 0.01391s ago] {'coalesce_2': 0, 'project_id_1': 7}
2025-03-04 15:42:31,250 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:42:31,250 INFO: [cached since 0.01729s ago] {'coalesce_2': 0, 'project_id_1': 5}
2025-03-04 15:42:31,251 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:42:31,251 INFO: [cached since 0.01635s ago] {'coalesce_2': 0, 'project_id_1': 5}
2025-03-04 15:42:31,252 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:42:31,253 INFO: [cached since 0.01989s ago] {'coalesce_2': 0, 'project_id_1': 5}
2025-03-04 15:42:31,254 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:42:31,254 INFO: [cached since 0.01855s ago] {'coalesce_2': 0, 'project_id_1': 5}
2025-03-04 15:42:31,255 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:42:31,255 INFO: [cached since 0.02273s ago] {'coalesce_2': 0, 'project_id_1': 2}
2025-03-04 15:42:31,256 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:42:31,257 INFO: [cached since 0.02155s ago] {'coalesce_2': 0, 'project_id_1': 2}
2025-03-04 15:42:31,258 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:42:31,258 INFO: [cached since 0.02582s ago] {'coalesce_2': 0, 'project_id_1': 2}
2025-03-04 15:42:31,261 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:42:31,261 INFO: [cached since 0.02635s ago] {'coalesce_2': 0, 'project_id_1': 2}
2025-03-04 15:42:31,263 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:42:31,263 INFO: [cached since 0.03054s ago] {'coalesce_2': 0, 'project_id_1': 4}
2025-03-04 15:42:31,264 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:42:31,264 INFO: [cached since 0.0292s ago] {'coalesce_2': 0, 'project_id_1': 4}
2025-03-04 15:42:31,265 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:42:31,265 INFO: [cached since 0.03236s ago] {'coalesce_2': 0, 'project_id_1': 4}
2025-03-04 15:42:31,266 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:42:31,266 INFO: [cached since 0.03087s ago] {'coalesce_2': 0, 'project_id_1': 4}
2025-03-04 15:42:31,267 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:42:31,267 INFO: [cached since 0.03448s ago] {'coalesce_2': 0, 'project_id_1': 1}
2025-03-04 15:42:31,268 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:42:31,268 INFO: [cached since 0.033s ago] {'coalesce_2': 0, 'project_id_1': 1}
2025-03-04 15:42:31,269 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:42:31,269 INFO: [cached since 0.03613s ago] {'coalesce_2': 0, 'project_id_1': 1}
2025-03-04 15:42:31,269 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:42:31,270 INFO: [cached since 0.03449s ago] {'coalesce_2': 0, 'project_id_1': 1}
2025-03-04 15:42:31,270 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:42:31,270 INFO: [cached since 0.03764s ago] {'coalesce_2': 0, 'project_id_1': 3}
2025-03-04 15:42:31,271 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:42:31,271 INFO: [cached since 0.03608s ago] {'coalesce_2': 0, 'project_id_1': 3}
2025-03-04 15:42:31,272 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:42:31,272 INFO: [cached since 0.03928s ago] {'coalesce_2': 0, 'project_id_1': 3}
2025-03-04 15:42:31,273 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 15:42:31,273 INFO: [cached since 0.03759s ago] {'coalesce_2': 0, 'project_id_1': 3}
2025-03-04 15:42:31,275 INFO: SELECT count(*) AS count_1 
FROM (SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor) AS anon_1
2025-03-04 15:42:31,275 INFO: [generated in 0.00015s] {}
2025-03-04 15:42:31,285 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project JOIN task ON project.id = task.project_id GROUP BY project.id 
HAVING sum(task.story_points * CAST(task.completed AS INTEGER)) < sum(task.story_points)
2025-03-04 15:42:31,285 INFO: [generated in 0.00038s] {}
2025-03-04 15:42:31,288 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project JOIN task ON project.id = task.project_id GROUP BY project.id 
HAVING sum(task.story_points * CAST(task.completed AS INTEGER)) >= sum(task.story_points)
2025-03-04 15:42:31,288 INFO: [generated in 0.00021s] {}
2025-03-04 15:42:31,291 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project LEFT OUTER JOIN task ON project.id = task.project_id GROUP BY project.id 
HAVING sum(task.story_points * CAST(task.completed AS INTEGER)) IS NULL
2025-03-04 15:42:31,291 INFO: [generated in 0.00015s] {}
2025-03-04 15:42:31,292 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-04 15:42:31,293 INFO: [generated in 0.00059s] {}
2025-03-04 15:42:31,295 INFO: SELECT count(*) AS count_1 
FROM (SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor) AS anon_1
2025-03-04 15:42:31,296 INFO: [cached since 0.021s ago] {}
2025-03-04 15:42:31,297 INFO: SELECT count(*) AS count_1 
FROM (SELECT DISTINCT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor JOIN project_contributor ON contributor.id = project_contributor.contributor_id) AS anon_1
2025-03-04 15:42:31,297 INFO: [generated in 0.00015s] {}
2025-03-04 15:42:31,300 INFO: SELECT count(*) AS count_1 
FROM (SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor LEFT OUTER JOIN project_contributor ON contributor.id = project_contributor.contributor_id 
WHERE project_contributor.project_id IS NULL) AS anon_1
2025-03-04 15:42:31,301 INFO: [generated in 0.00019s] {}
2025-03-04 15:42:31,383 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:42:31,383 INFO: [cached since 0.15s ago] {'coalesce_2': 0, 'project_id_1': 6}
2025-03-04 15:42:31,383 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 6, 'total_story_points': 447, 'timestamp': '2025-03-04T14:42:31.383812+00:00'}
2025-03-04 15:42:31,384 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:42:31,384 INFO: [cached since 0.1511s ago] {'coalesce_2': 0, 'project_id_1': 19}
2025-03-04 15:42:31,384 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 19, 'total_story_points': 12, 'timestamp': '2025-03-04T14:42:31.384699+00:00'}
2025-03-04 15:42:31,385 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:42:31,385 INFO: [cached since 0.152s ago] {'coalesce_2': 0, 'project_id_1': 7}
2025-03-04 15:42:31,385 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 7, 'total_story_points': 15, 'timestamp': '2025-03-04T14:42:31.385455+00:00'}
2025-03-04 15:42:31,385 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:42:31,385 INFO: [cached since 0.1526s ago] {'coalesce_2': 0, 'project_id_1': 5}
2025-03-04 15:42:31,386 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 5, 'total_story_points': 4, 'timestamp': '2025-03-04T14:42:31.386068+00:00'}
2025-03-04 15:42:31,386 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:42:31,386 INFO: [cached since 0.1532s ago] {'coalesce_2': 0, 'project_id_1': 2}
2025-03-04 15:42:31,386 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 2, 'total_story_points': 0, 'timestamp': '2025-03-04T14:42:31.386598+00:00'}
2025-03-04 15:42:31,386 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:42:31,386 INFO: [cached since 0.1538s ago] {'coalesce_2': 0, 'project_id_1': 4}
2025-03-04 15:42:31,387 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 4, 'total_story_points': 0, 'timestamp': '2025-03-04T14:42:31.387261+00:00'}
2025-03-04 15:42:31,387 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:42:31,387 INFO: [cached since 0.1544s ago] {'coalesce_2': 0, 'project_id_1': 1}
2025-03-04 15:42:31,387 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 1, 'total_story_points': 0, 'timestamp': '2025-03-04T14:42:31.387816+00:00'}
2025-03-04 15:42:31,388 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 15:42:31,388 INFO: [cached since 0.1552s ago] {'coalesce_2': 0, 'project_id_1': 3}
2025-03-04 15:42:31,388 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 3, 'total_story_points': 0, 'timestamp': '2025-03-04T14:42:31.388662+00:00'}
2025-03-04 15:42:31,389 INFO: ROLLBACK
2025-03-04 15:42:31,389 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:31] "GET /dashboard HTTP/1.1" 200 -
2025-03-04 15:42:31,425 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:31] "[36mGET /static/custom.css HTTP/1.1[0m" 304 -
2025-03-04 15:42:31,441 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:31] "[36mGET /static/custom.js HTTP/1.1[0m" 304 -
2025-03-04 15:42:31,543 INFO: 127.0.0.1 - - [04/Mar/2025 15:42:31] "[36mGET /static/favicon.ico HTTP/1.1[0m" 304 -
2025-03-04 15:42:35,159 INFO: Entering list_tasks route...
2025-03-04 15:42:35,161 DEBUG: Filters used: {'is_archived': False}
2025-03-04 15:42:35,163 DEBUG: Applying filters: {'is_archived': False}
2025-03-04 15:42:35,169 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-04 15:42:35,170 INFO: BEGIN (implicit)
2025-03-04 15:42:35,174 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-04 15:42:35,175 INFO: [generated in 0.00060s] {'param_1': 500, 'param_2': 0}
2025-03-04 15:42:35,248 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-04 15:42:35,248 INFO: [generated in 0.00020s] {}
2025-03-04 15:42:35,250 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-04 15:42:35,250 INFO: [generated in 0.00010s] {}
2025-03-04 15:42:35,251 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-04 15:42:35,251 INFO: [generated in 0.00009s] {}
