/**
 * Modals Module
 * Handles modal lifecycle events, dropdowns, contributor assignments, and field resets.
 */

/* ======================== Utility Functions ======================== */

/**
 * Fetches task details from the backend.
 * @param {string} taskId - The ID of the task to fetch.
 * @returns {Promise<object|null>} - The task data or null on failure.
 */
async function fetchTaskDetails(taskId) {
    try {
        const response = await fetch(`/api/tasks/${taskId}`);
        if (response.ok) {
            return await response.json();
        } else {
            console.error("Failed to fetch task details:", await response.text());
            return null;
        }
    } catch (error) {
        console.error("Error fetching task details:", error);
        alert("An unexpected error occurred while fetching task details.");
        return null;
    }
}

/**
 * Highlights a task row after it is saved or updated.
 * @param {string} taskId - ID of the task to highlight.
 */
function highlightTask(taskId) {
    const taskRow = document.getElementById(`task-${taskId}`);
    if (taskRow) {
        taskRow.classList.add("highlight");
        setTimeout(() => taskRow.classList.remove("highlight"), 2000);
    } else {
        console.warn("Task row not found for ID:", taskId);
    }
}

/* ======================== Dropdown Management ======================== */

/**
 * Initializes the Select2 dropdown for parent tasks.
 */
let dropdownInitialized = false;

window.initializeParentDropdown = function () {
    if (dropdownInitialized) {
        console.log("Parent dropdown already initialized. Skipping reinitialization.");
        return;
    }

    const parentDropdown = $("#taskParent");

    if (!parentDropdown.length) {
        console.error("Parent dropdown element not found.");
        alert("Parent dropdown could not be loaded. Please try refreshing the page.");
        return;
    }

    parentDropdown.select2({
        ajax: {
            url: "/tasks/available_tasks",
            dataType: "json",
            delay: 250,
            data: params => ({
                term: params.term || "",
                page: params.page || 1,
                limit: 30,
                task_type: $("#taskType").val(),
                exclude_task_id: $("#task-id").val() || null,
            }),
            processResults: (data, params) => ({
                results: data.tasks.map(task => ({
                    id: task.id,
                    text: `${task.name} (ID: ${task.id})`,
                })),
                pagination: { more: data.has_more },
            }),
            cache: true,
        },
        placeholder: "Parent task",
        allowClear: true,
        minimumInputLength: 0,
        width: "100%",
        theme: "bootstrap4",
        dropdownParent: $("#createTaskModal"),
    });

    console.log("Parent dropdown initialized successfully.");
    dropdownInitialized = true; // Set flag to avoid reinitialization
}

/**
 * Refreshes the Select2 dropdown when the task type changes.
 */
window.refreshParentDropdown = function () {
    console.log("Refreshing parent dropdown for task type:", $("#taskType").val());

    const parentDropdown = $("#taskParent");
    if (!parentDropdown.length) {
        console.error("Parent dropdown element not found for refreshing.");
        return;
    }

    parentDropdown.val(null).trigger("change");
    parentDropdown.select2("destroy");
    initializeParentDropdown();
}

/* ======================== Modal Lifecycle Events ======================== */

/**
 * Configures modal lifecycle events for the "Create/Edit Task" modal.
 */
window.setupModalLifecycleEvents = function () {
    const modalElement = $("#createTaskModal");

    if (!modalElement.length) {
        console.error("Modal element #createTaskModal not found.");
        return;
    }

    // Handle modal shown
    modalElement.on("shown.bs.modal", () => {
        console.log("Modal shown. Initializing dropdown.");
        initializeParentDropdown(); // Initialize the dropdown
    });

    // Handle modal hidden
    modalElement.on("hidden.bs.modal", () => {
        console.log("Modal hidden. Resetting fields.");

        resetModalFields(); // Reset modal fields
        $("body").removeClass("modal-open"); // Remove leftover classes
        $(".modal-backdrop").remove(); // Remove backdrop
        document.body.style.overflow = "auto"; // Restore scrolling
    });
}

/**
 * Configures modal lifecycle events for the "Create/Edit Task" modal.
 */
window.setupModalEvents = function () {
    const modalElement = document.getElementById("createTaskModal");
    const toggleButton = document.getElementById("toggleModalSize");

    if (!modalElement) {
        console.error("Modal element #createTaskModal not found.");
        return;
    }

    // Handle modal hidden events to highlight updated tasks
    modalElement.addEventListener("hidden.bs.modal", () => {
        const updatedTaskId = localStorage.getItem("updatedTaskId");
        if (updatedTaskId) {
            console.log("Highlighting updated task ID:", updatedTaskId);
            highlightTask(updatedTaskId);
            localStorage.removeItem("updatedTaskId");
        }
    });

    // Toggle modal size
    if (toggleButton) {
        toggleButton.addEventListener("click", () => {
            const isFullPage = modalElement.classList.toggle("full-page-modal");
            toggleButton.innerHTML = `<i class="bi bi-arrows-${isFullPage ? "collapse" : "angle-expand"}"></i>`;
            console.log(`Modal ${isFullPage ? "expanded" : "reset"} to default size.`);
        });
    }
}

/**
 * Resets all fields in the modal.
 */
window.resetModalFields = function () {
    const fieldsToReset = [
        "#task-id",
        "#taskTitle",
        "#taskDescription",
        "#taskProject",
        "#taskType",
        "#taskEstimation",
        "#taskParent",
        "#current-contributor",
    ];

    fieldsToReset.forEach(selector => {
        const element = document.querySelector(selector);
        if (element) {
            element.value = element.tagName === "SELECT" ? "" : "";
            if (element.tagName === "SELECT") $(element).trigger("change");
        }
    });

    const contributorSelect = document.getElementById("contributor-select");
    if (contributorSelect) contributorSelect.value = "";

    console.log("Modal fields reset.");
}

/* ======================== Modal Actions ======================== */

/**
 * Opens the "Create/Edit Task" modal and populates it with task data.
 * @param {number} taskId - The ID of the task to fetch.
 */

// Track currently opened task ID to prevent redundant calls
let currentlyOpenedTaskId = null;

window.openTaskModal = async function (taskId) {
    if (currentlyOpenedTaskId === taskId) {
        console.warn(`Task modal is already open for Task ID: ${taskId}`);
        return; // Prevent duplicate modal opens
    }

    currentlyOpenedTaskId = taskId; // Set the currently opened task ID

    console.log(`Opening task modal for Task ID: ${taskId}`);

    try {
        const task = await fetchTaskDetails(taskId);
        if (task) {
            populateTaskModal(task);
            console.log("Task details loaded successfully.");
        } else {
            alert("Failed to load task details. Please refresh the page and try again.");
            console.error("Task details could not be retrieved.");
        }
    } catch (error) {
        console.error("Error occurred while opening the task modal:", error);
        alert("An unexpected error occurred while loading the task. Please try again.");
    } finally {
        currentlyOpenedTaskId = null; // Reset after operation completes
    }
}

/**
 * Populates the modal fields with the provided task data.
 * @param {object} task - The task data to populate the modal fields.
 */
window.populateTaskModal = function (task) {
    console.log("Populating task modal with task data:", task);
    console.log("Task Parent ID:", task.parent_id);

    // Define the mapping between modal field IDs and task properties
    const modalFields = {
        "task-id": task.id,
        "taskTitle": task.name,
        "taskDescription": task.description,
        "taskProject": task.project_id || "",
        "taskType": task.task_type || "",
        "taskEstimation": task.story_points || 0,
        "taskParent": task.parent_id || "",
        "contributor-select": task.contributor_id || "",
    };

    // Populate each field in the modal
    Object.entries(modalFields).forEach(([fieldId, value]) => {
        const element = document.getElementById(fieldId);

        if (element) {
            if (fieldId === "taskParent" && $(element).hasClass("select2-hidden-accessible")) {
                // Check if the value exists in the dropdown options; if not, add it dynamically
                if (value && !$(element).find(`option[value="${value}"]`).length) {
                    const optionText = `Parent Task (ID: ${value})`; // Fallback display text
                    $(element).append(new Option(optionText, value, true, true));
                }
                $(element).val(value).trigger("change.select2"); // Update the Select2 dropdown
            } else if (element.tagName === "SELECT") {
                $(element).val(value).trigger("change"); // For other dropdowns
            } else {
                element.value = value; // For input fields
            }
        } else {
            console.warn(`Element with ID "${fieldId}" not found.`);
        }
    });

    // Update the modal title based on the operation (create or edit)
    document.getElementById("createTaskModalLabel").textContent = task.id ? "Edit Task" : "Create Task";

    // Show the modal
    const modalElement = document.getElementById("createTaskModal");
    new bootstrap.Modal(modalElement).show();
    console.log("Task modal is now visible.");
}

/**
 * Assigns contributors in the "Create/Edit Task" modal.
 */
window.setupContributorAssignment = function () {
    document.body.addEventListener("click", async event => {
        if (event.target.id === "assign-contributor-btn") {
            const taskId = document.getElementById("task-id")?.value;
            const contributorId = document.getElementById("contributor-select")?.value;

            if (!contributorId || !taskId) {
                alert("Task and contributor must be selected before assigning.");
                return;
            }

            try {
                const response = await fetch(`/tasks/${taskId}/assign_contributor`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ contributor_id: parseInt(contributorId, 10) }),
                });

                if (response.ok) {
                    console.log("Contributor assigned successfully.");
                    highlightTask(taskId);
                } else alert("Error assigning contributor.");
            } catch (error) {
                console.error("Error assigning contributor:", error);
                alert("An unexpected error occurred.");
            }
        }
    });
}

/**
 * Toggles the modal size between full-page and default size.
 */
window.toggleModalSize = function (modalElement) {
    const toggleButton = document.getElementById("toggleModalSize");

    if (!toggleButton) return;

    toggleButton.addEventListener("click", () => {
        const isFullPage = modalElement.classList.toggle("full-page-modal");
        toggleButton.innerHTML = `<i class="bi bi-arrows-${isFullPage ? "collapse" : "angle-expand"}"></i>`;
        console.log(`Modal ${isFullPage ? "expanded" : "reset"} to default size.`);
    });
}

/**
 * Resets the "Create Task" modal for creating a new task.
 */
window.initNewTaskModal = function () {
    console.log("Resetting modal for creating a new task.");

    const taskForm = document.getElementById("taskForm");
    const taskIdField = document.getElementById("task-id");
    const modalLabel = document.getElementById("createTaskModalLabel");

    if (taskForm) taskForm.reset();
    if (taskIdField) taskIdField.value = "";
    if (modalLabel) modalLabel.textContent = "Create Task";

    console.log("Modal reset complete.");
}

/**
 * Initializes the task modal logic.
 */
window.initializeTaskModal = function () {
    console.log("Initializing task modal.");

    const modalElement = document.getElementById("createTaskModal");
    if (modalElement) {
        const modalInstance = new bootstrap.Modal(modalElement);
        modalElement.addEventListener("hidden.bs.modal", () => {
            modalInstance.dispose(); // Properly dispose of the modal
        });
        window.modal = modalInstance; // Make it globally accessible if needed
    }

    setupModalLifecycleEvents();
}