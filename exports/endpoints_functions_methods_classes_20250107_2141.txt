File: ./run.py

File: ./list_all_routes.py

File: ./list_routes.py

File: ./init_db.py

File: ./scripts for documentation/new_generate_documentation.py
  Functions:
    - validate_dependencies
    - ensure_output_folder
    - get_timestamp
    - log_file_action
    - summarize_outputs
    - generate_module_interaction
    - generate_sequence_diagrams
    - generate_database_schema
    - generate_all_documentation

File: ./scripts for documentation/generate_zip_of_txt_projectfiles.py
  Functions:
    - should_exclude

File: ./scripts for documentation/WIP_autogenerate_uml_sequence_diagrams.py
  Functions:
    - ensure_folder
      Docstring: Ensure the output folder exists.
    - get_timestamp
      Docstring: Generate a timestamp for filenames.
    - log_file_action
      Docstring: Log actions performed on files.
    - render_plantuml
      Docstring: Render the PlantUML diagram.
    - parse_logs
      Docstring: Parse structured logs to extract interactions.
Expected log format:
[TIMESTAMP] Caller=Frontend, Callee=Backend, Action=POST /tasks/archive/<task_id>, File=routes.py
    - parse_routes
      Docstring: Parse Flask route definitions to infer interactions.
Example route:
@bp.route("/tasks/archive/<int:task_id>", methods=["POST"])
def archive_task():
    - generate_puml
      Docstring: Generate a .puml file for the given interaction steps.
    - generate_sequence_diagrams
      Docstring: Generate sequence diagrams by analyzing logs and routes.

File: ./scripts for documentation/WIP_newnew_generate_documentation.py
  Functions:
    - validate_dependencies
    - ensure_output_folder
    - get_timestamp
    - log_file_action
    - summarize_outputs
    - generate_module_interaction
    - generate_sequence_diagrams
    - generate_database_schema
    - generate_all_documentation

File: ./scripts for documentation/WIP_generate_documentation.py
  Functions:
    - validate_dependencies
      Docstring: Ensure required tools (pyreverse, dot, plantuml) are installed and accessible in the PATH.
    - ensure_output_folder
      Docstring: Ensure the output folder exists; create it if it does not.
    - get_timestamp
      Docstring: Generate a timestamp for filenames.
    - log_file_action
      Docstring: Log actions performed on files (move, rename, generate, etc.).
    - summarize_outputs
      Docstring: Print a summary of all generated files saved in the output folder.
    - find_dot_files
      Docstring: Recursively search for .dot files and log their locations.
    - generate_module_interaction
      Docstring: Generate module interaction diagrams using Pyreverse and save the output in the specified folder.
    - generate_database_schema
      Docstring: Extract and save the database schema from the PostgreSQL database.
    - generate_sequence_diagrams
      Docstring: Generate UML sequence diagrams for specified interactions.
    - parse_logs_for_sequence
      Docstring: Parse logs and generate a sequence diagram from file interactions.
    - generate_all_documentation
      Docstring: Main function to generate all documentation artifacts for the project.

File: ./scripts for documentation/generate_project_structure.py
  Functions:
    - generate_project_structure

File: ./scripts for documentation/create_list_of_all_endp_func_classes_jsfunction_jsfiles.py
  Functions:
    - parse_python_file
      Docstring: Parse a Python file and extract endpoints, functions, classes, and their docstrings.
    - parse_javascript_file
      Docstring: Parse a JavaScript file and extract functions and comments.
    - scan_project
      Docstring: Scan the project directory for Python and JavaScript files, extract their structure and docstrings, skipping excluded folders and files.
    - save_results_to_file
      Docstring: Save the parsed results to a file.

File: ./scripts for documentation/Convert_JSON_to_DOT2.py
  Functions:
    - prompt_for_file
      Docstring: Prompt the user for a file name and return the full path.
    - generate_dot_file
      Docstring: Convert JSON data to a DOT file for visualization.
    - write_edges

File: ./scripts for documentation/Convert_JSON_to_DOT.py
  Functions:
    - json_to_dot
      Docstring: Convert a JSON representation of a directory structure into a DOT file.
    - add_nodes_and_edges
      Docstring: Recursively add nodes and edges to the DOT graph.

File: ./scripts for documentation/generate_folder_structure.py
  Functions:
    - generate_project_structure
      Docstring: Generate a textual representation of the project's folder structure as a tree, excluding files.

File: ./scripts for documentation/generate_folder_structure_incl_files.py
  Functions:
    - generate_project_structure
      Docstring: Generate a textual and JSON representation of the project's folder and file structure.
    - build_tree
    - write_text_tree

File: ./scripts for documentation/generate_list_all_endp_func_meth.py
  Functions:
    - parse_file
      Docstring: Parse a Python file and extract endpoints, functions, classes, and their docstrings.
    - scan_project
      Docstring: Scan the Python project directory for files, extract their structure and docstrings, skipping excluded folders and files.
    - save_results_to_file
      Docstring: Save the parsed results to a file.

File: ./scripts for documentation/create_database_schema/run_export_schema.py

File: ./scripts for documentation/create_database_schema/export_schema.py
  Endpoints:
    - constrained_columns (Methods: get)
    - nullable (Methods: get)
    - default (Methods: get)
    - unique (Methods: get)
  Functions:
    - export_database_schema
      Docstring: Export database schema in the specified format.

File: ./app/__init__.py
  Endpoints:
    - ENV (Methods: get)
    - ENV (Methods: get)
    - SQLALCHEMY_RECORD_QUERIES (Methods: get)
  Functions:
    - create_app
      Docstring: Application factory function to initialize the Flask app.

File: ./app/tasks/models.py
  Functions:
    - __init__
    - validate_task_changes
      Docstring: Validates changes to 'parent_id' and 'task_type'.
Ensures hierarchy validity and checks for circular references.
    - _validate_hierarchy_change
      Docstring: Validates hierarchy changes based on task_type and parent_id.
This method avoids setting attributes and focuses only on validation.
    - check_circular_reference
      Docstring: Iteratively checks for circular references in the task hierarchy.
Prevents stack overflow on deep hierarchies.
    - to_dict
    - validate_hierarchy
    - save
      Docstring: Saves the task to the database after validation.

Raises:
    ValueError: If validation fails.
    - delete_with_children
      Docstring: Deletes the task and optionally its children if 'confirm' is True.
    - archive
      Docstring: Archives the task and its subtasks.
    - unarchive
      Docstring: Unarchives the task and its subtasks.
    - mark_completed
      Docstring: Marks the task as completed.
    - to_dict_with_children
      Docstring: Converts the Task instance into a dictionary, including its children.
Ensures that the hierarchy is serialized properly.
    - __repr__
  Classes:
    - Task
      - __init__
      - validate_task_changes
        Docstring: Validates changes to 'parent_id' and 'task_type'.
Ensures hierarchy validity and checks for circular references.
      - _validate_hierarchy_change
        Docstring: Validates hierarchy changes based on task_type and parent_id.
This method avoids setting attributes and focuses only on validation.
      - check_circular_reference
        Docstring: Iteratively checks for circular references in the task hierarchy.
Prevents stack overflow on deep hierarchies.
      - to_dict
      - validate_hierarchy
      - save
        Docstring: Saves the task to the database after validation.

Raises:
    ValueError: If validation fails.
      - delete_with_children
        Docstring: Deletes the task and optionally its children if 'confirm' is True.
      - archive
        Docstring: Archives the task and its subtasks.
      - unarchive
        Docstring: Unarchives the task and its subtasks.
      - mark_completed
        Docstring: Marks the task as completed.
      - to_dict_with_children
        Docstring: Converts the Task instance into a dictionary, including its children.
Ensures that the hierarchy is serialized properly.
      - __repr__

File: ./app/tasks/__init__.py

File: ./app/tasks/utils.py
  Functions:
    - filter_tasks
      Docstring: Dynamically filters tasks based on criteria provided in a dictionary, 
with optimized loading for related models.

Args:
    filters (dict): A dictionary of filtering criteria.
        Supported keys:
        - "is_archived" (bool): Filter by archived status.
        - "project_id" (int): Filter by project ID.
        - "task_type" (str): Filter by task type.
        - "completion_status" (str): Filter by completion status ("completed" or "incomplete").
        - "exclude_task_id" (int): Exclude a specific task by ID.
        - "search_term" (str): Perform a search on task names.

Returns:
    Query: SQLAlchemy query object with filters applied.
    - calculate_total_story_points
      Docstring: Calculates the total story points for a project.
    - calculate_completed_story_points
      Docstring: Calculates the total completed story points for a project.
    - calculate_completion_percentage
      Docstring: Calculates the completion percentage of a project.
    - delete_project_and_tasks
      Docstring: Deletes a project and all its associated tasks.
    - contributor_has_assigned_tasks
      Docstring: Checks if a contributor has tasks assigned in a project.
    - fetch_task_with_logging
      Docstring: Helper function to fetch a task with logging.
    - archive_task
      Docstring: Archive a task and all its subtasks, preventing infinite recursion.

Args:
    task (Task): The task to be archived.
    visited (set): A set of task IDs already processed (for recursion guard).
    - validate_hierarchy
      Docstring: Validates the hierarchy of a task to ensure valid parent-child relationships.

Args:
    task (Task): The task instance to validate.

Raises:
    ValueError: If the hierarchy rules are violated.
    - fetch_all_tasks
      Docstring: Fetches all tasks for a specific project, including project, contributor, and child task relationships.

Args:
    project_id (int): The ID of the project whose tasks need to be fetched.

Returns:
    list: A list of Task objects with their relationships loaded.
    - fetch_all_tasks_as_dicts
      Docstring: Fetches a list of tasks based on optional filters and serializes them into dictionaries.

Args:
    filters (dict, optional): A dictionary of filters to apply to the task query.

Returns:
    list[dict]: A list of serialized task dictionaries.
    - fetch_task_as_dict
      Docstring: Fetches a task by ID and returns it as a dictionary.

Args:
    task_id (int): The ID of the task to fetch.

Returns:
    dict: A dictionary representation of the task.

Raises:
    ValueError: If the task is not found.
    - to_dict
      Docstring: Converts the Task object into a dictionary for JSON responses.

Returns:
    dict: A dictionary representation of the Task object.
    - generate_page_numbers
      Docstring: Generates a list of page numbers for pagination, including ellipses.

Args:
    current_page (int): The current page number.
    total_pages (int): Total number of pages.
    left_edge (int): Number of pages to show at the left edge.
    right_edge (int): Number of pages to show at the right edge.
    left_current (int): Number of pages to show to the left of the current page.
    right_current (int): Number of pages to show to the right of the current page.

Returns:
    list: A list of page numbers or None for ellipses.
  Classes:
    - TaskService
      - filter_tasks
        Docstring: Dynamically filters tasks based on criteria provided in a dictionary, 
with optimized loading for related models.

Args:
    filters (dict): A dictionary of filtering criteria.
        Supported keys:
        - "is_archived" (bool): Filter by archived status.
        - "project_id" (int): Filter by project ID.
        - "task_type" (str): Filter by task type.
        - "completion_status" (str): Filter by completion status ("completed" or "incomplete").
        - "exclude_task_id" (int): Exclude a specific task by ID.
        - "search_term" (str): Perform a search on task names.

Returns:
    Query: SQLAlchemy query object with filters applied.
      - calculate_total_story_points
        Docstring: Calculates the total story points for a project.
      - calculate_completed_story_points
        Docstring: Calculates the total completed story points for a project.
      - calculate_completion_percentage
        Docstring: Calculates the completion percentage of a project.
      - delete_project_and_tasks
        Docstring: Deletes a project and all its associated tasks.
      - contributor_has_assigned_tasks
        Docstring: Checks if a contributor has tasks assigned in a project.
      - fetch_task_with_logging
        Docstring: Helper function to fetch a task with logging.
      - archive_task
        Docstring: Archive a task and all its subtasks, preventing infinite recursion.

Args:
    task (Task): The task to be archived.
    visited (set): A set of task IDs already processed (for recursion guard).
      - validate_hierarchy
        Docstring: Validates the hierarchy of a task to ensure valid parent-child relationships.

Args:
    task (Task): The task instance to validate.

Raises:
    ValueError: If the hierarchy rules are violated.
      - fetch_all_tasks
        Docstring: Fetches all tasks for a specific project, including project, contributor, and child task relationships.

Args:
    project_id (int): The ID of the project whose tasks need to be fetched.

Returns:
    list: A list of Task objects with their relationships loaded.
      - fetch_all_tasks_as_dicts
        Docstring: Fetches a list of tasks based on optional filters and serializes them into dictionaries.

Args:
    filters (dict, optional): A dictionary of filters to apply to the task query.

Returns:
    list[dict]: A list of serialized task dictionaries.
      - fetch_task_as_dict
        Docstring: Fetches a task by ID and returns it as a dictionary.

Args:
    task_id (int): The ID of the task to fetch.

Returns:
    dict: A dictionary representation of the task.

Raises:
    ValueError: If the task is not found.
      - to_dict
        Docstring: Converts the Task object into a dictionary for JSON responses.

Returns:
    dict: A dictionary representation of the Task object.
      - generate_page_numbers
        Docstring: Generates a list of page numbers for pagination, including ellipses.

Args:
    current_page (int): The current page number.
    total_pages (int): Total number of pages.
    left_edge (int): Number of pages to show at the left edge.
    right_edge (int): Number of pages to show at the right edge.
    left_current (int): Number of pages to show to the left of the current page.
    right_current (int): Number of pages to show to the right of the current page.

Returns:
    list: A list of page numbers or None for ellipses.

File: ./app/tasks/routes.py
  Endpoints:
    - / (Methods: route)
    - /details/<int:task_id> (Methods: route)
    - /api/projects/<int:project_id>/contributors (Methods: route)
    - /<int:task_id>/assign_contributor (Methods: route)
    - /archive/<int:task_id> (Methods: route)
    - /unarchive/<int:task_id> (Methods: route)
    - /disconnect/<int:task_id> (Methods: route)
    - /available_tasks (Methods: route)
    - /assign_parent/<int:task_id> (Methods: route)
    - /subtasks<int:task_id> (Methods: route)
    - /assign_subtasks/<int:task_id> (Methods: route)
    - /reorder_subtasks (Methods: route)
    - /batch_update/ (Methods: route)
    - /hierarchy/<int:project_id> (Methods: route)
    - /search/ (Methods: route)
    - project_id (Methods: get)
    - contributor_id (Methods: get)
    - task_type (Methods: get)
    - completion_status (Methods: get)
    - page (Methods: get)
    - per_page (Methods: get)
    - parent_task_id (Methods: get)
    - ordered_ids (Methods: get)
    - task_ids (Methods: get)
    - action (Methods: get)
    - q (Methods: get)
    - contributor_id (Methods: get)
    - exclude_task_id (Methods: get)
    - task_type (Methods: get)
    - search (Methods: get)
    - project_id (Methods: get)
    - parent_id (Methods: get)
    - show_archived (Methods: get)
    - hierarchical (Methods: get)
  Functions:
    - list_tasks
      Docstring: List tasks globally with filtering, optional hierarchical ordering, and pagination.
    - task_details
      Docstring: Fetch and display details for a specific task.
    - get_project_contributors
      Docstring: Fetch contributors for a specific project.
    - assign_contributor
      Docstring: Assign a contributor to a task.
    - archive_task
      Docstring: Archive a task and its subtasks.
    - unarchive_task
      Docstring: Unarchive a task and its subtasks.
    - disconnect_subtask
      Docstring: Remove parent reference from a subtask.
    - available_tasks
      Docstring: Fetch a list of available tasks, excluding the specified one,
while enforcing valid parent-child hierarchy rules.
    - assign_parent_task
      Docstring: Assign a parent task to an existing task.
    - get_subtasks
      Docstring: Fetch subtasks for a given task.
    - assign_subtasks
      Docstring: Assign multiple subtasks to a parent task.
    - reorder_subtasks
      Docstring: Reorder subtasks globally or reassign them to a different parent.
    - batch_update_tasks
      Docstring: Perform batch updates on tasks.
    - task_hierarchy
      Docstring: Fetch the task hierarchy for a specific project.
    - search_tasks
      Docstring: Search tasks by name.
    - build_hierarchy

File: ./app/forms/__init__.py

File: ./app/forms/forms.py
  Functions:
    - get_task_model
    - validate
      Docstring: Override the default validate method to include logging.
    - validate_parent_id
    - validate_new_parent_id
    - validate_parent_id
  Classes:
    - ProjectForm
    - AddContributorForm
      - validate
        Docstring: Override the default validate method to include logging.
    - ProgressEditForm
    - AddProgressForm
    - DeleteProjectForm
    - TaskForm
      - validate_parent_id
    - ArchiveTaskForm
    - FilterTasksForm
    - ReassignSubtaskForm
      - validate_new_parent_id
    - AssignSubtaskForm
      - validate_parent_id

File: ./app/charts/contributor_breakdown_chart.py
  Functions:
    - generate_contributor_breakdown_chart
    - format_autopct

File: ./app/charts/__init__.py

File: ./app/charts/burnup_chart.py
  Functions:
    - generate_burnup_chart

File: ./app/charts/project_breakdown_chart.py
  Functions:
    - generate_project_breakdown_chart
    - format_autopct

File: ./app/utils/logging_config.py
  Functions:
    - setup_logging
      Docstring: Configure logging for the application, including rotating file logs and
development/production environment adjustments.

File: ./app/utils/__init__.py

File: ./app/utils/common_utils.py
  Functions:
    - log_interaction
      Docstring: Logs interaction details for debugging and sequence generation.
        :param caller: The calling entity or module.
        :param callee: The receiving entity or module.
        :param action: The action being logged.
        :param data: Optional data payload.
        :param result: Optional result of the action.
        :param error: Optional error message.
    - count_ongoing_projects
      Docstring: Count ongoing projects based on their story points completion.
    - count_completed_projects
      Docstring: Count completed projects where all story points are finished.
    - count_unstarted_projects
      Docstring: Count unstarted projects where no story points are completed.
    - count_all_projects
      Docstring: Count all projects in the database.
    - count_all_contributors
      Docstring: Count all contributors in the database.
    - count_assigned_contributors
      Docstring: Count contributors assigned to at least one project.
    - count_unassigned_contributors
      Docstring: Count contributors not assigned to any project.

File: ./app/models/models.py
  Functions:
    - contributors
      Docstring: Define the many-to-many relationship for contributors dynamically.
    - add_contributor
      Docstring: Add a contributor to the project.
    - remove_contributor
      Docstring: Remove a contributor from the project.
    - update_story_points
      Docstring: Recalculate the completed story points for the project.
    - total_story_points
      Docstring: Fetch the total story points for all tasks associated with this project.
    - completion_percentage
      Docstring: Calculate the completion percentage of the project based on story points.
    - __repr__
    - __repr__
  Classes:
    - Project
      Docstring: Represents a project entity.
      - contributors
        Docstring: Define the many-to-many relationship for contributors dynamically.
      - add_contributor
        Docstring: Add a contributor to the project.
      - remove_contributor
        Docstring: Remove a contributor from the project.
      - update_story_points
        Docstring: Recalculate the completed story points for the project.
      - total_story_points
        Docstring: Fetch the total story points for all tasks associated with this project.
      - completion_percentage
        Docstring: Calculate the completion percentage of the project based on story points.
      - __repr__
    - Contributor
      Docstring: Represents a contributor entity.
      - __repr__

File: ./app/models/__init__.py

File: ./app/extensions/db.py

File: ./app/extensions/__init__.py

File: ./app/static/__init__.py

File: ./app/static/custom.js

File: ./app/static/js/tasks_table_interactions_divgrid.js
  JavaScript Functions:
    - initializeToggleStates
    - setupModalLifecycleEvents
    - to
    - updateAriaHidden
    - manageFocus
    - resetModalSize
    - resetModalFields
    - initializeParentDropdown
    - refreshParentDropdown
    - initTableSorter
    - toggleChildRows
    - initToggleDetails
    - initDragAndDrop
    - handleDragEnd
  Comments:
    /**
 * Initializes toggle arrows to match the visibility state of child rows.
 */
    // Skip if no icon or child rows
    // Check visibility of the first child row
    // Update the toggle icon to reflect the state
    /**
 * Setup modal lifecycle events for the Create/Edit Task modal.
 */
    // Utility function to update aria-hidden
    // Ensure consistent focus management
    // Defocus modal to avoid interference
    // Event: Modal shown
    // Ensure dropdown is ready
    // Reset size if toggled
    // Event: Modal hidden
    // Handle Select2 dropdown open/close events
    // Ensure aria-hidden is correct
    // Retain accessibility state
    /**
 * Reset the modal size to its default state.
 * @param {jQuery} modalElement - The modal element.
 */
    /**
 * Clear and reset all input fields in the modal.
 */
    // Reset dropdowns
    // Reset text fields
    // Add event listener for assigning contributors
    // Debugging
    // Debugging
    // Debugging
    // Convert contributorId to an integer
    // Include the CSRF token in the headers
    // Using jQuery selector for Select2
    /**
     * Initializes the Select2 dropdown with AJAX support and preloaded tasks.
     */
    // Remove aria-hidden dynamically when the modal is shown
    // Restore aria-hidden when the modal is hidden
    // Current selection or fallback to empty
    // Destroy and clear
    // Append options
    // Initialize Select2
    // Ensure None stays on top
    // Ensure None is selectable when deselected
    /**
     * Refreshes the Select2 dropdown when the task type changes.
     */
    // Clear and reload the dropdown with the new task type
    // Clear selection
    // Destroy the existing instance
    // Reinitialize
    // Initialize Select2 when the modal is shown
    // Event listener for task type dropdown
    // Initialize additional functionality
    // Initialize toggle arrow states to match child row visibility
    /**
 * Initializes TableSorter for task table.
 */
    /**
 * Toggles visibility of child rows (and their descendants) by hiding or showing <tbody>.
 * 
 * @param {string} parentId - The ID of the parent task.
 * @param {boolean} show - Whether to show or hide the child rows.
 */
    /**
 * Initializes toggle functionality for parent-child rows.
 */
    // Check current visibility of the first child row
    // Toggle child row visibility
    // Update the toggle icon
    /**
 * Initializes drag-and-drop functionality using SortableJS.
 */
    /**
 * Handles the drag-and-drop reordering event.
 */
    /**
 * Prevent click events on the "Open" link from propagating to other handlers.
 */

File: ./app/static/js/task_actions.js
  JavaScript Functions:
    - deleteTask
  Comments:
    // task_actions.js
    /**
 * Task Actions Module
 * Handles task deletion and task modal interactions using SweetAlert2.
 */
    // SweetAlert2 Delete Task Confirmation
    /**
     * Attach event listeners to delete task buttons.
     * Confirms task deletion and handles backend calls to delete tasks.
     */
    /**
     * Sends a DELETE request to the backend to delete a task.
     * @param {number} taskId - The ID of the task to delete.
     * @param {boolean} deleteChildren - Whether to delete the task's child tasks.
     */
    // Add CSRF token header
    // Reload to update task list
    /**
     * Handles clicks on task items to populate and show the task modal.
     * Fetches task details and pre-fills the modal for editing.
     */
    // Populate modal fields
    // Update modal title
    // Show the modal

File: ./app/static/js/init.js
  Comments:
    // init.js
    /**
 * Initialization Module
 * Sets up tooltips and manages modal close events.
 */
    /**
     * Initialize global CSRF token
     */
    /**
     * Initialize Bootstrap tooltips on all elements with the data-bs-toggle attribute.
     */
    // Ensure modalElement exists
    // Initialize and assign to global scope
    /**
     * Reset state and highlight updated tasks when the modal is closed.
     */

File: ./app/static/js/tasks_table_interactions.js
  JavaScript Functions:
    - initializeToggleStates
    - refreshTaskRow
    - initializeRowLevels
    - getHierarchyLevel
    - setupModalLifecycleEvents
    - to
    - updateAriaHidden
    - manageFocus
    - resetModalSize
    - resetModalFields
    - initializeParentDropdown
    - refreshParentDropdown
    - initTableSorter
    - initToggleDetails
    - toggleChildRows
    - initDragAndDrop
    - handleDragEnd
  Comments:
    /**
 * Initializes toggle arrows to match the visibility state of child rows.
 */
    // Skip if no icon or child rows
    // Check visibility of the first child row
    // Update the toggle icon to reflect the state
    /**
 * Refresh the specific row from the backend.
 * Updates contributor and other relevant fields dynamically.
 * 
 * @param {number} taskId - The ID of the task to refresh.
 */
    // Update the contributor column directly
    /**
 * Adds a data-level attribute to each row based on its hierarchy.
 */
    /**
 * Determines the hierarchy level of a task row.
 * @param {HTMLElement} row - The task row.
 * @returns {number} - The hierarchy level (1 for top-level, 2 for nested, etc.).
 */
    // Traverse up the hierarchy to calculate the level
    /**
 * Setup modal lifecycle events for the Create/Edit Task modal.
 */
    // Utility function to update aria-hidden
    // Ensure consistent focus management
    // Defocus modal to avoid interference
    // Event: Modal shown
    // Ensure dropdown is ready
    // Reset size if toggled
    // Event: Modal hidden
    // Handle Select2 dropdown open/close events
    // Ensure aria-hidden is correct
    // Retain accessibility state
    /**
 * Reset the modal size to its default state.
 * @param {jQuery} modalElement - The modal element.
 */
    /**
 * Clear and reset all input fields in the modal.
 */
    // Reset dropdowns
    // Reset text fields
    // Add event listener for assigning contributors
    // Debug log
    // Display the success message
    // Highlight the updated task row
    // Fetch and update the row dynamically
    // Update the contributor column in the task table
    // Debug log
    // Debug log
    // Using jQuery selector for Select2
    /**
     * Initializes the Select2 dropdown with AJAX support and preloaded tasks.
     */
    // Remove aria-hidden dynamically when the modal is shown
    // Restore aria-hidden when the modal is hidden
    // Current selection or fallback to empty
    // Destroy and clear
    // Append options
    // Initialize Select2
    // Ensure None stays on top
    // Ensure None is selectable when deselected
    /**
     * Refreshes the Select2 dropdown when the task type changes.
     */
    // Clear and reload the dropdown with the new task type
    // Clear selection
    // Destroy the existing instance
    // Reinitialize
    // Initialize Select2 when the modal is shown
    // Event listener for task type dropdown
    // Existing initializations...
    // Add hierarchy levels to rows
    // Ensure toggle states are synced
    // Initialize additional functionality
    // Initialize toggle arrow states to match child row visibility
    /**
 * Initializes TableSorter for task table.
 */
    /**
 * Initializes toggle functionality for parent-child rows.
 */
    // Check current visibility of the first child row
    // Toggle child row visibility
    // Update the toggle icon
    /**
 * Recursively toggles visibility of child rows.
 * Updates icons and ensures consistency across nested tasks.
 * 
 * @param {string} parentId - The ID of the parent task.
 * @param {boolean} show - Whether to show or hide the child rows.
 */
    // Select all child rows that belong to the given parent
    // Toggle visibility of the row
    // Handle icons for the row
    // Show "down" arrow if visible
    // Show "right" arrow if hidden
    // Recursively toggle nested child rows if any
    /**
 * Initializes drag-and-drop functionality using SortableJS.
 */
    /**
 * Handles the drag-and-drop reordering event.
 */
    /**
 * Prevent click events on the "Open" link from propagating to other handlers.
 */

File: ./app/static/js/tasks_table_interactions_last_version_with_select2.js
  JavaScript Functions:
    - initializeParentDropdown
    - refreshParentDropdown
    - initTableSorter
    - initToggleDetails
    - toggleChildRows
    - initDragAndDrop
    - handleDragEnd
  Comments:
    // Using jQuery selector for Select2
    /**
     * Initializes the Select2 dropdown with AJAX support and preloaded tasks.
     */
    // Remove aria-hidden dynamically when the modal is shown
    // Restore aria-hidden when the modal is hidden
    // Current selection or fallback to empty
    // Destroy and clear
    // Append options
    // Initialize Select2
    // Ensure None stays on top
    // Ensure None is selectable when deselected
    /**
     * Refreshes the Select2 dropdown when the task type changes.
     */
    // Clear and reload the dropdown with the new task type
    // Clear selection
    // Destroy the existing instance
    // Reinitialize
    // Initialize Select2 when the modal is shown
    // Event listener for task type dropdown
    // Initialize additional functionality
    /**
 * Initializes TableSorter for task table.
 */
    /**
 * Initializes toggle functionality for parent-child rows.
 */
    /**
 * Recursively toggles visibility of child rows.
 */
    /**
 * Initializes drag-and-drop functionality using SortableJS.
 */
    /**
 * Handles the drag-and-drop reordering event.
 */
    /**
 * Prevent click events on the "Open" link from propagating to other handlers.
 */

File: ./app/static/js/filters.js
  Comments:
    // filters.js
    /**
 * Filters Module
 * Handles dynamic filtering and clearing of task filters.
 */
    /**
     * Attach event listeners to filter dropdowns to dynamically update the task list.
     */
    // Update URL and reload with new filter
    /**
     * Attach an event listener to the clear filters button to reset filters.
     */
    // Redirect to the unfiltered task list

File: ./app/static/js/tasks_table_interactions_working_version_with_select2.js
  JavaScript Functions:
    - initializeParentDropdown
    - refreshParentDropdown
    - initTableSorter
    - initToggleDetails
    - toggleChildRows
    - initDragAndDrop
    - handleDragEnd
  Comments:
    // Using jQuery selector for Select2
    /**
     * Initializes the Select2 dropdown with AJAX support for dynamic searching.
     * Pre-populates the dropdown with up to 30 tasks by default.
     */
    // Preload tasks before initializing Select2
    // Add "None" option as default
    // Debugging log
    // Populate Select2 with preloaded options
    // Clear existing options
    // Add options to dropdown
    // Refresh Select2 UI
    // Destroy any existing Select2 instance
    // Adjust dropdown width
    // Debounce AJAX requests
    // User input or empty string for initial load
    // Ensure proper positioning in modal
    /**
     * Refreshes the Select2 dropdown when the task type changes.
     */
    // Clear and reload the dropdown with the new task type
    // Clear selection
    // Destroy the existing instance
    // Reinitialize
    // Initialize Select2 when the modal is shown
    // Event listener for task type dropdown
    // Initialize additional functionality
    /**
 * Initializes TableSorter for task table.
 */
    /**
 * Initializes toggle functionality for parent-child rows.
 */
    /**
 * Recursively toggles visibility of child rows.
 * @param {string} parentId - ID of the parent task.
 * @param {boolean} show - Whether to show or hide the rows.
 */
    /**
 * Initializes drag-and-drop functionality using SortableJS.
 */
    /**
 * Handles the drag-and-drop reordering event.
 * @param {Object} event - The SortableJS event object.
 */
    /**
 * Prevent click events on the "Open" link from propagating to other handlers.
 */

File: ./app/static/js/task_modal.js
  JavaScript Functions:
    - initSaveTaskButton
    - getCsrfToken
  Comments:
    // task_modal.js
    /**
 * Task Modal Module
 * Manages task creation and editing using a Bootstrap modal.
 */
    // Store the modal element in a variable to avoid duplication
    // Event listener for modal lifecycle events
    // Adjust delay if necessary
    /**
     * Toggle the modal's fullscreen mode when the toggle button is clicked.
     */
    /**
     * Initialize Save Task button functionality.
     */
    /**
 * Initializes the Save Task button to handle task creation and updates.
 * @param {Object} modal - Bootstrap modal instance.
 */
    // Gather form data
    // Convert FormData to a plain object
    // Ensure 'name' is derived from 'title'
    // Extract task ID from the payload (if available)
    // Set correct content type
    // Add CSRF token dynamically
    // Send JSON payload
    // Store updatedTaskId in localStorage
    // Close the modal
    // Optionally, reload the page or update the UI
    // Uncomment if you want to refresh the page
    /**
 * Retrieves the CSRF token from the meta tag in the HTML head.
 * @returns {string} CSRF token value.
 */

File: ./app/routes/__init__.py

File: ./app/routes/api_routes.py
  Endpoints:
    - /calculate_completion_percentage/<int:project_id> (Methods: route)
    - /delete_project/<int:project_id> (Methods: route)
    - /tasks/<int:task_id> (Methods: route)
    - /tasks (Methods: route)
    - /tasks/delete/<int:task_id> (Methods: route)
    - name (Methods: get)
    - title (Methods: get)
    - id (Methods: get)
    - task_id (Methods: get)
    - description (Methods: get)
    - contributor_id (Methods: get)
    - completed (Methods: get)
    - story_points (Methods: get)
    - parent_id (Methods: get)
    - contributor_id (Methods: get)
    - description (Methods: get)
    - contributor_id (Methods: get)
    - completed (Methods: get)
    - sort_order (Methods: get)
    - confirm_children (Methods: get)
  Functions:
    - calculate_completion_percentage_api
      Docstring: API endpoint to calculate the completion percentage of a project.
    - api_delete_project
      Docstring: API endpoint to delete a project and its related tasks.
    - get_task_details
      Docstring: Fetch task details by ID and return as JSON using the TaskService utility method.
    - validate_task_payload
      Docstring: Validates task payload for required fields and hierarchy rules.
    - save_task
      Docstring: Create a new task or update an existing one.
    - delete_task
      Docstring: API endpoint to delete a task. Optionally, delete its child tasks as well.
:param task_id: ID of the task to be deleted.
:return: JSON response with success or error message.

File: ./app/routes/page_routes.py
  Endpoints:
    - / (Methods: route)
    - /base (Methods: route)
    - /test-flash (Methods: route)
    - /dashboard (Methods: route)
    - /project/<project_name> (Methods: route)
    - /create_project (Methods: route)
    - /add_contributor/<project_name> (Methods: route)
    - /remove_contributor/<project_name> (Methods: route)
    - /delete_project/<int:project_id> (Methods: route)
    - contributor_name (Methods: get)
    - contributor_name (Methods: get)
  Functions:
    - index
      Docstring: Renders the homepage with project details and a form to add new projects.
    - base
      Docstring: Renders the base.html template.
    - test_flash
      Docstring: Adds a test flash message and redirects to the base page.
    - dashboard
      Docstring: Renders the dashboard page with project and contributor stats and charts.
    - project
      Docstring: Displays project details and allows interaction such as adding contributors or viewing charts.
    - create_project
      Docstring: Handles the creation of a new project.
    - add_contributor
      Docstring: Adds a contributor to a specified project. Logs all interactions for tracing and debugging.
    - remove_contributor
      Docstring: Removes a contributor from a specified project. Prevents removal if the contributor has assigned tasks.
Logs all interactions for tracing and debugging.

:param project_name: The name of the project from which the contributor will be removed.
    - delete_project
      Docstring: Deletes a project and all its tasks. Handles errors during deletion.

