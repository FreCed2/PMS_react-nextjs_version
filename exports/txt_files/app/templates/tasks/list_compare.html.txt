{% extends "base.html" %}

{% block title %}Global Tasks{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1 class="text-center">Global Tasks</h1>

    <!-- Filters Section -->
    <div class="row mb-3">
        <div class="col-md-3">
            <label for="project_filter">Filter by Project</label>
            <select id="project_filter" class="form-control">
                <option value="">All Projects</option>
                {% for project in projects %}
                <option value="{{ project.id }}" {% if filters.project_id == project.id %}selected{% endif %}>
                    {{ project.name }}
                </option>
                {% endfor %}
            </select>
        </div>
        <div class="col-md-3">
            <label for="task_type_filter">Filter by Task Type</label>
            <select id="task_type_filter" class="form-control">
                {% for type in task_types %}
                <option value="{{ type }}" {% if filters.task_type == type %}selected{% endif %}>
                    {{ type }}
                </option>
                {% endfor %}
            </select>
        </div>
        <div class="col-md-3">
            <label for="completion_status_filter">Filter by Status</label>
            <select id="completion_status_filter" class="form-control">
                <option value="">All</option>
                <option value="completed" {% if filters.completion_status == "completed" %}selected{% endif %}>
                    Completed
                </option>
                <option value="in_progress" {% if filters.completion_status == "in_progress" %}selected{% endif %}>
                    In Progress
                </option>
            </select>
        </div>
        <div class="col-md-3 d-flex align-items-end">
            <button id="clear_filters" class="btn btn-secondary w-100">Clear Filters</button>
        </div>
    </div>

    <!-- New Task Button -->
    <div>
        <button class="btn btn-success mb-3" id="newTaskButton" data-bs-toggle="modal" data-bs-target="#createTaskModal">
            <i class="bi bi-plus"></i> New Task
        </button>
    </div>

    <!-- Task List Table -->
    <table class="table table-hover">
        <thead>
            <tr>
                <th><input type="checkbox" id="selectAll"></th>
                <th>Toggle</th>
                <th>Task Title</th>
                <th>Project</th>
                <th>Assigned To</th>
                <th>Estimate</th>
                <th>Task Type</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            {% macro render_task(task, tasks, depth=0) %}
            <tr id="task-{{ task.id }}"
                class="task-row {% if task.task_type == 'Subtask' %}subtask-row{% elif task.task_type == 'User Story' %}user-story-row{% endif %}"
                data-task-id="{{ task.id }}"
                data-parent-id="{{ task.parent_id or '' }}">
                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>
                <td>
                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}
                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}">
                        <i class="bi bi-chevron-right"></i>
                    </button>
                    {% endif %}
                </td>
                <td style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">                    {{ task.name }}
                    <small class="text-muted">(ID: {{ task.id }}, Parent: {{ task.parent_id or 'None' }})</small>
                    <!-- Open Link -->
                    <a href="#" class="task-open-link" data-task-id="{{ task.id }}">
                        <i class="bi bi-arrows-angle-expand"></i> Open
                    </a>
                </td>
                <td>{{ task.project.name if task.project else "Unknown Project" }}</td>
                <td>{{ task.contributor.name if task.contributor else "Unassigned" }}</td>
                <td>{{ task.estimate }}</td>
                <td>{{ task.task_type }}</td>
                <td>{{ "Completed" if task.completed else "In Progress" }}</td>
                <td>
                    <!-- Delete Icon -->
                    <button class="btn btn-danger btn-sm delete-task-btn" data-task-id="{{ task.id }}">
                        <i class="bi bi-trash"></i>
                    </button>
                </td>
            </tr>
            {% for child in tasks if child.parent_id == task.id %}
                {{ render_task(child, tasks, depth + 1) }}
            {% endfor %}
            {% endmacro %}
            
            <!-- Render top-level tasks -->
            {% for task in tasks if not task.parent_id %}
                {{ render_task(task, tasks) }}
            {% endfor %}
        </tbody>
    </table>

    <!-- Pagination -->
    <nav aria-label="Task pagination">
        <ul class="pagination justify-content-center">
            {% if pagination.has_prev %}
            <li class="page-item">
                <a class="page-link" href="{{ url_for('tasks.list_tasks', page=pagination.prev_num, **filters) }}" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span> Previous
                </a>
            </li>
            {% endif %}

            {% for page_num in pagination.iter_pages(left_edge=1, right_edge=1, left_current=2, right_current=2) %}
            {% if page_num %}
            <li class="page-item {% if page_num == pagination.page %}active{% endif %}">
                <a class="page-link" href="{{ url_for('tasks.list_tasks', page=page_num, **filters) }}">{{ page_num }}</a>
            </li>
            {% else %}
            <li class="page-item disabled">
                <span class="page-link">â€¦</span>
            </li>
            {% endif %}
            {% endfor %}

            {% if pagination.has_next %}
            <li class="page-item">
                <a class="page-link" href="{{ url_for('tasks.list_tasks', page=pagination.next_num, **filters) }}" aria-label="Next">
                    Next <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
            {% endif %}
        </ul>
    </nav>
</div>


<!-- Create/Edit Task Modal -->
<div class="modal fade" id="createTaskModal" tabindex="-1" aria-labelledby="createTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createTaskModalLabel">Create Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="taskForm">
                    <!-- Display Task ID -->
                    <div class="mb-3">
                        <label for="task-id" class="form-label">Task ID</label>
                        <input type="text" class="form-control" id="task-id" name="task_id" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="taskTitle" class="form-label">Task Title</label>
                        <input type="text" class="form-control" id="taskTitle" name="title" required>
                    </div>
                    <div class="mb-3">
                        <label for="taskDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="taskDescription" name="description" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="taskProject" class="form-label">Project</label>
                        <select class="form-control" id="taskProject" name="project_id">
                            {% for project in projects %}
                            <option value="{{ project.id }}">{{ project.name }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="taskType" class="form-label">Task Type</label>
                        <select class="form-control" id="taskType" name="task_type">
                            <option value="Epic">Epic</option>
                            <option value="User Story">User Story</option>
                            <option value="Subtask">Subtask</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="taskEstimation" class="form-label">Estimation (Story Points)</label>
                        <input type="number" class="form-control" id="taskEstimation" name="story_points" min="0" placeholder="Enter story points">
                    </div>
                    <div class="mb-3">
                        <label for="taskParent" class="form-label">Parent Task</label>
                        <select class="form-control" id="taskParent" name="parent_id">
                            <option value="">None</option>
                            {% for task in tasks %}
                            <option value="{{ task.id }}">{{ task.name }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    <button type="submit" class="btn btn-primary">Save Task</button>
                </form>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<!-- External Dependencies -->
<script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
<script src="{{ url_for('static', filename='js/tasks_table_interactions.js') }}"></script>

<!-- Task Management Logic -->
<script>
// Retrieve the CSRF token from the meta tag
const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
document.addEventListener("DOMContentLoaded", () => {
    console.log("Task management logic initialized.");

    const modal = new bootstrap.Modal(document.getElementById("createTaskModal"));

    // Tooltip setup
    const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
    tooltipTriggerList.forEach(trigger => new bootstrap.Tooltip(trigger));

    // Theme toggle functionality
    const themeButton = document.getElementById('themeToggle');
    if (themeButton) {
        themeButton.addEventListener('click', () => {
            const htmlElement = document.documentElement;
            const currentTheme = htmlElement.getAttribute('data-bs-theme');
            htmlElement.setAttribute('data-bs-theme', currentTheme === 'dark' ? 'light' : 'dark');
        });
    }

    // SweetAlert2 Delete Task Confirmation
    document.querySelectorAll('.delete-task-btn').forEach(button => {
        button.addEventListener('click', function () {
            const taskId = this.dataset.taskId;

            Swal.fire({
                title: "Are you sure?",
                text: "You can choose to delete its child tasks or keep them.",
                icon: "warning",
                showCancelButton: true,
                showDenyButton: true,
                confirmButtonText: "Delete child tasks",
                denyButtonText: "Keep subtasks",
                cancelButtonText: "Cancel",
                confirmButtonColor: "#d33",
                denyButtonColor: "#3085d6",
                cancelButtonColor: "#6c757d",
            }).then((result) => {
                if (result.isConfirmed) {
                    deleteTask(taskId, true);
                } else if (result.isDenied) {
                    deleteTask(taskId, false);
                }
            });
        });
    });

    // Function to send delete request to the backend
    async function deleteTask(taskId, deleteChildren) {
        try {
            const response = await fetch(`/api/tasks/delete/${taskId}?confirm_children=${deleteChildren}`, {
                method: 'DELETE',
                headers: {
                    'X-CSRFToken': csrfToken, // Add CSRF token header
                },
            });

            if (response.ok) {
                const result = await response.json();
                Swal.fire("Deleted!", result.message, "success").then(() => {
                    location.reload(); // Reload to update task list
                });
            } else {
                const result = await response.json();
                Swal.fire("Error!", result.error, "error");
            }
        } catch (error) {
            console.error("Error deleting task:", error);
            Swal.fire("Error!", "An unexpected error occurred.", "error");
        }
    }

    // Task Management Logic
    const TaskManager = {
        init: function () {
            this.initFilterHandling();
            this.initClearFilters();
            this.initTaskItemClicks();
            this.initNewTaskButton();
            this.initSaveTaskButton();
        },

        // Filters for tasks
        initFilterHandling: function () {
            const filters = ['#project_filter', '#task_type_filter', '#completion_status_filter'];
            filters.forEach(selector => {
                const filterElement = document.querySelector(selector);
                if (filterElement) {
                    filterElement.addEventListener('change', () => {
                        const params = new URLSearchParams(window.location.search);
                        params.set(selector.replace('#', '').replace('_filter', ''), filterElement.value);
                        window.location.search = params.toString();
                    });
                }
            });
        },

        initClearFilters: function () {
            const clearButton = document.getElementById('clear_filters');
            clearButton?.addEventListener('click', () => {
                window.location.href = "{{ url_for('tasks.list_tasks') }}";
            });
        },

        // Handle clicks on the "Open" link
        initTaskItemClicks: function () {
            document.addEventListener("click", async (event) => {
                if (event.target.classList.contains("task-open-link")) {
                    event.preventDefault(); // Prevent default link behavior
                    const taskId = event.target.dataset.taskId;

                    try {
                        // Fetch task details
                        const response = await fetch(`/api/tasks/${taskId}`);
                        if (!response.ok) {
                            console.error("Error fetching task details:", await response.text());
                            alert("Failed to fetch task details. Please try again.");
                            return;
                        }
                        const task = await response.json();

                        // Populate modal fields
                        document.getElementById("task-id").value = task.id;
                        document.getElementById("taskTitle").value = task.name;
                        document.getElementById("taskDescription").value = task.description;
                        document.getElementById("taskProject").value = task.project_id || "";
                        document.getElementById("taskType").value = task.task_type || "";
                        document.getElementById("taskEstimation").value = task.story_points || 0;
                        document.getElementById("taskParent").value = task.parent_id || "";

                        // Update modal title
                        document.getElementById("createTaskModalLabel").textContent = "Edit Task";

                        // Show the modal
                        modal.show();
                    } catch (error) {
                        console.error("Error handling 'Open' click:", error);
                        alert("An unexpected error occurred. Please try again.");
                    }
                }
            });
        },

        // Handle new task creation
        initNewTaskButton: function () {
            const newTaskButton = document.getElementById("newTaskButton");
            newTaskButton?.addEventListener("click", () => {
                const taskForm = document.getElementById("taskForm");
                taskForm.reset();
                document.getElementById("task-id").value = ""; // Clear Task ID for new task
                document.getElementById("createTaskModalLabel").textContent = "Create Task";
            });
        },

        // Handle saving tasks (both create and edit)
        initSaveTaskButton: function () {
            const taskForm = document.getElementById("taskForm");

            taskForm.addEventListener("submit", async (event) => {
                event.preventDefault();

                const formData = new FormData(taskForm); // Gather form data
                // Convert FormData to a plain object
                const payload = {};
                formData.forEach((value, key) => {
                    payload[key] = value;
                });

                // Ensure 'name' is derived from 'title'
                payload['name'] = payload['title'];

                // Extract task ID from the payload (if available)
                const taskId = payload['task_id'] || null;

                // Log payload to verify before sending
                console.log("Payload before sending:", payload); 

                try {
                    const response = await fetch("/api/tasks", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json", // Set correct content type
                            "X-CSRFToken": csrfToken,          // Add CSRF token
                        },
                        body: JSON.stringify(payload),          // Send JSON payload
                    });

                    if (response.ok) {
                        // Store the updated task ID if it exists
                        if (taskId) {
                            localStorage.setItem("updatedTaskId", taskId); // Store the updated task ID
                            console.log("Stored updatedTaskId in localStorage:", taskId); // Debugging
                        }
                        // Swal.fire("Success!", "Task saved successfully!", "success").then(() => {
                        //     location.reload();
                        // });
                        console.log("Hiding modal after successful save"); // Debugging
                        modal.hide();

                    } else {
                        const result = await response.json();
                        // Swal.fire("Error!", result.error || "An error occurred while saving the task.", "error");
                    }
                } catch (error) {
                    console.error("Error saving task:", error);
                    // Swal.fire("Error!", "An unexpected error occurred while saving the task. Please try again.", "error");
                }
            });
        },
    };

    // Event listener for modal close
    console.log("Adding event listener for modal close"); // Debugging
    
    document.getElementById("createTaskModal").addEventListener("hidden.bs.modal", () => {
        const updatedTaskId = localStorage.getItem("updatedTaskId");
        if (updatedTaskId) {
            console.log("Found updatedTaskId in localStorage:", updatedTaskId); // Debugging
            console.log("Calling highlightTask with ID:", updatedTaskId);
            highlightTask(updatedTaskId); // Call highlight logic
            localStorage.removeItem("updatedTaskId"); // Clear after use
            console.log("Removed updatedTaskId from localStorage"); // Debugging
        }
    });

    // Initialize Task Manager
    TaskManager.init();
});
</script>
{% endblock %}