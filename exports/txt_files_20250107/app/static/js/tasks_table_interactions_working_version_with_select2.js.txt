console.log("tasks_table_interactions.js script is executing");

document.addEventListener("DOMContentLoaded", () => {
    console.log("DOMContentLoaded fired in tasks_table_interactions.js");

    const taskTypeSelect = document.getElementById("taskType");
    const parentDropdown = $("#taskParent"); // Using jQuery selector for Select2

    /**
     * Initializes the Select2 dropdown with AJAX support for dynamic searching.
     * Pre-populates the dropdown with up to 30 tasks by default.
     */
    function initializeParentDropdown() {
        if (parentDropdown.length) {
            // Preload tasks before initializing Select2
            $.ajax({
                url: '/tasks/available_tasks',
                dataType: 'json',
                data: {
                    task_type: $('#taskType').val(),
                    exclude_task_id: $('#task-id').val() || null,
                    limit: 30
                },
                success: function (data) {
                    // Add "None" option as default
                    const preloadedOptions = [{ id: '', text: 'None' }].concat(
                        data.map(task => ({
                            id: task.id,
                            text: `${task.name} (ID: ${task.id})`,
                        }))
                    );

                    console.log('Preloading tasks:', preloadedOptions); // Debugging log

                    // Populate Select2 with preloaded options
                    parentDropdown.empty(); // Clear existing options
                    preloadedOptions.forEach(option => {
                        const newOption = new Option(option.text, option.id, false, false);
                        parentDropdown.append(newOption); // Add options to dropdown
                    });

                    // Refresh Select2 UI
                    parentDropdown.select2('destroy'); // Destroy any existing Select2 instance
                    parentDropdown.select2({
                        placeholder: 'Search and select a parent task',
                        allowClear: true,
                        minimumInputLength: 1,
                        width: 'resolve', // Adjust dropdown width
                        data: preloadedOptions,
                        ajax: {
                            url: '/tasks/available_tasks',
                            dataType: 'json',
                            delay: 250, // Debounce AJAX requests
                            data: function (params) {
                                const taskType = $('#taskType').val();
                                const excludeTaskId = $('#task-id').val() || null;
                                console.log('Fetching available tasks:', {
                                    search: params.term || '',
                                    task_type: taskType,
                                    exclude_task_id: excludeTaskId
                                });
                                return {
                                    search: params.term || '', // User input or empty string for initial load
                                    task_type: taskType,
                                    exclude_task_id: excludeTaskId,
                                    limit: 30,
                                };
                            },
                            processResults: function (data) {
                                console.log('Received tasks:', data);
                                return {
                                    results: data.map(task => ({
                                        id: task.id,
                                        text: `${task.name} (ID: ${task.id})`,
                                    })),
                                };
                            },
                        },
                        dropdownParent: $('#createTaskModal'), // Ensure proper positioning in modal
                    });

                    console.log("Preloaded tasks added and Select2 re-initialized.");
                },
                error: function (xhr, status, error) {
                    console.error('Error preloading tasks:', error);
                },
            });
        } else {
            console.error("Parent dropdown element not found.");
        }
    }

    /**
     * Refreshes the Select2 dropdown when the task type changes.
     */
    function refreshParentDropdown() {
        console.log("Refreshing parent dropdown for task type:", taskTypeSelect?.value);

        if (parentDropdown.length) {
            // Clear and reload the dropdown with the new task type
            parentDropdown.val(null).trigger("change"); // Clear selection
            parentDropdown.select2("destroy"); // Destroy the existing instance
            initializeParentDropdown(); // Reinitialize
        } else {
            console.error("Parent dropdown element not found for refreshing.");
        }
    }

    // Initialize Select2 when the modal is shown
    $("#createTaskModal").on("shown.bs.modal", () => {
        initializeParentDropdown();
    });

    // Event listener for task type dropdown
    if (taskTypeSelect) {
        taskTypeSelect.addEventListener("change", refreshParentDropdown);
    } else {
        console.error("Task type select element not found.");
    }

    // Initialize additional functionality
    initTableSorter();
    initToggleDetails();
    initDragAndDrop();

    console.log("All features initialized successfully.");
});

/**
 * Initializes TableSorter for task table.
 */
function initTableSorter() {
    const taskTable = $(".table");
    if (taskTable.length) {
        taskTable.tablesorter({
            theme: "bootstrap",
            widgets: ["zebra"],
            headers: {
                0: { sorter: false },
                1: { sorter: false },
                8: { sorter: false },
            },
        });
        console.log("TableSorter initialized successfully");
    } else {
        console.warn("Task table not found for TableSorter initialization");
    }
}

/**
 * Initializes toggle functionality for parent-child rows.
 */
function initToggleDetails() {
    document.querySelectorAll(".toggle-details").forEach(button => {
        button.addEventListener("click", function () {
            const taskId = this.dataset.taskId;
            const childRows = document.querySelectorAll(`[data-parent-id="${taskId}"]`);
            const icon = this.querySelector("i");

            if (!childRows.length) {
                console.warn(`No child rows found for Task ID: ${taskId}`);
                return;
            }

            const isCurrentlyHidden = Array.from(childRows).every(row => row.style.display === "none");
            console.log(`Toggling Task ID ${taskId}: ${isCurrentlyHidden ? "Show" : "Hide"} child rows`);

            toggleChildRows(taskId, isCurrentlyHidden);

            icon.classList.toggle("bi-chevron-down", isCurrentlyHidden);
            icon.classList.toggle("bi-chevron-right", !isCurrentlyHidden);
        });
    });
}

/**
 * Recursively toggles visibility of child rows.
 * @param {string} parentId - ID of the parent task.
 * @param {boolean} show - Whether to show or hide the rows.
 */
function toggleChildRows(parentId, show) {
    const childRows = document.querySelectorAll(`[data-parent-id="${parentId}"]`);

    childRows.forEach(row => {
        row.style.display = show ? "table-row" : "none";

        const nestedChildId = row.dataset.taskId;
        if (nestedChildId) {
            toggleChildRows(nestedChildId, show);
        }

        const icon = row.querySelector(".toggle-details i");
        if (icon && !show) {
            icon.classList.remove("bi-chevron-down");
            icon.classList.add("bi-chevron-right");
        }
    });
}

/**
 * Initializes drag-and-drop functionality using SortableJS.
 */
function initDragAndDrop() {
    const tableBody = document.querySelector("tbody");
    if (!tableBody) {
        console.warn("Task table body not found for drag-and-drop initialization");
        return;
    }

    Sortable.create(tableBody, {
        handle: ".task-row",
        animation: 150,
        filter: ".task-open-link",
        preventOnFilter: true,
        onEnd: handleDragEnd,
    });
}

/**
 * Handles the drag-and-drop reordering event.
 * @param {Object} event - The SortableJS event object.
 */
async function handleDragEnd(event) {
    const rows = Array.from(event.from.querySelectorAll(".task-row"));
    const order = rows.map((row, index) => ({
        id: row.dataset.taskId,
        sort_order: index,
    }));

    console.log("New task order:", order);

    try {
        const response = await fetch("/tasks/reorder_subtasks", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ ordered_ids: order.map(o => o.id) }),
        });

        if (!response.ok) {
            const result = await response.json();
            console.error("Error reordering tasks:", result.error || "Unknown error");
            alert("Failed to reorder tasks.");
            return;
        }

        const data = await response.json();
        console.log("Task reordering successful:", data);
    } catch (error) {
        console.error("Error sending reordering request:", error);
        alert("An unexpected error occurred while reordering tasks.");
    }
}

/**
 * Prevent click events on the "Open" link from propagating to other handlers.
 */
document.addEventListener("click", (event) => {
    if (event.target.classList.contains("task-open-link")) {
        event.stopPropagation();
        console.log(`"Open" link clicked for Task ID: ${event.target.dataset.taskId}`);
    }
});