File: ./run.py

File: ./extract_python_variables_from_file.py
  Functions:
    - extract_variables_from_file
      Docstring: Extracts variable names from a Python file.

Args:
    filepath (str): Path to the Python file.

Returns:
    dict: Dictionary with variable names categorized by scope (global, class, function).
    - extract_variables_from_directory
      Docstring: Recursively extracts variables from all Python files in a directory.

Args:
    directory (str): Path to the directory.

Returns:
    dict: Aggregated variable names across all files.
    - save_variables_to_file
      Docstring: Saves extracted variables to a file in a readable format.

Args:
    variables (dict): Dictionary of variables.
    output_file (str): Path to the output file.
    - visit_Assign
    - visit_FunctionDef
    - visit_ClassDef
  Classes:
    - VariableVisitor
      - visit_Assign
      - visit_FunctionDef
      - visit_ClassDef

File: ./extract_javascript_variables_from_files.js
  JavaScript Functions:
    - extractVariablesFromFile
    - to
    - addVariable
    - parameters
    - extractVariablesFromDirectory
    - mergeVariables
    - saveVariablesToFile
  Comments:
    // Helper function to add variables to the appropriate scope
    // Walk the AST
    // Handle function parameters
    // Example usage
    // Change to your JS code directory

File: ./init_db.py

File: ./scripts_for_documentation/new_generate_documentation.py
  Functions:
    - validate_dependencies
    - ensure_output_folder
    - get_timestamp
    - log_file_action
    - summarize_outputs
    - generate_module_interaction
    - generate_sequence_diagrams
    - generate_database_schema
    - generate_all_documentation

File: ./scripts_for_documentation/generate_zip_of_txt_projectfiles.py
  Functions:
    - should_exclude

File: ./scripts_for_documentation/WIP_autogenerate_uml_sequence_diagrams.py
  Functions:
    - ensure_folder
      Docstring: Ensure the output folder exists.
    - get_timestamp
      Docstring: Generate a timestamp for filenames.
    - log_file_action
      Docstring: Log actions performed on files.
    - render_plantuml
      Docstring: Render the PlantUML diagram.
    - parse_logs
      Docstring: Parse structured logs to extract interactions.
Expected log format:
[TIMESTAMP] Caller=Frontend, Callee=Backend, Action=POST /tasks/archive/<task_id>, File=routes.py
    - parse_routes
      Docstring: Parse Flask route definitions to infer interactions.
Example route:
@bp.route("/tasks/archive/<int:task_id>", methods=["POST"])
def archive_task():
    - generate_puml
      Docstring: Generate a .puml file for the given interaction steps.
    - generate_sequence_diagrams
      Docstring: Generate sequence diagrams by analyzing logs and routes.

File: ./scripts_for_documentation/split_text_into_parts.py
  Functions:
    - split_text_into_parts
      Docstring: Splits a text file into approximately equal parts and saves them as separate files.

:param file_path: Path to the original text file
:param num_parts: Number of parts to divide the text into

File: ./scripts_for_documentation/WIP_newnew_generate_documentation.py
  Functions:
    - validate_dependencies
    - ensure_output_folder
    - get_timestamp
    - log_file_action
    - summarize_outputs
    - generate_module_interaction
    - generate_sequence_diagrams
    - generate_database_schema
    - generate_all_documentation

File: ./scripts_for_documentation/WIP_generate_documentation.py
  Functions:
    - validate_dependencies
      Docstring: Ensure required tools (pyreverse, dot, plantuml) are installed and accessible in the PATH.
    - ensure_output_folder
      Docstring: Ensure the output folder exists; create it if it does not.
    - get_timestamp
      Docstring: Generate a timestamp for filenames.
    - log_file_action
      Docstring: Log actions performed on files (move, rename, generate, etc.).
    - summarize_outputs
      Docstring: Print a summary of all generated files saved in the output folder.
    - find_dot_files
      Docstring: Recursively search for .dot files and log their locations.
    - generate_module_interaction
      Docstring: Generate module interaction diagrams using Pyreverse and save the output in the specified folder.
    - generate_database_schema
      Docstring: Extract and save the database schema from the PostgreSQL database.
    - generate_sequence_diagrams
      Docstring: Generate UML sequence diagrams for specified interactions.
    - parse_logs_for_sequence
      Docstring: Parse logs and generate a sequence diagram from file interactions.
    - generate_all_documentation
      Docstring: Main function to generate all documentation artifacts for the project.

File: ./scripts_for_documentation/generate_project_structure.py
  Functions:
    - generate_project_structure

File: ./scripts_for_documentation/create_list_of_all_endp_func_classes_jsfunction_jsfiles.py
  Functions:
    - parse_python_file
      Docstring: Parse a Python file and extract endpoints, functions, classes, and their docstrings.
    - parse_javascript_file
      Docstring: Parse a JavaScript file and extract functions and comments.
    - scan_project
      Docstring: Scan the project directory for Python and JavaScript files, extract their structure and docstrings, skipping excluded folders and files.
    - save_results_to_file
      Docstring: Save the parsed results to a file.

File: ./scripts_for_documentation/Convert_JSON_to_DOT2.py
  Functions:
    - prompt_for_file
      Docstring: Prompt the user for a file name and return the full path.
    - generate_dot_file
      Docstring: Convert JSON data to a DOT file for visualization.
    - write_edges

File: ./scripts_for_documentation/Convert_JSON_to_DOT.py
  Functions:
    - json_to_dot
      Docstring: Convert a JSON representation of a directory structure into a DOT file.
    - add_nodes_and_edges
      Docstring: Recursively add nodes and edges to the DOT graph.

File: ./scripts_for_documentation/generate_folder_structure.py
  Functions:
    - generate_project_structure
      Docstring: Generate a textual representation of the project's folder structure as a tree, excluding files.

File: ./scripts_for_documentation/generate_folder_structure_incl_files.py
  Functions:
    - generate_project_structure
      Docstring: Generate a textual and JSON representation of the project's folder and file structure.
    - build_tree
    - write_text_tree

File: ./scripts_for_documentation/generate_list_all_endp_func_meth.py
  Functions:
    - parse_file
      Docstring: Parse a Python file and extract endpoints, functions, classes, and their docstrings.
    - scan_project
      Docstring: Scan the Python project directory for files, extract their structure and docstrings, skipping excluded folders and files.
    - save_results_to_file
      Docstring: Save the parsed results to a file.

File: ./scripts_for_documentation/create_database_schema/run_export_schema.py

File: ./scripts_for_documentation/create_database_schema/export_schema.py
  Endpoints:
    - constrained_columns (Methods: get)
    - nullable (Methods: get)
    - default (Methods: get)
    - unique (Methods: get)
  Functions:
    - export_database_schema
      Docstring: Export database schema in the specified format.

File: ./app/__init__.py
  Endpoints:
    - ENV (Methods: get)
    - ENV (Methods: get)
    - SQLALCHEMY_RECORD_QUERIES (Methods: get)
  Functions:
    - create_app
      Docstring: Application factory function to initialize the Flask app.

File: ./app/tasks/models.py
  Functions:
    - validate_status
      Docstring: Validates that the status is one of the allowed values.
    - __init__
    - validate_task_changes
      Docstring: Validates changes to 'parent_id' and 'task_type'.
Ensures hierarchy validity and checks for circular references.
    - _validate_hierarchy_change
      Docstring: Validates hierarchy changes based on task_type and parent_id.
This method avoids setting attributes and focuses only on validation.
    - check_circular_reference
      Docstring: Iteratively checks for circular references in the task hierarchy.
Prevents stack overflow on deep hierarchies.
    - _validate_no_circular_references
      Docstring: Validates that there are no circular references in the task hierarchy.

Args:
    new_parent_id (int): The new parent ID to validate.

Raises:
    ValueError: If a circular reference is detected.
    - to_dict
    - validate_hierarchy
    - save
      Docstring: Saves the task to the database after validation.

Raises:
    ValueError: If validation fails.
    - delete_with_children
      Docstring: Deletes the task and optionally its children if 'confirm' is True.
    - archive
      Docstring: Archives the task and its subtasks.
    - unarchive
      Docstring: Unarchives the task and its subtasks.
    - mark_completed
      Docstring: Marks the task as completed.
    - to_dict_with_children
      Docstring: Converts the Task instance into a dictionary, including its children.
Ensures that the hierarchy is serialized properly.
    - __repr__
  Classes:
    - Task
      - validate_status
        Docstring: Validates that the status is one of the allowed values.
      - __init__
      - validate_task_changes
        Docstring: Validates changes to 'parent_id' and 'task_type'.
Ensures hierarchy validity and checks for circular references.
      - _validate_hierarchy_change
        Docstring: Validates hierarchy changes based on task_type and parent_id.
This method avoids setting attributes and focuses only on validation.
      - check_circular_reference
        Docstring: Iteratively checks for circular references in the task hierarchy.
Prevents stack overflow on deep hierarchies.
      - _validate_no_circular_references
        Docstring: Validates that there are no circular references in the task hierarchy.

Args:
    new_parent_id (int): The new parent ID to validate.

Raises:
    ValueError: If a circular reference is detected.
      - to_dict
      - validate_hierarchy
      - save
        Docstring: Saves the task to the database after validation.

Raises:
    ValueError: If validation fails.
      - delete_with_children
        Docstring: Deletes the task and optionally its children if 'confirm' is True.
      - archive
        Docstring: Archives the task and its subtasks.
      - unarchive
        Docstring: Unarchives the task and its subtasks.
      - mark_completed
        Docstring: Marks the task as completed.
      - to_dict_with_children
        Docstring: Converts the Task instance into a dictionary, including its children.
Ensures that the hierarchy is serialized properly.
      - __repr__

File: ./app/tasks/prio_routes.py
  Endpoints:
    - /tasks/<int:task_id>/calculate_rice (Methods: route)
  Functions:
    - calculate_rice
      Docstring: AI-powered RICE calculation for a task.

File: ./app/tasks/__init__.py

File: ./app/tasks/utils.py
  Endpoints:
    - parent_id (Methods: get)
  Functions:
    - filter_tasks
      Docstring: Dynamically filters tasks based on criteria provided in a dictionary, 
with optimized loading for related models.

Args:
    filters (dict): A dictionary of filtering criteria.
    page (int, optional): The page number for pagination.
    per_page (int, optional): The number of items per page.

Returns:
    Query or Pagination: A SQLAlchemy query object or paginated results.
    - debug_parent_child_relationships
      Docstring: Generates a debug map of parent-child relationships for all tasks.

Args:
    project_id (int, optional): Restrict to tasks from a specific project.

Returns:
    dict: A dictionary mapping parent IDs to their child task IDs.
    - validate_parent_child_relationships
      Docstring: Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.

Raises:
    ValueError: If invalid relationships are detected.
    - get_all_task_ids_with_parents
      Docstring: Returns a flat list of tasks with their parent IDs for debugging.

Returns:
    list: A list of tuples (task_id, parent_id).
    - calculate_total_story_points
      Docstring: Calculates the total story points for a project.
    - calculate_completed_story_points
      Docstring: Calculates the total completed story points for a project.
    - calculate_completion_percentage
      Docstring: Calculates the completion percentage of a project.
    - delete_project_and_tasks
      Docstring: Deletes a project and all its associated tasks.
    - contributor_has_assigned_tasks
      Docstring: Checks if a contributor has tasks assigned in a project.
    - fetch_task_with_logging
      Docstring: Fetch a task with detailed logging, including parent task information.
    - archive_task
      Docstring: Archive a task and all its subtasks, preventing infinite recursion.

Args:
    task (Task): The task to be archived.
    visited (set): A set of task IDs already processed (for recursion guard).
    - validate_hierarchy
      Docstring: Validates the hierarchy of a task or returns valid parent types.

Args:
    task (Task): The task instance to validate (optional).
    parent_id (int): The ID of the parent task to validate against (optional).
    task_type (str): The type of the task to determine valid parents (optional).

Returns:
    list: If no task and parent_id are provided, returns valid parent types for the task's type.

Raises:
    ValueError: If the hierarchy rules are violated during validation.
    - fetch_all_tasks
      Docstring: Fetches all tasks for a specific project, including project, contributor, and child task relationships.

Args:
    project_id (int): The ID of the project whose tasks need to be fetched.

Returns:
    list: A list of Task objects with their relationships loaded.
    - fetch_all_tasks_as_dicts
      Docstring: Fetches a list of tasks based on optional filters and serializes them into dictionaries.

Args:
    filters (dict, optional): A dictionary of filters to apply to the task query.

Returns:
    list[dict]: A list of serialized task dictionaries.
    - fetch_task_as_dict
      Docstring: Fetches a task by ID and returns it as a dictionary.

Args:
    task_id (int): The ID of the task to fetch.

Returns:
    dict: A dictionary representation of the task.

Raises:
    ValueError: If the task is not found.
    - generate_page_numbers
      Docstring: Generates a list of page numbers for pagination, including ellipses.

Args:
    current_page (int): The current page number.
    total_pages (int): Total number of pages.
    left_edge (int): Number of pages to show at the left edge.
    right_edge (int): Number of pages to show at the right edge.
    left_current (int): Number of pages to show to the left of the current page.
    right_current (int): Number of pages to show to the right of the current page.

Returns:
    list: A list of page numbers or None for ellipses.
  Classes:
    - TaskService
      - filter_tasks
        Docstring: Dynamically filters tasks based on criteria provided in a dictionary, 
with optimized loading for related models.

Args:
    filters (dict): A dictionary of filtering criteria.
    page (int, optional): The page number for pagination.
    per_page (int, optional): The number of items per page.

Returns:
    Query or Pagination: A SQLAlchemy query object or paginated results.
      - debug_parent_child_relationships
        Docstring: Generates a debug map of parent-child relationships for all tasks.

Args:
    project_id (int, optional): Restrict to tasks from a specific project.

Returns:
    dict: A dictionary mapping parent IDs to their child task IDs.
      - validate_parent_child_relationships
        Docstring: Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.

Raises:
    ValueError: If invalid relationships are detected.
      - get_all_task_ids_with_parents
        Docstring: Returns a flat list of tasks with their parent IDs for debugging.

Returns:
    list: A list of tuples (task_id, parent_id).
      - calculate_total_story_points
        Docstring: Calculates the total story points for a project.
      - calculate_completed_story_points
        Docstring: Calculates the total completed story points for a project.
      - calculate_completion_percentage
        Docstring: Calculates the completion percentage of a project.
      - delete_project_and_tasks
        Docstring: Deletes a project and all its associated tasks.
      - contributor_has_assigned_tasks
        Docstring: Checks if a contributor has tasks assigned in a project.
      - fetch_task_with_logging
        Docstring: Fetch a task with detailed logging, including parent task information.
      - archive_task
        Docstring: Archive a task and all its subtasks, preventing infinite recursion.

Args:
    task (Task): The task to be archived.
    visited (set): A set of task IDs already processed (for recursion guard).
      - validate_hierarchy
        Docstring: Validates the hierarchy of a task or returns valid parent types.

Args:
    task (Task): The task instance to validate (optional).
    parent_id (int): The ID of the parent task to validate against (optional).
    task_type (str): The type of the task to determine valid parents (optional).

Returns:
    list: If no task and parent_id are provided, returns valid parent types for the task's type.

Raises:
    ValueError: If the hierarchy rules are violated during validation.
      - fetch_all_tasks
        Docstring: Fetches all tasks for a specific project, including project, contributor, and child task relationships.

Args:
    project_id (int): The ID of the project whose tasks need to be fetched.

Returns:
    list: A list of Task objects with their relationships loaded.
      - fetch_all_tasks_as_dicts
        Docstring: Fetches a list of tasks based on optional filters and serializes them into dictionaries.

Args:
    filters (dict, optional): A dictionary of filters to apply to the task query.

Returns:
    list[dict]: A list of serialized task dictionaries.
      - fetch_task_as_dict
        Docstring: Fetches a task by ID and returns it as a dictionary.

Args:
    task_id (int): The ID of the task to fetch.

Returns:
    dict: A dictionary representation of the task.

Raises:
    ValueError: If the task is not found.
      - generate_page_numbers
        Docstring: Generates a list of page numbers for pagination, including ellipses.

Args:
    current_page (int): The current page number.
    total_pages (int): Total number of pages.
    left_edge (int): Number of pages to show at the left edge.
    right_edge (int): Number of pages to show at the right edge.
    left_current (int): Number of pages to show to the left of the current page.
    right_current (int): Number of pages to show to the right of the current page.

Returns:
    list: A list of page numbers or None for ellipses.

File: ./app/tasks/routes.py
  Endpoints:
    - / (Methods: route)
    - /details/<int:task_id> (Methods: route)
    - /task_row/<int:task_id> (Methods: route)
    - /api/projects/<int:project_id>/contributors (Methods: route)
    - /<int:task_id>/assign_contributor (Methods: route)
    - /archive/<int:task_id> (Methods: route)
    - /unarchive/<int:task_id> (Methods: route)
    - /disconnect/<int:task_id> (Methods: route)
    - /available_tasks (Methods: route)
    - /assign_parent/<int:task_id> (Methods: route)
    - /subtasks/<int:task_id> (Methods: route)
    - /assign_subtasks/<int:task_id> (Methods: route)
    - /reorder_subtasks (Methods: route)
    - /debug/csrf-token (Methods: route)
    - /batch_update/ (Methods: route)
    - /hierarchy/<int:project_id> (Methods: route)
    - /search/ (Methods: route)
    - project_id (Methods: get)
    - contributor_id (Methods: get)
    - task_type (Methods: get)
    - completion_status (Methods: get)
    - page (Methods: get)
    - per_page (Methods: get)
    - task_ids (Methods: get)
    - action (Methods: get)
    - q (Methods: get)
    - contributor_id (Methods: get)
    - exclude_task_id (Methods: get)
    - task_type (Methods: get)
    - term (Methods: get)
    - project_id (Methods: get)
    - limit (Methods: get)
    - page (Methods: get)
    - parent_id (Methods: get)
    - parent_id (Methods: get)
    - ordered_tasks (Methods: get)
    - show_archived (Methods: get)
    - hierarchical (Methods: get)
    - row_only (Methods: get)
    - check_only (Methods: get)
  Functions:
    - list_tasks
      Docstring: List tasks globally with filtering, optional hierarchical ordering, and pagination.
    - task_details
      Docstring: Fetch and display details for a specific task.
    - get_task_row
      Docstring: Return the HTML for a single task row or modal content.
This endpoint is used to dynamically update the task table and modal.
    - get_project_contributors
      Docstring: Fetch contributors for a specific project.
    - assign_contributor
      Docstring: Assign a contributor to a task.
    - archive_task
      Docstring: Archive a task and its subtasks.
    - unarchive_task
      Docstring: Unarchive a task and its subtasks.
    - disconnect_subtask
      Docstring: Remove parent reference from a subtask.
    - available_tasks
      Docstring: Fetch a list of available tasks, excluding the specified one,
while enforcing valid parent-child hierarchy rules.
    - assign_parent_task
      Docstring: Assign a parent task to an existing task.
    - get_subtasks
      Docstring: Fetch subtasks for a given task or check if subtasks exist.
    - assign_subtasks
      Docstring: Assign multiple subtasks to a parent task.
    - reorder_subtasks
      Docstring: Reorder subtasks globally or reassign them to a different parent.

Steps:
- Parse and validate input from the frontend.
- Update parent-child relationships and sort order in the database.
- Commit changes and return a success response.
- Handle errors gracefully and provide detailed logs for debugging.
    - debug_csrf_token
    - batch_update_tasks
      Docstring: Perform batch updates on tasks.
    - build_hierarchy
    - task_hierarchy
      Docstring: Fetch the task hierarchy for a specific project.
    - search_tasks
      Docstring: Search tasks by name.

File: ./app/forms/__init__.py

File: ./app/forms/forms.py
  Functions:
    - get_task_model
    - validate
      Docstring: Override the default validate method to include logging.
    - validate_parent_id
    - validate_new_parent_id
    - validate_parent_id
  Classes:
    - ProjectForm
    - AddContributorForm
      - validate
        Docstring: Override the default validate method to include logging.
    - ProgressEditForm
    - AddProgressForm
    - DeleteProjectForm
    - TaskForm
      - validate_parent_id
    - ArchiveTaskForm
    - FilterTasksForm
    - ReassignSubtaskForm
      - validate_new_parent_id
    - AssignSubtaskForm
      - validate_parent_id

File: ./app/charts/contributor_breakdown_chart.py
  Functions:
    - generate_contributor_breakdown_chart
    - format_autopct

File: ./app/charts/__init__.py

File: ./app/charts/burnup_chart.py
  Functions:
    - generate_burnup_chart

File: ./app/charts/project_breakdown_chart.py
  Functions:
    - generate_project_breakdown_chart
    - format_autopct

File: ./app/utils/logging_config.py
  Functions:
    - setup_logging
      Docstring: Configure logging for the application, including rotating file logs and
development/production environment adjustments.

File: ./app/utils/__init__.py

File: ./app/utils/common_utils.py
  Functions:
    - log_interaction
      Docstring: Logs interaction details for debugging and sequence generation.
        :param caller: The calling entity or module.
        :param callee: The receiving entity or module.
        :param action: The action being logged.
        :param data: Optional data payload.
        :param result: Optional result of the action.
        :param error: Optional error message.
    - count_ongoing_projects
      Docstring: Count ongoing projects based on their story points completion.
    - count_completed_projects
      Docstring: Count completed projects where all story points are finished.
    - count_unstarted_projects
      Docstring: Count unstarted projects where no story points are completed.
    - count_all_projects
      Docstring: Count all projects in the database.
    - count_all_contributors
      Docstring: Count all contributors in the database.
    - count_assigned_contributors
      Docstring: Count contributors assigned to at least one project.
    - count_unassigned_contributors
      Docstring: Count contributors not assigned to any project.

File: ./app/models/models.py
  Functions:
    - contributors
      Docstring: Define the many-to-many relationship for contributors dynamically.
    - add_contributor
      Docstring: Add a contributor to the project.
    - remove_contributor
      Docstring: Remove a contributor from the project.
    - update_story_points
      Docstring: Recalculate the completed story points for the project.
    - total_story_points
      Docstring: Fetch the total story points for all tasks associated with this project.
    - completion_percentage
      Docstring: Calculate the completion percentage of the project based on story points.
    - __repr__
    - __repr__
  Classes:
    - Project
      Docstring: Represents a project entity.
      - contributors
        Docstring: Define the many-to-many relationship for contributors dynamically.
      - add_contributor
        Docstring: Add a contributor to the project.
      - remove_contributor
        Docstring: Remove a contributor from the project.
      - update_story_points
        Docstring: Recalculate the completed story points for the project.
      - total_story_points
        Docstring: Fetch the total story points for all tasks associated with this project.
      - completion_percentage
        Docstring: Calculate the completion percentage of the project based on story points.
      - __repr__
    - Contributor
      Docstring: Represents a contributor entity.
      - __repr__

File: ./app/models/__init__.py

File: ./app/extensions/db.py

File: ./app/extensions/__init__.py

File: ./app/static/__init__.py

File: ./app/static/custom.js

File: ./app/static/js/alerts.js
  Comments:
    // Allow specific overrides
    // Now, any call to `Swal.fire` will use the default styles

File: ./app/static/js/tasks_table_interactions.js
  JavaScript Functions:
    - updateTableAfterStatusChange
    - showToast
    - to
    - updateTaskStatus
    - handleTaskOpenClick
    - initializeToggleStates
    - initializeRowLevels
    - initTableSorter
    - initToggleDetails
    - getHierarchyLevel
    - updateTaskParentMap
    - toggleChildRows
    - is
    - setupTooltips
    - is
    - setupThemeToggle
    - is
    - refreshTaskRow
    - is
    - setupDeleteTaskLogic
    - is
    - deleteTask
  Comments:
    // Log to confirm the script's execution
    /**
 * Updates the task table after a status change.
 * Ensures correct sorting and filtering behavior.
 * @param {number} taskId - The ID of the updated task.
 * @param {string} newStatus - The new status of the task.
 */
    // 🚀 **Check if filtering is applied**
    // Hide task if it no longer matches filter
    // 🔄 **Check if sorting is applied**
    // Call your existing sorting function
    /**
 * Displays a toast notification.
 * @param {string} message - The message to display.
 */
    // Auto-remove after 3 seconds
    /** Now, any call to `Swal.fire` will use the default styles
Swal.fire({
    title: "Global Styled Alert",
    text: "This alert always has global styles!",
    icon: "success",
}*/
    /* ======================== Document Initialization ======================== */
    // Step 1: Retrieve CSRF token for secure requests
    // Attach delete logic
    // Stop initialization if token is missing      
    /**const originalSwal = Swal.fire;
    Swal.fire = function (options) {
        return originalSwal({
            ...options,
            customClass: {
                popup: "myswal-popup-class",
                title: "myswal-title-class",
                content: "myswal-content-class",
                confirmButton: "myswal-confirm-button",
                cancelButton: "myswal-cancel-button",
                ...options.customClass, // Allow specific overrides
            },
            buttonsStyling: false,
        });
    }*/
    // Delegated event listener for status dropdown
    // Prevent further execution if data is invalid
    // Step 2: Prevent drag-and-drop behavior when interacting with buttons inside task rows
    // event.stopPropagation(); // Prevents drag-and-drop behavior
    // Stops default browser behavior
    //       button.addEventListener("click", event => {
    //           event.stopPropagation(); // Prevents click event from bubbling up
    //           event.preventDefault(); // Ensure button click works correctly
    //           const taskId = event.currentTarget.dataset.taskId;
    //           console.log(`Delete button clicked for Task ID: ${taskId}`);  
    //       });
    // Prevents the button from being draggable
    // Stops default drag behavior
    // Prevents unwanted selection when focusing button
    // Step 3: Initialize TaskManager if not already initialized
    // Mark as initialized
    // Step 4: Initialize drag-and-drop functionality through TaskManager
    // Correctly call the drag-and-drop initialization
    // Step 5: Initialize task modal features if not already initialized
    // Setup modal lifecycle
    // Setup specific modal events
    // Setup lifecycle-related events
    // Prevent redundant re-initialization
    // Step 6: Build parent-child relationships map
    // Delegate this logic to TaskManager
    // Step 7: Initialize toggle states for chevrons
    // Step 8: Global setup for save task button and task form
    // Bind TaskManager.handleTaskSave to the TaskManager context
    // Remove any previously attached click event listener to avoid duplicates
    // Attach the bound function to the click event
    // Pass the event to the bound function
    // Step 9: Add event listener for "Open Task" links
    // Step 10: Setup "Create Task" button
    // Step 11: Initialize event listeners for toggling child rows
    // Toggle child rows
    // Update toggle icon
    // Ensure proper error handling for related code if needed
    // Ensure CSRF token is available
    /**
     * Sends a PATCH request to update task status and handles dropdown rollback on failure.
     * @param {number} taskId - The ID of the task to update.
     * @param {string} newStatus - The new status ("Not Started", "In Progress", "Completed", "Archived").
     */
    // Backup in case of failure
    // Update dropdown value and data attributes
    // Backend-confirmed status
    // Reflect status in the UI dropdown
    // Refresh the task row UI
    // Scroll and highlight
    // Reapply sorting/filtering if needed
    // Rollback on failure
    // Rollback on network error
    /* ======================== Event Handlers ======================== */
    /**
 * Handles clicks on "Open" task links.
 * Prevents click events from propagating to other handlers and opens the modal.
 * @param {Event} event - The click event.
 */
    // Flag to prevent multiple modals
    // Prevent propagation to other click handlers
    // Prevent default link behavior
    // ✅ Store the Task ID globally
    // Prevent multiple modals from opening simultaneously
    // Attempt to open the task modal
    // Reset the flag
    /* ======================== Initialization Functions ======================== */
    /**
 * Initializes toggle arrows to match the visibility state of child task rows.
 * Ensures icons reflect the visibility of their associated child rows.
 */
    // Determine the visibility of any child row
    // Update the toggle icon to reflect the visibility state
    /**
 * Adds a data-level attribute to each row based on its hierarchy.
 * The data-level attribute is used for styling nested tasks.
 */
    /**
 * Initializes the TableSorter plugin for the task table.
 * Configures the plugin for sorting task columns with specific settings.
 */
    // Apply Bootstrap theme to the table
    // Add zebra striping for better visibility
    // Disable sorting for the first column
    // Disable sorting for the second column
    // Disable sorting for the actions column
    /**
 * Initializes toggle functionality for parent-child rows.
 * Sets up event listeners for toggle buttons to expand or collapse child rows.
 */
    // Check the current visibility state of the first child row
    // Toggle child row visibility
    // Update the toggle icon to reflect the visibility state
    /* ======================== Utility Functions ======================== */
    /**
 * Determines the hierarchy level of a task row.
 * Used for styling and enforcing nesting rules dynamically.
 * @param {HTMLElement} row - The task row to analyze.
 * @returns {number} - The hierarchy level (1 for top-level, 2 for nested, etc.).
 */
    // Default level for top-level tasks
    /**
 * Updates the `taskParentMap` dynamically when a task's parent changes.
 * Ensures the map remains consistent with the DOM structure.
 * @param {number} taskId - ID of the task being updated.
 * @param {number|null} parentId - New parent ID, or `null` if no parent.
 */
    /**
 * Toggles the visibility of child rows when a parent row is toggled.
 * @param {string} parentId - The ID of the parent task.
 * @param {boolean} show - Whether to show or hide the child rows.
 */
    // Recursively toggle nested child rows
    /**
 * Sets up tooltips on elements with the `data-bs-toggle="tooltip"` attribute.
 * Initializes Bootstrap tooltips for elements with tooltip attributes.
 * This function is called after the page loads to ensure consistency.
 */
    /**
 * Configures theme toggle functionality.
 * This function is called after the page loads to ensure consistency.
 * The theme is stored as a data attribute on the HTML element.
 */
    /* ======================== Modal Management ======================== */
    /**
 * Refreshes the specific row from the backend.
 * Updates contributor and other relevant fields dynamically.
 * This function is called after a task is saved or updated.
 * It fetches the latest task data from the backend.
 * It updates the contributor field in the task row.
 * IT DOES NOT CONTAIN ANY LOGIC FOR UPDATING THE PARENT TASK FIELD.
 * IT DOES NOT WORK 
 * @param {number} taskId - The ID of the task to refresh.
 */
    /**
 * Refreshes the specific row from the backend and updates the dropdown.
 * @param {number} taskId - The ID of the task to refresh.
 */
    // ✅ Check if parent_id & contributor_id are present
    // Update status dropdown
    // Update contributor field
    // Ensure parent task relationship is updated
    /* ======================== Task Deletion Workflow ======================== */
    /**
 * Configures task deletion with SweetAlert2 confirmation.
 * Displays a modal to choose whether to delete child tasks.
 * MUST REMOVE THE VERY ANNOYING ANIMATION OF SWEETALERT2
 * Sends a DELETE request to the backend to delete the task.
 * This function is called after the page loads to ensure consistency.
 * The task deletion logic sends a DELETE request to the backend, 
 * updates the task list after deletion and displays a success or error message.
 */
    // Fetch task details to check if it has children
    // Ensure the backend returns this key
    // Display a single SweetAlert with three options
    // Only show the Deny button if the task has children
    // Main popup style
    // Title style
    // Icon style
    // Cancel button style
    // Confirm button style
    // Use your own button styles
    // Add entrance animation (requires animate.css)
    // Add exit animation (requires animate.css)
    // Delete task and child tasks
    // Delete task but keep child tasks
    // Cancel deletion
    /**
 * This function is called when the user confirms the deletion.
 * It sends a DELETE request to the backend to delete the task.
 * The task is deleted along with its children if specified.
 * The `taskId` parameter is the ID of the task to delete.
 * The `deleteChildren` parameter determines whether to delete children.
 * The `csrfToken` parameter is used to send requests securely.
 */
    // Determine the appropriate message
    /*---------------------------------TaskManager---------------------------------*/
    // Store CSRF token globally in TaskManager
    // Bind handleTaskSave
    /*initTaskInteraction: function () {
         document.addEventListener("click", async (event) => {
            if (event.target.classList.contains("task-open-link")) {
                event.preventDefault();
                const taskId = event.target.dataset.taskId;
                try {
                    await openTaskModal(taskId); // Ensure `openTaskModal` is defined and imported
                } catch (error) {
                    console.error("Error opening task modal:", error);
                }
            }
        }); 
    },*/
    // Use `this` to refer to TaskManager
    /**
     * Highlights a task row temporarily to indicate successful changes.
     * Useful for visual feedback after save or reorder operations.
     * @param {string|number} taskId - ID of the task to highlight.
     */
    // Apply a slight delay to ensure scrolling is completed
    // Highlight duration extended to 3 seconds
    // Delay to start highlighting after scroll
    // Validate taskData object
    // Attempt to find the existing row
    // Assign appropriate class
    // Apply row-specific styles
    // Light red
    // Light yellow
    // Light blue
    // Highlight the updated or newly added task row
    // Debugging
    // Check the current state of listeners
    // Remove existing event listener and reattach to avoid duplicates
    // Check listeners after addition
    // Prevent default button behavior
    // track calls
    // Correctly reference the form element
    // Ensure this ID matches your form
    // Update the save button text based on the task ID field
    // Construct form data and prepare payload
    // Ensure `parent_id` is included in the payload
    // ** Fix: Explicitly fetch Select2 value for `taskParent` **
    // Ensure `contributor_id` is included in the payload
    // Frontend Validation
    // Ensure numeric fields are set correctly
    // Default to 0 if empty
    // Default to 0 if empty
    // Proceed with payload processing
    // Update the task table
    // Highlight the task after the table refresh
    // Reset modal fields only for new task creation
    // Explanation: If both `payload.id` and `payload.task_id` are not present,
    // it indicates that this is a new task being created, not an existing task being edited.
    // Close the modal
    // Read the raw response text
    /* ======================== Drag and Drop section ======================== */
    /**
     * Initializes the `taskParentMap` from the DOM.
     */
    // Clear the map to ensure a fresh start
    // Iterate over all task rows to populate the map
    /**
     * Dynamically updates the `taskParentMap` when a task's parent changes.
     * @param {number} taskId - ID of the task to update.
     * @param {number|null} parentId - New parent ID, or `null` if no parent.
     */
    /**
     * Rebuilds the `taskParentMap` to reflect dynamic changes in the DOM.
     * This should be called after drag-and-drop or task deletion.
     */
    // Initialize Sortable.js for drag-and-drop functionality
    // Only draggable via `.task-row` elements
    // Smooth animation
    // Prevent dragging on task links
    // Prevent drag if filtered element is clicked
    // The row that was dragged
    // Assumes parent is the previous sibling
    // Update TaskParentMap only
    // Prepare and send the payload
    // Remove this? const rows = Array.from(event.from.querySelectorAll(".task-row"));
    // End of onEnd callback
    // End of TaskManager

File: ./app/static/js/filters.js
  Comments:
    // filters.js
    /**
 * Filters Module
 * Handles dynamic filtering and clearing of task filters.
 */
    /**
     * Attach event listeners to filter dropdowns to dynamically update the task list.
     */
    // Update URL and reload with new filter
    /**
     * Attach an event listener to the clear filters button to reset filters.
     */
    // Redirect to the unfiltered task list

File: ./app/static/js/modals.js
  JavaScript Functions:
    - getModal
    - fetchTaskDetails
    - setParentDropdown
    - observeParentDropdown
    - waitForParentDropdownReady
    - if
    - to
    - by
    - to
    - debounce
    - later
    - getCsrfToken
  Comments:
    /**
 * Modals Module
 * Handles modal lifecycle events, dropdowns, contributor assignments, and field resets.
 */
    /* ======================== Utility Functions ======================== */
    /**
 * Retrieves the modal element and instance, initializing it if necessary.
 * @returns {object} - { modalElement, modalInstance }
 */
    // Initialize the modal instance if not already initialized
    /**
 * Fetches task details from the backend.
 * @param {string} taskId - The ID of the task to fetch.
 * @returns {Promise<object|null>} - The task data or null on failure.
 */
    // Parse the response JSON
    // Return the parsed JSON
    /**
 * Pre-selects the current parent task in the dropdown for editing an existing task.
 * @param {number} parentId - The ID of the parent task.
 */
    // Fetch details of the parent task from the backend
    // Add the parent task as an option and pre-select it
    // Mark as selected
    // Mark as selected
    /**
 * Closes the "Create/Edit Task" modal.
 */
    // Trigger Bootstrap's modal hide functionality
    // Ensure focus is removed from any active element inside the modal
    // Reset modal state if the modal is being closed
    // Log modal closure
    /* ======================== Dropdown Management ======================== */
    /**
 * Initializes the Select2 dropdown for parent tasks.
 */
    //let dropdownInitialized = false;
    // Resolve immediately if dropdown is not found
    // Reinitialize only if Select2 is not already initialized
    // Log dropdown initialization;
    // Resolve the promise after initialization completes
    // Fallback resolve after a short delay if select2:open is not triggered
    // Log current dropdown value for debugging
    /**
 * Refreshes the Select2 dropdown when the task type changes.
 */
    // Check if Select2 is initialized before destroying
    // Reinitialize Select2
    /* ======================== Modal Lifecycle Events ======================== */
    /**
 * Configures modal lifecycle events for the "Create/Edit Task" modal.
 */
    /**window.setupModalLifecycleEvents = function () {
    const { modalElement } = getModal();
    if (!modalElement) return;

    // Remove any previously attached handlers to prevent duplication
    $(modalElement).off("shown.bs.modal hidden.bs.modal");

    // Handle the modal being shown
    $(modalElement).on("shown.bs.modal", () => {
        $(modalElement).attr("aria-hidden", "false"); // Set aria-hidden to false
        console.log("Modal is now fully visible.");
        initializeParentDropdown(); // Initialize or refresh dropdown
        if (!currentlyOpenedTaskId) {
            console.log("Dropdown initialized for a new task.");
        } else {
            console.log(`Dropdown not initialized as Task ID ${currentlyOpenedTaskId} is being edited.`);
        }
    });

    // Handle the modal being hidden
    $(modalElement).on("hidden.bs.modal", () => {
        $(modalElement).attr("aria-hidden", "true"); // Set aria-hidden to true
        console.log("Modal hidden. Resetting fields if no task was being edited.");
        if (!currentlyOpenedTaskId) {
            resetModalFields(); // Reset only for new tasks
        }

        // Clean up the modal state
        $("body").removeClass("modal-open");
        $(".modal-backdrop").remove();
        document.body.style.overflow = "auto"; // Restore scrolling

        // Explicitly remove aria-hidden attribute
        $(modalElement).removeAttr("aria-hidden");

        // Reset fields for new tasks only
        if (!currentlyOpenedTaskId) {
            resetModalFields();
        }
    });
};*/
    // Stop observing
    // Add this at the top of the function if needed
    // Ensure the modal is correctly displayed and accessible
    // Wait for parent dropdown to be in the DOM
    // New forced wait!
    // Step 3: Set focus to the first input field
    // Handle the modal being hidden
    // Reset fields when modal is hidden
    // Remove focus from any active element
    // Reset the modal title and button text for the next task
    // Clean up modal state managed by Bootstrap
    // Restore scrolling
    // Handle the modal being hidden but before fully closing
    // Prevent the modal from closing
    /**
 * Configures modal lifecycle events for the "Create/Edit Task" modal.
 */
    /* ======================== Modal Actions ======================== */
    /**
 * Resets all fields in the modal.
 */
    /**
 * Resets all fields in the modal.
 * @param {boolean} forceReset - Whether to force a reset even if a task is being edited.
 */
    // Check if reset is required (skip for task edits unless forced)
    // Define selectors for fields to reset
    // Hidden field for task ID
    // Task title input
    // Task description textarea
    // Project dropdown
    // Task type dropdown
    // Story points input
    // Parent task dropdown
    // Current contributor display field
    // Reset each field
    // Handle dropdowns and text inputs separately
    // Clear selection for dropdown
    // Trigger change for Select2 if initialized
    // Clear text inputs
    // Handle special case for contributor dropdown
    // Clear contributor dropdown
    // Update Select2 if applicable
    // Reset Parent Task Select2 dropdown
    // Reset value and refresh
    // Update modal title to "Create Task" (default state)
    // Reset button text to "Save Task"
    // Clear task-specific state variables
    // Clear the current task ID
    // Reset save initialization flag
    /**
 * Debounce function to delay invocation of a function by a specified time.
 * Prevents frequent calls in quick succession.
 * @param {Function} func - The function to debounce.
 * @param {number} wait - Delay in milliseconds.
 * @returns {Function} - Debounced function.
 */
    /**
 * Attaches a debounced click event handler to the "Save Task" button.
 * Prevents duplicate submissions using a guard flag and ensures save operations are serialized.
 */
    // Guard flag to track ongoing save operations
    // Task save handler
    // Ensure TaskManager.handleTaskSave is asynchronous
    // Update task row and highlight saved task
    // Reset the modal for the next task
    // Reset guard flag
    // Attach the debounced click handler to #saveTaskButton
    /**
 * Opens the "Create/Edit Task" modal and populates it with task data.
 * @param {number} taskId - The ID of the task to fetch.
 */
    // Track currently opened task ID to prevent redundant calls
    // Prevent duplicate modal opens
    // Set the currently opened task ID
    // Populate fields with task data
    // Set modal title
    // Ensure the parent dropdown is initialized after fetching details
    // **Set parent dropdown if task has a parent**
    // Reset after operation completes
    /**
 * Populates the modal fields with the provided task data.
 * @param {object} task - The task data to populate the modal fields.
 */
    // Populate fields
    // Ensure parent task option exists in dropdown
    // Fallback display text
    // Update the modal title
    // Update the "Save Task" button text
    // Ensure dropdowns are refreshed
    // Show the modal
    /**
 * Assigns contributors in the "Create/Edit Task" modal.
 */
    // Function to safely retrieve CSRF token
    // Retry in 500ms
    // Remove existing click handler (if any) to prevent duplicates
    // Get the latest CSRF token
    // Dynamically fetched CSRF token
    /**
 * Toggles the modal size between full-page and default size.
 */
    /**
 * Resets the "Create Task" modal for creating a new task.
 */
    // Clear task ID to indicate new task
    // Reset the flag for task editing
    /**
 * Initializes the task modal logic.
 */
    // Properly dispose of the modal
    // Make it globally accessible if needed
    // Ensure contributor assignment setup runs after modal is fully visible

File: ./app/routes/save_task_route_21 jan_1041.py
  Endpoints:
    - /tasks (Methods: route)
    - name (Methods: get)
    - title (Methods: get)
    - id (Methods: get)
    - task_id (Methods: get)
    - description (Methods: get)
    - contributor_id (Methods: get)
    - completed (Methods: get)
    - description (Methods: get)
    - contributor_id (Methods: get)
    - completed (Methods: get)
    - sort_order (Methods: get)
  Functions:
    - save_task
      Docstring: API route to create a new task or update an existing one.
Handles validation, parent-child hierarchy rules, and database interactions.

File: ./app/routes/__init__.py

File: ./app/routes/api_routes.py
  Endpoints:
    - /tasks (Methods: route)
    - /calculate_completion_percentage/<int:project_id> (Methods: route)
    - /delete_project/<int:project_id> (Methods: route)
    - /tasks/<int:task_id> (Methods: route)
    - /tasks (Methods: route)
    - /tasks/<int:task_id>/status (Methods: route)
    - /tasks/delete/<int:task_id> (Methods: route)
    - project_id (Methods: get)
    - contributor_id (Methods: get)
    - task_type (Methods: get)
    - completion_status (Methods: get)
    - page (Methods: get)
    - per_page (Methods: get)
    - description (Methods: get)
    - parent_id (Methods: get)
    - project_id (Methods: get)
    - story_points (Methods: get)
    - task_type (Methods: get)
    - contributor_id (Methods: get)
    - completed (Methods: get)
    - sort_order (Methods: get)
    - id (Methods: get)
    - task_id (Methods: get)
    - name (Methods: get)
    - show_archived (Methods: get)
    - hierarchical (Methods: get)
    - story_points (Methods: get)
    - parent_id (Methods: get)
    - parent_id (Methods: get)
    - project_id (Methods: get)
    - story_points (Methods: get)
    - sort_order (Methods: get)
    - description (Methods: get)
    - contributor_id (Methods: get)
    - completed (Methods: get)
    - sort_order (Methods: get)
    - name (Methods: get)
    - check_children_only (Methods: get)
    - confirm_children (Methods: get)
    - name (Methods: get)
    - title (Methods: get)
  Functions:
    - list_tasks_json
      Docstring: API endpoint to fetch tasks in JSON format for the Next.js frontend.
    - calculate_completion_percentage_api
      Docstring: API endpoint to calculate the completion percentage of a project.
    - api_delete_project
      Docstring: API endpoint to delete a project and its related tasks.
    - get_task_details
      Docstring: Fetch task details by ID and return as JSON using the TaskService utility method.
    - validate_task_payload
      Docstring: Validates task payload for required fields and hierarchy rules.
    - save_task
      Docstring: API route to create a new task or update an existing one.
Handles validation, parent-child hierarchy rules, and database interactions.
    - update_task_status_route
      Docstring: API route to update the status of a task.
Handles status updates independently of other fields.
    - update_task
      Docstring: Updates an existing task, including status updates.
    - create_task
      Docstring: Creates a new task.
    - delete_task
      Docstring: API endpoint to delete a task. Optionally, delete its child tasks as well.
:param task_id: ID of the task to be deleted.
:return: JSON response with success or error message.

File: ./app/routes/page_routes.py
  Endpoints:
    - / (Methods: route)
    - /base (Methods: route)
    - /test-flash (Methods: route)
    - /dashboard (Methods: route)
    - /project/<project_name> (Methods: route)
    - /create_project (Methods: route)
    - /add_contributor/<project_name> (Methods: route)
    - /remove_contributor/<project_name> (Methods: route)
    - /delete_project/<int:project_id> (Methods: route)
    - contributor_name (Methods: get)
    - contributor_name (Methods: get)
  Functions:
    - index
      Docstring: Renders the homepage with project details and a form to add new projects.
    - base
      Docstring: Renders the base.html template.
    - test_flash
      Docstring: Adds a test flash message and redirects to the base page.
    - dashboard
      Docstring: Renders the dashboard page with project and contributor stats and charts.
    - project
      Docstring: Displays project details and allows interaction such as adding contributors or viewing charts.
    - create_project
      Docstring: Handles the creation of a new project.
    - add_contributor
      Docstring: Adds a contributor to a specified project. Logs all interactions for tracing and debugging.
    - remove_contributor
      Docstring: Removes a contributor from a specified project. Prevents removal if the contributor has assigned tasks.
Logs all interactions for tracing and debugging.

:param project_name: The name of the project from which the contributor will be removed.
    - delete_project
      Docstring: Deletes a project and all its tasks. Handles errors during deletion.

File: ./frontend/.next/transform.js

File: ./frontend/.next/server/next-font-manifest.js

File: ./frontend/.next/server/interception-route-rewrite-manifest.js

File: ./frontend/.next/server/server-reference-manifest.js

File: ./frontend/.next/server/middleware-react-loadable-manifest.js

File: ./frontend/.next/server/middleware-build-manifest.js

File: ./frontend/.next/server/app/page.js

File: ./frontend/.next/server/app/page_client-reference-manifest.js

File: ./frontend/.next/server/app/alltasks/page.js

File: ./frontend/.next/server/app/alltasks/page_client-reference-manifest.js

File: ./frontend/.next/server/app/alltasks/[taskId]/page.js

File: ./frontend/.next/server/app/alltasks/[taskId]/page_client-reference-manifest.js

File: ./frontend/.next/server/app/favicon.ico/route.js

File: ./frontend/.next/server/app/_not-found/page.js

File: ./frontend/.next/server/app/_not-found/page_client-reference-manifest.js

File: ./frontend/.next/server/chunks/[root of the server]__427628._.js
  JavaScript Functions:
    - GET
  Comments:
    //rq6u/6urq/+rq6v/q6ur/6urq/+tra3/Z2dn/wAAAP8AAAD/AAAA9AAAACMAAABZAAAA/wAAAP8AAAD/Hx8f/+3t7f///////////////////////f39/zU1Nf8AAAD/AAAA/wAAAP8AAABZAAAAuwAAAP8AAAD/AAAA/wAAAP9ra2v//////////////////////46Ojv8AAAD/AAAA/wAAAP8AAAD/AAAAuwAAALsAAAD/AAAA/wAAAP8AAAD/CQkJ/83Nzf///////////+Tk5P8YGBj/AAAA/wAAAP8AAAD/AAAA/wAAALsAAABZAAAA/wAAAP8AAAD/AAAA/wAAAP9KSkr//f39//////9ra2v/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAABZAAAAIwAAAPQAAAD/AAAA/wAAAP8AAAD/AQEB/7a2tv/V1dX/CQkJ/wAAAP8AAAD/AAAA/wAAAP8AAAD0AAAAIwAAAAAAAAChAAAA/wAAAP8AAAD/AAAA/wAAAP8xMTH/RERE/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAoQAAAAAAAAAAAAAAHwAAAOIAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA4gAAAB8AAAAAAAAAAAAAAAAAAAA4AAAA4AAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA4AAAADgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAACgAAAA8gAAAP8AAAD/AAAA/wAAAP8AAADyAAAAoAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQAAABdAAAAugAAALoAAABdAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAsAAAAVQAAAIEAAADoAAAA6AAAAIEAAABVAAAALAAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACoAAACFAAAA0gAAAPkAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD5AAAA0gAAAIUAAAAqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAACWAAAA8wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPMAAACWAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABRAAAA4QAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADhAAAAUQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcgAAAPsAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD7AAAAcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHIAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABPAAAA+wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD7AAAATwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGwAAAOQAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADjAAAAGwAAAAAAAAAAAAAAAAAAAAAAAACXAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAACXAAAAAAAAAAAAAAAAAAAAKAAAAPUAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPQAAAAnAAAAAAAAAAAAAACGAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/ODg4/4uLi/+IiIj/iIiI/4iIiP+IiIj/iIiI/4iIiP+IiIj/iIiI/4iIiP+IiIj/iIiI/4iIiP+JiYn/X19f/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAIYAAAAAAAAABwAAANQAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8eHh7/7u7u//////////////////////////////////////////////////////////////////////9TU1P/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA1AAAAAcAAAArAAAA+gAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP9oaGj/////////////////////////////////////////////////////////////////rq6u/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD6AAAAKwAAAFQAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wgICP/Ly8v///////////////////////////////////////////////////////T09P8sLCz/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAABUAAAAggAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/0dHR//9/f3/////////////////////////////////////////////////jY2N/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAIEAAADpAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/62trf///////////////////////////////////////////+Tk5P8XFxf/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA6QAAAOkAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/Kysr//Pz8///////////////////////////////////////ampq/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADpAAAAgQAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/i4uL/////////////////////////////////8zMzP8ICAj/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAIIAAABUAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8WFhb/4+Pj///////////////////////9/f3/SUlJ/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAVAAAACsAAAD6AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP9oaGj//////////////////////6+vr/8BAQH/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPoAAAArAAAABwAAANQAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wgICP/Ly8v////////////09PT/LCws/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA1AAAAAcAAAAAAAAAhgAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/0dHR//9/f3//////42Njf8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAACGAAAAAAAAAAAAAAAnAAAA9AAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/7Gxsf/s7Oz/FxcX/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA9QAAACgAAAAAAAAAAAAAAAAAAACXAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/MzMz/19fX/8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAACXAAAAAAAAAAAAAAAAAAAAAAAAABoAAADjAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA5AAAABsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE8AAAD7AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPsAAABPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHIAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHIAAAD7AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA+wAAAHIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFEAAADhAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAOEAAABRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAACWAAAA8wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPMAAACWAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqAAAAhQAAANIAAAD5AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA+QAAANIAAACFAAAAKgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAACwAAABVAAAAgQAAAOgAAADoAAAAgQAAAFUAAAAsAAAABggAAAAwAAAAYAAAAAEAIAAAAAAAAC0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAAAAKAAAAEwAAABqAAAAswAAAPgAAAD3AAAAswAAAGoAAABLAAAAKAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATAAAAVgAAAKAAAADYAAAA+AAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA+AAAANgAAACgAAAAVQAAABMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJQAAAIsAAADhAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAOEAAACLAAAAJgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYAAACLAAAA7wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA7wAAAIsAAAAWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUQAAANwAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADcAAAAUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAACKAAAA/gAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/gAAAIoAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwAAAK0AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAACtAAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPAAAAuAAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAuAAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAACuAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAK4AAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIoAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAACKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAP0AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD9AAAATwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVAAAA3wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA3wAAABUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACLAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAIsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACMAAADxAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPEAAAAjAAAAAAAAAAAAAAAAAAAAAAAAAIwAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAACLAAAAAAAAAAAAAAAAAAAAEQAAAOQAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8kJCT/aGho/2VlZf9lZWX/ZWVl/2VlZf9lZWX/ZWVl/2VlZf9lZWX/ZWVl/2VlZf9lZWX/ZWVl/2VlZf9lZWX/ZWVl/2VlZf9lZWX/ZWVl/2VlZf9lZWX/ZWVl/1BQUP8BAQH/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADkAAAAEQAAAAAAAAAAAAAAVQAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8cHBz/6+vr/////////////////////////////////////////////////////////////////////////////////////////////////////////////////3Nzc/8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAVQAAAAAAAAAAAAAAoQAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/ZWVl////////////////////////////////////////////////////////////////////////////////////////////////////////////zMzM/wgICP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAoQAAAAAAAAAJAAAA2gAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/BwcH/8nJyf/////////////////////////////////////////////////////////////////////////////////////////////////9/f3/SEhI/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA2gAAAAkAAAAoAAAA+QAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/0VFRf/8/Pz///////////////////////////////////////////////////////////////////////////////////////////+urq7/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA+AAAACgAAABLAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP+qqqr///////////////////////////////////////////////////////////////////////////////////////T09P8sLCz/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAEwAAABqAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8pKSn/8vLy/////////////////////////////////////////////////////////////////////////////////4yMjP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAGoAAAC0AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/iIiI////////////////////////////////////////////////////////////////////////////4+Pj/xYWFv8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAALMAAAD4AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/FBQU/+Hh4f//////////////////////////////////////////////////////////////////////aWlp/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPgAAAD4AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/2VlZf/////////////////////////////////////////////////////////////////Ly8v/CAgI/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPgAAACzAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wcHB//Jycn///////////////////////////////////////////////////////39/f9ISEj/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAALQAAABqAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP9FRUX//Pz8/////////////////////////////////////////////////66urv8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAGoAAABMAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/qqqq////////////////////////////////////////////9PT0/ywsLP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAEsAAAAoAAAA+AAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/KSkp//Ly8v//////////////////////////////////////jIyM/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA+QAAACgAAAAJAAAA2gAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/4iIiP/////////////////////////////////j4+P/FhYW/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA2gAAAAkAAAAAAAAAoQAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/xQUFP/h4eH///////////////////////////9paWn/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAoQAAAAAAAAAAAAAAVQAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP9lZWX//////////////////////8zMzP8ICAj/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAVQAAAAAAAAAAAAAAEQAAAOQAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8HBwf/ycnJ/////////////f39/0hISP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADkAAAAEQAAAAAAAAAAAAAAAAAAAIsAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/RUVF//z8/P//////rq6u/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAACMAAAAAAAAAAAAAAAAAAAAAAAAACMAAADxAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/6ysrP/7+/v/LCws/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPEAAAAjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACLAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/zIyMv99fX3/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAIsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVAAAA3wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA3wAAABUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATwAAAP0AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD9AAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIoAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAACKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAACuAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAK4AAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOAAAAuAAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAuAAAAA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwAAAK0AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAACtAAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAACKAAAA/gAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/gAAAIoAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUgAAANwAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADcAAAAUQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYAAACLAAAA7wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA7wAAAIsAAAAWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgAAAIsAAADhAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAOEAAACLAAAAJQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATAAAAVQAAAKAAAADYAAAA+AAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA+AAAANgAAACgAAAAVgAAABMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAAAAKAAAAEsAAABqAAAAswAAAPcAAAD4AAAAswAAAGoAAABMAAAAKAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACJUE5HDQoaCgAAAA1JSERSAAABAAAAAQAIBgAAAFxyqGYAAAABc1JHQgCuzhzpAAAAOGVYSWZNTQAqAAAACAABh2kABAAAAAEAAAAaAAAAAAACoAIABAAAAAEAAAEAoAMABAAAAAEAAAEAAAAAAEQiOHMAAB4DSURBVHgB7V0JsBXVmW6UXQg8FhFRVkGW6MRoJAnKToyOMTMqiHGwwmSqBsSNqUmhiAiYRJNMMpOqKM4UKNSYMtbEmdEYGUcJi8FxX0DlsYjghoobEngIyJvvu9CPvo97b/e9vZ3T/f1V33t9u0+f5Tvn//v0+c853cKRZIGBrihEZ6AT0BE4CegD9AROALoBXYDuQAugDmgDeKURP3YADcBO4DPgPWA78DbwLvAmsAvgdeIT4CAgsZQBNgaJHQxQganQvYDBQP/DoFLTAFD5aQRaA3HKXkRO4+AagHdwvA3YDLwB0FjQaNCYSAxnQAbAzAo6GdniE3wI8DVgIHAiQAPAJ7zJsgeZc3sN63D8KvAywN4DjYXEIAZkANKvjJbIAhV8KDAS+AowAOCTPkvyFgqzBXgeWAOsBzYBBwBJSgzIAKRDfD8kS0UfBwwHTgHYfc+TfIrC8rXhGeB/AfYWaCAkCTIgA5AM2Xwvp8KPAC4ATgN6AJIjDLyPw1eAZcAK4DWA4w2SGBmQAYiP3LaI+gzgO8B5AJW+FSDxZ+BzBKkHHgZoEF4AGgBJxAzIAERMKKI7E7gEOB+g0h8LSGpngGMEHEh8CHgQoDGgy1IiBoxhgO/004GVAEfB2UCF6DlgL2AlMAPoDUjEQGoM8L1+LLAIoNtLCp8sB3QpLgbOAehJkYiBRBjogVSmAk8C+wEpfrocsA5WA+yBdQUkYiAWBuiqmw3QVSWlN5ODjaib+QBfySRiIBIGOEHn18AHgBTfDg74SvYzYBggEQM1MTAEd1HxPwak+HZy8NHhOvwy/kvEQCAGpPh2KnslI+0agkGBWoAC5ZKBXij1zwE98bNnAFzjwFeD2wGNEYAEySEGOuDfLGAb4DYU/c82FzQEM4E6QJJjBi5G2Z8DpPD55IB1PxHQPAKQkCfhFN0HgIOAlF8c3I92cDogyTgDHVG+mwEOCknxxYG3DXB7M87z0GsBSMiijEehngK8la5j8dG8DTyNNjImiwqQ1zJ1Q8H/BeDa8uaVrd/ipFQb+DPaCr0F6g2ABJuFO+68CJSqZJ0TL35tgL0BLviSWMZAe+R3LrAb8KtkXRdHldoAewNsS9zgRWIBA5z//ShQqVJ1TfxU2wYeQ5vS2gLDDcBk5O9dKb+MX0xt4D3E+z1AYhgDnM33S4DbR1Vr2RVenFXTBtjG2Nb4mikxgIEByAO7Z9VUosKKr7BtYDnaXH8D2n+us8BR/s1A2MrU/eKwljbwOtqe1V4Cm3esnQby7wG4RZdEDKTBAOcJ/DWwE+C6AuvERgPQBizfBtwK8FgiBtJkgG3wPIBuQn7y7AtAEhMDtLj3ArV013SPeIu7Dfw72mbePvEWk6ofHe1JOLUCiLsSFb84DtMGuEMx26okQga4lROnZYapGN0r/pJqA2yr3EVaEgEDwxHHJiCpylM64jqKNrABbfbrEbT/XEcxGqXnF2CiqBDFIR6TbgNsu2zDxorJXoBRYO23QE9j2VPGxEBlBrgBzbcBugi556RxYqoBcJX/BOMYU4bEQHUMcJq6sUbARANA5b8P0JO/uoam0OYyQCPAuQLG9QRMMwCjQZKUHyRIMscAXwdoBJ4HtgJGSAsjcnEoExzt/0/gRIPypKyIgagZ4HJ1bkdPV2HqYooBGAAmlgEDU2dEGRAD8TPARUTnA3RvpyrHpJr6ocQ5a4rdfim/AZWhLCTCAB94vwFSnzGYdg/gSyDhD8A5gEQM5I2BVSjwdwGuJkxF0hwE5Oqpu4ALUym5EhUD6TPQF1k4GXgEOAAkLmkagAUo7YzES6wExYBZDJyO7PBhyF2tEpe0DMA0lPTHgAljEImTrgTFQDMGuGbgA4DzBBKVNMYAxqKE/w3QLyoRA2LgEAP8/gDHA/6YJCFJG4B+hwvYN8lCKi0xYAkDbyCfEwC6CRORJLvgx6FEi4G+iZRMiYgB+xjgA/LfAOpKIpLkGMBPUaLLEymVEhED9jJAI9AOeDSJIiRlAKj4twNJ9jiS4E9piIE4GPgaIt0AvBpH5N44W3h/xHQ8FPEuB7S0NyaCFW0mGdiOUo0HXouzdHH3ANiV4S6+p8VZCMUtBjLIAL1kpwIPAPvjKl/cBuAmZHxqXJlXvGIg4wz0R/n2AaviKmecrwCjkemHgcRGNOMiSfGKgRQZ2IO0LwBiMQJxGYBOyPDjwFmARAyIgXAMvIzbOYHu43DRHH13XK8A85HUpKOT0xkxIAZqYIAD6BxP+58a7q14Sxw9gNFI8fcA90GTiAExEA0DnyMavgpEOlU4agPA9f10+anrDxIkYiBiBp5BfHwV2B1VvFG/AvwDMjYlqswpHjEgBooY6IVfDcDqorMhfkTZA+C65pUAv+ArEQNiIB4GPkG03Dp/XRTRHxNFJIijNTAXkPJHRGhS0XTo0MHp3bt3UskpnfAMUMcWAJHobiSRIDPc1usSQGIZA1OnTnWWLFnitGrVyrKc5zq7F6H03DvACOHA3/NAo2AXB8cff3zjli1bGimTJ09W/dnVhqlzRnjarpPi26X4bn3NmzevoPz8s379+sa6ujoZAbuMwA9Rl6lKX6TOVUtqOJZxMHjw4MYdO3Y0GQAezJ49W/VoVz2+Cd3rCaQmtyFlNRrLOGjRokXj3XffXaT8/PHhhx829u/fX/VpV33+U1raPwgJvy8DYJ8BHDt2bOO+ffuOMgA8sWjRIhkAuwzAp9BB7rmRuNyBFNVYLOOgbdu2jStWrCip/Dy5d+/exhEjRqhe7arXO5PW/mFI8GMZAPsM4JQpU8oqv3th+fLljXALygjYYwQ4OSjRXoCe/vY0jiZFpttvw4YNrp5X/C+3oHXGPbFegJ7+Fio/e2tet19F7cfF+vp6uQXtqmf2AoYAVUkti4HoexxXVSoKnDoDcPs5CxcudNq3bx8oL926dXM+++wz54knnggUXoFSZ4DfF+TankfizElfRK6Rf7ueDI3l3H5+vQC5Ba17DfgI+tk/TgMwH5E3vVPq2A4uxo0b17h//34/fS95XW5BO+rYo4uz4zIAXRDxRk9CMgQWGEM/t19JrfeclFvQOgOwBTraPQ4jwE96S+kt4yCI28+j7yUP5Ra0rt1/P2oD0AYR/kkGwK6GUI3br6Tme07KLWhV3f8fdJU6G5mcg5j4gQL1ACzioBq3n0fXSx7KLWhV2+cGomODaH9QNyAH/84MEqHCmMFAtW4/v1zTLbhr1y65Bf2IMuM69fog8GAU2eFGhNsBPf0t4aBWt1/JR7/npNyCVukA3fV9ojAAV0n5rar4Rrr9yq328+hzTYdyC1rVFjhwH0q4UdwqQE9/SzgI6/bzswpyC1qlC9TdlmEsAN/7d8sA2FPpV155pZ8Oh74ut6A17WEPdDfU2N2PpPzWVHYj3X4bN24MreBBIrj88svVK7SjV/gT6HBNwsUFLwGqaEs4iNLt52cE5Ba0Ri9ehA63q8UCjMBNe2UA7KjoUpt8+ilx2Os33XSTHg7mPxw4J+AbtRiAH0v57VB+uv3uueeesPpc9f1yC9rRPqDHt1VrANhlUPfffOteeALH6fbzswqLFy9WL8D8dvIC9Jmv9IHlDITkCKIq13AO4nb7+RkAuQWt0BG+yp9dSvvLfRuQ84hrGjgolYjOxcfAxIkTndGjR8eXgE/Mbdq0cRYsWKBvC/rwlPJlLgzimF4goVF4HNDT33AOknT7+fUE5BY0Xl8eg06Xe+AXGYa++MV5xDIAhnOQpNvPzwDQLdi5c2e1GXPbzAfQaep2kZRaDTgKIX5QFEo/jGOAq/3uuuuuwJt8xl0ArhbcvXu3s3r16riTUvy1MXAcbuPU4Hrv7aW6BBO8AXRsHgNw+zmzZs1yunbtalTmrr/+egffFjQqT8pMEQPji36V+NEa554D1JUzmIM03X5+rwJyCxqtO9Rt6nhZGYwr/MCADIChHKTt9vMzAHILGq071G3qeJM0fwXg98U6N13VgXEMTJo0KVW3nx8hcgv6MZTqdeo2v+zVJM0NwDebrujAOAa6d+/uzJkzx7h8Nc8QPj/uXHrppc1P67cZDJzrzYbXAPD4LO9FHZvFwIwZM5yBAwealakyubnlllucurq6Mld1OkUGvoK0m7x/XgNwAi4MSDFjSroCA3T7XX311RVCmHXp1FNPda66irvJSQxjgE+QnqXyxCWDBwANABrGQVqr/fwG/Pyua7WgkbpEHT/HNQDeHkBR18ANoP/pM8B36iuuuCL9jFSZA85TwJ4BVd6l4DEzwO4/B/sL4jUATSfdi/qfPgNw+xUG/lq1apV+ZmrIAQ3XiBGB16HUkIJuqYGBprE+1wDw/2k1RKRbYmYg7dV+YYsnt2BYBmO5n+MALbwx82uimwG9/xvEgUmr/fze9/2ua7WgUbrFr3zza99NywPpASg5MshAknQYsMnt58cQ3YJYLegXTNeTYYD6TjQZgJNx3J4nJGYwQLcfDUBWhG5Bm9yYWeG9TDk64nwvXnPHAPqXCajTKTBg6mq/sFRcd911Wi0YlsTo7h/CqFwDoAlA0REbOqaxY+10+/kVnHsGyC3ox1Ji1/sxJdcA9EksWSVUkQHb3X4VC4eLcgv6MZTY9cJDnwaAHw8svA8klrQSKsuA6av9ymY84AW5BQMSFX8wev6OpQHoBGjVRvyE+6YAt58Vq/18C+ITgK84Wi3oQ1L8l7mdVGfXANAISFJmgItnbFntF5aquXPnyi0YlsRw99MnKwMQjsPo7rZttV/YkmfNzRmWjxTu50O/E3sA9AnywwGSlBjIqtvPj86ZM2fKLehHUnzXuTdgRxqA3vGloZiDMJBVt59f2bVa0I+h2K+fRAOgKcCx81w+gay7/cqX/NAVuQX9GIr1eh8aAE4DlqTEQNbdfn60yi3ox1Cs13tyc4C/BbQXQKw8l46cm3wuXbrUuA98lM5tfGf79evnrF+/3nnllVfiS0Qxl2LgTb0ClKIloXNcHJMXt58fpXIL+jEUy/Vu7AFcCxSWBsaShCItyQDdYAsXLjTm234lM5ngSX1bMEGyjyS1kz0ALdI+QkgiR67bj41ecoQBrRY8wkVCR91pANollJiSOcxAXt1+fg1AqwX9GIr8+jHcF+wLgIZAkgADdPstW7bM6M97JUBD2STwbUFn/Pjxzpo1a8qG0YXIGPicii/lj4xP/4hs3+TTv4ThQtBALliwwLF1F+RwpU/87jYcBJyXeLI5TVBuv2AV37dvX6e+vl5uwWB0hQqlp38o+qq7mYNccvv5c8ZB0nnz5unbgv5UhQ6hHkBoCoNFMGzYMOfOO+902rXTmGsQxrhOoKGhwVm1alWQ4ApTIwPsAXxe4726LSADfKLdcMMNTpcuha3YA96lYNdee616TPE2g4M0AJ/Em4Zi56j2ZZddJiKqZIAGc86cOVXepeBVMPAhDcDBKm5Q0CoZYJf/5ptv1qh2lby5wWk4R40a5f7U/2gZaKAB2BFtnIrNy8DkyZOdc88913tKx1UwwNWC8+fPd1q35v4VkogZ+JSDgOyb9o04YkUHBnr06OEsWbJE7/4hW0OfPn2cjRs3OmvXrg0Zk25vxsBm9gA+anZSPyNigINYAwYMiCi2/EbDQVS+RtXVafPqiFvBe+wBsH96dsQR5z66oUOHyu0XYSuQWzBCMo9EtZw9gO1HfusoCgb4xLrxxhvV9Y+CTE8c11xzjdyCHj4iOHyLBmBbBBEpCg8DEyZMcDj4J4mWAfYC5BaMlNPtNABvRxplziOj248fwGzZkl9ck0TNgNyCkTJa2BJsF6LcF2m0OY6MDXTkyJE5ZiDeosstGBm/nAG8iz2AnYcRWcx5jYhuP3VR4699GljNrAzNc0HvaQA+PYzQMeY9Ag5Sye0XfyvgICsNrdyCobguMgCaCxCKS+yrDrff9OnTQ8ai24MyMGjQIIfLqyU1M8A1QIVNQbklmKYD18yj48jtF4K8ELdqW/UQ5DnOO7j7AF8BKK8f+qe/tTDA1X5y+9XCXLh79G3BUPwV3P+uAXgjVFQ5vpluP76Pyu2XTiOg4ZXXpSbuCw991wCsrykK3VQYjVYDTK8huN8W1GrBqutgC+9wDQDfBzgfQFIFA3L7VUFWjEHlFqya3D244y3e5RqA93BMSKpgQG6/KsiKMajcglWTy/U/BX13DQBdAuwFSAIyQLfftGnTAoZWsLgZoFuQy68lgRjg9P+C6981AI04sSnQrQpUYICbfHIUWmIOA1otGLgu1iFkYStA1wDwzucC357zgFrtZ2YDkFswcL285ob0GgCe5KQgSQUGtMlnBXIMuCS3oG8lUMdfckN5DcBWnHzfvaD/pRngIhRt8lmaGxPOyi3oWwscAGzaA8RrAHhB4wAV+JPbrwI5Bl2iW3DSpEkG5ciorHACUJPHz2sAiroGRmXZkMzI7WdIRfhkg25BbSJaliSO9TV9C4SbgnrlOPyQ6fQycvhYm3yWIMXgUxwQ3Lt3r7Ny5UqDc5lK1n6BVJtm/np7AMzNqwD3B5B4GNBqPw8ZFh1qteBRlUXdbvIA8GpzA8D5wXxHkHgY0Lf9PGRYdCi34FGVRd0urAFwrzQ3ANwb8Cn3ov47hc95c7Vfq1atRIeFDMgtWFRp1O2i/T+bGwCGfrzolpz/kNvP7gYgt2BR/T1W9As/mg8C8vpe4AqAA4K5Frr9li5dqg98WN4K9G3BQgV+gL8/AorG+Er1AN5EoJcLt+T8j9x+2WgAcgsW6pHz/6nbRVKqB8CFQd2A84pC5uwH3X533HGH0759+5yVPJvFlVvQuQM1+2Tz2i3VA2CYNQA/HJBLcd1+bDSS7DBAt+App5ySnQIFL0kDgq4oFbycAeCH2Iv8haVuzuo5uf2yWbM06JwhmEPZiDLXlyp3OQPAgcBHS92Q9XPuJp9y+2WzpnP66bY/oDbZCzhKyhkABnwIKPIZHnV3Bk/ktIFksCZLFymHbkG+yj9Smo3SbkA3LLcMugg4wT2R9f9y+2W9hg+Vj27BTZs2OWvX8k0388Lp/bcCB0qVtFIPgF2GZaVuyuo5uf2yWrPF5eIgLz/hnpNvCz6M0vOVvqSUcgN6A3LSwBQg8/Ng5fbzVnv2j7t16+Y0NDQ4q1atynJh96BwswDu9VFSWpQ8e+RkSxwuB0YeOZW9I35U4r777nMuvvji7BVOJSrLAA3A8OHDnXXrOEcmk7IapRoP7C9XOip4JeF7w31Apg0Au4JsBPX19U5jI+dBSfLAwLHHHpv1ad73ox7LKj/r2K8HwDB9gGeA4/lDIgbEgBUMcNuvs4CK3/uoNAjolpIbCNKPKBEDYsAeBjiAX1H5WZQgBoDh7gVyNyeABZeIAQsZYLf/7iD5DmoAuDbghSARKowYEAOpM8BX9meD5CKoAeBson8NEqHCiAExkDoD7LFTZ30lyCCgGwkHAbmlUD/3hP6LATFgHAObkKOvAx8HyVnQHgDj4o4ii4JEqjBiQAykxgDd9oGUnzmspgfA8P0Bvlt04Q+JGBADRjHAh/RwYGvQXFXTA2Cc3FL4t0EjVzgxIAYSZWApUttaTYrV9gAY9xCAWwt15g+JGBADRjDwCXJxLsDVf4Gl2h4AI14P8D1DIgbEgDkMUCerUn5mvZYeAO8bCnBugHoBZEMiBtJloKanP7NcSw+A970GqBdAJiRiIH0Ganr6M9u19gB4L3sBHAvoxB8SMSAGUmGAI/989+fGn1VLrT0AJsRegOYFVE25bhADkTLAOf81KT9zEaYHwPt7Ak8DJ/OHRAyIgUQZ4JLfbwBba03Vb0swv3j/jADcVGSCX0BdFwNiIHIG5iDGR8PEGrYHwLQ7AKuAr/KHRAyIgUQY4OrcMcBnYVIL2wNg2twnYAcwEYjCoCAaiRgQAz4MXI3rL/mE8b0cZhDQG/mD+PGQ94SOxYAYiI2B3yFmbvcdWqJ8Yp+G3PBVoC50rhSBGBAD5RjgpJ/RwNpyAao5H8UrgJse/ZGtgLHuCf0XA2IgcgZuRYwPRBVrlD0A5uk44I/A2fwhEQNiIFIGnkNs44BQA3/eHEXZA2C83IyQS4YnA37fHEAQiRgQAwEZoMt9KrAhYPhAwaI2AEz0DaA7wI0JJGJADETDwD8jmshn3kb9CuAWtQsOVgIcGJSIATEQjgF2/ccDO8NFc/TdUbkBm8fMPcmuA/Y0v6DfYkAMVMXAboT+IRC58jMXcbwCMF7KVoDjAGMAiRgQA7Ux8BPctrS2W/3viusVwE25PQ44SYjdF4kYEAPVMUCP2oVAQ3W3BQ8dtwFgTrhvwOMAVw5KxIAYCMYAV/rR5cdl97FJnK8Abqa5TuBt4K+AuMYc3LT0XwxkgYEDKMQ0YEXchUnCALAMrwKcIsy1yxIxIAYqM/ArXP5F5SDRXE3iFcDNKWcJcsGQpgq7jOi/GDiaAT71vwNw9D92SdIAsDADgMeAfvwhEQNioIiBrfjFByQn0yUiSb+Tv45S/R3AaY0SMSAGjjCwC4c/ABJTfiad1BgA03KFBeSSxguApHsgbh70XwyYxMAXyMxM4D+SzlQaBoBl5NTGjsA3+UMiBnLOwE9RfiJxScsAsKBPABwLOJ0/JGIgpwzci3L/I0DXX+KSdhe8E0rMmYKjEi+5EhQD6TPwJ2ThL4HI1vdXW6SkBwGb528nTvwN8GzzC/otBjLOANv85UBqyk9+0+4BMA+UgcAyYAB/SMRAxhnYhPKdD9Arlqqk3QNwC09CrgDedU/ovxjIKANs41OA1JWf/KY5CMj0vfIOfvBjB98GOngv6FgMZIQBLvD5HrDGlPKYZADIyVbgeUBGACRIMsUAlZ/v/CtNKpVpBoDcbAU4T0BGACRIMsEAlZ8b5a4yrTQmGgBytA1QT8C01qL81MKA++Q3TvlZGFMNAPO2FaAR+BbAWYMSMWAbAxzw4zv/SlMzbrIBIGdbgSeBkUBXQCIGbGFgMzLKbj8n+0hCMnAK7n8aaBTEgQVtgG11ECCJkIGTENdqQEZAHJjcBlagjbKtWiGmvwJ4SeSUyf8CSK4WEHmZ0bEpDPwGGfk+wA/lWiE2GQASuhfglGHOYOT+gqbMZERWJDlmgOv5fwlwTb82u0moIUxHOlxMZHJ3UHnLfv1Q4acl1OaVTDMGxuE351RL0cRBGm2AbW98szapnwkz0B/pLQfSaABKM7+8P442NyDhth55craNAZQigPsL/g7gZ8jOBjQuABIksTHA9/1fAX8PvB9bKoq4Jga4pJhTL/VkFgdxtAHO7OPkHonBDAxD3h4D4mgAijO/vD6KNsW2JbGAgbbI41yAI7RSWnEQpg3wCz1sS3zFlFjGwFjkV1OIZQBqNQAvof3Q0ySxmIE65P12QL0BGYKghoATzjjQ1w2QZISBMSiHegMyAn5G4Cm0E/n2M6L0zYvB3sBsgK5Dv4ag6/ni6CO0iZsB7T0BErIuXEx0PyAlFwcH0Q4eAE4DJDlioCXKOhHg/oMyBPnkgHV/CSDJMQN8LZgJbAdkCPLBAfecnAV0ACRioMBAP/ylt0CGILtG4GPU78+BXoBEDJRkgFs5/RrgoJB6BNnggIrPOh0KSMRAIAa+jFAyBHYbACl+oKauQJUY4PzvnwF6NbDHGHyA+tITv1Kr1rWqGeAYwXxgI6BXAzM52IK64TwP7iItEQOxMMDvE1wFPAHsB2QM0uWAdcBvR0wFegASMZAIA5xHcA6wGOCXjWUIkuWAr2SLAC74ag1IxEBqDPRGyjOAlUADIGMQDwd7DnM8Hf/5SiYJyUCLkPfr9mIGuB3ZGcB3gYsADiCypyCpnQFuwbUO4HbwnLL7PCCJiAEZgIiILBFNO5z7KnA+cCEwGGgDSPwZ4Hs9lZ678PweeBHgEl1JxAzIAERMaJno2uI8J6GMAWgQOMdAA1YgwSPv45hK/wiwBuBmHPsASYwMyADESG6FqPvjGleffQvgTsZ0W3UG8iSforCbgaeB5QAV/g1AkiADMgAJkl0mKY4RDASGACOAMwEaiJOBLAk9Ja8DVPTVwGvAJuAAIEmJARmAlIj3SbYXrtOz8BcABxLZWzgJ6Am0B0yWXcgcXXTvAlTwZ4H1wDbgLUBiEAMyAAZVhk9WuuM6DQANQT+Arw19ABoLLmnuBHwJ4HhDnML3cnbfdwIfATsAzsAj6gE+6WkAOA9fYjgDMgCGV1CA7NH16BoAGoGOAHsPJwJur+EEHNM48Ho7gMaked1/jnOfAJzDQKWmAn8IvAdQobcBbwN8wlP5aQRoACQWM/D/QN+5DmrsiuEAAAAASUVORK5CYII=", 'base64');
    //# sourceMappingURL=%5Broot%20of%20the%20server%5D__427628._.js.map

File: ./frontend/.next/server/chunks/node_modules_next_425054._.js
  JavaScript Functions:
    - isThenable
    - _logProxy
    - disable
    - createComponentLogger
    - getBaggage
    - getActiveBaggage
    - setBaggage
    - deleteBaggage
    - createBaggage
    - baggageEntryMetadataFromString
    - createContextKey
    - getValue
    - setValue
    - deleteValue
    - logProxy
    - _consoleFunc
    - createLogLevelDiagLogger
    - _filterFunc
    - registerGlobal
    - getGlobal
    - unregisterGlobal
    - _makeCompatibilityCheck
    - isExactmatch
    - _reject
    - _accept
    - isCompatible
    - createNoopMeter
    - isSpanContext
    - getSpan
    - getActiveSpan
    - setSpan
    - deleteSpan
    - setSpanContext
    - getSpanContext
    - validateKey
    - validateValue
    - createTraceState
    - isValidTraceId
    - isValidSpanId
    - isSpanContextValid
    - wrapSpanContext
    - __nccwpck_require__
    - isBubbledError
    - closeSpanWithError
    - getSpanId
    - onCleanup
    - getTracer
    - did
    - did
    - isDynamicServerError
    - isStaticGenBailoutError
    - constructs
    - makeHangingPromise
    - ignoreReject
    - createDynamicTrackingState
    - createDynamicValidationState
    - getFirstDynamicReason
    - markCurrentScopeAsDynamic
    - trackFallbackParamAccessed
    - throwToInterruptStaticGeneration
    - trackDynamicDataInDynamicRender
    - abortOnSynchronousDynamicDataAccess
    - abortOnSynchronousPlatformIOAccess
    - trackSynchronousPlatformIOAccessInDev
    - abortAndThrowOnSynchronousRequestDataAccess
    - Postpone
    - postponeWithTracking
    - createPostponeReason
    - isDynamicPostpone
    - isDynamicPostponeReason
    - createPrerenderInterruptedError
    - isPrerenderInterruptedError
    - accessedDynamicData
    - consumeDynamicAccess
    - formatDynamicAPIAccesses
    - assertPostpone
    - createPostponedAbortSignal
    - annotateDynamicAccess
    - useDynamicRouteParams
    - trackAllowedDynamicAccess
    - createErrorWithComponentStack
    - throwIfDisallowedDynamic
    - cloneResponse
    - generateCacheKey
    - createDedupeFetch
    - dedupeFetch
    - that
    - to
    - that
    - schedulerFn
    - in
    - to
    - to
    - to
    - to
    - scheduleOnNextTick
    - scheduleImmediate
    - atLeastOneTask
    - waitAtLeastOneReactRenderTask
    - indexOfUint8Array
    - isEquivalentUint8Arrays
    - removeFromUint8Array
    - voidCatch
    - chainStreams
    - pass
    - streamFromString
    - streamFromBuffer
    - streamToBuffer
    - streamToString
    - createBufferedTransformStream
    - flush
    - createInsertedHTMLStream
    - renderToInitialFizzStream
    - createHeadInsertionTransformStream
    - createDeferredSuffixStream
    - flush
    - createMergedTransformStream
    - startPulling
    - createMoveSuffixStream
    - createStripDocumentClosingTagsTransform
    - createRootLayoutValidatorStream
    - chainTransformers
    - continueFizzStream
    - continueDynamicPrerender
    - continueStaticPrerender
    - continueDynamicHTMLResume
    - createDocumentClosingStream
    - getRequestMeta
    - setRequestMeta
    - addRequestMeta
    - removeRequestMeta
    - getNextInternalQuery
    - fromNodeOutgoingHttpHeaders
    - splitCookiesString
    - skipWhitespace
    - notSpecialChar
    - toNodeOutgoingHttpHeaders
    - validateURL
    - normalizeNextQueryParam
    - detectDomainLocale
    - removeTrailingSlash
    - will
    - parsePath
    - addPathPrefix
    - addPathSuffix
    - pathHasPrefix
    - addLocale
    - formatNextPathnameInfo
    - getHostname
    - normalizeLocalePath
    - removePathPrefix
    - getNextPathnameInfo
    - below
    - parseURL
    - middleware
    - __export
    - __copyProps
    - __toCommonJS
    - stringifyCookie
    - parseCookie
    - parseSetCookie
    - compact
    - parseSameSite
    - parsePriority
    - splitCookiesString
    - skipWhitespace
    - notSpecialChar
    - replace
    - normalizeCookie
    - isWebNextRequest
    - isWebNextResponse
    - isNodeNextRequest
    - isNodeNextResponse
    - createAbortController
    - signalFromNodeResponse
    - wrapClientComponentLoader
    - getClientComponentLoaderMetrics
    - isAbortError
    - createWriterFromResponse
    - onDrain
    - that
    - pipeToNodeResponse
    - fromResponseCacheEntry
    - toResponseCacheEntry
    - routeKindToIncrementalCacheKind
    - isFetchPatched
    - validateRevalidate
    - validateTags
    - trackFetchMetric
    - createPatchedFetcher
    - getRequestMeta
    - getNextField
    - handleUnlock
    - has
    - has
    - __nextGetStaticStore
    - patchFetch
    - detectDomainLocale
    - removeTrailingSlash
    - will
    - parsePath
    - addPathPrefix
    - addPathSuffix
    - pathHasPrefix
    - addLocale
    - formatNextPathnameInfo
    - getHostname
    - normalizeLocalePath
    - removePathPrefix
    - getNextPathnameInfo
    - below
    - parseURL
    - _export
    - did
    - did
    - _export
    - fromNodeOutgoingHttpHeaders
    - splitCookiesString
    - skipWhitespace
    - notSpecialChar
    - toNodeOutgoingHttpHeaders
    - validateURL
    - normalizeNextQueryParam
    - _export
    - middleware
    - _export
    - _export
    - handleMiddlewareField
    - ImageResponse
    - __nccwpck_require__
    - _export
    - _interop_require_default
    - isBot
    - userAgentFromString
    - userAgent
    - after
    - _export_star
    - _export
    - isDynamicServerError
    - _export
    - isStaticGenBailoutError
    - constructs
    - makeHangingPromise
    - ignoreReject
    - _export
    - _export
    - _interop_require_default
    - createDynamicTrackingState
    - createDynamicValidationState
    - getFirstDynamicReason
    - markCurrentScopeAsDynamic
    - trackFallbackParamAccessed
    - throwToInterruptStaticGeneration
    - trackDynamicDataInDynamicRender
    - abortOnSynchronousDynamicDataAccess
    - abortOnSynchronousPlatformIOAccess
    - trackSynchronousPlatformIOAccessInDev
    - abortAndThrowOnSynchronousRequestDataAccess
    - Postpone
    - postponeWithTracking
    - createPostponeReason
    - isDynamicPostpone
    - isDynamicPostponeReason
    - createPrerenderInterruptedError
    - isPrerenderInterruptedError
    - accessedDynamicData
    - consumeDynamicAccess
    - formatDynamicAPIAccesses
    - assertPostpone
    - createPostponedAbortSignal
    - annotateDynamicAccess
    - useDynamicRouteParams
    - trackAllowedDynamicAccess
    - createErrorWithComponentStack
    - throwIfDisallowedDynamic
    - _export
    - describeStringPropertyAccess
    - describeHasCheckingStringProperty
    - throwWithStaticGenerationBailoutError
    - throwWithStaticGenerationBailoutErrorWithDynamicError
    - isRequestAPICallableInsideAfter
    - connection
    - is
    - is
    - is
    - is
    - cached
    - is
    - is
    - patchFetch
  Comments:
    //# sourceMappingURL=module.compiled.js.map
    /*#__PURE__*/
    /**
   * `PAGES` represents all the React pages that are under `pages/`.
   */
    /**
   * `PAGES_API` represents all the API routes under `pages/api/`.
   */
    /**
   * `APP_PAGE` represents all the React pages that are under `app/` with the
   * filename of `page.{j,t}s{,x}`.
   */
    /**
   * `APP_ROUTE` represents all the API routes and metadata routes that are under `app/` with the
   * filename of `route.{j,t}s{,x}`.
   */
    /**
   * `IMAGE` represents all the images that are generated by `next/image`.
   */
    //# sourceMappingURL=route-kind.js.map
    /**
 * Contains predefined constants for the trace span name in next/server.
 *
 * Currently, next/server/tracer is internal implementation only for tracking
 * next.js's implementation only with known span names defined here.
 **/
    // eslint typescript has a bug with TS enums
    /* eslint-disable no-shadow */
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // nested inner span, does not require parent scope name
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=constants.js.map
    /**
 * Check to see if a value is Thenable.
 *
 * @param promise the maybe-thenable value
 * @returns true if the value is thenable
 */
    //# sourceMappingURL=is-thenable.js.map
    // we want to allow users to use their own version of @opentelemetry/api if they
    // want to, so we try to require it first, and if it fails we fall back to the
    // version that is bundled with Next.js
    // this is because @opentelemetry/api has to be synced with the version of
    // @opentelemetry/tracing that is used, and we don't want to force users to use
    // the version that is bundled with Next.js.
    // the API is ~stable, so this should be fine
    /** we use this map to propagate attributes from nested spans to the top span */
    /**
   * Returns an instance to the trace with configured name.
   * Since wrap / trace can be defined in any place prior to actual trace subscriber initialization,
   * This should be lazily evaluated.
   */
    // Active span is already set, too late to propagate.
    // coerce options form overload
    // Trying to get active scoped span to assign parent. If option specifies parent span manually, will try to use it.
    // If there's error make sure it throws
    // Need to pass down the promise result,
    // it could be react stream response with error { error, stream }
    //# sourceMappingURL=tracer.js.map
    //nextjs.org/docs/messages/public-next-folder-conflict`;
    //nextjs.org/docs/messages/404-get-initial-props`;
    //nextjs.org/docs/messages/gssp-export`;
    //nextjs.org/docs/messages/gssp-component-member`;
    //nextjs.org/docs/messages/non-standard-node-env`;
    //nextjs.org/docs/messages/ssg-fallback-true-export`;
    /**
 * The names of the webpack layers. These layers are the primitives for the
 * webpack chunks.
 */
    /**
   * The layer for the shared code between the client and server bundles.
   */
    /**
   * The layer for server-only runtime and picking up `react-server` export conditions.
   * Including app router RSC pages and app router custom routes and metadata routes.
   */
    /**
   * Server Side Rendering layer for app (ssr).
   */
    /**
   * The browser client bundle layer for actions.
   */
    /**
   * The layer for the API routes.
   */
    /**
   * The layer for the middleware code.
   */
    /**
   * The layer for the instrumentation hooks.
   */
    /**
   * The layer for assets on the edge.
   */
    /**
   * The browser client bundle layer for App directory.
   */
    // pages api
    // app router pages and layouts
    //# sourceMappingURL=constants.js.map
    //# sourceMappingURL=module.compiled.js.map
    //# sourceMappingURL=react.js.map
    //# sourceMappingURL=hooks-server-context.js.map
    //# sourceMappingURL=static-generation-bailout.js.map
    /**
 * This function constructs a promise that will never resolve. This is primarily
 * useful for dynamicIO where we use promise resolution timing to determine which
 * parts of a render can be included in a prerender.
 *
 * @internal
 */
    // We are fine if no one actually awaits this promise. We shouldn't consider this an unhandled rejection so
    // we attach a noop catch handler here to suppress this warning. If you actually await somewhere or construct
    // your own promise out of it you'll need to ensure you handle the error when it rejects.
    //# sourceMappingURL=dynamic-rendering-utils.js.map
    //# sourceMappingURL=metadata-constants.js.map
    /**
 * The functions provided by this module are used to communicate certain properties
 * about the currently running code so that Next.js can make decisions on how to handle
 * the current execution in different rendering modes such as pre-rendering, resuming, and SSR.
 *
 * Today Next.js treats all code as potentially static. Certain APIs may only make sense when dynamically rendering.
 * Traditionally this meant deopting the entire render to dynamic however with PPR we can now deopt parts
 * of a React tree as dynamic while still keeping other parts static. There are really two different kinds of
 * Dynamic indications.
 *
 * The first is simply an intention to be dynamic. unstable_noStore is an example of this where
 * the currently executing code simply declares that the current scope is dynamic but if you use it
 * inside unstable_cache it can still be cached. This type of indication can be removed if we ever
 * make the default dynamic to begin with because the only way you would ever be static is inside
 * a cache scope which this indication does not affect.
 *
 * The second is an indication that a dynamic data source was read. This is a stronger form of dynamic
 * because it means that it is inappropriate to cache this at all. using a dynamic data source inside
 * unstable_cache should error. If you want to use some dynamic data inside unstable_cache you should
 * read that data outside the cache and pass it in as an argument to the cached function.
 */
    // Once postpone is in stable we should switch to importing the postpone export directly
    // inside cache scopes marking a scope as dynamic has no effect because the outer cache scope
    // creates a cache boundary. This is subtly different from reading a dynamic data source which is
    // forbidden inside a cache scope.
    // If we're forcing dynamic rendering or we're forcing static rendering, we
    // don't need to do anything here because the entire page is already dynamic
    // or it's static and it should not throw or postpone here.
    //nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);
    // We aren't prerendering but we are generating a static page. We need to bail out of static generation
    //nextjs.org/docs/messages/dynamic-server-error`);
    // We aren't prerendering but we are generating a static page. We need to bail out of static generation
    //nextjs.org/docs/messages/dynamic-server-error`);
    // inside cache scopes marking a scope as dynamic has no effect because the outer cache scope
    // creates a cache boundary. This is subtly different from reading a dynamic data source which is
    // forbidden inside a cache scope.
    // Despite it's name we don't actually abort unless we have a controller to call abort on
    // There are times when we let a prerender run long to discover caches where we want the semantics
    // of tracking dynamic access without terminating the prerender early
    // When we aren't debugging, we don't need to create another error for the
    // stack trace.
    // We don't actually have a controller to abort but we do the semantic equivalent by
    // advancing the request store out of prerender mode
    // We always log Request Access in dev at the point of calling the function
    // So we mark the dynamic validation as not requiring it to be printed
    // When we aren't debugging, we don't need to create another error for the
    // stack trace.
    //nextjs.org/docs/messages/ppr-caught-error`;
    //nextjs.org/docs/messages/ppr-caught-error');
    // We mutate because we only call this once we are no longer writing
    // to the dynamicTrackingState and it's more efficient than creating a new
    // array.
    // Remove the "Error: " prefix from the first line of the stack trace as
    // well as the first 4 lines of the stack trace which is the distance
    // from the user code and the `new Error().stack` call.
    // Exclude Next.js internals from the stack trace.
    // Exclude anonymous functions from the stack trace.
    // Exclude Node.js internals from the stack trace.
    // We get our hands on a postpone instance by calling postpone and catching the throw
    // There are fallback route params, we should track these as dynamic
    // accesses.
    // We're prerendering with dynamicIO or PPR or both
    // We are in a prerender with dynamicIO semantics
    // We are going to hang here and never resolve. This will cause the currently
    // rendering component to effectively be a dynamic hole
    // We're prerendering with PPR
    // We don't need to track that this is dynamic. It is only so when something else is also dynamic.
    //nextjs.org/docs/messages/next-prerender-missing-suspense`;
    // In dev we already log errors about sync dynamic access. But during builds we need to ensure
    // the offending sync error is logged before we exit the build
    // The actual error should have been logged when the sync access ocurred
    //# sourceMappingURL=dynamic-rendering.js.map
    /**
 * Clones a response by teeing the body so we can return two independent
 * ReadableStreams from it. This avoids the bug in the undici library around
 * response cloning.
 *
 * After cloning, the original response's body will be consumed and closed.
 *
 * @see https://github.com/vercel/next.js/pull/73274
 *
 * @param original - The original response to clone.
 * @returns A tuple containing two independent clones of the original response.
 */
    // If the response has no body, then we can just return the original response
    // twice because it's immutable.
    //# sourceMappingURL=clone-response.js.map
    //# sourceMappingURL=invariant-error.js.map
    /**
 * Based on https://github.com/facebook/react/blob/d4e78c42a94be027b4dc7ed2659a5fddfbf9bd4e/packages/react/src/ReactFetch.js
 */
    // generateCacheKey(new Request('https://blank'));
    // We pick the fields that goes into the key used to dedupe requests.
    // We don't include the `cache` field, because we end up using whatever
    // caching resulted from the first request.
    // Notably we currently don't consider non-standard (or future) options.
    // This might not be safe. TODO: warn for non-standard extensions differing.
    // IF YOU CHANGE THIS UPDATE THE simpleCacheKey ABOVE.
    // If we're passed a signal, then we assume that
    // someone else controls the lifetime of this object and opts out of
    // caching. It's effectively the opt-out mechanism.
    // Ideally we should be able to check this on the Request but
    // it always gets initialized with its own signal so we don't
    // know if it's supposed to override - unless we also override the
    // Request constructor.
    // Normalize the Request
    // Fast path.
    // Normalize the request.
    // if resource is not a string or a URL (its an instance of Request)
    // then do not instantiate a new Request but instead
    // reuse the request as to not disturb the body in the event it's a ReadableStream.
    // We currently don't dedupe requests that might have side-effects. Those
    // have to be explicitly cached. We assume that the request doesn't have a
    // body if it's GET or HEAD.
    // keepalive gets treated the same as if you passed a custom cache signal.
    // We're cloning the response using this utility because there exists
    // a bug in the undici library around response cloning. See the
    // following pull request for more details:
    // https://github.com/vercel/next.js/pull/73274
    // We pass the original arguments here in case normalizing the Request
    // doesn't include all the options in this environment.
    // We're cloning the response using this utility because there exists
    // a bug in the undici library around response cloning. See the
    // following pull request for more details:
    // https://github.com/vercel/next.js/pull/73274
    //# sourceMappingURL=dedupe-fetch.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=types.js.map
    /**
 * A `Promise.withResolvers` implementation that exposes the `resolve` and
 * `reject` functions on a `Promise`.
 *
 * @see https://tc39.es/proposal-promise-with-resolvers/
 */
    // Create the promise and assign the resolvers to the object.
    // We know that resolvers is defined because the Promise constructor runs
    // synchronously.
    //# sourceMappingURL=detached-promise.js.map
    /**
     * A function that will be called to schedule the wrapped function to be
     * executed. This defaults to a function that will execute the function
     * immediately.
     */
    /**
   * Wraps a function in a promise that will be resolved or rejected only once
   * for a given key. This will allow multiple calls to the function to be
   * made, but only one will be executed at a time. The result of the first
   * call will be returned to all callers.
   *
   * @param key the key to use for the cache
   * @param fn the function to wrap
   * @returns a promise that resolves to the result of the function
   */
    // Resolving a promise multiple times is a no-op, so we can safely
    // resolve all pending promises with the same result.
    //# sourceMappingURL=batcher.js.map
    /**
 * Schedules a function to be called on the next tick after the other promises
 * have been resolved.
 *
 * @param cb the function to schedule
 */
    // We use Promise.resolve().then() here so that the operation is scheduled at
    // the end of the promise job queue, we then add it to the next process tick
    // to ensure it's evaluated afterwards.
    //
    // This was inspired by the implementation of the DataLoader interface: https://github.com/graphql/dataloader/blob/d336bd15282664e0be4b4a657cb796f09bafbc6b/src/index.js#L213-L255
    //
    //# sourceMappingURL=scheduler.js.map
    // opening tags do not have the closing `>` since they can contain other attributes such as `<body className=''>`
    // <html
    // <body
    // </head>
    // </body>
    // </html>
    // </body></html>
    //# sourceMappingURL=encodedTags.js.map
    /**
 * Find the starting index of Uint8Array `b` within Uint8Array `a`.
 */
    // start iterating through `a`
    // from index `i`, iterate through `b` and check for mismatch
    // if the values do not match, then this isn't a complete match, exit `b` iteration early and iterate to next index of `a`.
    //# sourceMappingURL=uint8array-helpers.js.map
    // this catcher is designed to be used with pipeTo where we expect the underlying
    // pipe implementation to forward errors but we don't want the pipeTo promise to reject
    // and be unhandled
    // We can share the same encoder instance everywhere
    // Notably we cannot do the same for TextDecoder because it is stateful
    // when handling streaming data
    // We could encode this invariant in the arguments but current uses of this function pass
    // use spread so it would be missed by
    // If we only have 1 stream we fast path it by returning just this stream
    // We always initiate pipeTo immediately. We know we have at least 2 streams
    // so we need to avoid closing the writable when this one finishes.
    // We can omit the length check because we halted before the last stream and there
    // is at least two streams so the lastStream here will always be defined
    // Catch any errors from the streams and ignore them, they will be handled
    // by whatever is consuming the readable stream.
    // If we already have a pending flush, then return early.
    // We just wrote all the buffered chunks so we need to reset the bufferedChunks array
    // and our bufferByteLength to prepare for the next round of buffered chunks
    // If an error occurs while enqueuing it can't be due to this
    // transformers fault. It's likely due to the controller being
    // errored due to the stream being cancelled.
    // Combine the previous buffer with the new chunk.
    // Flush the buffer to the controller.
    // We need to track if this transform saw any bytes because if it didn't
    // we won't want to insert any server HTML at all
    // While react is flushing chunks, we don't apply insertions
    // TODO (@Ethan-Arrowood): Replace the generic `indexOfUint8Array` method with something finely tuned for the subset of things actually being checked for.
    // Check before closing if there's anything remaining to insert.
    // Suffix after main body content - scripts before </body>,
    // but wait for the major chunks to be enqueued.
    // If an error occurs while enqueuing it can't be due to this
    // transformers fault. It's likely due to the controller being
    // errored due to the stream being cancelled.
    // If we've already flushed, we're done.
    // Schedule the flush to happen.
    // Flush now.
    // Merge two streams into one. Ensure the final transform stream is closed
    // when both are finished.
    // NOTE: streaming flush
    // We are buffering here for the inlined data stream because the
    // "shell" stream might be chunkenized again by the underlying stream
    // implementation, e.g. with a specific high-water mark. To ensure it's
    // the safe timing to pipe the data stream, this extra tick is
    // necessary.
    // We don't start reading until we've left the current Task to ensure
    // that it's inserted after flushing the shell. Note that this implementation
    // might get stale if impl details of Fizz change in the future.
    // Start the streaming if it hasn't already been started yet.
    /**
 * This transform stream moves the suffix to the end of the stream, so results
 * like `</body></html><script>...</script>` will be transformed to
 * `<script>...</script></body></html>`.
 */
    // If the whole chunk is the suffix, then don't write anything, it will
    // be written in the flush.
    // Write out the part before the suffix.
    // In the case where the suffix is in the middle of the chunk, we need
    // to split the chunk into two parts.
    // Write out the part after the suffix.
    // Even if we didn't find the suffix, the HTML is not valid if we don't
    // add it, so insert it at the end.
    // We rely on the assumption that chunks will never break across a code unit.
    // This is reasonable because we currently concat all of React's output from a single
    // flush into one chunk before streaming it forward which means the chunk will represent
    // a single coherent utf-8 string. This is not safe to use if we change our streaming to no
    // longer do this large buffered chunk
    // the entire chunk is the closing tags; return without enqueueing anything.
    // We assume these tags will go at together at the end of the document and that
    // they won't appear anywhere else in the document. This is not really a safe assumption
    // but until we revamp our streaming infra this is a performant way to string the tags
    // Peek into the streamed chunk to see if the tags are present.
    // Suffix itself might contain close tags at the end, so we need to split it.
    // If we're generating static HTML and there's an `allReady` promise on the
    // stream, we need to wait for it to resolve before continuing.
    // Buffer everything to avoid flushing too frequently
    // Insert generated tags to head
    // Insert suffix content
    // Insert the inlined data (Flight data, form state, etc.) stream into the HTML
    // Validate the root layout for missing html or body tags
    // Close tags should always be deferred to the end
    // Special head insertions
    // TODO-APP: Insert server side html to end of head in app layout rendering, to avoid
    // hydration errors. Remove this once it's ready to be handled by react itself.
    // Buffer everything to avoid flushing too frequently
    // Insert generated tags to head
    // Buffer everything to avoid flushing too frequently
    // Insert generated tags to head
    // Insert the inlined data (Flight data, form state, etc.) stream into the HTML
    // Close tags should always be deferred to the end
    // Buffer everything to avoid flushing too frequently
    // Insert generated tags to head
    // Insert the inlined data (Flight data, form state, etc.) stream into the HTML
    // Close tags should always be deferred to the end
    //# sourceMappingURL=node-web-streams-helper.js.map
    /* eslint-disable no-redeclare */
    // FIXME: (wyattjoh) this is a temporary solution to allow us to pass data between bundled modules
    // @ts-ignore this can't be typed correctly
    //# sourceMappingURL=request-meta.js.map
    // ',' is a cookie separator if we have later first '=', not ';' or ','
    // currently special character
    // we found cookies separator
    // pos is inside the next cookie, so back up and return it.
    // in param ',' or param separator ';',
    // we continue from that comma
    // We may have gotten a comma joined string of cookies, or multiple
    // set-cookie headers. We need to merge them into one header array
    // to represent all the cookies.
    //nextjs.org/docs/messages/middleware-relative-urls`, {
    //# sourceMappingURL=utils.js.map
    // remove port if present
    //# sourceMappingURL=detect-domain-locale.js.map
    /**
 * Removes the trailing slash for a given route or page path. Preserves the
 * root page. Examples:
 *   - `/foo/bar/` -> `/foo/bar`
 *   - `/foo/bar` -> `/foo/bar`
 *   - `/` -> `/`
 */
    //# sourceMappingURL=remove-trailing-slash.js.map
    /**
 * Given a path this function will find the pathname, query and hash and return
 * them. This is useful to parse full paths on the client side.
 * @param path A path to parse e.g. /foo/bar?id=1#hash
 */
    //# sourceMappingURL=parse-path.js.map
    //# sourceMappingURL=add-path-prefix.js.map
    //# sourceMappingURL=add-path-suffix.js.map
    //# sourceMappingURL=path-has-prefix.js.map
    // If no locale was given or the locale is the default locale, we don't need
    // to prefix the path.
    // If the path is an API path or the path already has the locale prefix, we
    // don't need to prefix the path.
    // Add the locale prefix to the path.
    //# sourceMappingURL=add-locale.js.map
    //# sourceMappingURL=format-next-pathname-info.js.map
    /**
 * Takes an object with a hostname property (like a parsed URL) and some
 * headers that may contain Host and returns the preferred hostname.
 * @param parsed An object containing a hostname property.
 * @param headers A dictionary with headers containing a `host`.
 */
    // Get the hostname from the headers if it exists, otherwise use the parsed
    // hostname.
    //# sourceMappingURL=get-hostname.js.map
    /**
 * For a pathname that may include a locale from a list of locales, it
 * removes the locale from the pathname returning it alongside with the
 * detected locale.
 *
 * @param pathname A pathname that may include a locale.
 * @param locales A list of locales.
 * @returns The detected locale and pathname without locale
 */
    // first item will be empty string from splitting at first char
    //# sourceMappingURL=normalize-locale-path.js.map
    // If the path doesn't start with the prefix we can return it as is. This
    // protects us from situations where the prefix is a substring of the path
    // prefix such as:
    //
    // For prefix: /blog
    //
    //   /blog -> true
    //   /blog/ -> true
    //   /blog/1 -> true
    //   /blogging -> false
    //   /blogging/ -> false
    //   /blogging/1 -> false
    // Remove the prefix from the path via slicing.
    // If the path without the prefix starts with a `/` we can return it as is.
    // If the path without the prefix doesn't start with a `/` we need to add it
    // back to the path to make sure it's a valid path.
    //# sourceMappingURL=remove-path-prefix.js.map
    //, '').replace(/\.json$/, '').split('/');
    // update pathname with normalized if enabled although
    // we use normalized to populate locale info still
    // If provided, use the locale route normalizer to detect the locale instead
    // of the function below.
    //# sourceMappingURL=get-next-pathname-info.js.map
    //${this.host}${pathname}${search}${this.hash}`;
    //# sourceMappingURL=next-url.js.map
    //nextjs.org/docs/messages/middleware-new-signature
    //nextjs.org/docs/messages/middleware-request-page
    //nextjs.org/docs/messages/middleware-parse-user-agent
    //# sourceMappingURL=error.js.map
    // src/index.ts
    // src/serialize.ts
    /* @__PURE__ */
    // src/request-cookies.ts
    /** @internal */
    /* @__PURE__ */
    /**
   * The amount of cookies received from the client
   */
    /**
   * Delete the cookies matching the passed name or names in the request.
   */
    /**
   * Delete all the cookies in the cookies in the request.
   */
    /**
   * Format the cookies in the request as a string for logging
   */
    // src/response-cookies.ts
    /** @internal */
    /* @__PURE__ */
    /**
   * {@link https://wicg.github.io/cookie-store/#CookieStore-get CookieStore#get} without the Promise.
   */
    /**
   * {@link https://wicg.github.io/cookie-store/#CookieStore-getAll CookieStore#getAll} without the Promise.
   */
    /**
   * {@link https://wicg.github.io/cookie-store/#CookieStore-set CookieStore#set} without the Promise.
   */
    /**
   * {@link https://wicg.github.io/cookie-store/#CookieStore-delete CookieStore#delete} without the Promise.
   */
    /* @__PURE__ */
    // Annotate the CommonJS export names for ESM import in node:
    //# sourceMappingURL=cookies.js.map
    // rest of props come from Request
    /**
   * @deprecated
   * `page` has been deprecated in favour of `URLPattern`.
   * Read more: https://nextjs.org/docs/messages/middleware-request-page
   */
    /**
   * @deprecated
   * `ua` has been removed in favour of \`userAgent\` function.
   * Read more: https://nextjs.org/docs/messages/middleware-parse-user-agent
   */
    //# sourceMappingURL=request.js.map
    /**
 * This file provides some helpers that should be used in conjunction with
 * explicit environment checks. When combined with the environment checks, it
 * will ensure that the correct typings are used as well as enable code
 * elimination.
 */
    /**
 * Type guard to determine if a request is a WebNextRequest. This does not
 * actually check the type of the request, but rather the runtime environment.
 * It's expected that when the runtime environment is the edge runtime, that any
 * base request is a WebNextRequest.
 */
    //# sourceMappingURL=helpers.js.map
    // If `finish` fires first, then `res.end()` has been called and the close is
    // just us finishing the stream on our side. If `close` fires first, then we
    // know the client disconnected before we finished.
    // environment variable check provides dead code elimination.
    // environment variable check provides dead code elimination.
    // HEAD and GET requests can not have a body.
    // @ts-expect-error - this is handled by undici, when streams/web land use it instead
    // Grab the full URL from the request metadata.
    // Because the URL construction relies on the fact that the URL provided
    // is absolute, we need to provide a base URL. We can't use the request
    // URL because it's relative, so we use a dummy URL instead.
    //n');
    // @ts-expect-error - see https://github.com/whatwg/fetch/pull/1457
    // geo
    // ip
    // nextConfig
    // body can not be passed if request was aborted
    // or we get a Request body was disturbed error
    // HEAD and GET requests can not have a body.
    // @ts-expect-error - see https://github.com/whatwg/fetch/pull/1457
    // geo
    // ip
    // nextConfig
    // body can not be passed if request was aborted
    // or we get a Request body was disturbed error
    //# sourceMappingURL=next-request.js.map
    // Combined load times for loading client components
    //# sourceMappingURL=client-component-renderer-logger.js.map
    // Create a promise that will resolve once the response has drained. See
    // https://nodejs.org/api/stream.html#stream_event_drain
    // If the finish event fires, it means we shouldn't block and wait for the
    // drain event.
    // Create a promise that will resolve once the response has finished. See
    // https://nodejs.org/api/http.html#event-finish_1
    // Create a writable stream that will write to the response.
    // You'd think we'd want to use `start` instead of placing this in `write`
    // but this ensures that we don't actually flush the headers until we've
    // started writing chunks.
    // Added by the `compression` middleware, this is a function that will
    // flush the partially-compressed response to the client.
    // If the write returns false, it means there's some backpressure, so
    // wait until it's streamed before continuing.
    // Reset the drained promise so that we can wait for the next drain event.
    // if a waitUntil promise was passed, wait for it to resolve before
    // ending the response.
    // If the response has already errored, then just return now.
    // Create a new AbortController so that we can abort the readable if the
    // client disconnects.
    // If this isn't related to an abort error, re-throw it.
    //# sourceMappingURL=pipe-readable.js.map
    /**
   * Creates a new RenderResult instance from a static response.
   *
   * @param value the static response value
   * @returns a new RenderResult instance
   */
    /**
   * Returns true if the response is null. It can be null if the response was
   * not found or was already sent.
   */
    /**
   * Returns false if the response is a string. It can be a string if the page
   * was prerendered. If it's not, then it was generated dynamically.
   */
    /**
   * Returns the response if it is a stream, or throws an error if it is a
   * string.
   */
    // If the response is an array of streams, then chain them together.
    /**
   * Chains a new stream to the response. This will convert the response to an
   * array of streams if it is not already one and will add the new stream to
   * the end. When this response is piped, all of the streams will be piped
   * one after the other.
   *
   * @param readable The new stream to chain
   */
    // If the response is not an array of streams already, make it one.
    // Add the new stream to the array.
    // Update the response.
    /**
   * Pipes the response to a writable stream. This will close/cancel the
   * writable stream if an error is encountered. If this doesn't throw, then
   * the writable stream will be closed or aborted.
   *
   * @param writable Writable stream to pipe the response to
   */
    // We want to close the writable stream ourselves so that we can wait
    // for the waitUntil promise to resolve before closing it. If an error
    // is encountered, we'll abort the writable stream if we swallowed the
    // error.
    // If there is a waitUntil promise, wait for it to resolve before
    // closing the writable stream.
    // Close the writable stream.
    // If this is an abort error, we should abort the writable stream (as we
    // took ownership of it when we started piping). We don't need to re-throw
    // because we handled the error.
    // Abort the writable stream if an error is encountered.
    // We're not aborting the writer here as when this method throws it's not
    // clear as to how so the caller should assume it's their responsibility
    // to clean up the writer.
    /**
   * Pipes the response to a node response. This will close/cancel the node
   * response if an error is encountered.
   *
   * @param res
   */
    //# sourceMappingURL=render-result.js.map
    //# sourceMappingURL=utils.js.map
    // Ensure on-demand revalidate doesn't block normal requests, it should be
    // safe to run an on-demand revalidate for the same key as a normal request.
    // We wait to do any async work until after we've added our promise to
    // `pendingResponses` to ensure that any any other calls will reuse the
    // same promise until we've fully finished our work.
    // this is a hack to avoid Webpack knowing this is equal to this.minimalMode
    // because we replace this.minimalMode to true in production bundles.
    // If there is no key for the cache, we can't possibly look this up in the
    // cache so just return the result of the response generator.
    // We keep the previous cache entry around to leverage when the
    // incremental cache is disabled in minimal mode.
    // Coerce the kindHint into a given kind for the incremental cache.
    // The cached value is still valid, so we don't need
    // to update it yet.
    // If the cache entry couldn't be generated, we don't want to cache
    // the result.
    // Unset the previous cache item if it was set.
    // Unset the previous cache item if it was set.
    // For on-demand revalidate wait to resolve until cache is set.
    // Otherwise resolve now.
    // We want to persist the result only if it has a revalidate value
    // defined.
    // When a getStaticProps path is erroring we automatically re-set the
    // existing cache under a new expiration to prevent non-stop retrying.
    // While revalidating in the background we can't reject as we already
    // resolved the cache entry so log the error here.
    // We haven't resolved yet, so let's throw to indicate an error.
    //# sourceMappingURL=index.js.map
    // handle client component error from attempting to check revalidate value
    // If the static generation store is not available, we can't track the fetch
    // Create the patched fetch function. We don't set the type here, as it's
    // verified as the return value of this function.
    // Error caused by malformed URL should be handled by native fetch
    // Do create a new span trace for internal fetches in the
    // non-verbose mode.
    // We don't track fetch metrics for internal fetches
    // so it's not critical that we have a start time, as it won't be recorded.
    // This is to workaround a flaky issue where performance APIs might
    // not be available and will require follow-up investigation.
    // During static generation we track cache reads so we can reason about when they fill
    // If this is an internal fetch, we should not do any special treatment.
    // If the workStore is not available, we can't do any
    // special treatment of fetch, therefore fallback to the original
    // fetch implementation.
    // We should also fallback to the original fetch implementation if we
    // are in draft mode, it does not constitute a static generation.
    // If request input is present but init is not, retrieve from input first.
    // RequestInit doesn't keep extra fields e.g. next so it's
    // only available if init is used separate
    // Collect tags onto parent caches or parent prerenders.
    // Inside unstable-cache we treat it the same as force-no-store on the
    // page.
    // If the revalidate value conflicts with the cache value, we should warn the user and unset the conflicting values.
    // revalidate: >0 or revalidate: false and cache: no-store
    // the fetch isn't explicitly caching and the segment level cache config signals not to cache
    // note: `pageFetchCacheMode` is also set by being in an unstable_cache context.
    // If no explicit fetch cache mode is set, but dynamic = `force-dynamic` is set,
    // we shouldn't consider caching the fetch. This is because the `dynamic` cache
    // is considered a "top-level" cache mode, whereas something like `fetchCache` is more
    // fine-grained. Top-level modes are responsible for setting reasonable defaults for the
    // other configurations.
    // which will signal the cache to not revalidate
    // we shouldn't set the revalidate to 0 as it's overridden
    // by the cache context
    /**
         * We automatically disable fetch caching under the following conditions:
         * - Fetch cache configs are not set. Specifically:
         *    - A page fetch cache mode is not set (export const fetchCache=...)
         *    - A fetch cache mode is not set in the fetch call (fetch(url, { cache: ... }))
         *      or the fetch cache mode is set to 'default'
         *    - A fetch revalidate value is not set in the fetch call (fetch(url, { revalidate: ... }))
         * - OR the fetch comes after a configuration that triggered dynamic rendering (e.g., reading cookies())
         *   and the fetch was considered uncacheable (e.g., POST method or has authorization headers)
         */
    // eslint-disable-next-line eqeqeq
    // when considering whether to opt into the default "no-cache" fetch semantics,
    // a "default" cache config should be treated the same as no cache config
    // eslint-disable-next-line eqeqeq
    // eslint-disable-next-line eqeqeq
    // we disable automatic no caching behavior during build time SSG so that we can still
    // leverage the fetch cache between SSG workers
    // If we have no cache config, and we're in Dynamic I/O prerendering, it'll be a dynamic call.
    // We don't have to issue that dynamic call.
    // TODO: should we consider this case an invariant?
    // `revalidate: 0` values
    // we don't consider autoNoCache to switch to dynamic for ISR
    // If the revalidate value isn't currently set or the value is less
    // than the current revalidate value, we should update the revalidate
    // value.
    // If we were setting the revalidate value to 0, we should try to
    // postpone instead first.
    // We only want to set the revalidate store's revalidate time if it
    // was explicitly set for the fetch call, i.e. currentFetchRevalidate.
    // don't pass through signal when revalidating
    // @ts-expect-error custom fields
    // add metadata to init without editing the original
    // We are prerendering at build time or revalidate time with dynamicIO so we need to
    // buffer the response so we can guarantee it can be read in a microtask
    // We can skip checking the serverComponentsHmrCache because we aren't in
    // dev mode.
    // We return a new Response to the caller.
    // We're cloning the response using this utility because there
    // exists a bug in the undici library around response cloning.
    // See the following pull request for more details:
    // https://github.com/vercel/next.js/pull/73274
    // We are dynamically rendering including dev mode. We want to return
    // the response to the caller as soon as possible because it might stream
    // over a very long time.
    // we had response that we determined shouldn't be cached so we return it
    // and don't cache it. This also needs to unlock the cache lock we acquired.
    // We sometimes use the cache to dedupe fetches that do not specify a cache configuration
    // In these cases we want to make sure we still exclude them from prerenders if dynamicIO is on
    // so we introduce an artificial Task boundary here.
    // in dev, incremental cache response will be null in case the browser adds `cache-control: no-cache` in the request headers
    // when stale and is revalidating we wait for fresh data
    // so the revalidated entry has the updated data
    // Attach the empty catch here so we don't get a "unhandled
    // promise rejection" warning.
    // Delete `cache` property as Cloudflare Workers will throw an error
    // If enabled, we should bail out of static generation.
    // If enabled, we should bail out of static generation.
    // if we are revalidating the whole page via time or on-demand and
    // the fetch cache entry is stale we should still de-dupe the
    // origin hit if it's a cache-able entry
    // We used to just resolve the Response and clone it however for
    // static generation with dynamicIO we need the response to be able to
    // be resolved in a microtask and cloning the response will never have
    // a body that can resolve in a microtask in node (as observed through
    // experimentation) So instead we await the body and then when it is
    // available we construct manually cloned Response objects with the
    // body as an ArrayBuffer. This will be resolvable in a microtask
    // making it compatible with dynamicIO.
    // We're cloning the response using this utility because there
    // exists a bug in the undici library around response cloning.
    // See the following pull request for more details:
    // https://github.com/vercel/next.js/pull/73274
    // If the pending revalidate is not present in the store, then
    // we have nothing to delete.
    // Attach the empty catch here so we don't get a "unhandled promise
    // rejection" warning
    // Attach the necessary properties to the patched fetch function.
    // We don't use this to determine if the fetch function has been patched,
    // but for external consumers to determine if the fetch function has been
    // patched.
    // If we've already patched fetch, we should not patch it again.
    // Grab the original fetch function. We'll attach this so we can use it in
    // the patched fetch function.
    // Set the global fetch to the patched fetch.
    //# sourceMappingURL=patch-fetch.js.map
    // remove port if present
    //# sourceMappingURL=detect-domain-locale.js.map
    /**
 * Removes the trailing slash for a given route or page path. Preserves the
 * root page. Examples:
 *   - `/foo/bar/` -> `/foo/bar`
 *   - `/foo/bar` -> `/foo/bar`
 *   - `/` -> `/`
 */
    //# sourceMappingURL=remove-trailing-slash.js.map
    /**
 * Given a path this function will find the pathname, query and hash and return
 * them. This is useful to parse full paths on the client side.
 * @param path A path to parse e.g. /foo/bar?id=1#hash
 */
    //# sourceMappingURL=parse-path.js.map
    //# sourceMappingURL=add-path-prefix.js.map
    //# sourceMappingURL=add-path-suffix.js.map
    //# sourceMappingURL=path-has-prefix.js.map
    // If no locale was given or the locale is the default locale, we don't need
    // to prefix the path.
    // If the path is an API path or the path already has the locale prefix, we
    // don't need to prefix the path.
    // Add the locale prefix to the path.
    //# sourceMappingURL=add-locale.js.map
    //# sourceMappingURL=format-next-pathname-info.js.map
    // Get the hostname from the headers if it exists, otherwise use the parsed
    // hostname.
    //# sourceMappingURL=get-hostname.js.map
    // first item will be empty string from splitting at first char
    //# sourceMappingURL=normalize-locale-path.js.map
    // If the path doesn't start with the prefix we can return it as is. This
    // protects us from situations where the prefix is a substring of the path
    // prefix such as:
    //
    // For prefix: /blog
    //
    //   /blog -> true
    //   /blog/ -> true
    //   /blog/1 -> true
    //   /blogging -> false
    //   /blogging/ -> false
    //   /blogging/1 -> false
    // Remove the prefix from the path via slicing.
    // If the path without the prefix starts with a `/` we can return it as is.
    // If the path without the prefix doesn't start with a `/` we need to add it
    // back to the path to make sure it's a valid path.
    //# sourceMappingURL=remove-path-prefix.js.map
    //, '').replace(/\.json$/, '').split('/');
    // update pathname with normalized if enabled although
    // we use normalized to populate locale info still
    // If provided, use the locale route normalizer to detect the locale instead
    // of the function below.
    //# sourceMappingURL=get-next-pathname-info.js.map
    //${this.host}${pathname}${search}${this.hash}`;
    //# sourceMappingURL=next-url.js.map
    //nextjs.org/docs/messages/public-next-folder-conflict`;
    //nextjs.org/docs/messages/404-get-initial-props`;
    //nextjs.org/docs/messages/gssp-export`;
    //nextjs.org/docs/messages/gssp-component-member`;
    //nextjs.org/docs/messages/non-standard-node-env`;
    //nextjs.org/docs/messages/ssg-fallback-true-export`;
    /**
 * The names of the webpack layers. These layers are the primitives for the
 * webpack chunks.
 */
    /**
   * The layer for the shared code between the client and server bundles.
   */
    /**
   * The layer for server-only runtime and picking up `react-server` export conditions.
   * Including app router RSC pages and app router custom routes and metadata routes.
   */
    /**
   * Server Side Rendering layer for app (ssr).
   */
    /**
   * The browser client bundle layer for actions.
   */
    /**
   * The layer for the API routes.
   */
    /**
   * The layer for the middleware code.
   */
    /**
   * The layer for the instrumentation hooks.
   */
    /**
   * The layer for assets on the edge.
   */
    /**
   * The browser client bundle layer for App directory.
   */
    // pages api
    // app router pages and layouts
    //# sourceMappingURL=constants.js.map
    // ',' is a cookie separator if we have later first '=', not ';' or ','
    // currently special character
    // we found cookies separator
    // pos is inside the next cookie, so back up and return it.
    // in param ',' or param separator ';',
    // we continue from that comma
    // We may have gotten a comma joined string of cookies, or multiple
    // set-cookie headers. We need to merge them into one header array
    // to represent all the cookies.
    //nextjs.org/docs/messages/middleware-relative-urls`, {
    //# sourceMappingURL=utils.js.map
    //nextjs.org/docs/messages/middleware-new-signature
    //nextjs.org/docs/messages/middleware-request-page
    //nextjs.org/docs/messages/middleware-parse-user-agent
    //# sourceMappingURL=error.js.map
    //# sourceMappingURL=cookies.js.map
    // rest of props come from Request
    /**
   * @deprecated
   * `page` has been deprecated in favour of `URLPattern`.
   * Read more: https://nextjs.org/docs/messages/middleware-request-page
   */
    /**
   * @deprecated
   * `ua` has been removed in favour of \`userAgent\` function.
   * Read more: https://nextjs.org/docs/messages/middleware-parse-user-agent
   */
    //# sourceMappingURL=request.js.map
    //# sourceMappingURL=reflect.js.map
    // rest of props come from Response
    //# sourceMappingURL=response.js.map
    /**
 * @deprecated ImageResponse moved from "next/server" to "next/og" since Next.js 14, please import from "next/og" instead.
 * Migration with codemods: https://nextjs.org/docs/app/building-your-application/upgrading/codemods#next-og-import
 */
    //# sourceMappingURL=image-response.js.map
    //i
    //i,
    //i
    //i
    //i
    /*#__PURE__*/
    //# sourceMappingURL=user-agent.js.map
    //# sourceMappingURL=url-pattern.js.map
    // TODO(after): the linked docs page talks about *dynamic* APIs, which after soon won't be anymore
    //nextjs.org/docs/messages/next-dynamic-api-wrong-context');
    //# sourceMappingURL=after.js.map
    //# sourceMappingURL=index.js.map
    //# sourceMappingURL=hooks-server-context.js.map
    //# sourceMappingURL=static-generation-bailout.js.map
    /**
 * This function constructs a promise that will never resolve. This is primarily
 * useful for dynamicIO where we use promise resolution timing to determine which
 * parts of a render can be included in a prerender.
 *
 * @internal
 */
    // We are fine if no one actually awaits this promise. We shouldn't consider this an unhandled rejection so
    // we attach a noop catch handler here to suppress this warning. If you actually await somewhere or construct
    // your own promise out of it you'll need to ensure you handle the error when it rejects.
    //# sourceMappingURL=dynamic-rendering-utils.js.map
    //# sourceMappingURL=metadata-constants.js.map
    /**
 * The functions provided by this module are used to communicate certain properties
 * about the currently running code so that Next.js can make decisions on how to handle
 * the current execution in different rendering modes such as pre-rendering, resuming, and SSR.
 *
 * Today Next.js treats all code as potentially static. Certain APIs may only make sense when dynamically rendering.
 * Traditionally this meant deopting the entire render to dynamic however with PPR we can now deopt parts
 * of a React tree as dynamic while still keeping other parts static. There are really two different kinds of
 * Dynamic indications.
 *
 * The first is simply an intention to be dynamic. unstable_noStore is an example of this where
 * the currently executing code simply declares that the current scope is dynamic but if you use it
 * inside unstable_cache it can still be cached. This type of indication can be removed if we ever
 * make the default dynamic to begin with because the only way you would ever be static is inside
 * a cache scope which this indication does not affect.
 *
 * The second is an indication that a dynamic data source was read. This is a stronger form of dynamic
 * because it means that it is inappropriate to cache this at all. using a dynamic data source inside
 * unstable_cache should error. If you want to use some dynamic data inside unstable_cache you should
 * read that data outside the cache and pass it in as an argument to the cached function.
 */
    /*#__PURE__*/
    // inside cache scopes marking a scope as dynamic has no effect because the outer cache scope
    // creates a cache boundary. This is subtly different from reading a dynamic data source which is
    // forbidden inside a cache scope.
    // If we're forcing dynamic rendering or we're forcing static rendering, we
    // don't need to do anything here because the entire page is already dynamic
    // or it's static and it should not throw or postpone here.
    //nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);
    // We aren't prerendering but we are generating a static page. We need to bail out of static generation
    //nextjs.org/docs/messages/dynamic-server-error`);
    // We aren't prerendering but we are generating a static page. We need to bail out of static generation
    //nextjs.org/docs/messages/dynamic-server-error`);
    // inside cache scopes marking a scope as dynamic has no effect because the outer cache scope
    // creates a cache boundary. This is subtly different from reading a dynamic data source which is
    // forbidden inside a cache scope.
    // Despite it's name we don't actually abort unless we have a controller to call abort on
    // There are times when we let a prerender run long to discover caches where we want the semantics
    // of tracking dynamic access without terminating the prerender early
    // When we aren't debugging, we don't need to create another error for the
    // stack trace.
    // We don't actually have a controller to abort but we do the semantic equivalent by
    // advancing the request store out of prerender mode
    // We always log Request Access in dev at the point of calling the function
    // So we mark the dynamic validation as not requiring it to be printed
    // When we aren't debugging, we don't need to create another error for the
    // stack trace.
    //nextjs.org/docs/messages/ppr-caught-error`;
    //nextjs.org/docs/messages/ppr-caught-error');
    // We mutate because we only call this once we are no longer writing
    // to the dynamicTrackingState and it's more efficient than creating a new
    // array.
    // Remove the "Error: " prefix from the first line of the stack trace as
    // well as the first 4 lines of the stack trace which is the distance
    // from the user code and the `new Error().stack` call.
    // Exclude Next.js internals from the stack trace.
    // Exclude anonymous functions from the stack trace.
    // Exclude Node.js internals from the stack trace.
    // We get our hands on a postpone instance by calling postpone and catching the throw
    // There are fallback route params, we should track these as dynamic
    // accesses.
    // We're prerendering with dynamicIO or PPR or both
    // We are in a prerender with dynamicIO semantics
    // We are going to hang here and never resolve. This will cause the currently
    // rendering component to effectively be a dynamic hole
    // We're prerendering with PPR
    // We don't need to track that this is dynamic. It is only so when something else is also dynamic.
    //nextjs.org/docs/messages/next-prerender-missing-suspense`;
    // In dev we already log errors about sync dynamic access. But during builds we need to ensure
    // the offending sync error is logged before we exit the build
    // The actual error should have been logged when the sync access ocurred
    //# sourceMappingURL=dynamic-rendering.js.map
    // This regex will have fast negatives meaning valid identifiers may not pass
    // this test. However this is only used during static generation to provide hints
    // about why a page bailed out of some or all prerendering and we can use bracket notation
    // for example while `ಠ_ಠ` is a valid identifier it's ok to print `searchParams['ಠ_ಠ']`
    // even if this would have been fine too `searchParams.ಠ_ಠ`
    //nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);
    //nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);
    // Promise prototype
    // fallthrough
    // React Promise extension
    // fallthrough
    // React introspection
    // Common tested properties
    // fallthrough
    //# sourceMappingURL=utils.js.map
    //nextjs.org/docs/canary/app/api-reference/functions/after`);
    // When using forceStatic we override all other logic and always just return an empty
    // headers object without tracking
    //nextjs.org/docs/messages/next-request-in-use-cache`);
    //nextjs.org/docs/app/api-reference/functions/unstable_cache`);
    //nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);
    // dynamicIO Prerender
    // We return a promise that never resolves to allow the prender to stall at this point
    // PPR Prerender (no dynamicIO)
    // We use React's postpone API to interrupt rendering here to create a dynamic hole
    // Legacy Prerender
    // We throw an error here to interrupt prerendering to mark the route as dynamic
    // We fall through to the dynamic context below but we still track dynamic access
    // because in dev we can still error for things like using headers inside a cache context
    //# sourceMappingURL=connection.js.map
    // https://nodejs.org/api/esm.html#commonjs-namespaces
    // When importing CommonJS modules, the module.exports object is provided as the default export
    // make import { xxx } from 'next/server' work
    // We inject the nextConfigOutput here so that we can use them in the route
    // module.
    // Pull out the exports that we need to expose from the module. This should
    // be eliminated when we've moved the other routes to the new format. These
    // are used to hook into the route.
    //# sourceMappingURL=app-route.js.map
    //# sourceMappingURL=node_modules_next_425054._.js.map

File: ./frontend/.next/server/chunks/[turbopack]_runtime.js
  JavaScript Functions:
    - defineProp
    - esm
    - esmExport
    - ensureDynamicExports
    - dynamicExport
    - exportValue
    - exportNamespace
    - createGetter
    - interopEsm
    - createNS
    - esmImport
    - require1
    - commonJsRequire
    - moduleContext
    - moduleContext
    - keys
    - resolve
    - getChunkPath
    - isPromise
    - isAsyncModuleExt
    - createPromise
    - resolveQueue
    - wrapDeps
    - asyncModule
    - handleAsyncDependencies
    - getResult
    - fnQueue
    - asyncResult
    - to
    - relativeURL
    - toJSON
    - to
    - invariant
    - to
    - requireStub
    - externalImport
    - externalRequire
    - resolve
    - resolveAbsolutePath
    - readWebAssemblyAsResponse
    - compileWebAssemblyFromPath
    - instantiateWebAssemblyFromPath
    - stringifySourceInfo
    - createResolvePathFromModule
    - resolvePathFromModule
    - loadChunk
    - loadChunkPath
    - loadChunkAsync
    - localRequire
    - loadWebAssembly
    - loadWebAssemblyModule
    - getWorkerBlobURL
    - instantiateModule
    - getOrInstantiateModuleFromParent
    - instantiateRuntimeModule
    - getOrInstantiateRuntimeModule
  Comments:
    /**
 * This file contains runtime types and functions that are shared between all
 * TurboPack ECMAScript runtimes.
 *
 * It will be prepended to the runtime code of each runtime.
 */
    /* eslint-disable @typescript-eslint/no-unused-vars */
    /// <reference path="./runtime-types.d.ts" />
    /**
 * Adds the getters to the exports object.
 */
    /**
 * Makes the module an ESM with exports
 */
    /**
 * Dynamically exports properties from an object
 */
    /**
 * @returns prototype of the object
 */
    /** Prototypes that are not expanded for exports */
    /**
 * @param raw
 * @param ns
 * @param allowExportDefault
 *   * `false`: will have the raw module as default export
 *   * `true`: will have the default property as default export
 */
    // this is not really correct
    // we should set the `default` getter if the imported module is a `.cjs file`
    // any ES module has to have `module.namespaceObject` defined.
    // only ESM can be an async module, so we don't need to worry about exports being a promise here.
    // Add a simple runtime require so that environments without one can still pass
    // `typeof require` CommonJS checks so that exports are correctly registered.
    // @ts-ignore
    /**
 * `require.context` and require/import expression runtime.
 */
    /**
 * Returns the path of a chunk defined by its data.
 */
    // everything below is adapted from webpack
    // https://github.com/webpack/webpack/blob/6be4065ade1e252c1d8dcba4af0f43e32af1bdc1/lib/runtime/AsyncModuleRuntimeModule.js#L13
    // Calling `esmExport` leads to this.
    /**
 * A pseudo "fake" URL object to resolve to its relative path.
 *
 * When UrlRewriteBehavior is set to relative, calls to the `new URL()` will construct url without base using this
 * runtime function to generate context-agnostic urls between different rendering context, i.e ssr / client to avoid
 * hydration mismatch.
 *
 * This is based on webpack's existing implementation:
 * https://github.com/webpack/webpack/blob/87660921808566ef3b8796f8df61bd79fc026108/lib/runtime/RelativeUrlRuntimeModule.js
 */
    /**
 * Utility function to ensure all variants of an enum are handled.
 */
    /**
 * A stub function to make `require` available but non-functional in ESM.
 */
    /* eslint-disable @typescript-eslint/no-unused-vars */
    /// <reference path="../shared/runtime-utils.ts" />
    /// A 'base' utilities to support runtime can have externals.
    /// Currently this is for node.js / edge runtime both.
    /// If a fn requires node.js specific behavior, it should be placed in `node-external-utils` instead.
    // TODO(alexkirsz) This can happen when a client-side module tries to load
    // an external module we don't provide a shim for (e.g. querystring, url).
    // For now, we fail semi-silently, but in the future this should be a
    // compilation error.
    // TODO(alexkirsz) This can happen when a client-side module tries to load
    // an external module we don't provide a shim for (e.g. querystring, url).
    // For now, we fail semi-silently, but in the future this should be a
    // compilation error.
    /* eslint-disable @typescript-eslint/no-unused-vars */
    // Compute the relative path to the `distDir`.
    // Compute the absolute path to the root, by stripping distDir from the absolute path to this file.
    /**
 * Returns an absolute path to the given module path.
 * Module path should be relative, either path to a file or a directory.
 *
 * This fn allows to calculate an absolute path for some global static values, such as
 * `__dirname` or `import.meta.url` that Turbopack will not embeds in compile time.
 * See ImportMetaBinding::code_generation for the usage.
 */
    /* eslint-disable @typescript-eslint/no-unused-vars */
    /// <reference path="../shared/runtime-utils.ts" />
    // @ts-ignore unfortunately there's a slight type mismatch with the stream.
    /* eslint-disable @typescript-eslint/no-unused-vars */
    /// <reference path="../shared/runtime-utils.ts" />
    /// <reference path="../shared-node/base-externals-utils.ts" />
    /// <reference path="../shared-node/node-externals-utils.ts" />
    /// <reference path="../shared-node/node-wasm-utils.ts" />
    /*#__PURE__*/
    /**
   * The module was instantiated because it was included in an evaluated chunk's
   * runtime.
   */
    /**
   * The module was instantiated because a parent module imported it.
   */
    /**
 * Returns an absolute path to the given module's id.
 */
    // We only support loading JS chunks in Node.js.
    // This branch can be hit when trying to load a CSS chunk.
    // We only support loading JS chunks in Node.js.
    // This branch can be hit when trying to load a CSS chunk.
    // TODO: Use vm.runInThisContext once our minimal supported Node.js version includes https://github.com/nodejs/node/pull/52153
    // eslint-disable-next-line no-eval -- Can't use vm.runInThisContext due to https://github.com/nodejs/node/issues/52102
    //# sourceURL=" + url.pathToFileURL(resolved))(module1, module1.exports, localRequire, path.dirname(resolved), resolved);
    // This can happen if modules incorrectly handle HMR disposes/updates,
    // e.g. when they keep a `setTimeout` around which still executes old code
    // and contains e.g. a `require("something")` call.
    // No need to add this module as a child of the parent module here, this
    // has already been taken care of in `getOrInstantiateModuleFromParent`.
    // NOTE(alexkirsz) This can fail when the module encounters a runtime error.
    // in case of a circular dependency: cjs1 -> esm2 -> cjs1
    /**
 * Retrieves a module from the cache, or instantiate it if it is not cached.
 */
    // @ts-ignore
    /**
 * Instantiates a runtime module.
 */
    /**
 * Retrieves a module from the cache, or instantiate it as a runtime module if it is not cached.
 */
    // @ts-ignore TypeScript doesn't separate this module space from the browser runtime

File: ./frontend/.next/server/chunks/ssr/node_modules_510ba8._.js
  JavaScript Functions:
    - _extends
    - is
    - memoizedSelector
    - isValidElementType
    - typeOf
    - isContextConsumer
    - isMemo
    - warning
    - verify
    - verifySubselectors
    - pureFinalPropsSelectorFactory
    - handleFirstCall
    - handleNewPropsAndNewState
    - handleNewProps
    - handleNewState
    - handleSubsequentCalls
    - pureFinalPropsSelector
    - finalPropsSelectorFactory
    - bindActionCreators
    - isPlainObject
    - verifyPlainObject
    - wrapMapToPropsConstant
    - initConstantSelector
    - constantSelector
    - getDependsOnOwnProps
    - wrapMapToPropsFunc
    - initProxySelector
    - mapToPropsProxy
    - detectFactoryAndVerify
    - createInvalidArgFactory
    - mapDispatchToPropsFactory
    - mapStateToPropsFactory
    - defaultMergeProps
    - wrapMergePropsFunc
    - initMergePropsProxy
    - mergePropsProxy
    - mergePropsFactory
    - defaultNoopBatch
    - createListenerCollection
    - unsubscribe
    - createSubscription
    - addNestedSub
    - notifyNestedSubs
    - handleChangeWrapper
    - isSubscribed
    - trySubscribe
    - tryUnsubscribe
    - trySubscribeSelf
    - tryUnsubscribeSelf
    - canUseDOM
    - isRunningInReactNative
    - getUseIsomorphicLayoutEffect
    - is
    - shallowEqual
    - getStatics
    - hoistNonReactStatics
    - getContext
    - stringifyComponent
    - useIsomorphicLayoutEffectWithArgs
    - captureWrapperProps
    - subscribeUpdates
    - checkForUpdates
    - unsubscribeWrapper
    - strictEqual
    - connect
    - wrapWithConnect
    - returned
    - ConnectFunction
    - selector
    - subscribe
    - forwardConnectRef
    - Provider
    - createReduxContextHook
    - useReduxContext2
    - createStoreHook
    - useStore2
    - createDispatchHook
    - useDispatch2
    - refEquality
    - createSelectorHook
    - useSelector2
    - as
    - as
    - to
    - invariant
    - getRect
    - expand
    - shrink
    - shift
    - createBox
    - parse
    - getWindowScroll
    - offset
    - withScroll
    - calculateBox
    - getBox
    - rafSchd
    - wrapperFn
    - formatProdErrorMessage
    - randomString
    - isPlainObject
    - miniKindOf
    - ctorName
    - isError
    - isDate
    - kindOf
    - createStore
    - ensureCanMutateNextListeners
    - getState
    - subscribe
    - unsubscribe
    - dispatch
    - replaceReducer
    - observable
    - observeState
    - legacy_createStore
    - warning
    - getUnexpectedStateShapeWarningMessage
    - assertReducerShape
    - combineReducers
    - combination
    - bindActionCreator
    - bindActionCreators
    - compose
    - applyMiddleware
    - dispatch
    - isAction
    - 2
    - getDevMessage
    - getFormattedMessage
    - log
    - noop
    - getOptions
    - bindEvents
    - unbind
    - unbindAll
    - toString
    - invariant
    - onWindowError
    - getCallbacks
    - setCallbacks
    - position
    - onDragStart
    - withLocation
    - withCombine
    - onDragUpdate
    - returnedToStart
    - onDragEnd
    - isEqual
    - areInputsEqual
    - useMemo
    - initial
    - useCallback
    - add
    - subtract
    - 1
    - negate
    - patch
    - distance
    - 1
    - apply
    - executeClip
    - offsetByPosition
    - getCorners
    - 1
    - increase
    - clip
    - getSubject
    - scrollDroppable
    - memoizeOne
    - memoized
    - clear
    - tryGetDestination
    - tryGetCombine
    - moveToNextCombine
    - getImpact
    - isHomeOf
    - isWithin
    - isPartiallyVisibleThroughFrame
    - isTotallyVisibleThroughFrame
    - isTotallyVisibleThroughFrameOnAxis
    - getDroppableDisplaced
    - isVisibleInDroppable
    - isVisibleInViewport
    - 1
    - isPartiallyVisible
    - isTotallyVisible
    - isTotallyVisibleOnAxis
    - getShouldAnimate
    - getTarget
    - getDisplacementGroups
    - process
    - getIndexOfLastItem
    - goAtEnd
    - calculateReorderImpact
    - didStartAfterCritical
    - fromCombine
    - fromReorder
    - moveToNextIndex
    - getCombinedItemDisplacement
    - whenCombining
    - distanceFromStartToBorderBoxCenter
    - distanceFromEndToBorderBoxCenter
    - getCrossAxisBorderBoxCenter
    - goAfter
    - goBefore
    - goIntoStart
    - whenReordering
    - withDroppableDisplacement
    - getResultWithoutDroppableDisplacement
    - getPageBorderBoxCenterFromImpact
    - scrollViewport
    - getDraggables
    - tryGetVisible
    - speculativelyIncrease
    - withViewportDisplacement
    - getClientFromPageBorderBoxCenter
    - isTotallyVisibleInNewLocation
    - moveToNextPlace
    - getKnownActive
    - getBestCrossAxisDroppable
    - getCurrentPageBorderBoxCenter
    - getCurrentPageBorderBox
    - getClosestDraggable
    - getDisplacedBy
    - getRequiredGrowthForPlaceholder
    - withMaxScroll
    - addPlaceholder
    - removePlaceholder
    - moveToNewDroppable
    - proposedIndex
    - moveCrossAxis
    - whatIsDraggedOver
    - 1
    - moveInDirection
    - isMovementAllowed
    - isPositionInFrame
    - run
    - getHasOverlap
    - getFurthestAway
    - getDroppableOver
    - offsetRectByPosition
    - withDroppableScroll
    - getIsDisplaced
    - atIndex
    - getReorderImpact
    - getCombineImpact
    - getDragImpact
    - patchDroppableMap
    - clearUnusedPlaceholder
    - recomputePlaceholders
    - update
    - getDraggables
    - recompute
    - getClientBorderBoxCenter
    - refreshSnap
    - getHomeLocation
    - getLiftEffect
    - patchDimensionMap
    - start
    - finish
    - offsetDraggable
    - getFrame
    - adjustAdditionsForScrollChanges
    - publishWhileDraggingInVirtual
    - isSnapping
    - postDroppableChange
    - removeScrollJumpRequest
    - reducer
    - guard
    - beforeInitialCapture
    - 1
    - initialPublish
    - publishWhileDragging
    - collectionStarting
    - updateDroppableScroll
    - updateDroppableIsEnabled
    - updateDroppableIsCombineEnabled
    - move
    - moveByWindowScroll
    - updateViewportMaxScroll
    - moveUp
    - moveDown
    - moveRight
    - moveLeft
    - flush
    - animateDrop
    - completeDrop
    - drop
    - dropPending
    - dropAnimationFinished
    - checkIndexes
    - validateDimensions
    - lift
    - style
    - moveTo
    - getDropDuration
    - getNewHomeClientOffset
    - getDropImpact
    - dropMiddleware
    - getWindowScroll
    - getWindowScrollBinding
    - getScrollListener
    - updateScroll
    - isActive
    - start
    - stop
    - 1
    - scrollListener
    - getExpiringAnnounce
    - result
    - wasCalled
    - getAsyncMarshal
    - execute
    - add
    - flush
    - areLocationsEqual
    - isCombineEqual
    - isCriticalEqual
    - withTimings
    - getDragStart
    - execute
    - getPublisher
    - beforeCapture
    - beforeStart
    - start
    - update
    - flush
    - drop
    - abort
    - responders
    - dropAnimationFinishMiddleware
    - dropAnimationFlushOnScrollMiddleware
    - clear
    - flushDropAnimation
    - dimensionMarshalStopper
    - focus
    - shouldStop
    - autoScroll
    - pendingDrop
    - createStore
    - 1
    - createPublisher
    - collect
    - add
    - remove
    - stop
    - getMaxScroll
    - getDocumentElement
    - getMaxWindowScroll
    - getViewport
    - getInitialPublish
    - shouldPublishUpdate
    - createDimensionMarshal
    - updateDroppableIsEnabled
    - updateDroppableIsCombineEnabled
    - updateDroppableScroll
    - scrollDroppable
    - stopPublishing
    - subscriber
    - startPublishing
    - canStartDrag
    - scrollWindow
    - getScrollableDroppableOver
    - getBestScrollableDroppable
    - getDistanceThresholds
    - getPercentage
    - getValueFromDistance
    - dampenValueByTime
    - getValue
    - getScrollOnAxis
    - adjustForSizeLimits
    - 1
    - getOverlap
    - getRemainder
    - canPartiallyScroll
    - canScrollWindow
    - getWindowOverlap
    - canScrollDroppable
    - getDroppableOverlap
    - getWindowScrollChange
    - getDroppableScrollChange
    - scroll
    - createFluidScroller
    - tryScroll
    - 1
    - fakeScrollCallback
    - stop
    - createJumpScroller
    - moveByOffset
    - scrollDroppableAsMuchAsItCan
    - scrollWindowAsMuchAsItCan
    - jumpScroller
    - createAutoScroller
    - scroll
    - dragHandle
    - draggable
    - droppable
    - makeGetSelector
    - getStyles
    - 1
    - 1
    - 1
    - getHead
    - createStyleEl
    - useStyleMarshal
    - remove
    - querySelectorAll
    - getWindowFromEl
    - isHtmlElement
    - findDragHandle
    - useFocusMarshal
    - register
    - unregister
    - tryGiveFocus
    - tryShiftRecord
    - tryRestoreFocusRecorded
    - tryRecordFocus
    - clearFrameOnUnmount
    - createRegistry
    - subscribe
    - unsubscribe
    - notify
    - findDraggableById
    - getDraggableById
    - findDroppableById
    - getDroppableById
    - clean
    - useRegistry
    - unmount
    - getBodyElement
    - getId
    - useAnnouncer
    - setup
    - cleanup
    - remove
    - useUniqueId
    - getElementId
    - useHiddenTextElement
    - mount
    - unmount
    - getVersion
    - isSatisfied
    - checkReactVersion
    - checkDoctype
    - useDev
    - useDevSetupWarning
    - useStartupValidation
    - usePrevious
    - create
    - isClaimed
    - isActive
    - claim
    - release
    - tryAbandon
    - isDragging
    - preventStandardKeyEvents
    - supportedEventName
    - isSloppyClickThresholdExceeded
    - getCaptureBindings
    - useMouseSensor
    - onMouseDown
    - listenForCapture
    - bindCapturingEvents
    - startPendingDrag
    - mount
    - unmount
    - noop
    - getDraggingBindings
    - cancel
    - drop
    - useKeyboardSensor
    - onKeyDown
    - stop
    - tryStartCapture
    - mount
    - unmount
    - getWindowBindings
    - getHandleBindings
    - useTouchSensor
    - getPhase
    - setPhase
    - onTouchStart
    - listenForCapture
    - bindCapturingEvents
    - unbindAll
    - startDragging
    - startPendingDrag
    - mount
    - unmount
    - webkitHack
    - useValidateSensorHooks
    - isAnInteractiveElement
    - isEventInInteractiveElement
    - getBorderBoxCenterPosition
    - isElement
    - supportedMatchesName
    - closestPonyfill
    - closest
    - getSelector
    - findClosestDragHandleFromEvent
    - tryGetClosestDraggableIdFromEvent
    - findDraggable
    - preventDefault
    - isActive
    - canStart
    - tryStart
    - getShouldRespectForcePress
    - isLockActive
    - tryDispatch
    - lift
    - completed
    - finish
    - fluidLift
    - 1
    - snapLift
    - abortPreDrag
    - useSensorMarshal
    - lockAPI
    - tryAbandonLock
    - listenToStore
    - tryReleaseLock
    - createResponders
    - onBeforeCapureCallback
    - createAutoScrollerOptions
    - getStore
    - App
    - useUniqueContextId
    - DragDropContext
    - getDraggingTransition
    - getDraggingOpacity
    - getShouldDraggingAnimate
    - getDraggingStyle
    - getSecondaryStyle
    - getStyle
    - getDimension
    - useDraggablePublisher
    - checkIsValidInnerRef
    - useValidation
    - prefix
    - useClonePropValidation
    - useRequiredContext
    - preventHtml5Dnd
    - Draggable
    - isStrictEqual
    - whatIsDraggedOverFromResult
    - getCombineWithFromResult
    - getCombineWithFromImpact
    - getDraggableSelector
    - selector
    - getSecondarySnapshot
    - getSecondarySelector
    - getFallback
    - getProps
    - selector
    - 1
    - selector
    - PrivateDraggable
    - PublicDraggable
    - isEqual
    - isEither
    - isBoth
    - isElementScrollable
    - isBodyScrollable
    - getClosestScrollable
    - checkForNestedScrollContainers
    - getScroll
    - getIsFixed
    - getEnv
    - getDroppableDimension
    - frame
    - getClient
    - getDimension
    - closest
    - getListenerOptions
    - getClosestScrollableFromDrag
    - useDroppablePublisher
    - noop
    - getSize
    - getStyle
    - Placeholder
    - isBoolean
    - runChecks
    - required
    - boolean
    - ref
    - placeholder
    - hasClone
    - hasNoPlaceholder
    - useValidation
    - onClose
    - Droppable
    - getClone
    - getBody
    - attachDefaultPropsToOwnProps
    - isMatchingType
    - getDraggable
    - makeMapStateToProps
    - selector
    - ConnectedDroppable
    - UserCircleIcon
    - ClipboardDocumentCheckIcon
    - BookmarkIcon
  Comments:
    //# sourceMappingURL=module.compiled.js.map
    //# sourceMappingURL=react-jsx-dev-runtime.js.map
    //# sourceMappingURL=react.js.map
    //# sourceMappingURL=react-dom.js.map
    /**
 * @license React
 * use-sync-external-store-with-selector.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    // src/utils/react.ts
    // src/hooks/useSelector.ts
    // src/utils/react-is.ts
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/utils/warning.ts
    // src/connect/verifySubselectors.ts
    // src/connect/selectorFactory.ts
    // src/utils/bindActionCreators.ts
    // src/utils/isPlainObject.ts
    // src/utils/verifyPlainObject.ts
    // src/connect/wrapMapToProps.ts
    // src/connect/invalidArgFactory.ts
    // src/connect/mapDispatchToProps.ts
    // @ts-ignore
    // @ts-ignore
    // src/connect/mapStateToProps.ts
    // @ts-ignore
    // src/connect/mergeProps.ts
    // src/utils/batch.ts
    // src/utils/Subscription.ts
    // src/utils/useIsomorphicLayoutEffect.ts
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/utils/shallowEqual.ts
    // src/utils/hoistStatics.ts
    // src/components/Context.ts
    /* @__PURE__ */
    /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/components/connect.tsx
    // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.
    // @ts-ignore
    // use React's forwardRef to expose a ref of the wrapped component
    // the context consumer to use
    /* @__PURE__ */
    // @ts-ignore
    /* @__PURE__ */
    // @ts-ignore
    /* @__PURE__ */
    // @ts-ignore
    // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing
    // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,
    // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.
    // @ts-ignore
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/components/Provider.tsx
    /* @__PURE__ */
    /* @__PURE__ */
    // src/hooks/useReduxContext.ts
    /* @__PURE__ */
    // src/hooks/useStore.ts
    // @ts-ignore
    /* @__PURE__ */
    // src/hooks/useDispatch.ts
    /* @__PURE__ */
    //redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization", {
    /* @__PURE__ */
    // src/exports.ts
    //# sourceMappingURL=react-redux.mjs.map
    // src/utils/formatProdErrorMessage.ts
    //redux.js.org/Errors?code=${code} for the full message or use the non-minified dev environment for full errors. `;
    // src/utils/symbol-observable.ts
    /* @__PURE__ */
    // src/utils/actionTypes.ts
    // src/utils/isPlainObject.ts
    // src/utils/kindOf.ts
    // src/createStore.ts
    //redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
    /* @__PURE__ */
    /* @__PURE__ */
    //redux.js.org/api/store#subscribelistener for more details.");
    //redux.js.org/api/store#subscribelistener for more details.");
    //redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`);
    /**
       * The minimal observable subscription method.
       * @param observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
    // src/utils/warning.ts
    // src/combineReducers.ts
    /*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.`);
        }
    });
}
function combineReducers(reducers) {
    const reducerKeys = Object.keys(reducers);
    const finalReducers = {};
    for(let i = 0; i < reducerKeys.length; i++){
        const key = reducerKeys[i];
        if ("TURBOPACK compile-time truthy", 1) {
            if (typeof reducers[key] === "undefined") {
                warning(`No reducer provided for key "${key}"`);
            }
        }
        if (typeof reducers[key] === "function") {
            finalReducers[key] = reducers[key];
        }
    }
    const finalReducerKeys = Object.keys(finalReducers);
    let unexpectedKeyCache;
    if (("TURBOPACK compile-time value", "development") !== "production") {
        unexpectedKeyCache = {};
    }
    let shapeAssertionError;
    try {
        assertReducerShape(finalReducers);
    } catch (e) {
        shapeAssertionError = e;
    }
    return function combination(state = {}, action) {
        if (shapeAssertionError) {
            throw shapeAssertionError;
        }
        if ("TURBOPACK compile-time truthy", 1) {
            const warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
            if (warningMessage) {
                warning(warningMessage);
            }
        }
        let hasChanged = false;
        const nextState = {};
        for(let i = 0; i < finalReducerKeys.length; i++){
            const key = finalReducerKeys[i];
            const reducer = finalReducers[key];
            const previousStateForKey = state[key];
            const nextStateForKey = reducer(previousStateForKey, action);
            if (typeof nextStateForKey === "undefined") {
                const actionType = action && action.type;
                throw new Error(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : `When called with an action of type ${actionType ? `"${String(actionType)}"` : "(unknown type)"}, the slice reducer for key "${key}" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.`);
            }
            nextState[key] = nextStateForKey;
            hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
        }
        hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
        return hasChanged ? nextState : state;
    };
}
// src/bindActionCreators.ts
function bindActionCreator(actionCreator, dispatch) {
    return function(...args) {
        return dispatch(actionCreator.apply(this, args));
    };
}
function bindActionCreators(actionCreators, dispatch) {
    if (typeof actionCreators === "function") {
        return bindActionCreator(actionCreators, dispatch);
    }
    if (typeof actionCreators !== "object" || actionCreators === null) {
        throw new Error(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : `bindActionCreators expected an object or a function, but instead received: '${kindOf(actionCreators)}'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?`);
    }
    const boundActionCreators = {};
    for(const key in actionCreators){
        const actionCreator = actionCreators[key];
        if (typeof actionCreator === "function") {
            boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
        }
    }
    return boundActionCreators;
}
// src/compose.ts
function compose(...funcs) {
    if (funcs.length === 0) {
        return (arg)=>arg;
    }
    if (funcs.length === 1) {
        return funcs[0];
    }
    return funcs.reduce((a, b)=>(...args)=>a(b(...args)));
}
// src/applyMiddleware.ts
function applyMiddleware(...middlewares) {
    return (createStore2)=>(reducer, preloadedState)=>{
            const store = createStore2(reducer, preloadedState);
            let dispatch = ()=>{
                throw new Error(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
            };
            const middlewareAPI = {
                getState: store.getState,
                dispatch: (action, ...args)=>dispatch(action, ...args)
            };
            const chain = middlewares.map((middleware)=>middleware(middlewareAPI));
            dispatch = compose(...chain)(store.dispatch);
            return {
                ...store,
                dispatch
            };
        };
}
// src/utils/isAction.ts
function isAction(action) {
    return isPlainObject(action) && "type" in action && typeof action.type === "string";
}
;
 //# sourceMappingURL=redux.mjs.map
}}),
"[project]/node_modules/@hello-pangea/dnd/dist/dnd.esm.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "DragDropContext": (()=>DragDropContext),
    "Draggable": (()=>PublicDraggable),
    "Droppable": (()=>ConnectedDroppable),
    "useKeyboardSensor": (()=>useKeyboardSensor),
    "useMouseSensor": (()=>useMouseSensor),
    "useTouchSensor": (()=>useTouchSensor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-dom.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/react-redux/dist/react-redux.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$box$2d$model$2f$dist$2f$css$2d$box$2d$model$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/css-box-model/dist/css-box-model.esm.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$raf$2d$schd$2f$dist$2f$raf$2d$schd$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/raf-schd/dist/raf-schd.esm.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/redux/dist/redux.mjs [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
const isProduction$1 = ("TURBOPACK compile-time value", "development") === 'production';
const spacesAndTabs = /[ \t]{2,}/g;
const lineStartWithSpaces = /^[ \t]*/
    //github.com/hello-pangea/dnd/blob/main/docs/patterns/virtual-lists.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/doctype.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/using-inner-ref.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/how-we-detect-scroll-containers.md
    //github.com/atlassian/react-beautiful-dnd/issues/131
    //github.com/hello-pangea/dnd/blob/main/docs/api/droppable.md
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=node_modules_510ba8._.js.map

File: ./frontend/.next/server/chunks/ssr/_14ace5._.js
  JavaScript Functions:
    - Home
  Comments:
    /*#__PURE__*/
    /*#__PURE__*/
    // We inject the tree and pages here so that we can use them in the route
    // module.
    //", props.params, "favicon.ico") + `?${__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$225b$project$5d2f$src$2f$app$2f$favicon$2e$ico__$5b$app$2d$rsc$5d$__$28$static$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29$__["default"].src.split("/").splice(-1)[0]}`,
    // The following aren't used in production.
    //# sourceMappingURL=app-page.js.map
    //# sourceMappingURL=_14ace5._.js.map

File: ./frontend/.next/server/chunks/ssr/node_modules_824fc8._.js
  JavaScript Functions:
    - getSegmentValue
    - _export
    - isGroupSegment
    - isParallelRouteSegment
    - addSearchParamsIfPageSegment
    - _export
    - isRedirectError
    - _export
    - getRedirectError
    - redirect
    - permanentRedirect
    - getURLFromRedirectError
    - getRedirectTypeFromError
    - getRedirectStatusCodeFromError
    - _export
    - isHTTPAccessFallbackError
    - getAccessFallbackHTTPStatus
    - getAccessFallbackErrorTypeByStatus
    - allows
    - notFound
    - allows
    - forbidden
    - allows
    - unauthorized
    - _export
    - isDynamicServerError
    - _export
    - isBailoutToCSRError
    - isNextRouterError
    - _export
    - isStaticGenBailoutError
    - constructs
    - makeHangingPromise
    - ignoreReject
    - _export
    - _export
    - _interop_require_default
    - createDynamicTrackingState
    - createDynamicValidationState
    - getFirstDynamicReason
    - markCurrentScopeAsDynamic
    - trackFallbackParamAccessed
    - throwToInterruptStaticGeneration
    - trackDynamicDataInDynamicRender
    - abortOnSynchronousDynamicDataAccess
    - abortOnSynchronousPlatformIOAccess
    - trackSynchronousPlatformIOAccessInDev
    - abortAndThrowOnSynchronousRequestDataAccess
    - Postpone
    - postponeWithTracking
    - createPostponeReason
    - isDynamicPostpone
    - isDynamicPostponeReason
    - createPrerenderInterruptedError
    - isPrerenderInterruptedError
    - accessedDynamicData
    - consumeDynamicAccess
    - formatDynamicAPIAccesses
    - assertPostpone
    - createPostponedAbortSignal
    - annotateDynamicAccess
    - useDynamicRouteParams
    - trackAllowedDynamicAccess
    - createErrorWithComponentStack
    - throwIfDisallowedDynamic
    - isDynamicUsageError
    - isPostpone
    - unstable_rethrow
    - _export
    - bailoutToClientRendering
    - _export
    - useSearchParams
    - readonlySearchParams
    - usePathname
    - useRouter
    - useParams
    - getSelectedLayoutSegmentPath
    - useSelectedLayoutSegments
    - useSelectedLayoutSegment
    - _interop_require_default
    - forEach
    - duplex
    - proxyWriter
    - method
    - proxyReader
    - method
    - proxyStream
    - reemit
    - handleEnd
    - reemit
    - getOptions
    - exports
    - sync
    - stream
    - file
    - fileSync
    - processFn
    - exports
    - filter
    - match
    - __nccwpck_require__
    - murmurhash2
    - typeOf
    - _getRequireWildcardCache
    - _interop_require_wildcard
    - removeTrailingSlash
    - getAssetPathFromRoute
    - getPolicy
    - __unsafeCreateTrustedScriptURL
    - _export
    - getDeploymentIdQueryOrEmptyString
    - encodeURIPath
    - _export
    - withFuture
    - markAssetError
    - isAssetError
    - hasPrefetch
    - getAssetQueryString
    - prefetchViaDom
    - onerror
    - appendScript
    - onerror
    - resolvePromiseWithTimeout
    - getClientBuildManifest
    - __BUILD_MANIFEST_CB
    - getFilesForRoute
    - createRouteLoader
    - maybeExecuteScript
    - fetchStyleSheet
    - isBooleanScriptAttribute
    - setAttributesFromProps
    - _export
    - insertStylesheets
    - to
    - loadScript
    - onLoad
    - afterLoad
    - handleClientScriptLoad
    - loadLazyScript
    - addBeforeInteractiveToCache
    - initScriptLoader
    - Script
    - onLoad
    - if
    - _export
    - getObjectClassLabel
    - isPlainObject
    - _export
    - isError
    - safeStringify
    - getProperError
    - _export
    - handleSlug
    - getSortedRoutes
    - getSortedRouteObjects
    - ensures
    - ensureLeadingSlash
    - _export
    - normalizeAppPath
    - normalizeRscURL
    - _export
    - isInterceptionRouteAppPath
    - extractInterceptionRouteInformation
    - isDynamicRoute
    - _export
    - ensures
    - normalizePathSep
    - denormalizePagePath
    - normalizeLocalePath
    - mitt
    - _export
    - execOnce
    - isAbsoluteUrl
    - getLocationOrigin
    - getURL
    - getDisplayName
    - isResSent
    - normalizeRepeatedSlashes
    - loadGetInitialProps
    - stringifyError
    - _export
    - searchParamsToUrlQuery
    - stringifyUrlQueryParam
    - urlQueryToSearchParams
    - assign
    - parseRelativeUrl
    - lexer
    - parse
    - compile
    - tokensToFunction
    - match
    - regexpToFunction
    - escapeString
    - flags
    - regexpToRegexp
    - arrayToRegexp
    - stringToRegexp
    - tokensToRegexp
    - pathToRegexp
    - getPathMatch
    - that
    - escapeStringRegexp
    - parseUrl
    - _export
    - parse
    - serialize
    - tryDecode
    - getCookieParser
    - parseCookie
    - _export
    - getSafeParamName
    - escapeSegment
    - unescapeSegments
    - matchHas
    - hasMatch
    - compileNonPath
    - prepareDestination
    - will
    - parsePath
    - pathHasPrefix
    - hasBasePath
    - removeBasePath
    - resolveRewrites
    - handleRewrite
    - getRouteMatcher
    - decode
    - _export
    - did
    - did
    - _export
    - parseParameter
    - parseMatchedParameter
    - getParametrizedRoute
    - getRouteRegex
    - to
    - buildGetSafeRouteKey
    - getSafeKeyFromSegment
    - getNamedParametrizedRoute
    - getNamedRouteRegex
    - getNamedMiddlewareRegex
    - modified
    - _export
    - formatUrl
    - formatWithValidation
    - normalizePathTrailingSlash
    - removeLocale
    - addPathPrefix
    - addBasePath
    - omit
    - isLocalURL
    - interpolateAs
    - resolveHref
    - isAPIRoute
    - removePathPrefix
    - getNextPathnameInfo
    - below
    - addPathSuffix
    - addLocale
    - formatNextPathnameInfo
    - compareRouterStates
    - isBot
    - with
    - finishes
    - handleSmoothScroll
    - _export
    - buildCancellationError
    - matchesMiddleware
    - stripOrigin
    - prepareUrlAs
    - resolveDynamicRoute
    - getMiddlewareData
    - withMiddlewareEffects
    - fetchRetry
    - tryToParseAsJSON
    - fetchNextData
    - getData
    - createKey
    - handleHardNavigation
    - getCancelledHandler
    - clc
    - handleCancelled
    - cancel
    - onPopState
    - withRouter
    - WithRouterWrapper
    - _export
    - getRouter
    - useRouter
    - createRouter
    - makePublicRouterInstance
    - ArrowsPointingOutIcon
    - XMarkIcon
  Comments:
    //# sourceMappingURL=module.compiled.js.map
    //# sourceMappingURL=react-jsx-dev-runtime.js.map
    //# sourceMappingURL=react.js.map
    //# sourceMappingURL=app-router-context.js.map
    //# sourceMappingURL=hooks-client-context.js.map
    //# sourceMappingURL=get-segment-value.js.map
    // Use array[0] for performant purpose
    //# sourceMappingURL=segment.js.map
    /*#__PURE__*/
    //# sourceMappingURL=redirect-status-code.js.map
    /*#__PURE__*/
    //# sourceMappingURL=redirect-error.js.map
    /** The URL to redirect to */
    /** The URL to redirect to */
    // Slices off the beginning of the digest that contains the code and the
    // separating ';'.
    //# sourceMappingURL=redirect.js.map
    //# sourceMappingURL=http-access-fallback.js.map
    /**
 * This function allows you to render the [not-found.js file](https://nextjs.org/docs/app/api-reference/file-conventions/not-found)
 * within a route segment as well as inject a tag.
 *
 * `notFound()` can be used in
 * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),
 * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and
 * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).
 *
 * - In a Server Component, this will insert a `<meta name="robots" content="noindex" />` meta tag and set the status code to 404.
 * - In a Route Handler or Server Action, it will serve a 404 to the caller.
 *
 * Read more: [Next.js Docs: `notFound`](https://nextjs.org/docs/app/api-reference/functions/not-found)
 */
    // eslint-disable-next-line no-throw-literal
    //# sourceMappingURL=not-found.js.map
    // TODO: Add `forbidden` docs
    /**
 * @experimental
 * This function allows you to render the [forbidden.js file](https://nextjs.org/docs/app/api-reference/file-conventions/forbidden)
 * within a route segment as well as inject a tag.
 *
 * `forbidden()` can be used in
 * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),
 * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and
 * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).
 *
 * Read more: [Next.js Docs: `forbidden`](https://nextjs.org/docs/app/api-reference/functions/forbidden)
 */
    // eslint-disable-next-line no-throw-literal
    //# sourceMappingURL=forbidden.js.map
    // TODO: Add `unauthorized` docs
    /**
 * @experimental
 * This function allows you to render the [unauthorized.js file](https://nextjs.org/docs/app/api-reference/file-conventions/unauthorized)
 * within a route segment as well as inject a tag.
 *
 * `unauthorized()` can be used in
 * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),
 * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and
 * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).
 *
 *
 * Read more: [Next.js Docs: `unauthorized`](https://nextjs.org/docs/app/api-reference/functions/unauthorized)
 */
    // eslint-disable-next-line no-throw-literal
    //# sourceMappingURL=unauthorized.js.map
    //# sourceMappingURL=hooks-server-context.js.map
    // This has to be a shared module which is shared between client component error boundary and dynamic component
    //# sourceMappingURL=bailout-to-csr.js.map
    //# sourceMappingURL=is-next-router-error.js.map
    //# sourceMappingURL=static-generation-bailout.js.map
    /**
 * This function constructs a promise that will never resolve. This is primarily
 * useful for dynamicIO where we use promise resolution timing to determine which
 * parts of a render can be included in a prerender.
 *
 * @internal
 */
    // We are fine if no one actually awaits this promise. We shouldn't consider this an unhandled rejection so
    // we attach a noop catch handler here to suppress this warning. If you actually await somewhere or construct
    // your own promise out of it you'll need to ensure you handle the error when it rejects.
    //# sourceMappingURL=dynamic-rendering-utils.js.map
    //# sourceMappingURL=metadata-constants.js.map
    /**
 * The functions provided by this module are used to communicate certain properties
 * about the currently running code so that Next.js can make decisions on how to handle
 * the current execution in different rendering modes such as pre-rendering, resuming, and SSR.
 *
 * Today Next.js treats all code as potentially static. Certain APIs may only make sense when dynamically rendering.
 * Traditionally this meant deopting the entire render to dynamic however with PPR we can now deopt parts
 * of a React tree as dynamic while still keeping other parts static. There are really two different kinds of
 * Dynamic indications.
 *
 * The first is simply an intention to be dynamic. unstable_noStore is an example of this where
 * the currently executing code simply declares that the current scope is dynamic but if you use it
 * inside unstable_cache it can still be cached. This type of indication can be removed if we ever
 * make the default dynamic to begin with because the only way you would ever be static is inside
 * a cache scope which this indication does not affect.
 *
 * The second is an indication that a dynamic data source was read. This is a stronger form of dynamic
 * because it means that it is inappropriate to cache this at all. using a dynamic data source inside
 * unstable_cache should error. If you want to use some dynamic data inside unstable_cache you should
 * read that data outside the cache and pass it in as an argument to the cached function.
 */
    /*#__PURE__*/
    // inside cache scopes marking a scope as dynamic has no effect because the outer cache scope
    // creates a cache boundary. This is subtly different from reading a dynamic data source which is
    // forbidden inside a cache scope.
    // If we're forcing dynamic rendering or we're forcing static rendering, we
    // don't need to do anything here because the entire page is already dynamic
    // or it's static and it should not throw or postpone here.
    //nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);
    // We aren't prerendering but we are generating a static page. We need to bail out of static generation
    //nextjs.org/docs/messages/dynamic-server-error`);
    // We aren't prerendering but we are generating a static page. We need to bail out of static generation
    //nextjs.org/docs/messages/dynamic-server-error`);
    // inside cache scopes marking a scope as dynamic has no effect because the outer cache scope
    // creates a cache boundary. This is subtly different from reading a dynamic data source which is
    // forbidden inside a cache scope.
    // Despite it's name we don't actually abort unless we have a controller to call abort on
    // There are times when we let a prerender run long to discover caches where we want the semantics
    // of tracking dynamic access without terminating the prerender early
    // When we aren't debugging, we don't need to create another error for the
    // stack trace.
    // We don't actually have a controller to abort but we do the semantic equivalent by
    // advancing the request store out of prerender mode
    // We always log Request Access in dev at the point of calling the function
    // So we mark the dynamic validation as not requiring it to be printed
    // When we aren't debugging, we don't need to create another error for the
    // stack trace.
    //nextjs.org/docs/messages/ppr-caught-error`;
    //nextjs.org/docs/messages/ppr-caught-error');
    // We mutate because we only call this once we are no longer writing
    // to the dynamicTrackingState and it's more efficient than creating a new
    // array.
    // Remove the "Error: " prefix from the first line of the stack trace as
    // well as the first 4 lines of the stack trace which is the distance
    // from the user code and the `new Error().stack` call.
    // Exclude Next.js internals from the stack trace.
    // Exclude anonymous functions from the stack trace.
    // Exclude Node.js internals from the stack trace.
    // We get our hands on a postpone instance by calling postpone and catching the throw
    // There are fallback route params, we should track these as dynamic
    // accesses.
    // We're prerendering with dynamicIO or PPR or both
    // We are in a prerender with dynamicIO semantics
    // We are going to hang here and never resolve. This will cause the currently
    // rendering component to effectively be a dynamic hole
    // We're prerendering with PPR
    // We don't need to track that this is dynamic. It is only so when something else is also dynamic.
    //nextjs.org/docs/messages/next-prerender-missing-suspense`;
    // In dev we already log errors about sync dynamic access. But during builds we need to ensure
    // the offending sync error is logged before we exit the build
    // The actual error should have been logged when the sync access ocurred
    //# sourceMappingURL=dynamic-rendering.js.map
    //# sourceMappingURL=is-dynamic-usage-error.js.map
    //# sourceMappingURL=is-postpone.js.map
    //# sourceMappingURL=unstable-rethrow.js.map
    /** @internal */
    //nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams');
    /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */
    /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */
    /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */
    /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */
    //# sourceMappingURL=navigation.react-server.js.map
    //# sourceMappingURL=server-inserted-html.js.map
    //# sourceMappingURL=bailout-to-client-rendering.js.map
    // In the case where this is `null`, the compat types added in
    // `next-env.d.ts` will add a new overload that changes the return type to
    // include `null`.
    // When the router is not ready in pages, we won't have the search params
    // available.
    // AsyncLocalStorage should not be included in the client bundle.
    // TODO-APP: handle dynamic = 'force-static' here and on the client
    // In the case where this is `null`, the compat types added in `next-env.d.ts`
    // will add a new overload that changes the return type to include `null`.
    /** Get the canonical parameters from the current level to the leaf node. */
    // Client components API
    // Use the provided parallel route key on the first parallel route
    // After first parallel route prefer children, if there's no children pick the first parallel route.
    // @ts-expect-error This only happens in `pages`. Type is overwritten in navigation.d.ts
    // if the default slot is showing, we return null since it's not technically "selected" (it's a fallback)
    // and returning an internal value like `__DEFAULT__` would be confusing.
    //# sourceMappingURL=navigation.js.map
    // minimal implementation MurmurHash2 hash function
    // default to 0.01% error rate as the filter compresses very well
    //# sourceMappingURL=bloom-filter.js.map
    /**
 * @license React
 * react-is.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    /**
 * Removes the trailing slash for a given route or page path. Preserves the
 * root page. Examples:
 *   - `/foo/bar/` -> `/foo/bar`
 *   - `/foo/bar` -> `/foo/bar`
 *   - `/` -> `/`
 */
    //# sourceMappingURL=remove-trailing-slash.js.map
    // Translates a logical route into its pages asset path (relative from a common prefix)
    // "asset path" being its javascript file, data file, prerendered html,...
    //# sourceMappingURL=get-asset-path-from-route.js.map
    /**
 * Stores the Trusted Types Policy. Starts as undefined and can be set to null
 * if Trusted Types is not supported in the browser.
 */
    /**
 * Getter for the Trusted Types Policy. If it is undefined, it is instantiated
 * here or set to null if Trusted Types is not supported in the browser.
 */
    //# sourceMappingURL=trusted-types.js.map
    //# sourceMappingURL=request-idle-callback.js.map
    //# sourceMappingURL=deployment-id.js.map
    //# sourceMappingURL=encode-uri-path.js.map
    /*#__PURE__*/
    // 3.8s was arbitrarily chosen as it's what https://web.dev/interactive
    // considers as "Good" time-to-interactive. We must assume something went
    // wrong beyond this point, and then fall-back to a full page transition to
    // show the user something of value.
    // with relList.support
    // The order of property assignment here is intentional:
    // `href` should always be last:
    // The order of property assignment here is intentional.
    // 1. Setup success/failure hooks in case the browser synchronously
    //    executes when `src` is set.
    // 2. Configure the cross-origin attribute before setting `src` in case the
    //    browser begins to fetch.
    // 3. Finally, set the source and inject into the DOM in case the child
    //    must be appended for fetching to start.
    // We wait for pages to be built in dev before we start the route transition
    // timeout to prevent an un-necessary hard navigation in development.
    // Resolve a promise that times out after given amount of milliseconds.
    // Resolved, cancel the timeout
    // We wrap these checks separately for better dead-code elimination in
    // production bundles.
    // Mandatory because this is not concurrent safe:
    // Styles are handled by `style-loader` in development:
    // With HMR we might need to "reload" scripts when they are
    // disposed and readded. Executing scripts twice has no functional
    // differences
    // when this entrypoint has been resolved before
    // the route is outdated and we want to invalidate
    // this cache entry
    // we don't want to cache errors during prefetch
    // https://github.com/GoogleChromeLabs/quicklink/blob/453a661fa1fa940e2d2e044452398e38c67a98fb/src/index.mjs#L115-L118
    // License: Apache 2.0
    // Don't prefetch if using 2G or if Save-Data is enabled.
    //# sourceMappingURL=route-loader.js.map
    //# sourceMappingURL=react-jsx-runtime.js.map
    //# sourceMappingURL=react-dom.js.map
    //# sourceMappingURL=head-manager-context.js.map
    // we don't render undefined props to the DOM
    // Correctly assign boolean script attributes
    // https://github.com/vercel/next.js/pull/20748
    // Remove falsy non-zero boolean attributes so they are correctly interpreted
    // (e.g. if we set them to false, this coerces to the string "false", which the browser interprets as true)
    // Call setAttribute before, as we need to set and unset the attribute to override force async:
    // https://html.spec.whatwg.org/multipage/scripting.html#script-force-async
    //# sourceMappingURL=set-attributes-from-props.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    // Case 1: Styles for afterInteractive/lazyOnload with appDir injected via handleClientScriptLoad
    //
    // Using ReactDOM.preinit to feature detect appDir and inject styles
    // Stylesheets might have already been loaded if initialized with Script component
    // Re-inject styles here to handle scripts loaded via handleClientScriptLoad
    // ReactDOM.preinit handles dedup and ensures the styles are loaded only once
    // Case 2: Styles for afterInteractive/lazyOnload with pages injected via handleClientScriptLoad
    //
    // We use this function to load styles when appdir is not detected
    // TODO: Use React float APIs to load styles once available for pages dir
    // Script has already loaded
    // Contents of this script are already loading/loaded
    // It is possible that multiple `next/script` components all have same "src", but has different "onLoad"
    // This is to make sure the same remote script will only load once, but "onLoad" are executed in order
    /** Execute after the script first loaded */
    // Run onReady for the first time after load event
    // add cacheKey to LoadCache when load successfully
    // Casting since lib.dom.d.ts doesn't have TrustedHTML yet.
    // do not add cacheKey into LoadCache for remote script here
    // cacheKey will be added to LoadCache when it is actually loaded (see loadPromise above)
    // Load styles associated with this script
    /**
 * Load a third-party scripts in an optimized way.
 *
 * Read more: [Next.js Docs: `next/script`](https://nextjs.org/docs/app/api-reference/components/script)
 */
    // Context is available only during SSR
    /**
   * - First mount:
   *   1. The useEffect for onReady executes
   *   2. hasOnReadyEffectCalled.current is false, but the script hasn't loaded yet (not in LoadCache)
   *      onReady is skipped, set hasOnReadyEffectCalled.current to true
   *   3. The useEffect for loadScript executes
   *   4. hasLoadScriptEffectCalled.current is false, loadScript executes
   *      Once the script is loaded, the onLoad and onReady will be called by then
   *   [If strict mode is enabled / is wrapped in <OffScreen /> component]
   *   5. The useEffect for onReady executes again
   *   6. hasOnReadyEffectCalled.current is true, so entire effect is skipped
   *   7. The useEffect for loadScript executes again
   *   8. hasLoadScriptEffectCalled.current is true, so entire effect is skipped
   *
   * - Second mount:
   *   1. The useEffect for onReady executes
   *   2. hasOnReadyEffectCalled.current is false, but the script has already loaded (found in LoadCache)
   *      onReady is called, set hasOnReadyEffectCalled.current to true
   *   3. The useEffect for loadScript executes
   *   4. The script is already loaded, loadScript bails out
   *   [If strict mode is enabled / is wrapped in <OffScreen /> component]
   *   5. The useEffect for onReady executes again
   *   6. hasOnReadyEffectCalled.current is true, so entire effect is skipped
   *   7. The useEffect for loadScript executes again
   *   8. hasLoadScriptEffectCalled.current is true, so entire effect is skipped
   */
    // Run onReady if script has loaded before but component is re-mounted
    // Script has already loaded during SSR
    // For the app directory, we need React Float to preload these scripts.
    // Injecting stylesheets here handles beforeInteractive and worker scripts correctly
    // For other strategies injecting here ensures correct stylesheet order
    // ReactDOM.preinit handles loading the styles in the correct order,
    // also ensures the stylesheet is loaded only once and in a consistent manner
    //
    // Case 1: Styles for beforeInteractive/worker with appDir - handled here
    // Case 2: Styles for beforeInteractive/worker with pages dir - Not handled yet
    // Case 3: Styles for afterInteractive/lazyOnload with appDir - handled here
    // Case 4: Styles for afterInteractive/lazyOnload with pages dir - handled in insertStylesheets function
    // Before interactive scripts need to be loaded by Next.js' runtime instead
    // of native <script> tags, because they no longer have `defer`.
    // For inlined scripts, we put the content in `children`.
    // Casting since lib.dom.d.ts doesn't have TrustedHTML yet.
    /*#__PURE__*/
    // @ts-ignore
    /*#__PURE__*/
    // @ts-ignore
    //# sourceMappingURL=script.js.map
    /**
   * this used to be previously:
   *
   * `return prototype === null || prototype === Object.prototype`
   *
   * but Edge Runtime expose Object from vm, being that kind of type-checking wrongly fail.
   *
   * It was changed to the current implementation since it's resilient to serialization.
   */
    //# sourceMappingURL=is-plain-object.js.map
    /**
 * Checks whether the given value is a NextError.
 * This can be used to print a more detailed error message with properties like `code` & `digest`.
 */
    // If value is an object and already seen, replace with "[Circular]"
    // provide better error for case where `throw undefined`
    // is called in development
    //nextjs.org/docs/messages/threw-undefined');
    //nextjs.org/docs/messages/threw-undefined');
    //# sourceMappingURL=is-error.js.map
    // The next segment in the urlPaths list
    // Check if the segment matches `[something]`
    // Strip `[` and `]`, leaving only `something`
    // Strip optional `[` and `]`, leaving only `something`
    // Strip `...`, leaving only `something`
    // If the specific segment already has a slug but the slug is not `something`
    // This prevents collisions like:
    // pages/[post]/index.js
    // pages/[id]/index.js
    // Because currently multiple dynamic params on the same segment level are not supported
    // TODO: This error seems to be confusing for users, needs an error link, the description can be based on above comment.
    // slugName is kept as it can only be one particular slugName
    // nextSegment is overwritten to [[...]] so that it can later be sorted specifically
    // slugName is kept as it can only be one particular slugName
    // nextSegment is overwritten to [...] so that it can later be sorted specifically
    // slugName is kept as it can only be one particular slugName
    // nextSegment is overwritten to [] so that it can later be sorted specifically
    // If this UrlNode doesn't have the nextSegment yet we create a new child UrlNode
    // First the UrlNode is created, and every UrlNode can have only 1 dynamic segment
    // Eg you can't have pages/[post]/abc.js and pages/[hello]/something-else.js
    // Only 1 dynamic segment per nesting level
    // So in the case that is test/integration/dynamic-routing it'll be this:
    // pages/[post]/comments.js
    // pages/blog/[post]/comment/[id].js
    // Both are fine because `pages/[post]` and `pages/blog` are on the same level
    // So in this case `UrlNode` created here has `this.slugName === 'post'`
    // And since your PR passed through `slugName` as an array basically it'd including it in too many possibilities
    // Instead what has to be passed through is the upwards path's dynamic names
    // Here the `root` gets injected multiple paths, and insert will break them up into sublevels
    // Smoosh will then sort those sublevels up to the point where you get the correct route definition priority
    // We're assuming here that all the pathnames are unique, that way we can
    // sort the list and use the index as the key.
    // Sort the pathnames.
    // Map the sorted pathnames back to the original objects using the new sorted
    // index.
    //# sourceMappingURL=sorted-routes.js.map
    /**
 * For a given page path, this function ensures that there is a leading slash.
 * If there is not a leading slash, one is added, otherwise it is noop.
 */
    //# sourceMappingURL=ensure-leading-slash.js.map
    // Empty segments are ignored.
    // Groups are ignored.
    // Parallel segments are ignored.
    // The last segment (if it's a leaf) should be ignored.
    //# sourceMappingURL=app-paths.js.map
    // TODO-APP: add more serious validation
    // normalize the path, e.g. /(blog)/feed -> /feed
    // (.) indicates that we should match with sibling routes, so we just need to append the intercepted route to the intercepting route
    // (..) indicates that we should match at one level up, so we need to remove the last segment of the intercepting route
    // (...) will match the route segment in the root directory, so we need to use the root directory to prepend the intercepted route
    // (..)(..) indicates that we should match at two levels up, so we need to remove the last two segments of the intercepting route
    //# sourceMappingURL=interception-routes.js.map
    // Identify /[param]/ in route string
    //# sourceMappingURL=is-dynamic.js.map
    //# sourceMappingURL=index.js.map
    /**
 * For a given page path, this function ensures that there is no backslash
 * escaping slashes in the path. Example:
 *  - `foo\/bar\/baz` -> `foo/bar/baz`
 */
    //# sourceMappingURL=normalize-path-sep.js.map
    //# sourceMappingURL=denormalize-page-path.js.map
    // first item will be empty string from splitting at first char
    //# sourceMappingURL=normalize-locale-path.js.map
    /*
MIT License

Copyright (c) Jason Miller (https://jasonformat.com/)

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
    // This file is based on https://github.com/developit/mitt/blob/v1.1.3/src/index.js
    // It's been edited for the needs of this script
    // See the LICENSE at the top of the file
    // eslint-disable-next-line array-callback-return
    //# sourceMappingURL=mitt.js.map
    // Scheme: https://tools.ietf.org/html/rfc3986#section-3.1
    // Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3
    //" + hostname + (port ? ':' + port : '');
    // first we replace any non-encoded backslashes with forward
    // then normalize repeated forward slashes
    //nextjs.org/docs/messages/get-initial-props-as-an-instance-method for more information.';
    // when called from _app `ctx` is nested in `ctx`
    // @ts-ignore pageProps default
    //nextjs.org/docs/messages/empty-object-getInitialProps");
    //# sourceMappingURL=utils.js.map
    //# sourceMappingURL=querystring.js.map
    //n' : (0, _utils.getLocationOrigin)());
    //n' : window.location.href) : globalBase;
    //# sourceMappingURL=parse-relative-url.js.map
    /**
   * A matcher function that will check if a given pathname matches the path
   * given in the builder function. When the path does not match it will return
   * `false` but if it does it will return an object with the matched params
   * merged with the params provided in the second argument.
   */
    // If no pathname is provided it's not a match.
    // If the path did not match `false` will be returned.
    /**
     * If unnamed params are not allowed they must be removed from
     * the matched parameters. path-to-regexp uses "string" for named and
     * "number" for unnamed parameters.
     */
    //# sourceMappingURL=path-match.js.map
    // regexp is based on https://github.com/sindresorhus/escape-string-regexp
    // see also: https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/escapeRegExp.js#L23
    //# sourceMappingURL=escape-regexp.js.map
    //# sourceMappingURL=parse-url.js.map
    //# sourceMappingURL=app-router-headers.js.map
    /*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */
    //# sourceMappingURL=get-cookie-parser.js.map
    /**
 * Ensure only a-zA-Z are used for param names for proper interpolating
 * with path-to-regexp
 */
    // A-Z
    // a-z
    // remove port from host if present
    // the value needs to start with a forward-slash to be compiled
    // correctly
    // have already validated before we got to this point and validating
    // breaks compiling destinations with named pattern params from the source
    // e.g. /something:hello(.*) -> /another/:hello is broken with validation
    // since compile validation is meant for reversing and not for inserting
    // params from a separate path-regex into another
    // update any params in query values
    // the value needs to start with a forward-slash to be compiled
    // correctly
    // add path params to query if it's not a redirect and not
    // already defined in destination query or path
    // The compiler also that the interception route marker is an unnamed param, hence '0',
    // so we need to add it to the params object.
    //nextjs.org/docs/messages/invalid-multi-match");
    // Query merge order lowest priority to highest
    // 1. initial URL query values
    // 2. path segment values
    // 3. destination specified query values
    //# sourceMappingURL=prepare-destination.js.map
    /**
 * Given a path this function will find the pathname, query and hash and return
 * them. This is useful to parse full paths on the client side.
 * @param path A path to parse e.g. /foo/bar?id=1#hash
 */
    //# sourceMappingURL=parse-path.js.map
    //# sourceMappingURL=path-has-prefix.js.map
    //# sourceMappingURL=has-base-path.js.map
    // Can't trim the basePath if it has zero length!
    //# sourceMappingURL=remove-base-path.js.map
    // this is a proxied rewrite which isn't handled on the client
    // check if we now match a page as this means we are done
    // resolving the rewrites
    // check if we match a dynamic-route, if so we break the rewrites chain
    // we don't end after match in beforeFiles to allow
    // continuing through all beforeFiles rewrites
    // check dynamic route before processing fallback rewrites
    //# sourceMappingURL=resolve-rewrites.js.map
    //# sourceMappingURL=route-matcher.js.map
    //nextjs.org/docs/messages/public-next-folder-conflict`;
    //nextjs.org/docs/messages/404-get-initial-props`;
    //nextjs.org/docs/messages/gssp-export`;
    //nextjs.org/docs/messages/gssp-component-member`;
    //nextjs.org/docs/messages/non-standard-node-env`;
    //nextjs.org/docs/messages/ssg-fallback-true-export`;
    /**
 * The names of the webpack layers. These layers are the primitives for the
 * webpack chunks.
 */
    /**
   * The layer for the shared code between the client and server bundles.
   */
    /**
   * The layer for server-only runtime and picking up `react-server` export conditions.
   * Including app router RSC pages and app router custom routes and metadata routes.
   */
    /**
   * Server Side Rendering layer for app (ssr).
   */
    /**
   * The browser client bundle layer for actions.
   */
    /**
   * The layer for the API routes.
   */
    /**
   * The layer for the middleware code.
   */
    /**
   * The layer for the instrumentation hooks.
   */
    /**
   * The layer for assets on the edge.
   */
    /**
   * The browser client bundle layer for App directory.
   */
    // pages api
    // app router pages and layouts
    //# sourceMappingURL=constants.js.map
    /**
 * Regular expression pattern used to match route parameters.
 * Matches both single parameters and parameter groups.
 * Examples:
 *   - `[[...slug]]` matches parameter group with key 'slug', repeat: true, optional: true
 *   - `[...slug]` matches parameter group with key 'slug', repeat: true, optional: false
 *   - `[[foo]]` matches parameter with key 'foo', repeat: false, optional: true
 *   - `[bar]` matches parameter with key 'bar', repeat: false, optional: false
 */
    /**
 * Parses a matched parameter from the PARAMETER_PATTERN regex to a data structure that can be used
 * to generate the parametrized route.
 * Examples:
 *   - `[...slug]` -> `{ key: 'slug', repeat: true, optional: true }`
 *   - `...slug` -> `{ key: 'slug', repeat: true, optional: false }`
 *   - `[foo]` -> `{ key: 'foo', repeat: false, optional: true }`
 *   - `bar` -> `{ key: 'bar', repeat: false, optional: false }`
 * @param param - The matched parameter to parse.
 * @returns The parsed parameter as a data structure.
 */
    // Check for parameters
    /**
 * Builds a function to generate a minimal routeKey using only a-z and minimal
 * number of characters.
 */
    // replace any non-word characters since they can break
    // the named regex
    // check if the key is still invalid and fallback to using a known
    // safe key
    // if the segment has an interception marker, make sure that's part of the regex pattern
    // this is to ensure that the route with the interception marker doesn't incorrectly match
    // the non-intercepted route (ie /app/(.)[username] should not match /app/[username])
    // Check for parameters
    //# sourceMappingURL=route-regex.js.map
    // Format function modified from nodejs
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    /*#__PURE__*/
    //' + (host || '');
    //# sourceMappingURL=format-url.js.map
    //# sourceMappingURL=detect-domain-locale.js.map
    //# sourceMappingURL=normalize-trailing-slash.js.map
    //# sourceMappingURL=add-locale.js.map
    //# sourceMappingURL=remove-locale.js.map
    //# sourceMappingURL=add-path-prefix.js.map
    //# sourceMappingURL=add-base-path.js.map
    //# sourceMappingURL=omit.js.map
    // prevent a hydration mismatch on href for url with anchor refs
    // absolute urls can be local if they are on the same origin
    //# sourceMappingURL=is-local-url.js.map
    // Fall back to reading the values from the href
    // TODO: should this take priority; also need to change in the router.
    // support single-level catch-all
    // TODO: more robust handling for user-error (passing `/`)
    // Interpolate group into data URL if present
    // path delimiter escaped since they are being inserted
    // into the URL and we expect URL encoded segments
    // when parsing dynamic route params
    // did not satisfy all requirements
    // n.b. We ignore this error because we handle warning for this case in
    // development in the `<Link>` component directly.
    //# sourceMappingURL=interpolate-as.js.map
    // we use a dummy base url for relative urls
    // repeated slashes and backslashes in the URL are considered
    // invalid and will never match a Next.js page/file
    //);
    //) or backslashes \\ are not valid in the href.");
    // Return because it cannot be routed by the Next.js router
    //n');
    // fallback to / for invalid asPath values e.g. //
    //n');
    // if the origin didn't change, it means we received a relative href
    //# sourceMappingURL=resolve-href.js.map
    //# sourceMappingURL=is-api-route.js.map
    // If the path doesn't start with the prefix we can return it as is. This
    // protects us from situations where the prefix is a substring of the path
    // prefix such as:
    //
    // For prefix: /blog
    //
    //   /blog -> true
    //   /blog/ -> true
    //   /blog/1 -> true
    //   /blogging -> false
    //   /blogging/ -> false
    //   /blogging/1 -> false
    // Remove the prefix from the path via slicing.
    // If the path without the prefix starts with a `/` we can return it as is.
    // If the path without the prefix doesn't start with a `/` we need to add it
    // back to the path to make sure it's a valid path.
    //# sourceMappingURL=remove-path-prefix.js.map
    //, '').replace(/\.json$/, '').split('/');
    // update pathname with normalized if enabled although
    // we use normalized to populate locale info still
    // If provided, use the locale route normalizer to detect the locale instead
    // of the function below.
    //# sourceMappingURL=get-next-pathname-info.js.map
    //# sourceMappingURL=add-path-suffix.js.map
    // If no locale was given or the locale is the default locale, we don't need
    // to prefix the path.
    // If the path is an API path or the path already has the locale prefix, we
    // don't need to prefix the path.
    // Add the locale prefix to the path.
    //# sourceMappingURL=add-locale.js.map
    //# sourceMappingURL=format-next-pathname-info.js.map
    //# sourceMappingURL=compare-states.js.map
    //# sourceMappingURL=is-bot.js.map
    /**
 * Run function with `scroll-behavior: auto` applied to `<html/>`.
 * This css change will be reverted after the function finishes.
 */
    // if only the hash is changed, we don't need to disable smooth scrolling
    // we only care to prevent smooth scrolling when navigating to a new page to avoid jarring UX
    // In Chrome-based browsers we need to force reflow before calling `scrollTo`.
    // Otherwise it will not pickup the change in scrollBehavior
    // More info here: https://github.com/vercel/next.js/issues/40719#issuecomment-1336248042
    //# sourceMappingURL=handle-smooth-scroll.js.map
    // tslint:disable:no-console
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // remove basePath first since path prefix has to be in the order of `/${basePath}/${locale}`
    // Check only path match on client. Matching "has" should be done on server
    // where we can access more info such as headers, HttpOnly cookie, etc.
    // If url and as provided as an object representation,
    // we'll format them into the string version here.
    // handle resolving href for dynamic routes
    // eslint-disable-next-line array-callback-return
    // leverage x-matched-path to detect next.config.js rewrites
    // eslint-disable-next-line no-sequences
    // Cookies are required to be present for Next.js' SSG "Preview Mode".
    // Cookies may also be required for `getServerSideProps`.
    //
    // > `fetch` won’t send cookies, unless you set the credentials init
    // > option.
    // https://developer.mozilla.org/docs/Web/API/Fetch_API/Using_Fetch
    //
    // > For maximum browser compatibility when it comes to sending &
    // > receiving cookies, always supply the `credentials: 'same-origin'`
    // > option instead of relying on the default.
    // https://github.com/github/fetch#caveats
    /**
             * When the data response is a redirect because of a middleware
             * we do not consider it an error. The headers must bring the
             * mapped location.
             * TODO: Change the status code in the handler.
             */
    /**
             * We should only trigger a server-side transition if this was
             * caused on a client-side transition. Otherwise, we'd get into
             * an infinite loop.
             */
    // firefox
    // safari
    // when skipping client cache we wait to update
    // inflight cache until successful data response
    // this allows racing click event with fetching newer data
    // without blocking navigation when stale data is available
    // only update cache if not marked as no-cache
    // ensure we don't trigger a hard navigation to the same
    // URL as this can end up with an infinite refresh
    /**
   * Go back in history
   */
    /**
   * Go forward in history
   */
    /**
   * Performs a `pushState` with arguments
   * @param url of the route
   * @param as masks `url` for the browser
   * @param options object you can define `shallow` and other options
   */
    /**
   * Performs a `replaceState` with arguments
   * @param url of the route
   * @param as masks `url` for the browser
   * @param options object you can define `shallow` and other options
   */
    // failed to load build manifest hard navigate
    // to be safe
    //n').pathname);
    //n').pathname)) {
    // if any sub-path of as matches a dynamic filter path
    // it should be hard navigated
    // if the client router filter is matched then we trigger
    // a hard navigation
    // WARNING: `_h` is an internal option for handing Next.js client-side
    // hydration. Your app should _never_ use this property. It may change at
    // any time without notice.
    // for static pages with query params in the URL we delay
    // marking the router ready until after the query is updated
    // or a navigation has occurred
    // if a route transition is already in progress before
    // the query updating is triggered ignore query updating
    // marking route changes as a navigation start entry
    // If the url change is only related to a hash change
    // We should not proceed. We should only change the state.
    // TODO: do we need the resolved href when only a hash change?
    // The build manifest needs to be loaded before auto-static dynamic pages
    // get their query parameters to allow ensuring they can be parsed properly
    // when rewritten to
    // If we fail to resolve the page list or client-build manifest, we must
    // do a server-side transition:
    // If asked to change the current URL we should reload the current page
    // (not location.reload() but reload getInitialProps and other Next.js stuffs)
    // We also need to set the method = replaceState always
    // as this should not go into the history (That's how browsers work)
    // We should compare the new asPath to the current asPath, not the url
    // we need to resolve the as value using rewrites for dynamic SSG
    // pages to allow building the data URL correctly
    // url and as should always be prefixed with basePath by this
    // point by either next/link or router.push/replace so strip the
    // basePath from the pathname to match the pages dir 1-to-1
    // if we detected the path as app route during prefetching
    // trigger hard navigation
    // we don't attempt resolve asPath when we need to execute
    // middleware as the resolving will occur server-side
    //nextjs.org/docs/messages/invalid-relative-url-external-as");
    //nextjs.org/docs/messages/" + (shouldInterpolate ? 'href-interpolation-failed' : 'incompatible-href-as')));
    // Merge params into `query`, overwriting any specified in search
    // If the routeInfo brings a redirect we simply apply it.
    // handle redirect on client-transition
    // Use the destination from redirect without adding locale
    // check if destination is internal (resolves to a page) and attempt
    // client-navigation if it is falling back to hard navigation if
    // it's not
    // handle SSG data 404
    // ensure statusCode is still correct for static 500 page
    // when updating query information
    // shallow routing is only allowed for same page URL changes.
    // the new state that the router gonna set
    // When the page being rendered is the 404 page, we should only update the
    // query parameters. Route changes here might add the basePath when it
    // wasn't originally present. This is also why this block is before the
    // below `changeState` call which updates the browser's history (changing
    // the URL).
    // ensure statusCode is still correct for static 500 page
    // when updating query information
    // for query updates we can skip it if the state is unchanged and we don't
    // need to scroll
    // https://github.com/vercel/next.js/issues/37139
    // A hash mark # is the optional last part of a URL
    // Passing the empty string here should be safe against future changes to the method.
    // https://developer.mozilla.org/docs/Web/API/History/replaceState
    // bubble up cancellation errors
    // If we can't load the page it could be one of following reasons
    //  1. Page doesn't exists
    //  2. Page does exist in a different zone
    //  3. Internal error while loading the page
    // So, doing a hard reload is the proper way to deal with this.
    // Changing the URL doesn't block executing the current code path.
    // So let's throw a cancellation error stop the routing logic.
    /**
     * This `route` binding can change if there's a rewrite
     * so we keep a reference to the original requested route
     * so we can store the cache for it and avoid re-requesting every time
     * for shallow routing purposes.
     */
    // we don't hard error during query updating
    // as it's un-necessary and doesn't need to be fatal
    // unless it is a fallback route and the props can't
    // be loaded
    // when rendering error routes we don't apply middleware
    // effects
    // during query updating the page must match although during
    // client-transition a redirect that doesn't match a page
    // can be returned and this should trigger a hard navigation
    // which is valid for incremental migration
    // Check again the cache with the new destination.
    // If we have a match with the current route due to rewrite,
    // we can copy the existing information to the rewritten one.
    // Then, we return the information along with the matched route.
    // For non-SSG prefetches that bailed before sending data
    // we clear the cache to fetch full response
    // Only bust the data cache for SSP routes although
    // middleware can skip cache per request with
    // x-middleware-cache: no-cache as well
    // we kick off a HEAD request in the background
    // when a non-prefetch request is made to signal revalidation
    /**
   * Callback to execute before replacing router state
   * @param cb callback to be executed
   */
    // Makes sure we scroll to the provided hash if the url/hash are the same
    // If the urls are change, there's more than a hash change
    // If the hash has changed, then it's a hash only change.
    // This check is necessary to handle both the enter and
    // leave hash === '' cases. The identity case falls through
    // and is treated as a next reload.
    // Scroll to top if the hash is just `#` with no value or `#top`
    // To mirror browsers
    // Decode hash to make non-latin anchor works.
    // First we check if the element by id is found
    // If there's no element with the id, we check the `name` property
    // To mirror browsers
    /**
   * Prefetch page code, you may wait for the data during page rendering.
   * This feature only works in production!
   * @param url the href of prefetched page
   * @param asPath the as path of the prefetched page
   */
    // Prefetch is not supported in development mode because it would trigger on-demand-entries
    // Server Data Cache (full data requests)
    // Server Background Cache (HEAD requests)
    // We get state as undefined for two reasons.
    //  1. With older safari (< 8) and older chrome (< 34)
    //  2. When the URL changed with #
    //
    // In the both cases, we don't need to proceed and change the route.
    // (as it's already changed)
    // But we can simply replace the state with the new changes.
    // Actually, for (1) we don't need to nothing. But it's hard to detect that event.
    // So, doing the following for (1) does no harm.
    // __NA is used to identify if the history entry can be handled by the app-router.
    // Safari fires popstateevent when reopening the browser.
    // Make sure we don't re-render on initial load,
    // can be caused by navigating back from an external site
    // If the downstream application returns falsy, return.
    // They will then be responsible for handling the event.
    // @ts-ignore internal value not exposed on types
    // represents the current component key
    // set up the component cache (by route keys)
    // We should not keep the cache, if there's an error
    // Otherwise, this cause issues when when going back and
    // come again to the errored page.
    // Backwards compat for Router.router.events
    // TODO: Should be remove the following major version as it was never documented
    // if auto prerendered and dynamic route wait to update asPath
    // until after mount to prevent hydration mismatch
    // make sure to ignore extra popState in safari on navigating
    // back from external site
    // make sure "as" doesn't start with double slashes or else it can
    // throw an error as it's considered invalid
    //')) {
    // in order for `e.state` to work on the `onpopstate` event
    // we have to register the initial route upon initialization
    // if middleware matches we leave resolving to the change function
    // as the server needs to resolve for correct priority
    // enable custom scroll restoration handling when available
    // otherwise fallback to browser's default handling
    //# sourceMappingURL=router.js.map
    //# sourceMappingURL=router-context.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=with-router.js.map
    /* global window */
    // Export the singletonRouter and this is the public API.
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // Create public properties and methods of the router in the singletonRouter
    // Events is a static property on the router, the router doesn't have to be initialized to use it
    // Here we need to use Object.defineProperty because we need to return
    // the property assigned to the actual router
    // The value might get changed as we change routes and this is the
    // proper way to access it
    // We don't really know the types here, so we add them later instead
    //nextjs.org/docs/messages/next-router-not-mounted');
    // makes sure query is not stateful
    // Events is a static property on the router, the router doesn't have to be initialized to use it
    //# sourceMappingURL=router.js.map
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=node_modules_824fc8._.js.map

File: ./frontend/.next/server/chunks/ssr/node_modules_1aff6d._.js
  JavaScript Functions:
    - _interop_require_default
    - forEach
    - duplex
    - proxyWriter
    - method
    - proxyReader
    - method
    - proxyStream
    - reemit
    - handleEnd
    - reemit
    - getOptions
    - exports
    - sync
    - stream
    - file
    - fileSync
    - processFn
    - exports
    - filter
    - match
    - __nccwpck_require__
    - murmurhash2
    - typeOf
    - _getRequireWildcardCache
    - _interop_require_wildcard
    - removeTrailingSlash
    - getAssetPathFromRoute
    - getPolicy
    - __unsafeCreateTrustedScriptURL
    - _export
    - getDeploymentIdQueryOrEmptyString
    - encodeURIPath
    - _export
    - withFuture
    - markAssetError
    - isAssetError
    - hasPrefetch
    - getAssetQueryString
    - prefetchViaDom
    - onerror
    - appendScript
    - onerror
    - resolvePromiseWithTimeout
    - getClientBuildManifest
    - __BUILD_MANIFEST_CB
    - getFilesForRoute
    - createRouteLoader
    - maybeExecuteScript
    - fetchStyleSheet
    - isBooleanScriptAttribute
    - setAttributesFromProps
    - _export
    - insertStylesheets
    - to
    - loadScript
    - onLoad
    - afterLoad
    - handleClientScriptLoad
    - loadLazyScript
    - addBeforeInteractiveToCache
    - initScriptLoader
    - Script
    - onLoad
    - if
    - _export
    - getObjectClassLabel
    - isPlainObject
    - _export
    - isError
    - safeStringify
    - getProperError
    - _export
    - handleSlug
    - getSortedRoutes
    - getSortedRouteObjects
    - ensures
    - ensureLeadingSlash
    - _export
    - isGroupSegment
    - isParallelRouteSegment
    - addSearchParamsIfPageSegment
    - _export
    - normalizeAppPath
    - normalizeRscURL
    - _export
    - isInterceptionRouteAppPath
    - extractInterceptionRouteInformation
    - isDynamicRoute
    - _export
    - ensures
    - normalizePathSep
    - denormalizePagePath
    - normalizeLocalePath
    - mitt
    - _export
    - execOnce
    - isAbsoluteUrl
    - getLocationOrigin
    - getURL
    - getDisplayName
    - isResSent
    - normalizeRepeatedSlashes
    - loadGetInitialProps
    - stringifyError
    - _export
    - searchParamsToUrlQuery
    - stringifyUrlQueryParam
    - urlQueryToSearchParams
    - assign
    - parseRelativeUrl
    - lexer
    - parse
    - compile
    - tokensToFunction
    - match
    - regexpToFunction
    - escapeString
    - flags
    - regexpToRegexp
    - arrayToRegexp
    - stringToRegexp
    - tokensToRegexp
    - pathToRegexp
    - getPathMatch
    - that
    - escapeStringRegexp
    - parseUrl
    - _export
    - parse
    - serialize
    - tryDecode
    - getCookieParser
    - parseCookie
    - _export
    - getSafeParamName
    - escapeSegment
    - unescapeSegments
    - matchHas
    - hasMatch
    - compileNonPath
    - prepareDestination
    - will
    - parsePath
    - pathHasPrefix
    - hasBasePath
    - removeBasePath
    - resolveRewrites
    - handleRewrite
    - getRouteMatcher
    - decode
    - _export
    - did
    - did
    - _export
    - parseParameter
    - parseMatchedParameter
    - getParametrizedRoute
    - getRouteRegex
    - to
    - buildGetSafeRouteKey
    - getSafeKeyFromSegment
    - getNamedParametrizedRoute
    - getNamedRouteRegex
    - getNamedMiddlewareRegex
    - modified
    - _export
    - formatUrl
    - formatWithValidation
    - normalizePathTrailingSlash
    - removeLocale
    - addPathPrefix
    - addBasePath
    - omit
    - isLocalURL
    - interpolateAs
    - resolveHref
    - isAPIRoute
    - removePathPrefix
    - getNextPathnameInfo
    - below
    - addPathSuffix
    - addLocale
    - formatNextPathnameInfo
    - compareRouterStates
    - isBot
    - with
    - finishes
    - handleSmoothScroll
    - _export
    - buildCancellationError
    - matchesMiddleware
    - stripOrigin
    - prepareUrlAs
    - resolveDynamicRoute
    - getMiddlewareData
    - withMiddlewareEffects
    - fetchRetry
    - tryToParseAsJSON
    - fetchNextData
    - getData
    - createKey
    - handleHardNavigation
    - getCancelledHandler
    - clc
    - handleCancelled
    - cancel
    - onPopState
    - withRouter
    - WithRouterWrapper
    - _export
    - getRouter
    - useRouter
    - createRouter
    - makePublicRouterInstance
    - getSegmentValue
    - _export
    - isRedirectError
    - _export
    - getRedirectError
    - redirect
    - permanentRedirect
    - getURLFromRedirectError
    - getRedirectTypeFromError
    - getRedirectStatusCodeFromError
    - _export
    - isHTTPAccessFallbackError
    - getAccessFallbackHTTPStatus
    - getAccessFallbackErrorTypeByStatus
    - allows
    - notFound
    - allows
    - forbidden
    - allows
    - unauthorized
    - _export
    - isDynamicServerError
    - _export
    - isBailoutToCSRError
    - isNextRouterError
    - _export
    - isStaticGenBailoutError
    - constructs
    - makeHangingPromise
    - ignoreReject
    - _export
    - _export
    - _interop_require_default
    - createDynamicTrackingState
    - createDynamicValidationState
    - getFirstDynamicReason
    - markCurrentScopeAsDynamic
    - trackFallbackParamAccessed
    - throwToInterruptStaticGeneration
    - trackDynamicDataInDynamicRender
    - abortOnSynchronousDynamicDataAccess
    - abortOnSynchronousPlatformIOAccess
    - trackSynchronousPlatformIOAccessInDev
    - abortAndThrowOnSynchronousRequestDataAccess
    - Postpone
    - postponeWithTracking
    - createPostponeReason
    - isDynamicPostpone
    - isDynamicPostponeReason
    - createPrerenderInterruptedError
    - isPrerenderInterruptedError
    - accessedDynamicData
    - consumeDynamicAccess
    - formatDynamicAPIAccesses
    - assertPostpone
    - createPostponedAbortSignal
    - annotateDynamicAccess
    - useDynamicRouteParams
    - trackAllowedDynamicAccess
    - createErrorWithComponentStack
    - throwIfDisallowedDynamic
    - isDynamicUsageError
    - isPostpone
    - unstable_rethrow
    - _export
    - bailoutToClientRendering
    - _export
    - useSearchParams
    - readonlySearchParams
    - usePathname
    - useRouter
    - useParams
    - getSelectedLayoutSegmentPath
    - useSelectedLayoutSegments
    - useSelectedLayoutSegment
    - ArrowsPointingOutIcon
    - XMarkIcon
  Comments:
    //# sourceMappingURL=module.compiled.js.map
    //# sourceMappingURL=react-jsx-dev-runtime.js.map
    //# sourceMappingURL=react.js.map
    // minimal implementation MurmurHash2 hash function
    // default to 0.01% error rate as the filter compresses very well
    //# sourceMappingURL=bloom-filter.js.map
    /**
 * @license React
 * react-is.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    /**
 * Removes the trailing slash for a given route or page path. Preserves the
 * root page. Examples:
 *   - `/foo/bar/` -> `/foo/bar`
 *   - `/foo/bar` -> `/foo/bar`
 *   - `/` -> `/`
 */
    //# sourceMappingURL=remove-trailing-slash.js.map
    // Translates a logical route into its pages asset path (relative from a common prefix)
    // "asset path" being its javascript file, data file, prerendered html,...
    //# sourceMappingURL=get-asset-path-from-route.js.map
    /**
 * Stores the Trusted Types Policy. Starts as undefined and can be set to null
 * if Trusted Types is not supported in the browser.
 */
    /**
 * Getter for the Trusted Types Policy. If it is undefined, it is instantiated
 * here or set to null if Trusted Types is not supported in the browser.
 */
    //# sourceMappingURL=trusted-types.js.map
    //# sourceMappingURL=request-idle-callback.js.map
    //# sourceMappingURL=deployment-id.js.map
    //# sourceMappingURL=encode-uri-path.js.map
    /*#__PURE__*/
    // 3.8s was arbitrarily chosen as it's what https://web.dev/interactive
    // considers as "Good" time-to-interactive. We must assume something went
    // wrong beyond this point, and then fall-back to a full page transition to
    // show the user something of value.
    // with relList.support
    // The order of property assignment here is intentional:
    // `href` should always be last:
    // The order of property assignment here is intentional.
    // 1. Setup success/failure hooks in case the browser synchronously
    //    executes when `src` is set.
    // 2. Configure the cross-origin attribute before setting `src` in case the
    //    browser begins to fetch.
    // 3. Finally, set the source and inject into the DOM in case the child
    //    must be appended for fetching to start.
    // We wait for pages to be built in dev before we start the route transition
    // timeout to prevent an un-necessary hard navigation in development.
    // Resolve a promise that times out after given amount of milliseconds.
    // Resolved, cancel the timeout
    // We wrap these checks separately for better dead-code elimination in
    // production bundles.
    // Mandatory because this is not concurrent safe:
    // Styles are handled by `style-loader` in development:
    // With HMR we might need to "reload" scripts when they are
    // disposed and readded. Executing scripts twice has no functional
    // differences
    // when this entrypoint has been resolved before
    // the route is outdated and we want to invalidate
    // this cache entry
    // we don't want to cache errors during prefetch
    // https://github.com/GoogleChromeLabs/quicklink/blob/453a661fa1fa940e2d2e044452398e38c67a98fb/src/index.mjs#L115-L118
    // License: Apache 2.0
    // Don't prefetch if using 2G or if Save-Data is enabled.
    //# sourceMappingURL=route-loader.js.map
    //# sourceMappingURL=react-jsx-runtime.js.map
    //# sourceMappingURL=react-dom.js.map
    //# sourceMappingURL=head-manager-context.js.map
    // we don't render undefined props to the DOM
    // Correctly assign boolean script attributes
    // https://github.com/vercel/next.js/pull/20748
    // Remove falsy non-zero boolean attributes so they are correctly interpreted
    // (e.g. if we set them to false, this coerces to the string "false", which the browser interprets as true)
    // Call setAttribute before, as we need to set and unset the attribute to override force async:
    // https://html.spec.whatwg.org/multipage/scripting.html#script-force-async
    //# sourceMappingURL=set-attributes-from-props.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    // Case 1: Styles for afterInteractive/lazyOnload with appDir injected via handleClientScriptLoad
    //
    // Using ReactDOM.preinit to feature detect appDir and inject styles
    // Stylesheets might have already been loaded if initialized with Script component
    // Re-inject styles here to handle scripts loaded via handleClientScriptLoad
    // ReactDOM.preinit handles dedup and ensures the styles are loaded only once
    // Case 2: Styles for afterInteractive/lazyOnload with pages injected via handleClientScriptLoad
    //
    // We use this function to load styles when appdir is not detected
    // TODO: Use React float APIs to load styles once available for pages dir
    // Script has already loaded
    // Contents of this script are already loading/loaded
    // It is possible that multiple `next/script` components all have same "src", but has different "onLoad"
    // This is to make sure the same remote script will only load once, but "onLoad" are executed in order
    /** Execute after the script first loaded */
    // Run onReady for the first time after load event
    // add cacheKey to LoadCache when load successfully
    // Casting since lib.dom.d.ts doesn't have TrustedHTML yet.
    // do not add cacheKey into LoadCache for remote script here
    // cacheKey will be added to LoadCache when it is actually loaded (see loadPromise above)
    // Load styles associated with this script
    /**
 * Load a third-party scripts in an optimized way.
 *
 * Read more: [Next.js Docs: `next/script`](https://nextjs.org/docs/app/api-reference/components/script)
 */
    // Context is available only during SSR
    /**
   * - First mount:
   *   1. The useEffect for onReady executes
   *   2. hasOnReadyEffectCalled.current is false, but the script hasn't loaded yet (not in LoadCache)
   *      onReady is skipped, set hasOnReadyEffectCalled.current to true
   *   3. The useEffect for loadScript executes
   *   4. hasLoadScriptEffectCalled.current is false, loadScript executes
   *      Once the script is loaded, the onLoad and onReady will be called by then
   *   [If strict mode is enabled / is wrapped in <OffScreen /> component]
   *   5. The useEffect for onReady executes again
   *   6. hasOnReadyEffectCalled.current is true, so entire effect is skipped
   *   7. The useEffect for loadScript executes again
   *   8. hasLoadScriptEffectCalled.current is true, so entire effect is skipped
   *
   * - Second mount:
   *   1. The useEffect for onReady executes
   *   2. hasOnReadyEffectCalled.current is false, but the script has already loaded (found in LoadCache)
   *      onReady is called, set hasOnReadyEffectCalled.current to true
   *   3. The useEffect for loadScript executes
   *   4. The script is already loaded, loadScript bails out
   *   [If strict mode is enabled / is wrapped in <OffScreen /> component]
   *   5. The useEffect for onReady executes again
   *   6. hasOnReadyEffectCalled.current is true, so entire effect is skipped
   *   7. The useEffect for loadScript executes again
   *   8. hasLoadScriptEffectCalled.current is true, so entire effect is skipped
   */
    // Run onReady if script has loaded before but component is re-mounted
    // Script has already loaded during SSR
    // For the app directory, we need React Float to preload these scripts.
    // Injecting stylesheets here handles beforeInteractive and worker scripts correctly
    // For other strategies injecting here ensures correct stylesheet order
    // ReactDOM.preinit handles loading the styles in the correct order,
    // also ensures the stylesheet is loaded only once and in a consistent manner
    //
    // Case 1: Styles for beforeInteractive/worker with appDir - handled here
    // Case 2: Styles for beforeInteractive/worker with pages dir - Not handled yet
    // Case 3: Styles for afterInteractive/lazyOnload with appDir - handled here
    // Case 4: Styles for afterInteractive/lazyOnload with pages dir - handled in insertStylesheets function
    // Before interactive scripts need to be loaded by Next.js' runtime instead
    // of native <script> tags, because they no longer have `defer`.
    // For inlined scripts, we put the content in `children`.
    // Casting since lib.dom.d.ts doesn't have TrustedHTML yet.
    /*#__PURE__*/
    // @ts-ignore
    /*#__PURE__*/
    // @ts-ignore
    //# sourceMappingURL=script.js.map
    /**
   * this used to be previously:
   *
   * `return prototype === null || prototype === Object.prototype`
   *
   * but Edge Runtime expose Object from vm, being that kind of type-checking wrongly fail.
   *
   * It was changed to the current implementation since it's resilient to serialization.
   */
    //# sourceMappingURL=is-plain-object.js.map
    /**
 * Checks whether the given value is a NextError.
 * This can be used to print a more detailed error message with properties like `code` & `digest`.
 */
    // If value is an object and already seen, replace with "[Circular]"
    // provide better error for case where `throw undefined`
    // is called in development
    //nextjs.org/docs/messages/threw-undefined');
    //nextjs.org/docs/messages/threw-undefined');
    //# sourceMappingURL=is-error.js.map
    // The next segment in the urlPaths list
    // Check if the segment matches `[something]`
    // Strip `[` and `]`, leaving only `something`
    // Strip optional `[` and `]`, leaving only `something`
    // Strip `...`, leaving only `something`
    // If the specific segment already has a slug but the slug is not `something`
    // This prevents collisions like:
    // pages/[post]/index.js
    // pages/[id]/index.js
    // Because currently multiple dynamic params on the same segment level are not supported
    // TODO: This error seems to be confusing for users, needs an error link, the description can be based on above comment.
    // slugName is kept as it can only be one particular slugName
    // nextSegment is overwritten to [[...]] so that it can later be sorted specifically
    // slugName is kept as it can only be one particular slugName
    // nextSegment is overwritten to [...] so that it can later be sorted specifically
    // slugName is kept as it can only be one particular slugName
    // nextSegment is overwritten to [] so that it can later be sorted specifically
    // If this UrlNode doesn't have the nextSegment yet we create a new child UrlNode
    // First the UrlNode is created, and every UrlNode can have only 1 dynamic segment
    // Eg you can't have pages/[post]/abc.js and pages/[hello]/something-else.js
    // Only 1 dynamic segment per nesting level
    // So in the case that is test/integration/dynamic-routing it'll be this:
    // pages/[post]/comments.js
    // pages/blog/[post]/comment/[id].js
    // Both are fine because `pages/[post]` and `pages/blog` are on the same level
    // So in this case `UrlNode` created here has `this.slugName === 'post'`
    // And since your PR passed through `slugName` as an array basically it'd including it in too many possibilities
    // Instead what has to be passed through is the upwards path's dynamic names
    // Here the `root` gets injected multiple paths, and insert will break them up into sublevels
    // Smoosh will then sort those sublevels up to the point where you get the correct route definition priority
    // We're assuming here that all the pathnames are unique, that way we can
    // sort the list and use the index as the key.
    // Sort the pathnames.
    // Map the sorted pathnames back to the original objects using the new sorted
    // index.
    //# sourceMappingURL=sorted-routes.js.map
    /**
 * For a given page path, this function ensures that there is a leading slash.
 * If there is not a leading slash, one is added, otherwise it is noop.
 */
    //# sourceMappingURL=ensure-leading-slash.js.map
    // Use array[0] for performant purpose
    //# sourceMappingURL=segment.js.map
    // Empty segments are ignored.
    // Groups are ignored.
    // Parallel segments are ignored.
    // The last segment (if it's a leaf) should be ignored.
    //# sourceMappingURL=app-paths.js.map
    // TODO-APP: add more serious validation
    // normalize the path, e.g. /(blog)/feed -> /feed
    // (.) indicates that we should match with sibling routes, so we just need to append the intercepted route to the intercepting route
    // (..) indicates that we should match at one level up, so we need to remove the last segment of the intercepting route
    // (...) will match the route segment in the root directory, so we need to use the root directory to prepend the intercepted route
    // (..)(..) indicates that we should match at two levels up, so we need to remove the last two segments of the intercepting route
    //# sourceMappingURL=interception-routes.js.map
    // Identify /[param]/ in route string
    //# sourceMappingURL=is-dynamic.js.map
    //# sourceMappingURL=index.js.map
    /**
 * For a given page path, this function ensures that there is no backslash
 * escaping slashes in the path. Example:
 *  - `foo\/bar\/baz` -> `foo/bar/baz`
 */
    //# sourceMappingURL=normalize-path-sep.js.map
    //# sourceMappingURL=denormalize-page-path.js.map
    // first item will be empty string from splitting at first char
    //# sourceMappingURL=normalize-locale-path.js.map
    /*
MIT License

Copyright (c) Jason Miller (https://jasonformat.com/)

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
    // This file is based on https://github.com/developit/mitt/blob/v1.1.3/src/index.js
    // It's been edited for the needs of this script
    // See the LICENSE at the top of the file
    // eslint-disable-next-line array-callback-return
    //# sourceMappingURL=mitt.js.map
    // Scheme: https://tools.ietf.org/html/rfc3986#section-3.1
    // Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3
    //" + hostname + (port ? ':' + port : '');
    // first we replace any non-encoded backslashes with forward
    // then normalize repeated forward slashes
    //nextjs.org/docs/messages/get-initial-props-as-an-instance-method for more information.';
    // when called from _app `ctx` is nested in `ctx`
    // @ts-ignore pageProps default
    //nextjs.org/docs/messages/empty-object-getInitialProps");
    //# sourceMappingURL=utils.js.map
    //# sourceMappingURL=querystring.js.map
    //n' : (0, _utils.getLocationOrigin)());
    //n' : window.location.href) : globalBase;
    //# sourceMappingURL=parse-relative-url.js.map
    /**
   * A matcher function that will check if a given pathname matches the path
   * given in the builder function. When the path does not match it will return
   * `false` but if it does it will return an object with the matched params
   * merged with the params provided in the second argument.
   */
    // If no pathname is provided it's not a match.
    // If the path did not match `false` will be returned.
    /**
     * If unnamed params are not allowed they must be removed from
     * the matched parameters. path-to-regexp uses "string" for named and
     * "number" for unnamed parameters.
     */
    //# sourceMappingURL=path-match.js.map
    // regexp is based on https://github.com/sindresorhus/escape-string-regexp
    // see also: https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/escapeRegExp.js#L23
    //# sourceMappingURL=escape-regexp.js.map
    //# sourceMappingURL=parse-url.js.map
    //# sourceMappingURL=app-router-headers.js.map
    /*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */
    //# sourceMappingURL=get-cookie-parser.js.map
    /**
 * Ensure only a-zA-Z are used for param names for proper interpolating
 * with path-to-regexp
 */
    // A-Z
    // a-z
    // remove port from host if present
    // the value needs to start with a forward-slash to be compiled
    // correctly
    // have already validated before we got to this point and validating
    // breaks compiling destinations with named pattern params from the source
    // e.g. /something:hello(.*) -> /another/:hello is broken with validation
    // since compile validation is meant for reversing and not for inserting
    // params from a separate path-regex into another
    // update any params in query values
    // the value needs to start with a forward-slash to be compiled
    // correctly
    // add path params to query if it's not a redirect and not
    // already defined in destination query or path
    // The compiler also that the interception route marker is an unnamed param, hence '0',
    // so we need to add it to the params object.
    //nextjs.org/docs/messages/invalid-multi-match");
    // Query merge order lowest priority to highest
    // 1. initial URL query values
    // 2. path segment values
    // 3. destination specified query values
    //# sourceMappingURL=prepare-destination.js.map
    /**
 * Given a path this function will find the pathname, query and hash and return
 * them. This is useful to parse full paths on the client side.
 * @param path A path to parse e.g. /foo/bar?id=1#hash
 */
    //# sourceMappingURL=parse-path.js.map
    //# sourceMappingURL=path-has-prefix.js.map
    //# sourceMappingURL=has-base-path.js.map
    // Can't trim the basePath if it has zero length!
    //# sourceMappingURL=remove-base-path.js.map
    // this is a proxied rewrite which isn't handled on the client
    // check if we now match a page as this means we are done
    // resolving the rewrites
    // check if we match a dynamic-route, if so we break the rewrites chain
    // we don't end after match in beforeFiles to allow
    // continuing through all beforeFiles rewrites
    // check dynamic route before processing fallback rewrites
    //# sourceMappingURL=resolve-rewrites.js.map
    //# sourceMappingURL=route-matcher.js.map
    //nextjs.org/docs/messages/public-next-folder-conflict`;
    //nextjs.org/docs/messages/404-get-initial-props`;
    //nextjs.org/docs/messages/gssp-export`;
    //nextjs.org/docs/messages/gssp-component-member`;
    //nextjs.org/docs/messages/non-standard-node-env`;
    //nextjs.org/docs/messages/ssg-fallback-true-export`;
    /**
 * The names of the webpack layers. These layers are the primitives for the
 * webpack chunks.
 */
    /**
   * The layer for the shared code between the client and server bundles.
   */
    /**
   * The layer for server-only runtime and picking up `react-server` export conditions.
   * Including app router RSC pages and app router custom routes and metadata routes.
   */
    /**
   * Server Side Rendering layer for app (ssr).
   */
    /**
   * The browser client bundle layer for actions.
   */
    /**
   * The layer for the API routes.
   */
    /**
   * The layer for the middleware code.
   */
    /**
   * The layer for the instrumentation hooks.
   */
    /**
   * The layer for assets on the edge.
   */
    /**
   * The browser client bundle layer for App directory.
   */
    // pages api
    // app router pages and layouts
    //# sourceMappingURL=constants.js.map
    /**
 * Regular expression pattern used to match route parameters.
 * Matches both single parameters and parameter groups.
 * Examples:
 *   - `[[...slug]]` matches parameter group with key 'slug', repeat: true, optional: true
 *   - `[...slug]` matches parameter group with key 'slug', repeat: true, optional: false
 *   - `[[foo]]` matches parameter with key 'foo', repeat: false, optional: true
 *   - `[bar]` matches parameter with key 'bar', repeat: false, optional: false
 */
    /**
 * Parses a matched parameter from the PARAMETER_PATTERN regex to a data structure that can be used
 * to generate the parametrized route.
 * Examples:
 *   - `[...slug]` -> `{ key: 'slug', repeat: true, optional: true }`
 *   - `...slug` -> `{ key: 'slug', repeat: true, optional: false }`
 *   - `[foo]` -> `{ key: 'foo', repeat: false, optional: true }`
 *   - `bar` -> `{ key: 'bar', repeat: false, optional: false }`
 * @param param - The matched parameter to parse.
 * @returns The parsed parameter as a data structure.
 */
    // Check for parameters
    /**
 * Builds a function to generate a minimal routeKey using only a-z and minimal
 * number of characters.
 */
    // replace any non-word characters since they can break
    // the named regex
    // check if the key is still invalid and fallback to using a known
    // safe key
    // if the segment has an interception marker, make sure that's part of the regex pattern
    // this is to ensure that the route with the interception marker doesn't incorrectly match
    // the non-intercepted route (ie /app/(.)[username] should not match /app/[username])
    // Check for parameters
    //# sourceMappingURL=route-regex.js.map
    // Format function modified from nodejs
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    /*#__PURE__*/
    //' + (host || '');
    //# sourceMappingURL=format-url.js.map
    //# sourceMappingURL=detect-domain-locale.js.map
    //# sourceMappingURL=normalize-trailing-slash.js.map
    //# sourceMappingURL=add-locale.js.map
    //# sourceMappingURL=remove-locale.js.map
    //# sourceMappingURL=add-path-prefix.js.map
    //# sourceMappingURL=add-base-path.js.map
    //# sourceMappingURL=omit.js.map
    // prevent a hydration mismatch on href for url with anchor refs
    // absolute urls can be local if they are on the same origin
    //# sourceMappingURL=is-local-url.js.map
    // Fall back to reading the values from the href
    // TODO: should this take priority; also need to change in the router.
    // support single-level catch-all
    // TODO: more robust handling for user-error (passing `/`)
    // Interpolate group into data URL if present
    // path delimiter escaped since they are being inserted
    // into the URL and we expect URL encoded segments
    // when parsing dynamic route params
    // did not satisfy all requirements
    // n.b. We ignore this error because we handle warning for this case in
    // development in the `<Link>` component directly.
    //# sourceMappingURL=interpolate-as.js.map
    // we use a dummy base url for relative urls
    // repeated slashes and backslashes in the URL are considered
    // invalid and will never match a Next.js page/file
    //);
    //) or backslashes \\ are not valid in the href.");
    // Return because it cannot be routed by the Next.js router
    //n');
    // fallback to / for invalid asPath values e.g. //
    //n');
    // if the origin didn't change, it means we received a relative href
    //# sourceMappingURL=resolve-href.js.map
    //# sourceMappingURL=is-api-route.js.map
    // If the path doesn't start with the prefix we can return it as is. This
    // protects us from situations where the prefix is a substring of the path
    // prefix such as:
    //
    // For prefix: /blog
    //
    //   /blog -> true
    //   /blog/ -> true
    //   /blog/1 -> true
    //   /blogging -> false
    //   /blogging/ -> false
    //   /blogging/1 -> false
    // Remove the prefix from the path via slicing.
    // If the path without the prefix starts with a `/` we can return it as is.
    // If the path without the prefix doesn't start with a `/` we need to add it
    // back to the path to make sure it's a valid path.
    //# sourceMappingURL=remove-path-prefix.js.map
    //, '').replace(/\.json$/, '').split('/');
    // update pathname with normalized if enabled although
    // we use normalized to populate locale info still
    // If provided, use the locale route normalizer to detect the locale instead
    // of the function below.
    //# sourceMappingURL=get-next-pathname-info.js.map
    //# sourceMappingURL=add-path-suffix.js.map
    // If no locale was given or the locale is the default locale, we don't need
    // to prefix the path.
    // If the path is an API path or the path already has the locale prefix, we
    // don't need to prefix the path.
    // Add the locale prefix to the path.
    //# sourceMappingURL=add-locale.js.map
    //# sourceMappingURL=format-next-pathname-info.js.map
    //# sourceMappingURL=compare-states.js.map
    //# sourceMappingURL=is-bot.js.map
    /**
 * Run function with `scroll-behavior: auto` applied to `<html/>`.
 * This css change will be reverted after the function finishes.
 */
    // if only the hash is changed, we don't need to disable smooth scrolling
    // we only care to prevent smooth scrolling when navigating to a new page to avoid jarring UX
    // In Chrome-based browsers we need to force reflow before calling `scrollTo`.
    // Otherwise it will not pickup the change in scrollBehavior
    // More info here: https://github.com/vercel/next.js/issues/40719#issuecomment-1336248042
    //# sourceMappingURL=handle-smooth-scroll.js.map
    // tslint:disable:no-console
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // remove basePath first since path prefix has to be in the order of `/${basePath}/${locale}`
    // Check only path match on client. Matching "has" should be done on server
    // where we can access more info such as headers, HttpOnly cookie, etc.
    // If url and as provided as an object representation,
    // we'll format them into the string version here.
    // handle resolving href for dynamic routes
    // eslint-disable-next-line array-callback-return
    // leverage x-matched-path to detect next.config.js rewrites
    // eslint-disable-next-line no-sequences
    // Cookies are required to be present for Next.js' SSG "Preview Mode".
    // Cookies may also be required for `getServerSideProps`.
    //
    // > `fetch` won’t send cookies, unless you set the credentials init
    // > option.
    // https://developer.mozilla.org/docs/Web/API/Fetch_API/Using_Fetch
    //
    // > For maximum browser compatibility when it comes to sending &
    // > receiving cookies, always supply the `credentials: 'same-origin'`
    // > option instead of relying on the default.
    // https://github.com/github/fetch#caveats
    /**
             * When the data response is a redirect because of a middleware
             * we do not consider it an error. The headers must bring the
             * mapped location.
             * TODO: Change the status code in the handler.
             */
    /**
             * We should only trigger a server-side transition if this was
             * caused on a client-side transition. Otherwise, we'd get into
             * an infinite loop.
             */
    // firefox
    // safari
    // when skipping client cache we wait to update
    // inflight cache until successful data response
    // this allows racing click event with fetching newer data
    // without blocking navigation when stale data is available
    // only update cache if not marked as no-cache
    // ensure we don't trigger a hard navigation to the same
    // URL as this can end up with an infinite refresh
    /**
   * Go back in history
   */
    /**
   * Go forward in history
   */
    /**
   * Performs a `pushState` with arguments
   * @param url of the route
   * @param as masks `url` for the browser
   * @param options object you can define `shallow` and other options
   */
    /**
   * Performs a `replaceState` with arguments
   * @param url of the route
   * @param as masks `url` for the browser
   * @param options object you can define `shallow` and other options
   */
    // failed to load build manifest hard navigate
    // to be safe
    //n').pathname);
    //n').pathname)) {
    // if any sub-path of as matches a dynamic filter path
    // it should be hard navigated
    // if the client router filter is matched then we trigger
    // a hard navigation
    // WARNING: `_h` is an internal option for handing Next.js client-side
    // hydration. Your app should _never_ use this property. It may change at
    // any time without notice.
    // for static pages with query params in the URL we delay
    // marking the router ready until after the query is updated
    // or a navigation has occurred
    // if a route transition is already in progress before
    // the query updating is triggered ignore query updating
    // marking route changes as a navigation start entry
    // If the url change is only related to a hash change
    // We should not proceed. We should only change the state.
    // TODO: do we need the resolved href when only a hash change?
    // The build manifest needs to be loaded before auto-static dynamic pages
    // get their query parameters to allow ensuring they can be parsed properly
    // when rewritten to
    // If we fail to resolve the page list or client-build manifest, we must
    // do a server-side transition:
    // If asked to change the current URL we should reload the current page
    // (not location.reload() but reload getInitialProps and other Next.js stuffs)
    // We also need to set the method = replaceState always
    // as this should not go into the history (That's how browsers work)
    // We should compare the new asPath to the current asPath, not the url
    // we need to resolve the as value using rewrites for dynamic SSG
    // pages to allow building the data URL correctly
    // url and as should always be prefixed with basePath by this
    // point by either next/link or router.push/replace so strip the
    // basePath from the pathname to match the pages dir 1-to-1
    // if we detected the path as app route during prefetching
    // trigger hard navigation
    // we don't attempt resolve asPath when we need to execute
    // middleware as the resolving will occur server-side
    //nextjs.org/docs/messages/invalid-relative-url-external-as");
    //nextjs.org/docs/messages/" + (shouldInterpolate ? 'href-interpolation-failed' : 'incompatible-href-as')));
    // Merge params into `query`, overwriting any specified in search
    // If the routeInfo brings a redirect we simply apply it.
    // handle redirect on client-transition
    // Use the destination from redirect without adding locale
    // check if destination is internal (resolves to a page) and attempt
    // client-navigation if it is falling back to hard navigation if
    // it's not
    // handle SSG data 404
    // ensure statusCode is still correct for static 500 page
    // when updating query information
    // shallow routing is only allowed for same page URL changes.
    // the new state that the router gonna set
    // When the page being rendered is the 404 page, we should only update the
    // query parameters. Route changes here might add the basePath when it
    // wasn't originally present. This is also why this block is before the
    // below `changeState` call which updates the browser's history (changing
    // the URL).
    // ensure statusCode is still correct for static 500 page
    // when updating query information
    // for query updates we can skip it if the state is unchanged and we don't
    // need to scroll
    // https://github.com/vercel/next.js/issues/37139
    // A hash mark # is the optional last part of a URL
    // Passing the empty string here should be safe against future changes to the method.
    // https://developer.mozilla.org/docs/Web/API/History/replaceState
    // bubble up cancellation errors
    // If we can't load the page it could be one of following reasons
    //  1. Page doesn't exists
    //  2. Page does exist in a different zone
    //  3. Internal error while loading the page
    // So, doing a hard reload is the proper way to deal with this.
    // Changing the URL doesn't block executing the current code path.
    // So let's throw a cancellation error stop the routing logic.
    /**
     * This `route` binding can change if there's a rewrite
     * so we keep a reference to the original requested route
     * so we can store the cache for it and avoid re-requesting every time
     * for shallow routing purposes.
     */
    // we don't hard error during query updating
    // as it's un-necessary and doesn't need to be fatal
    // unless it is a fallback route and the props can't
    // be loaded
    // when rendering error routes we don't apply middleware
    // effects
    // during query updating the page must match although during
    // client-transition a redirect that doesn't match a page
    // can be returned and this should trigger a hard navigation
    // which is valid for incremental migration
    // Check again the cache with the new destination.
    // If we have a match with the current route due to rewrite,
    // we can copy the existing information to the rewritten one.
    // Then, we return the information along with the matched route.
    // For non-SSG prefetches that bailed before sending data
    // we clear the cache to fetch full response
    // Only bust the data cache for SSP routes although
    // middleware can skip cache per request with
    // x-middleware-cache: no-cache as well
    // we kick off a HEAD request in the background
    // when a non-prefetch request is made to signal revalidation
    /**
   * Callback to execute before replacing router state
   * @param cb callback to be executed
   */
    // Makes sure we scroll to the provided hash if the url/hash are the same
    // If the urls are change, there's more than a hash change
    // If the hash has changed, then it's a hash only change.
    // This check is necessary to handle both the enter and
    // leave hash === '' cases. The identity case falls through
    // and is treated as a next reload.
    // Scroll to top if the hash is just `#` with no value or `#top`
    // To mirror browsers
    // Decode hash to make non-latin anchor works.
    // First we check if the element by id is found
    // If there's no element with the id, we check the `name` property
    // To mirror browsers
    /**
   * Prefetch page code, you may wait for the data during page rendering.
   * This feature only works in production!
   * @param url the href of prefetched page
   * @param asPath the as path of the prefetched page
   */
    // Prefetch is not supported in development mode because it would trigger on-demand-entries
    // Server Data Cache (full data requests)
    // Server Background Cache (HEAD requests)
    // We get state as undefined for two reasons.
    //  1. With older safari (< 8) and older chrome (< 34)
    //  2. When the URL changed with #
    //
    // In the both cases, we don't need to proceed and change the route.
    // (as it's already changed)
    // But we can simply replace the state with the new changes.
    // Actually, for (1) we don't need to nothing. But it's hard to detect that event.
    // So, doing the following for (1) does no harm.
    // __NA is used to identify if the history entry can be handled by the app-router.
    // Safari fires popstateevent when reopening the browser.
    // Make sure we don't re-render on initial load,
    // can be caused by navigating back from an external site
    // If the downstream application returns falsy, return.
    // They will then be responsible for handling the event.
    // @ts-ignore internal value not exposed on types
    // represents the current component key
    // set up the component cache (by route keys)
    // We should not keep the cache, if there's an error
    // Otherwise, this cause issues when when going back and
    // come again to the errored page.
    // Backwards compat for Router.router.events
    // TODO: Should be remove the following major version as it was never documented
    // if auto prerendered and dynamic route wait to update asPath
    // until after mount to prevent hydration mismatch
    // make sure to ignore extra popState in safari on navigating
    // back from external site
    // make sure "as" doesn't start with double slashes or else it can
    // throw an error as it's considered invalid
    //')) {
    // in order for `e.state` to work on the `onpopstate` event
    // we have to register the initial route upon initialization
    // if middleware matches we leave resolving to the change function
    // as the server needs to resolve for correct priority
    // enable custom scroll restoration handling when available
    // otherwise fallback to browser's default handling
    //# sourceMappingURL=router.js.map
    //# sourceMappingURL=router-context.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=with-router.js.map
    /* global window */
    // Export the singletonRouter and this is the public API.
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // Create public properties and methods of the router in the singletonRouter
    // Events is a static property on the router, the router doesn't have to be initialized to use it
    // Here we need to use Object.defineProperty because we need to return
    // the property assigned to the actual router
    // The value might get changed as we change routes and this is the
    // proper way to access it
    // We don't really know the types here, so we add them later instead
    //nextjs.org/docs/messages/next-router-not-mounted');
    // makes sure query is not stateful
    // Events is a static property on the router, the router doesn't have to be initialized to use it
    //# sourceMappingURL=router.js.map
    //# sourceMappingURL=app-router-context.js.map
    //# sourceMappingURL=hooks-client-context.js.map
    //# sourceMappingURL=get-segment-value.js.map
    /*#__PURE__*/
    //# sourceMappingURL=redirect-status-code.js.map
    /*#__PURE__*/
    //# sourceMappingURL=redirect-error.js.map
    /** The URL to redirect to */
    /** The URL to redirect to */
    // Slices off the beginning of the digest that contains the code and the
    // separating ';'.
    //# sourceMappingURL=redirect.js.map
    //# sourceMappingURL=http-access-fallback.js.map
    /**
 * This function allows you to render the [not-found.js file](https://nextjs.org/docs/app/api-reference/file-conventions/not-found)
 * within a route segment as well as inject a tag.
 *
 * `notFound()` can be used in
 * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),
 * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and
 * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).
 *
 * - In a Server Component, this will insert a `<meta name="robots" content="noindex" />` meta tag and set the status code to 404.
 * - In a Route Handler or Server Action, it will serve a 404 to the caller.
 *
 * Read more: [Next.js Docs: `notFound`](https://nextjs.org/docs/app/api-reference/functions/not-found)
 */
    // eslint-disable-next-line no-throw-literal
    //# sourceMappingURL=not-found.js.map
    // TODO: Add `forbidden` docs
    /**
 * @experimental
 * This function allows you to render the [forbidden.js file](https://nextjs.org/docs/app/api-reference/file-conventions/forbidden)
 * within a route segment as well as inject a tag.
 *
 * `forbidden()` can be used in
 * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),
 * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and
 * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).
 *
 * Read more: [Next.js Docs: `forbidden`](https://nextjs.org/docs/app/api-reference/functions/forbidden)
 */
    // eslint-disable-next-line no-throw-literal
    //# sourceMappingURL=forbidden.js.map
    // TODO: Add `unauthorized` docs
    /**
 * @experimental
 * This function allows you to render the [unauthorized.js file](https://nextjs.org/docs/app/api-reference/file-conventions/unauthorized)
 * within a route segment as well as inject a tag.
 *
 * `unauthorized()` can be used in
 * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),
 * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and
 * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).
 *
 *
 * Read more: [Next.js Docs: `unauthorized`](https://nextjs.org/docs/app/api-reference/functions/unauthorized)
 */
    // eslint-disable-next-line no-throw-literal
    //# sourceMappingURL=unauthorized.js.map
    //# sourceMappingURL=hooks-server-context.js.map
    // This has to be a shared module which is shared between client component error boundary and dynamic component
    //# sourceMappingURL=bailout-to-csr.js.map
    //# sourceMappingURL=is-next-router-error.js.map
    //# sourceMappingURL=static-generation-bailout.js.map
    /**
 * This function constructs a promise that will never resolve. This is primarily
 * useful for dynamicIO where we use promise resolution timing to determine which
 * parts of a render can be included in a prerender.
 *
 * @internal
 */
    // We are fine if no one actually awaits this promise. We shouldn't consider this an unhandled rejection so
    // we attach a noop catch handler here to suppress this warning. If you actually await somewhere or construct
    // your own promise out of it you'll need to ensure you handle the error when it rejects.
    //# sourceMappingURL=dynamic-rendering-utils.js.map
    //# sourceMappingURL=metadata-constants.js.map
    /**
 * The functions provided by this module are used to communicate certain properties
 * about the currently running code so that Next.js can make decisions on how to handle
 * the current execution in different rendering modes such as pre-rendering, resuming, and SSR.
 *
 * Today Next.js treats all code as potentially static. Certain APIs may only make sense when dynamically rendering.
 * Traditionally this meant deopting the entire render to dynamic however with PPR we can now deopt parts
 * of a React tree as dynamic while still keeping other parts static. There are really two different kinds of
 * Dynamic indications.
 *
 * The first is simply an intention to be dynamic. unstable_noStore is an example of this where
 * the currently executing code simply declares that the current scope is dynamic but if you use it
 * inside unstable_cache it can still be cached. This type of indication can be removed if we ever
 * make the default dynamic to begin with because the only way you would ever be static is inside
 * a cache scope which this indication does not affect.
 *
 * The second is an indication that a dynamic data source was read. This is a stronger form of dynamic
 * because it means that it is inappropriate to cache this at all. using a dynamic data source inside
 * unstable_cache should error. If you want to use some dynamic data inside unstable_cache you should
 * read that data outside the cache and pass it in as an argument to the cached function.
 */
    /*#__PURE__*/
    // inside cache scopes marking a scope as dynamic has no effect because the outer cache scope
    // creates a cache boundary. This is subtly different from reading a dynamic data source which is
    // forbidden inside a cache scope.
    // If we're forcing dynamic rendering or we're forcing static rendering, we
    // don't need to do anything here because the entire page is already dynamic
    // or it's static and it should not throw or postpone here.
    //nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);
    // We aren't prerendering but we are generating a static page. We need to bail out of static generation
    //nextjs.org/docs/messages/dynamic-server-error`);
    // We aren't prerendering but we are generating a static page. We need to bail out of static generation
    //nextjs.org/docs/messages/dynamic-server-error`);
    // inside cache scopes marking a scope as dynamic has no effect because the outer cache scope
    // creates a cache boundary. This is subtly different from reading a dynamic data source which is
    // forbidden inside a cache scope.
    // Despite it's name we don't actually abort unless we have a controller to call abort on
    // There are times when we let a prerender run long to discover caches where we want the semantics
    // of tracking dynamic access without terminating the prerender early
    // When we aren't debugging, we don't need to create another error for the
    // stack trace.
    // We don't actually have a controller to abort but we do the semantic equivalent by
    // advancing the request store out of prerender mode
    // We always log Request Access in dev at the point of calling the function
    // So we mark the dynamic validation as not requiring it to be printed
    // When we aren't debugging, we don't need to create another error for the
    // stack trace.
    //nextjs.org/docs/messages/ppr-caught-error`;
    //nextjs.org/docs/messages/ppr-caught-error');
    // We mutate because we only call this once we are no longer writing
    // to the dynamicTrackingState and it's more efficient than creating a new
    // array.
    // Remove the "Error: " prefix from the first line of the stack trace as
    // well as the first 4 lines of the stack trace which is the distance
    // from the user code and the `new Error().stack` call.
    // Exclude Next.js internals from the stack trace.
    // Exclude anonymous functions from the stack trace.
    // Exclude Node.js internals from the stack trace.
    // We get our hands on a postpone instance by calling postpone and catching the throw
    // There are fallback route params, we should track these as dynamic
    // accesses.
    // We're prerendering with dynamicIO or PPR or both
    // We are in a prerender with dynamicIO semantics
    // We are going to hang here and never resolve. This will cause the currently
    // rendering component to effectively be a dynamic hole
    // We're prerendering with PPR
    // We don't need to track that this is dynamic. It is only so when something else is also dynamic.
    //nextjs.org/docs/messages/next-prerender-missing-suspense`;
    // In dev we already log errors about sync dynamic access. But during builds we need to ensure
    // the offending sync error is logged before we exit the build
    // The actual error should have been logged when the sync access ocurred
    //# sourceMappingURL=dynamic-rendering.js.map
    //# sourceMappingURL=is-dynamic-usage-error.js.map
    //# sourceMappingURL=is-postpone.js.map
    //# sourceMappingURL=unstable-rethrow.js.map
    /** @internal */
    //nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams');
    /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */
    /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */
    /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */
    /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */
    //# sourceMappingURL=navigation.react-server.js.map
    //# sourceMappingURL=server-inserted-html.js.map
    //# sourceMappingURL=bailout-to-client-rendering.js.map
    // In the case where this is `null`, the compat types added in
    // `next-env.d.ts` will add a new overload that changes the return type to
    // include `null`.
    // When the router is not ready in pages, we won't have the search params
    // available.
    // AsyncLocalStorage should not be included in the client bundle.
    // TODO-APP: handle dynamic = 'force-static' here and on the client
    // In the case where this is `null`, the compat types added in `next-env.d.ts`
    // will add a new overload that changes the return type to include `null`.
    /** Get the canonical parameters from the current level to the leaf node. */
    // Client components API
    // Use the provided parallel route key on the first parallel route
    // After first parallel route prefer children, if there's no children pick the first parallel route.
    // @ts-expect-error This only happens in `pages`. Type is overwritten in navigation.d.ts
    // if the default slot is showing, we return null since it's not technically "selected" (it's a fallback)
    // and returning an internal value like `__DEFAULT__` would be confusing.
    //# sourceMappingURL=navigation.js.map
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=node_modules_1aff6d._.js.map

File: ./frontend/.next/server/chunks/ssr/[root of the server]__eb51c9._.js
  JavaScript Functions:
    - AllTasks
    - handleDragEnd
    - toggleExpand
    - renderTasks
  Comments:
    //127.0.0.1:5000/api/tasks").then((response)=>response.json()).then((data)=>{
    // ✅ Drag & Drop Handler
    // ✅ Expand/Collapse Nested Tasks
    // ✅ Render Tasks Recursively (Ensuring Nested Task Visibility)
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //127.0.0.1:5000/dashboard",
    /*#__PURE__*/
    //127.0.0.1:5000/tasks/",
    /*#__PURE__*/
    //localhost:3000/alltasks",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=%5Broot%20of%20the%20server%5D__eb51c9._.js.map

File: ./frontend/.next/server/chunks/ssr/node_modules_@heroicons_react_24_solid_esm_5cb943._.js
  JavaScript Functions:
    - ChevronRightIcon
    - ChevronDownIcon
    - UserCircleIcon
    - ClipboardDocumentCheckIcon
    - BookmarkIcon
    - AcademicCapIcon
    - AdjustmentsHorizontalIcon
    - AdjustmentsVerticalIcon
    - ArchiveBoxArrowDownIcon
    - ArchiveBoxIcon
    - ArchiveBoxXMarkIcon
    - ArrowDownCircleIcon
    - ArrowDownIcon
    - ArrowDownLeftIcon
    - ArrowDownOnSquareIcon
    - ArrowDownOnSquareStackIcon
    - ArrowDownRightIcon
    - ArrowDownTrayIcon
    - ArrowLeftCircleIcon
    - ArrowLeftEndOnRectangleIcon
    - ArrowLeftIcon
    - ArrowLeftOnRectangleIcon
    - ArrowLeftStartOnRectangleIcon
    - ArrowLongDownIcon
    - ArrowLongLeftIcon
    - ArrowLongRightIcon
    - ArrowLongUpIcon
    - ArrowPathIcon
    - ArrowPathRoundedSquareIcon
    - ArrowRightCircleIcon
    - ArrowRightEndOnRectangleIcon
    - ArrowRightIcon
    - ArrowRightOnRectangleIcon
    - ArrowRightStartOnRectangleIcon
    - ArrowSmallDownIcon
    - ArrowSmallLeftIcon
    - ArrowSmallRightIcon
    - ArrowSmallUpIcon
    - ArrowTopRightOnSquareIcon
    - ArrowTrendingDownIcon
    - ArrowTrendingUpIcon
    - ArrowTurnDownLeftIcon
    - ArrowTurnDownRightIcon
    - ArrowTurnLeftDownIcon
    - ArrowTurnLeftUpIcon
    - ArrowTurnRightDownIcon
    - ArrowTurnRightUpIcon
    - ArrowTurnUpLeftIcon
    - ArrowTurnUpRightIcon
    - ArrowUpCircleIcon
    - ArrowUpIcon
    - ArrowUpLeftIcon
    - ArrowUpOnSquareIcon
    - ArrowUpOnSquareStackIcon
    - ArrowUpRightIcon
    - ArrowUpTrayIcon
    - ArrowUturnDownIcon
    - ArrowUturnLeftIcon
    - ArrowUturnRightIcon
    - ArrowUturnUpIcon
    - ArrowsPointingInIcon
    - ArrowsPointingOutIcon
    - ArrowsRightLeftIcon
    - ArrowsUpDownIcon
    - AtSymbolIcon
    - BackspaceIcon
    - BackwardIcon
    - BanknotesIcon
    - Bars2Icon
    - Bars3BottomLeftIcon
    - Bars3BottomRightIcon
    - Bars3CenterLeftIcon
    - Bars3Icon
    - Bars4Icon
    - BarsArrowDownIcon
    - BarsArrowUpIcon
    - Battery0Icon
    - Battery100Icon
    - Battery50Icon
    - BeakerIcon
    - BellAlertIcon
    - BellIcon
    - BellSlashIcon
    - BellSnoozeIcon
    - BoldIcon
    - BoltIcon
    - BoltSlashIcon
    - BookOpenIcon
    - BookmarkSlashIcon
    - BookmarkSquareIcon
    - BriefcaseIcon
    - BugAntIcon
    - BuildingLibraryIcon
    - BuildingOffice2Icon
    - BuildingOfficeIcon
    - BuildingStorefrontIcon
    - CakeIcon
    - CalculatorIcon
    - CalendarDateRangeIcon
    - CalendarDaysIcon
    - CalendarIcon
    - CameraIcon
    - ChartBarIcon
    - ChartBarSquareIcon
    - ChartPieIcon
    - ChatBubbleBottomCenterIcon
    - ChatBubbleBottomCenterTextIcon
    - ChatBubbleLeftEllipsisIcon
    - ChatBubbleLeftIcon
    - ChatBubbleLeftRightIcon
    - ChatBubbleOvalLeftEllipsisIcon
    - ChatBubbleOvalLeftIcon
    - CheckBadgeIcon
    - CheckCircleIcon
    - CheckIcon
    - ChevronDoubleDownIcon
    - ChevronDoubleLeftIcon
    - ChevronDoubleRightIcon
    - ChevronDoubleUpIcon
    - ChevronLeftIcon
    - ChevronUpDownIcon
    - ChevronUpIcon
    - CircleStackIcon
    - ClipboardDocumentIcon
    - ClipboardDocumentListIcon
    - ClipboardIcon
    - ClockIcon
    - CloudArrowDownIcon
    - CloudArrowUpIcon
    - CloudIcon
    - CodeBracketIcon
    - CodeBracketSquareIcon
    - Cog6ToothIcon
    - Cog8ToothIcon
    - CogIcon
    - CommandLineIcon
    - ComputerDesktopIcon
    - CpuChipIcon
    - CreditCardIcon
    - CubeIcon
    - CubeTransparentIcon
    - CurrencyBangladeshiIcon
    - CurrencyDollarIcon
    - CurrencyEuroIcon
    - CurrencyPoundIcon
    - CurrencyRupeeIcon
    - CurrencyYenIcon
    - CursorArrowRaysIcon
    - CursorArrowRippleIcon
    - DevicePhoneMobileIcon
    - DeviceTabletIcon
    - DivideIcon
    - DocumentArrowDownIcon
    - DocumentArrowUpIcon
    - DocumentChartBarIcon
    - DocumentCheckIcon
    - DocumentCurrencyBangladeshiIcon
    - DocumentCurrencyDollarIcon
    - DocumentCurrencyEuroIcon
    - DocumentCurrencyPoundIcon
    - DocumentCurrencyRupeeIcon
    - DocumentCurrencyYenIcon
    - DocumentDuplicateIcon
    - DocumentIcon
    - DocumentMagnifyingGlassIcon
    - DocumentMinusIcon
    - DocumentPlusIcon
    - DocumentTextIcon
    - EllipsisHorizontalCircleIcon
    - EllipsisHorizontalIcon
    - EllipsisVerticalIcon
    - EnvelopeIcon
    - EnvelopeOpenIcon
    - EqualsIcon
    - ExclamationCircleIcon
    - ExclamationTriangleIcon
    - EyeDropperIcon
    - EyeIcon
    - EyeSlashIcon
    - FaceFrownIcon
    - FaceSmileIcon
    - FilmIcon
    - FingerPrintIcon
    - FireIcon
    - FlagIcon
    - FolderArrowDownIcon
    - FolderIcon
    - FolderMinusIcon
    - FolderOpenIcon
    - FolderPlusIcon
    - ForwardIcon
    - FunnelIcon
    - GifIcon
    - GiftIcon
    - GiftTopIcon
    - GlobeAltIcon
    - GlobeAmericasIcon
    - GlobeAsiaAustraliaIcon
    - GlobeEuropeAfricaIcon
    - H1Icon
    - H2Icon
    - H3Icon
    - HandRaisedIcon
    - HandThumbDownIcon
    - HandThumbUpIcon
    - HashtagIcon
    - HeartIcon
    - HomeIcon
    - HomeModernIcon
    - IdentificationIcon
    - InboxArrowDownIcon
    - InboxIcon
    - InboxStackIcon
    - InformationCircleIcon
    - ItalicIcon
    - KeyIcon
    - LanguageIcon
    - LifebuoyIcon
    - LightBulbIcon
    - LinkIcon
    - LinkSlashIcon
    - ListBulletIcon
    - LockClosedIcon
    - LockOpenIcon
    - MagnifyingGlassCircleIcon
    - MagnifyingGlassIcon
    - MagnifyingGlassMinusIcon
    - MagnifyingGlassPlusIcon
    - MapIcon
    - MapPinIcon
    - MegaphoneIcon
    - MicrophoneIcon
    - MinusCircleIcon
    - MinusIcon
    - MinusSmallIcon
    - MoonIcon
    - MusicalNoteIcon
    - NewspaperIcon
    - NoSymbolIcon
    - NumberedListIcon
    - PaintBrushIcon
    - PaperAirplaneIcon
    - PaperClipIcon
    - PauseCircleIcon
    - PauseIcon
    - PencilIcon
    - PencilSquareIcon
    - PercentBadgeIcon
    - PhoneArrowDownLeftIcon
    - PhoneArrowUpRightIcon
    - PhoneIcon
    - PhoneXMarkIcon
    - PhotoIcon
    - PlayCircleIcon
    - PlayIcon
    - PlayPauseIcon
    - PlusCircleIcon
    - PlusIcon
    - PlusSmallIcon
    - PowerIcon
    - PresentationChartBarIcon
    - PresentationChartLineIcon
    - PrinterIcon
    - PuzzlePieceIcon
    - QrCodeIcon
    - QuestionMarkCircleIcon
    - QueueListIcon
    - RadioIcon
    - ReceiptPercentIcon
    - ReceiptRefundIcon
    - RectangleGroupIcon
    - RectangleStackIcon
    - RocketLaunchIcon
    - RssIcon
    - ScaleIcon
    - ScissorsIcon
    - ServerIcon
    - ServerStackIcon
    - ShareIcon
    - ShieldCheckIcon
    - ShieldExclamationIcon
    - ShoppingBagIcon
    - ShoppingCartIcon
    - SignalIcon
    - SignalSlashIcon
    - SlashIcon
    - SparklesIcon
    - SpeakerWaveIcon
    - SpeakerXMarkIcon
    - Square2StackIcon
    - Square3Stack3DIcon
    - Squares2X2Icon
    - SquaresPlusIcon
    - StarIcon
    - StopCircleIcon
    - StopIcon
    - StrikethroughIcon
    - SunIcon
    - SwatchIcon
    - TableCellsIcon
    - TagIcon
    - TicketIcon
    - TrashIcon
    - TrophyIcon
    - TruckIcon
    - TvIcon
    - UnderlineIcon
    - UserGroupIcon
    - UserIcon
    - UserMinusIcon
    - UserPlusIcon
    - UsersIcon
    - VariableIcon
    - VideoCameraIcon
    - VideoCameraSlashIcon
    - ViewColumnsIcon
    - ViewfinderCircleIcon
    - WalletIcon
    - WifiIcon
    - WindowIcon
    - WrenchIcon
    - WrenchScrewdriverIcon
    - XCircleIcon
    - XMarkIcon
  Comments:
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /** @deprecated */
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /** @deprecated */
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /** @deprecated */
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /** @deprecated */
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /** @deprecated */
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /** @deprecated */
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /** @deprecated */
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /** @deprecated */
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=node_modules_%40heroicons_react_24_solid_esm_5cb943._.js.map

File: ./frontend/.next/server/chunks/ssr/[root of the server]__86e789._.js
  JavaScript Functions:
    - _interop_require_default
    - _export
    - execOnce
    - isAbsoluteUrl
    - getLocationOrigin
    - getURL
    - getDisplayName
    - isResSent
    - normalizeRepeatedSlashes
    - loadGetInitialProps
    - stringifyError
    - appGetInitialProps
  Comments:
    // Scheme: https://tools.ietf.org/html/rfc3986#section-3.1
    // Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3
    //" + hostname + (port ? ':' + port : '');
    // first we replace any non-encoded backslashes with forward
    // then normalize repeated forward slashes
    //nextjs.org/docs/messages/get-initial-props-as-an-instance-method for more information.';
    // when called from _app `ctx` is nested in `ctx`
    // @ts-ignore pageProps default
    //nextjs.org/docs/messages/empty-object-getInitialProps");
    //# sourceMappingURL=utils.js.map
    /*#__PURE__*/
    /**
 * `App` component is used for initialize of pages. It allows for overwriting and full control of the `page` initialization.
 * This allows for keeping state between navigation, custom error handling, injecting additional data.
 */
    /*#__PURE__*/
    //# sourceMappingURL=_app.js.map
    //# sourceMappingURL=%5Broot%20of%20the%20server%5D__86e789._.js.map

File: ./frontend/.next/server/chunks/ssr/[root of the server]__a7d590._.js
  JavaScript Functions:
    - AllTasks
    - toggleExpand
    - to
    - renderTasks
  Comments:
    // ✅ Theme toggle
    //127.0.0.1:5000/api/tasks").then((response)=>response.json()).then((data)=>{
    // ✅ Toggle nested subtasks visibility
    // ✅ Recursive function to render nested tasks
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=module.compiled.js.map
    //# sourceMappingURL=react-jsx-dev-runtime.js.map
    //# sourceMappingURL=react.js.map
    //# sourceMappingURL=%5Broot%20of%20the%20server%5D__a7d590._.js.map

File: ./frontend/.next/server/chunks/ssr/node_modules_next_dist_97f32f._.js
  JavaScript Functions:
    - ensures
    - normalizePathSep
    - _export
    - getExtensionRegexString
    - isMetadataRouteFile
    - isStaticMetadataRouteFile
    - isStaticMetadataRoute
    - isMetadataRoute
    - normalizeLocalePath
    - lexer
    - parse
    - compile
    - tokensToFunction
    - match
    - regexpToFunction
    - escapeString
    - flags
    - regexpToRegexp
    - arrayToRegexp
    - stringToRegexp
    - tokensToRegexp
    - pathToRegexp
    - getPathMatch
    - that
    - _export
    - did
    - did
    - ensures
    - ensureLeadingSlash
    - _export
    - isGroupSegment
    - isParallelRouteSegment
    - addSearchParamsIfPageSegment
    - _export
    - normalizeAppPath
    - normalizeRscURL
    - _export
    - isInterceptionRouteAppPath
    - extractInterceptionRouteInformation
    - escapeStringRegexp
    - removeTrailingSlash
    - _export
    - parseParameter
    - parseMatchedParameter
    - getParametrizedRoute
    - getRouteRegex
    - to
    - buildGetSafeRouteKey
    - getSafeKeyFromSegment
    - getNamedParametrizedRoute
    - getNamedRouteRegex
    - getNamedMiddlewareRegex
    - _export
    - execOnce
    - isAbsoluteUrl
    - getLocationOrigin
    - getURL
    - getDisplayName
    - isResSent
    - normalizeRepeatedSlashes
    - loadGetInitialProps
    - stringifyError
    - getRouteMatcher
    - decode
    - _export
    - searchParamsToUrlQuery
    - stringifyUrlQueryParam
    - urlQueryToSearchParams
    - assign
    - parseRelativeUrl
    - parseUrl
    - _export
    - parse
    - serialize
    - tryDecode
    - getCookieParser
    - parseCookie
    - _export
    - getSafeParamName
    - escapeSegment
    - unescapeSegments
    - matchHas
    - hasMatch
    - compileNonPath
    - prepareDestination
    - _export
    - normalizeVercelUrl
    - interpolateDynamicPath
    - normalizeDynamicRouteParams
    - getUtils
    - handleRewrites
    - matchesPage
    - checkRewrite
    - getParamsFromRouteMatches
    - filterLocaleItem
    - _export
    - djb2Hash
    - hexHash
    - isDynamicServerError
    - isStaticGenBailoutError
    - constructs
    - makeHangingPromise
    - ignoreReject
    - createDynamicTrackingState
    - createDynamicValidationState
    - getFirstDynamicReason
    - markCurrentScopeAsDynamic
    - trackFallbackParamAccessed
    - throwToInterruptStaticGeneration
    - trackDynamicDataInDynamicRender
    - abortOnSynchronousDynamicDataAccess
    - abortOnSynchronousPlatformIOAccess
    - trackSynchronousPlatformIOAccessInDev
    - abortAndThrowOnSynchronousRequestDataAccess
    - Postpone
    - postponeWithTracking
    - createPostponeReason
    - isDynamicPostpone
    - isDynamicPostponeReason
    - createPrerenderInterruptedError
    - isPrerenderInterruptedError
    - accessedDynamicData
    - consumeDynamicAccess
    - formatDynamicAPIAccesses
    - assertPostpone
    - createPostponedAbortSignal
    - annotateDynamicAccess
    - useDynamicRouteParams
    - trackAllowedDynamicAccess
    - createErrorWithComponentStack
    - throwIfDisallowedDynamic
    - createDedupedByCallsiteServerErrorLoggerDev
    - logDedupedError
    - describeStringPropertyAccess
    - describeHasCheckingStringProperty
    - throwWithStaticGenerationBailoutError
    - throwWithStaticGenerationBailoutErrorWithDynamicError
    - isRequestAPICallableInsideAfter
    - to
    - to
    - scheduleOnNextTick
    - scheduleImmediate
    - atLeastOneTask
    - waitAtLeastOneReactRenderTask
    - createSearchParamsFromClient
    - createServerSearchParamsForServerPage
    - createPrerenderSearchParamsForClientPage
    - createPrerenderSearchParams
    - createRenderSearchParams
    - makeAbortingExoticSearchParams
    - on
    - makeErroringExoticSearchParams
    - on
    - makeUntrackedExoticSearchParams
    - makeDynamicallyTrackedExoticSearchParamsWithDevWarnings
    - syncIODev
    - noop
    - createSearchAccessError
    - createIncompleteEnumerationError
    - describeListOfPropertyNames
    - createParamsFromClient
    - createServerParamsForRoute
    - createServerParamsForServerSegment
    - createPrerenderParamsForClientSegment
    - createPrerenderParams
    - createRenderParams
    - makeAbortingExoticParams
    - makeErroringExoticParams
    - makeUntrackedExoticParams
    - makeDynamicallyTrackedExoticParamsWithDevWarnings
    - syncIODev
    - noop
    - createParamsAccessError
    - createIncompleteEnumerationError
    - describeListOfPropertyNames
    - nonNullable
    - Meta
    - MetaFilter
    - camelToSnake
    - getMetaKey
    - ExtendMeta
    - MultiMeta
    - resolveArray
    - resolveAsArrayOrUndefined
    - getOrigin
    - resolveViewportLayout
    - ViewportMeta
    - BasicMeta
    - ItunesMeta
    - FacebookMeta
    - FormatDetectionMeta
    - AppleWebAppMeta
    - VerificationMeta
    - AlternateLink
    - AlternatesMetadata
    - OpenGraphMetadata
    - TwitterAppItem
    - TwitterMetadata
    - AppLinksMeta
    - IconDescriptorLink
    - IconLink
    - IconsMetadata
    - createDefaultViewport
    - createDefaultMetadata
    - isStringOrURL
    - createLocalMetadataBase
    - getPreviewDeploymentUrl
    - getProductionDeploymentUrl
    - getSocialImageMetadataBaseFallback
    - resolveUrl
    - resolveRelativeUrl
    - isFilePattern
    - resolveAbsoluteUrlWithPathname
    - resolveTitleTemplate
    - resolveTitle
    - isFullStringUrl
    - parseUrl
    - stripNextRscUnionQuery
    - replaceClose
    - formatter
    - prefixedLog
    - bootstrap
    - wait
    - error
    - warn
    - ready
    - info
    - event
    - trace
    - warnOnce
    - resolveAndValidateImage
    - resolveImages
    - getFieldsByOgType
    - resolveOpenGraph
    - resolveProps
    - resolveTwitter
    - isGroupSegment
    - isParallelRouteSegment
    - addSearchParamsIfPageSegment
    - getLayoutOrPageModule
    - getComponentTypeModule
    - interopDefault
    - resolveAlternateUrl
    - resolveThemeColor
    - _resolveAsArrayOrUndefined
    - resolveUrlValuesOfObject
    - resolveCanonicalUrl
    - resolveAlternates
    - resolveRobotsValue
    - resolveRobots
    - resolveVerification
    - resolveAppleWebApp
    - _resolveAsArrayOrUndefined
    - resolveAppLinks
    - resolveItunes
    - resolveFacebook
    - resolveIcon
    - resolveIcons
    - isThenable
    - _logProxy
    - disable
    - createComponentLogger
    - getBaggage
    - getActiveBaggage
    - setBaggage
    - deleteBaggage
    - createBaggage
    - baggageEntryMetadataFromString
    - createContextKey
    - getValue
    - setValue
    - deleteValue
    - logProxy
    - _consoleFunc
    - createLogLevelDiagLogger
    - _filterFunc
    - registerGlobal
    - getGlobal
    - unregisterGlobal
    - _makeCompatibilityCheck
    - isExactmatch
    - _reject
    - _accept
    - isCompatible
    - createNoopMeter
    - isSpanContext
    - getSpan
    - getActiveSpan
    - setSpan
    - deleteSpan
    - setSpanContext
    - getSpanContext
    - validateKey
    - validateValue
    - createTraceState
    - isValidTraceId
    - isValidSpanId
    - isSpanContextValid
    - wrapSpanContext
    - __nccwpck_require__
    - isBubbledError
    - closeSpanWithError
    - getSpanId
    - onCleanup
    - getTracer
    - replacer
    - reviver
    - cloneMetadata
    - isFavicon
    - mergeStaticMetadata
    - mergeMetadata
    - mergeViewport
    - getDefinedViewport
    - getDefinedMetadata
    - collectStaticImagesFiles
    - resolveStaticMetadata
    - collectMetadata
    - resolveMetadataItems
    - resolveMetadataItemsImpl
    - isTitleTruthy
    - hasTitle
    - inheritFromMetadata
    - postProcessMetadata
    - collectMetadataExportPreloading
    - getMetadataFromExport
    - concurrently
    - if
    - accumulateMetadata
    - accumulateViewport
    - isHTTPAccessFallbackError
    - getAccessFallbackHTTPStatus
    - getAccessFallbackErrorTypeByStatus
    - createMetadataComponents
    - MetadataRoot
    - viewport
    - Viewport
    - metadata
    - Metadata
    - getMetadataAndViewportReady
    - getResolvedMetadataImpl
    - getNotFoundMetadataImpl
    - getResolvedViewportImpl
    - getNotFoundViewportImpl
    - createMetadataElements
    - createViewportElements
    - did
    - did
    - cloneResponse
    - generateCacheKey
    - createDedupeFetch
    - dedupeFetch
    - that
    - to
    - that
    - schedulerFn
    - in
    - to
    - to
    - indexOfUint8Array
    - isEquivalentUint8Arrays
    - removeFromUint8Array
    - voidCatch
    - chainStreams
    - pass
    - streamFromString
    - streamFromBuffer
    - streamToBuffer
    - streamToString
    - createBufferedTransformStream
    - flush
    - createInsertedHTMLStream
    - renderToInitialFizzStream
    - createHeadInsertionTransformStream
    - createDeferredSuffixStream
    - flush
    - createMergedTransformStream
    - startPulling
    - createMoveSuffixStream
    - createStripDocumentClosingTagsTransform
    - createRootLayoutValidatorStream
    - chainTransformers
    - continueFizzStream
    - continueDynamicPrerender
    - continueStaticPrerender
    - continueDynamicHTMLResume
    - createDocumentClosingStream
    - getRequestMeta
    - setRequestMeta
    - addRequestMeta
    - removeRequestMeta
    - getNextInternalQuery
    - fromNodeOutgoingHttpHeaders
    - splitCookiesString
    - skipWhitespace
    - notSpecialChar
    - toNodeOutgoingHttpHeaders
    - validateURL
    - normalizeNextQueryParam
    - detectDomainLocale
    - removeTrailingSlash
    - will
    - parsePath
    - addPathPrefix
    - addPathSuffix
    - pathHasPrefix
    - addLocale
    - formatNextPathnameInfo
    - getHostname
    - normalizeLocalePath
    - removePathPrefix
    - getNextPathnameInfo
    - below
    - parseURL
    - middleware
    - __export
    - __copyProps
    - __toCommonJS
    - stringifyCookie
    - parseCookie
    - parseSetCookie
    - compact
    - parseSameSite
    - parsePriority
    - splitCookiesString
    - skipWhitespace
    - notSpecialChar
    - replace
    - normalizeCookie
    - isWebNextRequest
    - isWebNextResponse
    - isNodeNextRequest
    - isNodeNextResponse
    - createAbortController
    - signalFromNodeResponse
    - wrapClientComponentLoader
    - getClientComponentLoaderMetrics
    - isAbortError
    - createWriterFromResponse
    - onDrain
    - that
    - pipeToNodeResponse
    - fromResponseCacheEntry
    - toResponseCacheEntry
    - routeKindToIncrementalCacheKind
    - isFetchPatched
    - validateRevalidate
    - validateTags
    - trackFetchMetric
    - createPatchedFetcher
    - getRequestMeta
    - getNextField
    - handleUnlock
    - has
    - has
    - __nextGetStaticStore
    - patchFetch
    - preloadStyle
    - preloadFont
    - preconnect
    - notImplemented
    - _defineProperty
    - resolveClientReference
    - resolveServerReference
    - requireAsyncModule
    - ignoreReject
    - preloadModule
    - requireModule
    - prepareDestinationWithChunks
    - getIteratorFn
    - isObjectPrototype
    - isSimpleObject
    - objectName
    - describeKeyForErrorMessage
    - describeValueForErrorMessage
    - describeElementType
    - describeObjectForErrorMessage
    - serializeNumber
    - processReply
    - serializeTypedArray
    - serializeBinaryReader
    - progress
    - serializeReader
    - progress
    - serializeReadableStream
    - serializeAsyncIterable
    - progress
    - resolveToJSON
    - serializeModel
    - encodeFormData
    - defaultEncodeFormAction
    - isSignatureEqual
    - createFakeServerFunction
    - registerServerReference
    - bind
    - createBoundServerReference
    - action
    - parseStackLocation
    - createServerReference
    - action
    - getComponentNameFromType
    - ReactPromise
    - readChunk
    - createPendingChunk
    - wakeChunk
    - wakeChunkIfInitialized
    - triggerErrorOnChunk
    - createResolvedIteratorResultChunk
    - resolveIteratorResultChunk
    - resolveModelChunk
    - resolveModuleChunk
    - initializeModelChunk
    - initializeModuleChunk
    - reportGlobalError
    - nullRefGetter
    - createLazyChunkWrapper
    - getChunk
    - waitForReference
    - fulfill
    - reject
    - loadServerReference
    - getOutlinedModel
    - createMap
    - createSet
    - createBlob
    - createFormData
    - extractIterator
    - createModel
    - parseModelString
    - missingCall
    - from
    - ResponseInstance
    - resolveModel
    - resolveText
    - resolveBuffer
    - resolveModule
    - resolveStream
    - startReadableStream
    - asyncIterator
    - createIterator
    - startAsyncIterable
    - stopStream
    - resolveErrorDev
    - resolveHint
    - createFakeFunction
    - buildFakeCallStack
    - getRootTask
    - fakeJSXCallSite
    - initializeFakeStack
    - resolveDebugInfo
    - getCurrentStackInDEV
    - resolveConsoleEntry
    - mergeBuffer
    - resolveTypedArray
    - processFullBinaryRow
    - processFullStringRow
    - createFromJSONCallback
    - noServerCall
    - createResponseFromOptions
    - startReadingFromStream
    - progress
    - error
    - collectSegmentData
    - PrefetchTreeData
    - collectSegmentDataImpl
    - renderSegmentPrefetch
    - isPartialRSCData
    - encodeChildSegmentAsFilesystemSafePathname
    - encodeParamValue
    - createSegmentAccessToken
    - createUnclosingPrefetchStream
    - _export
    - _interop_require_default
    - getMetadataRouteSuffix
    - fillMetadataSegment
    - normalizeMetadataRoute
    - normalizeMetadataPageToRoute
    - patchFetch
  Comments:
    /**
 * For a given page path, this function ensures that there is no backslash
 * escaping slashes in the path. Example:
 *  - `foo\/bar\/baz` -> `foo/bar/baz`
 */
    //# sourceMappingURL=normalize-path-sep.js.map
    // Match routes that are metadata routes, e.g. /sitemap.xml, /favicon.<ext>, /<icon>.<ext>, etc.
    // TODO-METADATA: support more metadata routes with more extensions
    // If there's no possible multi dynamic routes, will not match any <name>[].<ext> files
    //, '').replace(/\/route$/, '');
    //# sourceMappingURL=is-metadata-route.js.map
    /**
 * This module is for next.js server internal usage of path module.
 * It will use native path module for nodejs runtime.
 * It will use path-browserify polyfill for edge runtime.
 */
    //# sourceMappingURL=path.js.map
    // first item will be empty string from splitting at first char
    //# sourceMappingURL=normalize-locale-path.js.map
    /**
   * A matcher function that will check if a given pathname matches the path
   * given in the builder function. When the path does not match it will return
   * `false` but if it does it will return an object with the matched params
   * merged with the params provided in the second argument.
   */
    // If no pathname is provided it's not a match.
    // If the path did not match `false` will be returned.
    /**
     * If unnamed params are not allowed they must be removed from
     * the matched parameters. path-to-regexp uses "string" for named and
     * "number" for unnamed parameters.
     */
    //# sourceMappingURL=path-match.js.map
    //nextjs.org/docs/messages/public-next-folder-conflict`;
    //nextjs.org/docs/messages/404-get-initial-props`;
    //nextjs.org/docs/messages/gssp-export`;
    //nextjs.org/docs/messages/gssp-component-member`;
    //nextjs.org/docs/messages/non-standard-node-env`;
    //nextjs.org/docs/messages/ssg-fallback-true-export`;
    /**
 * The names of the webpack layers. These layers are the primitives for the
 * webpack chunks.
 */
    /**
   * The layer for the shared code between the client and server bundles.
   */
    /**
   * The layer for server-only runtime and picking up `react-server` export conditions.
   * Including app router RSC pages and app router custom routes and metadata routes.
   */
    /**
   * Server Side Rendering layer for app (ssr).
   */
    /**
   * The browser client bundle layer for actions.
   */
    /**
   * The layer for the API routes.
   */
    /**
   * The layer for the middleware code.
   */
    /**
   * The layer for the instrumentation hooks.
   */
    /**
   * The layer for assets on the edge.
   */
    /**
   * The browser client bundle layer for App directory.
   */
    // pages api
    // app router pages and layouts
    //# sourceMappingURL=constants.js.map
    /**
 * For a given page path, this function ensures that there is a leading slash.
 * If there is not a leading slash, one is added, otherwise it is noop.
 */
    //# sourceMappingURL=ensure-leading-slash.js.map
    // Use array[0] for performant purpose
    //# sourceMappingURL=segment.js.map
    // Empty segments are ignored.
    // Groups are ignored.
    // Parallel segments are ignored.
    // The last segment (if it's a leaf) should be ignored.
    //# sourceMappingURL=app-paths.js.map
    // TODO-APP: add more serious validation
    // normalize the path, e.g. /(blog)/feed -> /feed
    // (.) indicates that we should match with sibling routes, so we just need to append the intercepted route to the intercepting route
    // (..) indicates that we should match at one level up, so we need to remove the last segment of the intercepting route
    // (...) will match the route segment in the root directory, so we need to use the root directory to prepend the intercepted route
    // (..)(..) indicates that we should match at two levels up, so we need to remove the last two segments of the intercepting route
    //# sourceMappingURL=interception-routes.js.map
    // regexp is based on https://github.com/sindresorhus/escape-string-regexp
    // see also: https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/escapeRegExp.js#L23
    //# sourceMappingURL=escape-regexp.js.map
    /**
 * Removes the trailing slash for a given route or page path. Preserves the
 * root page. Examples:
 *   - `/foo/bar/` -> `/foo/bar`
 *   - `/foo/bar` -> `/foo/bar`
 *   - `/` -> `/`
 */
    //# sourceMappingURL=remove-trailing-slash.js.map
    /**
 * Regular expression pattern used to match route parameters.
 * Matches both single parameters and parameter groups.
 * Examples:
 *   - `[[...slug]]` matches parameter group with key 'slug', repeat: true, optional: true
 *   - `[...slug]` matches parameter group with key 'slug', repeat: true, optional: false
 *   - `[[foo]]` matches parameter with key 'foo', repeat: false, optional: true
 *   - `[bar]` matches parameter with key 'bar', repeat: false, optional: false
 */
    /**
 * Parses a matched parameter from the PARAMETER_PATTERN regex to a data structure that can be used
 * to generate the parametrized route.
 * Examples:
 *   - `[...slug]` -> `{ key: 'slug', repeat: true, optional: true }`
 *   - `...slug` -> `{ key: 'slug', repeat: true, optional: false }`
 *   - `[foo]` -> `{ key: 'foo', repeat: false, optional: true }`
 *   - `bar` -> `{ key: 'bar', repeat: false, optional: false }`
 * @param param - The matched parameter to parse.
 * @returns The parsed parameter as a data structure.
 */
    // Check for parameters
    /**
 * Builds a function to generate a minimal routeKey using only a-z and minimal
 * number of characters.
 */
    // replace any non-word characters since they can break
    // the named regex
    // check if the key is still invalid and fallback to using a known
    // safe key
    // if the segment has an interception marker, make sure that's part of the regex pattern
    // this is to ensure that the route with the interception marker doesn't incorrectly match
    // the non-intercepted route (ie /app/(.)[username] should not match /app/[username])
    // Check for parameters
    //# sourceMappingURL=route-regex.js.map
    // Scheme: https://tools.ietf.org/html/rfc3986#section-3.1
    // Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3
    //" + hostname + (port ? ':' + port : '');
    // first we replace any non-encoded backslashes with forward
    // then normalize repeated forward slashes
    //nextjs.org/docs/messages/get-initial-props-as-an-instance-method for more information.';
    // when called from _app `ctx` is nested in `ctx`
    // @ts-ignore pageProps default
    //nextjs.org/docs/messages/empty-object-getInitialProps");
    //# sourceMappingURL=utils.js.map
    //# sourceMappingURL=route-matcher.js.map
    //# sourceMappingURL=querystring.js.map
    //n' : ("TURBOPACK unreachable", undefined));
    //n' : ("TURBOPACK unreachable", undefined)) : globalBase;
    //# sourceMappingURL=parse-relative-url.js.map
    //# sourceMappingURL=parse-url.js.map
    //# sourceMappingURL=app-router-headers.js.map
    /*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */
    //# sourceMappingURL=get-cookie-parser.js.map
    /**
 * Ensure only a-zA-Z are used for param names for proper interpolating
 * with path-to-regexp
 */
    // A-Z
    // a-z
    // remove port from host if present
    // the value needs to start with a forward-slash to be compiled
    // correctly
    // have already validated before we got to this point and validating
    // breaks compiling destinations with named pattern params from the source
    // e.g. /something:hello(.*) -> /another/:hello is broken with validation
    // since compile validation is meant for reversing and not for inserting
    // params from a separate path-regex into another
    // update any params in query values
    // the value needs to start with a forward-slash to be compiled
    // correctly
    // add path params to query if it's not a redirect and not
    // already defined in destination query or path
    // The compiler also that the interception route marker is an unnamed param, hence '0',
    // so we need to add it to the params object.
    //nextjs.org/docs/messages/invalid-multi-match");
    // Query merge order lowest priority to highest
    // 1. initial URL query values
    // 2. path segment values
    // 3. destination specified query values
    //# sourceMappingURL=prepare-destination.js.map
    // make sure to normalize req.url on Vercel to strip dynamic params
    // from the query which are added during routing
    // if the value matches the default value we can't rely
    // on the parsed params, this is used to signal if we need
    // to parse x-now-route-matches or not
    // non-provided optional values should be undefined so normalize
    // them to undefined
    // fallback optional catch-all SSG pages have
    // [[...paramName]] for the root path on Vercel
    // query values from the proxy aren't already split into arrays
    // so make sure to normalize catch-all values
    // if the rewrite destination is external break rewrite chain
    // Simulate a RegExp match from the \`req.url\` input
    // favor named matches if available
    // locale items can be included in route-matches
    // for fallback SSG pages so ensure they are
    // filtered
    // remove the locale item from the match
    // the value is only a locale item and
    // shouldn't be added
    //# sourceMappingURL=server-utils.js.map
    // http://www.cse.yorku.ca/~oz/hash.html
    // More specifically, 32-bit hash via djbxor
    // (ref: https://gist.github.com/eplawless/52813b1d8ad9af510d85?permalink_comment_id=3367765#gistcomment-3367765)
    // This is due to number type differences between rust for turbopack to js number types,
    // where rust does not have easy way to repreesnt js's 53-bit float number type for the matching
    // overflow behavior. This is more `correct` in terms of having canonical hash across different runtime / implementation
    // as can gaurantee determinstic output from 32bit hash.
    //# sourceMappingURL=hash.js.map
    //# sourceMappingURL=module.compiled.js.map
    //# sourceMappingURL=react-server-dom-turbopack-server-edge.js.map
    //# sourceMappingURL=react-server-dom-turbopack-static-edge.js.map
    //# sourceMappingURL=reflect.js.map
    //# sourceMappingURL=react.js.map
    //# sourceMappingURL=hooks-server-context.js.map
    //# sourceMappingURL=static-generation-bailout.js.map
    /**
 * This function constructs a promise that will never resolve. This is primarily
 * useful for dynamicIO where we use promise resolution timing to determine which
 * parts of a render can be included in a prerender.
 *
 * @internal
 */
    // We are fine if no one actually awaits this promise. We shouldn't consider this an unhandled rejection so
    // we attach a noop catch handler here to suppress this warning. If you actually await somewhere or construct
    // your own promise out of it you'll need to ensure you handle the error when it rejects.
    //# sourceMappingURL=dynamic-rendering-utils.js.map
    //# sourceMappingURL=metadata-constants.js.map
    /**
 * The functions provided by this module are used to communicate certain properties
 * about the currently running code so that Next.js can make decisions on how to handle
 * the current execution in different rendering modes such as pre-rendering, resuming, and SSR.
 *
 * Today Next.js treats all code as potentially static. Certain APIs may only make sense when dynamically rendering.
 * Traditionally this meant deopting the entire render to dynamic however with PPR we can now deopt parts
 * of a React tree as dynamic while still keeping other parts static. There are really two different kinds of
 * Dynamic indications.
 *
 * The first is simply an intention to be dynamic. unstable_noStore is an example of this where
 * the currently executing code simply declares that the current scope is dynamic but if you use it
 * inside unstable_cache it can still be cached. This type of indication can be removed if we ever
 * make the default dynamic to begin with because the only way you would ever be static is inside
 * a cache scope which this indication does not affect.
 *
 * The second is an indication that a dynamic data source was read. This is a stronger form of dynamic
 * because it means that it is inappropriate to cache this at all. using a dynamic data source inside
 * unstable_cache should error. If you want to use some dynamic data inside unstable_cache you should
 * read that data outside the cache and pass it in as an argument to the cached function.
 */
    // Once postpone is in stable we should switch to importing the postpone export directly
    // inside cache scopes marking a scope as dynamic has no effect because the outer cache scope
    // creates a cache boundary. This is subtly different from reading a dynamic data source which is
    // forbidden inside a cache scope.
    // If we're forcing dynamic rendering or we're forcing static rendering, we
    // don't need to do anything here because the entire page is already dynamic
    // or it's static and it should not throw or postpone here.
    //nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);
    // We aren't prerendering but we are generating a static page. We need to bail out of static generation
    //nextjs.org/docs/messages/dynamic-server-error`);
    // We aren't prerendering but we are generating a static page. We need to bail out of static generation
    //nextjs.org/docs/messages/dynamic-server-error`);
    // inside cache scopes marking a scope as dynamic has no effect because the outer cache scope
    // creates a cache boundary. This is subtly different from reading a dynamic data source which is
    // forbidden inside a cache scope.
    // Despite it's name we don't actually abort unless we have a controller to call abort on
    // There are times when we let a prerender run long to discover caches where we want the semantics
    // of tracking dynamic access without terminating the prerender early
    // When we aren't debugging, we don't need to create another error for the
    // stack trace.
    // We don't actually have a controller to abort but we do the semantic equivalent by
    // advancing the request store out of prerender mode
    // We always log Request Access in dev at the point of calling the function
    // So we mark the dynamic validation as not requiring it to be printed
    // When we aren't debugging, we don't need to create another error for the
    // stack trace.
    //nextjs.org/docs/messages/ppr-caught-error`;
    //nextjs.org/docs/messages/ppr-caught-error');
    // We mutate because we only call this once we are no longer writing
    // to the dynamicTrackingState and it's more efficient than creating a new
    // array.
    // Remove the "Error: " prefix from the first line of the stack trace as
    // well as the first 4 lines of the stack trace which is the distance
    // from the user code and the `new Error().stack` call.
    // Exclude Next.js internals from the stack trace.
    // Exclude anonymous functions from the stack trace.
    // Exclude Node.js internals from the stack trace.
    // We get our hands on a postpone instance by calling postpone and catching the throw
    // There are fallback route params, we should track these as dynamic
    // accesses.
    // We're prerendering with dynamicIO or PPR or both
    // We are in a prerender with dynamicIO semantics
    // We are going to hang here and never resolve. This will cause the currently
    // rendering component to effectively be a dynamic hole
    // We're prerendering with PPR
    // We don't need to track that this is dynamic. It is only so when something else is also dynamic.
    //nextjs.org/docs/messages/next-prerender-missing-suspense`;
    // In dev we already log errors about sync dynamic access. But during builds we need to ensure
    // the offending sync error is logged before we exit the build
    // The actual error should have been logged when the sync access ocurred
    //# sourceMappingURL=dynamic-rendering.js.map
    //# sourceMappingURL=invariant-error.js.map
    // React.cache is currently only available in canary/experimental React channels.
    // When Dynamic IO is enabled, we record these as errors so that they
    // are captured by the dev overlay as it's more critical to fix these
    // when enabled.
    // We don't want to dedupe across requests.
    // The developer might've just attempted to fix the warning so we should warn again if it still happens.
    // Error:
    //   logDedupedError
    //   asyncApiBeingAccessedSynchronously
    //   <userland callsite>
    // TODO: This breaks if sourcemaps with ignore lists are enabled.
    //# sourceMappingURL=create-deduped-by-callsite-server-error-logger.js.map
    // This regex will have fast negatives meaning valid identifiers may not pass
    // this test. However this is only used during static generation to provide hints
    // about why a page bailed out of some or all prerendering and we can use bracket notation
    // for example while `ಠ_ಠ` is a valid identifier it's ok to print `searchParams['ಠ_ಠ']`
    // even if this would have been fine too `searchParams.ಠ_ಠ`
    //nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);
    //nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);
    // Promise prototype
    // fallthrough
    // React Promise extension
    // fallthrough
    // React introspection
    // Common tested properties
    // fallthrough
    //# sourceMappingURL=utils.js.map
    /**
 * Schedules a function to be called on the next tick after the other promises
 * have been resolved.
 *
 * @param cb the function to schedule
 */
    // We use Promise.resolve().then() here so that the operation is scheduled at
    // the end of the promise job queue, we then add it to the next process tick
    // to ensure it's evaluated afterwards.
    //
    // This was inspired by the implementation of the DataLoader interface: https://github.com/graphql/dataloader/blob/d336bd15282664e0be4b4a657cb796f09bafbc6b/src/index.js#L213-L255
    //
    //# sourceMappingURL=scheduler.js.map
    // When using forceStatic we override all other logic and always just return an empty
    // dictionary object.
    // dynamicIO Prerender
    // We're prerendering in a mode that aborts (dynamicIO) and should stall
    // the promise to ensure the RSC side is considered dynamic
    // We're prerendering in a mode that does not aborts. We resolve the promise without
    // any tracking because we're just transporting a value from server to client where the tracking
    // will be applied.
    // When using forceStatic we override all other logic and always just return an empty
    // dictionary object.
    // We are in a dynamicIO (PPR or otherwise) prerender
    // The remaining cases are prerender-ppr and prerender-legacy
    // We are in a legacy static generation and need to interrupt the prerender
    // when search params are accessed.
    // When using forceStatic we override all other logic and always just return an empty
    // dictionary object.
    // The promise has this property directly. we must return it.
    // We know it isn't a dynamic access because it can only be something
    // that was previously written to the promise and thus not an underlying searchParam value
    // Object prototype
    // Promise prototype
    // fallthrough
    // Common tested properties
    // fallthrough
    // These properties cannot be shadowed because they need to be the
    // true underlying value for Promises to work correctly at runtime
    // We don't expect key checking to be used except for testing the existence of
    // searchParams so we make all has tests trigger dynamic. this means that `promise.then`
    // can resolve to the then function on the Promise prototype but 'then' in promise will assume
    // you are testing whether the searchParams has a 'then' property.
    // For search params we don't construct a ReactPromise because we want to interrupt
    // rendering on any property access that was not set from outside and so we only want
    // to have properties like value and status if React sets them.
    // The promise has this property directly. we must return it.
    // We know it isn't a dynamic access because it can only be something
    // that was previously written to the promise and thus not an underlying searchParam value
    // Object prototype
    // Promise prototype
    // fallthrough
    // Common tested properties
    // fallthrough
    // These properties cannot be shadowed because they need to be the
    // true underlying value for Promises to work correctly at runtime
    // PPR Prerender (no dynamicIO)
    // Legacy Prerender
    // PPR Prerender (no dynamicIO)
    // Legacy Prerender
    // PPR Prerender (no dynamicIO)
    // Legacy Prerender
    // We don't expect key checking to be used except for testing the existence of
    // searchParams so we make all has tests trigger dynamic. this means that `promise.then`
    // can resolve to the then function on the Promise prototype but 'then' in promise will assume
    // you are testing whether the searchParams has a 'then' property.
    // PPR Prerender (no dynamicIO)
    // Legacy Prerender
    // PPR Prerender (no dynamicIO)
    // Legacy Prerender
    // We don't use makeResolvedReactPromise here because searchParams
    // supports copying with spread and we don't want to unnecessarily
    // instrument the promise with spreadable properties of ReactPromise.
    // Object prototype
    // Promise prototype
    // fallthrough
    // React Promise extension
    // fallthrough
    // Common tested properties
    // fallthrough
    // We have an unfortunate sequence of events that requires this initialization logic. We want to instrument the underlying
    // searchParams object to detect if you are accessing values in dev. This is used for warnings and for things like the static prerender
    // indicator. However when we pass this proxy to our Promise.resolve() below the VM checks if the resolved value is a promise by looking
    // at the `.then` property. To our dynamic tracking logic this is indistinguishable from a `then` searchParam and so we would normally trigger
    // dynamic tracking. However we know that this .then is not real dynamic access, it's just how thenables resolve in sequence. So we introduce
    // this initialization concept so we omit the dynamic check until after we've constructed our resolved promise.
    // We don't use makeResolvedReactPromise here because searchParams
    // supports copying with spread and we don't want to unnecessarily
    // instrument the promise with spreadable properties of ReactPromise.
    // These properties cannot be shadowed because they need to be the
    // true underlying value for Promises to work correctly at runtime
    // We are accessing a property that doesn't exist on the promise nor
    // the underlying searchParams.
    // We are accessing a property that doesn't exist on the promise nor
    // the underlying searchParams.
    // In all cases we warn normally
    // When we're rendering dynamically in dev we need to advance out of the
    // Prerender environment when we read Request data synchronously
    //nextjs.org/docs/messages/sync-dynamic-apis`);
    //nextjs.org/docs/messages/sync-dynamic-apis`);
    //# sourceMappingURL=search-params.js.map
    // This params object has one of more fallback params so we need to consider
    // the awaiting of this params object "dynamic". Since we are in dynamicIO mode
    // we encode this as a promise that never resolves
    // We're prerendering in a mode that does not abort. We resolve the promise without
    // any tracking because we're just transporting a value from server to client where the tracking
    // will be applied.
    // params need to be treated as dynamic because we have at least one fallback param
    // We are in a dynamicIO (PPR or otherwise) prerender
    // remaining cases are prender-ppr and prerender-legacy
    // We aren't in a dynamicIO prerender but we do have fallback params at this
    // level so we need to make an erroring exotic params object which will postpone
    // if you access the fallback params
    // We don't have any fallback params so we have an entirely static safe params object
    // These properties cannot be shadowed because they need to be the
    // true underlying value for Promises to work correctly at runtime
    // We don't use makeResolvedReactPromise here because params
    // supports copying with spread and we don't want to unnecessarily
    // instrument the promise with spreadable properties of ReactPromise.
    // These properties cannot be shadowed because they need to be the
    // true underlying value for Promises to work correctly at runtime
    // In most dynamic APIs we also throw if `dynamic = "error"` however
    // for params is only dynamic when we're generating a fallback shell
    // and even when `dynamic = "error"` we still support generating dynamic
    // fallback shells
    // TODO remove this comment when dynamicIO is the default since there
    // will be no `dynamic = "error"`
    // PPR Prerender (no dynamicIO)
    // Legacy Prerender
    // In most dynamic APIs we also throw if `dynamic = "error"` however
    // for params is only dynamic when we're generating a fallback shell
    // and even when `dynamic = "error"` we still support generating dynamic
    // fallback shells
    // TODO remove this comment when dynamicIO is the default since there
    // will be no `dynamic = "error"`
    // PPR Prerender (no dynamicIO)
    // Legacy Prerender
    // We don't use makeResolvedReactPromise here because params
    // supports copying with spread and we don't want to unnecessarily
    // instrument the promise with spreadable properties of ReactPromise.
    // These properties cannot be shadowed because they need to be the
    // true underlying value for Promises to work correctly at runtime
    // We don't use makeResolvedReactPromise here because params
    // supports copying with spread and we don't want to unnecessarily
    // instrument the promise with spreadable properties of ReactPromise.
    // These properties cannot be shadowed because they need to be the
    // true underlying value for Promises to work correctly at runtime
    // When we're rendering dynamically in dev we need to advance out of the
    // Prerender environment when we read Request data synchronously
    // In all cases we warn normally
    //nextjs.org/docs/messages/sync-dynamic-apis`);
    //nextjs.org/docs/messages/sync-dynamic-apis`);
    //# sourceMappingURL=params.js.map
    //# sourceMappingURL=react-jsx-runtime.js.map
    //# sourceMappingURL=non-nullable.js.map
    /*#__PURE__*/
    // Use `twitter:image` and `og:image` instead of `twitter:image:url` and `og:image:url`
    // to be more compatible as it's a more common format.
    // `og:video` & `og:audio` do not have a `:url` suffix alias
    //# sourceMappingURL=meta.js.map
    //# sourceMappingURL=constants.js.map
    //# sourceMappingURL=utils.js.map
    // convert viewport object to string for viewport meta tag
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // If it's same origin, and it's a preview deployment,
    // including credentials for manifest request.
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=basic.js.map
    /*#__PURE__*/
    //# sourceMappingURL=alternate.js.map
    //# sourceMappingURL=opengraph.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=icons.js.map
    // name=viewport
    // visual metadata
    // Deprecated ones
    // Other values are all null
    //# sourceMappingURL=default-metadata.js.map
    /**
 * This module is for next.js server internal usage of path module.
 * It will use native path module for nodejs runtime.
 * It will use path-browserify polyfill for edge runtime.
 */
    //# sourceMappingURL=path.js.map
    //localhost:${process.env.PORT || 3000}`);
    //${origin}`) : undefined;
    //${origin}`) : undefined;
    // If we can construct a URL instance from url, ignore metadataBase
    // Handle relative or absolute paths
    // Resolve with `pathname` if `url` is a relative path.
    // The regex is matching logic from packages/next/src/lib/load-custom-routes.ts
    // Resolve `pathname` if `url` is a relative path the compose with `metadataBase`.
    // Resolve url with pathname that always starts with `/`
    // Convert string url or URL instance to absolute url string,
    // if there's case needs to be resolved with metadataBase
    // Add trailing slash if it's enabled for urls matches the condition
    // - Not external, same origin with metadataBase
    // - Doesn't have query
    // If it's not a valid URL, treat it as external
    //# sourceMappingURL=resolve-url.js.map
    //# sourceMappingURL=resolve-title.js.map
    //# sourceMappingURL=app-router-headers.js.map
    //n';
    //.test(url);
    //# sourceMappingURL=url.js.map
    // ISC License
    // Copyright (c) 2021 Alexey Raspopov, Kostiantyn Denysov, Anton Verinov
    // Permission to use, copy, modify, and/or distribute this software for any
    // purpose with or without fee is hereby granted, provided that the above
    // copyright notice and this permission notice appear in all copies.
    // THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
    // WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
    // MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
    // ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
    // WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
    // ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
    // OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
    //
    // https://github.com/alexeyraspopov/picocolors/blob/b6261487e7b81aaab2440e397a356732cad9e342/picocolors.js#L1
    //# sourceMappingURL=picocolors.js.map
    //# sourceMappingURL=lru-cache.js.map
    // If there's no message, don't print the prefix but a new line
    // Ensure if there's ANSI escape codes it's concatenated into one string.
    // Chrome DevTool can only handle color if it's in one string.
    // logging format: ' <prefix> <message>'
    // e.g. ' ✓ Compiled successfully'
    // Add spaces to align with the indent of other logs
    //# sourceMappingURL=log.js.map
    // process.env.VERCEL is set to "1" when System Environment Variables are
    // exposed. When exposed, validation is not necessary since we are falling back to
    // process.env.VERCEL_PROJECT_PRODUCTION_URL, process.env.VERCEL_BRANCH_URL, or
    // process.env.VERCEL_URL for the `metadataBase`. process.env.VERCEL is undefined
    // when System Environment Variables are not exposed. When not exposed, we cannot
    // detect in the build environment if the deployment is a Vercel deployment or not.
    //
    // x-ref: https://vercel.com/docs/projects/environment-variables/system-environment-variables#system-environment-variables
    // When no explicit metadataBase is specified by the user, we'll override it with the fallback metadata
    // under the following conditions:
    // - The provided URL is relative (ie ./og-image).
    // - The image is statically generated by Next.js (such as the special `opengraph-image` route)
    // In both cases, we want to ensure that across all environments, the ogImage is a fully qualified URL.
    // In the `opengraph-image` case, since the user isn't explicitly passing a relative path, this ensures
    // the ogImage will be properly discovered across different environments without the user needing to
    // have a bunch of `process.env` checks when defining their `metadataBase`.
    // When not using Vercel environment variables for URL injection, we aren't able to determine
    // a fallback value for `metadataBase`. For self-hosted setups, we want to warn
    // about this since the only fallback we'll be able to generate is `localhost`.
    // In development, we'll only warn for relative metadata that isn't part of the static
    // metadata conventions (eg `opengraph-image`), as otherwise it's currently very noisy
    // for common cases. Eventually we should remove this warning all together in favor of
    // devtools.
    //nextjs.org/docs/app/api-reference/functions/generate-metadata#metadatabase`);
    // Update image descriptor url
    //# sourceMappingURL=resolve-opengraph.js.map
    // Use array[0] for performant purpose
    //# sourceMappingURL=segment.js.map
    //# sourceMappingURL=app-dir-module.js.map
    //# sourceMappingURL=interop-default.js.map
    // If alter native url is an URL instance,
    // we treat it as a URL base and resolve with current pathname
    // Return string url because structureClone can't handle URL instance
    // @ts-ignore // TODO: type infer
    //# sourceMappingURL=resolve-basics.js.map
    //# sourceMappingURL=resolve-icons.js.map
    /**
 * Contains predefined constants for the trace span name in next/server.
 *
 * Currently, next/server/tracer is internal implementation only for tracking
 * next.js's implementation only with known span names defined here.
 **/
    // eslint typescript has a bug with TS enums
    /* eslint-disable no-shadow */
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // nested inner span, does not require parent scope name
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=constants.js.map
    /**
 * Check to see if a value is Thenable.
 *
 * @param promise the maybe-thenable value
 * @returns true if the value is thenable
 */
    //# sourceMappingURL=is-thenable.js.map
    // we want to allow users to use their own version of @opentelemetry/api if they
    // want to, so we try to require it first, and if it fails we fall back to the
    // version that is bundled with Next.js
    // this is because @opentelemetry/api has to be synced with the version of
    // @opentelemetry/tracing that is used, and we don't want to force users to use
    // the version that is bundled with Next.js.
    // the API is ~stable, so this should be fine
    /** we use this map to propagate attributes from nested spans to the top span */
    /**
   * Returns an instance to the trace with configured name.
   * Since wrap / trace can be defined in any place prior to actual trace subscriber initialization,
   * This should be lazily evaluated.
   */
    // Active span is already set, too late to propagate.
    // coerce options form overload
    // Trying to get active scoped span to assign parent. If option specifies parent span manually, will try to use it.
    // If there's error make sure it throws
    // Need to pass down the promise result,
    // it could be react stream response with error { error, stream }
    //# sourceMappingURL=tracer.js.map
    // clone URL as string but recover it as URL
    //# sourceMappingURL=clone-metadata.js.map
    // eslint-disable-next-line import/no-extraneous-dependencies
    // turbopack appends a hash to all images
    // Keep updating the static icons in the most leaf node
    // file based metadata is specified and current level metadata twitter.images is not specified
    // file based metadata is specified and current level metadata openGraph.images is not specified
    // Merge the source metadata into the resolved target metadata.
    // If there's override metadata, prefer it otherwise fallback to the default metadata.
    // directly assign fields that fallback to null
    // @ts-ignore TODO: support inferring
    //nextjs.org/docs/app/api-reference/functions/generate-viewport`);
    // @ts-ignore viewport properties
    // [layout.metadata, static files metadata] -> ... -> [page.metadata, static files metadata]
    /** Provided tree can be nested subtree, this argument says what is the path of such subtree */
    // Handle dynamic segment params.
    /**
   * Create object holding the parent params and current params
   */
    // __PAGE__ shouldn't be shown in a route
    // If there are no parallel routes, place error metadata as the last item.
    // e.g. layout -> layout -> not-found
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    // If there's openGraph information but not configured in twitter,
    // inherit them from openGraph metadata.
    // If there's no title and description configured in openGraph or twitter,
    // use the title and description from metadata.
    // since we eager execute generateMetadata and
    // they can reject at anytime we need to ensure
    // we attach the catch handler right away to
    // prevent unhandled rejections crashing the process
    // Only preload at the beginning when resolves are empty
    // call each `generateMetadata function concurrently and stash their resolver
    // In dev we clone and freeze to prevent relying on mutating resolvedMetadata directly.
    // In prod we just pass resolvedMetadata through without any copying.
    // This resolve should unblock the generateMetadata function if it awaited the parent
    // argument. If it didn't await the parent argument it might already have a value since it was
    // called concurrently. Regardless we await the return value before continuing on to the next layer
    // re-throw caught metadata error from preloading
    // This metadataExport is the object form
    // Loop over all metadata items again, merging synchronously any static object exports,
    // awaiting any static promise exports, and resolving parent metadata and awaiting any generated metadata
    // Collect the static icons in the most leaf node,
    // since we don't collect all the static metadata icons in the parent segments.
    // Treat favicon as special case, it should be the first icon in the list
    // i <= 1 represents root layout, and if current page is also at root
    // If the layout is the same layer with page, skip the leaf layout and leaf page
    // The leaf layout and page are the last two items
    // Only log warnings if there are any, and only once after the metadata resolving process is finished
    //# sourceMappingURL=resolve-metadata.js.map
    //# sourceMappingURL=http-access-fallback.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // We don't actually want to error in this component. We will
    // also error in the MetadataOutlet which causes the error to
    // bubble from the right position in the page to be caught by the
    // appropriate boundaries
    // We don't actually want to error in this component. We will
    // also error in the MetadataOutlet which causes the error to
    // bubble from the right position in the page to be caught by the
    // appropriate boundaries
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=metadata.js.map
    //nextjs.org/docs/messages/public-next-folder-conflict`;
    //nextjs.org/docs/messages/404-get-initial-props`;
    //nextjs.org/docs/messages/gssp-export`;
    //nextjs.org/docs/messages/gssp-component-member`;
    //nextjs.org/docs/messages/non-standard-node-env`;
    //nextjs.org/docs/messages/ssg-fallback-true-export`;
    /**
 * The names of the webpack layers. These layers are the primitives for the
 * webpack chunks.
 */
    /**
   * The layer for the shared code between the client and server bundles.
   */
    /**
   * The layer for server-only runtime and picking up `react-server` export conditions.
   * Including app router RSC pages and app router custom routes and metadata routes.
   */
    /**
   * Server Side Rendering layer for app (ssr).
   */
    /**
   * The browser client bundle layer for actions.
   */
    /**
   * The layer for the API routes.
   */
    /**
   * The layer for the middleware code.
   */
    /**
   * The layer for the instrumentation hooks.
   */
    /**
   * The layer for assets on the edge.
   */
    /**
   * The browser client bundle layer for App directory.
   */
    // pages api
    // app router pages and layouts
    //# sourceMappingURL=constants.js.map
    /**
 * Clones a response by teeing the body so we can return two independent
 * ReadableStreams from it. This avoids the bug in the undici library around
 * response cloning.
 *
 * After cloning, the original response's body will be consumed and closed.
 *
 * @see https://github.com/vercel/next.js/pull/73274
 *
 * @param original - The original response to clone.
 * @returns A tuple containing two independent clones of the original response.
 */
    // If the response has no body, then we can just return the original response
    // twice because it's immutable.
    //# sourceMappingURL=clone-response.js.map
    /**
 * Based on https://github.com/facebook/react/blob/d4e78c42a94be027b4dc7ed2659a5fddfbf9bd4e/packages/react/src/ReactFetch.js
 */
    // generateCacheKey(new Request('https://blank'));
    // We pick the fields that goes into the key used to dedupe requests.
    // We don't include the `cache` field, because we end up using whatever
    // caching resulted from the first request.
    // Notably we currently don't consider non-standard (or future) options.
    // This might not be safe. TODO: warn for non-standard extensions differing.
    // IF YOU CHANGE THIS UPDATE THE simpleCacheKey ABOVE.
    // If we're passed a signal, then we assume that
    // someone else controls the lifetime of this object and opts out of
    // caching. It's effectively the opt-out mechanism.
    // Ideally we should be able to check this on the Request but
    // it always gets initialized with its own signal so we don't
    // know if it's supposed to override - unless we also override the
    // Request constructor.
    // Normalize the Request
    // Fast path.
    // Normalize the request.
    // if resource is not a string or a URL (its an instance of Request)
    // then do not instantiate a new Request but instead
    // reuse the request as to not disturb the body in the event it's a ReadableStream.
    // We currently don't dedupe requests that might have side-effects. Those
    // have to be explicitly cached. We assume that the request doesn't have a
    // body if it's GET or HEAD.
    // keepalive gets treated the same as if you passed a custom cache signal.
    // We're cloning the response using this utility because there exists
    // a bug in the undici library around response cloning. See the
    // following pull request for more details:
    // https://github.com/vercel/next.js/pull/73274
    // We pass the original arguments here in case normalizing the Request
    // doesn't include all the options in this environment.
    // We're cloning the response using this utility because there exists
    // a bug in the undici library around response cloning. See the
    // following pull request for more details:
    // https://github.com/vercel/next.js/pull/73274
    //# sourceMappingURL=dedupe-fetch.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=types.js.map
    /**
 * A `Promise.withResolvers` implementation that exposes the `resolve` and
 * `reject` functions on a `Promise`.
 *
 * @see https://tc39.es/proposal-promise-with-resolvers/
 */
    // Create the promise and assign the resolvers to the object.
    // We know that resolvers is defined because the Promise constructor runs
    // synchronously.
    //# sourceMappingURL=detached-promise.js.map
    /**
     * A function that will be called to schedule the wrapped function to be
     * executed. This defaults to a function that will execute the function
     * immediately.
     */
    /**
   * Wraps a function in a promise that will be resolved or rejected only once
   * for a given key. This will allow multiple calls to the function to be
   * made, but only one will be executed at a time. The result of the first
   * call will be returned to all callers.
   *
   * @param key the key to use for the cache
   * @param fn the function to wrap
   * @returns a promise that resolves to the result of the function
   */
    // Resolving a promise multiple times is a no-op, so we can safely
    // resolve all pending promises with the same result.
    //# sourceMappingURL=batcher.js.map
    // opening tags do not have the closing `>` since they can contain other attributes such as `<body className=''>`
    // <html
    // <body
    // </head>
    // </body>
    // </html>
    // </body></html>
    //# sourceMappingURL=encodedTags.js.map
    /**
 * Find the starting index of Uint8Array `b` within Uint8Array `a`.
 */
    // start iterating through `a`
    // from index `i`, iterate through `b` and check for mismatch
    // if the values do not match, then this isn't a complete match, exit `b` iteration early and iterate to next index of `a`.
    //# sourceMappingURL=uint8array-helpers.js.map
    // this catcher is designed to be used with pipeTo where we expect the underlying
    // pipe implementation to forward errors but we don't want the pipeTo promise to reject
    // and be unhandled
    // We can share the same encoder instance everywhere
    // Notably we cannot do the same for TextDecoder because it is stateful
    // when handling streaming data
    // We could encode this invariant in the arguments but current uses of this function pass
    // use spread so it would be missed by
    // If we only have 1 stream we fast path it by returning just this stream
    // We always initiate pipeTo immediately. We know we have at least 2 streams
    // so we need to avoid closing the writable when this one finishes.
    // We can omit the length check because we halted before the last stream and there
    // is at least two streams so the lastStream here will always be defined
    // Catch any errors from the streams and ignore them, they will be handled
    // by whatever is consuming the readable stream.
    // If we already have a pending flush, then return early.
    // We just wrote all the buffered chunks so we need to reset the bufferedChunks array
    // and our bufferByteLength to prepare for the next round of buffered chunks
    // If an error occurs while enqueuing it can't be due to this
    // transformers fault. It's likely due to the controller being
    // errored due to the stream being cancelled.
    // Combine the previous buffer with the new chunk.
    // Flush the buffer to the controller.
    // We need to track if this transform saw any bytes because if it didn't
    // we won't want to insert any server HTML at all
    // While react is flushing chunks, we don't apply insertions
    // TODO (@Ethan-Arrowood): Replace the generic `indexOfUint8Array` method with something finely tuned for the subset of things actually being checked for.
    // Check before closing if there's anything remaining to insert.
    // Suffix after main body content - scripts before </body>,
    // but wait for the major chunks to be enqueued.
    // If an error occurs while enqueuing it can't be due to this
    // transformers fault. It's likely due to the controller being
    // errored due to the stream being cancelled.
    // If we've already flushed, we're done.
    // Schedule the flush to happen.
    // Flush now.
    // Merge two streams into one. Ensure the final transform stream is closed
    // when both are finished.
    // NOTE: streaming flush
    // We are buffering here for the inlined data stream because the
    // "shell" stream might be chunkenized again by the underlying stream
    // implementation, e.g. with a specific high-water mark. To ensure it's
    // the safe timing to pipe the data stream, this extra tick is
    // necessary.
    // We don't start reading until we've left the current Task to ensure
    // that it's inserted after flushing the shell. Note that this implementation
    // might get stale if impl details of Fizz change in the future.
    // Start the streaming if it hasn't already been started yet.
    /**
 * This transform stream moves the suffix to the end of the stream, so results
 * like `</body></html><script>...</script>` will be transformed to
 * `<script>...</script></body></html>`.
 */
    // If the whole chunk is the suffix, then don't write anything, it will
    // be written in the flush.
    // Write out the part before the suffix.
    // In the case where the suffix is in the middle of the chunk, we need
    // to split the chunk into two parts.
    // Write out the part after the suffix.
    // Even if we didn't find the suffix, the HTML is not valid if we don't
    // add it, so insert it at the end.
    // We rely on the assumption that chunks will never break across a code unit.
    // This is reasonable because we currently concat all of React's output from a single
    // flush into one chunk before streaming it forward which means the chunk will represent
    // a single coherent utf-8 string. This is not safe to use if we change our streaming to no
    // longer do this large buffered chunk
    // the entire chunk is the closing tags; return without enqueueing anything.
    // We assume these tags will go at together at the end of the document and that
    // they won't appear anywhere else in the document. This is not really a safe assumption
    // but until we revamp our streaming infra this is a performant way to string the tags
    // Peek into the streamed chunk to see if the tags are present.
    // Suffix itself might contain close tags at the end, so we need to split it.
    // If we're generating static HTML and there's an `allReady` promise on the
    // stream, we need to wait for it to resolve before continuing.
    // Buffer everything to avoid flushing too frequently
    // Insert generated tags to head
    // Insert suffix content
    // Insert the inlined data (Flight data, form state, etc.) stream into the HTML
    // Validate the root layout for missing html or body tags
    // Close tags should always be deferred to the end
    // Special head insertions
    // TODO-APP: Insert server side html to end of head in app layout rendering, to avoid
    // hydration errors. Remove this once it's ready to be handled by react itself.
    // Buffer everything to avoid flushing too frequently
    // Insert generated tags to head
    // Buffer everything to avoid flushing too frequently
    // Insert generated tags to head
    // Insert the inlined data (Flight data, form state, etc.) stream into the HTML
    // Close tags should always be deferred to the end
    // Buffer everything to avoid flushing too frequently
    // Insert generated tags to head
    // Insert the inlined data (Flight data, form state, etc.) stream into the HTML
    // Close tags should always be deferred to the end
    //# sourceMappingURL=node-web-streams-helper.js.map
    /* eslint-disable no-redeclare */
    // FIXME: (wyattjoh) this is a temporary solution to allow us to pass data between bundled modules
    // @ts-ignore this can't be typed correctly
    //# sourceMappingURL=request-meta.js.map
    // ',' is a cookie separator if we have later first '=', not ';' or ','
    // currently special character
    // we found cookies separator
    // pos is inside the next cookie, so back up and return it.
    // in param ',' or param separator ';',
    // we continue from that comma
    // We may have gotten a comma joined string of cookies, or multiple
    // set-cookie headers. We need to merge them into one header array
    // to represent all the cookies.
    //nextjs.org/docs/messages/middleware-relative-urls`, {
    //# sourceMappingURL=utils.js.map
    // remove port if present
    //# sourceMappingURL=detect-domain-locale.js.map
    /**
 * Removes the trailing slash for a given route or page path. Preserves the
 * root page. Examples:
 *   - `/foo/bar/` -> `/foo/bar`
 *   - `/foo/bar` -> `/foo/bar`
 *   - `/` -> `/`
 */
    //# sourceMappingURL=remove-trailing-slash.js.map
    /**
 * Given a path this function will find the pathname, query and hash and return
 * them. This is useful to parse full paths on the client side.
 * @param path A path to parse e.g. /foo/bar?id=1#hash
 */
    //# sourceMappingURL=parse-path.js.map
    //# sourceMappingURL=add-path-prefix.js.map
    //# sourceMappingURL=add-path-suffix.js.map
    //# sourceMappingURL=path-has-prefix.js.map
    // If no locale was given or the locale is the default locale, we don't need
    // to prefix the path.
    // If the path is an API path or the path already has the locale prefix, we
    // don't need to prefix the path.
    // Add the locale prefix to the path.
    //# sourceMappingURL=add-locale.js.map
    //# sourceMappingURL=format-next-pathname-info.js.map
    /**
 * Takes an object with a hostname property (like a parsed URL) and some
 * headers that may contain Host and returns the preferred hostname.
 * @param parsed An object containing a hostname property.
 * @param headers A dictionary with headers containing a `host`.
 */
    // Get the hostname from the headers if it exists, otherwise use the parsed
    // hostname.
    //# sourceMappingURL=get-hostname.js.map
    /**
 * For a pathname that may include a locale from a list of locales, it
 * removes the locale from the pathname returning it alongside with the
 * detected locale.
 *
 * @param pathname A pathname that may include a locale.
 * @param locales A list of locales.
 * @returns The detected locale and pathname without locale
 */
    // first item will be empty string from splitting at first char
    //# sourceMappingURL=normalize-locale-path.js.map
    // If the path doesn't start with the prefix we can return it as is. This
    // protects us from situations where the prefix is a substring of the path
    // prefix such as:
    //
    // For prefix: /blog
    //
    //   /blog -> true
    //   /blog/ -> true
    //   /blog/1 -> true
    //   /blogging -> false
    //   /blogging/ -> false
    //   /blogging/1 -> false
    // Remove the prefix from the path via slicing.
    // If the path without the prefix starts with a `/` we can return it as is.
    // If the path without the prefix doesn't start with a `/` we need to add it
    // back to the path to make sure it's a valid path.
    //# sourceMappingURL=remove-path-prefix.js.map
    //, '').replace(/\.json$/, '').split('/');
    // update pathname with normalized if enabled although
    // we use normalized to populate locale info still
    // If provided, use the locale route normalizer to detect the locale instead
    // of the function below.
    //# sourceMappingURL=get-next-pathname-info.js.map
    //${this.host}${pathname}${search}${this.hash}`;
    //# sourceMappingURL=next-url.js.map
    //nextjs.org/docs/messages/middleware-new-signature
    //nextjs.org/docs/messages/middleware-request-page
    //nextjs.org/docs/messages/middleware-parse-user-agent
    //# sourceMappingURL=error.js.map
    // src/index.ts
    // src/serialize.ts
    /* @__PURE__ */
    // src/request-cookies.ts
    /** @internal */
    /* @__PURE__ */
    /**
   * The amount of cookies received from the client
   */
    /**
   * Delete the cookies matching the passed name or names in the request.
   */
    /**
   * Delete all the cookies in the cookies in the request.
   */
    /**
   * Format the cookies in the request as a string for logging
   */
    // src/response-cookies.ts
    /** @internal */
    /* @__PURE__ */
    /**
   * {@link https://wicg.github.io/cookie-store/#CookieStore-get CookieStore#get} without the Promise.
   */
    /**
   * {@link https://wicg.github.io/cookie-store/#CookieStore-getAll CookieStore#getAll} without the Promise.
   */
    /**
   * {@link https://wicg.github.io/cookie-store/#CookieStore-set CookieStore#set} without the Promise.
   */
    /**
   * {@link https://wicg.github.io/cookie-store/#CookieStore-delete CookieStore#delete} without the Promise.
   */
    /* @__PURE__ */
    // Annotate the CommonJS export names for ESM import in node:
    //# sourceMappingURL=cookies.js.map
    // rest of props come from Request
    /**
   * @deprecated
   * `page` has been deprecated in favour of `URLPattern`.
   * Read more: https://nextjs.org/docs/messages/middleware-request-page
   */
    /**
   * @deprecated
   * `ua` has been removed in favour of \`userAgent\` function.
   * Read more: https://nextjs.org/docs/messages/middleware-parse-user-agent
   */
    //# sourceMappingURL=request.js.map
    /**
 * This file provides some helpers that should be used in conjunction with
 * explicit environment checks. When combined with the environment checks, it
 * will ensure that the correct typings are used as well as enable code
 * elimination.
 */
    /**
 * Type guard to determine if a request is a WebNextRequest. This does not
 * actually check the type of the request, but rather the runtime environment.
 * It's expected that when the runtime environment is the edge runtime, that any
 * base request is a WebNextRequest.
 */
    //# sourceMappingURL=helpers.js.map
    // If `finish` fires first, then `res.end()` has been called and the close is
    // just us finishing the stream on our side. If `close` fires first, then we
    // know the client disconnected before we finished.
    // environment variable check provides dead code elimination.
    // environment variable check provides dead code elimination.
    // HEAD and GET requests can not have a body.
    // @ts-expect-error - this is handled by undici, when streams/web land use it instead
    // Grab the full URL from the request metadata.
    // Because the URL construction relies on the fact that the URL provided
    // is absolute, we need to provide a base URL. We can't use the request
    // URL because it's relative, so we use a dummy URL instead.
    //n');
    // @ts-expect-error - see https://github.com/whatwg/fetch/pull/1457
    // geo
    // ip
    // nextConfig
    // body can not be passed if request was aborted
    // or we get a Request body was disturbed error
    // HEAD and GET requests can not have a body.
    // @ts-expect-error - see https://github.com/whatwg/fetch/pull/1457
    // geo
    // ip
    // nextConfig
    // body can not be passed if request was aborted
    // or we get a Request body was disturbed error
    //# sourceMappingURL=next-request.js.map
    // Combined load times for loading client components
    //# sourceMappingURL=client-component-renderer-logger.js.map
    // Create a promise that will resolve once the response has drained. See
    // https://nodejs.org/api/stream.html#stream_event_drain
    // If the finish event fires, it means we shouldn't block and wait for the
    // drain event.
    // Create a promise that will resolve once the response has finished. See
    // https://nodejs.org/api/http.html#event-finish_1
    // Create a writable stream that will write to the response.
    // You'd think we'd want to use `start` instead of placing this in `write`
    // but this ensures that we don't actually flush the headers until we've
    // started writing chunks.
    // Added by the `compression` middleware, this is a function that will
    // flush the partially-compressed response to the client.
    // If the write returns false, it means there's some backpressure, so
    // wait until it's streamed before continuing.
    // Reset the drained promise so that we can wait for the next drain event.
    // if a waitUntil promise was passed, wait for it to resolve before
    // ending the response.
    // If the response has already errored, then just return now.
    // Create a new AbortController so that we can abort the readable if the
    // client disconnects.
    // If this isn't related to an abort error, re-throw it.
    //# sourceMappingURL=pipe-readable.js.map
    /**
   * Creates a new RenderResult instance from a static response.
   *
   * @param value the static response value
   * @returns a new RenderResult instance
   */
    /**
   * Returns true if the response is null. It can be null if the response was
   * not found or was already sent.
   */
    /**
   * Returns false if the response is a string. It can be a string if the page
   * was prerendered. If it's not, then it was generated dynamically.
   */
    /**
   * Returns the response if it is a stream, or throws an error if it is a
   * string.
   */
    // If the response is an array of streams, then chain them together.
    /**
   * Chains a new stream to the response. This will convert the response to an
   * array of streams if it is not already one and will add the new stream to
   * the end. When this response is piped, all of the streams will be piped
   * one after the other.
   *
   * @param readable The new stream to chain
   */
    // If the response is not an array of streams already, make it one.
    // Add the new stream to the array.
    // Update the response.
    /**
   * Pipes the response to a writable stream. This will close/cancel the
   * writable stream if an error is encountered. If this doesn't throw, then
   * the writable stream will be closed or aborted.
   *
   * @param writable Writable stream to pipe the response to
   */
    // We want to close the writable stream ourselves so that we can wait
    // for the waitUntil promise to resolve before closing it. If an error
    // is encountered, we'll abort the writable stream if we swallowed the
    // error.
    // If there is a waitUntil promise, wait for it to resolve before
    // closing the writable stream.
    // Close the writable stream.
    // If this is an abort error, we should abort the writable stream (as we
    // took ownership of it when we started piping). We don't need to re-throw
    // because we handled the error.
    // Abort the writable stream if an error is encountered.
    // We're not aborting the writer here as when this method throws it's not
    // clear as to how so the caller should assume it's their responsibility
    // to clean up the writer.
    /**
   * Pipes the response to a node response. This will close/cancel the node
   * response if an error is encountered.
   *
   * @param res
   */
    //# sourceMappingURL=render-result.js.map
    /*#__PURE__*/
    /**
   * `PAGES` represents all the React pages that are under `pages/`.
   */
    /**
   * `PAGES_API` represents all the API routes under `pages/api/`.
   */
    /**
   * `APP_PAGE` represents all the React pages that are under `app/` with the
   * filename of `page.{j,t}s{,x}`.
   */
    /**
   * `APP_ROUTE` represents all the API routes and metadata routes that are under `app/` with the
   * filename of `route.{j,t}s{,x}`.
   */
    /**
   * `IMAGE` represents all the images that are generated by `next/image`.
   */
    //# sourceMappingURL=route-kind.js.map
    //# sourceMappingURL=utils.js.map
    // Ensure on-demand revalidate doesn't block normal requests, it should be
    // safe to run an on-demand revalidate for the same key as a normal request.
    // We wait to do any async work until after we've added our promise to
    // `pendingResponses` to ensure that any any other calls will reuse the
    // same promise until we've fully finished our work.
    // this is a hack to avoid Webpack knowing this is equal to this.minimalMode
    // because we replace this.minimalMode to true in production bundles.
    // If there is no key for the cache, we can't possibly look this up in the
    // cache so just return the result of the response generator.
    // We keep the previous cache entry around to leverage when the
    // incremental cache is disabled in minimal mode.
    // Coerce the kindHint into a given kind for the incremental cache.
    // The cached value is still valid, so we don't need
    // to update it yet.
    // If the cache entry couldn't be generated, we don't want to cache
    // the result.
    // Unset the previous cache item if it was set.
    // Unset the previous cache item if it was set.
    // For on-demand revalidate wait to resolve until cache is set.
    // Otherwise resolve now.
    // We want to persist the result only if it has a revalidate value
    // defined.
    // When a getStaticProps path is erroring we automatically re-set the
    // existing cache under a new expiration to prevent non-stop retrying.
    // While revalidating in the background we can't reject as we already
    // resolved the cache entry so log the error here.
    // We haven't resolved yet, so let's throw to indicate an error.
    //# sourceMappingURL=index.js.map
    // handle client component error from attempting to check revalidate value
    // If the static generation store is not available, we can't track the fetch
    // Create the patched fetch function. We don't set the type here, as it's
    // verified as the return value of this function.
    // Error caused by malformed URL should be handled by native fetch
    // Do create a new span trace for internal fetches in the
    // non-verbose mode.
    // We don't track fetch metrics for internal fetches
    // so it's not critical that we have a start time, as it won't be recorded.
    // This is to workaround a flaky issue where performance APIs might
    // not be available and will require follow-up investigation.
    // During static generation we track cache reads so we can reason about when they fill
    // If this is an internal fetch, we should not do any special treatment.
    // If the workStore is not available, we can't do any
    // special treatment of fetch, therefore fallback to the original
    // fetch implementation.
    // We should also fallback to the original fetch implementation if we
    // are in draft mode, it does not constitute a static generation.
    // If request input is present but init is not, retrieve from input first.
    // RequestInit doesn't keep extra fields e.g. next so it's
    // only available if init is used separate
    // Collect tags onto parent caches or parent prerenders.
    // Inside unstable-cache we treat it the same as force-no-store on the
    // page.
    // If the revalidate value conflicts with the cache value, we should warn the user and unset the conflicting values.
    // revalidate: >0 or revalidate: false and cache: no-store
    // the fetch isn't explicitly caching and the segment level cache config signals not to cache
    // note: `pageFetchCacheMode` is also set by being in an unstable_cache context.
    // If no explicit fetch cache mode is set, but dynamic = `force-dynamic` is set,
    // we shouldn't consider caching the fetch. This is because the `dynamic` cache
    // is considered a "top-level" cache mode, whereas something like `fetchCache` is more
    // fine-grained. Top-level modes are responsible for setting reasonable defaults for the
    // other configurations.
    // which will signal the cache to not revalidate
    // we shouldn't set the revalidate to 0 as it's overridden
    // by the cache context
    /**
         * We automatically disable fetch caching under the following conditions:
         * - Fetch cache configs are not set. Specifically:
         *    - A page fetch cache mode is not set (export const fetchCache=...)
         *    - A fetch cache mode is not set in the fetch call (fetch(url, { cache: ... }))
         *      or the fetch cache mode is set to 'default'
         *    - A fetch revalidate value is not set in the fetch call (fetch(url, { revalidate: ... }))
         * - OR the fetch comes after a configuration that triggered dynamic rendering (e.g., reading cookies())
         *   and the fetch was considered uncacheable (e.g., POST method or has authorization headers)
         */
    // eslint-disable-next-line eqeqeq
    // when considering whether to opt into the default "no-cache" fetch semantics,
    // a "default" cache config should be treated the same as no cache config
    // eslint-disable-next-line eqeqeq
    // eslint-disable-next-line eqeqeq
    // we disable automatic no caching behavior during build time SSG so that we can still
    // leverage the fetch cache between SSG workers
    // If we have no cache config, and we're in Dynamic I/O prerendering, it'll be a dynamic call.
    // We don't have to issue that dynamic call.
    // TODO: should we consider this case an invariant?
    // `revalidate: 0` values
    // we don't consider autoNoCache to switch to dynamic for ISR
    // If the revalidate value isn't currently set or the value is less
    // than the current revalidate value, we should update the revalidate
    // value.
    // If we were setting the revalidate value to 0, we should try to
    // postpone instead first.
    // We only want to set the revalidate store's revalidate time if it
    // was explicitly set for the fetch call, i.e. currentFetchRevalidate.
    // don't pass through signal when revalidating
    // @ts-expect-error custom fields
    // add metadata to init without editing the original
    // We are prerendering at build time or revalidate time with dynamicIO so we need to
    // buffer the response so we can guarantee it can be read in a microtask
    // We can skip checking the serverComponentsHmrCache because we aren't in
    // dev mode.
    // We return a new Response to the caller.
    // We're cloning the response using this utility because there
    // exists a bug in the undici library around response cloning.
    // See the following pull request for more details:
    // https://github.com/vercel/next.js/pull/73274
    // We are dynamically rendering including dev mode. We want to return
    // the response to the caller as soon as possible because it might stream
    // over a very long time.
    // we had response that we determined shouldn't be cached so we return it
    // and don't cache it. This also needs to unlock the cache lock we acquired.
    // We sometimes use the cache to dedupe fetches that do not specify a cache configuration
    // In these cases we want to make sure we still exclude them from prerenders if dynamicIO is on
    // so we introduce an artificial Task boundary here.
    // in dev, incremental cache response will be null in case the browser adds `cache-control: no-cache` in the request headers
    // when stale and is revalidating we wait for fresh data
    // so the revalidated entry has the updated data
    // Attach the empty catch here so we don't get a "unhandled
    // promise rejection" warning.
    // Delete `cache` property as Cloudflare Workers will throw an error
    // If enabled, we should bail out of static generation.
    // If enabled, we should bail out of static generation.
    // if we are revalidating the whole page via time or on-demand and
    // the fetch cache entry is stale we should still de-dupe the
    // origin hit if it's a cache-able entry
    // We used to just resolve the Response and clone it however for
    // static generation with dynamicIO we need the response to be able to
    // be resolved in a microtask and cloning the response will never have
    // a body that can resolve in a microtask in node (as observed through
    // experimentation) So instead we await the body and then when it is
    // available we construct manually cloned Response objects with the
    // body as an ArrayBuffer. This will be resolvable in a microtask
    // making it compatible with dynamicIO.
    // We're cloning the response using this utility because there
    // exists a bug in the undici library around response cloning.
    // See the following pull request for more details:
    // https://github.com/vercel/next.js/pull/73274
    // If the pending revalidate is not present in the store, then
    // we have nothing to delete.
    // Attach the empty catch here so we don't get a "unhandled promise
    // rejection" warning
    // Attach the necessary properties to the patched fetch function.
    // We don't use this to determine if the fetch function has been patched,
    // but for external consumers to determine if the fetch function has been
    // patched.
    // If we've already patched fetch, we should not patch it again.
    // Grab the original fetch function. We'll attach this so we can use it in
    // the patched fetch function.
    // Set the global fetch to the patched fetch.
    //# sourceMappingURL=patch-fetch.js.map
    //# sourceMappingURL=react-dom.js.map
    /*

Files in the rsc directory are meant to be packaged as part of the RSC graph using next-app-loader.

*/
    //# sourceMappingURL=preloads.js.map
    /*

Files in the rsc directory are meant to be packaged as part of the RSC graph using next-app-loader.

*/
    // When postpone is available in canary React we can switch to importing it directly
    //# sourceMappingURL=postpone.js.map
    /*

Files in the rsc directory are meant to be packaged as part of the RSC graph using next-app-loader.

*/
    //# sourceMappingURL=taint.js.map
    /**
 * @license React
 * react-server-dom-turbopack-client.edge.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    /* This module is a proxy to a Server Action. Turn on Source Maps to see the server source. */
    /* This module is a proxy to a Server Action. Turn on Source Maps to see the server source. */
    //" + filename);
    //# sourceURL=rsc://React/" + encodeURIComponent(environmentName) + "/" + filename + "?s" + fakeServerFunctionIdx++, col += "\n//# sourceMappingURL=" + sourceMap) : filename && (col += "\n//# sourceURL=" + filename);
    /* This module was rendered by a Server Component. Turn on Source Maps to see the server source. */
    /* This module was rendered by a Server Component. Turn on Source Maps to see the server source. */
    //" + filename);
    //# sourceURL=rsc://React/" + encodeURIComponent(environmentName) + "/" + encodeURI(filename) + "?" + fakeFunctionIdx++, col += "\n//# sourceMappingURL=" + sourceMap) : col = filename ? col + ("\n//# sourceURL=" + encodeURI(filename)) : col + "\n//# sourceURL=<anonymous>";
    // Note: This file is JS because it's used by the taskfile-swc.js file, which is JS.
    // Keep file changes in sync with the corresponding `.d.ts` files.
    /**
 * These are the browser versions that support all of the following:
 * static import: https://caniuse.com/es6-module
 * dynamic import: https://caniuse.com/es6-module-dynamic-import
 * import.meta: https://caniuse.com/mdn-javascript_operators_import_meta
 */
    //# sourceMappingURL=modern-browserslist-target.js.map
    //# sourceMappingURL=constants.js.map
    //# sourceMappingURL=constants.js.map
    // eslint-disable-next-line import/no-extraneous-dependencies
    // eslint-disable-next-line import/no-extraneous-dependencies
    // Traverse the router tree and generate a prefetch response for each segment.
    // A mutable map to collect the results as we traverse the route tree.
    // Before we start, warm up the module cache by decoding the page data once.
    // Then we can assume that any remaining async tasks that occur the next time
    // are due to hanging promises caused by dynamic data access. Note we only
    // have to do this once per page, not per individual segment.
    //
    // Create an abort controller that we'll use to stop the stream.
    // Since all we're doing is decoding and re-encoding a cached prerender, if
    // serializing the stream takes longer than a microtask, it must because of
    // hanging promises caused by dynamic data.
    // Generate a stream for the route tree prefetch. While we're walking the
    // tree, we'll also spawn additional tasks to generate the segment prefetches.
    // The promises for these tasks are pushed to a mutable array that we will
    // await once the route tree is fully rendered.
    // we need to use a component so that when we decode the original stream
    // inside of it, the side effects are transferred to the new stream.
    // @ts-expect-error
    /*#__PURE__*/
    // Ignore any errors. These would have already been reported when
    // we created the full page data.
    // Write the route tree to a special `/_tree` segment.
    // Now that we've finished rendering the route tree, all the segment tasks
    // should have been spawned. Await them in parallel and write the segment
    // prefetches to the result map.
    // We're currently rendering a Flight response for the route tree prefetch.
    // Inside this component, decode the Flight stream for the whole page. This is
    // a hack to transfer the side effects from the original Flight stream (e.g.
    // Float preloads) onto the Flight stream for the tree prefetch.
    // TODO: React needs a better way to do this. Needed for Server Actions, too.
    // FlightDataPath is an unsound type, hence the additional checks.
    // Compute the route metadata tree by traversing the FlightRouterState. As we
    // walk the tree, we will also spawn a task to produce a prefetch response for
    // each segment.
    // Notify the abort controller that we're done processing the route tree.
    // Anything async that happens after this point must be due to hanging
    // promises in the original stream.
    // Render the route tree to a special `/_tree` segment.
    // Metadata about the segment. Sent as part of the tree prefetch. Null if
    // there are no children.
    // Create an access token for each child slot.
    // Spawn a task to write the segment data to a new Flight stream.
    // current task to escape the current rendering context.
    // This segment does not have any seed data. Skip generating a prefetch
    // response for it. We'll still include it in the route tree, though.
    // TODO: We should encode in the route tree whether a segment is missing
    // so we don't attempt to fetch it for no reason. As of now this shouldn't
    // ever happen in practice, though.
    // Metadata about the segment. Sent to the client as part of the
    // tree prefetch.
    // Render the segment data to a stream.
    // In the future, this is where we can include additional metadata, like the
    // stale time and cache tags.
    // Since all we're doing is decoding and re-encoding a cached prerender, if
    // it takes longer than a microtask, it must because of hanging promises
    // caused by dynamic data. Abort the stream at the end of the current task.
    // Ignore any errors. These would have already been reported when
    // we created the full page data.
    // Add the buffer to the result map.
    // The access token is appended to the end of the segment name. To request
    // a segment, the client sends a header like:
    //
    //   Next-Router-Segment-Prefetch: /path/to/segment.accesstoken
    //
    // The segment path is provided by the tree prefetch, and the access
    // token is provided in the parent layout's data.
    // We can determine if a segment contains only partial data if it takes longer
    // than a task to encode, because dynamic data is encoded as an infinite
    // promise. We must do this in a separate Flight prerender from the one that
    // actually generates the prefetch stream because we need to include
    // `isPartial` in the stream itself.
    // If we haven't yet finished the outer task, then it must be because we
    // accessed dynamic data.
    // TODO: Consider updating or unifying this encoding logic for segments with
    // createRouterCacheKey on the client, perhaps by including it as part of
    // the FlightRouterState. Theoretically the client should never have to do its
    // own encoding of segment keys; it can pass back whatever the server gave it.
    // Encode a child segment and its corresponding parallel route key to a
    // filesystem-safe pathname. The format is internal-only and can be somewhat
    // arbitrary as long as there are no collisions, because these will be used
    // as filenames during build and in the incremental cache. They will also
    // be sent by the client to request the corresponding segment, but they
    // do not need to be decodable. The server will merely look for a matching
    // file in the cache.
    //
    // For ease of debugging, the format looks roughly similar to the App Router
    // convention for defining routes in the source, but again the exact format is
    // not important as long as it's consistent between the client and server and
    // meets the above requirements.
    //
    // TODO: If the segment did not read from params, then we can omit the
    // params from the cache key. Need to track this during the prerender somehow.
    // Parameterized segments.
    // Omit the parallel route key for children, since this is the most
    // common case. Saves some bytes.
    // Define a regex pattern to match the most common characters found in a route
    // param. It excludes anything that might not be cross-platform filesystem
    // compatible, like |. It does not need to be precise because the fallback is to
    // just base64url-encode the whole parameter, which is fine; we just don't do it
    // by default for compactness, and for easier debugging.
    // TODO: FlightRouterState encodes Not Found routes as "/_not-found". But
    // params typically don't include the leading slash. We should use a
    // different encoding to avoid this special case.
    // If there are any unsafe characters, base64url-encode the entire segment.
    // We also add a $ prefix so it doesn't collide with the simple case.
    // Create an access token that the client passes when requesting a segment.
    // The token is sent to the client as part of the parent layout's data.
    //
    // The token is hash of the parent segment path and the parallel route key. A
    // subtle detail here is that it does *not* include the value of the segment
    // itself — the token grants access to the parallel route slot, not the
    // particular segment that is rendered there.
    //
    // TODO: Because this only affects prefetches, this doesn't need to be secure.
    // It's just for obfuscation. But eventually we will use this technique when
    // performing dynamic navigations, to support auth checks in a layout that
    // conditionally renders its slots. At that point we'll need to add a salt.
    // Encode the inputs as Uint8Array
    // Use the Web Crypto API to generate a SHA-256 hash.
    // Convert the ArrayBuffer to a hex string
    // When PPR is enabled, prefetch streams may contain references that never
    // resolve, because that's how we encode dynamic data access. In the decoded
    // object returned by the Flight client, these are reified into hanging
    // promises that suspend during render, which is effectively what we want.
    // The UI resolves when it switches to the dynamic data stream
    // (via useDeferredValue(dynamic, static)).
    //
    // However, the Flight implementation currently errors if the server closes
    // the response before all the references are resolved. As a cheat to work
    // around this, we wrap the original stream in a new stream that never closes,
    // and therefore doesn't error.
    // Pass to the target stream and keep consuming the Flight response
    // from the server.
    // The server stream has closed. Exit, but intentionally do not close
    // the target stream.
    //# sourceMappingURL=collect-segment-data.js.map
    /*#__PURE__*/
    /*
 * If there's special convention like (...) or @ in the page path,
 * Give it a unique hash suffix to avoid conflicts
 *
 * e.g.
 * /opengraph-image -> /opengraph-image
 * /(post)/opengraph-image.tsx -> /opengraph-image-[0-9a-z]{6}
 *
 * Sitemap is an exception, it should not have a suffix.
 * Each sitemap contains all the urls of sub routes, we don't have the case of duplicates `/(group)/sitemap.[ext]` and `/sitemap.[ext]` since they should be the same.
 * Hence we always normalize the urls for sitemap and do not append hash suffix, and ensure user-land only contains one sitemap per pathname.
 *
 * /sitemap -> /sitemap
 * /(post)/sitemap -> /sitemap
 */
    // Remove the last segment and get the parent pathname
    // e.g. /parent/a/b/c -> /parent/a/b
    // e.g. /parent/opengraph-image -> /parent
    // Only apply suffix to metadata routes except for sitemaps
    // Calculate the hash suffix based on the parent path
    // Check if there's any special characters in the parent pathname.
    // Hash the parent path to get a unique suffix
    // Support both /<metadata-route.ext> and custom routes /<metadata-route>/route.ts.
    // If it's a metadata file route, we need to append /[id]/route to the page.
    //# sourceMappingURL=get-metadata-route.js.map
    //# sourceMappingURL=module.compiled.js.map
    // eslint-disable-next-line import/no-extraneous-dependencies
    // patchFetch makes use of APIs such as `React.unstable_postpone` which are only available
    // in the experimental channel of React, so export it from here so that it comes from the bundled runtime
    //# sourceMappingURL=entry-base.js.map
    //# sourceMappingURL=node_modules_next_dist_97f32f._.js.map

File: ./frontend/.next/server/chunks/ssr/_b199ce._.js
  JavaScript Functions:
    - from
    - from
  Comments:
    // We inject the tree and pages here so that we can use them in the route
    // module.
    //", props.params, "favicon.ico") + `?${__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$225b$project$5d2f$src$2f$app$2f$favicon$2e$ico__$5b$app$2d$rsc$5d$__$28$static$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29$__["default"].src.split("/").splice(-1)[0]}`,
    // The following aren't used in production.
    //# sourceMappingURL=app-page.js.map
    //# sourceMappingURL=_b199ce._.js.map

File: ./frontend/.next/server/chunks/ssr/node_modules_36e229._.js
  JavaScript Functions:
    - _interop_require_default
    - hasFallbackRouteParams
    - useUntrackedPathname
    - _export
    - isHTTPAccessFallbackError
    - getAccessFallbackHTTPStatus
    - getAccessFallbackErrorTypeByStatus
    - _export
    - isRedirectError
    - isNextRouterError
    - createHrefFromUrl
    - _export
    - handleHardNavError
    - useNavFailureHandler
    - _export
    - crashes
    - HandleISRError
    - reset
    - GlobalError
    - ErrorBoundary
    - useServerActionDispatcher
    - serverActionDispatcher
    - callServer
    - findSourceMapURL
    - djb2Hash
    - hexHash
    - getFlightDataPartsFromPath
    - getNextFlightSegmentPath
    - normalizeFlightData
    - setAppBuildId
    - getAppBuildId
    - urlToUrlWithoutFlightMarker
    - doMpaNavigation
    - fetchServerResponse
    - is
    - createFetch
    - createFromNextReadableStream
    - createUnclosingPrefetchStream
    - hasFallbackRouteParams
    - useUntrackedPathname
    - isHTTPAccessFallbackError
    - getAccessFallbackHTTPStatus
    - getAccessFallbackErrorTypeByStatus
    - isRedirectError
    - isNextRouterError
    - createHrefFromUrl
    - handleHardNavError
    - useNavFailureHandler
    - crashes
    - HandleISRError
    - reset
    - GlobalError
    - ErrorBoundary
    - ensures
    - ensureLeadingSlash
    - isGroupSegment
    - isParallelRouteSegment
    - addSearchParamsIfPageSegment
    - normalizeAppPath
    - normalizeRscURL
    - isInterceptionRouteAppPath
    - extractInterceptionRouteInformation
    - getSegmentParam
    - matchSegment
    - canSegmentBeOverridden
    - with
    - finishes
    - handleSmoothScroll
    - getSegmentValue
    - getRedirectError
    - redirect
    - permanentRedirect
    - getURLFromRedirectError
    - getRedirectTypeFromError
    - getRedirectStatusCodeFromError
    - allows
    - notFound
    - allows
    - forbidden
    - allows
    - unauthorized
    - isDynamicServerError
    - isBailoutToCSRError
    - isStaticGenBailoutError
    - constructs
    - makeHangingPromise
    - ignoreReject
    - createDynamicTrackingState
    - createDynamicValidationState
    - getFirstDynamicReason
    - markCurrentScopeAsDynamic
    - trackFallbackParamAccessed
    - throwToInterruptStaticGeneration
    - trackDynamicDataInDynamicRender
    - abortOnSynchronousDynamicDataAccess
    - abortOnSynchronousPlatformIOAccess
    - trackSynchronousPlatformIOAccessInDev
    - abortAndThrowOnSynchronousRequestDataAccess
    - Postpone
    - postponeWithTracking
    - createPostponeReason
    - isDynamicPostpone
    - isDynamicPostponeReason
    - createPrerenderInterruptedError
    - isPrerenderInterruptedError
    - accessedDynamicData
    - consumeDynamicAccess
    - formatDynamicAPIAccesses
    - assertPostpone
    - createPostponedAbortSignal
    - annotateDynamicAccess
    - useDynamicRouteParams
    - trackAllowedDynamicAccess
    - createErrorWithComponentStack
    - throwIfDisallowedDynamic
    - isDynamicUsageError
    - isPostpone
    - unstable_rethrow
    - bailoutToClientRendering
    - useSearchParams
    - readonlySearchParams
    - usePathname
    - useRouter
    - useParams
    - getSelectedLayoutSegmentPath
    - useSelectedLayoutSegments
    - useSelectedLayoutSegment
    - HandleRedirect
    - RedirectBoundary
    - warnOnce
    - warnOnce
    - HTTPAccessFallbackBoundary
    - createRouterCacheKey
    - hasInterceptionRouteInCurrentTree
    - walkAddRefetch
    - findDOMNode
    - shouldSkipElement
    - topOfElementInViewport
    - getHashFragmentDomNode
    - handlePotentialScroll
    - ScrollAndFocusHandler
    - InnerLayoutRouter
    - LoadingBoundary
    - OuterLayoutRouter
    - RenderFromTemplateContext
    - describeStringPropertyAccess
    - describeHasCheckingStringProperty
    - throwWithStaticGenerationBailoutError
    - throwWithStaticGenerationBailoutErrorWithDynamicError
    - isRequestAPICallableInsideAfter
    - createRenderSearchParamsFromClient
    - makeUntrackedExoticSearchParamsWithDevWarnings
    - makeUntrackedExoticSearchParams
    - noop
    - warnForSyncAccess
    - warnForSyncSpread
    - createRenderParamsFromClient
    - makeUntrackedExoticParams
    - makeDynamicallyTrackedExoticParamsWithDevWarnings
    - noop
    - warnForSyncAccess
    - warnForEnumeration
    - describeListOfPropertyNames
    - createDedupedByCallsiteServerErrorLoggerDev
    - logDedupedError
    - to
    - to
    - scheduleOnNextTick
    - scheduleImmediate
    - atLeastOneTask
    - waitAtLeastOneReactRenderTask
    - createSearchParamsFromClient
    - createServerSearchParamsForServerPage
    - createPrerenderSearchParamsForClientPage
    - createPrerenderSearchParams
    - createRenderSearchParams
    - makeAbortingExoticSearchParams
    - on
    - makeErroringExoticSearchParams
    - on
    - makeUntrackedExoticSearchParams
    - makeDynamicallyTrackedExoticSearchParamsWithDevWarnings
    - syncIODev
    - noop
    - createSearchAccessError
    - createIncompleteEnumerationError
    - describeListOfPropertyNames
    - createParamsFromClient
    - createServerParamsForRoute
    - createServerParamsForServerSegment
    - createPrerenderParamsForClientSegment
    - createPrerenderParams
    - createRenderParams
    - makeAbortingExoticParams
    - makeErroringExoticParams
    - makeUntrackedExoticParams
    - makeDynamicallyTrackedExoticParamsWithDevWarnings
    - syncIODev
    - noop
    - createParamsAccessError
    - createIncompleteEnumerationError
    - describeListOfPropertyNames
    - ClientPageRoot
    - ClientSegmentRoot
  Comments:
    //# sourceMappingURL=module.compiled.js.map
    //# sourceMappingURL=react-jsx-runtime.js.map
    //# sourceMappingURL=react.js.map
    //# sourceMappingURL=hooks-client-context.js.map
    /**
 * This checks to see if the current render has any unknown route parameters.
 * It's used to trigger a different render path in the error boundary.
 *
 * @returns true if there are any unknown route parameters, false otherwise
 */
    // AsyncLocalStorage should not be included in the client bundle.
    // If there are any unknown route parameters we would typically throw
    // an error, but this internal method allows us to return a null value instead
    // for components that do not propagate the pathname to the static shell (like
    // the error boundary).
    // This shouldn't cause any issues related to conditional rendering because
    // the environment will be consistent for the render.
    // eslint-disable-next-line react-hooks/rules-of-hooks
    //# sourceMappingURL=navigation-untracked.js.map
    //# sourceMappingURL=http-access-fallback.js.map
    /*#__PURE__*/
    //# sourceMappingURL=redirect-status-code.js.map
    /*#__PURE__*/
    //# sourceMappingURL=redirect-error.js.map
    //# sourceMappingURL=is-next-router-error.js.map
    //# sourceMappingURL=create-href-from-url.js.map
    //# sourceMappingURL=nav-failure-handler.js.map
    // Exported so that the import signature in the loaders can be identical to user
    // supplied custom global error signatures.
    /*#__PURE__*/
    // https://github.com/sindresorhus/modern-normalize/blob/main/modern-normalize.css#L38-L52
    // if we are revalidating we want to re-throw the error so the
    // function crashes so we can maintain our previous cache
    // instead of caching the error page
    // Re-throw if an expected internal Next.js router error occurs
    // this means it should be handled by a different boundary (such as a NotFound boundary in a parent segment)
    // if we encounter an error while
    // a navigation is pending we shouldn't render
    // the error boundary and instead should fallback
    // to a hard navigation to attempt recovering
    /**
     * Handles reset of the error boundary when a navigation happens.
     * Ensures the error boundary does not stay enabled when navigating to a new page.
     * Approach of setState in render is safe as it checks the previous pathname and then overrides
     * it as outlined in https://react.dev/reference/react/useState#storing-information-from-previous-renders
     */
    // Explicit type is needed to avoid the generated `.d.ts` having a wide return type that could be specific to the `@types/react` version.
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // When we're rendering the missing params shell, this will return null. This
    // is because we won't be rendering any not found boundaries or error
    // boundaries for the missing params shell. When this runs on the client
    // (where these errors can occur), we will get the correct pathname.
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=error-boundary.js.map
    //# sourceMappingURL=react-dom.js.map
    //# sourceMappingURL=app-router-context.js.map
    //# sourceMappingURL=app-router-headers.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=router-reducer-types.js.map
    //# sourceMappingURL=app-call-server.js.map
    // This is a request for a client chunk. This can only happen when
    // using Turbopack. In this case, since we control how those source
    // maps are generated, we can safely assume that the sourceMappingURL
    // is relative to the filename, with an added `.map` extension. The
    // browser can just request this file, and it gets served through the
    // normal dev server, without the need to route this through
    // the `/__nextjs_source-map` dev middleware.
    //# sourceMappingURL=app-find-source-map-url.js.map
    // http://www.cse.yorku.ca/~oz/hash.html
    // More specifically, 32-bit hash via djbxor
    // (ref: https://gist.github.com/eplawless/52813b1d8ad9af510d85?permalink_comment_id=3367765#gistcomment-3367765)
    // This is due to number type differences between rust for turbopack to js number types,
    // where rust does not have easy way to repreesnt js's 53-bit float number type for the matching
    // overflow behavior. This is more `correct` in terms of having canonical hash across different runtime / implementation
    // as can gaurantee determinstic output from 32bit hash.
    //# sourceMappingURL=hash.js.map
    // TODO: We should only have to export `normalizeFlightData`, however because the initial flight data
    // that gets passed to `createInitialRouterState` doesn't conform to the `FlightDataPath` type (it's missing the root segment)
    // we're currently exporting it so we can use it directly. This should be fixed as part of the unification of
    // the different ways we express `FlightSegmentPath`.
    // tree, seedData, and head are *always* the last three items in the `FlightDataPath`.
    // The `FlightSegmentPath` is everything except the last three items. For a root render, it won't be present.
    // TODO: Unify these two segment path helpers. We are inconsistently pushing an empty segment ("")
    // to the start of the segment path in some places which makes it hard to use solely the segment path.
    // Look for "// TODO-APP: remove ''" in the codebase.
    // if the `FlightDataPath` corresponds with the root, there'll be no segment path,
    // in which case we default to ''.
    // Since `FlightSegmentPath` is a repeated tuple of `Segment` and `ParallelRouteKey`, we slice off two items
    // to get the next segment path.
    // FlightData can be a string when the server didn't respond with a proper flight response,
    // or when a redirect happens, to signal to the client that it needs to perform an MPA navigation.
    //# sourceMappingURL=flight-data-helpers.js.map
    // This gets assigned as a side-effect during app initialization. Because it
    // represents the build used to create the JS bundle, it should never change
    // after being set, so we store it in a global variable.
    //
    // When performing RSC requests, if the incoming data has a different build ID,
    // we perform an MPA navigation/refresh to load the updated build and ensure
    // that the client and server in sync.
    // Starts as an empty string. In practice, because setAppBuildId is called
    // during initialization before hydration starts, this will always get
    // reassigned to the actual build ID before it's ever needed by a navigation.
    // If for some reasons it didn't, due to a bug or race condition, then on
    // navigation the build comparision would fail and trigger an MPA navigation.
    //# sourceMappingURL=app-build-id.js.map
    //# sourceMappingURL=react-server-dom-turbopack-client-edge.js.map
    // @ts-ignore
    // eslint-disable-next-line import/no-extraneous-dependencies
    // import { createFromReadableStream } from 'react-server-dom-webpack/client'
    // Enable flight response
    // Provide the current router state
    /**
   * Three cases:
   * - `prefetchKind` is `undefined`, it means it's a normal navigation, so we want to prefetch the page data fully
   * - `prefetchKind` is `full` - we want to prefetch the whole page so same as above
   * - `prefetchKind` is `auto` - if the page is dynamic, prefetch the page data partially, if static prefetch the page data fully
   */
    // When creating a "temporary" prefetch (the "on-demand" prefetch that gets created on navigation, if one doesn't exist)
    // we send the request with a "high" priority as it's in response to a user interaction that could be blocking a transition.
    // Otherwise, all other prefetches are sent with a "low" priority.
    // We use "auto" for in all other cases to match the existing default, as this function is shared outside of prefetching.
    // If fetch returns something different than flight response handle it like a mpa navigation
    // If the fetch was not 200, we also handle it like a mpa navigation
    // in case the original URL came with a hash, preserve it before redirecting to the new URL
    // We may navigate to a page that requires a different Webpack runtime.
    // In prod, every page will have the same Webpack runtime.
    // In dev, the Webpack runtime is minimal for each page.
    // We need to ensure the Webpack runtime is updated before executing client-side JS of the new page.
    // Handle the `fetch` readable stream that can be unwrapped by `React.use`.
    // If fetch fails handle it like a mpa navigation
    // TODO-APP: Add a test for the case where a CORS request fails, e.g. external url redirect coming from the response.
    // See https://github.com/vercel/next.js/issues/43605#issuecomment-1451617521 for a reproduction.
    // This is used to cache bust CDNs that don't support custom headers. The
    // result is stored in a search param.
    // TODO: Given that we have to use a search param anyway, we might as well
    // _only_ use a search param and not bother with the custom headers.
    // Add unique cache query to avoid caching conflicts on CDN which don't respect the Vary header
    // Backwards compat for older browsers. `same-origin` is the default in modern browsers.
    // When PPR is enabled, prefetch streams may contain references that never
    // resolve, because that's how we encode dynamic data access. In the decoded
    // object returned by the Flight client, these are reified into hanging
    // promises that suspend during render, which is effectively what we want.
    // The UI resolves when it switches to the dynamic data stream
    // (via useDeferredValue(dynamic, static)).
    //
    // However, the Flight implementation currently errors if the server closes
    // the response before all the references are resolved. As a cheat to work
    // around this, we wrap the original stream in a new stream that never closes,
    // and therefore doesn't error.
    // Pass to the target stream and keep consuming the Flight response
    // from the server.
    // The server stream has closed. Exit, but intentionally do not close
    // the target stream.
    //# sourceMappingURL=fetch-server-response.js.map
    /**
 * Create a "Thenable" that does not resolve. This is used to suspend indefinitely when data is not available yet.
 */
    //# sourceMappingURL=unresolved-thenable.js.map
    /**
 * This checks to see if the current render has any unknown route parameters.
 * It's used to trigger a different render path in the error boundary.
 *
 * @returns true if there are any unknown route parameters, false otherwise
 */
    // AsyncLocalStorage should not be included in the client bundle.
    // If there are any unknown route parameters we would typically throw
    // an error, but this internal method allows us to return a null value instead
    // for components that do not propagate the pathname to the static shell (like
    // the error boundary).
    // This shouldn't cause any issues related to conditional rendering because
    // the environment will be consistent for the render.
    // eslint-disable-next-line react-hooks/rules-of-hooks
    //# sourceMappingURL=navigation-untracked.js.map
    //# sourceMappingURL=http-access-fallback.js.map
    /*#__PURE__*/
    //# sourceMappingURL=redirect-status-code.js.map
    /*#__PURE__*/
    //# sourceMappingURL=redirect-error.js.map
    //# sourceMappingURL=is-next-router-error.js.map
    //# sourceMappingURL=create-href-from-url.js.map
    //# sourceMappingURL=nav-failure-handler.js.map
    // https://github.com/sindresorhus/modern-normalize/blob/main/modern-normalize.css#L38-L52
    // if we are revalidating we want to re-throw the error so the
    // function crashes so we can maintain our previous cache
    // instead of caching the error page
    // Re-throw if an expected internal Next.js router error occurs
    // this means it should be handled by a different boundary (such as a NotFound boundary in a parent segment)
    // if we encounter an error while
    // a navigation is pending we shouldn't render
    // the error boundary and instead should fallback
    // to a hard navigation to attempt recovering
    /**
     * Handles reset of the error boundary when a navigation happens.
     * Ensures the error boundary does not stay enabled when navigating to a new page.
     * Approach of setState in render is safe as it checks the previous pathname and then overrides
     * it as outlined in https://react.dev/reference/react/useState#storing-information-from-previous-renders
     */
    // Explicit type is needed to avoid the generated `.d.ts` having a wide return type that could be specific to the `@types/react` version.
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // When we're rendering the missing params shell, this will return null. This
    // is because we won't be rendering any not found boundaries or error
    // boundaries for the missing params shell. When this runs on the client
    // (where these errors can occur), we will get the correct pathname.
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=error-boundary.js.map
    /**
 * For a given page path, this function ensures that there is a leading slash.
 * If there is not a leading slash, one is added, otherwise it is noop.
 */
    //# sourceMappingURL=ensure-leading-slash.js.map
    // Use array[0] for performant purpose
    //# sourceMappingURL=segment.js.map
    // Empty segments are ignored.
    // Groups are ignored.
    // Parallel segments are ignored.
    // The last segment (if it's a leaf) should be ignored.
    //# sourceMappingURL=app-paths.js.map
    // TODO-APP: add more serious validation
    // normalize the path, e.g. /(blog)/feed -> /feed
    // (.) indicates that we should match with sibling routes, so we just need to append the intercepted route to the intercepting route
    // (..) indicates that we should match at one level up, so we need to remove the last segment of the intercepting route
    // (...) will match the route segment in the root directory, so we need to use the root directory to prepend the intercepted route
    // (..)(..) indicates that we should match at two levels up, so we need to remove the last two segments of the intercepting route
    //# sourceMappingURL=interception-routes.js.map
    // if an interception marker is part of the path segment, we need to jump ahead
    // to the relevant portion for param parsing
    // TODO-APP: Optional catchall does not currently work with parallel routes,
    // so for now aren't handling a potential interception marker.
    //# sourceMappingURL=get-segment-param.js.map
    // segment is either Array or string
    // Common case: segment is just a string
    //# sourceMappingURL=match-segments.js.map
    /**
 * Run function with `scroll-behavior: auto` applied to `<html/>`.
 * This css change will be reverted after the function finishes.
 */
    // if only the hash is changed, we don't need to disable smooth scrolling
    // we only care to prevent smooth scrolling when navigating to a new page to avoid jarring UX
    // In Chrome-based browsers we need to force reflow before calling `scrollTo`.
    // Otherwise it will not pickup the change in scrollBehavior
    // More info here: https://github.com/vercel/next.js/issues/40719#issuecomment-1336248042
    //# sourceMappingURL=handle-smooth-scroll.js.map
    //# sourceMappingURL=get-segment-value.js.map
    /** The URL to redirect to */
    /** The URL to redirect to */
    // Slices off the beginning of the digest that contains the code and the
    // separating ';'.
    //# sourceMappingURL=redirect.js.map
    /**
 * This function allows you to render the [not-found.js file](https://nextjs.org/docs/app/api-reference/file-conventions/not-found)
 * within a route segment as well as inject a tag.
 *
 * `notFound()` can be used in
 * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),
 * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and
 * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).
 *
 * - In a Server Component, this will insert a `<meta name="robots" content="noindex" />` meta tag and set the status code to 404.
 * - In a Route Handler or Server Action, it will serve a 404 to the caller.
 *
 * Read more: [Next.js Docs: `notFound`](https://nextjs.org/docs/app/api-reference/functions/not-found)
 */
    // eslint-disable-next-line no-throw-literal
    //# sourceMappingURL=not-found.js.map
    // TODO: Add `forbidden` docs
    /**
 * @experimental
 * This function allows you to render the [forbidden.js file](https://nextjs.org/docs/app/api-reference/file-conventions/forbidden)
 * within a route segment as well as inject a tag.
 *
 * `forbidden()` can be used in
 * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),
 * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and
 * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).
 *
 * Read more: [Next.js Docs: `forbidden`](https://nextjs.org/docs/app/api-reference/functions/forbidden)
 */
    // eslint-disable-next-line no-throw-literal
    //# sourceMappingURL=forbidden.js.map
    // TODO: Add `unauthorized` docs
    /**
 * @experimental
 * This function allows you to render the [unauthorized.js file](https://nextjs.org/docs/app/api-reference/file-conventions/unauthorized)
 * within a route segment as well as inject a tag.
 *
 * `unauthorized()` can be used in
 * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),
 * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and
 * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).
 *
 *
 * Read more: [Next.js Docs: `unauthorized`](https://nextjs.org/docs/app/api-reference/functions/unauthorized)
 */
    // eslint-disable-next-line no-throw-literal
    //# sourceMappingURL=unauthorized.js.map
    //# sourceMappingURL=hooks-server-context.js.map
    // This has to be a shared module which is shared between client component error boundary and dynamic component
    //# sourceMappingURL=bailout-to-csr.js.map
    //# sourceMappingURL=static-generation-bailout.js.map
    /**
 * This function constructs a promise that will never resolve. This is primarily
 * useful for dynamicIO where we use promise resolution timing to determine which
 * parts of a render can be included in a prerender.
 *
 * @internal
 */
    // We are fine if no one actually awaits this promise. We shouldn't consider this an unhandled rejection so
    // we attach a noop catch handler here to suppress this warning. If you actually await somewhere or construct
    // your own promise out of it you'll need to ensure you handle the error when it rejects.
    //# sourceMappingURL=dynamic-rendering-utils.js.map
    //# sourceMappingURL=metadata-constants.js.map
    /**
 * The functions provided by this module are used to communicate certain properties
 * about the currently running code so that Next.js can make decisions on how to handle
 * the current execution in different rendering modes such as pre-rendering, resuming, and SSR.
 *
 * Today Next.js treats all code as potentially static. Certain APIs may only make sense when dynamically rendering.
 * Traditionally this meant deopting the entire render to dynamic however with PPR we can now deopt parts
 * of a React tree as dynamic while still keeping other parts static. There are really two different kinds of
 * Dynamic indications.
 *
 * The first is simply an intention to be dynamic. unstable_noStore is an example of this where
 * the currently executing code simply declares that the current scope is dynamic but if you use it
 * inside unstable_cache it can still be cached. This type of indication can be removed if we ever
 * make the default dynamic to begin with because the only way you would ever be static is inside
 * a cache scope which this indication does not affect.
 *
 * The second is an indication that a dynamic data source was read. This is a stronger form of dynamic
 * because it means that it is inappropriate to cache this at all. using a dynamic data source inside
 * unstable_cache should error. If you want to use some dynamic data inside unstable_cache you should
 * read that data outside the cache and pass it in as an argument to the cached function.
 */
    // Once postpone is in stable we should switch to importing the postpone export directly
    // inside cache scopes marking a scope as dynamic has no effect because the outer cache scope
    // creates a cache boundary. This is subtly different from reading a dynamic data source which is
    // forbidden inside a cache scope.
    // If we're forcing dynamic rendering or we're forcing static rendering, we
    // don't need to do anything here because the entire page is already dynamic
    // or it's static and it should not throw or postpone here.
    //nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);
    // We aren't prerendering but we are generating a static page. We need to bail out of static generation
    //nextjs.org/docs/messages/dynamic-server-error`);
    // We aren't prerendering but we are generating a static page. We need to bail out of static generation
    //nextjs.org/docs/messages/dynamic-server-error`);
    // inside cache scopes marking a scope as dynamic has no effect because the outer cache scope
    // creates a cache boundary. This is subtly different from reading a dynamic data source which is
    // forbidden inside a cache scope.
    // Despite it's name we don't actually abort unless we have a controller to call abort on
    // There are times when we let a prerender run long to discover caches where we want the semantics
    // of tracking dynamic access without terminating the prerender early
    // When we aren't debugging, we don't need to create another error for the
    // stack trace.
    // We don't actually have a controller to abort but we do the semantic equivalent by
    // advancing the request store out of prerender mode
    // We always log Request Access in dev at the point of calling the function
    // So we mark the dynamic validation as not requiring it to be printed
    // When we aren't debugging, we don't need to create another error for the
    // stack trace.
    //nextjs.org/docs/messages/ppr-caught-error`;
    //nextjs.org/docs/messages/ppr-caught-error');
    // We mutate because we only call this once we are no longer writing
    // to the dynamicTrackingState and it's more efficient than creating a new
    // array.
    // Remove the "Error: " prefix from the first line of the stack trace as
    // well as the first 4 lines of the stack trace which is the distance
    // from the user code and the `new Error().stack` call.
    // Exclude Next.js internals from the stack trace.
    // Exclude anonymous functions from the stack trace.
    // Exclude Node.js internals from the stack trace.
    // We get our hands on a postpone instance by calling postpone and catching the throw
    // There are fallback route params, we should track these as dynamic
    // accesses.
    // We're prerendering with dynamicIO or PPR or both
    // We are in a prerender with dynamicIO semantics
    // We are going to hang here and never resolve. This will cause the currently
    // rendering component to effectively be a dynamic hole
    // We're prerendering with PPR
    // We don't need to track that this is dynamic. It is only so when something else is also dynamic.
    //nextjs.org/docs/messages/next-prerender-missing-suspense`;
    // In dev we already log errors about sync dynamic access. But during builds we need to ensure
    // the offending sync error is logged before we exit the build
    // The actual error should have been logged when the sync access ocurred
    //# sourceMappingURL=dynamic-rendering.js.map
    //# sourceMappingURL=is-dynamic-usage-error.js.map
    //# sourceMappingURL=is-postpone.js.map
    //# sourceMappingURL=unstable-rethrow.js.map
    /** @internal */
    //nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams');
    /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */
    /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */
    /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */
    /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */
    //# sourceMappingURL=navigation.react-server.js.map
    //# sourceMappingURL=server-inserted-html.js.map
    //# sourceMappingURL=bailout-to-client-rendering.js.map
    // In the case where this is `null`, the compat types added in
    // `next-env.d.ts` will add a new overload that changes the return type to
    // include `null`.
    // When the router is not ready in pages, we won't have the search params
    // available.
    // AsyncLocalStorage should not be included in the client bundle.
    // TODO-APP: handle dynamic = 'force-static' here and on the client
    // In the case where this is `null`, the compat types added in `next-env.d.ts`
    // will add a new overload that changes the return type to include `null`.
    /** Get the canonical parameters from the current level to the leaf node. */
    // Client components API
    // Use the provided parallel route key on the first parallel route
    // After first parallel route prefer children, if there's no children pick the first parallel route.
    // @ts-expect-error This only happens in `pages`. Type is overwritten in navigation.d.ts
    // if the default slot is showing, we return null since it's not technically "selected" (it's a fallback)
    // and returning an internal value like `__DEFAULT__` would be confusing.
    //# sourceMappingURL=navigation.js.map
    // Re-throw if error is not for redirect
    // Explicit type is needed to avoid the generated `.d.ts` having a wide return type that could be specific to the `@types/react` version.
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=redirect-boundary.js.map
    //# sourceMappingURL=warn-once.js.map
    /**
 * HTTPAccessFallbackBoundary is a boundary that catches errors and renders a
 * fallback component for HTTP errors.
 *
 * It receives the status code, and determine if it should render fallbacks for few HTTP 4xx errors.
 *
 * e.g. 404
 * 404 represents not found, and the fallback component pair contains the component and its styles.
 *
 */
    // A missing children slot is the typical not-found case, so no need to warn
    //nextjs.org/docs/app/building-your-application/routing/parallel-routes#defaultjs\n\n';
    // Re-throw if error is not for 404
    /**
     * Handles reset of the error boundary when a navigation happens.
     * Ensures the error boundary does not stay enabled when navigating to a new page.
     * Approach of setState in render is safe as it checks the previous pathname and then overrides
     * it as outlined in https://react.dev/reference/react/useState#storing-information-from-previous-renders
     */
    // If there's no matched boundary in this layer, keep throwing the error by rendering the children
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // When we're rendering the missing params shell, this will return null. This
    // is because we won't be rendering any not found boundaries or error
    // boundaries for the missing params shell. When this runs on the client
    // (where these error can occur), we will get the correct pathname.
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=error-boundary.js.map
    // if the segment is an array, it means it's a dynamic segment
    // for example, ['lang', 'en', 'd']. We need to convert it to a string to store it as a cache node key.
    // Page segments might have search parameters, ie __PAGE__?foo=bar
    // When `withoutSearchParameters` is true, we only want to return the page segment
    //# sourceMappingURL=create-router-cache-key.js.map
    // If we have a dynamic segment, it's marked as an interception route by the presence of the `i` suffix.
    // If segment is not an array, apply the existing string-based check
    // Iterate through parallelRoutes if they exist
    //# sourceMappingURL=has-interception-route-in-current-tree.js.map
    /**
 * Add refetch marker to router state at the point of the current layout segment.
 * This ensures the response returned is not further down than the current layout segment.
 */
    // TODO-APP: Replace with new React API for finding dom nodes without a `ref` when available
    /**
 * Wraps ReactDOM.findDOMNode with additional logic to hide React Strict Mode warning
 */
    // Tree-shake for server bundle
    // __DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE.findDOMNode is null during module init.
    // We need to lazily reference it.
    /**
 * Check if a HTMLElement is hidden or fixed/sticky position
 */
    // we ignore fixed or sticky positioned elements since they'll likely pass the "in-viewport" check
    // and will result in a situation we bail on scroll because of something like a fixed nav,
    // even though the actual page content is offscreen
    // Uses `getBoundingClientRect` to check if the element is hidden instead of `offsetParent`
    // because `offsetParent` doesn't consider document/body
    /**
 * Check if the top corner of the HTMLElement is in the viewport.
 */
    /**
 * Find the DOM node for a hash fragment.
 * If `top` the page has to scroll to the top of the page. This mirrors the browser's behavior.
 * If the hash fragment is an id, the page has to scroll to the element with that id.
 * If the hash fragment is a name, the page has to scroll to the first element with that name.
 */
    // If the hash fragment is `top` the page has to scroll to the top of the page.
    // If the hash fragment is an id, the page has to scroll to the element with that id.
    // Because this property is overwritten in handlePotentialScroll it's fine to always run it when true as it'll be set to false for subsequent renders.
    // Handle scroll and focus, it's only applied once in the first useEffect that triggers that changed.
    // segmentPaths is an array of segment paths that should be scrolled to
    // if the current segment path is not in the array, the scroll is not applied
    // unless the array is empty, in which case the scroll is always applied
    // `findDOMNode` is tricky because it returns just the first child if the component is a fragment.
    // This already caused a bug where the first child was a <link/> in head.
    // If there is no DOM node this layout-router level is skipped. It'll be handled higher-up in the tree.
    // Verify if the element is a HTMLElement and if we want to consider it for scroll behavior.
    // If the element is skipped, try to select the next sibling and try again.
    // No siblings found that match the criteria are found, so handle scroll higher up in the tree instead.
    // State is mutated to ensure that the focus and scroll is applied only once.
    // In case of hash scroll, we only need to scroll the element into view
    // Store the current viewport height because reading `clientHeight` causes a reflow,
    // and it won't change during this function.
    // If the element's top edge is already in the viewport, exit early.
    // Otherwise, try scrolling go the top of the document to be backward compatible with pages
    // scrollIntoView() called on `<html/>` element scrolls horizontally on chrome and firefox (that shouldn't happen)
    // We could use it to scroll horizontally following RTL but that also seems to be broken - it will always scroll left
    // scrollLeft = 0 also seems to ignore RTL and manually checking for RTL is too much hassle so we will scroll just vertically
    // Scroll to domNode if domNode is not in viewport when scrolled to top of document
    // Scroll into view doesn't scroll horizontally by default when not needed
    // We will force layout by querying domNode position
    // Mutate after scrolling so that it can be read by `handleSmoothScroll`
    // Set focus on the element
    /*#__PURE__*/
    /**
 * InnerLayoutRouter handles rendering the provided segment based on the cache.
 */
    // isActive,
    // Read segment path from the parallel router cache node.
    // When data is not available during rendering client-side we need to fetch
    // it from the server.
    /**
     * Flight data fetch kicked off during render and put into the cache.
     */
    // `rsc` represents the renderable node for this segment.
    // If this segment has a `prefetchRsc`, it's the statically prefetched data.
    // We should use that on initial render instead of `rsc`. Then we'll switch
    // to `rsc` when the dynamic response streams in.
    //
    // If no prefetch data is available, then we go straight to rendering `rsc`.
    // We use `useDeferredValue` to handle switching between the prefetched and
    // final values. The second argument is returned on initial render, then it
    // re-renders with the first argument.
    //
    // @ts-expect-error The second argument to `useDeferredValue` is only
    // available in the experimental builds. When its disabled, it will always
    // return `rsc`.
    // `rsc` is either a React node or a promise for a React node, except we
    // special case `null` to represent that this segment's data is missing. If
    // it's a promise, we need to unwrap it so we can determine whether or not the
    // data is missing.
    // The data for this segment is not available, and there's no pending
    // navigation that will be able to fulfill it. We need to fetch more from
    // the server and patch the cache.
    // Check if there's already a pending request.
    /**
       * Router state with refetch marker added
       */
    // TODO-APP: remove ''
    // Suspend infinitely as `changeByServerResponse` will cause a different part of the tree to be rendered.
    // A falsey `resolvedRsc` indicates missing data -- we should not commit that branch, and we need to wait for the data to arrive.
    // If we get to this point, then we know we have something we can render.
    /*#__PURE__*/
    // TODO-APP: overriding of url for parallel routes
    // Ensure root layout is not wrapped in a div as the root layout renders `<html>`
    /**
 * Renders suspense boundary with the provided "loading" property as the fallback.
 * If no loading property is provided it renders the children without a suspense boundary.
 */
    // If loading is a promise, unwrap it. This happens in cases where we haven't
    // yet received the loading data from the server — which includes whether or
    // not this layout has a loading component at all.
    //
    // It's OK to suspend here instead of inside the fallback because this
    // promise will resolve simultaneously with the data for the segment itself.
    // So it will never suspend for longer than it would have if we didn't use
    // a Suspense fallback at all.
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // Get the current parallelRouter cache node
    // If the parallel router cache node does not exist yet, create it.
    // This writes to the cache when there is no item in the cache yet. It never *overwrites* existing cache items which is why it's safe in concurrent mode.
    // Get the active segment in the tree
    // The reason arrays are used in the data format is that these are transferred from the server to the browser so it's optimized to save bytes.
    // If segment is an array it's a dynamic route and we want to read the dynamic route value as the segment to get from the cache.
    /**
   * Decides which segments to keep rendering, all segments that are not active will be wrapped in `<Offscreen>`.
   */
    // TODO-APP: Add handling of `<Offscreen>` when it's available.
    /*#__PURE__*/
    /*
            - Error boundary
              - Only renders error boundary if error component is provided.
              - Rendered for each segment to ensure they have their own error state.
            - Loading boundary
              - Only renders suspense boundary if loading components is provided.
              - Rendered for each segment to ensure they have their own loading state.
              - Passed to the router during rendering to ensure it can be immediately rendered when suspending on a Flight fetch.
          */
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=layout-router.js.map
    /*#__PURE__*/
    //# sourceMappingURL=render-from-template-context.js.map
    //# sourceMappingURL=invariant-error.js.map
    //# sourceMappingURL=reflect.js.map
    // This regex will have fast negatives meaning valid identifiers may not pass
    // this test. However this is only used during static generation to provide hints
    // about why a page bailed out of some or all prerendering and we can use bracket notation
    // for example while `ಠ_ಠ` is a valid identifier it's ok to print `searchParams['ಠ_ಠ']`
    // even if this would have been fine too `searchParams.ಠ_ಠ`
    //nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);
    //nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);
    // Promise prototype
    // fallthrough
    // React Promise extension
    // fallthrough
    // React introspection
    // Common tested properties
    // fallthrough
    //# sourceMappingURL=utils.js.map
    // These properties cannot be shadowed because they need to be the
    // true underlying value for Promises to work correctly at runtime
    // We are accessing a property that doesn't exist on the promise nor
    // the underlying searchParams.
    // We are accessing a property that doesn't exist on the promise nor
    // the underlying searchParams.
    // We don't use makeResolvedReactPromise here because searchParams
    // supports copying with spread and we don't want to unnecessarily
    // instrument the promise with spreadable properties of ReactPromise.
    // These properties cannot be shadowed because they need to be the
    // true underlying value for Promises to work correctly at runtime
    //nextjs.org/docs/messages/sync-dynamic-apis`);
    //nextjs.org/docs/messages/sync-dynamic-apis`);
    //# sourceMappingURL=search-params.browser.js.map
    // These properties cannot be shadowed because they need to be the
    // true underlying value for Promises to work correctly at runtime
    // We don't use makeResolvedReactPromise here because params
    // supports copying with spread and we don't want to unnecessarily
    // instrument the promise with spreadable properties of ReactPromise.
    // These properties cannot be shadowed because they need to be the
    // true underlying value for Promises to work correctly at runtime
    //nextjs.org/docs/messages/sync-dynamic-apis`);
    //nextjs.org/docs/messages/sync-dynamic-apis`);
    //# sourceMappingURL=params.browser.js.map
    // React.cache is currently only available in canary/experimental React channels.
    // When Dynamic IO is enabled, we record these as errors so that they
    // are captured by the dev overlay as it's more critical to fix these
    // when enabled.
    // We don't want to dedupe across requests.
    // The developer might've just attempted to fix the warning so we should warn again if it still happens.
    // Error:
    //   logDedupedError
    //   asyncApiBeingAccessedSynchronously
    //   <userland callsite>
    // TODO: This breaks if sourcemaps with ignore lists are enabled.
    //# sourceMappingURL=create-deduped-by-callsite-server-error-logger.js.map
    /**
 * Schedules a function to be called on the next tick after the other promises
 * have been resolved.
 *
 * @param cb the function to schedule
 */
    // We use Promise.resolve().then() here so that the operation is scheduled at
    // the end of the promise job queue, we then add it to the next process tick
    // to ensure it's evaluated afterwards.
    //
    // This was inspired by the implementation of the DataLoader interface: https://github.com/graphql/dataloader/blob/d336bd15282664e0be4b4a657cb796f09bafbc6b/src/index.js#L213-L255
    //
    //# sourceMappingURL=scheduler.js.map
    // When using forceStatic we override all other logic and always just return an empty
    // dictionary object.
    // dynamicIO Prerender
    // We're prerendering in a mode that aborts (dynamicIO) and should stall
    // the promise to ensure the RSC side is considered dynamic
    // We're prerendering in a mode that does not aborts. We resolve the promise without
    // any tracking because we're just transporting a value from server to client where the tracking
    // will be applied.
    // When using forceStatic we override all other logic and always just return an empty
    // dictionary object.
    // We are in a dynamicIO (PPR or otherwise) prerender
    // The remaining cases are prerender-ppr and prerender-legacy
    // We are in a legacy static generation and need to interrupt the prerender
    // when search params are accessed.
    // When using forceStatic we override all other logic and always just return an empty
    // dictionary object.
    // The promise has this property directly. we must return it.
    // We know it isn't a dynamic access because it can only be something
    // that was previously written to the promise and thus not an underlying searchParam value
    // Object prototype
    // Promise prototype
    // fallthrough
    // Common tested properties
    // fallthrough
    // These properties cannot be shadowed because they need to be the
    // true underlying value for Promises to work correctly at runtime
    // We don't expect key checking to be used except for testing the existence of
    // searchParams so we make all has tests trigger dynamic. this means that `promise.then`
    // can resolve to the then function on the Promise prototype but 'then' in promise will assume
    // you are testing whether the searchParams has a 'then' property.
    // For search params we don't construct a ReactPromise because we want to interrupt
    // rendering on any property access that was not set from outside and so we only want
    // to have properties like value and status if React sets them.
    // The promise has this property directly. we must return it.
    // We know it isn't a dynamic access because it can only be something
    // that was previously written to the promise and thus not an underlying searchParam value
    // Object prototype
    // Promise prototype
    // fallthrough
    // Common tested properties
    // fallthrough
    // These properties cannot be shadowed because they need to be the
    // true underlying value for Promises to work correctly at runtime
    // PPR Prerender (no dynamicIO)
    // Legacy Prerender
    // PPR Prerender (no dynamicIO)
    // Legacy Prerender
    // PPR Prerender (no dynamicIO)
    // Legacy Prerender
    // We don't expect key checking to be used except for testing the existence of
    // searchParams so we make all has tests trigger dynamic. this means that `promise.then`
    // can resolve to the then function on the Promise prototype but 'then' in promise will assume
    // you are testing whether the searchParams has a 'then' property.
    // PPR Prerender (no dynamicIO)
    // Legacy Prerender
    // PPR Prerender (no dynamicIO)
    // Legacy Prerender
    // We don't use makeResolvedReactPromise here because searchParams
    // supports copying with spread and we don't want to unnecessarily
    // instrument the promise with spreadable properties of ReactPromise.
    // Object prototype
    // Promise prototype
    // fallthrough
    // React Promise extension
    // fallthrough
    // Common tested properties
    // fallthrough
    // We have an unfortunate sequence of events that requires this initialization logic. We want to instrument the underlying
    // searchParams object to detect if you are accessing values in dev. This is used for warnings and for things like the static prerender
    // indicator. However when we pass this proxy to our Promise.resolve() below the VM checks if the resolved value is a promise by looking
    // at the `.then` property. To our dynamic tracking logic this is indistinguishable from a `then` searchParam and so we would normally trigger
    // dynamic tracking. However we know that this .then is not real dynamic access, it's just how thenables resolve in sequence. So we introduce
    // this initialization concept so we omit the dynamic check until after we've constructed our resolved promise.
    // We don't use makeResolvedReactPromise here because searchParams
    // supports copying with spread and we don't want to unnecessarily
    // instrument the promise with spreadable properties of ReactPromise.
    // These properties cannot be shadowed because they need to be the
    // true underlying value for Promises to work correctly at runtime
    // We are accessing a property that doesn't exist on the promise nor
    // the underlying searchParams.
    // We are accessing a property that doesn't exist on the promise nor
    // the underlying searchParams.
    // In all cases we warn normally
    // When we're rendering dynamically in dev we need to advance out of the
    // Prerender environment when we read Request data synchronously
    //nextjs.org/docs/messages/sync-dynamic-apis`);
    //nextjs.org/docs/messages/sync-dynamic-apis`);
    //# sourceMappingURL=search-params.js.map
    // This params object has one of more fallback params so we need to consider
    // the awaiting of this params object "dynamic". Since we are in dynamicIO mode
    // we encode this as a promise that never resolves
    // We're prerendering in a mode that does not abort. We resolve the promise without
    // any tracking because we're just transporting a value from server to client where the tracking
    // will be applied.
    // params need to be treated as dynamic because we have at least one fallback param
    // We are in a dynamicIO (PPR or otherwise) prerender
    // remaining cases are prender-ppr and prerender-legacy
    // We aren't in a dynamicIO prerender but we do have fallback params at this
    // level so we need to make an erroring exotic params object which will postpone
    // if you access the fallback params
    // We don't have any fallback params so we have an entirely static safe params object
    // These properties cannot be shadowed because they need to be the
    // true underlying value for Promises to work correctly at runtime
    // We don't use makeResolvedReactPromise here because params
    // supports copying with spread and we don't want to unnecessarily
    // instrument the promise with spreadable properties of ReactPromise.
    // These properties cannot be shadowed because they need to be the
    // true underlying value for Promises to work correctly at runtime
    // In most dynamic APIs we also throw if `dynamic = "error"` however
    // for params is only dynamic when we're generating a fallback shell
    // and even when `dynamic = "error"` we still support generating dynamic
    // fallback shells
    // TODO remove this comment when dynamicIO is the default since there
    // will be no `dynamic = "error"`
    // PPR Prerender (no dynamicIO)
    // Legacy Prerender
    // In most dynamic APIs we also throw if `dynamic = "error"` however
    // for params is only dynamic when we're generating a fallback shell
    // and even when `dynamic = "error"` we still support generating dynamic
    // fallback shells
    // TODO remove this comment when dynamicIO is the default since there
    // will be no `dynamic = "error"`
    // PPR Prerender (no dynamicIO)
    // Legacy Prerender
    // We don't use makeResolvedReactPromise here because params
    // supports copying with spread and we don't want to unnecessarily
    // instrument the promise with spreadable properties of ReactPromise.
    // These properties cannot be shadowed because they need to be the
    // true underlying value for Promises to work correctly at runtime
    // We don't use makeResolvedReactPromise here because params
    // supports copying with spread and we don't want to unnecessarily
    // instrument the promise with spreadable properties of ReactPromise.
    // These properties cannot be shadowed because they need to be the
    // true underlying value for Promises to work correctly at runtime
    // When we're rendering dynamically in dev we need to advance out of the
    // Prerender environment when we read Request data synchronously
    // In all cases we warn normally
    //nextjs.org/docs/messages/sync-dynamic-apis`);
    //nextjs.org/docs/messages/sync-dynamic-apis`);
    //# sourceMappingURL=params.js.map
    // We are going to instrument the searchParams prop with tracking for the
    // appropriate context. We wrap differently in prerendering vs rendering
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=client-page.js.map
    // We are going to instrument the searchParams prop with tracking for the
    // appropriate context. We wrap differently in prerendering vs rendering
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=client-segment.js.map
    // We use a namespace object to allow us to recover the name of the function
    // at runtime even when production bundling/minification is used.
    // so it retains the name inferred from the namespace object
    // so it retains the name inferred from the namespace object
    // so it retains the name inferred from the namespace object
    //# sourceMappingURL=metadata-boundary.js.map
    //# sourceMappingURL=node_modules_36e229._.js.map

File: ./frontend/.next/server/chunks/ssr/node_modules_9a9cae._.js
  JavaScript Functions:
    - _extends
    - is
    - memoizedSelector
    - isValidElementType
    - typeOf
    - isContextConsumer
    - isMemo
    - warning
    - verify
    - verifySubselectors
    - pureFinalPropsSelectorFactory
    - handleFirstCall
    - handleNewPropsAndNewState
    - handleNewProps
    - handleNewState
    - handleSubsequentCalls
    - pureFinalPropsSelector
    - finalPropsSelectorFactory
    - bindActionCreators
    - isPlainObject
    - verifyPlainObject
    - wrapMapToPropsConstant
    - initConstantSelector
    - constantSelector
    - getDependsOnOwnProps
    - wrapMapToPropsFunc
    - initProxySelector
    - mapToPropsProxy
    - detectFactoryAndVerify
    - createInvalidArgFactory
    - mapDispatchToPropsFactory
    - mapStateToPropsFactory
    - defaultMergeProps
    - wrapMergePropsFunc
    - initMergePropsProxy
    - mergePropsProxy
    - mergePropsFactory
    - defaultNoopBatch
    - createListenerCollection
    - unsubscribe
    - createSubscription
    - addNestedSub
    - notifyNestedSubs
    - handleChangeWrapper
    - isSubscribed
    - trySubscribe
    - tryUnsubscribe
    - trySubscribeSelf
    - tryUnsubscribeSelf
    - canUseDOM
    - isRunningInReactNative
    - getUseIsomorphicLayoutEffect
    - is
    - shallowEqual
    - getStatics
    - hoistNonReactStatics
    - getContext
    - stringifyComponent
    - useIsomorphicLayoutEffectWithArgs
    - captureWrapperProps
    - subscribeUpdates
    - checkForUpdates
    - unsubscribeWrapper
    - strictEqual
    - connect
    - wrapWithConnect
    - returned
    - ConnectFunction
    - selector
    - subscribe
    - forwardConnectRef
    - Provider
    - createReduxContextHook
    - useReduxContext2
    - createStoreHook
    - useStore2
    - createDispatchHook
    - useDispatch2
    - refEquality
    - createSelectorHook
    - useSelector2
    - as
    - as
    - to
    - invariant
    - getRect
    - expand
    - shrink
    - shift
    - createBox
    - parse
    - getWindowScroll
    - offset
    - withScroll
    - calculateBox
    - getBox
    - rafSchd
    - wrapperFn
    - formatProdErrorMessage
    - randomString
    - isPlainObject
    - miniKindOf
    - ctorName
    - isError
    - isDate
    - kindOf
    - createStore
    - ensureCanMutateNextListeners
    - getState
    - subscribe
    - unsubscribe
    - dispatch
    - replaceReducer
    - observable
    - observeState
    - legacy_createStore
    - warning
    - getUnexpectedStateShapeWarningMessage
    - assertReducerShape
    - combineReducers
    - combination
    - bindActionCreator
    - bindActionCreators
    - compose
    - applyMiddleware
    - dispatch
    - isAction
    - 2
    - getDevMessage
    - getFormattedMessage
    - log
    - noop
    - getOptions
    - bindEvents
    - unbind
    - unbindAll
    - toString
    - invariant
    - onWindowError
    - getCallbacks
    - setCallbacks
    - position
    - onDragStart
    - withLocation
    - withCombine
    - onDragUpdate
    - returnedToStart
    - onDragEnd
    - isEqual
    - areInputsEqual
    - useMemo
    - initial
    - useCallback
    - add
    - subtract
    - 1
    - negate
    - patch
    - distance
    - 1
    - apply
    - executeClip
    - offsetByPosition
    - getCorners
    - 1
    - increase
    - clip
    - getSubject
    - scrollDroppable
    - memoizeOne
    - memoized
    - clear
    - tryGetDestination
    - tryGetCombine
    - moveToNextCombine
    - getImpact
    - isHomeOf
    - isWithin
    - isPartiallyVisibleThroughFrame
    - isTotallyVisibleThroughFrame
    - isTotallyVisibleThroughFrameOnAxis
    - getDroppableDisplaced
    - isVisibleInDroppable
    - isVisibleInViewport
    - 1
    - isPartiallyVisible
    - isTotallyVisible
    - isTotallyVisibleOnAxis
    - getShouldAnimate
    - getTarget
    - getDisplacementGroups
    - process
    - getIndexOfLastItem
    - goAtEnd
    - calculateReorderImpact
    - didStartAfterCritical
    - fromCombine
    - fromReorder
    - moveToNextIndex
    - getCombinedItemDisplacement
    - whenCombining
    - distanceFromStartToBorderBoxCenter
    - distanceFromEndToBorderBoxCenter
    - getCrossAxisBorderBoxCenter
    - goAfter
    - goBefore
    - goIntoStart
    - whenReordering
    - withDroppableDisplacement
    - getResultWithoutDroppableDisplacement
    - getPageBorderBoxCenterFromImpact
    - scrollViewport
    - getDraggables
    - tryGetVisible
    - speculativelyIncrease
    - withViewportDisplacement
    - getClientFromPageBorderBoxCenter
    - isTotallyVisibleInNewLocation
    - moveToNextPlace
    - getKnownActive
    - getBestCrossAxisDroppable
    - getCurrentPageBorderBoxCenter
    - getCurrentPageBorderBox
    - getClosestDraggable
    - getDisplacedBy
    - getRequiredGrowthForPlaceholder
    - withMaxScroll
    - addPlaceholder
    - removePlaceholder
    - moveToNewDroppable
    - proposedIndex
    - moveCrossAxis
    - whatIsDraggedOver
    - 1
    - moveInDirection
    - isMovementAllowed
    - isPositionInFrame
    - run
    - getHasOverlap
    - getFurthestAway
    - getDroppableOver
    - offsetRectByPosition
    - withDroppableScroll
    - getIsDisplaced
    - atIndex
    - getReorderImpact
    - getCombineImpact
    - getDragImpact
    - patchDroppableMap
    - clearUnusedPlaceholder
    - recomputePlaceholders
    - update
    - getDraggables
    - recompute
    - getClientBorderBoxCenter
    - refreshSnap
    - getHomeLocation
    - getLiftEffect
    - patchDimensionMap
    - start
    - finish
    - offsetDraggable
    - getFrame
    - adjustAdditionsForScrollChanges
    - publishWhileDraggingInVirtual
    - isSnapping
    - postDroppableChange
    - removeScrollJumpRequest
    - reducer
    - guard
    - beforeInitialCapture
    - 1
    - initialPublish
    - publishWhileDragging
    - collectionStarting
    - updateDroppableScroll
    - updateDroppableIsEnabled
    - updateDroppableIsCombineEnabled
    - move
    - moveByWindowScroll
    - updateViewportMaxScroll
    - moveUp
    - moveDown
    - moveRight
    - moveLeft
    - flush
    - animateDrop
    - completeDrop
    - drop
    - dropPending
    - dropAnimationFinished
    - checkIndexes
    - validateDimensions
    - lift
    - style
    - moveTo
    - getDropDuration
    - getNewHomeClientOffset
    - getDropImpact
    - dropMiddleware
    - getWindowScroll
    - getWindowScrollBinding
    - getScrollListener
    - updateScroll
    - isActive
    - start
    - stop
    - 1
    - scrollListener
    - getExpiringAnnounce
    - result
    - wasCalled
    - getAsyncMarshal
    - execute
    - add
    - flush
    - areLocationsEqual
    - isCombineEqual
    - isCriticalEqual
    - withTimings
    - getDragStart
    - execute
    - getPublisher
    - beforeCapture
    - beforeStart
    - start
    - update
    - flush
    - drop
    - abort
    - responders
    - dropAnimationFinishMiddleware
    - dropAnimationFlushOnScrollMiddleware
    - clear
    - flushDropAnimation
    - dimensionMarshalStopper
    - focus
    - shouldStop
    - autoScroll
    - pendingDrop
    - createStore
    - 1
    - createPublisher
    - collect
    - add
    - remove
    - stop
    - getMaxScroll
    - getDocumentElement
    - getMaxWindowScroll
    - getViewport
    - getInitialPublish
    - shouldPublishUpdate
    - createDimensionMarshal
    - updateDroppableIsEnabled
    - updateDroppableIsCombineEnabled
    - updateDroppableScroll
    - scrollDroppable
    - stopPublishing
    - subscriber
    - startPublishing
    - canStartDrag
    - scrollWindow
    - getScrollableDroppableOver
    - getBestScrollableDroppable
    - getDistanceThresholds
    - getPercentage
    - getValueFromDistance
    - dampenValueByTime
    - getValue
    - getScrollOnAxis
    - adjustForSizeLimits
    - 1
    - getOverlap
    - getRemainder
    - canPartiallyScroll
    - canScrollWindow
    - getWindowOverlap
    - canScrollDroppable
    - getDroppableOverlap
    - getWindowScrollChange
    - getDroppableScrollChange
    - scroll
    - createFluidScroller
    - tryScroll
    - 1
    - fakeScrollCallback
    - stop
    - createJumpScroller
    - moveByOffset
    - scrollDroppableAsMuchAsItCan
    - scrollWindowAsMuchAsItCan
    - jumpScroller
    - createAutoScroller
    - scroll
    - dragHandle
    - draggable
    - droppable
    - makeGetSelector
    - getStyles
    - 1
    - 1
    - 1
    - getHead
    - createStyleEl
    - useStyleMarshal
    - remove
    - querySelectorAll
    - getWindowFromEl
    - isHtmlElement
    - findDragHandle
    - useFocusMarshal
    - register
    - unregister
    - tryGiveFocus
    - tryShiftRecord
    - tryRestoreFocusRecorded
    - tryRecordFocus
    - clearFrameOnUnmount
    - createRegistry
    - subscribe
    - unsubscribe
    - notify
    - findDraggableById
    - getDraggableById
    - findDroppableById
    - getDroppableById
    - clean
    - useRegistry
    - unmount
    - getBodyElement
    - getId
    - useAnnouncer
    - setup
    - cleanup
    - remove
    - useUniqueId
    - getElementId
    - useHiddenTextElement
    - mount
    - unmount
    - getVersion
    - isSatisfied
    - checkReactVersion
    - checkDoctype
    - useDev
    - useDevSetupWarning
    - useStartupValidation
    - usePrevious
    - create
    - isClaimed
    - isActive
    - claim
    - release
    - tryAbandon
    - isDragging
    - preventStandardKeyEvents
    - supportedEventName
    - isSloppyClickThresholdExceeded
    - getCaptureBindings
    - useMouseSensor
    - onMouseDown
    - listenForCapture
    - bindCapturingEvents
    - startPendingDrag
    - mount
    - unmount
    - noop
    - getDraggingBindings
    - cancel
    - drop
    - useKeyboardSensor
    - onKeyDown
    - stop
    - tryStartCapture
    - mount
    - unmount
    - getWindowBindings
    - getHandleBindings
    - useTouchSensor
    - getPhase
    - setPhase
    - onTouchStart
    - listenForCapture
    - bindCapturingEvents
    - unbindAll
    - startDragging
    - startPendingDrag
    - mount
    - unmount
    - webkitHack
    - useValidateSensorHooks
    - isAnInteractiveElement
    - isEventInInteractiveElement
    - getBorderBoxCenterPosition
    - isElement
    - supportedMatchesName
    - closestPonyfill
    - closest
    - getSelector
    - findClosestDragHandleFromEvent
    - tryGetClosestDraggableIdFromEvent
    - findDraggable
    - preventDefault
    - isActive
    - canStart
    - tryStart
    - getShouldRespectForcePress
    - isLockActive
    - tryDispatch
    - lift
    - completed
    - finish
    - fluidLift
    - 1
    - snapLift
    - abortPreDrag
    - useSensorMarshal
    - lockAPI
    - tryAbandonLock
    - listenToStore
    - tryReleaseLock
    - createResponders
    - onBeforeCapureCallback
    - createAutoScrollerOptions
    - getStore
    - App
    - useUniqueContextId
    - DragDropContext
    - getDraggingTransition
    - getDraggingOpacity
    - getShouldDraggingAnimate
    - getDraggingStyle
    - getSecondaryStyle
    - getStyle
    - getDimension
    - useDraggablePublisher
    - checkIsValidInnerRef
    - useValidation
    - prefix
    - useClonePropValidation
    - useRequiredContext
    - preventHtml5Dnd
    - Draggable
    - isStrictEqual
    - whatIsDraggedOverFromResult
    - getCombineWithFromResult
    - getCombineWithFromImpact
    - getDraggableSelector
    - selector
    - getSecondarySnapshot
    - getSecondarySelector
    - getFallback
    - getProps
    - selector
    - 1
    - selector
    - PrivateDraggable
    - PublicDraggable
    - isEqual
    - isEither
    - isBoth
    - isElementScrollable
    - isBodyScrollable
    - getClosestScrollable
    - checkForNestedScrollContainers
    - getScroll
    - getIsFixed
    - getEnv
    - getDroppableDimension
    - frame
    - getClient
    - getDimension
    - closest
    - getListenerOptions
    - getClosestScrollableFromDrag
    - useDroppablePublisher
    - noop
    - getSize
    - getStyle
    - Placeholder
    - isBoolean
    - runChecks
    - required
    - boolean
    - ref
    - placeholder
    - hasClone
    - hasNoPlaceholder
    - useValidation
    - onClose
    - Droppable
    - getClone
    - getBody
    - attachDefaultPropsToOwnProps
    - isMatchingType
    - getDraggable
    - makeMapStateToProps
    - selector
    - ConnectedDroppable
    - ChevronRightIcon
    - ChevronDownIcon
    - UserCircleIcon
    - ClipboardDocumentCheckIcon
    - BookmarkIcon
    - ArrowsPointingOutIcon
  Comments:
    //# sourceMappingURL=module.compiled.js.map
    //# sourceMappingURL=react-jsx-dev-runtime.js.map
    //# sourceMappingURL=react.js.map
    //# sourceMappingURL=react-dom.js.map
    /**
 * @license React
 * use-sync-external-store-with-selector.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    // src/utils/react.ts
    // src/hooks/useSelector.ts
    // src/utils/react-is.ts
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/utils/warning.ts
    // src/connect/verifySubselectors.ts
    // src/connect/selectorFactory.ts
    // src/utils/bindActionCreators.ts
    // src/utils/isPlainObject.ts
    // src/utils/verifyPlainObject.ts
    // src/connect/wrapMapToProps.ts
    // src/connect/invalidArgFactory.ts
    // src/connect/mapDispatchToProps.ts
    // @ts-ignore
    // @ts-ignore
    // src/connect/mapStateToProps.ts
    // @ts-ignore
    // src/connect/mergeProps.ts
    // src/utils/batch.ts
    // src/utils/Subscription.ts
    // src/utils/useIsomorphicLayoutEffect.ts
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/utils/shallowEqual.ts
    // src/utils/hoistStatics.ts
    // src/components/Context.ts
    /* @__PURE__ */
    /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/components/connect.tsx
    // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.
    // @ts-ignore
    // use React's forwardRef to expose a ref of the wrapped component
    // the context consumer to use
    /* @__PURE__ */
    // @ts-ignore
    /* @__PURE__ */
    // @ts-ignore
    /* @__PURE__ */
    // @ts-ignore
    // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing
    // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,
    // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.
    // @ts-ignore
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/components/Provider.tsx
    /* @__PURE__ */
    /* @__PURE__ */
    // src/hooks/useReduxContext.ts
    /* @__PURE__ */
    // src/hooks/useStore.ts
    // @ts-ignore
    /* @__PURE__ */
    // src/hooks/useDispatch.ts
    /* @__PURE__ */
    //redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization", {
    /* @__PURE__ */
    // src/exports.ts
    //# sourceMappingURL=react-redux.mjs.map
    // src/utils/formatProdErrorMessage.ts
    //redux.js.org/Errors?code=${code} for the full message or use the non-minified dev environment for full errors. `;
    // src/utils/symbol-observable.ts
    /* @__PURE__ */
    // src/utils/actionTypes.ts
    // src/utils/isPlainObject.ts
    // src/utils/kindOf.ts
    // src/createStore.ts
    //redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
    /* @__PURE__ */
    /* @__PURE__ */
    //redux.js.org/api/store#subscribelistener for more details.");
    //redux.js.org/api/store#subscribelistener for more details.");
    //redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`);
    /**
       * The minimal observable subscription method.
       * @param observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
    // src/utils/warning.ts
    // src/combineReducers.ts
    /*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.`);
        }
    });
}
function combineReducers(reducers) {
    const reducerKeys = Object.keys(reducers);
    const finalReducers = {};
    for(let i = 0; i < reducerKeys.length; i++){
        const key = reducerKeys[i];
        if ("TURBOPACK compile-time truthy", 1) {
            if (typeof reducers[key] === "undefined") {
                warning(`No reducer provided for key "${key}"`);
            }
        }
        if (typeof reducers[key] === "function") {
            finalReducers[key] = reducers[key];
        }
    }
    const finalReducerKeys = Object.keys(finalReducers);
    let unexpectedKeyCache;
    if (("TURBOPACK compile-time value", "development") !== "production") {
        unexpectedKeyCache = {};
    }
    let shapeAssertionError;
    try {
        assertReducerShape(finalReducers);
    } catch (e) {
        shapeAssertionError = e;
    }
    return function combination(state = {}, action) {
        if (shapeAssertionError) {
            throw shapeAssertionError;
        }
        if ("TURBOPACK compile-time truthy", 1) {
            const warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
            if (warningMessage) {
                warning(warningMessage);
            }
        }
        let hasChanged = false;
        const nextState = {};
        for(let i = 0; i < finalReducerKeys.length; i++){
            const key = finalReducerKeys[i];
            const reducer = finalReducers[key];
            const previousStateForKey = state[key];
            const nextStateForKey = reducer(previousStateForKey, action);
            if (typeof nextStateForKey === "undefined") {
                const actionType = action && action.type;
                throw new Error(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : `When called with an action of type ${actionType ? `"${String(actionType)}"` : "(unknown type)"}, the slice reducer for key "${key}" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.`);
            }
            nextState[key] = nextStateForKey;
            hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
        }
        hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
        return hasChanged ? nextState : state;
    };
}
// src/bindActionCreators.ts
function bindActionCreator(actionCreator, dispatch) {
    return function(...args) {
        return dispatch(actionCreator.apply(this, args));
    };
}
function bindActionCreators(actionCreators, dispatch) {
    if (typeof actionCreators === "function") {
        return bindActionCreator(actionCreators, dispatch);
    }
    if (typeof actionCreators !== "object" || actionCreators === null) {
        throw new Error(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : `bindActionCreators expected an object or a function, but instead received: '${kindOf(actionCreators)}'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?`);
    }
    const boundActionCreators = {};
    for(const key in actionCreators){
        const actionCreator = actionCreators[key];
        if (typeof actionCreator === "function") {
            boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
        }
    }
    return boundActionCreators;
}
// src/compose.ts
function compose(...funcs) {
    if (funcs.length === 0) {
        return (arg)=>arg;
    }
    if (funcs.length === 1) {
        return funcs[0];
    }
    return funcs.reduce((a, b)=>(...args)=>a(b(...args)));
}
// src/applyMiddleware.ts
function applyMiddleware(...middlewares) {
    return (createStore2)=>(reducer, preloadedState)=>{
            const store = createStore2(reducer, preloadedState);
            let dispatch = ()=>{
                throw new Error(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
            };
            const middlewareAPI = {
                getState: store.getState,
                dispatch: (action, ...args)=>dispatch(action, ...args)
            };
            const chain = middlewares.map((middleware)=>middleware(middlewareAPI));
            dispatch = compose(...chain)(store.dispatch);
            return {
                ...store,
                dispatch
            };
        };
}
// src/utils/isAction.ts
function isAction(action) {
    return isPlainObject(action) && "type" in action && typeof action.type === "string";
}
;
 //# sourceMappingURL=redux.mjs.map
}}),
"[project]/node_modules/@hello-pangea/dnd/dist/dnd.esm.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "DragDropContext": (()=>DragDropContext),
    "Draggable": (()=>PublicDraggable),
    "Droppable": (()=>ConnectedDroppable),
    "useKeyboardSensor": (()=>useKeyboardSensor),
    "useMouseSensor": (()=>useMouseSensor),
    "useTouchSensor": (()=>useTouchSensor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-dom.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/react-redux/dist/react-redux.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$box$2d$model$2f$dist$2f$css$2d$box$2d$model$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/css-box-model/dist/css-box-model.esm.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$raf$2d$schd$2f$dist$2f$raf$2d$schd$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/raf-schd/dist/raf-schd.esm.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/redux/dist/redux.mjs [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
const isProduction$1 = ("TURBOPACK compile-time value", "development") === 'production';
const spacesAndTabs = /[ \t]{2,}/g;
const lineStartWithSpaces = /^[ \t]*/
    //github.com/hello-pangea/dnd/blob/main/docs/patterns/virtual-lists.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/doctype.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/using-inner-ref.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/how-we-detect-scroll-containers.md
    //github.com/atlassian/react-beautiful-dnd/issues/131
    //github.com/hello-pangea/dnd/blob/main/docs/api/droppable.md
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=node_modules_9a9cae._.js.map

File: ./frontend/.next/server/chunks/ssr/_eb8d6c._.js
  Comments:
    // We inject the tree and pages here so that we can use them in the route
    // module.
    //", props.params, "favicon.ico") + `?${__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$225b$project$5d2f$src$2f$app$2f$favicon$2e$ico__$5b$app$2d$rsc$5d$__$28$static$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29$__["default"].src.split("/").splice(-1)[0]}`,
    // The following aren't used in production.
    //# sourceMappingURL=app-page.js.map
    //# sourceMappingURL=_eb8d6c._.js.map

File: ./frontend/.next/server/chunks/ssr/[root of the server]__7cad78._.js
  JavaScript Functions:
    - AllTasks
    - handleDragEnd
    - UserCircleIcon
    - ClipboardDocumentCheckIcon
    - BookmarkIcon
  Comments:
    // Task toggle & type icons
    //127.0.0.1:5000/api/tasks").then((response)=>response.json()).then((data)=>{
    // Drag & Drop handler
    // If dropped outside, do nothing
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //127.0.0.1:5000/dashboard",
    /*#__PURE__*/
    //127.0.0.1:5000/tasks/",
    /*#__PURE__*/
    //localhost:3000/alltasks",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=module.compiled.js.map
    //# sourceMappingURL=react-jsx-dev-runtime.js.map
    //# sourceMappingURL=react.js.map
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=%5Broot%20of%20the%20server%5D__7cad78._.js.map

File: ./frontend/.next/server/chunks/ssr/[root of the server]__b05ffa._.js
  JavaScript Functions:
    - TaskDetails
    - handleChange
  Comments:
    // ✅ Corrected import for dynamic routing
    // ✅ Get the taskId from URL
    // ✅ Extract taskId correctly
    // ✅ Fetch Task Details from Flask Backend
    //127.0.0.1:5000/api/tasks/${taskId}`).then((res)=>res.json()).then((data)=>setTask(data)).catch((error)=>console.error("Error fetching task:", error));
    //127.0.0.1:5000/api/projects").then((res)=>res.json()).then((data)=>setProjects(data)).catch((error)=>console.error("Error fetching projects:", error));
    //127.0.0.1:5000/api/contributors").then((res)=>res.json()).then((data)=>setContributors(data)).catch((error)=>console.error("Error fetching contributors:", error));
    // ✅ Handle Input Changes
    // ✅ Save Changes to Flask API
    //127.0.0.1:5000/api/tasks/${taskId}`, {
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=%5Broot%20of%20the%20server%5D__b05ffa._.js.map

File: ./frontend/.next/server/chunks/ssr/node_modules_f05178._.js
  JavaScript Functions:
    - _extends
    - is
    - memoizedSelector
    - isValidElementType
    - typeOf
    - isContextConsumer
    - isMemo
    - warning
    - verify
    - verifySubselectors
    - pureFinalPropsSelectorFactory
    - handleFirstCall
    - handleNewPropsAndNewState
    - handleNewProps
    - handleNewState
    - handleSubsequentCalls
    - pureFinalPropsSelector
    - finalPropsSelectorFactory
    - bindActionCreators
    - isPlainObject
    - verifyPlainObject
    - wrapMapToPropsConstant
    - initConstantSelector
    - constantSelector
    - getDependsOnOwnProps
    - wrapMapToPropsFunc
    - initProxySelector
    - mapToPropsProxy
    - detectFactoryAndVerify
    - createInvalidArgFactory
    - mapDispatchToPropsFactory
    - mapStateToPropsFactory
    - defaultMergeProps
    - wrapMergePropsFunc
    - initMergePropsProxy
    - mergePropsProxy
    - mergePropsFactory
    - defaultNoopBatch
    - createListenerCollection
    - unsubscribe
    - createSubscription
    - addNestedSub
    - notifyNestedSubs
    - handleChangeWrapper
    - isSubscribed
    - trySubscribe
    - tryUnsubscribe
    - trySubscribeSelf
    - tryUnsubscribeSelf
    - canUseDOM
    - isRunningInReactNative
    - getUseIsomorphicLayoutEffect
    - is
    - shallowEqual
    - getStatics
    - hoistNonReactStatics
    - getContext
    - stringifyComponent
    - useIsomorphicLayoutEffectWithArgs
    - captureWrapperProps
    - subscribeUpdates
    - checkForUpdates
    - unsubscribeWrapper
    - strictEqual
    - connect
    - wrapWithConnect
    - returned
    - ConnectFunction
    - selector
    - subscribe
    - forwardConnectRef
    - Provider
    - createReduxContextHook
    - useReduxContext2
    - createStoreHook
    - useStore2
    - createDispatchHook
    - useDispatch2
    - refEquality
    - createSelectorHook
    - useSelector2
    - as
    - as
    - to
    - invariant
    - getRect
    - expand
    - shrink
    - shift
    - createBox
    - parse
    - getWindowScroll
    - offset
    - withScroll
    - calculateBox
    - getBox
    - rafSchd
    - wrapperFn
    - formatProdErrorMessage
    - randomString
    - isPlainObject
    - miniKindOf
    - ctorName
    - isError
    - isDate
    - kindOf
    - createStore
    - ensureCanMutateNextListeners
    - getState
    - subscribe
    - unsubscribe
    - dispatch
    - replaceReducer
    - observable
    - observeState
    - legacy_createStore
    - warning
    - getUnexpectedStateShapeWarningMessage
    - assertReducerShape
    - combineReducers
    - combination
    - bindActionCreator
    - bindActionCreators
    - compose
    - applyMiddleware
    - dispatch
    - isAction
    - 2
    - getDevMessage
    - getFormattedMessage
    - log
    - noop
    - getOptions
    - bindEvents
    - unbind
    - unbindAll
    - toString
    - invariant
    - onWindowError
    - getCallbacks
    - setCallbacks
    - position
    - onDragStart
    - withLocation
    - withCombine
    - onDragUpdate
    - returnedToStart
    - onDragEnd
    - isEqual
    - areInputsEqual
    - useMemo
    - initial
    - useCallback
    - add
    - subtract
    - 1
    - negate
    - patch
    - distance
    - 1
    - apply
    - executeClip
    - offsetByPosition
    - getCorners
    - 1
    - increase
    - clip
    - getSubject
    - scrollDroppable
    - memoizeOne
    - memoized
    - clear
    - tryGetDestination
    - tryGetCombine
    - moveToNextCombine
    - getImpact
    - isHomeOf
    - isWithin
    - isPartiallyVisibleThroughFrame
    - isTotallyVisibleThroughFrame
    - isTotallyVisibleThroughFrameOnAxis
    - getDroppableDisplaced
    - isVisibleInDroppable
    - isVisibleInViewport
    - 1
    - isPartiallyVisible
    - isTotallyVisible
    - isTotallyVisibleOnAxis
    - getShouldAnimate
    - getTarget
    - getDisplacementGroups
    - process
    - getIndexOfLastItem
    - goAtEnd
    - calculateReorderImpact
    - didStartAfterCritical
    - fromCombine
    - fromReorder
    - moveToNextIndex
    - getCombinedItemDisplacement
    - whenCombining
    - distanceFromStartToBorderBoxCenter
    - distanceFromEndToBorderBoxCenter
    - getCrossAxisBorderBoxCenter
    - goAfter
    - goBefore
    - goIntoStart
    - whenReordering
    - withDroppableDisplacement
    - getResultWithoutDroppableDisplacement
    - getPageBorderBoxCenterFromImpact
    - scrollViewport
    - getDraggables
    - tryGetVisible
    - speculativelyIncrease
    - withViewportDisplacement
    - getClientFromPageBorderBoxCenter
    - isTotallyVisibleInNewLocation
    - moveToNextPlace
    - getKnownActive
    - getBestCrossAxisDroppable
    - getCurrentPageBorderBoxCenter
    - getCurrentPageBorderBox
    - getClosestDraggable
    - getDisplacedBy
    - getRequiredGrowthForPlaceholder
    - withMaxScroll
    - addPlaceholder
    - removePlaceholder
    - moveToNewDroppable
    - proposedIndex
    - moveCrossAxis
    - whatIsDraggedOver
    - 1
    - moveInDirection
    - isMovementAllowed
    - isPositionInFrame
    - run
    - getHasOverlap
    - getFurthestAway
    - getDroppableOver
    - offsetRectByPosition
    - withDroppableScroll
    - getIsDisplaced
    - atIndex
    - getReorderImpact
    - getCombineImpact
    - getDragImpact
    - patchDroppableMap
    - clearUnusedPlaceholder
    - recomputePlaceholders
    - update
    - getDraggables
    - recompute
    - getClientBorderBoxCenter
    - refreshSnap
    - getHomeLocation
    - getLiftEffect
    - patchDimensionMap
    - start
    - finish
    - offsetDraggable
    - getFrame
    - adjustAdditionsForScrollChanges
    - publishWhileDraggingInVirtual
    - isSnapping
    - postDroppableChange
    - removeScrollJumpRequest
    - reducer
    - guard
    - beforeInitialCapture
    - 1
    - initialPublish
    - publishWhileDragging
    - collectionStarting
    - updateDroppableScroll
    - updateDroppableIsEnabled
    - updateDroppableIsCombineEnabled
    - move
    - moveByWindowScroll
    - updateViewportMaxScroll
    - moveUp
    - moveDown
    - moveRight
    - moveLeft
    - flush
    - animateDrop
    - completeDrop
    - drop
    - dropPending
    - dropAnimationFinished
    - checkIndexes
    - validateDimensions
    - lift
    - style
    - moveTo
    - getDropDuration
    - getNewHomeClientOffset
    - getDropImpact
    - dropMiddleware
    - getWindowScroll
    - getWindowScrollBinding
    - getScrollListener
    - updateScroll
    - isActive
    - start
    - stop
    - 1
    - scrollListener
    - getExpiringAnnounce
    - result
    - wasCalled
    - getAsyncMarshal
    - execute
    - add
    - flush
    - areLocationsEqual
    - isCombineEqual
    - isCriticalEqual
    - withTimings
    - getDragStart
    - execute
    - getPublisher
    - beforeCapture
    - beforeStart
    - start
    - update
    - flush
    - drop
    - abort
    - responders
    - dropAnimationFinishMiddleware
    - dropAnimationFlushOnScrollMiddleware
    - clear
    - flushDropAnimation
    - dimensionMarshalStopper
    - focus
    - shouldStop
    - autoScroll
    - pendingDrop
    - createStore
    - 1
    - createPublisher
    - collect
    - add
    - remove
    - stop
    - getMaxScroll
    - getDocumentElement
    - getMaxWindowScroll
    - getViewport
    - getInitialPublish
    - shouldPublishUpdate
    - createDimensionMarshal
    - updateDroppableIsEnabled
    - updateDroppableIsCombineEnabled
    - updateDroppableScroll
    - scrollDroppable
    - stopPublishing
    - subscriber
    - startPublishing
    - canStartDrag
    - scrollWindow
    - getScrollableDroppableOver
    - getBestScrollableDroppable
    - getDistanceThresholds
    - getPercentage
    - getValueFromDistance
    - dampenValueByTime
    - getValue
    - getScrollOnAxis
    - adjustForSizeLimits
    - 1
    - getOverlap
    - getRemainder
    - canPartiallyScroll
    - canScrollWindow
    - getWindowOverlap
    - canScrollDroppable
    - getDroppableOverlap
    - getWindowScrollChange
    - getDroppableScrollChange
    - scroll
    - createFluidScroller
    - tryScroll
    - 1
    - fakeScrollCallback
    - stop
    - createJumpScroller
    - moveByOffset
    - scrollDroppableAsMuchAsItCan
    - scrollWindowAsMuchAsItCan
    - jumpScroller
    - createAutoScroller
    - scroll
    - dragHandle
    - draggable
    - droppable
    - makeGetSelector
    - getStyles
    - 1
    - 1
    - 1
    - getHead
    - createStyleEl
    - useStyleMarshal
    - remove
    - querySelectorAll
    - getWindowFromEl
    - isHtmlElement
    - findDragHandle
    - useFocusMarshal
    - register
    - unregister
    - tryGiveFocus
    - tryShiftRecord
    - tryRestoreFocusRecorded
    - tryRecordFocus
    - clearFrameOnUnmount
    - createRegistry
    - subscribe
    - unsubscribe
    - notify
    - findDraggableById
    - getDraggableById
    - findDroppableById
    - getDroppableById
    - clean
    - useRegistry
    - unmount
    - getBodyElement
    - getId
    - useAnnouncer
    - setup
    - cleanup
    - remove
    - useUniqueId
    - getElementId
    - useHiddenTextElement
    - mount
    - unmount
    - getVersion
    - isSatisfied
    - checkReactVersion
    - checkDoctype
    - useDev
    - useDevSetupWarning
    - useStartupValidation
    - usePrevious
    - create
    - isClaimed
    - isActive
    - claim
    - release
    - tryAbandon
    - isDragging
    - preventStandardKeyEvents
    - supportedEventName
    - isSloppyClickThresholdExceeded
    - getCaptureBindings
    - useMouseSensor
    - onMouseDown
    - listenForCapture
    - bindCapturingEvents
    - startPendingDrag
    - mount
    - unmount
    - noop
    - getDraggingBindings
    - cancel
    - drop
    - useKeyboardSensor
    - onKeyDown
    - stop
    - tryStartCapture
    - mount
    - unmount
    - getWindowBindings
    - getHandleBindings
    - useTouchSensor
    - getPhase
    - setPhase
    - onTouchStart
    - listenForCapture
    - bindCapturingEvents
    - unbindAll
    - startDragging
    - startPendingDrag
    - mount
    - unmount
    - webkitHack
    - useValidateSensorHooks
    - isAnInteractiveElement
    - isEventInInteractiveElement
    - getBorderBoxCenterPosition
    - isElement
    - supportedMatchesName
    - closestPonyfill
    - closest
    - getSelector
    - findClosestDragHandleFromEvent
    - tryGetClosestDraggableIdFromEvent
    - findDraggable
    - preventDefault
    - isActive
    - canStart
    - tryStart
    - getShouldRespectForcePress
    - isLockActive
    - tryDispatch
    - lift
    - completed
    - finish
    - fluidLift
    - 1
    - snapLift
    - abortPreDrag
    - useSensorMarshal
    - lockAPI
    - tryAbandonLock
    - listenToStore
    - tryReleaseLock
    - createResponders
    - onBeforeCapureCallback
    - createAutoScrollerOptions
    - getStore
    - App
    - useUniqueContextId
    - DragDropContext
    - getDraggingTransition
    - getDraggingOpacity
    - getShouldDraggingAnimate
    - getDraggingStyle
    - getSecondaryStyle
    - getStyle
    - getDimension
    - useDraggablePublisher
    - checkIsValidInnerRef
    - useValidation
    - prefix
    - useClonePropValidation
    - useRequiredContext
    - preventHtml5Dnd
    - Draggable
    - isStrictEqual
    - whatIsDraggedOverFromResult
    - getCombineWithFromResult
    - getCombineWithFromImpact
    - getDraggableSelector
    - selector
    - getSecondarySnapshot
    - getSecondarySelector
    - getFallback
    - getProps
    - selector
    - 1
    - selector
    - PrivateDraggable
    - PublicDraggable
    - isEqual
    - isEither
    - isBoth
    - isElementScrollable
    - isBodyScrollable
    - getClosestScrollable
    - checkForNestedScrollContainers
    - getScroll
    - getIsFixed
    - getEnv
    - getDroppableDimension
    - frame
    - getClient
    - getDimension
    - closest
    - getListenerOptions
    - getClosestScrollableFromDrag
    - useDroppablePublisher
    - noop
    - getSize
    - getStyle
    - Placeholder
    - isBoolean
    - runChecks
    - required
    - boolean
    - ref
    - placeholder
    - hasClone
    - hasNoPlaceholder
    - useValidation
    - onClose
    - Droppable
    - getClone
    - getBody
    - attachDefaultPropsToOwnProps
    - isMatchingType
    - getDraggable
    - makeMapStateToProps
    - selector
    - ConnectedDroppable
    - ChevronRightIcon
    - ChevronDownIcon
    - UserCircleIcon
    - ClipboardDocumentCheckIcon
    - BookmarkIcon
  Comments:
    //# sourceMappingURL=module.compiled.js.map
    //# sourceMappingURL=react-jsx-dev-runtime.js.map
    //# sourceMappingURL=react.js.map
    //# sourceMappingURL=react-dom.js.map
    /**
 * @license React
 * use-sync-external-store-with-selector.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    // src/utils/react.ts
    // src/hooks/useSelector.ts
    // src/utils/react-is.ts
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/utils/warning.ts
    // src/connect/verifySubselectors.ts
    // src/connect/selectorFactory.ts
    // src/utils/bindActionCreators.ts
    // src/utils/isPlainObject.ts
    // src/utils/verifyPlainObject.ts
    // src/connect/wrapMapToProps.ts
    // src/connect/invalidArgFactory.ts
    // src/connect/mapDispatchToProps.ts
    // @ts-ignore
    // @ts-ignore
    // src/connect/mapStateToProps.ts
    // @ts-ignore
    // src/connect/mergeProps.ts
    // src/utils/batch.ts
    // src/utils/Subscription.ts
    // src/utils/useIsomorphicLayoutEffect.ts
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/utils/shallowEqual.ts
    // src/utils/hoistStatics.ts
    // src/components/Context.ts
    /* @__PURE__ */
    /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/components/connect.tsx
    // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.
    // @ts-ignore
    // use React's forwardRef to expose a ref of the wrapped component
    // the context consumer to use
    /* @__PURE__ */
    // @ts-ignore
    /* @__PURE__ */
    // @ts-ignore
    /* @__PURE__ */
    // @ts-ignore
    // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing
    // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,
    // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.
    // @ts-ignore
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/components/Provider.tsx
    /* @__PURE__ */
    /* @__PURE__ */
    // src/hooks/useReduxContext.ts
    /* @__PURE__ */
    // src/hooks/useStore.ts
    // @ts-ignore
    /* @__PURE__ */
    // src/hooks/useDispatch.ts
    /* @__PURE__ */
    //redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization", {
    /* @__PURE__ */
    // src/exports.ts
    //# sourceMappingURL=react-redux.mjs.map
    // src/utils/formatProdErrorMessage.ts
    //redux.js.org/Errors?code=${code} for the full message or use the non-minified dev environment for full errors. `;
    // src/utils/symbol-observable.ts
    /* @__PURE__ */
    // src/utils/actionTypes.ts
    // src/utils/isPlainObject.ts
    // src/utils/kindOf.ts
    // src/createStore.ts
    //redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
    /* @__PURE__ */
    /* @__PURE__ */
    //redux.js.org/api/store#subscribelistener for more details.");
    //redux.js.org/api/store#subscribelistener for more details.");
    //redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`);
    /**
       * The minimal observable subscription method.
       * @param observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
    // src/utils/warning.ts
    // src/combineReducers.ts
    /*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.`);
        }
    });
}
function combineReducers(reducers) {
    const reducerKeys = Object.keys(reducers);
    const finalReducers = {};
    for(let i = 0; i < reducerKeys.length; i++){
        const key = reducerKeys[i];
        if ("TURBOPACK compile-time truthy", 1) {
            if (typeof reducers[key] === "undefined") {
                warning(`No reducer provided for key "${key}"`);
            }
        }
        if (typeof reducers[key] === "function") {
            finalReducers[key] = reducers[key];
        }
    }
    const finalReducerKeys = Object.keys(finalReducers);
    let unexpectedKeyCache;
    if (("TURBOPACK compile-time value", "development") !== "production") {
        unexpectedKeyCache = {};
    }
    let shapeAssertionError;
    try {
        assertReducerShape(finalReducers);
    } catch (e) {
        shapeAssertionError = e;
    }
    return function combination(state = {}, action) {
        if (shapeAssertionError) {
            throw shapeAssertionError;
        }
        if ("TURBOPACK compile-time truthy", 1) {
            const warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
            if (warningMessage) {
                warning(warningMessage);
            }
        }
        let hasChanged = false;
        const nextState = {};
        for(let i = 0; i < finalReducerKeys.length; i++){
            const key = finalReducerKeys[i];
            const reducer = finalReducers[key];
            const previousStateForKey = state[key];
            const nextStateForKey = reducer(previousStateForKey, action);
            if (typeof nextStateForKey === "undefined") {
                const actionType = action && action.type;
                throw new Error(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : `When called with an action of type ${actionType ? `"${String(actionType)}"` : "(unknown type)"}, the slice reducer for key "${key}" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.`);
            }
            nextState[key] = nextStateForKey;
            hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
        }
        hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
        return hasChanged ? nextState : state;
    };
}
// src/bindActionCreators.ts
function bindActionCreator(actionCreator, dispatch) {
    return function(...args) {
        return dispatch(actionCreator.apply(this, args));
    };
}
function bindActionCreators(actionCreators, dispatch) {
    if (typeof actionCreators === "function") {
        return bindActionCreator(actionCreators, dispatch);
    }
    if (typeof actionCreators !== "object" || actionCreators === null) {
        throw new Error(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : `bindActionCreators expected an object or a function, but instead received: '${kindOf(actionCreators)}'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?`);
    }
    const boundActionCreators = {};
    for(const key in actionCreators){
        const actionCreator = actionCreators[key];
        if (typeof actionCreator === "function") {
            boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
        }
    }
    return boundActionCreators;
}
// src/compose.ts
function compose(...funcs) {
    if (funcs.length === 0) {
        return (arg)=>arg;
    }
    if (funcs.length === 1) {
        return funcs[0];
    }
    return funcs.reduce((a, b)=>(...args)=>a(b(...args)));
}
// src/applyMiddleware.ts
function applyMiddleware(...middlewares) {
    return (createStore2)=>(reducer, preloadedState)=>{
            const store = createStore2(reducer, preloadedState);
            let dispatch = ()=>{
                throw new Error(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
            };
            const middlewareAPI = {
                getState: store.getState,
                dispatch: (action, ...args)=>dispatch(action, ...args)
            };
            const chain = middlewares.map((middleware)=>middleware(middlewareAPI));
            dispatch = compose(...chain)(store.dispatch);
            return {
                ...store,
                dispatch
            };
        };
}
// src/utils/isAction.ts
function isAction(action) {
    return isPlainObject(action) && "type" in action && typeof action.type === "string";
}
;
 //# sourceMappingURL=redux.mjs.map
}}),
"[project]/node_modules/@hello-pangea/dnd/dist/dnd.esm.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "DragDropContext": (()=>DragDropContext),
    "Draggable": (()=>PublicDraggable),
    "Droppable": (()=>ConnectedDroppable),
    "useKeyboardSensor": (()=>useKeyboardSensor),
    "useMouseSensor": (()=>useMouseSensor),
    "useTouchSensor": (()=>useTouchSensor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-dom.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/react-redux/dist/react-redux.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$box$2d$model$2f$dist$2f$css$2d$box$2d$model$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/css-box-model/dist/css-box-model.esm.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$raf$2d$schd$2f$dist$2f$raf$2d$schd$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/raf-schd/dist/raf-schd.esm.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/redux/dist/redux.mjs [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
const isProduction$1 = ("TURBOPACK compile-time value", "development") === 'production';
const spacesAndTabs = /[ \t]{2,}/g;
const lineStartWithSpaces = /^[ \t]*/
    //github.com/hello-pangea/dnd/blob/main/docs/patterns/virtual-lists.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/doctype.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/using-inner-ref.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/how-we-detect-scroll-containers.md
    //github.com/atlassian/react-beautiful-dnd/issues/131
    //github.com/hello-pangea/dnd/blob/main/docs/api/droppable.md
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=node_modules_f05178._.js.map

File: ./frontend/.next/server/chunks/ssr/[root of the server]__637a60._.js
  JavaScript Functions:
    - TaskDetails
    - fetchData
    - handleChange
    - getSegmentValue
    - _export
    - isGroupSegment
    - isParallelRouteSegment
    - addSearchParamsIfPageSegment
    - _export
    - isRedirectError
    - _export
    - getRedirectError
    - redirect
    - permanentRedirect
    - getURLFromRedirectError
    - getRedirectTypeFromError
    - getRedirectStatusCodeFromError
    - _export
    - isHTTPAccessFallbackError
    - getAccessFallbackHTTPStatus
    - getAccessFallbackErrorTypeByStatus
    - allows
    - notFound
    - allows
    - forbidden
    - allows
    - unauthorized
    - _export
    - isDynamicServerError
    - _export
    - isBailoutToCSRError
    - isNextRouterError
    - _export
    - isStaticGenBailoutError
    - constructs
    - makeHangingPromise
    - ignoreReject
    - _export
    - _export
    - _interop_require_default
    - createDynamicTrackingState
    - createDynamicValidationState
    - getFirstDynamicReason
    - markCurrentScopeAsDynamic
    - trackFallbackParamAccessed
    - throwToInterruptStaticGeneration
    - trackDynamicDataInDynamicRender
    - abortOnSynchronousDynamicDataAccess
    - abortOnSynchronousPlatformIOAccess
    - trackSynchronousPlatformIOAccessInDev
    - abortAndThrowOnSynchronousRequestDataAccess
    - Postpone
    - postponeWithTracking
    - createPostponeReason
    - isDynamicPostpone
    - isDynamicPostponeReason
    - createPrerenderInterruptedError
    - isPrerenderInterruptedError
    - accessedDynamicData
    - consumeDynamicAccess
    - formatDynamicAPIAccesses
    - assertPostpone
    - createPostponedAbortSignal
    - annotateDynamicAccess
    - useDynamicRouteParams
    - trackAllowedDynamicAccess
    - createErrorWithComponentStack
    - throwIfDisallowedDynamic
    - isDynamicUsageError
    - isPostpone
    - unstable_rethrow
    - _export
    - bailoutToClientRendering
    - _export
    - useSearchParams
    - readonlySearchParams
    - usePathname
    - useRouter
    - useParams
    - getSelectedLayoutSegmentPath
    - useSelectedLayoutSegments
    - useSelectedLayoutSegment
    - ArrowsPointingOutIcon
    - XMarkIcon
  Comments:
    // ✅ Corrected import
    // ✅ Get taskId from URL
    // ✅ Extract taskId correctly
    //127.0.0.1:5000/api/tasks/${taskId}`);
    //127.0.0.1:5000/api/projects");
    //127.0.0.1:5000/api/contributors");
    //127.0.0.1:5000/api/tasks/${taskId}`, {
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=module.compiled.js.map
    //# sourceMappingURL=react-jsx-dev-runtime.js.map
    //# sourceMappingURL=react.js.map
    //# sourceMappingURL=app-router-context.js.map
    //# sourceMappingURL=hooks-client-context.js.map
    //# sourceMappingURL=get-segment-value.js.map
    // Use array[0] for performant purpose
    //# sourceMappingURL=segment.js.map
    /*#__PURE__*/
    //# sourceMappingURL=redirect-status-code.js.map
    /*#__PURE__*/
    //# sourceMappingURL=redirect-error.js.map
    /** The URL to redirect to */
    /** The URL to redirect to */
    // Slices off the beginning of the digest that contains the code and the
    // separating ';'.
    //# sourceMappingURL=redirect.js.map
    //# sourceMappingURL=http-access-fallback.js.map
    /**
 * This function allows you to render the [not-found.js file](https://nextjs.org/docs/app/api-reference/file-conventions/not-found)
 * within a route segment as well as inject a tag.
 *
 * `notFound()` can be used in
 * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),
 * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and
 * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).
 *
 * - In a Server Component, this will insert a `<meta name="robots" content="noindex" />` meta tag and set the status code to 404.
 * - In a Route Handler or Server Action, it will serve a 404 to the caller.
 *
 * Read more: [Next.js Docs: `notFound`](https://nextjs.org/docs/app/api-reference/functions/not-found)
 */
    // eslint-disable-next-line no-throw-literal
    //# sourceMappingURL=not-found.js.map
    // TODO: Add `forbidden` docs
    /**
 * @experimental
 * This function allows you to render the [forbidden.js file](https://nextjs.org/docs/app/api-reference/file-conventions/forbidden)
 * within a route segment as well as inject a tag.
 *
 * `forbidden()` can be used in
 * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),
 * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and
 * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).
 *
 * Read more: [Next.js Docs: `forbidden`](https://nextjs.org/docs/app/api-reference/functions/forbidden)
 */
    // eslint-disable-next-line no-throw-literal
    //# sourceMappingURL=forbidden.js.map
    // TODO: Add `unauthorized` docs
    /**
 * @experimental
 * This function allows you to render the [unauthorized.js file](https://nextjs.org/docs/app/api-reference/file-conventions/unauthorized)
 * within a route segment as well as inject a tag.
 *
 * `unauthorized()` can be used in
 * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),
 * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and
 * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).
 *
 *
 * Read more: [Next.js Docs: `unauthorized`](https://nextjs.org/docs/app/api-reference/functions/unauthorized)
 */
    // eslint-disable-next-line no-throw-literal
    //# sourceMappingURL=unauthorized.js.map
    //# sourceMappingURL=hooks-server-context.js.map
    // This has to be a shared module which is shared between client component error boundary and dynamic component
    //# sourceMappingURL=bailout-to-csr.js.map
    //# sourceMappingURL=is-next-router-error.js.map
    //# sourceMappingURL=static-generation-bailout.js.map
    /**
 * This function constructs a promise that will never resolve. This is primarily
 * useful for dynamicIO where we use promise resolution timing to determine which
 * parts of a render can be included in a prerender.
 *
 * @internal
 */
    // We are fine if no one actually awaits this promise. We shouldn't consider this an unhandled rejection so
    // we attach a noop catch handler here to suppress this warning. If you actually await somewhere or construct
    // your own promise out of it you'll need to ensure you handle the error when it rejects.
    //# sourceMappingURL=dynamic-rendering-utils.js.map
    //# sourceMappingURL=metadata-constants.js.map
    /**
 * The functions provided by this module are used to communicate certain properties
 * about the currently running code so that Next.js can make decisions on how to handle
 * the current execution in different rendering modes such as pre-rendering, resuming, and SSR.
 *
 * Today Next.js treats all code as potentially static. Certain APIs may only make sense when dynamically rendering.
 * Traditionally this meant deopting the entire render to dynamic however with PPR we can now deopt parts
 * of a React tree as dynamic while still keeping other parts static. There are really two different kinds of
 * Dynamic indications.
 *
 * The first is simply an intention to be dynamic. unstable_noStore is an example of this where
 * the currently executing code simply declares that the current scope is dynamic but if you use it
 * inside unstable_cache it can still be cached. This type of indication can be removed if we ever
 * make the default dynamic to begin with because the only way you would ever be static is inside
 * a cache scope which this indication does not affect.
 *
 * The second is an indication that a dynamic data source was read. This is a stronger form of dynamic
 * because it means that it is inappropriate to cache this at all. using a dynamic data source inside
 * unstable_cache should error. If you want to use some dynamic data inside unstable_cache you should
 * read that data outside the cache and pass it in as an argument to the cached function.
 */
    /*#__PURE__*/
    // inside cache scopes marking a scope as dynamic has no effect because the outer cache scope
    // creates a cache boundary. This is subtly different from reading a dynamic data source which is
    // forbidden inside a cache scope.
    // If we're forcing dynamic rendering or we're forcing static rendering, we
    // don't need to do anything here because the entire page is already dynamic
    // or it's static and it should not throw or postpone here.
    //nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);
    // We aren't prerendering but we are generating a static page. We need to bail out of static generation
    //nextjs.org/docs/messages/dynamic-server-error`);
    // We aren't prerendering but we are generating a static page. We need to bail out of static generation
    //nextjs.org/docs/messages/dynamic-server-error`);
    // inside cache scopes marking a scope as dynamic has no effect because the outer cache scope
    // creates a cache boundary. This is subtly different from reading a dynamic data source which is
    // forbidden inside a cache scope.
    // Despite it's name we don't actually abort unless we have a controller to call abort on
    // There are times when we let a prerender run long to discover caches where we want the semantics
    // of tracking dynamic access without terminating the prerender early
    // When we aren't debugging, we don't need to create another error for the
    // stack trace.
    // We don't actually have a controller to abort but we do the semantic equivalent by
    // advancing the request store out of prerender mode
    // We always log Request Access in dev at the point of calling the function
    // So we mark the dynamic validation as not requiring it to be printed
    // When we aren't debugging, we don't need to create another error for the
    // stack trace.
    //nextjs.org/docs/messages/ppr-caught-error`;
    //nextjs.org/docs/messages/ppr-caught-error');
    // We mutate because we only call this once we are no longer writing
    // to the dynamicTrackingState and it's more efficient than creating a new
    // array.
    // Remove the "Error: " prefix from the first line of the stack trace as
    // well as the first 4 lines of the stack trace which is the distance
    // from the user code and the `new Error().stack` call.
    // Exclude Next.js internals from the stack trace.
    // Exclude anonymous functions from the stack trace.
    // Exclude Node.js internals from the stack trace.
    // We get our hands on a postpone instance by calling postpone and catching the throw
    // There are fallback route params, we should track these as dynamic
    // accesses.
    // We're prerendering with dynamicIO or PPR or both
    // We are in a prerender with dynamicIO semantics
    // We are going to hang here and never resolve. This will cause the currently
    // rendering component to effectively be a dynamic hole
    // We're prerendering with PPR
    // We don't need to track that this is dynamic. It is only so when something else is also dynamic.
    //nextjs.org/docs/messages/next-prerender-missing-suspense`;
    // In dev we already log errors about sync dynamic access. But during builds we need to ensure
    // the offending sync error is logged before we exit the build
    // The actual error should have been logged when the sync access ocurred
    //# sourceMappingURL=dynamic-rendering.js.map
    //# sourceMappingURL=is-dynamic-usage-error.js.map
    //# sourceMappingURL=is-postpone.js.map
    //# sourceMappingURL=unstable-rethrow.js.map
    /** @internal */
    //nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams');
    /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */
    /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */
    /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */
    /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */
    //# sourceMappingURL=navigation.react-server.js.map
    //# sourceMappingURL=server-inserted-html.js.map
    //# sourceMappingURL=bailout-to-client-rendering.js.map
    // In the case where this is `null`, the compat types added in
    // `next-env.d.ts` will add a new overload that changes the return type to
    // include `null`.
    // When the router is not ready in pages, we won't have the search params
    // available.
    // AsyncLocalStorage should not be included in the client bundle.
    // TODO-APP: handle dynamic = 'force-static' here and on the client
    // In the case where this is `null`, the compat types added in `next-env.d.ts`
    // will add a new overload that changes the return type to include `null`.
    /** Get the canonical parameters from the current level to the leaf node. */
    // Client components API
    // Use the provided parallel route key on the first parallel route
    // After first parallel route prefer children, if there's no children pick the first parallel route.
    // @ts-expect-error This only happens in `pages`. Type is overwritten in navigation.d.ts
    // if the default slot is showing, we return null since it's not technically "selected" (it's a fallback)
    // and returning an internal value like `__DEFAULT__` would be confusing.
    //# sourceMappingURL=navigation.js.map
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=%5Broot%20of%20the%20server%5D__637a60._.js.map

File: ./frontend/.next/server/chunks/ssr/_02a025._.js
  JavaScript Functions:
    - from
    - from
  Comments:
    // We inject the tree and pages here so that we can use them in the route
    // module.
    //", props.params, "favicon.ico") + `?${__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$225b$project$5d2f$src$2f$app$2f$favicon$2e$ico__$5b$app$2d$rsc$5d$__$28$static$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29$__["default"].src.split("/").splice(-1)[0]}`,
    // The following aren't used in production.
    //# sourceMappingURL=app-page.js.map
    //# sourceMappingURL=_02a025._.js.map

File: ./frontend/.next/server/chunks/ssr/[root of the server]__c584f0._.js
  JavaScript Functions:
    - TaskDetails
    - fetchData
    - handleChange
  Comments:
    // ✅ Get the taskId from URL
    // ✅ Extract taskId correctly
    // Fetch task details
    //127.0.0.1:5000/api/tasks/${taskId}`);
    // Fetch projects
    //127.0.0.1:5000/api/projects");
    // Fetch contributors
    //127.0.0.1:5000/api/contributors");
    // ✅ This now correctly runs on taskId change
    // ✅ Handle Input Changes
    // ✅ Save Changes to Flask API
    //127.0.0.1:5000/api/tasks/${taskId}`, {
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=%5Broot%20of%20the%20server%5D__c584f0._.js.map

File: ./frontend/.next/server/chunks/ssr/[root of the server]__5f50db._.js
  JavaScript Functions:
    - RootLayout
  Comments:
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=react-jsx-dev-runtime.js.map
    //# sourceMappingURL=%5Broot%20of%20the%20server%5D__5f50db._.js.map

File: ./frontend/.next/server/chunks/ssr/node_modules_9b9ef4._.js
  JavaScript Functions:
    - _interop_require_default
    - _export
    - _export
    - handleSlug
    - getSortedRoutes
    - getSortedRouteObjects
    - ensures
    - ensureLeadingSlash
    - _export
    - isGroupSegment
    - isParallelRouteSegment
    - addSearchParamsIfPageSegment
    - _export
    - normalizeAppPath
    - normalizeRscURL
    - _export
    - isInterceptionRouteAppPath
    - extractInterceptionRouteInformation
    - isDynamicRoute
    - _export
    - ensures
    - normalizePathSep
    - denormalizePagePath
    - _export
    - execOnce
    - isAbsoluteUrl
    - getLocationOrigin
    - getURL
    - getDisplayName
    - isResSent
    - normalizeRepeatedSlashes
    - loadGetInitialProps
    - stringifyError
    - normalizePagePath
    - getPageFiles
    - _export
    - htmlEscapeJsonString
    - _export
    - getObjectClassLabel
    - isPlainObject
    - _export
    - isError
    - safeStringify
    - getProperError
    - encodeURIPath
    - _export
    - isThenable
    - _logProxy
    - disable
    - createComponentLogger
    - getBaggage
    - getActiveBaggage
    - setBaggage
    - deleteBaggage
    - createBaggage
    - baggageEntryMetadataFromString
    - createContextKey
    - getValue
    - setValue
    - deleteValue
    - logProxy
    - _consoleFunc
    - createLogLevelDiagLogger
    - _filterFunc
    - registerGlobal
    - getGlobal
    - unregisterGlobal
    - _makeCompatibilityCheck
    - isExactmatch
    - _reject
    - _accept
    - isCompatible
    - createNoopMeter
    - isSpanContext
    - getSpan
    - getActiveSpan
    - setSpan
    - deleteSpan
    - setSpanContext
    - getSpanContext
    - validateKey
    - validateValue
    - createTraceState
    - isValidTraceId
    - isValidSpanId
    - isSpanContextValid
    - wrapSpanContext
    - __nccwpck_require__
    - _export
    - isBubbledError
    - closeSpanWithError
    - getSpanId
    - onCleanup
    - getTracer
    - getTracedMetadata
    - _export
    - isBlockedPage
    - cleanAmpPath
    - debounce
    - was
    - was
    - run
    - calls
    - again
    - can
    - toLocaleString
    - prettyBytes
    - _export
    - _interop_require_default
    - _getRequireWildcardCache
    - _interop_require_wildcard
    - getDocumentFiles
    - getPolyfillScripts
    - hasComponentProps
    - AmpStyles
    - hasStyles
    - getDynamicChunks
    - getScripts
    - lowPriorityScripts
    - getPreNextWorkerScripts
    - getPreNextScripts
    - beforeInteractiveScripts
    - getHeadHTMLProps
    - getAmpPath
    - getNextFontLinkTags
    - traceMetaTags
    - handleDocumentScriptLoaderItems
    - headChildren
    - bodyChildren
    - Html
    - Main
    - InternalFunctionDocument
  Comments:
    // Note: This file is JS because it's used by the taskfile-swc.js file, which is JS.
    // Keep file changes in sync with the corresponding `.d.ts` files.
    /**
 * These are the browser versions that support all of the following:
 * static import: https://caniuse.com/es6-module
 * dynamic import: https://caniuse.com/es6-module-dynamic-import
 * import.meta: https://caniuse.com/mdn-javascript_operators_import_meta
 */
    //# sourceMappingURL=modern-browserslist-target.js.map
    /*#__PURE__*/
    //# sourceMappingURL=constants.js.map
    // The next segment in the urlPaths list
    // Check if the segment matches `[something]`
    // Strip `[` and `]`, leaving only `something`
    // Strip optional `[` and `]`, leaving only `something`
    // Strip `...`, leaving only `something`
    // If the specific segment already has a slug but the slug is not `something`
    // This prevents collisions like:
    // pages/[post]/index.js
    // pages/[id]/index.js
    // Because currently multiple dynamic params on the same segment level are not supported
    // TODO: This error seems to be confusing for users, needs an error link, the description can be based on above comment.
    // slugName is kept as it can only be one particular slugName
    // nextSegment is overwritten to [[...]] so that it can later be sorted specifically
    // slugName is kept as it can only be one particular slugName
    // nextSegment is overwritten to [...] so that it can later be sorted specifically
    // slugName is kept as it can only be one particular slugName
    // nextSegment is overwritten to [] so that it can later be sorted specifically
    // If this UrlNode doesn't have the nextSegment yet we create a new child UrlNode
    // First the UrlNode is created, and every UrlNode can have only 1 dynamic segment
    // Eg you can't have pages/[post]/abc.js and pages/[hello]/something-else.js
    // Only 1 dynamic segment per nesting level
    // So in the case that is test/integration/dynamic-routing it'll be this:
    // pages/[post]/comments.js
    // pages/blog/[post]/comment/[id].js
    // Both are fine because `pages/[post]` and `pages/blog` are on the same level
    // So in this case `UrlNode` created here has `this.slugName === 'post'`
    // And since your PR passed through `slugName` as an array basically it'd including it in too many possibilities
    // Instead what has to be passed through is the upwards path's dynamic names
    // Here the `root` gets injected multiple paths, and insert will break them up into sublevels
    // Smoosh will then sort those sublevels up to the point where you get the correct route definition priority
    // We're assuming here that all the pathnames are unique, that way we can
    // sort the list and use the index as the key.
    // Sort the pathnames.
    // Map the sorted pathnames back to the original objects using the new sorted
    // index.
    //# sourceMappingURL=sorted-routes.js.map
    /**
 * For a given page path, this function ensures that there is a leading slash.
 * If there is not a leading slash, one is added, otherwise it is noop.
 */
    //# sourceMappingURL=ensure-leading-slash.js.map
    // Use array[0] for performant purpose
    //# sourceMappingURL=segment.js.map
    // Empty segments are ignored.
    // Groups are ignored.
    // Parallel segments are ignored.
    // The last segment (if it's a leaf) should be ignored.
    //# sourceMappingURL=app-paths.js.map
    // TODO-APP: add more serious validation
    // normalize the path, e.g. /(blog)/feed -> /feed
    // (.) indicates that we should match with sibling routes, so we just need to append the intercepted route to the intercepting route
    // (..) indicates that we should match at one level up, so we need to remove the last segment of the intercepting route
    // (...) will match the route segment in the root directory, so we need to use the root directory to prepend the intercepted route
    // (..)(..) indicates that we should match at two levels up, so we need to remove the last two segments of the intercepting route
    //# sourceMappingURL=interception-routes.js.map
    // Identify /[param]/ in route string
    //# sourceMappingURL=is-dynamic.js.map
    //# sourceMappingURL=index.js.map
    /**
 * For a given page path, this function ensures that there is no backslash
 * escaping slashes in the path. Example:
 *  - `foo\/bar\/baz` -> `foo/bar/baz`
 */
    //# sourceMappingURL=normalize-path-sep.js.map
    //# sourceMappingURL=denormalize-page-path.js.map
    // Scheme: https://tools.ietf.org/html/rfc3986#section-3.1
    // Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3
    //" + hostname + (port ? ':' + port : '');
    // first we replace any non-encoded backslashes with forward
    // then normalize repeated forward slashes
    //nextjs.org/docs/messages/get-initial-props-as-an-instance-method for more information.';
    // when called from _app `ctx` is nested in `ctx`
    // @ts-ignore pageProps default
    //nextjs.org/docs/messages/empty-object-getInitialProps");
    //# sourceMappingURL=utils.js.map
    //# sourceMappingURL=normalize-page-path.js.map
    //# sourceMappingURL=get-page-files.js.map
    // This utility is based on https://github.com/zertosh/htmlescape
    // License: https://github.com/zertosh/htmlescape/blob/0527ca7156a524d256101bb310a9f970f63078ad/LICENSE
    //# sourceMappingURL=htmlescape.js.map
    /**
   * this used to be previously:
   *
   * `return prototype === null || prototype === Object.prototype`
   *
   * but Edge Runtime expose Object from vm, being that kind of type-checking wrongly fail.
   *
   * It was changed to the current implementation since it's resilient to serialization.
   */
    //# sourceMappingURL=is-plain-object.js.map
    /**
 * Checks whether the given value is a NextError.
 * This can be used to print a more detailed error message with properties like `code` & `digest`.
 */
    // If value is an object and already seen, replace with "[Circular]"
    // provide better error for case where `throw undefined`
    // is called in development
    //nextjs.org/docs/messages/threw-undefined');
    //nextjs.org/docs/messages/threw-undefined');
    //# sourceMappingURL=is-error.js.map
    //# sourceMappingURL=module.compiled.js.map
    //# sourceMappingURL=html-context.js.map
    //# sourceMappingURL=encode-uri-path.js.map
    /**
 * Contains predefined constants for the trace span name in next/server.
 *
 * Currently, next/server/tracer is internal implementation only for tracking
 * next.js's implementation only with known span names defined here.
 **/
    // eslint typescript has a bug with TS enums
    /* eslint-disable no-shadow */
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // nested inner span, does not require parent scope name
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=constants.js.map
    /**
 * Check to see if a value is Thenable.
 *
 * @param promise the maybe-thenable value
 * @returns true if the value is thenable
 */
    //# sourceMappingURL=is-thenable.js.map
    // we want to allow users to use their own version of @opentelemetry/api if they
    // want to, so we try to require it first, and if it fails we fall back to the
    // version that is bundled with Next.js
    // this is because @opentelemetry/api has to be synced with the version of
    // @opentelemetry/tracing that is used, and we don't want to force users to use
    // the version that is bundled with Next.js.
    // the API is ~stable, so this should be fine
    /** we use this map to propagate attributes from nested spans to the top span */
    /**
   * Returns an instance to the trace with configured name.
   * Since wrap / trace can be defined in any place prior to actual trace subscriber initialization,
   * This should be lazily evaluated.
   */
    // Active span is already set, too late to propagate.
    // coerce options form overload
    // Trying to get active scoped span to assign parent. If option specifies parent span manually, will try to use it.
    // If there's error make sure it throws
    // Need to pass down the promise result,
    // it could be react stream response with error { error, stream }
    //# sourceMappingURL=tracer.js.map
    //# sourceMappingURL=utils.js.map
    // The time the debouncing function was first called during this debounce queue.
    // The time the debouncing function was last called.
    // The arguments and this context of the last call to the debouncing function.
    // A helper used to that either invokes the debounced function, or
    // reschedules the timer if a more recent call was made.
    // If the diff is non-positive, then we've waited at least `ms`
    // milliseconds since the last call. Or if we've waited for longer than the
    // max wait time, we must call the debounced function.
    // It's important to clear the timeout id before invoking the debounced
    // function, in case the function calls the debouncing function again.
    // Else, a new call was made after the original timer was scheduled. We
    // didn't clear the timeout (doing so is very slow), so now we need to
    // reschedule the timer for the time difference.
    // The arguments and this context of the most recent call are saved so the
    // debounced function can be invoked with them later.
    // Instead of constantly clearing and scheduling a timer, we record the
    // time of the last call. If a second call comes in before the timer fires,
    // then we'll reschedule in the run function. Doing this is considerably
    // faster.
    // Only schedule a new timer if we're not currently waiting.
    //# sourceMappingURL=utils.js.map
    /*
MIT License

Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
    /*
Formats the given number using `Number#toLocaleString`.
- If locale is a string, the value is expected to be a locale-key (for example: `de`).
- If locale is true, the system default locale is used for translation.
- If no value for locale is specified, the number is returned unmodified.
*/
    //# sourceMappingURL=pretty-bytes.js.map
    /**
 * `Document` component handles the initial `document` markup and renders only on the server side.
 * Commonly used for implementing server side rendering for `css-in-js` libraries.
 */
    /*#__PURE__*/
    /*#__PURE__*/
    /** Set of pages that have triggered a large data warning on production mode. */
    // polyfills.js has to be rendered as nomodule without async
    // It also has to be the first script to load
    /*#__PURE__*/
    // try to parse styles from fragment for backwards compat
    // @ts-ignore Property 'props' does not exist on type ReactElement
    // @ts-ignore Property 'props' does not exist on type ReactElement
    /* Add custom styles before AMP styles to prevent accidental overrides */
    /*#__PURE__*/
    //g, '').replace(/\/\*@ sourceURL=.*?\*\//g, '')
    /*#__PURE__*/
    /*#__PURE__*/
    // disable `nextScriptWorkers` in edge runtime
    // Check to see if the user has defined their own Partytown configuration
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // Use external src if provided
    // Embed inline script if provided with dangerouslySetInnerHTML
    // Embed inline script if provided with children
    //nextjs.org/docs/messages/invalid-script');
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // This assignment is necessary for additional type checking to avoid unsupported attributes in <head>
    // If no font files should preload but there's an entry for the path, add a preconnect tag.
    /*#__PURE__*/
    /*#__PURE__*/
    // Unmanaged files are CSS files that will be handled directly by the
    // webpack runtime (`mini-css-extract-plugin`).
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // Filter out nulled scripts
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // show a warning if Head contains <title> (only in development)
    //nextjs.org/docs/messages/no-document-title");
    //nextjs.org/docs/messages/no-document-viewport-meta");
    // @types/react bug. Returned value from .map will not be `null` if you pass in `[null]`
    //nextjs.org/docs/messages/doc-crossorigin-deprecated');
    // show warning and remove conflicting amp head tags
    // only block if
    // 1. it has a src and isn't pointing to ampproject's CDN
    // 2. it is using dangerouslySetInnerHTML without a type or
    // a type of text/javascript
    //nextjs.org/docs/messages/conflicting-amp-tag`);
    // non-amp mode
    // @types/react bug. Returned value from .map will not be `null` if you pass in `[null]`
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //cdn.ampproject.org/v0.js"
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //cdn.ampproject.org/v0.js"
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // this element is used to mount development styles so the
    // ordering matches production
    // (by default, style-loader injects at the bottom of <head />)
    /*#__PURE__*/
    /*#__PURE__*/
    // Scripts with beforeInteractive can be placed inside Head or <body> so children of both needs to be traversed
    // When using the `next/script` component, register it in script loader.
    //nextjs.org/docs/messages/large-page-data`);
    //nextjs.org/docs/messages/circular-structure`);
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //nextjs.org/docs/messages/doc-crossorigin-deprecated');
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // @ts-ignore
    /*#__PURE__*/
    /**
   * `getInitialProps` hook returns the context object with the addition of `renderPage`.
   * `renderPage` callback executes `React` rendering logic synchronously to support server-rendering wrappers
   */
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // Add a special property to the built-in `Document` component so later we can
    // identify if a user customized `Document` is used or not.
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=_document.js.map
    //# sourceMappingURL=node_modules_9b9ef4._.js.map

File: ./frontend/.next/server/chunks/ssr/node_modules_next_dist_client_components_forbidden-error_b4e556.js
  JavaScript Functions:
    - Forbidden
  Comments:
    /*#__PURE__*/
    //# sourceMappingURL=forbidden-error.js.map
    //# sourceMappingURL=node_modules_next_dist_client_components_forbidden-error_b4e556.js.map

File: ./frontend/.next/server/chunks/ssr/node_modules_next_a3f207._.js
  JavaScript Functions:
    - warnOnce
    - warnOnce
    - getImageBlurSvg
    - _export
    - isStaticRequire
    - isStaticImageData
    - isStaticImport
    - getInt
    - getWidths
    - generateImgAttrs
    - getImgProps
    - qualities
    - loader
    - isWindows
    - picomatch
    - expandRange
    - syntaxError
    - parse
    - globstar
    - eos
    - peek
    - advance
    - remaining
    - consume
    - append
    - negate
    - increment
    - decrement
    - push
    - extglobOpen
    - extglobClose
    - fastpaths
    - globstar
    - create
    - isObject
    - picomatch
    - arrayMatcher
    - isIgnored
    - matcher
    - test
    - matchBase
    - isMatch
    - parse
    - scan
    - compileRe
    - makeRe
    - toRegex
    - isPathSeparator
    - depth
    - scan
    - eos
    - peek
    - advance
    - isObject
    - hasRegexChars
    - isRegexChar
    - escapeRegex
    - toPosixSlashes
    - removeBackslashes
    - escapeLast
    - removePrefix
    - wrapOutput
    - basename
    - __nccwpck_require__
    - _export
    - matchLocalPattern
    - hasLocalMatch
    - _export
    - matchRemotePattern
    - hasRemoteMatch
    - defaultLoader
    - _export
    - getImageProps
    - could
  Comments:
    //# sourceMappingURL=warn-once.js.map
    /**
 * A shared function, used on both client and server, to generate a SVG blur placeholder.
 */
    //www.w3.org/2000/svg' " + viewBox + "%3E%3Cfilter id='b' color-interpolation-filters='sRGB'%3E%3CfeGaussianBlur stdDeviation='" + std + "'/%3E%3CfeColorMatrix values='1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 100 -1' result='s'/%3E%3CfeFlood x='0' y='0' width='100%25' height='100%25'/%3E%3CfeComposite operator='out' in='s'/%3E%3CfeComposite in2='SourceGraphic'/%3E%3CfeGaussianBlur stdDeviation='" + std + "'/%3E%3C/filter%3E%3Cimage width='100%25' height='100%25' x='0' y='0' preserveAspectRatio='" + preserveAspectRatio + "' style='filter: url(%23b);' href='" + blurDataURL + "'/%3E%3C/svg%3E";
    //# sourceMappingURL=image-blur-svg.js.map
    //# sourceMappingURL=image-config.js.map
    // Find all the "vw" percent sizes used in the sizes prop
    // > are actually 3x in the green color, but only 1.5x in the red and
    // > blue colors. Showing a 3x resolution image in the app vs a 2x
    // > resolution image will be visually the same, though the 3x image
    // > takes significantly more data. Even true 3x resolution screens are
    // > wasteful as the human eye cannot see that level of detail without
    // > something like a magnifying glass.
    // https://blog.twitter.com/engineering/en_us/topics/infrastructure/2019/capping-image-fidelity-on-ultra-high-resolution-devices.html
    /*, width * 3*/
    // It's intended to keep `src` the last attribute because React updates
    // attributes in order. If we keep `src` the first one, Safari will
    // immediately start to fetch `src`, before `sizes` and `srcSet` are even
    // updated by React. That causes multiple unnecessary requests if `srcSet`
    // and `sizes` are defined.
    // This bug cannot be reproduced in Chrome or Firefox.
    //nextjs.org/docs/messages/invalid-images-config');
    // Remove property so it's not spread on <img> element
    // This special value indicates that the user
    // didn't define a "loader" prop or "loader" config.
    //nextjs.org/docs/messages/next-image-missing-loader");
    // The user defined a "loader" prop or config.
    // Since the config object is internal only, we
    // must not pass it to the user-defined "loader".
    // https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/Data_URIs
    // Special case to make svg serve as-is to avoid proxying
    // through the built-in Image Optimization API.
    //nextjs.org/docs/messages/export-image-api");
    // React doesn't show the stack trace and there's
    // no `src` to help identify which image, so we
    // instead console.error(ref) during mount.
    // eslint-disable-next-line no-control-regex
    // eslint-disable-next-line no-control-regex
    // should match next-image-loader
    //nextjs.org/docs/messages/placeholder-blur-data-url');
    //nextjs.org/docs/messages/next-image-missing-loader-width");
    //nextjs.org/docs/messages/next-image-upgrade-to-13");
    // assume `data:image/`
    // During `next dev`, we don't want to generate blur placeholders with webpack
    // because it can delay starting the dev server. Instead, `next-image-loader.js`
    // will inline a special url to lazily generate the blur placeholder at request time.
    //# sourceMappingURL=get-img-props.js.map
    /**": "**",
                    "**/
    /**": "**"
                },
                CHAR_0: 48,
                CHAR_9: 57,
                CHAR_UPPERCASE_A: 65,
                CHAR_LOWERCASE_A: 97,
                CHAR_UPPERCASE_Z: 90,
                CHAR_LOWERCASE_Z: 122,
                CHAR_LEFT_PARENTHESES: 40,
                CHAR_RIGHT_PARENTHESES: 41,
                CHAR_ASTERISK: 42,
                CHAR_AMPERSAND: 38,
                CHAR_AT: 64,
                CHAR_BACKWARD_SLASH: 92,
                CHAR_CARRIAGE_RETURN: 13,
                CHAR_CIRCUMFLEX_ACCENT: 94,
                CHAR_COLON: 58,
                CHAR_COMMA: 44,
                CHAR_DOT: 46,
                CHAR_DOUBLE_QUOTE: 34,
                CHAR_EQUAL: 61,
                CHAR_EXCLAMATION_MARK: 33,
                CHAR_FORM_FEED: 12,
                CHAR_FORWARD_SLASH: 47,
                CHAR_GRAVE_ACCENT: 96,
                CHAR_HASH: 35,
                CHAR_HYPHEN_MINUS: 45,
                CHAR_LEFT_ANGLE_BRACKET: 60,
                CHAR_LEFT_CURLY_BRACE: 123,
                CHAR_LEFT_SQUARE_BRACKET: 91,
                CHAR_LINE_FEED: 10,
                CHAR_NO_BREAK_SPACE: 160,
                CHAR_PERCENT: 37,
                CHAR_PLUS: 43,
                CHAR_QUESTION_MARK: 63,
                CHAR_RIGHT_ANGLE_BRACKET: 62,
                CHAR_RIGHT_CURLY_BRACE: 125,
                CHAR_RIGHT_SQUARE_BRACKET: 93,
                CHAR_SEMICOLON: 59,
                CHAR_SINGLE_QUOTE: 39,
                CHAR_SPACE: 32,
                CHAR_TAB: 9,
                CHAR_UNDERSCORE: 95,
                CHAR_VERTICAL_LINE: 124,
                CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
                extglobChars (t) {
                    return {
                        "!": {
                            type: "negate",
                            open: "(?:(?!(?:",
                            close: `))${t.STAR})`
                        },
                        "?": {
                            type: "qmark",
                            open: "(?:",
                            close: ")?"
                        },
                        "+": {
                            type: "plus",
                            open: "(?:",
                            close: ")+"
                        },
                        "*": {
                            type: "star",
                            open: "(?:",
                            close: ")*"
                        },
                        "@": {
                            type: "at",
                            open: "(?:",
                            close: ")"
                        }
                    };
                },
                globChars (t) {
                    return t === true ? C : b;
                }
            };
        },
        697: (t, e, u)=>{
            const n = u(154);
            const o = u(96);
            const { MAX_LENGTH: s, POSIX_REGEX_SOURCE: r, REGEX_NON_SPECIAL_CHARS: a, REGEX_SPECIAL_CHARS_BACKREF: i, REPLACEMENTS: c } = n;
            const expandRange = (t, e)=>{
                if (typeof e.expandRange === "function") {
                    return e.expandRange(...t, e);
                }
                t.sort();
                const u = `[${t.join("-")}]`;
                try {
                    new RegExp(u);
                } catch (e) {
                    return t.map((t)=>o.escapeRegex(t)).join("..");
                }
                return u;
            };
            const syntaxError = (t, e)=>`Missing ${t}: "${e}" - use "\\\\${e}" to match literal characters`;
            const parse = (t, e)=>{
                if (typeof t !== "string") {
                    throw new TypeError("Expected a string");
                }
                t = c[t] || t;
                const u = {
                    ...e
                };
                const p = typeof u.maxLength === "number" ? Math.min(s, u.maxLength) : s;
                let l = t.length;
                if (l > p) {
                    throw new SyntaxError(`Input length: ${l}, exceeds maximum allowed length: ${p}`);
                }
                const f = {
                    type: "bos",
                    value: "",
                    output: u.prepend || ""
                };
                const A = [
                    f
                ];
                const _ = u.capture ? "" : "?:";
                const R = n.globChars(u.windows);
                const E = n.extglobChars(R);
                const { DOT_LITERAL: h, PLUS_LITERAL: g, SLASH_LITERAL: b, ONE_CHAR: C, DOTS_SLASH: y, NO_DOT: $, NO_DOT_SLASH: x, NO_DOTS_SLASH: S, QMARK: H, QMARK_NO_DOT: v, STAR: d, START_ANCHOR: L } = R;
                const globstar = (t)=>`(${_}(?:(?!${L}${t.dot ? y : h}).)*?)`;
                const T = u.dot ? "" : $;
                const O = u.dot ? H : v;
                let k = u.bash === true ? globstar(u) : d;
                if (u.capture) {
                    k = `(${k})`;
                }
                if (typeof u.noext === "boolean") {
                    u.noextglob = u.noext;
                }
                const m = {
                    input: t,
                    index: -1,
                    start: 0,
                    dot: u.dot === true,
                    consumed: "",
                    output: "",
                    prefix: "",
                    backtrack: false,
                    negated: false,
                    brackets: 0,
                    braces: 0,
                    parens: 0,
                    quotes: 0,
                    globstar: false,
                    tokens: A
                };
                t = o.removePrefix(t, m);
                l = t.length;
                const w = [];
                const N = [];
                const I = [];
                let B = f;
                let G;
                const eos = ()=>m.index === l - 1;
                const D = m.peek = (e = 1)=>t[m.index + e];
                const M = m.advance = ()=>t[++m.index] || "";
                const remaining = ()=>t.slice(m.index + 1);
                const consume = (t = "", e = 0)=>{
                    m.consumed += t;
                    m.index += e;
                };
                const append = (t)=>{
                    m.output += t.output != null ? t.output : t.value;
                    consume(t.value);
                };
                const negate = ()=>{
                    let t = 1;
                    while(D() === "!" && (D(2) !== "(" || D(3) === "?")){
                        M();
                        m.start++;
                        t++;
                    }
                    if (t % 2 === 0) {
                        return false;
                    }
                    m.negated = true;
                    m.start++;
                    return true;
                };
                const increment = (t)=>{
                    m[t]++;
                    I.push(t);
                };
                const decrement = (t)=>{
                    m[t]--;
                    I.pop();
                };
                const push = (t)=>{
                    if (B.type === "globstar") {
                        const e = m.braces > 0 && (t.type === "comma" || t.type === "brace");
                        const u = t.extglob === true || w.length && (t.type === "pipe" || t.type === "paren");
                        if (t.type !== "slash" && t.type !== "paren" && !e && !u) {
                            m.output = m.output.slice(0, -B.output.length);
                            B.type = "star";
                            B.value = "*";
                            B.output = k;
                            m.output += B.output;
                        }
                    }
                    if (w.length && t.type !== "paren") {
                        w[w.length - 1].inner += t.value;
                    }
                    if (t.value || t.output) append(t);
                    if (B && B.type === "text" && t.type === "text") {
                        B.output = (B.output || B.value) + t.value;
                        B.value += t.value;
                        return;
                    }
                    t.prev = B;
                    A.push(t);
                    B = t;
                };
                const extglobOpen = (t, e)=>{
                    const n = {
                        ...E[e],
                        conditions: 1,
                        inner: ""
                    };
                    n.prev = B;
                    n.parens = m.parens;
                    n.output = m.output;
                    const o = (u.capture ? "(" : "") + n.open;
                    increment("parens");
                    push({
                        type: t,
                        value: e,
                        output: m.output ? "" : C
                    });
                    push({
                        type: "paren",
                        extglob: true,
                        value: M(),
                        output: o
                    });
                    w.push(n);
                };
                const extglobClose = (t)=>{
                    let n = t.close + (u.capture ? ")" : "");
                    let o;
                    if (t.type === "negate") {
                        let s = k;
                        if (t.inner && t.inner.length > 1 && t.inner.includes("/")) {
                            s = globstar(u);
                        }
                        if (s !== k || eos() || /^\)+$/.test(remaining())) {
                            n = t.close = `)$))${s}`;
                        }
                        if (t.inner.includes("*") && (o = remaining()) && /^\.[^\\/.]+$/.test(o)) {
                            const u = parse(o, {
                                ...e,
                                fastpaths: false
                            }).output;
                            n = t.close = `)${u})${s})`;
                        }
                        if (t.prev.type === "bos") {
                            m.negatedExtglob = true;
                        }
                    }
                    push({
                        type: "paren",
                        extglob: true,
                        value: G,
                        output: n
                    });
                    decrement("parens");
                };
                if (u.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(t)) {
                    let n = false;
                    let s = t.replace(i, (t, e, u, o, s, r)=>{
                        if (o === "\\") {
                            n = true;
                            return t;
                        }
                        if (o === "?") {
                            if (e) {
                                return e + o + (s ? H.repeat(s.length) : "");
                            }
                            if (r === 0) {
                                return O + (s ? H.repeat(s.length) : "");
                            }
                            return H.repeat(u.length);
                        }
                        if (o === ".") {
                            return h.repeat(u.length);
                        }
                        if (o === "*") {
                            if (e) {
                                return e + o + (s ? k : "");
                            }
                            return k;
                        }
                        return e ? t : `\\${t}`;
                    });
                    if (n === true) {
                        if (u.unescape === true) {
                            s = s.replace(/\\/g, "");
                        } else {
                            s = s.replace(/\\+/g, (t)=>t.length % 2 === 0 ? "\\\\" : t ? "\\" : "");
                        }
                    }
                    if (s === t && u.contains === true) {
                        m.output = t;
                        return m;
                    }
                    m.output = o.wrapOutput(s, m, e);
                    return m;
                }
                while(!eos()){
                    G = M();
                    if (G === "\0") {
                        continue;
                    }
                    if (G === "\\") {
                        const t = D();
                        if (t === "/" && u.bash !== true) {
                            continue;
                        }
                        if (t === "." || t === ";") {
                            continue;
                        }
                        if (!t) {
                            G += "\\";
                            push({
                                type: "text",
                                value: G
                            });
                            continue;
                        }
                        const e = /^\\+/.exec(remaining());
                        let n = 0;
                        if (e && e[0].length > 2) {
                            n = e[0].length;
                            m.index += n;
                            if (n % 2 !== 0) {
                                G += "\\";
                            }
                        }
                        if (u.unescape === true) {
                            G = M();
                        } else {
                            G += M();
                        }
                        if (m.brackets === 0) {
                            push({
                                type: "text",
                                value: G
                            });
                            continue;
                        }
                    }
                    if (m.brackets > 0 && (G !== "]" || B.value === "[" || B.value === "[^")) {
                        if (u.posix !== false && G === ":") {
                            const t = B.value.slice(1);
                            if (t.includes("[")) {
                                B.posix = true;
                                if (t.includes(":")) {
                                    const t = B.value.lastIndexOf("[");
                                    const e = B.value.slice(0, t);
                                    const u = B.value.slice(t + 2);
                                    const n = r[u];
                                    if (n) {
                                        B.value = e + n;
                                        m.backtrack = true;
                                        M();
                                        if (!f.output && A.indexOf(B) === 1) {
                                            f.output = C;
                                        }
                                        continue;
                                    }
                                }
                            }
                        }
                        if (G === "[" && D() !== ":" || G === "-" && D() === "]") {
                            G = `\\${G}`;
                        }
                        if (G === "]" && (B.value === "[" || B.value === "[^")) {
                            G = `\\${G}`;
                        }
                        if (u.posix === true && G === "!" && B.value === "[") {
                            G = "^";
                        }
                        B.value += G;
                        append({
                            value: G
                        });
                        continue;
                    }
                    if (m.quotes === 1 && G !== '"') {
                        G = o.escapeRegex(G);
                        B.value += G;
                        append({
                            value: G
                        });
                        continue;
                    }
                    if (G === '"') {
                        m.quotes = m.quotes === 1 ? 0 : 1;
                        if (u.keepQuotes === true) {
                            push({
                                type: "text",
                                value: G
                            });
                        }
                        continue;
                    }
                    if (G === "(") {
                        increment("parens");
                        push({
                            type: "paren",
                            value: G
                        });
                        continue;
                    }
                    if (G === ")") {
                        if (m.parens === 0 && u.strictBrackets === true) {
                            throw new SyntaxError(syntaxError("opening", "("));
                        }
                        const t = w[w.length - 1];
                        if (t && m.parens === t.parens + 1) {
                            extglobClose(w.pop());
                            continue;
                        }
                        push({
                            type: "paren",
                            value: G,
                            output: m.parens ? ")" : "\\)"
                        });
                        decrement("parens");
                        continue;
                    }
                    if (G === "[") {
                        if (u.nobracket === true || !remaining().includes("]")) {
                            if (u.nobracket !== true && u.strictBrackets === true) {
                                throw new SyntaxError(syntaxError("closing", "]"));
                            }
                            G = `\\${G}`;
                        } else {
                            increment("brackets");
                        }
                        push({
                            type: "bracket",
                            value: G
                        });
                        continue;
                    }
                    if (G === "]") {
                        if (u.nobracket === true || B && B.type === "bracket" && B.value.length === 1) {
                            push({
                                type: "text",
                                value: G,
                                output: `\\${G}`
                            });
                            continue;
                        }
                        if (m.brackets === 0) {
                            if (u.strictBrackets === true) {
                                throw new SyntaxError(syntaxError("opening", "["));
                            }
                            push({
                                type: "text",
                                value: G,
                                output: `\\${G}`
                            });
                            continue;
                        }
                        decrement("brackets");
                        const t = B.value.slice(1);
                        if (B.posix !== true && t[0] === "^" && !t.includes("/")) {
                            G = `/${G}`;
                        }
                        B.value += G;
                        append({
                            value: G
                        });
                        if (u.literalBrackets === false || o.hasRegexChars(t)) {
                            continue;
                        }
                        const e = o.escapeRegex(B.value);
                        m.output = m.output.slice(0, -B.value.length);
                        if (u.literalBrackets === true) {
                            m.output += e;
                            B.value = e;
                            continue;
                        }
                        B.value = `(${_}${e}|${B.value})`;
                        m.output += B.value;
                        continue;
                    }
                    if (G === "{" && u.nobrace !== true) {
                        increment("braces");
                        const t = {
                            type: "brace",
                            value: G,
                            output: "(",
                            outputIndex: m.output.length,
                            tokensIndex: m.tokens.length
                        };
                        N.push(t);
                        push(t);
                        continue;
                    }
                    if (G === "}") {
                        const t = N[N.length - 1];
                        if (u.nobrace === true || !t) {
                            push({
                                type: "text",
                                value: G,
                                output: G
                            });
                            continue;
                        }
                        let e = ")";
                        if (t.dots === true) {
                            const t = A.slice();
                            const n = [];
                            for(let e = t.length - 1; e >= 0; e--){
                                A.pop();
                                if (t[e].type === "brace") {
                                    break;
                                }
                                if (t[e].type !== "dots") {
                                    n.unshift(t[e].value);
                                }
                            }
                            e = expandRange(n, u);
                            m.backtrack = true;
                        }
                        if (t.comma !== true && t.dots !== true) {
                            const u = m.output.slice(0, t.outputIndex);
                            const n = m.tokens.slice(t.tokensIndex);
                            t.value = t.output = "\\{";
                            G = e = "\\}";
                            m.output = u;
                            for (const t of n){
                                m.output += t.output || t.value;
                            }
                        }
                        push({
                            type: "brace",
                            value: G,
                            output: e
                        });
                        decrement("braces");
                        N.pop();
                        continue;
                    }
                    if (G === "|") {
                        if (w.length > 0) {
                            w[w.length - 1].conditions++;
                        }
                        push({
                            type: "text",
                            value: G
                        });
                        continue;
                    }
                    if (G === ",") {
                        let t = G;
                        const e = N[N.length - 1];
                        if (e && I[I.length - 1] === "braces") {
                            e.comma = true;
                            t = "|";
                        }
                        push({
                            type: "comma",
                            value: G,
                            output: t
                        });
                        continue;
                    }
                    if (G === "/") {
                        if (B.type === "dot" && m.index === m.start + 1) {
                            m.start = m.index + 1;
                            m.consumed = "";
                            m.output = "";
                            A.pop();
                            B = f;
                            continue;
                        }
                        push({
                            type: "slash",
                            value: G,
                            output: b
                        });
                        continue;
                    }
                    if (G === ".") {
                        if (m.braces > 0 && B.type === "dot") {
                            if (B.value === ".") B.output = h;
                            const t = N[N.length - 1];
                            B.type = "dots";
                            B.output += G;
                            B.value += G;
                            t.dots = true;
                            continue;
                        }
                        if (m.braces + m.parens === 0 && B.type !== "bos" && B.type !== "slash") {
                            push({
                                type: "text",
                                value: G,
                                output: h
                            });
                            continue;
                        }
                        push({
                            type: "dot",
                            value: G,
                            output: h
                        });
                        continue;
                    }
                    if (G === "?") {
                        const t = B && B.value === "(";
                        if (!t && u.noextglob !== true && D() === "(" && D(2) !== "?") {
                            extglobOpen("qmark", G);
                            continue;
                        }
                        if (B && B.type === "paren") {
                            const t = D();
                            let e = G;
                            if (B.value === "(" && !/[!=<:]/.test(t) || t === "<" && !/<([!=]|\w+>)/.test(remaining())) {
                                e = `\\${G}`;
                            }
                            push({
                                type: "text",
                                value: G,
                                output: e
                            });
                            continue;
                        }
                        if (u.dot !== true && (B.type === "slash" || B.type === "bos")) {
                            push({
                                type: "qmark",
                                value: G,
                                output: v
                            });
                            continue;
                        }
                        push({
                            type: "qmark",
                            value: G,
                            output: H
                        });
                        continue;
                    }
                    if (G === "!") {
                        if (u.noextglob !== true && D() === "(") {
                            if (D(2) !== "?" || !/[!=<:]/.test(D(3))) {
                                extglobOpen("negate", G);
                                continue;
                            }
                        }
                        if (u.nonegate !== true && m.index === 0) {
                            negate();
                            continue;
                        }
                    }
                    if (G === "+") {
                        if (u.noextglob !== true && D() === "(" && D(2) !== "?") {
                            extglobOpen("plus", G);
                            continue;
                        }
                        if (B && B.value === "(" || u.regex === false) {
                            push({
                                type: "plus",
                                value: G,
                                output: g
                            });
                            continue;
                        }
                        if (B && (B.type === "bracket" || B.type === "paren" || B.type === "brace") || m.parens > 0) {
                            push({
                                type: "plus",
                                value: G
                            });
                            continue;
                        }
                        push({
                            type: "plus",
                            value: g
                        });
                        continue;
                    }
                    if (G === "@") {
                        if (u.noextglob !== true && D() === "(" && D(2) !== "?") {
                            push({
                                type: "at",
                                extglob: true,
                                value: G,
                                output: ""
                            });
                            continue;
                        }
                        push({
                            type: "text",
                            value: G
                        });
                        continue;
                    }
                    if (G !== "*") {
                        if (G === "$" || G === "^") {
                            G = `\\${G}`;
                        }
                        const t = a.exec(remaining());
                        if (t) {
                            G += t[0];
                            m.index += t[0].length;
                        }
                        push({
                            type: "text",
                            value: G
                        });
                        continue;
                    }
                    if (B && (B.type === "globstar" || B.star === true)) {
                        B.type = "star";
                        B.star = true;
                        B.value += G;
                        B.output = k;
                        m.backtrack = true;
                        m.globstar = true;
                        consume(G);
                        continue;
                    }
                    let e = remaining();
                    if (u.noextglob !== true && /^\([^?]/.test(e)) {
                        extglobOpen("star", G);
                        continue;
                    }
                    if (B.type === "star") {
                        if (u.noglobstar === true) {
                            consume(G);
                            continue;
                        }
                        const n = B.prev;
                        const o = n.prev;
                        const s = n.type === "slash" || n.type === "bos";
                        const r = o && (o.type === "star" || o.type === "globstar");
                        if (u.bash === true && (!s || e[0] && e[0] !== "/")) {
                            push({
                                type: "star",
                                value: G,
                                output: ""
                            });
                            continue;
                        }
                        const a = m.braces > 0 && (n.type === "comma" || n.type === "brace");
                        const i = w.length && (n.type === "pipe" || n.type === "paren");
                        if (!s && n.type !== "paren" && !a && !i) {
                            push({
                                type: "star",
                                value: G,
                                output: ""
                            });
                            continue;
                        }
                        while(e.slice(0, 3) === "/**"){
                            const u = t[m.index + 4];
                            if (u && u !== "/") {
                                break;
                            }
                            e = e.slice(3);
                            consume("/**", 3);
                        }
                        if (n.type === "bos" && eos()) {
                            B.type = "globstar";
                            B.value += G;
                            B.output = globstar(u);
                            m.output = B.output;
                            m.globstar = true;
                            consume(G);
                            continue;
                        }
                        if (n.type === "slash" && n.prev.type !== "bos" && !r && eos()) {
                            m.output = m.output.slice(0, -(n.output + B.output).length);
                            n.output = `(?:${n.output}`;
                            B.type = "globstar";
                            B.output = globstar(u) + (u.strictSlashes ? ")" : "|$)");
                            B.value += G;
                            m.globstar = true;
                            m.output += n.output + B.output;
                            consume(G);
                            continue;
                        }
                        if (n.type === "slash" && n.prev.type !== "bos" && e[0] === "/") {
                            const t = e[1] !== void 0 ? "|$" : "";
                            m.output = m.output.slice(0, -(n.output + B.output).length);
                            n.output = `(?:${n.output}`;
                            B.type = "globstar";
                            B.output = `${globstar(u)}${b}|${b}${t})`;
                            B.value += G;
                            m.output += n.output + B.output;
                            m.globstar = true;
                            consume(G + M());
                            push({
                                type: "slash",
                                value: "/",
                                output: ""
                            });
                            continue;
                        }
                        if (n.type === "bos" && e[0] === "/") {
                            B.type = "globstar";
                            B.value += G;
                            B.output = `(?:^|${b}|${globstar(u)}${b})`;
                            m.output = B.output;
                            m.globstar = true;
                            consume(G + M());
                            push({
                                type: "slash",
                                value: "/",
                                output: ""
                            });
                            continue;
                        }
                        m.output = m.output.slice(0, -B.output.length);
                        B.type = "globstar";
                        B.output = globstar(u);
                        B.value += G;
                        m.output += B.output;
                        m.globstar = true;
                        consume(G);
                        continue;
                    }
                    const n = {
                        type: "star",
                        value: G,
                        output: k
                    };
                    if (u.bash === true) {
                        n.output = ".*?";
                        if (B.type === "bos" || B.type === "slash") {
                            n.output = T + n.output;
                        }
                        push(n);
                        continue;
                    }
                    if (B && (B.type === "bracket" || B.type === "paren") && u.regex === true) {
                        n.output = G;
                        push(n);
                        continue;
                    }
                    if (m.index === m.start || B.type === "slash" || B.type === "dot") {
                        if (B.type === "dot") {
                            m.output += x;
                            B.output += x;
                        } else if (u.dot === true) {
                            m.output += S;
                            B.output += S;
                        } else {
                            m.output += T;
                            B.output += T;
                        }
                        if (D() !== "*") {
                            m.output += C;
                            B.output += C;
                        }
                    }
                    push(n);
                }
                while(m.brackets > 0){
                    if (u.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "]"));
                    m.output = o.escapeLast(m.output, "[");
                    decrement("brackets");
                }
                while(m.parens > 0){
                    if (u.strictBrackets === true) throw new SyntaxError(syntaxError("closing", ")"));
                    m.output = o.escapeLast(m.output, "(");
                    decrement("parens");
                }
                while(m.braces > 0){
                    if (u.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "}"));
                    m.output = o.escapeLast(m.output, "{");
                    decrement("braces");
                }
                if (u.strictSlashes !== true && (B.type === "star" || B.type === "bracket")) {
                    push({
                        type: "maybe_slash",
                        value: "",
                        output: `${b}?`
                    });
                }
                if (m.backtrack === true) {
                    m.output = "";
                    for (const t of m.tokens){
                        m.output += t.output != null ? t.output : t.value;
                        if (t.suffix) {
                            m.output += t.suffix;
                        }
                    }
                }
                return m;
            };
            parse.fastpaths = (t, e)=>{
                const u = {
                    ...e
                };
                const r = typeof u.maxLength === "number" ? Math.min(s, u.maxLength) : s;
                const a = t.length;
                if (a > r) {
                    throw new SyntaxError(`Input length: ${a}, exceeds maximum allowed length: ${r}`);
                }
                t = c[t] || t;
                const { DOT_LITERAL: i, SLASH_LITERAL: p, ONE_CHAR: l, DOTS_SLASH: f, NO_DOT: A, NO_DOTS: _, NO_DOTS_SLASH: R, STAR: E, START_ANCHOR: h } = n.globChars(u.windows);
                const g = u.dot ? _ : A;
                const b = u.dot ? R : A;
                const C = u.capture ? "" : "?:";
                const y = {
                    negated: false,
                    prefix: ""
                };
                let $ = u.bash === true ? ".*?" : E;
                if (u.capture) {
                    $ = `(${$})`;
                }
                const globstar = (t)=>{
                    if (t.noglobstar === true) return $;
                    return `(${C}(?:(?!${h}${t.dot ? f : i}).)*?)`;
                };
                const create = (t)=>{
                    switch(t){
                        case "*":
                            return `${g}${l}${$}`;
                        case ".*":
                            return `${i}${l}${$}`;
                        case "*.*":
                            return `${g}${$}${i}${l}${$}`;
                        case "*/
    /*":
                            return `(?:${g}${globstar(u)}${p})?${b}${l}${$}`;
                        case "**/
    // if the user didn't define "localPatterns", we allow all local images
    //n');
    //# sourceMappingURL=match-local-pattern.js.map
    // Should be the same as writeImagesManifest()
    //# sourceMappingURL=match-remote-pattern.js.map
    // these should always be provided but make sure they are
    //')) {
    //) must be changed to an absolute URL (http:// or https://)');
    // We use dynamic require because this should only error in development
    //nextjs.org/docs/messages/next-image-unconfigured-localpatterns");
    // or https://)');
    // We use dynamic require because this should only error in development
    //nextjs.org/docs/messages/next-image-unconfigured-host");
    //nextjs.org/docs/messages/next-image-unconfigured-qualities");
    // We use this to determine if the import is the default loader
    // or a custom loader defined by the user in next.config.js
    //# sourceMappingURL=image-loader.js.map
    /*#__PURE__*/
    // This is replaced by webpack define plugin
    // Normally we don't care about undefined props because we pass to JSX,
    // but this exported function could be used by the end user for anything
    // so we delete undefined props to clean it up a little.
    //# sourceMappingURL=image-external.js.map
    // We inject the tree and pages here so that we can use them in the route
    // module.
    //", props.params, "favicon.ico") + `?${__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$225b$project$5d2f$src$2f$app$2f$favicon$2e$ico__$5b$app$2d$rsc$5d$__$28$static$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29$__["default"].src.split("/").splice(-1)[0]}`,
    // The following aren't used in production.
    //# sourceMappingURL=app-page.js.map
    //# sourceMappingURL=node_modules_next_a3f207._.js.map

File: ./frontend/.next/server/chunks/ssr/node_modules_next_dist_client_components_unauthorized-error_d758e6.js
  JavaScript Functions:
    - Unauthorized
  Comments:
    /*#__PURE__*/
    //# sourceMappingURL=unauthorized-error.js.map
    //# sourceMappingURL=node_modules_next_dist_client_components_unauthorized-error_d758e6.js.map

File: ./frontend/.next/server/chunks/ssr/node_modules_ce97a5._.js
  JavaScript Functions:
    - _interop_require_default
    - HTTPAccessErrorFallback
    - NotFound
  Comments:
    /*#__PURE__*/
    // https://github.com/sindresorhus/modern-normalize/blob/main/modern-normalize.css#L38-L52
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /* Minified CSS from
                body { margin: 0; color: #000; background: #fff; }
                .next-error-h1 {
                  border-right: 1px solid rgba(0, 0, 0, .3);
                }

                @media (prefers-color-scheme: dark) {
                  body { color: #fff; background: #000; }
                  .next-error-h1 {
                    border-right: 1px solid rgba(255, 255, 255, .3);
                  }
                }
              */
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=error-fallback.js.map
    /*#__PURE__*/
    //# sourceMappingURL=not-found-error.js.map
    //# sourceMappingURL=node_modules_ce97a5._.js.map

File: ./frontend/.next/server/chunks/ssr/[root of the server]__e237d7._.js

File: ./frontend/.next/server/chunks/ssr/node_modules_abd7c8._.js
  JavaScript Functions:
    - hoist
    - _interop_require_default
    - _export
    - _export
    - handleSlug
    - getSortedRoutes
    - getSortedRouteObjects
    - ensures
    - ensureLeadingSlash
    - _export
    - isGroupSegment
    - isParallelRouteSegment
    - addSearchParamsIfPageSegment
    - _export
    - normalizeAppPath
    - normalizeRscURL
    - _export
    - isInterceptionRouteAppPath
    - extractInterceptionRouteInformation
    - isDynamicRoute
    - _export
    - ensures
    - normalizePathSep
    - denormalizePagePath
    - _export
    - execOnce
    - isAbsoluteUrl
    - getLocationOrigin
    - getURL
    - getDisplayName
    - isResSent
    - normalizeRepeatedSlashes
    - loadGetInitialProps
    - stringifyError
    - normalizePagePath
    - getPageFiles
    - _export
    - htmlEscapeJsonString
    - _export
    - getObjectClassLabel
    - isPlainObject
    - _export
    - isError
    - safeStringify
    - getProperError
    - encodeURIPath
    - _export
    - isThenable
    - _logProxy
    - disable
    - createComponentLogger
    - getBaggage
    - getActiveBaggage
    - setBaggage
    - deleteBaggage
    - createBaggage
    - baggageEntryMetadataFromString
    - createContextKey
    - getValue
    - setValue
    - deleteValue
    - logProxy
    - _consoleFunc
    - createLogLevelDiagLogger
    - _filterFunc
    - registerGlobal
    - getGlobal
    - unregisterGlobal
    - _makeCompatibilityCheck
    - isExactmatch
    - _reject
    - _accept
    - isCompatible
    - createNoopMeter
    - isSpanContext
    - getSpan
    - getActiveSpan
    - setSpan
    - deleteSpan
    - setSpanContext
    - getSpanContext
    - validateKey
    - validateValue
    - createTraceState
    - isValidTraceId
    - isValidSpanId
    - isSpanContextValid
    - wrapSpanContext
    - __nccwpck_require__
    - _export
    - isBubbledError
    - closeSpanWithError
    - getSpanId
    - onCleanup
    - getTracer
    - getTracedMetadata
    - _export
    - isBlockedPage
    - cleanAmpPath
    - debounce
    - was
    - was
    - run
    - calls
    - again
    - can
    - toLocaleString
    - prettyBytes
    - _export
    - _interop_require_default
    - _getRequireWildcardCache
    - _interop_require_wildcard
    - getDocumentFiles
    - getPolyfillScripts
    - hasComponentProps
    - AmpStyles
    - hasStyles
    - getDynamicChunks
    - getScripts
    - lowPriorityScripts
    - getPreNextWorkerScripts
    - getPreNextScripts
    - beforeInteractiveScripts
    - getHeadHTMLProps
    - getAmpPath
    - getNextFontLinkTags
    - traceMetaTags
    - handleDocumentScriptLoaderItems
    - headChildren
    - bodyChildren
    - Html
    - Main
    - InternalFunctionDocument
    - appGetInitialProps
    - _getRequireWildcardCache
    - _interop_require_wildcard
    - SideEffect
    - emitChange
    - isInAmpMode
    - warnOnce
    - warnOnce
    - _export
    - defaultHead
    - onlyReactElement
    - for
    - unique
    - reduceComponents
    - Head
    - _getInitialProps
  Comments:
    //# sourceMappingURL=module.compiled.js.map
    /*#__PURE__*/
    /**
   * `PAGES` represents all the React pages that are under `pages/`.
   */
    /**
   * `PAGES_API` represents all the API routes under `pages/api/`.
   */
    /**
   * `APP_PAGE` represents all the React pages that are under `app/` with the
   * filename of `page.{j,t}s{,x}`.
   */
    /**
   * `APP_ROUTE` represents all the API routes and metadata routes that are under `app/` with the
   * filename of `route.{j,t}s{,x}`.
   */
    /**
   * `IMAGE` represents all the images that are generated by `next/image`.
   */
    //# sourceMappingURL=route-kind.js.map
    /**
 * Hoists a name from a module or promised module.
 *
 * @param module the module to hoist the name from
 * @param name the name to hoist
 * @returns the value on the module (or promised module)
 */
    // If the name is available in the module, return it.
    // If a property called `then` exists, assume it's a promise and
    // return a promise that resolves to the name.
    // If we're trying to hoise the default export, and the module is a function,
    // return the module itself.
    // Otherwise, return undefined.
    //# sourceMappingURL=helpers.js.map
    // Note: This file is JS because it's used by the taskfile-swc.js file, which is JS.
    // Keep file changes in sync with the corresponding `.d.ts` files.
    /**
 * These are the browser versions that support all of the following:
 * static import: https://caniuse.com/es6-module
 * dynamic import: https://caniuse.com/es6-module-dynamic-import
 * import.meta: https://caniuse.com/mdn-javascript_operators_import_meta
 */
    //# sourceMappingURL=modern-browserslist-target.js.map
    /*#__PURE__*/
    //# sourceMappingURL=constants.js.map
    // The next segment in the urlPaths list
    // Check if the segment matches `[something]`
    // Strip `[` and `]`, leaving only `something`
    // Strip optional `[` and `]`, leaving only `something`
    // Strip `...`, leaving only `something`
    // If the specific segment already has a slug but the slug is not `something`
    // This prevents collisions like:
    // pages/[post]/index.js
    // pages/[id]/index.js
    // Because currently multiple dynamic params on the same segment level are not supported
    // TODO: This error seems to be confusing for users, needs an error link, the description can be based on above comment.
    // slugName is kept as it can only be one particular slugName
    // nextSegment is overwritten to [[...]] so that it can later be sorted specifically
    // slugName is kept as it can only be one particular slugName
    // nextSegment is overwritten to [...] so that it can later be sorted specifically
    // slugName is kept as it can only be one particular slugName
    // nextSegment is overwritten to [] so that it can later be sorted specifically
    // If this UrlNode doesn't have the nextSegment yet we create a new child UrlNode
    // First the UrlNode is created, and every UrlNode can have only 1 dynamic segment
    // Eg you can't have pages/[post]/abc.js and pages/[hello]/something-else.js
    // Only 1 dynamic segment per nesting level
    // So in the case that is test/integration/dynamic-routing it'll be this:
    // pages/[post]/comments.js
    // pages/blog/[post]/comment/[id].js
    // Both are fine because `pages/[post]` and `pages/blog` are on the same level
    // So in this case `UrlNode` created here has `this.slugName === 'post'`
    // And since your PR passed through `slugName` as an array basically it'd including it in too many possibilities
    // Instead what has to be passed through is the upwards path's dynamic names
    // Here the `root` gets injected multiple paths, and insert will break them up into sublevels
    // Smoosh will then sort those sublevels up to the point where you get the correct route definition priority
    // We're assuming here that all the pathnames are unique, that way we can
    // sort the list and use the index as the key.
    // Sort the pathnames.
    // Map the sorted pathnames back to the original objects using the new sorted
    // index.
    //# sourceMappingURL=sorted-routes.js.map
    /**
 * For a given page path, this function ensures that there is a leading slash.
 * If there is not a leading slash, one is added, otherwise it is noop.
 */
    //# sourceMappingURL=ensure-leading-slash.js.map
    // Use array[0] for performant purpose
    //# sourceMappingURL=segment.js.map
    // Empty segments are ignored.
    // Groups are ignored.
    // Parallel segments are ignored.
    // The last segment (if it's a leaf) should be ignored.
    //# sourceMappingURL=app-paths.js.map
    // TODO-APP: add more serious validation
    // normalize the path, e.g. /(blog)/feed -> /feed
    // (.) indicates that we should match with sibling routes, so we just need to append the intercepted route to the intercepting route
    // (..) indicates that we should match at one level up, so we need to remove the last segment of the intercepting route
    // (...) will match the route segment in the root directory, so we need to use the root directory to prepend the intercepted route
    // (..)(..) indicates that we should match at two levels up, so we need to remove the last two segments of the intercepting route
    //# sourceMappingURL=interception-routes.js.map
    // Identify /[param]/ in route string
    //# sourceMappingURL=is-dynamic.js.map
    //# sourceMappingURL=index.js.map
    /**
 * For a given page path, this function ensures that there is no backslash
 * escaping slashes in the path. Example:
 *  - `foo\/bar\/baz` -> `foo/bar/baz`
 */
    //# sourceMappingURL=normalize-path-sep.js.map
    //# sourceMappingURL=denormalize-page-path.js.map
    // Scheme: https://tools.ietf.org/html/rfc3986#section-3.1
    // Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3
    //" + hostname + (port ? ':' + port : '');
    // first we replace any non-encoded backslashes with forward
    // then normalize repeated forward slashes
    //nextjs.org/docs/messages/get-initial-props-as-an-instance-method for more information.';
    // when called from _app `ctx` is nested in `ctx`
    // @ts-ignore pageProps default
    //nextjs.org/docs/messages/empty-object-getInitialProps");
    //# sourceMappingURL=utils.js.map
    //# sourceMappingURL=normalize-page-path.js.map
    //# sourceMappingURL=get-page-files.js.map
    // This utility is based on https://github.com/zertosh/htmlescape
    // License: https://github.com/zertosh/htmlescape/blob/0527ca7156a524d256101bb310a9f970f63078ad/LICENSE
    //# sourceMappingURL=htmlescape.js.map
    /**
   * this used to be previously:
   *
   * `return prototype === null || prototype === Object.prototype`
   *
   * but Edge Runtime expose Object from vm, being that kind of type-checking wrongly fail.
   *
   * It was changed to the current implementation since it's resilient to serialization.
   */
    //# sourceMappingURL=is-plain-object.js.map
    /**
 * Checks whether the given value is a NextError.
 * This can be used to print a more detailed error message with properties like `code` & `digest`.
 */
    // If value is an object and already seen, replace with "[Circular]"
    // provide better error for case where `throw undefined`
    // is called in development
    //nextjs.org/docs/messages/threw-undefined');
    //nextjs.org/docs/messages/threw-undefined');
    //# sourceMappingURL=is-error.js.map
    //# sourceMappingURL=module.compiled.js.map
    //# sourceMappingURL=html-context.js.map
    //# sourceMappingURL=encode-uri-path.js.map
    /**
 * Contains predefined constants for the trace span name in next/server.
 *
 * Currently, next/server/tracer is internal implementation only for tracking
 * next.js's implementation only with known span names defined here.
 **/
    // eslint typescript has a bug with TS enums
    /* eslint-disable no-shadow */
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // nested inner span, does not require parent scope name
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=constants.js.map
    /**
 * Check to see if a value is Thenable.
 *
 * @param promise the maybe-thenable value
 * @returns true if the value is thenable
 */
    //# sourceMappingURL=is-thenable.js.map
    // we want to allow users to use their own version of @opentelemetry/api if they
    // want to, so we try to require it first, and if it fails we fall back to the
    // version that is bundled with Next.js
    // this is because @opentelemetry/api has to be synced with the version of
    // @opentelemetry/tracing that is used, and we don't want to force users to use
    // the version that is bundled with Next.js.
    // the API is ~stable, so this should be fine
    /** we use this map to propagate attributes from nested spans to the top span */
    /**
   * Returns an instance to the trace with configured name.
   * Since wrap / trace can be defined in any place prior to actual trace subscriber initialization,
   * This should be lazily evaluated.
   */
    // Active span is already set, too late to propagate.
    // coerce options form overload
    // Trying to get active scoped span to assign parent. If option specifies parent span manually, will try to use it.
    // If there's error make sure it throws
    // Need to pass down the promise result,
    // it could be react stream response with error { error, stream }
    //# sourceMappingURL=tracer.js.map
    //# sourceMappingURL=utils.js.map
    // The time the debouncing function was first called during this debounce queue.
    // The time the debouncing function was last called.
    // The arguments and this context of the last call to the debouncing function.
    // A helper used to that either invokes the debounced function, or
    // reschedules the timer if a more recent call was made.
    // If the diff is non-positive, then we've waited at least `ms`
    // milliseconds since the last call. Or if we've waited for longer than the
    // max wait time, we must call the debounced function.
    // It's important to clear the timeout id before invoking the debounced
    // function, in case the function calls the debouncing function again.
    // Else, a new call was made after the original timer was scheduled. We
    // didn't clear the timeout (doing so is very slow), so now we need to
    // reschedule the timer for the time difference.
    // The arguments and this context of the most recent call are saved so the
    // debounced function can be invoked with them later.
    // Instead of constantly clearing and scheduling a timer, we record the
    // time of the last call. If a second call comes in before the timer fires,
    // then we'll reschedule in the run function. Doing this is considerably
    // faster.
    // Only schedule a new timer if we're not currently waiting.
    //# sourceMappingURL=utils.js.map
    /*
MIT License

Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
    /*
Formats the given number using `Number#toLocaleString`.
- If locale is a string, the value is expected to be a locale-key (for example: `de`).
- If locale is true, the system default locale is used for translation.
- If no value for locale is specified, the number is returned unmodified.
*/
    //# sourceMappingURL=pretty-bytes.js.map
    /**
 * `Document` component handles the initial `document` markup and renders only on the server side.
 * Commonly used for implementing server side rendering for `css-in-js` libraries.
 */
    /*#__PURE__*/
    /*#__PURE__*/
    /** Set of pages that have triggered a large data warning on production mode. */
    // polyfills.js has to be rendered as nomodule without async
    // It also has to be the first script to load
    /*#__PURE__*/
    // try to parse styles from fragment for backwards compat
    // @ts-ignore Property 'props' does not exist on type ReactElement
    // @ts-ignore Property 'props' does not exist on type ReactElement
    /* Add custom styles before AMP styles to prevent accidental overrides */
    /*#__PURE__*/
    //g, '').replace(/\/\*@ sourceURL=.*?\*\//g, '')
    /*#__PURE__*/
    /*#__PURE__*/
    // disable `nextScriptWorkers` in edge runtime
    // Check to see if the user has defined their own Partytown configuration
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // Use external src if provided
    // Embed inline script if provided with dangerouslySetInnerHTML
    // Embed inline script if provided with children
    //nextjs.org/docs/messages/invalid-script');
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // This assignment is necessary for additional type checking to avoid unsupported attributes in <head>
    // If no font files should preload but there's an entry for the path, add a preconnect tag.
    /*#__PURE__*/
    /*#__PURE__*/
    // Unmanaged files are CSS files that will be handled directly by the
    // webpack runtime (`mini-css-extract-plugin`).
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // Filter out nulled scripts
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // show a warning if Head contains <title> (only in development)
    //nextjs.org/docs/messages/no-document-title");
    //nextjs.org/docs/messages/no-document-viewport-meta");
    // @types/react bug. Returned value from .map will not be `null` if you pass in `[null]`
    //nextjs.org/docs/messages/doc-crossorigin-deprecated');
    // show warning and remove conflicting amp head tags
    // only block if
    // 1. it has a src and isn't pointing to ampproject's CDN
    // 2. it is using dangerouslySetInnerHTML without a type or
    // a type of text/javascript
    //nextjs.org/docs/messages/conflicting-amp-tag`);
    // non-amp mode
    // @types/react bug. Returned value from .map will not be `null` if you pass in `[null]`
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //cdn.ampproject.org/v0.js"
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //cdn.ampproject.org/v0.js"
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // this element is used to mount development styles so the
    // ordering matches production
    // (by default, style-loader injects at the bottom of <head />)
    /*#__PURE__*/
    /*#__PURE__*/
    // Scripts with beforeInteractive can be placed inside Head or <body> so children of both needs to be traversed
    // When using the `next/script` component, register it in script loader.
    //nextjs.org/docs/messages/large-page-data`);
    //nextjs.org/docs/messages/circular-structure`);
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //nextjs.org/docs/messages/doc-crossorigin-deprecated');
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // @ts-ignore
    /*#__PURE__*/
    /**
   * `getInitialProps` hook returns the context object with the addition of `renderPage`.
   * `renderPage` callback executes `React` rendering logic synchronously to support server-rendering wrappers
   */
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // Add a special property to the built-in `Document` component so later we can
    // identify if a user customized `Document` is used or not.
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=_document.js.map
    /*#__PURE__*/
    /**
 * `App` component is used for initialize of pages. It allows for overwriting and full control of the `page` initialization.
 * This allows for keeping state between navigation, custom error handling, injecting additional data.
 */
    /*#__PURE__*/
    //# sourceMappingURL=_app.js.map
    // We need to call `updateHead` method whenever the `SideEffect` is trigger in all
    // life-cycles: mount, update, unmount. However, if there are multiple `SideEffect`s
    // being rendered, we only trigger the method from the last one.
    // This is ensured by keeping the last unflushed `updateHead` in the `_pendingUpdate`
    // singleton in the layout effect pass, and actually trigger it in the effect pass.
    //# sourceMappingURL=side-effect.js.map
    //# sourceMappingURL=amp-context.js.map
    //# sourceMappingURL=head-manager-context.js.map
    //# sourceMappingURL=amp-mode.js.map
    //# sourceMappingURL=warn-once.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // React children can be "string" or "number" in this case we ignore them for backwards compat
    // Adds support for React.Fragment
    /*
 returns a function for filtering head child elements
 which shouldn't be duplicated, like <title/>
 Also adds support for deduplicated `key` properties
*/
    // eslint-disable-next-line default-case
    /**
 *
 * @param headChildrenElements List of children of <Head>
 */
    // omit JSON-LD structured data snippets from the warning
    //nextjs.org/docs/messages/no-script-tags-in-head-component");
    //nextjs.org/docs/messages/no-stylesheets-in-head-component');
    /*#__PURE__*/
    /**
 * This component injects elements to `<head>` of your page.
 * To avoid duplicated `tags` in `<head>` you can use the `key` property, which will make sure every tag is only rendered once.
 */
    /*#__PURE__*/
    //# sourceMappingURL=head.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    // https://github.com/sindresorhus/modern-normalize/blob/main/modern-normalize.css#L38-L52
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /* CSS minified from
                body { margin: 0; color: #000; background: #fff; }
                .next-error-h1 {
                  border-right: 1px solid rgba(0, 0, 0, .3);
                }

                ${
                  withDarkMode
                    ? `@media (prefers-color-scheme: dark) {
                  body { color: #fff; background: #000; }
                  .next-error-h1 {
                    border-right: 1px solid rgba(255, 255, 255, .3);
                  }
                }`
                    : ''
                }
               */
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=_error.js.map
    // Import the app and document modules.
    // Import the userland code.
    // The following aren't used in production.
    // default export might not exist when optimized for data only
    //# sourceMappingURL=pages.js.map
    //# sourceMappingURL=node_modules_abd7c8._.js.map

File: ./frontend/.next/server/chunks/ssr/node_modules_2c0c3f._.js
  JavaScript Functions:
    - _extends
    - is
    - memoizedSelector
    - isValidElementType
    - typeOf
    - isContextConsumer
    - isMemo
    - warning
    - verify
    - verifySubselectors
    - pureFinalPropsSelectorFactory
    - handleFirstCall
    - handleNewPropsAndNewState
    - handleNewProps
    - handleNewState
    - handleSubsequentCalls
    - pureFinalPropsSelector
    - finalPropsSelectorFactory
    - bindActionCreators
    - isPlainObject
    - verifyPlainObject
    - wrapMapToPropsConstant
    - initConstantSelector
    - constantSelector
    - getDependsOnOwnProps
    - wrapMapToPropsFunc
    - initProxySelector
    - mapToPropsProxy
    - detectFactoryAndVerify
    - createInvalidArgFactory
    - mapDispatchToPropsFactory
    - mapStateToPropsFactory
    - defaultMergeProps
    - wrapMergePropsFunc
    - initMergePropsProxy
    - mergePropsProxy
    - mergePropsFactory
    - defaultNoopBatch
    - createListenerCollection
    - unsubscribe
    - createSubscription
    - addNestedSub
    - notifyNestedSubs
    - handleChangeWrapper
    - isSubscribed
    - trySubscribe
    - tryUnsubscribe
    - trySubscribeSelf
    - tryUnsubscribeSelf
    - canUseDOM
    - isRunningInReactNative
    - getUseIsomorphicLayoutEffect
    - is
    - shallowEqual
    - getStatics
    - hoistNonReactStatics
    - getContext
    - stringifyComponent
    - useIsomorphicLayoutEffectWithArgs
    - captureWrapperProps
    - subscribeUpdates
    - checkForUpdates
    - unsubscribeWrapper
    - strictEqual
    - connect
    - wrapWithConnect
    - returned
    - ConnectFunction
    - selector
    - subscribe
    - forwardConnectRef
    - Provider
    - createReduxContextHook
    - useReduxContext2
    - createStoreHook
    - useStore2
    - createDispatchHook
    - useDispatch2
    - refEquality
    - createSelectorHook
    - useSelector2
    - as
    - as
    - to
    - invariant
    - getRect
    - expand
    - shrink
    - shift
    - createBox
    - parse
    - getWindowScroll
    - offset
    - withScroll
    - calculateBox
    - getBox
    - rafSchd
    - wrapperFn
    - formatProdErrorMessage
    - randomString
    - isPlainObject
    - miniKindOf
    - ctorName
    - isError
    - isDate
    - kindOf
    - createStore
    - ensureCanMutateNextListeners
    - getState
    - subscribe
    - unsubscribe
    - dispatch
    - replaceReducer
    - observable
    - observeState
    - legacy_createStore
    - warning
    - getUnexpectedStateShapeWarningMessage
    - assertReducerShape
    - combineReducers
    - combination
    - bindActionCreator
    - bindActionCreators
    - compose
    - applyMiddleware
    - dispatch
    - isAction
    - 2
    - getDevMessage
    - getFormattedMessage
    - log
    - noop
    - getOptions
    - bindEvents
    - unbind
    - unbindAll
    - toString
    - invariant
    - onWindowError
    - getCallbacks
    - setCallbacks
    - position
    - onDragStart
    - withLocation
    - withCombine
    - onDragUpdate
    - returnedToStart
    - onDragEnd
    - isEqual
    - areInputsEqual
    - useMemo
    - initial
    - useCallback
    - add
    - subtract
    - 1
    - negate
    - patch
    - distance
    - 1
    - apply
    - executeClip
    - offsetByPosition
    - getCorners
    - 1
    - increase
    - clip
    - getSubject
    - scrollDroppable
    - memoizeOne
    - memoized
    - clear
    - tryGetDestination
    - tryGetCombine
    - moveToNextCombine
    - getImpact
    - isHomeOf
    - isWithin
    - isPartiallyVisibleThroughFrame
    - isTotallyVisibleThroughFrame
    - isTotallyVisibleThroughFrameOnAxis
    - getDroppableDisplaced
    - isVisibleInDroppable
    - isVisibleInViewport
    - 1
    - isPartiallyVisible
    - isTotallyVisible
    - isTotallyVisibleOnAxis
    - getShouldAnimate
    - getTarget
    - getDisplacementGroups
    - process
    - getIndexOfLastItem
    - goAtEnd
    - calculateReorderImpact
    - didStartAfterCritical
    - fromCombine
    - fromReorder
    - moveToNextIndex
    - getCombinedItemDisplacement
    - whenCombining
    - distanceFromStartToBorderBoxCenter
    - distanceFromEndToBorderBoxCenter
    - getCrossAxisBorderBoxCenter
    - goAfter
    - goBefore
    - goIntoStart
    - whenReordering
    - withDroppableDisplacement
    - getResultWithoutDroppableDisplacement
    - getPageBorderBoxCenterFromImpact
    - scrollViewport
    - getDraggables
    - tryGetVisible
    - speculativelyIncrease
    - withViewportDisplacement
    - getClientFromPageBorderBoxCenter
    - isTotallyVisibleInNewLocation
    - moveToNextPlace
    - getKnownActive
    - getBestCrossAxisDroppable
    - getCurrentPageBorderBoxCenter
    - getCurrentPageBorderBox
    - getClosestDraggable
    - getDisplacedBy
    - getRequiredGrowthForPlaceholder
    - withMaxScroll
    - addPlaceholder
    - removePlaceholder
    - moveToNewDroppable
    - proposedIndex
    - moveCrossAxis
    - whatIsDraggedOver
    - 1
    - moveInDirection
    - isMovementAllowed
    - isPositionInFrame
    - run
    - getHasOverlap
    - getFurthestAway
    - getDroppableOver
    - offsetRectByPosition
    - withDroppableScroll
    - getIsDisplaced
    - atIndex
    - getReorderImpact
    - getCombineImpact
    - getDragImpact
    - patchDroppableMap
    - clearUnusedPlaceholder
    - recomputePlaceholders
    - update
    - getDraggables
    - recompute
    - getClientBorderBoxCenter
    - refreshSnap
    - getHomeLocation
    - getLiftEffect
    - patchDimensionMap
    - start
    - finish
    - offsetDraggable
    - getFrame
    - adjustAdditionsForScrollChanges
    - publishWhileDraggingInVirtual
    - isSnapping
    - postDroppableChange
    - removeScrollJumpRequest
    - reducer
    - guard
    - beforeInitialCapture
    - 1
    - initialPublish
    - publishWhileDragging
    - collectionStarting
    - updateDroppableScroll
    - updateDroppableIsEnabled
    - updateDroppableIsCombineEnabled
    - move
    - moveByWindowScroll
    - updateViewportMaxScroll
    - moveUp
    - moveDown
    - moveRight
    - moveLeft
    - flush
    - animateDrop
    - completeDrop
    - drop
    - dropPending
    - dropAnimationFinished
    - checkIndexes
    - validateDimensions
    - lift
    - style
    - moveTo
    - getDropDuration
    - getNewHomeClientOffset
    - getDropImpact
    - dropMiddleware
    - getWindowScroll
    - getWindowScrollBinding
    - getScrollListener
    - updateScroll
    - isActive
    - start
    - stop
    - 1
    - scrollListener
    - getExpiringAnnounce
    - result
    - wasCalled
    - getAsyncMarshal
    - execute
    - add
    - flush
    - areLocationsEqual
    - isCombineEqual
    - isCriticalEqual
    - withTimings
    - getDragStart
    - execute
    - getPublisher
    - beforeCapture
    - beforeStart
    - start
    - update
    - flush
    - drop
    - abort
    - responders
    - dropAnimationFinishMiddleware
    - dropAnimationFlushOnScrollMiddleware
    - clear
    - flushDropAnimation
    - dimensionMarshalStopper
    - focus
    - shouldStop
    - autoScroll
    - pendingDrop
    - createStore
    - 1
    - createPublisher
    - collect
    - add
    - remove
    - stop
    - getMaxScroll
    - getDocumentElement
    - getMaxWindowScroll
    - getViewport
    - getInitialPublish
    - shouldPublishUpdate
    - createDimensionMarshal
    - updateDroppableIsEnabled
    - updateDroppableIsCombineEnabled
    - updateDroppableScroll
    - scrollDroppable
    - stopPublishing
    - subscriber
    - startPublishing
    - canStartDrag
    - scrollWindow
    - getScrollableDroppableOver
    - getBestScrollableDroppable
    - getDistanceThresholds
    - getPercentage
    - getValueFromDistance
    - dampenValueByTime
    - getValue
    - getScrollOnAxis
    - adjustForSizeLimits
    - 1
    - getOverlap
    - getRemainder
    - canPartiallyScroll
    - canScrollWindow
    - getWindowOverlap
    - canScrollDroppable
    - getDroppableOverlap
    - getWindowScrollChange
    - getDroppableScrollChange
    - scroll
    - createFluidScroller
    - tryScroll
    - 1
    - fakeScrollCallback
    - stop
    - createJumpScroller
    - moveByOffset
    - scrollDroppableAsMuchAsItCan
    - scrollWindowAsMuchAsItCan
    - jumpScroller
    - createAutoScroller
    - scroll
    - dragHandle
    - draggable
    - droppable
    - makeGetSelector
    - getStyles
    - 1
    - 1
    - 1
    - getHead
    - createStyleEl
    - useStyleMarshal
    - remove
    - querySelectorAll
    - getWindowFromEl
    - isHtmlElement
    - findDragHandle
    - useFocusMarshal
    - register
    - unregister
    - tryGiveFocus
    - tryShiftRecord
    - tryRestoreFocusRecorded
    - tryRecordFocus
    - clearFrameOnUnmount
    - createRegistry
    - subscribe
    - unsubscribe
    - notify
    - findDraggableById
    - getDraggableById
    - findDroppableById
    - getDroppableById
    - clean
    - useRegistry
    - unmount
    - getBodyElement
    - getId
    - useAnnouncer
    - setup
    - cleanup
    - remove
    - useUniqueId
    - getElementId
    - useHiddenTextElement
    - mount
    - unmount
    - getVersion
    - isSatisfied
    - checkReactVersion
    - checkDoctype
    - useDev
    - useDevSetupWarning
    - useStartupValidation
    - usePrevious
    - create
    - isClaimed
    - isActive
    - claim
    - release
    - tryAbandon
    - isDragging
    - preventStandardKeyEvents
    - supportedEventName
    - isSloppyClickThresholdExceeded
    - getCaptureBindings
    - useMouseSensor
    - onMouseDown
    - listenForCapture
    - bindCapturingEvents
    - startPendingDrag
    - mount
    - unmount
    - noop
    - getDraggingBindings
    - cancel
    - drop
    - useKeyboardSensor
    - onKeyDown
    - stop
    - tryStartCapture
    - mount
    - unmount
    - getWindowBindings
    - getHandleBindings
    - useTouchSensor
    - getPhase
    - setPhase
    - onTouchStart
    - listenForCapture
    - bindCapturingEvents
    - unbindAll
    - startDragging
    - startPendingDrag
    - mount
    - unmount
    - webkitHack
    - useValidateSensorHooks
    - isAnInteractiveElement
    - isEventInInteractiveElement
    - getBorderBoxCenterPosition
    - isElement
    - supportedMatchesName
    - closestPonyfill
    - closest
    - getSelector
    - findClosestDragHandleFromEvent
    - tryGetClosestDraggableIdFromEvent
    - findDraggable
    - preventDefault
    - isActive
    - canStart
    - tryStart
    - getShouldRespectForcePress
    - isLockActive
    - tryDispatch
    - lift
    - completed
    - finish
    - fluidLift
    - 1
    - snapLift
    - abortPreDrag
    - useSensorMarshal
    - lockAPI
    - tryAbandonLock
    - listenToStore
    - tryReleaseLock
    - createResponders
    - onBeforeCapureCallback
    - createAutoScrollerOptions
    - getStore
    - App
    - useUniqueContextId
    - DragDropContext
    - getDraggingTransition
    - getDraggingOpacity
    - getShouldDraggingAnimate
    - getDraggingStyle
    - getSecondaryStyle
    - getStyle
    - getDimension
    - useDraggablePublisher
    - checkIsValidInnerRef
    - useValidation
    - prefix
    - useClonePropValidation
    - useRequiredContext
    - preventHtml5Dnd
    - Draggable
    - isStrictEqual
    - whatIsDraggedOverFromResult
    - getCombineWithFromResult
    - getCombineWithFromImpact
    - getDraggableSelector
    - selector
    - getSecondarySnapshot
    - getSecondarySelector
    - getFallback
    - getProps
    - selector
    - 1
    - selector
    - PrivateDraggable
    - PublicDraggable
    - isEqual
    - isEither
    - isBoth
    - isElementScrollable
    - isBodyScrollable
    - getClosestScrollable
    - checkForNestedScrollContainers
    - getScroll
    - getIsFixed
    - getEnv
    - getDroppableDimension
    - frame
    - getClient
    - getDimension
    - closest
    - getListenerOptions
    - getClosestScrollableFromDrag
    - useDroppablePublisher
    - noop
    - getSize
    - getStyle
    - Placeholder
    - isBoolean
    - runChecks
    - required
    - boolean
    - ref
    - placeholder
    - hasClone
    - hasNoPlaceholder
    - useValidation
    - onClose
    - Droppable
    - getClone
    - getBody
    - attachDefaultPropsToOwnProps
    - isMatchingType
    - getDraggable
    - makeMapStateToProps
    - selector
    - ConnectedDroppable
    - ChevronRightIcon
    - ChevronDownIcon
    - UserCircleIcon
    - ClipboardDocumentCheckIcon
    - BookmarkIcon
  Comments:
    //# sourceMappingURL=module.compiled.js.map
    //# sourceMappingURL=react-jsx-dev-runtime.js.map
    //# sourceMappingURL=react.js.map
    //# sourceMappingURL=react-dom.js.map
    /**
 * @license React
 * use-sync-external-store-with-selector.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    // src/utils/react.ts
    // src/hooks/useSelector.ts
    // src/utils/react-is.ts
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/utils/warning.ts
    // src/connect/verifySubselectors.ts
    // src/connect/selectorFactory.ts
    // src/utils/bindActionCreators.ts
    // src/utils/isPlainObject.ts
    // src/utils/verifyPlainObject.ts
    // src/connect/wrapMapToProps.ts
    // src/connect/invalidArgFactory.ts
    // src/connect/mapDispatchToProps.ts
    // @ts-ignore
    // @ts-ignore
    // src/connect/mapStateToProps.ts
    // @ts-ignore
    // src/connect/mergeProps.ts
    // src/utils/batch.ts
    // src/utils/Subscription.ts
    // src/utils/useIsomorphicLayoutEffect.ts
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/utils/shallowEqual.ts
    // src/utils/hoistStatics.ts
    // src/components/Context.ts
    /* @__PURE__ */
    /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/components/connect.tsx
    // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.
    // @ts-ignore
    // use React's forwardRef to expose a ref of the wrapped component
    // the context consumer to use
    /* @__PURE__ */
    // @ts-ignore
    /* @__PURE__ */
    // @ts-ignore
    /* @__PURE__ */
    // @ts-ignore
    // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing
    // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,
    // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.
    // @ts-ignore
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/components/Provider.tsx
    /* @__PURE__ */
    /* @__PURE__ */
    // src/hooks/useReduxContext.ts
    /* @__PURE__ */
    // src/hooks/useStore.ts
    // @ts-ignore
    /* @__PURE__ */
    // src/hooks/useDispatch.ts
    /* @__PURE__ */
    //redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization", {
    /* @__PURE__ */
    // src/exports.ts
    //# sourceMappingURL=react-redux.mjs.map
    // src/utils/formatProdErrorMessage.ts
    //redux.js.org/Errors?code=${code} for the full message or use the non-minified dev environment for full errors. `;
    // src/utils/symbol-observable.ts
    /* @__PURE__ */
    // src/utils/actionTypes.ts
    // src/utils/isPlainObject.ts
    // src/utils/kindOf.ts
    // src/createStore.ts
    //redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
    /* @__PURE__ */
    /* @__PURE__ */
    //redux.js.org/api/store#subscribelistener for more details.");
    //redux.js.org/api/store#subscribelistener for more details.");
    //redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`);
    /**
       * The minimal observable subscription method.
       * @param observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
    // src/utils/warning.ts
    // src/combineReducers.ts
    /*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.`);
        }
    });
}
function combineReducers(reducers) {
    const reducerKeys = Object.keys(reducers);
    const finalReducers = {};
    for(let i = 0; i < reducerKeys.length; i++){
        const key = reducerKeys[i];
        if ("TURBOPACK compile-time truthy", 1) {
            if (typeof reducers[key] === "undefined") {
                warning(`No reducer provided for key "${key}"`);
            }
        }
        if (typeof reducers[key] === "function") {
            finalReducers[key] = reducers[key];
        }
    }
    const finalReducerKeys = Object.keys(finalReducers);
    let unexpectedKeyCache;
    if (("TURBOPACK compile-time value", "development") !== "production") {
        unexpectedKeyCache = {};
    }
    let shapeAssertionError;
    try {
        assertReducerShape(finalReducers);
    } catch (e) {
        shapeAssertionError = e;
    }
    return function combination(state = {}, action) {
        if (shapeAssertionError) {
            throw shapeAssertionError;
        }
        if ("TURBOPACK compile-time truthy", 1) {
            const warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
            if (warningMessage) {
                warning(warningMessage);
            }
        }
        let hasChanged = false;
        const nextState = {};
        for(let i = 0; i < finalReducerKeys.length; i++){
            const key = finalReducerKeys[i];
            const reducer = finalReducers[key];
            const previousStateForKey = state[key];
            const nextStateForKey = reducer(previousStateForKey, action);
            if (typeof nextStateForKey === "undefined") {
                const actionType = action && action.type;
                throw new Error(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : `When called with an action of type ${actionType ? `"${String(actionType)}"` : "(unknown type)"}, the slice reducer for key "${key}" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.`);
            }
            nextState[key] = nextStateForKey;
            hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
        }
        hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
        return hasChanged ? nextState : state;
    };
}
// src/bindActionCreators.ts
function bindActionCreator(actionCreator, dispatch) {
    return function(...args) {
        return dispatch(actionCreator.apply(this, args));
    };
}
function bindActionCreators(actionCreators, dispatch) {
    if (typeof actionCreators === "function") {
        return bindActionCreator(actionCreators, dispatch);
    }
    if (typeof actionCreators !== "object" || actionCreators === null) {
        throw new Error(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : `bindActionCreators expected an object or a function, but instead received: '${kindOf(actionCreators)}'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?`);
    }
    const boundActionCreators = {};
    for(const key in actionCreators){
        const actionCreator = actionCreators[key];
        if (typeof actionCreator === "function") {
            boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
        }
    }
    return boundActionCreators;
}
// src/compose.ts
function compose(...funcs) {
    if (funcs.length === 0) {
        return (arg)=>arg;
    }
    if (funcs.length === 1) {
        return funcs[0];
    }
    return funcs.reduce((a, b)=>(...args)=>a(b(...args)));
}
// src/applyMiddleware.ts
function applyMiddleware(...middlewares) {
    return (createStore2)=>(reducer, preloadedState)=>{
            const store = createStore2(reducer, preloadedState);
            let dispatch = ()=>{
                throw new Error(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
            };
            const middlewareAPI = {
                getState: store.getState,
                dispatch: (action, ...args)=>dispatch(action, ...args)
            };
            const chain = middlewares.map((middleware)=>middleware(middlewareAPI));
            dispatch = compose(...chain)(store.dispatch);
            return {
                ...store,
                dispatch
            };
        };
}
// src/utils/isAction.ts
function isAction(action) {
    return isPlainObject(action) && "type" in action && typeof action.type === "string";
}
;
 //# sourceMappingURL=redux.mjs.map
}}),
"[project]/node_modules/@hello-pangea/dnd/dist/dnd.esm.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "DragDropContext": (()=>DragDropContext),
    "Draggable": (()=>PublicDraggable),
    "Droppable": (()=>ConnectedDroppable),
    "useKeyboardSensor": (()=>useKeyboardSensor),
    "useMouseSensor": (()=>useMouseSensor),
    "useTouchSensor": (()=>useTouchSensor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-dom.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/react-redux/dist/react-redux.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$box$2d$model$2f$dist$2f$css$2d$box$2d$model$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/css-box-model/dist/css-box-model.esm.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$raf$2d$schd$2f$dist$2f$raf$2d$schd$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/raf-schd/dist/raf-schd.esm.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/redux/dist/redux.mjs [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
const isProduction$1 = ("TURBOPACK compile-time value", "development") === 'production';
const spacesAndTabs = /[ \t]{2,}/g;
const lineStartWithSpaces = /^[ \t]*/
    //github.com/hello-pangea/dnd/blob/main/docs/patterns/virtual-lists.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/doctype.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/using-inner-ref.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/how-we-detect-scroll-containers.md
    //github.com/atlassian/react-beautiful-dnd/issues/131
    //github.com/hello-pangea/dnd/blob/main/docs/api/droppable.md
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=node_modules_2c0c3f._.js.map

File: ./frontend/.next/server/chunks/ssr/[root of the server]__688d87._.js

File: ./frontend/.next/server/chunks/ssr/_23d325._.js
  JavaScript Functions:
    - Home
  Comments:
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //vercel.com/new?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app",
    /*#__PURE__*/
    /*#__PURE__*/
    //nextjs.org/docs?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app",
    /*#__PURE__*/
    /*#__PURE__*/
    //nextjs.org/learn?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app",
    /*#__PURE__*/
    /*#__PURE__*/
    //vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app",
    /*#__PURE__*/
    /*#__PURE__*/
    //nextjs.org?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app",
    /*#__PURE__*/
    //# sourceMappingURL=_23d325._.js.map

File: ./frontend/.next/server/chunks/ssr/node_modules_525566._.js
  JavaScript Functions:
    - _extends
    - is
    - memoizedSelector
    - isValidElementType
    - typeOf
    - isContextConsumer
    - isMemo
    - warning
    - verify
    - verifySubselectors
    - pureFinalPropsSelectorFactory
    - handleFirstCall
    - handleNewPropsAndNewState
    - handleNewProps
    - handleNewState
    - handleSubsequentCalls
    - pureFinalPropsSelector
    - finalPropsSelectorFactory
    - bindActionCreators
    - isPlainObject
    - verifyPlainObject
    - wrapMapToPropsConstant
    - initConstantSelector
    - constantSelector
    - getDependsOnOwnProps
    - wrapMapToPropsFunc
    - initProxySelector
    - mapToPropsProxy
    - detectFactoryAndVerify
    - createInvalidArgFactory
    - mapDispatchToPropsFactory
    - mapStateToPropsFactory
    - defaultMergeProps
    - wrapMergePropsFunc
    - initMergePropsProxy
    - mergePropsProxy
    - mergePropsFactory
    - defaultNoopBatch
    - createListenerCollection
    - unsubscribe
    - createSubscription
    - addNestedSub
    - notifyNestedSubs
    - handleChangeWrapper
    - isSubscribed
    - trySubscribe
    - tryUnsubscribe
    - trySubscribeSelf
    - tryUnsubscribeSelf
    - canUseDOM
    - isRunningInReactNative
    - getUseIsomorphicLayoutEffect
    - is
    - shallowEqual
    - getStatics
    - hoistNonReactStatics
    - getContext
    - stringifyComponent
    - useIsomorphicLayoutEffectWithArgs
    - captureWrapperProps
    - subscribeUpdates
    - checkForUpdates
    - unsubscribeWrapper
    - strictEqual
    - connect
    - wrapWithConnect
    - returned
    - ConnectFunction
    - selector
    - subscribe
    - forwardConnectRef
    - Provider
    - createReduxContextHook
    - useReduxContext2
    - createStoreHook
    - useStore2
    - createDispatchHook
    - useDispatch2
    - refEquality
    - createSelectorHook
    - useSelector2
    - as
    - as
    - to
    - invariant
    - getRect
    - expand
    - shrink
    - shift
    - createBox
    - parse
    - getWindowScroll
    - offset
    - withScroll
    - calculateBox
    - getBox
    - rafSchd
    - wrapperFn
    - formatProdErrorMessage
    - randomString
    - isPlainObject
    - miniKindOf
    - ctorName
    - isError
    - isDate
    - kindOf
    - createStore
    - ensureCanMutateNextListeners
    - getState
    - subscribe
    - unsubscribe
    - dispatch
    - replaceReducer
    - observable
    - observeState
    - legacy_createStore
    - warning
    - getUnexpectedStateShapeWarningMessage
    - assertReducerShape
    - combineReducers
    - combination
    - bindActionCreator
    - bindActionCreators
    - compose
    - applyMiddleware
    - dispatch
    - isAction
  Comments:
    //# sourceMappingURL=module.compiled.js.map
    //# sourceMappingURL=react-jsx-dev-runtime.js.map
    //# sourceMappingURL=react.js.map
    //# sourceMappingURL=react-dom.js.map
    /**
 * @license React
 * use-sync-external-store-with-selector.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    // src/utils/react.ts
    // src/hooks/useSelector.ts
    // src/utils/react-is.ts
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/utils/warning.ts
    // src/connect/verifySubselectors.ts
    // src/connect/selectorFactory.ts
    // src/utils/bindActionCreators.ts
    // src/utils/isPlainObject.ts
    // src/utils/verifyPlainObject.ts
    // src/connect/wrapMapToProps.ts
    // src/connect/invalidArgFactory.ts
    // src/connect/mapDispatchToProps.ts
    // @ts-ignore
    // @ts-ignore
    // src/connect/mapStateToProps.ts
    // @ts-ignore
    // src/connect/mergeProps.ts
    // src/utils/batch.ts
    // src/utils/Subscription.ts
    // src/utils/useIsomorphicLayoutEffect.ts
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/utils/shallowEqual.ts
    // src/utils/hoistStatics.ts
    // src/components/Context.ts
    /* @__PURE__ */
    /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/components/connect.tsx
    // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.
    // @ts-ignore
    // use React's forwardRef to expose a ref of the wrapped component
    // the context consumer to use
    /* @__PURE__ */
    // @ts-ignore
    /* @__PURE__ */
    // @ts-ignore
    /* @__PURE__ */
    // @ts-ignore
    // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing
    // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,
    // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.
    // @ts-ignore
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/components/Provider.tsx
    /* @__PURE__ */
    /* @__PURE__ */
    // src/hooks/useReduxContext.ts
    /* @__PURE__ */
    // src/hooks/useStore.ts
    // @ts-ignore
    /* @__PURE__ */
    // src/hooks/useDispatch.ts
    /* @__PURE__ */
    //redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization", {
    /* @__PURE__ */
    // src/exports.ts
    //# sourceMappingURL=react-redux.mjs.map
    // src/utils/formatProdErrorMessage.ts
    //redux.js.org/Errors?code=${code} for the full message or use the non-minified dev environment for full errors. `;
    // src/utils/symbol-observable.ts
    /* @__PURE__ */
    // src/utils/actionTypes.ts
    // src/utils/isPlainObject.ts
    // src/utils/kindOf.ts
    // src/createStore.ts
    //redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
    /* @__PURE__ */
    /* @__PURE__ */
    //redux.js.org/api/store#subscribelistener for more details.");
    //redux.js.org/api/store#subscribelistener for more details.");
    //redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`);
    /**
       * The minimal observable subscription method.
       * @param observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
    // src/utils/warning.ts
    // src/combineReducers.ts
    // src/bindActionCreators.ts
    // src/compose.ts
    // src/applyMiddleware.ts
    // src/utils/isAction.ts
    //# sourceMappingURL=redux.mjs.map
    //# sourceMappingURL=node_modules_525566._.js.map

File: ./frontend/.next/server/chunks/ssr/node_modules_797dd9._.js
  JavaScript Functions:
    - _extends
    - is
    - memoizedSelector
    - isValidElementType
    - typeOf
    - isContextConsumer
    - isMemo
    - warning
    - verify
    - verifySubselectors
    - pureFinalPropsSelectorFactory
    - handleFirstCall
    - handleNewPropsAndNewState
    - handleNewProps
    - handleNewState
    - handleSubsequentCalls
    - pureFinalPropsSelector
    - finalPropsSelectorFactory
    - bindActionCreators
    - isPlainObject
    - verifyPlainObject
    - wrapMapToPropsConstant
    - initConstantSelector
    - constantSelector
    - getDependsOnOwnProps
    - wrapMapToPropsFunc
    - initProxySelector
    - mapToPropsProxy
    - detectFactoryAndVerify
    - createInvalidArgFactory
    - mapDispatchToPropsFactory
    - mapStateToPropsFactory
    - defaultMergeProps
    - wrapMergePropsFunc
    - initMergePropsProxy
    - mergePropsProxy
    - mergePropsFactory
    - defaultNoopBatch
    - createListenerCollection
    - unsubscribe
    - createSubscription
    - addNestedSub
    - notifyNestedSubs
    - handleChangeWrapper
    - isSubscribed
    - trySubscribe
    - tryUnsubscribe
    - trySubscribeSelf
    - tryUnsubscribeSelf
    - canUseDOM
    - isRunningInReactNative
    - getUseIsomorphicLayoutEffect
    - is
    - shallowEqual
    - getStatics
    - hoistNonReactStatics
    - getContext
    - stringifyComponent
    - useIsomorphicLayoutEffectWithArgs
    - captureWrapperProps
    - subscribeUpdates
    - checkForUpdates
    - unsubscribeWrapper
    - strictEqual
    - connect
    - wrapWithConnect
    - returned
    - ConnectFunction
    - selector
    - subscribe
    - forwardConnectRef
    - Provider
    - createReduxContextHook
    - useReduxContext2
    - createStoreHook
    - useStore2
    - createDispatchHook
    - useDispatch2
    - refEquality
    - createSelectorHook
    - useSelector2
    - as
    - as
    - to
    - invariant
    - getRect
    - expand
    - shrink
    - shift
    - createBox
    - parse
    - getWindowScroll
    - offset
    - withScroll
    - calculateBox
    - getBox
    - rafSchd
    - wrapperFn
    - formatProdErrorMessage
    - randomString
    - isPlainObject
    - miniKindOf
    - ctorName
    - isError
    - isDate
    - kindOf
    - createStore
    - ensureCanMutateNextListeners
    - getState
    - subscribe
    - unsubscribe
    - dispatch
    - replaceReducer
    - observable
    - observeState
    - legacy_createStore
    - warning
    - getUnexpectedStateShapeWarningMessage
    - assertReducerShape
    - combineReducers
    - combination
    - bindActionCreator
    - bindActionCreators
    - compose
    - applyMiddleware
    - dispatch
    - isAction
    - 2
    - getDevMessage
    - getFormattedMessage
    - log
    - noop
    - getOptions
    - bindEvents
    - unbind
    - unbindAll
    - toString
    - invariant
    - onWindowError
    - getCallbacks
    - setCallbacks
    - position
    - onDragStart
    - withLocation
    - withCombine
    - onDragUpdate
    - returnedToStart
    - onDragEnd
    - isEqual
    - areInputsEqual
    - useMemo
    - initial
    - useCallback
    - add
    - subtract
    - 1
    - negate
    - patch
    - distance
    - 1
    - apply
    - executeClip
    - offsetByPosition
    - getCorners
    - 1
    - increase
    - clip
    - getSubject
    - scrollDroppable
    - memoizeOne
    - memoized
    - clear
    - tryGetDestination
    - tryGetCombine
    - moveToNextCombine
    - getImpact
    - isHomeOf
    - isWithin
    - isPartiallyVisibleThroughFrame
    - isTotallyVisibleThroughFrame
    - isTotallyVisibleThroughFrameOnAxis
    - getDroppableDisplaced
    - isVisibleInDroppable
    - isVisibleInViewport
    - 1
    - isPartiallyVisible
    - isTotallyVisible
    - isTotallyVisibleOnAxis
    - getShouldAnimate
    - getTarget
    - getDisplacementGroups
    - process
    - getIndexOfLastItem
    - goAtEnd
    - calculateReorderImpact
    - didStartAfterCritical
    - fromCombine
    - fromReorder
    - moveToNextIndex
    - getCombinedItemDisplacement
    - whenCombining
    - distanceFromStartToBorderBoxCenter
    - distanceFromEndToBorderBoxCenter
    - getCrossAxisBorderBoxCenter
    - goAfter
    - goBefore
    - goIntoStart
    - whenReordering
    - withDroppableDisplacement
    - getResultWithoutDroppableDisplacement
    - getPageBorderBoxCenterFromImpact
    - scrollViewport
    - getDraggables
    - tryGetVisible
    - speculativelyIncrease
    - withViewportDisplacement
    - getClientFromPageBorderBoxCenter
    - isTotallyVisibleInNewLocation
    - moveToNextPlace
    - getKnownActive
    - getBestCrossAxisDroppable
    - getCurrentPageBorderBoxCenter
    - getCurrentPageBorderBox
    - getClosestDraggable
    - getDisplacedBy
    - getRequiredGrowthForPlaceholder
    - withMaxScroll
    - addPlaceholder
    - removePlaceholder
    - moveToNewDroppable
    - proposedIndex
    - moveCrossAxis
    - whatIsDraggedOver
    - 1
    - moveInDirection
    - isMovementAllowed
    - isPositionInFrame
    - run
    - getHasOverlap
    - getFurthestAway
    - getDroppableOver
    - offsetRectByPosition
    - withDroppableScroll
    - getIsDisplaced
    - atIndex
    - getReorderImpact
    - getCombineImpact
    - getDragImpact
    - patchDroppableMap
    - clearUnusedPlaceholder
    - recomputePlaceholders
    - update
    - getDraggables
    - recompute
    - getClientBorderBoxCenter
    - refreshSnap
    - getHomeLocation
    - getLiftEffect
    - patchDimensionMap
    - start
    - finish
    - offsetDraggable
    - getFrame
    - adjustAdditionsForScrollChanges
    - publishWhileDraggingInVirtual
    - isSnapping
    - postDroppableChange
    - removeScrollJumpRequest
    - reducer
    - guard
    - beforeInitialCapture
    - 1
    - initialPublish
    - publishWhileDragging
    - collectionStarting
    - updateDroppableScroll
    - updateDroppableIsEnabled
    - updateDroppableIsCombineEnabled
    - move
    - moveByWindowScroll
    - updateViewportMaxScroll
    - moveUp
    - moveDown
    - moveRight
    - moveLeft
    - flush
    - animateDrop
    - completeDrop
    - drop
    - dropPending
    - dropAnimationFinished
    - checkIndexes
    - validateDimensions
    - lift
    - style
    - moveTo
    - getDropDuration
    - getNewHomeClientOffset
    - getDropImpact
    - dropMiddleware
    - getWindowScroll
    - getWindowScrollBinding
    - getScrollListener
    - updateScroll
    - isActive
    - start
    - stop
    - 1
    - scrollListener
    - getExpiringAnnounce
    - result
    - wasCalled
    - getAsyncMarshal
    - execute
    - add
    - flush
    - areLocationsEqual
    - isCombineEqual
    - isCriticalEqual
    - withTimings
    - getDragStart
    - execute
    - getPublisher
    - beforeCapture
    - beforeStart
    - start
    - update
    - flush
    - drop
    - abort
    - responders
    - dropAnimationFinishMiddleware
    - dropAnimationFlushOnScrollMiddleware
    - clear
    - flushDropAnimation
    - dimensionMarshalStopper
    - focus
    - shouldStop
    - autoScroll
    - pendingDrop
    - createStore
    - 1
    - createPublisher
    - collect
    - add
    - remove
    - stop
    - getMaxScroll
    - getDocumentElement
    - getMaxWindowScroll
    - getViewport
    - getInitialPublish
    - shouldPublishUpdate
    - createDimensionMarshal
    - updateDroppableIsEnabled
    - updateDroppableIsCombineEnabled
    - updateDroppableScroll
    - scrollDroppable
    - stopPublishing
    - subscriber
    - startPublishing
    - canStartDrag
    - scrollWindow
    - getScrollableDroppableOver
    - getBestScrollableDroppable
    - getDistanceThresholds
    - getPercentage
    - getValueFromDistance
    - dampenValueByTime
    - getValue
    - getScrollOnAxis
    - adjustForSizeLimits
    - 1
    - getOverlap
    - getRemainder
    - canPartiallyScroll
    - canScrollWindow
    - getWindowOverlap
    - canScrollDroppable
    - getDroppableOverlap
    - getWindowScrollChange
    - getDroppableScrollChange
    - scroll
    - createFluidScroller
    - tryScroll
    - 1
    - fakeScrollCallback
    - stop
    - createJumpScroller
    - moveByOffset
    - scrollDroppableAsMuchAsItCan
    - scrollWindowAsMuchAsItCan
    - jumpScroller
    - createAutoScroller
    - scroll
    - dragHandle
    - draggable
    - droppable
    - makeGetSelector
    - getStyles
    - 1
    - 1
    - 1
    - getHead
    - createStyleEl
    - useStyleMarshal
    - remove
    - querySelectorAll
    - getWindowFromEl
    - isHtmlElement
    - findDragHandle
    - useFocusMarshal
    - register
    - unregister
    - tryGiveFocus
    - tryShiftRecord
    - tryRestoreFocusRecorded
    - tryRecordFocus
    - clearFrameOnUnmount
    - createRegistry
    - subscribe
    - unsubscribe
    - notify
    - findDraggableById
    - getDraggableById
    - findDroppableById
    - getDroppableById
    - clean
    - useRegistry
    - unmount
    - getBodyElement
    - getId
    - useAnnouncer
    - setup
    - cleanup
    - remove
    - useUniqueId
    - getElementId
    - useHiddenTextElement
    - mount
    - unmount
    - getVersion
    - isSatisfied
    - checkReactVersion
    - checkDoctype
    - useDev
    - useDevSetupWarning
    - useStartupValidation
    - usePrevious
    - create
    - isClaimed
    - isActive
    - claim
    - release
    - tryAbandon
    - isDragging
    - preventStandardKeyEvents
    - supportedEventName
    - isSloppyClickThresholdExceeded
    - getCaptureBindings
    - useMouseSensor
    - onMouseDown
    - listenForCapture
    - bindCapturingEvents
    - startPendingDrag
    - mount
    - unmount
    - noop
    - getDraggingBindings
    - cancel
    - drop
    - useKeyboardSensor
    - onKeyDown
    - stop
    - tryStartCapture
    - mount
    - unmount
    - getWindowBindings
    - getHandleBindings
    - useTouchSensor
    - getPhase
    - setPhase
    - onTouchStart
    - listenForCapture
    - bindCapturingEvents
    - unbindAll
    - startDragging
    - startPendingDrag
    - mount
    - unmount
    - webkitHack
    - useValidateSensorHooks
    - isAnInteractiveElement
    - isEventInInteractiveElement
    - getBorderBoxCenterPosition
    - isElement
    - supportedMatchesName
    - closestPonyfill
    - closest
    - getSelector
    - findClosestDragHandleFromEvent
    - tryGetClosestDraggableIdFromEvent
    - findDraggable
    - preventDefault
    - isActive
    - canStart
    - tryStart
    - getShouldRespectForcePress
    - isLockActive
    - tryDispatch
    - lift
    - completed
    - finish
    - fluidLift
    - 1
    - snapLift
    - abortPreDrag
    - useSensorMarshal
    - lockAPI
    - tryAbandonLock
    - listenToStore
    - tryReleaseLock
    - createResponders
    - onBeforeCapureCallback
    - createAutoScrollerOptions
    - getStore
    - App
    - useUniqueContextId
    - DragDropContext
    - getDraggingTransition
    - getDraggingOpacity
    - getShouldDraggingAnimate
    - getDraggingStyle
    - getSecondaryStyle
    - getStyle
    - getDimension
    - useDraggablePublisher
    - checkIsValidInnerRef
    - useValidation
    - prefix
    - useClonePropValidation
    - useRequiredContext
    - preventHtml5Dnd
    - Draggable
    - isStrictEqual
    - whatIsDraggedOverFromResult
    - getCombineWithFromResult
    - getCombineWithFromImpact
    - getDraggableSelector
    - selector
    - getSecondarySnapshot
    - getSecondarySelector
    - getFallback
    - getProps
    - selector
    - 1
    - selector
    - PrivateDraggable
    - PublicDraggable
    - isEqual
    - isEither
    - isBoth
    - isElementScrollable
    - isBodyScrollable
    - getClosestScrollable
    - checkForNestedScrollContainers
    - getScroll
    - getIsFixed
    - getEnv
    - getDroppableDimension
    - frame
    - getClient
    - getDimension
    - closest
    - getListenerOptions
    - getClosestScrollableFromDrag
    - useDroppablePublisher
    - noop
    - getSize
    - getStyle
    - Placeholder
    - isBoolean
    - runChecks
    - required
    - boolean
    - ref
    - placeholder
    - hasClone
    - hasNoPlaceholder
    - useValidation
    - onClose
    - Droppable
    - getClone
    - getBody
    - attachDefaultPropsToOwnProps
    - isMatchingType
    - getDraggable
    - makeMapStateToProps
    - selector
    - ConnectedDroppable
  Comments:
    //# sourceMappingURL=module.compiled.js.map
    //# sourceMappingURL=react-jsx-dev-runtime.js.map
    //# sourceMappingURL=react.js.map
    //# sourceMappingURL=react-dom.js.map
    /**
 * @license React
 * use-sync-external-store-with-selector.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    // src/utils/react.ts
    // src/hooks/useSelector.ts
    // src/utils/react-is.ts
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/utils/warning.ts
    // src/connect/verifySubselectors.ts
    // src/connect/selectorFactory.ts
    // src/utils/bindActionCreators.ts
    // src/utils/isPlainObject.ts
    // src/utils/verifyPlainObject.ts
    // src/connect/wrapMapToProps.ts
    // src/connect/invalidArgFactory.ts
    // src/connect/mapDispatchToProps.ts
    // @ts-ignore
    // @ts-ignore
    // src/connect/mapStateToProps.ts
    // @ts-ignore
    // src/connect/mergeProps.ts
    // src/utils/batch.ts
    // src/utils/Subscription.ts
    // src/utils/useIsomorphicLayoutEffect.ts
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/utils/shallowEqual.ts
    // src/utils/hoistStatics.ts
    // src/components/Context.ts
    /* @__PURE__ */
    /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/components/connect.tsx
    // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.
    // @ts-ignore
    // use React's forwardRef to expose a ref of the wrapped component
    // the context consumer to use
    /* @__PURE__ */
    // @ts-ignore
    /* @__PURE__ */
    // @ts-ignore
    /* @__PURE__ */
    // @ts-ignore
    // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing
    // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,
    // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.
    // @ts-ignore
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/components/Provider.tsx
    /* @__PURE__ */
    /* @__PURE__ */
    // src/hooks/useReduxContext.ts
    /* @__PURE__ */
    // src/hooks/useStore.ts
    // @ts-ignore
    /* @__PURE__ */
    // src/hooks/useDispatch.ts
    /* @__PURE__ */
    //redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization", {
    /* @__PURE__ */
    // src/exports.ts
    //# sourceMappingURL=react-redux.mjs.map
    // src/utils/formatProdErrorMessage.ts
    //redux.js.org/Errors?code=${code} for the full message or use the non-minified dev environment for full errors. `;
    // src/utils/symbol-observable.ts
    /* @__PURE__ */
    // src/utils/actionTypes.ts
    // src/utils/isPlainObject.ts
    // src/utils/kindOf.ts
    // src/createStore.ts
    //redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
    /* @__PURE__ */
    /* @__PURE__ */
    //redux.js.org/api/store#subscribelistener for more details.");
    //redux.js.org/api/store#subscribelistener for more details.");
    //redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`);
    /**
       * The minimal observable subscription method.
       * @param observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
    // src/utils/warning.ts
    // src/combineReducers.ts
    /*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.`);
        }
    });
}
function combineReducers(reducers) {
    const reducerKeys = Object.keys(reducers);
    const finalReducers = {};
    for(let i = 0; i < reducerKeys.length; i++){
        const key = reducerKeys[i];
        if ("TURBOPACK compile-time truthy", 1) {
            if (typeof reducers[key] === "undefined") {
                warning(`No reducer provided for key "${key}"`);
            }
        }
        if (typeof reducers[key] === "function") {
            finalReducers[key] = reducers[key];
        }
    }
    const finalReducerKeys = Object.keys(finalReducers);
    let unexpectedKeyCache;
    if (("TURBOPACK compile-time value", "development") !== "production") {
        unexpectedKeyCache = {};
    }
    let shapeAssertionError;
    try {
        assertReducerShape(finalReducers);
    } catch (e) {
        shapeAssertionError = e;
    }
    return function combination(state = {}, action) {
        if (shapeAssertionError) {
            throw shapeAssertionError;
        }
        if ("TURBOPACK compile-time truthy", 1) {
            const warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
            if (warningMessage) {
                warning(warningMessage);
            }
        }
        let hasChanged = false;
        const nextState = {};
        for(let i = 0; i < finalReducerKeys.length; i++){
            const key = finalReducerKeys[i];
            const reducer = finalReducers[key];
            const previousStateForKey = state[key];
            const nextStateForKey = reducer(previousStateForKey, action);
            if (typeof nextStateForKey === "undefined") {
                const actionType = action && action.type;
                throw new Error(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : `When called with an action of type ${actionType ? `"${String(actionType)}"` : "(unknown type)"}, the slice reducer for key "${key}" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.`);
            }
            nextState[key] = nextStateForKey;
            hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
        }
        hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
        return hasChanged ? nextState : state;
    };
}
// src/bindActionCreators.ts
function bindActionCreator(actionCreator, dispatch) {
    return function(...args) {
        return dispatch(actionCreator.apply(this, args));
    };
}
function bindActionCreators(actionCreators, dispatch) {
    if (typeof actionCreators === "function") {
        return bindActionCreator(actionCreators, dispatch);
    }
    if (typeof actionCreators !== "object" || actionCreators === null) {
        throw new Error(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : `bindActionCreators expected an object or a function, but instead received: '${kindOf(actionCreators)}'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?`);
    }
    const boundActionCreators = {};
    for(const key in actionCreators){
        const actionCreator = actionCreators[key];
        if (typeof actionCreator === "function") {
            boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
        }
    }
    return boundActionCreators;
}
// src/compose.ts
function compose(...funcs) {
    if (funcs.length === 0) {
        return (arg)=>arg;
    }
    if (funcs.length === 1) {
        return funcs[0];
    }
    return funcs.reduce((a, b)=>(...args)=>a(b(...args)));
}
// src/applyMiddleware.ts
function applyMiddleware(...middlewares) {
    return (createStore2)=>(reducer, preloadedState)=>{
            const store = createStore2(reducer, preloadedState);
            let dispatch = ()=>{
                throw new Error(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
            };
            const middlewareAPI = {
                getState: store.getState,
                dispatch: (action, ...args)=>dispatch(action, ...args)
            };
            const chain = middlewares.map((middleware)=>middleware(middlewareAPI));
            dispatch = compose(...chain)(store.dispatch);
            return {
                ...store,
                dispatch
            };
        };
}
// src/utils/isAction.ts
function isAction(action) {
    return isPlainObject(action) && "type" in action && typeof action.type === "string";
}
;
 //# sourceMappingURL=redux.mjs.map
}}),
"[project]/node_modules/@hello-pangea/dnd/dist/dnd.esm.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "DragDropContext": (()=>DragDropContext),
    "Draggable": (()=>PublicDraggable),
    "Droppable": (()=>ConnectedDroppable),
    "useKeyboardSensor": (()=>useKeyboardSensor),
    "useMouseSensor": (()=>useMouseSensor),
    "useTouchSensor": (()=>useTouchSensor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-dom.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/react-redux/dist/react-redux.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$box$2d$model$2f$dist$2f$css$2d$box$2d$model$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/css-box-model/dist/css-box-model.esm.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$raf$2d$schd$2f$dist$2f$raf$2d$schd$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/raf-schd/dist/raf-schd.esm.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/redux/dist/redux.mjs [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
const isProduction$1 = ("TURBOPACK compile-time value", "development") === 'production';
const spacesAndTabs = /[ \t]{2,}/g;
const lineStartWithSpaces = /^[ \t]*/
    //github.com/hello-pangea/dnd/blob/main/docs/patterns/virtual-lists.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/doctype.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/using-inner-ref.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/how-we-detect-scroll-containers.md
    //github.com/atlassian/react-beautiful-dnd/issues/131
    //github.com/hello-pangea/dnd/blob/main/docs/api/droppable.md
    //# sourceMappingURL=node_modules_797dd9._.js.map

File: ./frontend/.next/server/chunks/ssr/_361d9b._.js
  JavaScript Functions:
    - _interop_require_default
    - HTTPAccessErrorFallback
    - NotFound
  Comments:
    /*#__PURE__*/
    // https://github.com/sindresorhus/modern-normalize/blob/main/modern-normalize.css#L38-L52
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /* Minified CSS from
                body { margin: 0; color: #000; background: #fff; }
                .next-error-h1 {
                  border-right: 1px solid rgba(0, 0, 0, .3);
                }

                @media (prefers-color-scheme: dark) {
                  body { color: #fff; background: #000; }
                  .next-error-h1 {
                    border-right: 1px solid rgba(255, 255, 255, .3);
                  }
                }
              */
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=error-fallback.js.map
    /*#__PURE__*/
    //# sourceMappingURL=not-found-error.js.map
    // We inject the tree and pages here so that we can use them in the route
    // module.
    //", props.params, "favicon.ico") + `?${__TURBOPACK__imported__module__$5b$project$5d2f$src$2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$225b$project$5d2f$src$2f$app$2f$favicon$2e$ico__$5b$app$2d$rsc$5d$__$28$static$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29$__["default"].src.split("/").splice(-1)[0]}`,
    // The following aren't used in production.
    //# sourceMappingURL=app-page.js.map
    //# sourceMappingURL=_361d9b._.js.map

File: ./frontend/.next/server/chunks/ssr/[root of the server]__65dd84._.js
  JavaScript Functions:
    - _interop_require_default
    - _getRequireWildcardCache
    - _interop_require_wildcard
    - SideEffect
    - emitChange
    - isInAmpMode
    - warnOnce
    - warnOnce
    - _export
    - defaultHead
    - onlyReactElement
    - for
    - unique
    - reduceComponents
    - Head
    - getImageBlurSvg
    - _export
    - isStaticRequire
    - isStaticImageData
    - isStaticImport
    - getInt
    - getWidths
    - generateImgAttrs
    - getImgProps
    - qualities
    - loader
    - isWindows
    - picomatch
    - expandRange
    - syntaxError
    - parse
    - globstar
    - eos
    - peek
    - advance
    - remaining
    - consume
    - append
    - negate
    - increment
    - decrement
    - push
    - extglobOpen
    - extglobClose
    - fastpaths
    - globstar
    - create
    - isObject
    - picomatch
    - arrayMatcher
    - isIgnored
    - matcher
    - test
    - matchBase
    - isMatch
    - parse
    - scan
    - compileRe
    - makeRe
    - toRegex
    - isPathSeparator
    - depth
    - scan
    - eos
    - peek
    - advance
    - isObject
    - hasRegexChars
    - isRegexChar
    - escapeRegex
    - toPosixSlashes
    - removeBackslashes
    - escapeLast
    - removePrefix
    - wrapOutput
    - basename
    - __nccwpck_require__
    - _export
    - matchLocalPattern
    - hasLocalMatch
    - _export
    - matchRemotePattern
    - hasRemoteMatch
    - defaultLoader
    - useMergedRef
    - cleanupA
    - cleanupB
    - applyRef
    - handleLoading
    - getDynamicProps
    - ownRef
    - ImagePreload
    - config
    - qualities
  Comments:
    //# sourceMappingURL=module.compiled.js.map
    //# sourceMappingURL=react-jsx-runtime.js.map
    //# sourceMappingURL=react.js.map
    //# sourceMappingURL=react-dom.js.map
    // We need to call `updateHead` method whenever the `SideEffect` is trigger in all
    // life-cycles: mount, update, unmount. However, if there are multiple `SideEffect`s
    // being rendered, we only trigger the method from the last one.
    // This is ensured by keeping the last unflushed `updateHead` in the `_pendingUpdate`
    // singleton in the layout effect pass, and actually trigger it in the effect pass.
    //# sourceMappingURL=side-effect.js.map
    //# sourceMappingURL=amp-context.js.map
    //# sourceMappingURL=head-manager-context.js.map
    //# sourceMappingURL=amp-mode.js.map
    //# sourceMappingURL=warn-once.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // React children can be "string" or "number" in this case we ignore them for backwards compat
    // Adds support for React.Fragment
    /*
 returns a function for filtering head child elements
 which shouldn't be duplicated, like <title/>
 Also adds support for deduplicated `key` properties
*/
    // eslint-disable-next-line default-case
    /**
 *
 * @param headChildrenElements List of children of <Head>
 */
    // omit JSON-LD structured data snippets from the warning
    //nextjs.org/docs/messages/no-script-tags-in-head-component");
    //nextjs.org/docs/messages/no-stylesheets-in-head-component');
    /*#__PURE__*/
    /**
 * This component injects elements to `<head>` of your page.
 * To avoid duplicated `tags` in `<head>` you can use the `key` property, which will make sure every tag is only rendered once.
 */
    /*#__PURE__*/
    //# sourceMappingURL=head.js.map
    /**
 * A shared function, used on both client and server, to generate a SVG blur placeholder.
 */
    //www.w3.org/2000/svg' " + viewBox + "%3E%3Cfilter id='b' color-interpolation-filters='sRGB'%3E%3CfeGaussianBlur stdDeviation='" + std + "'/%3E%3CfeColorMatrix values='1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 100 -1' result='s'/%3E%3CfeFlood x='0' y='0' width='100%25' height='100%25'/%3E%3CfeComposite operator='out' in='s'/%3E%3CfeComposite in2='SourceGraphic'/%3E%3CfeGaussianBlur stdDeviation='" + std + "'/%3E%3C/filter%3E%3Cimage width='100%25' height='100%25' x='0' y='0' preserveAspectRatio='" + preserveAspectRatio + "' style='filter: url(%23b);' href='" + blurDataURL + "'/%3E%3C/svg%3E";
    //# sourceMappingURL=image-blur-svg.js.map
    //# sourceMappingURL=image-config.js.map
    // Find all the "vw" percent sizes used in the sizes prop
    // > are actually 3x in the green color, but only 1.5x in the red and
    // > blue colors. Showing a 3x resolution image in the app vs a 2x
    // > resolution image will be visually the same, though the 3x image
    // > takes significantly more data. Even true 3x resolution screens are
    // > wasteful as the human eye cannot see that level of detail without
    // > something like a magnifying glass.
    // https://blog.twitter.com/engineering/en_us/topics/infrastructure/2019/capping-image-fidelity-on-ultra-high-resolution-devices.html
    /*, width * 3*/
    // It's intended to keep `src` the last attribute because React updates
    // attributes in order. If we keep `src` the first one, Safari will
    // immediately start to fetch `src`, before `sizes` and `srcSet` are even
    // updated by React. That causes multiple unnecessary requests if `srcSet`
    // and `sizes` are defined.
    // This bug cannot be reproduced in Chrome or Firefox.
    //nextjs.org/docs/messages/invalid-images-config');
    // Remove property so it's not spread on <img> element
    // This special value indicates that the user
    // didn't define a "loader" prop or "loader" config.
    //nextjs.org/docs/messages/next-image-missing-loader");
    // The user defined a "loader" prop or config.
    // Since the config object is internal only, we
    // must not pass it to the user-defined "loader".
    // https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/Data_URIs
    // Special case to make svg serve as-is to avoid proxying
    // through the built-in Image Optimization API.
    //nextjs.org/docs/messages/export-image-api");
    // React doesn't show the stack trace and there's
    // no `src` to help identify which image, so we
    // instead console.error(ref) during mount.
    // eslint-disable-next-line no-control-regex
    // eslint-disable-next-line no-control-regex
    // should match next-image-loader
    //nextjs.org/docs/messages/placeholder-blur-data-url');
    //nextjs.org/docs/messages/next-image-missing-loader-width");
    //nextjs.org/docs/messages/next-image-upgrade-to-13");
    // @ts-ignore - missing "LargestContentfulPaint" class with "element" prop
    // https://web.dev/lcp/#measure-lcp-in-javascript
    //nextjs.org/docs/api-reference/next/image#priority");
    // Log error but don't crash the app
    // assume `data:image/`
    // During `next dev`, we don't want to generate blur placeholders with webpack
    // because it can delay starting the dev server. Instead, `next-image-loader.js`
    // will inline a special url to lazily generate the blur placeholder at request time.
    //# sourceMappingURL=get-img-props.js.map
    //# sourceMappingURL=image-config-context.js.map
    //# sourceMappingURL=router-context.js.map
    /**": "**",
                    "**/
    /**": "**"
                },
                CHAR_0: 48,
                CHAR_9: 57,
                CHAR_UPPERCASE_A: 65,
                CHAR_LOWERCASE_A: 97,
                CHAR_UPPERCASE_Z: 90,
                CHAR_LOWERCASE_Z: 122,
                CHAR_LEFT_PARENTHESES: 40,
                CHAR_RIGHT_PARENTHESES: 41,
                CHAR_ASTERISK: 42,
                CHAR_AMPERSAND: 38,
                CHAR_AT: 64,
                CHAR_BACKWARD_SLASH: 92,
                CHAR_CARRIAGE_RETURN: 13,
                CHAR_CIRCUMFLEX_ACCENT: 94,
                CHAR_COLON: 58,
                CHAR_COMMA: 44,
                CHAR_DOT: 46,
                CHAR_DOUBLE_QUOTE: 34,
                CHAR_EQUAL: 61,
                CHAR_EXCLAMATION_MARK: 33,
                CHAR_FORM_FEED: 12,
                CHAR_FORWARD_SLASH: 47,
                CHAR_GRAVE_ACCENT: 96,
                CHAR_HASH: 35,
                CHAR_HYPHEN_MINUS: 45,
                CHAR_LEFT_ANGLE_BRACKET: 60,
                CHAR_LEFT_CURLY_BRACE: 123,
                CHAR_LEFT_SQUARE_BRACKET: 91,
                CHAR_LINE_FEED: 10,
                CHAR_NO_BREAK_SPACE: 160,
                CHAR_PERCENT: 37,
                CHAR_PLUS: 43,
                CHAR_QUESTION_MARK: 63,
                CHAR_RIGHT_ANGLE_BRACKET: 62,
                CHAR_RIGHT_CURLY_BRACE: 125,
                CHAR_RIGHT_SQUARE_BRACKET: 93,
                CHAR_SEMICOLON: 59,
                CHAR_SINGLE_QUOTE: 39,
                CHAR_SPACE: 32,
                CHAR_TAB: 9,
                CHAR_UNDERSCORE: 95,
                CHAR_VERTICAL_LINE: 124,
                CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
                extglobChars (t) {
                    return {
                        "!": {
                            type: "negate",
                            open: "(?:(?!(?:",
                            close: `))${t.STAR})`
                        },
                        "?": {
                            type: "qmark",
                            open: "(?:",
                            close: ")?"
                        },
                        "+": {
                            type: "plus",
                            open: "(?:",
                            close: ")+"
                        },
                        "*": {
                            type: "star",
                            open: "(?:",
                            close: ")*"
                        },
                        "@": {
                            type: "at",
                            open: "(?:",
                            close: ")"
                        }
                    };
                },
                globChars (t) {
                    return t === true ? C : b;
                }
            };
        },
        697: (t, e, u)=>{
            const n = u(154);
            const o = u(96);
            const { MAX_LENGTH: s, POSIX_REGEX_SOURCE: r, REGEX_NON_SPECIAL_CHARS: a, REGEX_SPECIAL_CHARS_BACKREF: i, REPLACEMENTS: c } = n;
            const expandRange = (t, e)=>{
                if (typeof e.expandRange === "function") {
                    return e.expandRange(...t, e);
                }
                t.sort();
                const u = `[${t.join("-")}]`;
                try {
                    new RegExp(u);
                } catch (e) {
                    return t.map((t)=>o.escapeRegex(t)).join("..");
                }
                return u;
            };
            const syntaxError = (t, e)=>`Missing ${t}: "${e}" - use "\\\\${e}" to match literal characters`;
            const parse = (t, e)=>{
                if (typeof t !== "string") {
                    throw new TypeError("Expected a string");
                }
                t = c[t] || t;
                const u = {
                    ...e
                };
                const p = typeof u.maxLength === "number" ? Math.min(s, u.maxLength) : s;
                let l = t.length;
                if (l > p) {
                    throw new SyntaxError(`Input length: ${l}, exceeds maximum allowed length: ${p}`);
                }
                const f = {
                    type: "bos",
                    value: "",
                    output: u.prepend || ""
                };
                const A = [
                    f
                ];
                const _ = u.capture ? "" : "?:";
                const R = n.globChars(u.windows);
                const E = n.extglobChars(R);
                const { DOT_LITERAL: h, PLUS_LITERAL: g, SLASH_LITERAL: b, ONE_CHAR: C, DOTS_SLASH: y, NO_DOT: $, NO_DOT_SLASH: x, NO_DOTS_SLASH: S, QMARK: H, QMARK_NO_DOT: v, STAR: d, START_ANCHOR: L } = R;
                const globstar = (t)=>`(${_}(?:(?!${L}${t.dot ? y : h}).)*?)`;
                const T = u.dot ? "" : $;
                const O = u.dot ? H : v;
                let k = u.bash === true ? globstar(u) : d;
                if (u.capture) {
                    k = `(${k})`;
                }
                if (typeof u.noext === "boolean") {
                    u.noextglob = u.noext;
                }
                const m = {
                    input: t,
                    index: -1,
                    start: 0,
                    dot: u.dot === true,
                    consumed: "",
                    output: "",
                    prefix: "",
                    backtrack: false,
                    negated: false,
                    brackets: 0,
                    braces: 0,
                    parens: 0,
                    quotes: 0,
                    globstar: false,
                    tokens: A
                };
                t = o.removePrefix(t, m);
                l = t.length;
                const w = [];
                const N = [];
                const I = [];
                let B = f;
                let G;
                const eos = ()=>m.index === l - 1;
                const D = m.peek = (e = 1)=>t[m.index + e];
                const M = m.advance = ()=>t[++m.index] || "";
                const remaining = ()=>t.slice(m.index + 1);
                const consume = (t = "", e = 0)=>{
                    m.consumed += t;
                    m.index += e;
                };
                const append = (t)=>{
                    m.output += t.output != null ? t.output : t.value;
                    consume(t.value);
                };
                const negate = ()=>{
                    let t = 1;
                    while(D() === "!" && (D(2) !== "(" || D(3) === "?")){
                        M();
                        m.start++;
                        t++;
                    }
                    if (t % 2 === 0) {
                        return false;
                    }
                    m.negated = true;
                    m.start++;
                    return true;
                };
                const increment = (t)=>{
                    m[t]++;
                    I.push(t);
                };
                const decrement = (t)=>{
                    m[t]--;
                    I.pop();
                };
                const push = (t)=>{
                    if (B.type === "globstar") {
                        const e = m.braces > 0 && (t.type === "comma" || t.type === "brace");
                        const u = t.extglob === true || w.length && (t.type === "pipe" || t.type === "paren");
                        if (t.type !== "slash" && t.type !== "paren" && !e && !u) {
                            m.output = m.output.slice(0, -B.output.length);
                            B.type = "star";
                            B.value = "*";
                            B.output = k;
                            m.output += B.output;
                        }
                    }
                    if (w.length && t.type !== "paren") {
                        w[w.length - 1].inner += t.value;
                    }
                    if (t.value || t.output) append(t);
                    if (B && B.type === "text" && t.type === "text") {
                        B.output = (B.output || B.value) + t.value;
                        B.value += t.value;
                        return;
                    }
                    t.prev = B;
                    A.push(t);
                    B = t;
                };
                const extglobOpen = (t, e)=>{
                    const n = {
                        ...E[e],
                        conditions: 1,
                        inner: ""
                    };
                    n.prev = B;
                    n.parens = m.parens;
                    n.output = m.output;
                    const o = (u.capture ? "(" : "") + n.open;
                    increment("parens");
                    push({
                        type: t,
                        value: e,
                        output: m.output ? "" : C
                    });
                    push({
                        type: "paren",
                        extglob: true,
                        value: M(),
                        output: o
                    });
                    w.push(n);
                };
                const extglobClose = (t)=>{
                    let n = t.close + (u.capture ? ")" : "");
                    let o;
                    if (t.type === "negate") {
                        let s = k;
                        if (t.inner && t.inner.length > 1 && t.inner.includes("/")) {
                            s = globstar(u);
                        }
                        if (s !== k || eos() || /^\)+$/.test(remaining())) {
                            n = t.close = `)$))${s}`;
                        }
                        if (t.inner.includes("*") && (o = remaining()) && /^\.[^\\/.]+$/.test(o)) {
                            const u = parse(o, {
                                ...e,
                                fastpaths: false
                            }).output;
                            n = t.close = `)${u})${s})`;
                        }
                        if (t.prev.type === "bos") {
                            m.negatedExtglob = true;
                        }
                    }
                    push({
                        type: "paren",
                        extglob: true,
                        value: G,
                        output: n
                    });
                    decrement("parens");
                };
                if (u.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(t)) {
                    let n = false;
                    let s = t.replace(i, (t, e, u, o, s, r)=>{
                        if (o === "\\") {
                            n = true;
                            return t;
                        }
                        if (o === "?") {
                            if (e) {
                                return e + o + (s ? H.repeat(s.length) : "");
                            }
                            if (r === 0) {
                                return O + (s ? H.repeat(s.length) : "");
                            }
                            return H.repeat(u.length);
                        }
                        if (o === ".") {
                            return h.repeat(u.length);
                        }
                        if (o === "*") {
                            if (e) {
                                return e + o + (s ? k : "");
                            }
                            return k;
                        }
                        return e ? t : `\\${t}`;
                    });
                    if (n === true) {
                        if (u.unescape === true) {
                            s = s.replace(/\\/g, "");
                        } else {
                            s = s.replace(/\\+/g, (t)=>t.length % 2 === 0 ? "\\\\" : t ? "\\" : "");
                        }
                    }
                    if (s === t && u.contains === true) {
                        m.output = t;
                        return m;
                    }
                    m.output = o.wrapOutput(s, m, e);
                    return m;
                }
                while(!eos()){
                    G = M();
                    if (G === "\0") {
                        continue;
                    }
                    if (G === "\\") {
                        const t = D();
                        if (t === "/" && u.bash !== true) {
                            continue;
                        }
                        if (t === "." || t === ";") {
                            continue;
                        }
                        if (!t) {
                            G += "\\";
                            push({
                                type: "text",
                                value: G
                            });
                            continue;
                        }
                        const e = /^\\+/.exec(remaining());
                        let n = 0;
                        if (e && e[0].length > 2) {
                            n = e[0].length;
                            m.index += n;
                            if (n % 2 !== 0) {
                                G += "\\";
                            }
                        }
                        if (u.unescape === true) {
                            G = M();
                        } else {
                            G += M();
                        }
                        if (m.brackets === 0) {
                            push({
                                type: "text",
                                value: G
                            });
                            continue;
                        }
                    }
                    if (m.brackets > 0 && (G !== "]" || B.value === "[" || B.value === "[^")) {
                        if (u.posix !== false && G === ":") {
                            const t = B.value.slice(1);
                            if (t.includes("[")) {
                                B.posix = true;
                                if (t.includes(":")) {
                                    const t = B.value.lastIndexOf("[");
                                    const e = B.value.slice(0, t);
                                    const u = B.value.slice(t + 2);
                                    const n = r[u];
                                    if (n) {
                                        B.value = e + n;
                                        m.backtrack = true;
                                        M();
                                        if (!f.output && A.indexOf(B) === 1) {
                                            f.output = C;
                                        }
                                        continue;
                                    }
                                }
                            }
                        }
                        if (G === "[" && D() !== ":" || G === "-" && D() === "]") {
                            G = `\\${G}`;
                        }
                        if (G === "]" && (B.value === "[" || B.value === "[^")) {
                            G = `\\${G}`;
                        }
                        if (u.posix === true && G === "!" && B.value === "[") {
                            G = "^";
                        }
                        B.value += G;
                        append({
                            value: G
                        });
                        continue;
                    }
                    if (m.quotes === 1 && G !== '"') {
                        G = o.escapeRegex(G);
                        B.value += G;
                        append({
                            value: G
                        });
                        continue;
                    }
                    if (G === '"') {
                        m.quotes = m.quotes === 1 ? 0 : 1;
                        if (u.keepQuotes === true) {
                            push({
                                type: "text",
                                value: G
                            });
                        }
                        continue;
                    }
                    if (G === "(") {
                        increment("parens");
                        push({
                            type: "paren",
                            value: G
                        });
                        continue;
                    }
                    if (G === ")") {
                        if (m.parens === 0 && u.strictBrackets === true) {
                            throw new SyntaxError(syntaxError("opening", "("));
                        }
                        const t = w[w.length - 1];
                        if (t && m.parens === t.parens + 1) {
                            extglobClose(w.pop());
                            continue;
                        }
                        push({
                            type: "paren",
                            value: G,
                            output: m.parens ? ")" : "\\)"
                        });
                        decrement("parens");
                        continue;
                    }
                    if (G === "[") {
                        if (u.nobracket === true || !remaining().includes("]")) {
                            if (u.nobracket !== true && u.strictBrackets === true) {
                                throw new SyntaxError(syntaxError("closing", "]"));
                            }
                            G = `\\${G}`;
                        } else {
                            increment("brackets");
                        }
                        push({
                            type: "bracket",
                            value: G
                        });
                        continue;
                    }
                    if (G === "]") {
                        if (u.nobracket === true || B && B.type === "bracket" && B.value.length === 1) {
                            push({
                                type: "text",
                                value: G,
                                output: `\\${G}`
                            });
                            continue;
                        }
                        if (m.brackets === 0) {
                            if (u.strictBrackets === true) {
                                throw new SyntaxError(syntaxError("opening", "["));
                            }
                            push({
                                type: "text",
                                value: G,
                                output: `\\${G}`
                            });
                            continue;
                        }
                        decrement("brackets");
                        const t = B.value.slice(1);
                        if (B.posix !== true && t[0] === "^" && !t.includes("/")) {
                            G = `/${G}`;
                        }
                        B.value += G;
                        append({
                            value: G
                        });
                        if (u.literalBrackets === false || o.hasRegexChars(t)) {
                            continue;
                        }
                        const e = o.escapeRegex(B.value);
                        m.output = m.output.slice(0, -B.value.length);
                        if (u.literalBrackets === true) {
                            m.output += e;
                            B.value = e;
                            continue;
                        }
                        B.value = `(${_}${e}|${B.value})`;
                        m.output += B.value;
                        continue;
                    }
                    if (G === "{" && u.nobrace !== true) {
                        increment("braces");
                        const t = {
                            type: "brace",
                            value: G,
                            output: "(",
                            outputIndex: m.output.length,
                            tokensIndex: m.tokens.length
                        };
                        N.push(t);
                        push(t);
                        continue;
                    }
                    if (G === "}") {
                        const t = N[N.length - 1];
                        if (u.nobrace === true || !t) {
                            push({
                                type: "text",
                                value: G,
                                output: G
                            });
                            continue;
                        }
                        let e = ")";
                        if (t.dots === true) {
                            const t = A.slice();
                            const n = [];
                            for(let e = t.length - 1; e >= 0; e--){
                                A.pop();
                                if (t[e].type === "brace") {
                                    break;
                                }
                                if (t[e].type !== "dots") {
                                    n.unshift(t[e].value);
                                }
                            }
                            e = expandRange(n, u);
                            m.backtrack = true;
                        }
                        if (t.comma !== true && t.dots !== true) {
                            const u = m.output.slice(0, t.outputIndex);
                            const n = m.tokens.slice(t.tokensIndex);
                            t.value = t.output = "\\{";
                            G = e = "\\}";
                            m.output = u;
                            for (const t of n){
                                m.output += t.output || t.value;
                            }
                        }
                        push({
                            type: "brace",
                            value: G,
                            output: e
                        });
                        decrement("braces");
                        N.pop();
                        continue;
                    }
                    if (G === "|") {
                        if (w.length > 0) {
                            w[w.length - 1].conditions++;
                        }
                        push({
                            type: "text",
                            value: G
                        });
                        continue;
                    }
                    if (G === ",") {
                        let t = G;
                        const e = N[N.length - 1];
                        if (e && I[I.length - 1] === "braces") {
                            e.comma = true;
                            t = "|";
                        }
                        push({
                            type: "comma",
                            value: G,
                            output: t
                        });
                        continue;
                    }
                    if (G === "/") {
                        if (B.type === "dot" && m.index === m.start + 1) {
                            m.start = m.index + 1;
                            m.consumed = "";
                            m.output = "";
                            A.pop();
                            B = f;
                            continue;
                        }
                        push({
                            type: "slash",
                            value: G,
                            output: b
                        });
                        continue;
                    }
                    if (G === ".") {
                        if (m.braces > 0 && B.type === "dot") {
                            if (B.value === ".") B.output = h;
                            const t = N[N.length - 1];
                            B.type = "dots";
                            B.output += G;
                            B.value += G;
                            t.dots = true;
                            continue;
                        }
                        if (m.braces + m.parens === 0 && B.type !== "bos" && B.type !== "slash") {
                            push({
                                type: "text",
                                value: G,
                                output: h
                            });
                            continue;
                        }
                        push({
                            type: "dot",
                            value: G,
                            output: h
                        });
                        continue;
                    }
                    if (G === "?") {
                        const t = B && B.value === "(";
                        if (!t && u.noextglob !== true && D() === "(" && D(2) !== "?") {
                            extglobOpen("qmark", G);
                            continue;
                        }
                        if (B && B.type === "paren") {
                            const t = D();
                            let e = G;
                            if (B.value === "(" && !/[!=<:]/.test(t) || t === "<" && !/<([!=]|\w+>)/.test(remaining())) {
                                e = `\\${G}`;
                            }
                            push({
                                type: "text",
                                value: G,
                                output: e
                            });
                            continue;
                        }
                        if (u.dot !== true && (B.type === "slash" || B.type === "bos")) {
                            push({
                                type: "qmark",
                                value: G,
                                output: v
                            });
                            continue;
                        }
                        push({
                            type: "qmark",
                            value: G,
                            output: H
                        });
                        continue;
                    }
                    if (G === "!") {
                        if (u.noextglob !== true && D() === "(") {
                            if (D(2) !== "?" || !/[!=<:]/.test(D(3))) {
                                extglobOpen("negate", G);
                                continue;
                            }
                        }
                        if (u.nonegate !== true && m.index === 0) {
                            negate();
                            continue;
                        }
                    }
                    if (G === "+") {
                        if (u.noextglob !== true && D() === "(" && D(2) !== "?") {
                            extglobOpen("plus", G);
                            continue;
                        }
                        if (B && B.value === "(" || u.regex === false) {
                            push({
                                type: "plus",
                                value: G,
                                output: g
                            });
                            continue;
                        }
                        if (B && (B.type === "bracket" || B.type === "paren" || B.type === "brace") || m.parens > 0) {
                            push({
                                type: "plus",
                                value: G
                            });
                            continue;
                        }
                        push({
                            type: "plus",
                            value: g
                        });
                        continue;
                    }
                    if (G === "@") {
                        if (u.noextglob !== true && D() === "(" && D(2) !== "?") {
                            push({
                                type: "at",
                                extglob: true,
                                value: G,
                                output: ""
                            });
                            continue;
                        }
                        push({
                            type: "text",
                            value: G
                        });
                        continue;
                    }
                    if (G !== "*") {
                        if (G === "$" || G === "^") {
                            G = `\\${G}`;
                        }
                        const t = a.exec(remaining());
                        if (t) {
                            G += t[0];
                            m.index += t[0].length;
                        }
                        push({
                            type: "text",
                            value: G
                        });
                        continue;
                    }
                    if (B && (B.type === "globstar" || B.star === true)) {
                        B.type = "star";
                        B.star = true;
                        B.value += G;
                        B.output = k;
                        m.backtrack = true;
                        m.globstar = true;
                        consume(G);
                        continue;
                    }
                    let e = remaining();
                    if (u.noextglob !== true && /^\([^?]/.test(e)) {
                        extglobOpen("star", G);
                        continue;
                    }
                    if (B.type === "star") {
                        if (u.noglobstar === true) {
                            consume(G);
                            continue;
                        }
                        const n = B.prev;
                        const o = n.prev;
                        const s = n.type === "slash" || n.type === "bos";
                        const r = o && (o.type === "star" || o.type === "globstar");
                        if (u.bash === true && (!s || e[0] && e[0] !== "/")) {
                            push({
                                type: "star",
                                value: G,
                                output: ""
                            });
                            continue;
                        }
                        const a = m.braces > 0 && (n.type === "comma" || n.type === "brace");
                        const i = w.length && (n.type === "pipe" || n.type === "paren");
                        if (!s && n.type !== "paren" && !a && !i) {
                            push({
                                type: "star",
                                value: G,
                                output: ""
                            });
                            continue;
                        }
                        while(e.slice(0, 3) === "/**"){
                            const u = t[m.index + 4];
                            if (u && u !== "/") {
                                break;
                            }
                            e = e.slice(3);
                            consume("/**", 3);
                        }
                        if (n.type === "bos" && eos()) {
                            B.type = "globstar";
                            B.value += G;
                            B.output = globstar(u);
                            m.output = B.output;
                            m.globstar = true;
                            consume(G);
                            continue;
                        }
                        if (n.type === "slash" && n.prev.type !== "bos" && !r && eos()) {
                            m.output = m.output.slice(0, -(n.output + B.output).length);
                            n.output = `(?:${n.output}`;
                            B.type = "globstar";
                            B.output = globstar(u) + (u.strictSlashes ? ")" : "|$)");
                            B.value += G;
                            m.globstar = true;
                            m.output += n.output + B.output;
                            consume(G);
                            continue;
                        }
                        if (n.type === "slash" && n.prev.type !== "bos" && e[0] === "/") {
                            const t = e[1] !== void 0 ? "|$" : "";
                            m.output = m.output.slice(0, -(n.output + B.output).length);
                            n.output = `(?:${n.output}`;
                            B.type = "globstar";
                            B.output = `${globstar(u)}${b}|${b}${t})`;
                            B.value += G;
                            m.output += n.output + B.output;
                            m.globstar = true;
                            consume(G + M());
                            push({
                                type: "slash",
                                value: "/",
                                output: ""
                            });
                            continue;
                        }
                        if (n.type === "bos" && e[0] === "/") {
                            B.type = "globstar";
                            B.value += G;
                            B.output = `(?:^|${b}|${globstar(u)}${b})`;
                            m.output = B.output;
                            m.globstar = true;
                            consume(G + M());
                            push({
                                type: "slash",
                                value: "/",
                                output: ""
                            });
                            continue;
                        }
                        m.output = m.output.slice(0, -B.output.length);
                        B.type = "globstar";
                        B.output = globstar(u);
                        B.value += G;
                        m.output += B.output;
                        m.globstar = true;
                        consume(G);
                        continue;
                    }
                    const n = {
                        type: "star",
                        value: G,
                        output: k
                    };
                    if (u.bash === true) {
                        n.output = ".*?";
                        if (B.type === "bos" || B.type === "slash") {
                            n.output = T + n.output;
                        }
                        push(n);
                        continue;
                    }
                    if (B && (B.type === "bracket" || B.type === "paren") && u.regex === true) {
                        n.output = G;
                        push(n);
                        continue;
                    }
                    if (m.index === m.start || B.type === "slash" || B.type === "dot") {
                        if (B.type === "dot") {
                            m.output += x;
                            B.output += x;
                        } else if (u.dot === true) {
                            m.output += S;
                            B.output += S;
                        } else {
                            m.output += T;
                            B.output += T;
                        }
                        if (D() !== "*") {
                            m.output += C;
                            B.output += C;
                        }
                    }
                    push(n);
                }
                while(m.brackets > 0){
                    if (u.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "]"));
                    m.output = o.escapeLast(m.output, "[");
                    decrement("brackets");
                }
                while(m.parens > 0){
                    if (u.strictBrackets === true) throw new SyntaxError(syntaxError("closing", ")"));
                    m.output = o.escapeLast(m.output, "(");
                    decrement("parens");
                }
                while(m.braces > 0){
                    if (u.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "}"));
                    m.output = o.escapeLast(m.output, "{");
                    decrement("braces");
                }
                if (u.strictSlashes !== true && (B.type === "star" || B.type === "bracket")) {
                    push({
                        type: "maybe_slash",
                        value: "",
                        output: `${b}?`
                    });
                }
                if (m.backtrack === true) {
                    m.output = "";
                    for (const t of m.tokens){
                        m.output += t.output != null ? t.output : t.value;
                        if (t.suffix) {
                            m.output += t.suffix;
                        }
                    }
                }
                return m;
            };
            parse.fastpaths = (t, e)=>{
                const u = {
                    ...e
                };
                const r = typeof u.maxLength === "number" ? Math.min(s, u.maxLength) : s;
                const a = t.length;
                if (a > r) {
                    throw new SyntaxError(`Input length: ${a}, exceeds maximum allowed length: ${r}`);
                }
                t = c[t] || t;
                const { DOT_LITERAL: i, SLASH_LITERAL: p, ONE_CHAR: l, DOTS_SLASH: f, NO_DOT: A, NO_DOTS: _, NO_DOTS_SLASH: R, STAR: E, START_ANCHOR: h } = n.globChars(u.windows);
                const g = u.dot ? _ : A;
                const b = u.dot ? R : A;
                const C = u.capture ? "" : "?:";
                const y = {
                    negated: false,
                    prefix: ""
                };
                let $ = u.bash === true ? ".*?" : E;
                if (u.capture) {
                    $ = `(${$})`;
                }
                const globstar = (t)=>{
                    if (t.noglobstar === true) return $;
                    return `(${C}(?:(?!${h}${t.dot ? f : i}).)*?)`;
                };
                const create = (t)=>{
                    switch(t){
                        case "*":
                            return `${g}${l}${$}`;
                        case ".*":
                            return `${i}${l}${$}`;
                        case "*.*":
                            return `${g}${$}${i}${l}${$}`;
                        case "*/
    /*":
                            return `(?:${g}${globstar(u)}${p})?${b}${l}${$}`;
                        case "**/
    // if the user didn't define "localPatterns", we allow all local images
    //n');
    //# sourceMappingURL=match-local-pattern.js.map
    // Should be the same as writeImagesManifest()
    //# sourceMappingURL=match-remote-pattern.js.map
    // these should always be provided but make sure they are
    //')) {
    //) must be changed to an absolute URL (http:// or https://)');
    // We use dynamic require because this should only error in development
    //nextjs.org/docs/messages/next-image-unconfigured-localpatterns");
    // or https://)');
    // We use dynamic require because this should only error in development
    //nextjs.org/docs/messages/next-image-unconfigured-host");
    //nextjs.org/docs/messages/next-image-unconfigured-qualities");
    // We use this to determine if the import is the default loader
    // or a custom loader defined by the user in next.config.js
    //# sourceMappingURL=image-loader.js.map
    //# sourceMappingURL=use-merged-ref.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // This is replaced by webpack define plugin
    // See https://stackoverflow.com/q/39777833/266535 for why we use this ref
    // handler instead of the img's onLoad attribute.
    // Exit early in case of race condition:
    // - onload() is called
    // - decode() is called but incomplete
    // - unmount is called
    // - decode() completes
    // Since we don't have the SyntheticEvent here,
    // we must create one with the same shape.
    // See https://reactjs.org/docs/events.html
    //n').searchParams.get('url') || src;
    //nextjs.org/docs/api-reference/next/image#sizes');
    //nextjs.org/docs/api-reference/next/image#sizes');
    // In React 19.0.0 or newer, we must use camelCase
    // prop to avoid "Warning: Invalid DOM property".
    // See https://github.com/facebook/react/pull/25927
    // In React 18.2.0 or older, we must use lowercase prop
    // to avoid "Warning: Invalid DOM property".
    /*#__PURE__*/
    // If the image has an error before react hydrates, then the error is lost.
    // The workaround is to wait until the image is mounted which is after hydration,
    // then we set the src again to trigger the error handler (if there was an error).
    // eslint-disable-next-line no-self-assign
    /*#__PURE__*/
    // It's intended to keep `loading` before `src` because React updates
    // props in order which causes Safari/Firefox to not lazy load properly.
    // See https://github.com/facebook/react/issues/25883
    // It's intended to keep `src` the last attribute because React updates
    // attributes in order. If we keep `src` the first one, Safari will
    // immediately start to fetch `src`, before `sizes` and `srcSet` are even
    // updated by React. That causes multiple unnecessary requests if `srcSet`
    // and `sizes` are defined.
    // This bug cannot be reproduced in Chrome or Firefox.
    // if the real image fails to load, this will ensure "alt" is visible
    // If the real image fails to load, this will still remove the placeholder.
    // See https://github.com/facebook/react/pull/26940
    /*#__PURE__*/
    /*#__PURE__*/
    // Note how we omit the `href` attribute, as it would only be relevant
    // for browsers that do not support `imagesrcset`, and in those cases
    // it would cause the incorrect image to be preloaded.
    //
    // https://html.spec.whatwg.org/multipage/semantics.html#attr-link-imagesrcset
    /*#__PURE__*/
    // We're in the app directory if there is no pages router.
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=image-component.js.map
    //# sourceMappingURL=%5Broot%20of%20the%20server%5D__65dd84._.js.map

File: ./frontend/.next/server/chunks/ssr/[root of the server]__0702e5._.js

File: ./frontend/.next/server/chunks/ssr/src_app_896cde._.js
  Comments:
    //# sourceMappingURL=src_app_896cde._.js.map

File: ./frontend/.next/server/chunks/ssr/[root of the server]__c41d82._.js
  JavaScript Functions:
    - AllTasks
    - toggleExpand
    - to
    - renderTasks
    - ChevronRightIcon
    - ChevronDownIcon
    - UserCircleIcon
    - ClipboardDocumentCheckIcon
    - BookmarkIcon
  Comments:
    // Task toggle & type icons
    // ✅ Theme toggle
    //127.0.0.1:5000/api/tasks").then((response)=>response.json()).then((data)=>{
    // ✅ Toggle nested subtasks visibility
    // ✅ Recursive function to render nested tasks
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=module.compiled.js.map
    //# sourceMappingURL=react-jsx-dev-runtime.js.map
    //# sourceMappingURL=react.js.map
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=%5Broot%20of%20the%20server%5D__c41d82._.js.map

File: ./frontend/.next/server/chunks/ssr/[root of the server]__592060._.js

File: ./frontend/.next/server/chunks/ssr/node_modules_@hello-pangea_dnd_dist_dnd_esm_4b13ee.js
  JavaScript Functions:
    - 2
    - getDevMessage
    - getFormattedMessage
    - log
    - noop
    - getOptions
    - bindEvents
    - unbind
    - unbindAll
    - toString
    - invariant
    - onWindowError
    - getCallbacks
    - setCallbacks
    - position
    - onDragStart
    - withLocation
    - withCombine
    - onDragUpdate
    - returnedToStart
    - onDragEnd
    - isEqual
    - areInputsEqual
    - useMemo
    - initial
    - useCallback
    - add
    - subtract
    - 1
    - negate
    - patch
    - distance
    - 1
    - apply
    - executeClip
    - offsetByPosition
    - getCorners
    - 1
    - increase
    - clip
    - getSubject
    - scrollDroppable
    - memoizeOne
    - memoized
    - clear
    - tryGetDestination
    - tryGetCombine
    - moveToNextCombine
    - getImpact
    - isHomeOf
    - isWithin
    - isPartiallyVisibleThroughFrame
    - isTotallyVisibleThroughFrame
    - isTotallyVisibleThroughFrameOnAxis
    - getDroppableDisplaced
    - isVisibleInDroppable
    - isVisibleInViewport
    - 1
    - isPartiallyVisible
    - isTotallyVisible
    - isTotallyVisibleOnAxis
    - getShouldAnimate
    - getTarget
    - getDisplacementGroups
    - process
    - getIndexOfLastItem
    - goAtEnd
    - calculateReorderImpact
    - didStartAfterCritical
    - fromCombine
    - fromReorder
    - moveToNextIndex
    - getCombinedItemDisplacement
    - whenCombining
    - distanceFromStartToBorderBoxCenter
    - distanceFromEndToBorderBoxCenter
    - getCrossAxisBorderBoxCenter
    - goAfter
    - goBefore
    - goIntoStart
    - whenReordering
    - withDroppableDisplacement
    - getResultWithoutDroppableDisplacement
    - getPageBorderBoxCenterFromImpact
    - scrollViewport
    - getDraggables
    - tryGetVisible
    - speculativelyIncrease
    - withViewportDisplacement
    - getClientFromPageBorderBoxCenter
    - isTotallyVisibleInNewLocation
    - moveToNextPlace
    - getKnownActive
    - getBestCrossAxisDroppable
    - getCurrentPageBorderBoxCenter
    - getCurrentPageBorderBox
    - getClosestDraggable
    - getDisplacedBy
    - getRequiredGrowthForPlaceholder
    - withMaxScroll
    - addPlaceholder
    - removePlaceholder
    - moveToNewDroppable
    - proposedIndex
    - moveCrossAxis
    - whatIsDraggedOver
    - 1
    - moveInDirection
    - isMovementAllowed
    - isPositionInFrame
    - run
    - getHasOverlap
    - getFurthestAway
    - getDroppableOver
    - offsetRectByPosition
    - withDroppableScroll
    - getIsDisplaced
    - atIndex
    - getReorderImpact
    - getCombineImpact
    - getDragImpact
    - patchDroppableMap
    - clearUnusedPlaceholder
    - recomputePlaceholders
    - update
    - getDraggables
    - recompute
    - getClientBorderBoxCenter
    - refreshSnap
    - getHomeLocation
    - getLiftEffect
    - patchDimensionMap
    - start
    - finish
    - offsetDraggable
    - getFrame
    - adjustAdditionsForScrollChanges
    - publishWhileDraggingInVirtual
    - isSnapping
    - postDroppableChange
    - removeScrollJumpRequest
    - reducer
    - guard
    - beforeInitialCapture
    - 1
    - initialPublish
    - publishWhileDragging
    - collectionStarting
    - updateDroppableScroll
    - updateDroppableIsEnabled
    - updateDroppableIsCombineEnabled
    - move
    - moveByWindowScroll
    - updateViewportMaxScroll
    - moveUp
    - moveDown
    - moveRight
    - moveLeft
    - flush
    - animateDrop
    - completeDrop
    - drop
    - dropPending
    - dropAnimationFinished
    - checkIndexes
    - validateDimensions
    - lift
    - style
    - moveTo
    - getDropDuration
    - getNewHomeClientOffset
    - getDropImpact
    - dropMiddleware
    - getWindowScroll
    - getWindowScrollBinding
    - getScrollListener
    - updateScroll
    - isActive
    - start
    - stop
    - 1
    - scrollListener
    - getExpiringAnnounce
    - result
    - wasCalled
    - getAsyncMarshal
    - execute
    - add
    - flush
    - areLocationsEqual
    - isCombineEqual
    - isCriticalEqual
    - withTimings
    - getDragStart
    - execute
    - getPublisher
    - beforeCapture
    - beforeStart
    - start
    - update
    - flush
    - drop
    - abort
    - responders
    - dropAnimationFinishMiddleware
    - dropAnimationFlushOnScrollMiddleware
    - clear
    - flushDropAnimation
    - dimensionMarshalStopper
    - focus
    - shouldStop
    - autoScroll
    - pendingDrop
    - createStore
    - 1
    - createPublisher
    - collect
    - add
    - remove
    - stop
    - getMaxScroll
    - getDocumentElement
    - getMaxWindowScroll
    - getViewport
    - getInitialPublish
    - shouldPublishUpdate
    - createDimensionMarshal
    - updateDroppableIsEnabled
    - updateDroppableIsCombineEnabled
    - updateDroppableScroll
    - scrollDroppable
    - stopPublishing
    - subscriber
    - startPublishing
    - canStartDrag
    - scrollWindow
    - getScrollableDroppableOver
    - getBestScrollableDroppable
    - getDistanceThresholds
    - getPercentage
    - getValueFromDistance
    - dampenValueByTime
    - getValue
    - getScrollOnAxis
    - adjustForSizeLimits
    - 1
    - getOverlap
    - getRemainder
    - canPartiallyScroll
    - canScrollWindow
    - getWindowOverlap
    - canScrollDroppable
    - getDroppableOverlap
    - getWindowScrollChange
    - getDroppableScrollChange
    - scroll
    - createFluidScroller
    - tryScroll
    - 1
    - fakeScrollCallback
    - stop
    - createJumpScroller
    - moveByOffset
    - scrollDroppableAsMuchAsItCan
    - scrollWindowAsMuchAsItCan
    - jumpScroller
    - createAutoScroller
    - scroll
    - dragHandle
    - draggable
    - droppable
    - makeGetSelector
    - getStyles
    - 1
    - 1
    - 1
    - getHead
    - createStyleEl
    - useStyleMarshal
    - remove
    - querySelectorAll
    - getWindowFromEl
    - isHtmlElement
    - findDragHandle
    - useFocusMarshal
    - register
    - unregister
    - tryGiveFocus
    - tryShiftRecord
    - tryRestoreFocusRecorded
    - tryRecordFocus
    - clearFrameOnUnmount
    - createRegistry
    - subscribe
    - unsubscribe
    - notify
    - findDraggableById
    - getDraggableById
    - findDroppableById
    - getDroppableById
    - clean
    - useRegistry
    - unmount
    - getBodyElement
    - getId
    - useAnnouncer
    - setup
    - cleanup
    - remove
    - useUniqueId
    - getElementId
    - useHiddenTextElement
    - mount
    - unmount
    - getVersion
    - isSatisfied
    - checkReactVersion
    - checkDoctype
    - useDev
    - useDevSetupWarning
    - useStartupValidation
    - usePrevious
    - create
    - isClaimed
    - isActive
    - claim
    - release
    - tryAbandon
    - isDragging
    - preventStandardKeyEvents
    - supportedEventName
    - isSloppyClickThresholdExceeded
    - getCaptureBindings
    - useMouseSensor
    - onMouseDown
    - listenForCapture
    - bindCapturingEvents
    - startPendingDrag
    - mount
    - unmount
    - noop
    - getDraggingBindings
    - cancel
    - drop
    - useKeyboardSensor
    - onKeyDown
    - stop
    - tryStartCapture
    - mount
    - unmount
    - getWindowBindings
    - getHandleBindings
    - useTouchSensor
    - getPhase
    - setPhase
    - onTouchStart
    - listenForCapture
    - bindCapturingEvents
    - unbindAll
    - startDragging
    - startPendingDrag
    - mount
    - unmount
    - webkitHack
    - useValidateSensorHooks
    - isAnInteractiveElement
    - isEventInInteractiveElement
    - getBorderBoxCenterPosition
    - isElement
    - supportedMatchesName
    - closestPonyfill
    - closest
    - getSelector
    - findClosestDragHandleFromEvent
    - tryGetClosestDraggableIdFromEvent
    - findDraggable
    - preventDefault
    - isActive
    - canStart
    - tryStart
    - getShouldRespectForcePress
    - isLockActive
    - tryDispatch
    - lift
    - completed
    - finish
    - fluidLift
    - 1
    - snapLift
    - abortPreDrag
    - useSensorMarshal
    - lockAPI
    - tryAbandonLock
    - listenToStore
    - tryReleaseLock
    - createResponders
    - onBeforeCapureCallback
    - createAutoScrollerOptions
    - getStore
    - App
    - useUniqueContextId
    - DragDropContext
    - getDraggingTransition
    - getDraggingOpacity
    - getShouldDraggingAnimate
    - getDraggingStyle
    - getSecondaryStyle
    - getStyle
    - getDimension
    - useDraggablePublisher
    - checkIsValidInnerRef
    - useValidation
    - prefix
    - useClonePropValidation
    - useRequiredContext
    - preventHtml5Dnd
    - Draggable
    - isStrictEqual
    - whatIsDraggedOverFromResult
    - getCombineWithFromResult
    - getCombineWithFromImpact
    - getDraggableSelector
    - selector
    - getSecondarySnapshot
    - getSecondarySelector
    - getFallback
    - getProps
    - selector
    - 1
    - selector
    - PrivateDraggable
    - PublicDraggable
    - isEqual
    - isEither
    - isBoth
    - isElementScrollable
    - isBodyScrollable
    - getClosestScrollable
    - checkForNestedScrollContainers
    - getScroll
    - getIsFixed
    - getEnv
    - getDroppableDimension
    - frame
    - getClient
    - getDimension
    - closest
    - getListenerOptions
    - getClosestScrollableFromDrag
    - useDroppablePublisher
    - noop
    - getSize
    - getStyle
    - Placeholder
    - isBoolean
    - runChecks
    - required
    - boolean
    - ref
    - placeholder
    - hasClone
    - hasNoPlaceholder
    - useValidation
    - onClose
    - Droppable
    - getClone
    - getBody
    - attachDefaultPropsToOwnProps
    - isMatchingType
    - getDraggable
    - makeMapStateToProps
    - selector
    - ConnectedDroppable
  Comments:
    //github.com/hello-pangea/dnd/blob/main/docs/patterns/virtual-lists.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/doctype.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/using-inner-ref.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/how-we-detect-scroll-containers.md
    //github.com/atlassian/react-beautiful-dnd/issues/131
    //github.com/hello-pangea/dnd/blob/main/docs/api/droppable.md
    //# sourceMappingURL=node_modules_%40hello-pangea_dnd_dist_dnd_esm_4b13ee.js.map

File: ./frontend/.next/server/chunks/ssr/[turbopack]_runtime.js
  JavaScript Functions:
    - defineProp
    - esm
    - esmExport
    - ensureDynamicExports
    - dynamicExport
    - exportValue
    - exportNamespace
    - createGetter
    - interopEsm
    - createNS
    - esmImport
    - require1
    - commonJsRequire
    - moduleContext
    - moduleContext
    - keys
    - resolve
    - getChunkPath
    - isPromise
    - isAsyncModuleExt
    - createPromise
    - resolveQueue
    - wrapDeps
    - asyncModule
    - handleAsyncDependencies
    - getResult
    - fnQueue
    - asyncResult
    - to
    - relativeURL
    - toJSON
    - to
    - invariant
    - to
    - requireStub
    - externalImport
    - externalRequire
    - resolve
    - resolveAbsolutePath
    - readWebAssemblyAsResponse
    - compileWebAssemblyFromPath
    - instantiateWebAssemblyFromPath
    - stringifySourceInfo
    - createResolvePathFromModule
    - resolvePathFromModule
    - loadChunk
    - loadChunkPath
    - loadChunkAsync
    - localRequire
    - loadWebAssembly
    - loadWebAssemblyModule
    - getWorkerBlobURL
    - instantiateModule
    - getOrInstantiateModuleFromParent
    - instantiateRuntimeModule
    - getOrInstantiateRuntimeModule
  Comments:
    /**
 * This file contains runtime types and functions that are shared between all
 * TurboPack ECMAScript runtimes.
 *
 * It will be prepended to the runtime code of each runtime.
 */
    /* eslint-disable @typescript-eslint/no-unused-vars */
    /// <reference path="./runtime-types.d.ts" />
    /**
 * Adds the getters to the exports object.
 */
    /**
 * Makes the module an ESM with exports
 */
    /**
 * Dynamically exports properties from an object
 */
    /**
 * @returns prototype of the object
 */
    /** Prototypes that are not expanded for exports */
    /**
 * @param raw
 * @param ns
 * @param allowExportDefault
 *   * `false`: will have the raw module as default export
 *   * `true`: will have the default property as default export
 */
    // this is not really correct
    // we should set the `default` getter if the imported module is a `.cjs file`
    // any ES module has to have `module.namespaceObject` defined.
    // only ESM can be an async module, so we don't need to worry about exports being a promise here.
    // Add a simple runtime require so that environments without one can still pass
    // `typeof require` CommonJS checks so that exports are correctly registered.
    // @ts-ignore
    /**
 * `require.context` and require/import expression runtime.
 */
    /**
 * Returns the path of a chunk defined by its data.
 */
    // everything below is adapted from webpack
    // https://github.com/webpack/webpack/blob/6be4065ade1e252c1d8dcba4af0f43e32af1bdc1/lib/runtime/AsyncModuleRuntimeModule.js#L13
    // Calling `esmExport` leads to this.
    /**
 * A pseudo "fake" URL object to resolve to its relative path.
 *
 * When UrlRewriteBehavior is set to relative, calls to the `new URL()` will construct url without base using this
 * runtime function to generate context-agnostic urls between different rendering context, i.e ssr / client to avoid
 * hydration mismatch.
 *
 * This is based on webpack's existing implementation:
 * https://github.com/webpack/webpack/blob/87660921808566ef3b8796f8df61bd79fc026108/lib/runtime/RelativeUrlRuntimeModule.js
 */
    /**
 * Utility function to ensure all variants of an enum are handled.
 */
    /**
 * A stub function to make `require` available but non-functional in ESM.
 */
    /* eslint-disable @typescript-eslint/no-unused-vars */
    /// <reference path="../shared/runtime-utils.ts" />
    /// A 'base' utilities to support runtime can have externals.
    /// Currently this is for node.js / edge runtime both.
    /// If a fn requires node.js specific behavior, it should be placed in `node-external-utils` instead.
    // TODO(alexkirsz) This can happen when a client-side module tries to load
    // an external module we don't provide a shim for (e.g. querystring, url).
    // For now, we fail semi-silently, but in the future this should be a
    // compilation error.
    // TODO(alexkirsz) This can happen when a client-side module tries to load
    // an external module we don't provide a shim for (e.g. querystring, url).
    // For now, we fail semi-silently, but in the future this should be a
    // compilation error.
    /* eslint-disable @typescript-eslint/no-unused-vars */
    // Compute the relative path to the `distDir`.
    // Compute the absolute path to the root, by stripping distDir from the absolute path to this file.
    /**
 * Returns an absolute path to the given module path.
 * Module path should be relative, either path to a file or a directory.
 *
 * This fn allows to calculate an absolute path for some global static values, such as
 * `__dirname` or `import.meta.url` that Turbopack will not embeds in compile time.
 * See ImportMetaBinding::code_generation for the usage.
 */
    /* eslint-disable @typescript-eslint/no-unused-vars */
    /// <reference path="../shared/runtime-utils.ts" />
    // @ts-ignore unfortunately there's a slight type mismatch with the stream.
    /* eslint-disable @typescript-eslint/no-unused-vars */
    /// <reference path="../shared/runtime-utils.ts" />
    /// <reference path="../shared-node/base-externals-utils.ts" />
    /// <reference path="../shared-node/node-externals-utils.ts" />
    /// <reference path="../shared-node/node-wasm-utils.ts" />
    /*#__PURE__*/
    /**
   * The module was instantiated because it was included in an evaluated chunk's
   * runtime.
   */
    /**
   * The module was instantiated because a parent module imported it.
   */
    /**
 * Returns an absolute path to the given module's id.
 */
    // We only support loading JS chunks in Node.js.
    // This branch can be hit when trying to load a CSS chunk.
    // We only support loading JS chunks in Node.js.
    // This branch can be hit when trying to load a CSS chunk.
    // TODO: Use vm.runInThisContext once our minimal supported Node.js version includes https://github.com/nodejs/node/pull/52153
    // eslint-disable-next-line no-eval -- Can't use vm.runInThisContext due to https://github.com/nodejs/node/issues/52102
    //# sourceURL=" + url.pathToFileURL(resolved))(module1, module1.exports, localRequire, path.dirname(resolved), resolved);
    // This can happen if modules incorrectly handle HMR disposes/updates,
    // e.g. when they keep a `setTimeout` around which still executes old code
    // and contains e.g. a `require("something")` call.
    // No need to add this module as a child of the parent module here, this
    // has already been taken care of in `getOrInstantiateModuleFromParent`.
    // NOTE(alexkirsz) This can fail when the module encounters a runtime error.
    // in case of a circular dependency: cjs1 -> esm2 -> cjs1
    /**
 * Retrieves a module from the cache, or instantiate it if it is not cached.
 */
    // @ts-ignore
    /**
 * Instantiates a runtime module.
 */
    /**
 * Retrieves a module from the cache, or instantiate it as a runtime module if it is not cached.
 */
    // @ts-ignore TypeScript doesn't separate this module space from the browser runtime

File: ./frontend/.next/server/pages/_error.js

File: ./frontend/.next/server/pages/_app.js

File: ./frontend/.next/server/pages/_document.js

File: ./frontend/.next/static/development/_ssgManifest.js

File: ./frontend/.next/static/development/_buildManifest.js

File: ./frontend/.next/static/chunks/[turbopack]_browser_dev_hmr-client_hmr-client_ts_d0a96d._.js

File: ./frontend/.next/static/chunks/node_modules_@heroicons_react_24_solid_esm_81fbff._.js
  JavaScript Functions:
    - ChevronRightIcon
    - ChevronDownIcon
    - UserCircleIcon
    - ClipboardDocumentCheckIcon
    - BookmarkIcon
    - AcademicCapIcon
    - AdjustmentsHorizontalIcon
    - AdjustmentsVerticalIcon
    - ArchiveBoxArrowDownIcon
    - ArchiveBoxIcon
    - ArchiveBoxXMarkIcon
    - ArrowDownCircleIcon
    - ArrowDownIcon
    - ArrowDownLeftIcon
    - ArrowDownOnSquareIcon
    - ArrowDownOnSquareStackIcon
    - ArrowDownRightIcon
    - ArrowDownTrayIcon
    - ArrowLeftCircleIcon
    - ArrowLeftEndOnRectangleIcon
    - ArrowLeftIcon
    - ArrowLeftOnRectangleIcon
    - ArrowLeftStartOnRectangleIcon
    - ArrowLongDownIcon
    - ArrowLongLeftIcon
    - ArrowLongRightIcon
    - ArrowLongUpIcon
    - ArrowPathIcon
    - ArrowPathRoundedSquareIcon
    - ArrowRightCircleIcon
    - ArrowRightEndOnRectangleIcon
    - ArrowRightIcon
    - ArrowRightOnRectangleIcon
    - ArrowRightStartOnRectangleIcon
    - ArrowSmallDownIcon
    - ArrowSmallLeftIcon
    - ArrowSmallRightIcon
    - ArrowSmallUpIcon
    - ArrowTopRightOnSquareIcon
    - ArrowTrendingDownIcon
    - ArrowTrendingUpIcon
    - ArrowTurnDownLeftIcon
    - ArrowTurnDownRightIcon
    - ArrowTurnLeftDownIcon
    - ArrowTurnLeftUpIcon
    - ArrowTurnRightDownIcon
    - ArrowTurnRightUpIcon
    - ArrowTurnUpLeftIcon
    - ArrowTurnUpRightIcon
    - ArrowUpCircleIcon
    - ArrowUpIcon
    - ArrowUpLeftIcon
    - ArrowUpOnSquareIcon
    - ArrowUpOnSquareStackIcon
    - ArrowUpRightIcon
    - ArrowUpTrayIcon
    - ArrowUturnDownIcon
    - ArrowUturnLeftIcon
    - ArrowUturnRightIcon
    - ArrowUturnUpIcon
    - ArrowsPointingInIcon
    - ArrowsPointingOutIcon
    - ArrowsRightLeftIcon
    - ArrowsUpDownIcon
    - AtSymbolIcon
    - BackspaceIcon
    - BackwardIcon
    - BanknotesIcon
    - Bars2Icon
    - Bars3BottomLeftIcon
    - Bars3BottomRightIcon
    - Bars3CenterLeftIcon
    - Bars3Icon
    - Bars4Icon
    - BarsArrowDownIcon
    - BarsArrowUpIcon
    - Battery0Icon
    - Battery100Icon
    - Battery50Icon
    - BeakerIcon
    - BellAlertIcon
    - BellIcon
    - BellSlashIcon
    - BellSnoozeIcon
    - BoldIcon
    - BoltIcon
    - BoltSlashIcon
    - BookOpenIcon
    - BookmarkSlashIcon
    - BookmarkSquareIcon
    - BriefcaseIcon
    - BugAntIcon
    - BuildingLibraryIcon
    - BuildingOffice2Icon
    - BuildingOfficeIcon
    - BuildingStorefrontIcon
    - CakeIcon
    - CalculatorIcon
    - CalendarDateRangeIcon
    - CalendarDaysIcon
    - CalendarIcon
    - CameraIcon
    - ChartBarIcon
    - ChartBarSquareIcon
    - ChartPieIcon
    - ChatBubbleBottomCenterIcon
    - ChatBubbleBottomCenterTextIcon
    - ChatBubbleLeftEllipsisIcon
    - ChatBubbleLeftIcon
    - ChatBubbleLeftRightIcon
    - ChatBubbleOvalLeftEllipsisIcon
    - ChatBubbleOvalLeftIcon
    - CheckBadgeIcon
    - CheckCircleIcon
    - CheckIcon
    - ChevronDoubleDownIcon
    - ChevronDoubleLeftIcon
    - ChevronDoubleRightIcon
    - ChevronDoubleUpIcon
    - ChevronLeftIcon
    - ChevronUpDownIcon
    - ChevronUpIcon
    - CircleStackIcon
    - ClipboardDocumentIcon
    - ClipboardDocumentListIcon
    - ClipboardIcon
    - ClockIcon
    - CloudArrowDownIcon
    - CloudArrowUpIcon
    - CloudIcon
    - CodeBracketIcon
    - CodeBracketSquareIcon
    - Cog6ToothIcon
    - Cog8ToothIcon
    - CogIcon
    - CommandLineIcon
    - ComputerDesktopIcon
    - CpuChipIcon
    - CreditCardIcon
    - CubeIcon
    - CubeTransparentIcon
    - CurrencyBangladeshiIcon
    - CurrencyDollarIcon
    - CurrencyEuroIcon
    - CurrencyPoundIcon
    - CurrencyRupeeIcon
    - CurrencyYenIcon
    - CursorArrowRaysIcon
    - CursorArrowRippleIcon
    - DevicePhoneMobileIcon
    - DeviceTabletIcon
    - DivideIcon
    - DocumentArrowDownIcon
    - DocumentArrowUpIcon
    - DocumentChartBarIcon
    - DocumentCheckIcon
    - DocumentCurrencyBangladeshiIcon
    - DocumentCurrencyDollarIcon
    - DocumentCurrencyEuroIcon
    - DocumentCurrencyPoundIcon
    - DocumentCurrencyRupeeIcon
    - DocumentCurrencyYenIcon
    - DocumentDuplicateIcon
    - DocumentIcon
    - DocumentMagnifyingGlassIcon
    - DocumentMinusIcon
    - DocumentPlusIcon
    - DocumentTextIcon
    - EllipsisHorizontalCircleIcon
    - EllipsisHorizontalIcon
    - EllipsisVerticalIcon
    - EnvelopeIcon
    - EnvelopeOpenIcon
    - EqualsIcon
    - ExclamationCircleIcon
    - ExclamationTriangleIcon
    - EyeDropperIcon
    - EyeIcon
    - EyeSlashIcon
    - FaceFrownIcon
    - FaceSmileIcon
    - FilmIcon
    - FingerPrintIcon
    - FireIcon
    - FlagIcon
    - FolderArrowDownIcon
    - FolderIcon
    - FolderMinusIcon
    - FolderOpenIcon
    - FolderPlusIcon
    - ForwardIcon
    - FunnelIcon
    - GifIcon
    - GiftIcon
    - GiftTopIcon
    - GlobeAltIcon
    - GlobeAmericasIcon
    - GlobeAsiaAustraliaIcon
    - GlobeEuropeAfricaIcon
    - H1Icon
    - H2Icon
    - H3Icon
    - HandRaisedIcon
    - HandThumbDownIcon
    - HandThumbUpIcon
    - HashtagIcon
    - HeartIcon
    - HomeIcon
    - HomeModernIcon
    - IdentificationIcon
    - InboxArrowDownIcon
    - InboxIcon
    - InboxStackIcon
    - InformationCircleIcon
    - ItalicIcon
    - KeyIcon
    - LanguageIcon
    - LifebuoyIcon
    - LightBulbIcon
    - LinkIcon
    - LinkSlashIcon
    - ListBulletIcon
    - LockClosedIcon
    - LockOpenIcon
    - MagnifyingGlassCircleIcon
    - MagnifyingGlassIcon
    - MagnifyingGlassMinusIcon
    - MagnifyingGlassPlusIcon
    - MapIcon
    - MapPinIcon
    - MegaphoneIcon
    - MicrophoneIcon
    - MinusCircleIcon
    - MinusIcon
    - MinusSmallIcon
    - MoonIcon
    - MusicalNoteIcon
    - NewspaperIcon
    - NoSymbolIcon
    - NumberedListIcon
    - PaintBrushIcon
    - PaperAirplaneIcon
    - PaperClipIcon
    - PauseCircleIcon
    - PauseIcon
    - PencilIcon
    - PencilSquareIcon
    - PercentBadgeIcon
    - PhoneArrowDownLeftIcon
    - PhoneArrowUpRightIcon
    - PhoneIcon
    - PhoneXMarkIcon
    - PhotoIcon
    - PlayCircleIcon
    - PlayIcon
    - PlayPauseIcon
    - PlusCircleIcon
    - PlusIcon
    - PlusSmallIcon
    - PowerIcon
    - PresentationChartBarIcon
    - PresentationChartLineIcon
    - PrinterIcon
    - PuzzlePieceIcon
    - QrCodeIcon
    - QuestionMarkCircleIcon
    - QueueListIcon
    - RadioIcon
    - ReceiptPercentIcon
    - ReceiptRefundIcon
    - RectangleGroupIcon
    - RectangleStackIcon
    - RocketLaunchIcon
    - RssIcon
    - ScaleIcon
    - ScissorsIcon
    - ServerIcon
    - ServerStackIcon
    - ShareIcon
    - ShieldCheckIcon
    - ShieldExclamationIcon
    - ShoppingBagIcon
    - ShoppingCartIcon
    - SignalIcon
    - SignalSlashIcon
    - SlashIcon
    - SparklesIcon
    - SpeakerWaveIcon
    - SpeakerXMarkIcon
    - Square2StackIcon
    - Square3Stack3DIcon
    - Squares2X2Icon
    - SquaresPlusIcon
    - StarIcon
    - StopCircleIcon
    - StopIcon
    - StrikethroughIcon
    - SunIcon
    - SwatchIcon
    - TableCellsIcon
    - TagIcon
    - TicketIcon
    - TrashIcon
    - TrophyIcon
    - TruckIcon
    - TvIcon
    - UnderlineIcon
    - UserGroupIcon
    - UserIcon
    - UserMinusIcon
    - UserPlusIcon
    - UsersIcon
    - VariableIcon
    - VideoCameraIcon
    - VideoCameraSlashIcon
    - ViewColumnsIcon
    - ViewfinderCircleIcon
    - WalletIcon
    - WifiIcon
    - WindowIcon
    - WrenchIcon
    - WrenchScrewdriverIcon
    - XCircleIcon
    - XMarkIcon
  Comments:
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /** @deprecated */
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /** @deprecated */
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /** @deprecated */
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /** @deprecated */
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /** @deprecated */
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /** @deprecated */
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /** @deprecated */
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /** @deprecated */
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=node_modules_%40heroicons_react_24_solid_esm_81fbff._.js.map

File: ./frontend/.next/static/chunks/node_modules_1ed65f._.js
  JavaScript Functions:
    - getComponentNameFromType
    - testStringCoercion
    - checkKeyStringCoercion
    - disabledLog
    - disableLogs
    - reenableLogs
    - describeBuiltInComponentFrame
    - describeNativeComponentFrame
    - describeUnknownElementTypeFrameInDEV
    - getOwner
    - hasValidKey
    - defineKeyPropWarningGetter
    - warnAboutAccessingKey
    - elementRefGetterWithDeprecationWarning
    - ReactElement
    - jsxDEVImpl
    - validateChildKeys
    - isValidElement
    - validateExplicitKey
    - getCurrentComponentErrorInfo
    - _extends
    - is
    - memoizedSelector
    - isValidElementType
    - typeOf
    - isContextConsumer
    - isMemo
    - warning
    - verify
    - verifySubselectors
    - pureFinalPropsSelectorFactory
    - handleFirstCall
    - handleNewPropsAndNewState
    - handleNewProps
    - handleNewState
    - handleSubsequentCalls
    - pureFinalPropsSelector
    - finalPropsSelectorFactory
    - bindActionCreators
    - isPlainObject
    - verifyPlainObject
    - wrapMapToPropsConstant
    - initConstantSelector
    - constantSelector
    - getDependsOnOwnProps
    - wrapMapToPropsFunc
    - initProxySelector
    - mapToPropsProxy
    - detectFactoryAndVerify
    - createInvalidArgFactory
    - mapDispatchToPropsFactory
    - mapStateToPropsFactory
    - defaultMergeProps
    - wrapMergePropsFunc
    - initMergePropsProxy
    - mergePropsProxy
    - mergePropsFactory
    - defaultNoopBatch
    - createListenerCollection
    - unsubscribe
    - createSubscription
    - addNestedSub
    - notifyNestedSubs
    - handleChangeWrapper
    - isSubscribed
    - trySubscribe
    - tryUnsubscribe
    - trySubscribeSelf
    - tryUnsubscribeSelf
    - canUseDOM
    - isRunningInReactNative
    - getUseIsomorphicLayoutEffect
    - is
    - shallowEqual
    - getStatics
    - hoistNonReactStatics
    - getContext
    - stringifyComponent
    - useIsomorphicLayoutEffectWithArgs
    - captureWrapperProps
    - subscribeUpdates
    - checkForUpdates
    - unsubscribeWrapper
    - strictEqual
    - connect
    - wrapWithConnect
    - returned
    - ConnectFunction
    - forwardConnectRef
    - Provider
    - createReduxContextHook
    - useReduxContext2
    - createStoreHook
    - useStore2
    - createDispatchHook
    - useDispatch2
    - refEquality
    - createSelectorHook
    - useSelector2
    - as
    - as
    - to
    - invariant
    - getRect
    - expand
    - shrink
    - shift
    - createBox
    - parse
    - getWindowScroll
    - offset
    - withScroll
    - calculateBox
    - getBox
    - rafSchd
    - wrapperFn
    - formatProdErrorMessage
    - randomString
    - isPlainObject
    - miniKindOf
    - ctorName
    - isError
    - isDate
    - kindOf
    - createStore
    - ensureCanMutateNextListeners
    - getState
    - subscribe
    - unsubscribe
    - dispatch
    - replaceReducer
    - observable
    - observeState
    - legacy_createStore
    - warning
    - getUnexpectedStateShapeWarningMessage
    - assertReducerShape
    - combineReducers
    - combination
    - bindActionCreator
    - bindActionCreators
    - compose
    - applyMiddleware
    - dispatch
    - isAction
  Comments:
    /**
 * @license React
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    //react.dev/link/special-props)", displayName));
    //react.dev/link/warning-keys for more information.', parentType, childOwner);
    /**
 * @license React
 * use-sync-external-store-with-selector.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    // src/utils/react.ts
    // src/hooks/useSelector.ts
    // src/utils/react-is.ts
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/utils/warning.ts
    // src/connect/verifySubselectors.ts
    // src/connect/selectorFactory.ts
    // src/utils/bindActionCreators.ts
    // src/utils/isPlainObject.ts
    // src/utils/verifyPlainObject.ts
    // src/connect/wrapMapToProps.ts
    // src/connect/invalidArgFactory.ts
    // src/connect/mapDispatchToProps.ts
    // @ts-ignore
    // @ts-ignore
    // src/connect/mapStateToProps.ts
    // @ts-ignore
    // src/connect/mergeProps.ts
    // src/utils/batch.ts
    // src/utils/Subscription.ts
    // src/utils/useIsomorphicLayoutEffect.ts
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/utils/shallowEqual.ts
    // src/utils/hoistStatics.ts
    // src/components/Context.ts
    /* @__PURE__ */
    /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/components/connect.tsx
    // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.
    // @ts-ignore
    // use React's forwardRef to expose a ref of the wrapped component
    // the context consumer to use
    /* @__PURE__ */
    // @ts-ignore
    /* @__PURE__ */
    // @ts-ignore
    /* @__PURE__ */
    // @ts-ignore
    // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing
    // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,
    // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.
    // @ts-ignore
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/components/Provider.tsx
    /* @__PURE__ */
    /* @__PURE__ */
    // src/hooks/useReduxContext.ts
    /* @__PURE__ */
    // src/hooks/useStore.ts
    // @ts-ignore
    /* @__PURE__ */
    // src/hooks/useDispatch.ts
    /* @__PURE__ */
    //redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization", {
    /* @__PURE__ */
    // src/exports.ts
    //# sourceMappingURL=react-redux.mjs.map
    // src/utils/formatProdErrorMessage.ts
    //redux.js.org/Errors?code=${code} for the full message or use the non-minified dev environment for full errors. `;
    // src/utils/symbol-observable.ts
    /* @__PURE__ */
    // src/utils/actionTypes.ts
    // src/utils/isPlainObject.ts
    // src/utils/kindOf.ts
    // src/createStore.ts
    //redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
    /* @__PURE__ */
    /* @__PURE__ */
    //redux.js.org/api/store#subscribelistener for more details.");
    //redux.js.org/api/store#subscribelistener for more details.");
    //redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`);
    /**
       * The minimal observable subscription method.
       * @param observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
    // src/utils/warning.ts
    // src/combineReducers.ts
    // src/bindActionCreators.ts
    // src/compose.ts
    // src/applyMiddleware.ts
    // src/utils/isAction.ts
    //# sourceMappingURL=redux.mjs.map
    //# sourceMappingURL=node_modules_1ed65f._.js.map

File: ./frontend/.next/static/chunks/node_modules_@swc_helpers_cjs_00636a._.js
  JavaScript Functions:
    - _interop_require_default
    - _getRequireWildcardCache
    - _interop_require_wildcard
    - _class_private_field_loose_base
    - _class_private_field_loose_key
    - _tagged_template_literal_loose
  Comments:
    //# sourceMappingURL=node_modules_%40swc_helpers_cjs_00636a._.js.map

File: ./frontend/.next/static/chunks/_e69f0d._.js

File: ./frontend/.next/static/chunks/_d95469._.js
  JavaScript Functions:
    - defineProp
    - esm
    - esmExport
    - ensureDynamicExports
    - dynamicExport
    - exportValue
    - exportNamespace
    - createGetter
    - interopEsm
    - createNS
    - esmImport
    - require1
    - commonJsRequire
    - moduleContext
    - moduleContext
    - keys
    - resolve
    - getChunkPath
    - isPromise
    - isAsyncModuleExt
    - createPromise
    - resolveQueue
    - wrapDeps
    - asyncModule
    - handleAsyncDependencies
    - getResult
    - fnQueue
    - asyncResult
    - to
    - relativeURL
    - toJSON
    - to
    - invariant
    - to
    - requireStub
    - loadChunk
    - loadChunkPath
    - createResolvePathFromModule
    - resolvePathFromModule
    - resolveAbsolutePath
    - getWorkerBlobURL
    - addModuleToChunk
    - getFirstModuleChunk
    - instantiateRuntimeModule
    - getChunkRelativeUrl
    - markChunkListAsRuntime
    - registerChunk
    - getOrInstantiateRuntimeModule
    - getOrInstantiateModuleFromParent
    - instantiateModule
    - runModuleExecutionHooks
    - registerExportsAndSetupBoundaryForReactRefresh
    - formatDependencyChain
    - computeOutdatedModules
    - computedInvalidatedModules
    - computeOutdatedSelfAcceptedModules
    - updateChunksPhase
    - disposePhase
    - disposeModule
    - applyPhase
    - applyUpdate
    - applyChunkListUpdate
    - applyEcmascriptMergedUpdate
    - applyInvalidatedModules
    - applyInternal
    - reportError
    - computeChangedModules
    - getAffectedModuleEffects
    - handleApply
    - createModuleHot
    - removeModuleFromChunk
    - disposeChunkList
    - disposeChunk
    - registerChunkList
    - augmentContext
    - fetchWebAssembly
    - loadWebAssembly
    - loadWebAssemblyModule
    - getOrCreateResolver
    - doLoadChunk
    - onerror
    - onload
    - onerror
    - onerror
    - onload
    - deleteResolver
    - _eval
  Comments:
    /**
 * This file contains runtime types and functions that are shared between all
 * TurboPack ECMAScript runtimes.
 *
 * It will be prepended to the runtime code of each runtime.
 */
    /* eslint-disable @typescript-eslint/no-unused-vars */
    /// <reference path="./runtime-types.d.ts" />
    /**
 * Adds the getters to the exports object.
 */
    /**
 * Makes the module an ESM with exports
 */
    /**
 * Dynamically exports properties from an object
 */
    /**
 * @returns prototype of the object
 */
    /** Prototypes that are not expanded for exports */
    /**
 * @param raw
 * @param ns
 * @param allowExportDefault
 *   * `false`: will have the raw module as default export
 *   * `true`: will have the default property as default export
 */
    // this is not really correct
    // we should set the `default` getter if the imported module is a `.cjs file`
    // any ES module has to have `module.namespaceObject` defined.
    // only ESM can be an async module, so we don't need to worry about exports being a promise here.
    // Add a simple runtime require so that environments without one can still pass
    // `typeof require` CommonJS checks so that exports are correctly registered.
    // @ts-ignore
    /**
 * `require.context` and require/import expression runtime.
 */
    /**
 * Returns the path of a chunk defined by its data.
 */
    // everything below is adapted from webpack
    // https://github.com/webpack/webpack/blob/6be4065ade1e252c1d8dcba4af0f43e32af1bdc1/lib/runtime/AsyncModuleRuntimeModule.js#L13
    // Calling `esmExport` leads to this.
    /**
 * A pseudo "fake" URL object to resolve to its relative path.
 *
 * When UrlRewriteBehavior is set to relative, calls to the `new URL()` will construct url without base using this
 * runtime function to generate context-agnostic urls between different rendering context, i.e ssr / client to avoid
 * hydration mismatch.
 *
 * This is based on webpack's existing implementation:
 * https://github.com/webpack/webpack/blob/87660921808566ef3b8796f8df61bd79fc026108/lib/runtime/RelativeUrlRuntimeModule.js
 */
    /**
 * Utility function to ensure all variants of an enum are handled.
 */
    /**
 * A stub function to make `require` available but non-functional in ESM.
 */
    /**
 * This file contains runtime types and functions that are shared between all
 * Turbopack *development* ECMAScript runtimes.
 *
 * It will be appended to the runtime code of each runtime right after the
 * shared runtime utils.
 */
    /* eslint-disable @typescript-eslint/no-unused-vars */
    /// <reference path="../base/globals.d.ts" />
    /// <reference path="../../../shared/runtime-utils.ts" />
    /*#__PURE__*/
    /**
   * The module was instantiated because it was included in an evaluated chunk's
   * runtime.
   */
    /**
   * The module was instantiated because a parent module imported it.
   */
    /**
   * The module was instantiated because it was included in a chunk's hot module
   * update.
   */
    /**
 * Module IDs that are instantiated as part of the runtime of a chunk.
 */
    /**
 * Map from module ID to the chunks that contain this module.
 *
 * In HMR, we need to keep track of which modules are contained in which so
 * chunks. This is so we don't eagerly dispose of a module when it is removed
 * from chunk A, but still exists in chunk B.
 */
    /**
 * Map from a chunk path to all modules it contains.
 */
    /**
 * Chunk lists that contain a runtime. When these chunk lists receive an update
 * that can't be reconciled with the current state of the page, we need to
 * reload the runtime entirely.
 */
    /**
 * Map from a chunk list to the chunk paths it contains.
 */
    /**
 * Map from a chunk path to the chunk lists it belongs to.
 */
    // When all included items are already loaded or loading, we can skip loading ourselves
    // TODO(alexkirsz) Do we need this check?
    // if (moduleFactories[included]) return true;
    // Some module chunks are already loaded or loading.
    // When all included module chunks are already loaded or loading, we can skip loading ourselves
    // Mark all included module chunks as loading if they are not already loaded or loading.
    // It might be better to race old and new promises, but it's rare that the new promise will be faster than a request started earlier.
    // In production it's even more rare, because the chunk optimization tries to deduplicate modules anyway.
    /**
 * Returns an absolute url to an asset.
 */
    /**
 * no-op for browser
 * @param modulePath
 */
    /**
 * Adds a module to a chunk.
 */
    /**
 * Returns the first chunk that included a module.
 * This is used by the Node.js backend, hence why it's marked as unused in this
 * file.
 */
    /**
 * Instantiates a runtime module.
 */
    /**
 * Returns the URL relative to the origin where a chunk can be fetched from.
 */
    /**
 * Marks a chunk list as a runtime chunk list. There can be more than one
 * runtime chunk list. For instance, integration tests can have multiple chunk
 * groups loaded at runtime, each with its own chunk list.
 */
    /// <reference path="./dev-globals.d.ts" />
    /// <reference path="./dev-protocol.d.ts" />
    /// <reference path="./dev-extensions.ts" />
    /**
 * This file contains runtime types and functions that are shared between all
 * Turbopack *development* ECMAScript runtimes.
 *
 * It will be appended to the runtime code of each runtime right after the
 * shared runtime utils.
 */
    /* eslint-disable @typescript-eslint/no-unused-vars */
    /**
 * Maps module IDs to persisted data between executions of their hot module
 * implementation (`hot.data`).
 */
    /**
 * Maps module instances to their hot module state.
 */
    /**
 * Modules that call `module.hot.invalidate()` (while being updated).
 */
    /**
 * Gets or instantiates a runtime module.
 */
    // @ts-ignore
    // @ts-ignore
    /**
 * Retrieves a module from the cache, or instantiate it if it is not cached.
 */
    // @ts-ignore Defined in `runtime-utils.ts`
    // @ts-ignore Defined in `runtime-base.ts`
    // This can happen if modules incorrectly handle HMR disposes/updates,
    // e.g. when they keep a `setTimeout` around which still executes old code
    // and contains e.g. a `require("something")` call.
    // No need to add this module as a child of the parent module here, this
    // has already been taken care of in `getOrInstantiateModuleFromParent`.
    // NOTE(alexkirsz) This can fail when the module encounters a runtime error.
    // in case of a circular dependency: cjs1 -> esm2 -> cjs1
    /**
 * NOTE(alexkirsz) Webpack has a "module execution" interception hook that
 * Next.js' React Refresh runtime hooks into to add module context to the
 * refresh registry.
 */
    // Always cleanup the intercept, even if module execution failed.
    /**
 * This is adapted from https://github.com/vercel/next.js/blob/3466862d9dc9c8bb3131712134d38757b918d1c0/packages/react-refresh-utils/internal/ReactRefreshModule.runtime.ts
 */
    // A module can be accepted automatically based on its exports, e.g. when
    // it is a Refresh Boundary.
    // Save the previous exports on update, so we can compare the boundary
    // signatures.
    // Unconditionally accept an update to this module, we'll check if it's
    // still a Refresh Boundary later.
    // This field is set when the previous version of this module was a
    // Refresh Boundary, letting us know we need to check for invalidation or
    // enqueue an update.
    // A boundary can become ineligible if its exports are incompatible
    // with the previous exports.
    //
    // For example, if you add/remove/change exports, we'll want to
    // re-execute the importing modules, and force those components to
    // re-render. Similarly, if you convert a class component to a
    // function, we want to invalidate the boundary.
    // Since we just executed the code for the module, it's possible that the
    // new exports made it ineligible for being a boundary.
    // We only care about the case when we were _previously_ a boundary,
    // because we already accepted this update (accidental side effect).
    // TODO(alexkirsz) Dependencies: handle dependencies effects.
    /**
 * Adds, deletes, and moves modules between chunks. This must happen before the
 * dispose phase as it needs to know which modules were removed from all chunks,
 * which we can only compute *after* taking care of added and moved modules.
 */
    // Removing modules from the module cache is a separate step.
    // We also want to keep track of previous parents of the outdated modules.
    // TODO(alexkirsz) Dependencies: remove outdated dependency from module
    // children.
    /**
 * Disposes of an instance of a module.
 *
 * Returns the persistent hot data that should be kept for the next module
 * instance.
 *
 * NOTE: mode = "replace" will not remove modules from the devModuleCache
 * This must be done in a separate step afterwards.
 * This is important because all modules need to be disposed to update the
 * parent/child relationships before they are actually removed from the devModuleCache.
 * If this was done in this method, the following disposeModule calls won't find
 * the module from the module id in the cache.
 */
    // Run the `hot.dispose` handler, if any, passing in the persistent
    // `hot.data` object.
    // This used to warn in `getOrInstantiateModuleFromParent` when a disposed
    // module is still importing other modules.
    // TODO(alexkirsz) Dependencies: delete the module from outdated deps.
    // Remove the disposed module from its children's parent list.
    // It will be added back once the module re-instantiates and imports its
    // children again.
    // Update module factories.
    // TODO(alexkirsz) Run new runtime entries here.
    // TODO(alexkirsz) Dependencies: call accept handlers for outdated deps.
    // Re-instantiate all outdated self-accepted modules.
    // we want to continue on error and only throw the error after we tried applying all updates
    // We could also use `mergedChunkUpdate.modules` here.
    // If a module was added from one chunk and deleted from another in the same update,
    // consider it to be modified, as it means the module was moved from one chunk to another
    // AND has new code in a single update.
    // Modules that haven't been added to any chunk but have new code are considered
    // to be modified.
    // This needs to be under the previous loop, as we need it to get rid of modules
    // that were added and deleted in the same update.
    // We've arrived at the runtime of the chunk, which means that nothing
    // else above can accept this update.
    // The module is not in the cache. Since this is a "modified" update,
    // it means that the module was never instantiated before.
    // TODO(alexkirsz) Dependencies: check accepted and declined
    // dependencies here.
    // This indicates that the update is can be applied to the current state of the application.
    // This indicates that there is no way to apply the update to the
    // current state of the application, and that the application must be
    // restarted.
    // This indicates that the chunk list no longer exists: either the dynamic import which created it was removed,
    // or the page itself was deleted.
    // If it is a dynamic import, we simply discard all modules that the chunk has exclusive access to.
    // If it is a runtime chunk list, we restart the application.
    // TODO(alexkirsz) This is not defined in the HMR API. It was used to
    // decide whether to warn whenever an HMR-disposed module required other
    // modules. We might want to remove it.
    // TODO(alexkirsz) Support full (dep, callback, errorHandler) form.
    // NOTE(alexkirsz) This is part of the management API, which we don't
    // implement, but the Next.js React Refresh runtime uses this to decide
    // whether to schedule an update.
    // NOTE(alexkirsz) Since we always return "idle" for now, these are no-ops.
    // NOTE(jridgewell) Check returns the list of updated modules, but we don't
    // want the webpack code paths to ever update (the turbopack paths handle
    // this already).
    /**
 * Removes a module from a chunk.
 * Returns `true` if there are no remaining chunks including this module.
 */
    /**
 * Disposes of a chunk list and its corresponding exclusive chunks.
 */
    // We must also dispose of the chunk list's chunk itself to ensure it may
    // be reloaded properly in the future.
    /**
 * Disposes of a chunk and its corresponding exclusive modules.
 *
 * @returns Whether the chunk was disposed of.
 */
    // This should happen whether the chunk has any modules in it or not.
    // For instance, CSS chunks have no modules in them, but they still need to be unloaded.
    /**
 * Subscribes to chunk list updates from the update server and applies them.
 */
    // Adding chunks to chunk lists and vice versa.
    /**
 * This file contains the runtime code specific to the Turbopack development
 * ECMAScript DOM runtime.
 *
 * It will be appended to the base development runtime code.
 */
    /* eslint-disable @typescript-eslint/no-unused-vars */
    /// <reference path="../../../browser/runtime/base/runtime-base.ts" />
    /// <reference path="../../../shared/runtime-types.d.ts" />
    /**
 * Maps chunk paths to the corresponding resolver.
 */
    // Chunk might have started loading, so we want to avoid triggering another load.
    // This waits for chunks to be loaded, but also marks included items as available.
    /**
   * Loads the given chunk, and returns a promise that resolves once the chunk
   * has been loaded.
   */
    // We don't need to load chunks references from runtime code, as they're already
    // present in the DOM.
    // CSS chunks do not register themselves, and as such must be marked as
    // loaded instantly.
    // We need to wait for JS chunks to register themselves within `registerChunk`
    // before we can start instantiating runtime modules, hence the absence of
    // `resolver.resolve()` in this branch.
    // We're in a web worker
    // ignore
    // CSS chunks do not register themselves, and as such must be marked as
    // loaded instantly.
    // CSS chunks do not register themselves, and as such must be marked as
    // loaded instantly.
    // There is this edge where the script already failed loading, but we
    // can't detect that. The Promise will never resolve in this case.
    // We'll only mark the chunk as loaded once the script has been executed,
    // which happens in `registerChunk`. Hence the absence of `resolve()` in
    // this branch.
    /**
 * This file contains the runtime code specific to the Turbopack development
 * ECMAScript DOM runtime.
 *
 * It will be appended to the base development runtime code.
 */
    /* eslint-disable @typescript-eslint/no-unused-vars */
    /// <reference path="../base/runtime-base.ts" />
    /// <reference path="../base/dev-base.ts" />
    /// <reference path="./runtime-backend-dom.ts" />
    /// <reference path="../../../shared/require-type.d.ts" />
    // TODO(PACK-2140): remove this once all filenames are guaranteed to be escaped.
    // Unloading a JS chunk would have no effect, as it lives in the JS
    // runtime once evaluated.
    // However, we still want to remove the script tag from the DOM to keep
    // the HTML somewhat consistent from the user's perspective.
    // Firefox won't reload CSS files that were previously loaded on the current page,
    // we need to add a query param to make sure CSS is actually reloaded from the server.
    //
    // I believe this is this issue: https://bugzilla.mozilla.org/show_bug.cgi?id=1037506
    //
    // Safari has a similar issue, but only if you have a `<link rel=preload ... />` tag
    // pointing to the same URL as the stylesheet: https://bugs.webkit.org/show_bug.cgi?id=187726
    // First load the new CSS, then remove the old ones. This prevents visible
    // flickering that would happen in-between removing the previous CSS and
    // loading the new one.
    // CSS chunks do not register themselves, and as such must be marked as
    // loaded instantly.
    // Make sure to insert the new CSS right after the previous one, so that
    // its precedence is higher.
    //# sourceURL=${encodeURI(location.origin + CHUNK_BASE_PATH + url)}`;
    //# sourceMappingURL=data:application/json;charset=utf-8;base64,${btoa(// btoa doesn't handle nonlatin characters, so escape them as \x sequences
    // See https://stackoverflow.com/a/26603875
    // eslint-disable-next-line no-eval
    //# sourceMappingURL=_d95469._.js.map

File: ./frontend/.next/static/chunks/node_modules_0dfd10._.js
  JavaScript Functions:
    - getComponentNameFromType
    - testStringCoercion
    - checkKeyStringCoercion
    - disabledLog
    - disableLogs
    - reenableLogs
    - describeBuiltInComponentFrame
    - describeNativeComponentFrame
    - describeUnknownElementTypeFrameInDEV
    - getOwner
    - hasValidKey
    - defineKeyPropWarningGetter
    - warnAboutAccessingKey
    - elementRefGetterWithDeprecationWarning
    - ReactElement
    - jsxDEVImpl
    - validateChildKeys
    - isValidElement
    - validateExplicitKey
    - getCurrentComponentErrorInfo
    - var
    - murmurhash2
    - typeOf
    - getAssetPathFromRoute
    - getPolicy
    - __unsafeCreateTrustedScriptURL
    - _export
    - getDeploymentIdQueryOrEmptyString
    - encodeURIPath
    - _export
    - withFuture
    - markAssetError
    - isAssetError
    - hasPrefetch
    - getAssetQueryString
    - prefetchViaDom
    - onerror
    - appendScript
    - onerror
    - resolvePromiseWithTimeout
    - getClientBuildManifest
    - __BUILD_MANIFEST_CB
    - getFilesForRoute
    - createRouteLoader
    - maybeExecuteScript
    - fetchStyleSheet
    - isBooleanScriptAttribute
    - setAttributesFromProps
    - _export
    - insertStylesheets
    - to
    - loadScript
    - onLoad
    - afterLoad
    - handleClientScriptLoad
    - loadLazyScript
    - addBeforeInteractiveToCache
    - initScriptLoader
    - Script
    - onLoad
    - if
    - _export
    - handleSlug
    - getSortedRoutes
    - getSortedRouteObjects
    - isDynamicRoute
    - _export
    - ensures
    - normalizePathSep
    - denormalizePagePath
    - normalizeLocalePath
    - mitt
    - _export
    - execOnce
    - isAbsoluteUrl
    - getLocationOrigin
    - getURL
    - getDisplayName
    - isResSent
    - normalizeRepeatedSlashes
    - loadGetInitialProps
    - stringifyError
    - _export
    - searchParamsToUrlQuery
    - stringifyUrlQueryParam
    - urlQueryToSearchParams
    - assign
    - parseRelativeUrl
    - lexer
    - parse
    - compile
    - tokensToFunction
    - match
    - regexpToFunction
    - escapeString
    - flags
    - regexpToRegexp
    - arrayToRegexp
    - stringToRegexp
    - tokensToRegexp
    - pathToRegexp
    - getPathMatch
    - that
    - escapeStringRegexp
    - parseUrl
    - parse
    - serialize
    - tryDecode
    - getCookieParser
    - parseCookie
    - _export
    - getSafeParamName
    - escapeSegment
    - unescapeSegments
    - matchHas
    - hasMatch
    - compileNonPath
    - prepareDestination
    - resolveRewrites
    - handleRewrite
    - getRouteMatcher
    - decode
    - _export
    - did
    - did
    - _export
    - parseParameter
    - parseMatchedParameter
    - getParametrizedRoute
    - getRouteRegex
    - to
    - buildGetSafeRouteKey
    - getSafeKeyFromSegment
    - getNamedParametrizedRoute
    - getNamedRouteRegex
    - getNamedMiddlewareRegex
    - modified
    - _export
    - formatUrl
    - formatWithValidation
    - removeLocale
    - omit
    - isLocalURL
    - interpolateAs
    - resolveHref
    - isAPIRoute
    - removePathPrefix
    - getNextPathnameInfo
    - below
    - addPathSuffix
    - addLocale
    - formatNextPathnameInfo
    - compareRouterStates
    - with
    - finishes
    - handleSmoothScroll
    - _export
    - buildCancellationError
    - matchesMiddleware
    - stripOrigin
    - prepareUrlAs
    - resolveDynamicRoute
    - getMiddlewareData
    - withMiddlewareEffects
    - fetchRetry
    - tryToParseAsJSON
    - fetchNextData
    - getData
    - createKey
    - handleHardNavigation
    - getCancelledHandler
    - clc
    - handleCancelled
    - cancel
    - onPopState
    - withRouter
    - WithRouterWrapper
    - _export
    - getRouter
    - useRouter
    - createRouter
    - makePublicRouterInstance
    - ArrowsPointingOutIcon
    - XMarkIcon
  Comments:
    /**
 * @license React
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    //react.dev/link/special-props)", displayName));
    //react.dev/link/warning-keys for more information.', parentType, childOwner);
    // minimal implementation MurmurHash2 hash function
    // default to 0.01% error rate as the filter compresses very well
    //# sourceMappingURL=bloom-filter.js.map
    /**
 * @license React
 * react-is.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    // Translates a logical route into its pages asset path (relative from a common prefix)
    // "asset path" being its javascript file, data file, prerendered html,...
    //# sourceMappingURL=get-asset-path-from-route.js.map
    /**
 * Stores the Trusted Types Policy. Starts as undefined and can be set to null
 * if Trusted Types is not supported in the browser.
 */
    /**
 * Getter for the Trusted Types Policy. If it is undefined, it is instantiated
 * here or set to null if Trusted Types is not supported in the browser.
 */
    //# sourceMappingURL=trusted-types.js.map
    //# sourceMappingURL=request-idle-callback.js.map
    //# sourceMappingURL=deployment-id.js.map
    //# sourceMappingURL=encode-uri-path.js.map
    /*#__PURE__*/
    // 3.8s was arbitrarily chosen as it's what https://web.dev/interactive
    // considers as "Good" time-to-interactive. We must assume something went
    // wrong beyond this point, and then fall-back to a full page transition to
    // show the user something of value.
    // with relList.support
    // The order of property assignment here is intentional:
    // `href` should always be last:
    // The order of property assignment here is intentional.
    // 1. Setup success/failure hooks in case the browser synchronously
    //    executes when `src` is set.
    // 2. Configure the cross-origin attribute before setting `src` in case the
    //    browser begins to fetch.
    // 3. Finally, set the source and inject into the DOM in case the child
    //    must be appended for fetching to start.
    // We wait for pages to be built in dev before we start the route transition
    // timeout to prevent an un-necessary hard navigation in development.
    // Resolve a promise that times out after given amount of milliseconds.
    // Resolved, cancel the timeout
    // We wrap these checks separately for better dead-code elimination in
    // production bundles.
    // Mandatory because this is not concurrent safe:
    // Styles are handled by `style-loader` in development:
    // With HMR we might need to "reload" scripts when they are
    // disposed and readded. Executing scripts twice has no functional
    // differences
    // when this entrypoint has been resolved before
    // the route is outdated and we want to invalidate
    // this cache entry
    // we don't want to cache errors during prefetch
    // https://github.com/GoogleChromeLabs/quicklink/blob/453a661fa1fa940e2d2e044452398e38c67a98fb/src/index.mjs#L115-L118
    // License: Apache 2.0
    // Don't prefetch if using 2G or if Save-Data is enabled.
    //# sourceMappingURL=route-loader.js.map
    // we don't render undefined props to the DOM
    // Correctly assign boolean script attributes
    // https://github.com/vercel/next.js/pull/20748
    // Remove falsy non-zero boolean attributes so they are correctly interpreted
    // (e.g. if we set them to false, this coerces to the string "false", which the browser interprets as true)
    // Call setAttribute before, as we need to set and unset the attribute to override force async:
    // https://html.spec.whatwg.org/multipage/scripting.html#script-force-async
    //# sourceMappingURL=set-attributes-from-props.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    // Case 1: Styles for afterInteractive/lazyOnload with appDir injected via handleClientScriptLoad
    //
    // Using ReactDOM.preinit to feature detect appDir and inject styles
    // Stylesheets might have already been loaded if initialized with Script component
    // Re-inject styles here to handle scripts loaded via handleClientScriptLoad
    // ReactDOM.preinit handles dedup and ensures the styles are loaded only once
    // Case 2: Styles for afterInteractive/lazyOnload with pages injected via handleClientScriptLoad
    //
    // We use this function to load styles when appdir is not detected
    // TODO: Use React float APIs to load styles once available for pages dir
    // Script has already loaded
    // Contents of this script are already loading/loaded
    // It is possible that multiple `next/script` components all have same "src", but has different "onLoad"
    // This is to make sure the same remote script will only load once, but "onLoad" are executed in order
    /** Execute after the script first loaded */
    // Run onReady for the first time after load event
    // add cacheKey to LoadCache when load successfully
    // Casting since lib.dom.d.ts doesn't have TrustedHTML yet.
    // do not add cacheKey into LoadCache for remote script here
    // cacheKey will be added to LoadCache when it is actually loaded (see loadPromise above)
    // Load styles associated with this script
    /**
 * Load a third-party scripts in an optimized way.
 *
 * Read more: [Next.js Docs: `next/script`](https://nextjs.org/docs/app/api-reference/components/script)
 */
    // Context is available only during SSR
    /**
   * - First mount:
   *   1. The useEffect for onReady executes
   *   2. hasOnReadyEffectCalled.current is false, but the script hasn't loaded yet (not in LoadCache)
   *      onReady is skipped, set hasOnReadyEffectCalled.current to true
   *   3. The useEffect for loadScript executes
   *   4. hasLoadScriptEffectCalled.current is false, loadScript executes
   *      Once the script is loaded, the onLoad and onReady will be called by then
   *   [If strict mode is enabled / is wrapped in <OffScreen /> component]
   *   5. The useEffect for onReady executes again
   *   6. hasOnReadyEffectCalled.current is true, so entire effect is skipped
   *   7. The useEffect for loadScript executes again
   *   8. hasLoadScriptEffectCalled.current is true, so entire effect is skipped
   *
   * - Second mount:
   *   1. The useEffect for onReady executes
   *   2. hasOnReadyEffectCalled.current is false, but the script has already loaded (found in LoadCache)
   *      onReady is called, set hasOnReadyEffectCalled.current to true
   *   3. The useEffect for loadScript executes
   *   4. The script is already loaded, loadScript bails out
   *   [If strict mode is enabled / is wrapped in <OffScreen /> component]
   *   5. The useEffect for onReady executes again
   *   6. hasOnReadyEffectCalled.current is true, so entire effect is skipped
   *   7. The useEffect for loadScript executes again
   *   8. hasLoadScriptEffectCalled.current is true, so entire effect is skipped
   */
    // Run onReady if script has loaded before but component is re-mounted
    // Script has already loaded during SSR
    // For the app directory, we need React Float to preload these scripts.
    // Injecting stylesheets here handles beforeInteractive and worker scripts correctly
    // For other strategies injecting here ensures correct stylesheet order
    // ReactDOM.preinit handles loading the styles in the correct order,
    // also ensures the stylesheet is loaded only once and in a consistent manner
    //
    // Case 1: Styles for beforeInteractive/worker with appDir - handled here
    // Case 2: Styles for beforeInteractive/worker with pages dir - Not handled yet
    // Case 3: Styles for afterInteractive/lazyOnload with appDir - handled here
    // Case 4: Styles for afterInteractive/lazyOnload with pages dir - handled in insertStylesheets function
    // Before interactive scripts need to be loaded by Next.js' runtime instead
    // of native <script> tags, because they no longer have `defer`.
    // For inlined scripts, we put the content in `children`.
    // Casting since lib.dom.d.ts doesn't have TrustedHTML yet.
    /*#__PURE__*/
    // @ts-ignore
    /*#__PURE__*/
    // @ts-ignore
    //# sourceMappingURL=script.js.map
    // The next segment in the urlPaths list
    // Check if the segment matches `[something]`
    // Strip `[` and `]`, leaving only `something`
    // Strip optional `[` and `]`, leaving only `something`
    // Strip `...`, leaving only `something`
    // If the specific segment already has a slug but the slug is not `something`
    // This prevents collisions like:
    // pages/[post]/index.js
    // pages/[id]/index.js
    // Because currently multiple dynamic params on the same segment level are not supported
    // TODO: This error seems to be confusing for users, needs an error link, the description can be based on above comment.
    // slugName is kept as it can only be one particular slugName
    // nextSegment is overwritten to [[...]] so that it can later be sorted specifically
    // slugName is kept as it can only be one particular slugName
    // nextSegment is overwritten to [...] so that it can later be sorted specifically
    // slugName is kept as it can only be one particular slugName
    // nextSegment is overwritten to [] so that it can later be sorted specifically
    // If this UrlNode doesn't have the nextSegment yet we create a new child UrlNode
    // First the UrlNode is created, and every UrlNode can have only 1 dynamic segment
    // Eg you can't have pages/[post]/abc.js and pages/[hello]/something-else.js
    // Only 1 dynamic segment per nesting level
    // So in the case that is test/integration/dynamic-routing it'll be this:
    // pages/[post]/comments.js
    // pages/blog/[post]/comment/[id].js
    // Both are fine because `pages/[post]` and `pages/blog` are on the same level
    // So in this case `UrlNode` created here has `this.slugName === 'post'`
    // And since your PR passed through `slugName` as an array basically it'd including it in too many possibilities
    // Instead what has to be passed through is the upwards path's dynamic names
    // Here the `root` gets injected multiple paths, and insert will break them up into sublevels
    // Smoosh will then sort those sublevels up to the point where you get the correct route definition priority
    // We're assuming here that all the pathnames are unique, that way we can
    // sort the list and use the index as the key.
    // Sort the pathnames.
    // Map the sorted pathnames back to the original objects using the new sorted
    // index.
    //# sourceMappingURL=sorted-routes.js.map
    // Identify /[param]/ in route string
    //# sourceMappingURL=is-dynamic.js.map
    //# sourceMappingURL=index.js.map
    /**
 * For a given page path, this function ensures that there is no backslash
 * escaping slashes in the path. Example:
 *  - `foo\/bar\/baz` -> `foo/bar/baz`
 */
    //# sourceMappingURL=normalize-path-sep.js.map
    //# sourceMappingURL=denormalize-page-path.js.map
    // first item will be empty string from splitting at first char
    //# sourceMappingURL=normalize-locale-path.js.map
    /*
MIT License

Copyright (c) Jason Miller (https://jasonformat.com/)

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
    // This file is based on https://github.com/developit/mitt/blob/v1.1.3/src/index.js
    // It's been edited for the needs of this script
    // See the LICENSE at the top of the file
    // eslint-disable-next-line array-callback-return
    //# sourceMappingURL=mitt.js.map
    // Scheme: https://tools.ietf.org/html/rfc3986#section-3.1
    // Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3
    //" + hostname + (port ? ':' + port : '');
    // first we replace any non-encoded backslashes with forward
    // then normalize repeated forward slashes
    //nextjs.org/docs/messages/get-initial-props-as-an-instance-method for more information.';
    // when called from _app `ctx` is nested in `ctx`
    // @ts-ignore pageProps default
    //nextjs.org/docs/messages/empty-object-getInitialProps");
    //# sourceMappingURL=utils.js.map
    //# sourceMappingURL=querystring.js.map
    //n' : (0, _utils.getLocationOrigin)());
    //n' : window.location.href) : globalBase;
    //# sourceMappingURL=parse-relative-url.js.map
    /**
   * A matcher function that will check if a given pathname matches the path
   * given in the builder function. When the path does not match it will return
   * `false` but if it does it will return an object with the matched params
   * merged with the params provided in the second argument.
   */
    // If no pathname is provided it's not a match.
    // If the path did not match `false` will be returned.
    /**
     * If unnamed params are not allowed they must be removed from
     * the matched parameters. path-to-regexp uses "string" for named and
     * "number" for unnamed parameters.
     */
    //# sourceMappingURL=path-match.js.map
    // regexp is based on https://github.com/sindresorhus/escape-string-regexp
    // see also: https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/escapeRegExp.js#L23
    //# sourceMappingURL=escape-regexp.js.map
    //# sourceMappingURL=parse-url.js.map
    /*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */
    //# sourceMappingURL=get-cookie-parser.js.map
    /**
 * Ensure only a-zA-Z are used for param names for proper interpolating
 * with path-to-regexp
 */
    // A-Z
    // a-z
    // remove port from host if present
    // the value needs to start with a forward-slash to be compiled
    // correctly
    // have already validated before we got to this point and validating
    // breaks compiling destinations with named pattern params from the source
    // e.g. /something:hello(.*) -> /another/:hello is broken with validation
    // since compile validation is meant for reversing and not for inserting
    // params from a separate path-regex into another
    // update any params in query values
    // the value needs to start with a forward-slash to be compiled
    // correctly
    // add path params to query if it's not a redirect and not
    // already defined in destination query or path
    // The compiler also that the interception route marker is an unnamed param, hence '0',
    // so we need to add it to the params object.
    //nextjs.org/docs/messages/invalid-multi-match");
    // Query merge order lowest priority to highest
    // 1. initial URL query values
    // 2. path segment values
    // 3. destination specified query values
    //# sourceMappingURL=prepare-destination.js.map
    // this is a proxied rewrite which isn't handled on the client
    // check if we now match a page as this means we are done
    // resolving the rewrites
    // check if we match a dynamic-route, if so we break the rewrites chain
    // we don't end after match in beforeFiles to allow
    // continuing through all beforeFiles rewrites
    // check dynamic route before processing fallback rewrites
    //# sourceMappingURL=resolve-rewrites.js.map
    //# sourceMappingURL=route-matcher.js.map
    //nextjs.org/docs/messages/public-next-folder-conflict`;
    //nextjs.org/docs/messages/404-get-initial-props`;
    //nextjs.org/docs/messages/gssp-export`;
    //nextjs.org/docs/messages/gssp-component-member`;
    //nextjs.org/docs/messages/non-standard-node-env`;
    //nextjs.org/docs/messages/ssg-fallback-true-export`;
    /**
 * The names of the webpack layers. These layers are the primitives for the
 * webpack chunks.
 */
    /**
   * The layer for the shared code between the client and server bundles.
   */
    /**
   * The layer for server-only runtime and picking up `react-server` export conditions.
   * Including app router RSC pages and app router custom routes and metadata routes.
   */
    /**
   * Server Side Rendering layer for app (ssr).
   */
    /**
   * The browser client bundle layer for actions.
   */
    /**
   * The layer for the API routes.
   */
    /**
   * The layer for the middleware code.
   */
    /**
   * The layer for the instrumentation hooks.
   */
    /**
   * The layer for assets on the edge.
   */
    /**
   * The browser client bundle layer for App directory.
   */
    // pages api
    // app router pages and layouts
    //# sourceMappingURL=constants.js.map
    /**
 * Regular expression pattern used to match route parameters.
 * Matches both single parameters and parameter groups.
 * Examples:
 *   - `[[...slug]]` matches parameter group with key 'slug', repeat: true, optional: true
 *   - `[...slug]` matches parameter group with key 'slug', repeat: true, optional: false
 *   - `[[foo]]` matches parameter with key 'foo', repeat: false, optional: true
 *   - `[bar]` matches parameter with key 'bar', repeat: false, optional: false
 */
    /**
 * Parses a matched parameter from the PARAMETER_PATTERN regex to a data structure that can be used
 * to generate the parametrized route.
 * Examples:
 *   - `[...slug]` -> `{ key: 'slug', repeat: true, optional: true }`
 *   - `...slug` -> `{ key: 'slug', repeat: true, optional: false }`
 *   - `[foo]` -> `{ key: 'foo', repeat: false, optional: true }`
 *   - `bar` -> `{ key: 'bar', repeat: false, optional: false }`
 * @param param - The matched parameter to parse.
 * @returns The parsed parameter as a data structure.
 */
    // Check for parameters
    /**
 * Builds a function to generate a minimal routeKey using only a-z and minimal
 * number of characters.
 */
    // replace any non-word characters since they can break
    // the named regex
    // check if the key is still invalid and fallback to using a known
    // safe key
    // if the segment has an interception marker, make sure that's part of the regex pattern
    // this is to ensure that the route with the interception marker doesn't incorrectly match
    // the non-intercepted route (ie /app/(.)[username] should not match /app/[username])
    // Check for parameters
    //# sourceMappingURL=route-regex.js.map
    // Format function modified from nodejs
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    /*#__PURE__*/
    //' + (host || '');
    //# sourceMappingURL=format-url.js.map
    //# sourceMappingURL=detect-domain-locale.js.map
    //# sourceMappingURL=add-locale.js.map
    //# sourceMappingURL=remove-locale.js.map
    //# sourceMappingURL=omit.js.map
    // prevent a hydration mismatch on href for url with anchor refs
    // absolute urls can be local if they are on the same origin
    //# sourceMappingURL=is-local-url.js.map
    // Fall back to reading the values from the href
    // TODO: should this take priority; also need to change in the router.
    // support single-level catch-all
    // TODO: more robust handling for user-error (passing `/`)
    // Interpolate group into data URL if present
    // path delimiter escaped since they are being inserted
    // into the URL and we expect URL encoded segments
    // when parsing dynamic route params
    // did not satisfy all requirements
    // n.b. We ignore this error because we handle warning for this case in
    // development in the `<Link>` component directly.
    //# sourceMappingURL=interpolate-as.js.map
    // we use a dummy base url for relative urls
    // repeated slashes and backslashes in the URL are considered
    // invalid and will never match a Next.js page/file
    //);
    //) or backslashes \\ are not valid in the href.");
    // Return because it cannot be routed by the Next.js router
    //n');
    // fallback to / for invalid asPath values e.g. //
    //n');
    // if the origin didn't change, it means we received a relative href
    //# sourceMappingURL=resolve-href.js.map
    //# sourceMappingURL=is-api-route.js.map
    // If the path doesn't start with the prefix we can return it as is. This
    // protects us from situations where the prefix is a substring of the path
    // prefix such as:
    //
    // For prefix: /blog
    //
    //   /blog -> true
    //   /blog/ -> true
    //   /blog/1 -> true
    //   /blogging -> false
    //   /blogging/ -> false
    //   /blogging/1 -> false
    // Remove the prefix from the path via slicing.
    // If the path without the prefix starts with a `/` we can return it as is.
    // If the path without the prefix doesn't start with a `/` we need to add it
    // back to the path to make sure it's a valid path.
    //# sourceMappingURL=remove-path-prefix.js.map
    //, '').replace(/\.json$/, '').split('/');
    // update pathname with normalized if enabled although
    // we use normalized to populate locale info still
    // If provided, use the locale route normalizer to detect the locale instead
    // of the function below.
    //# sourceMappingURL=get-next-pathname-info.js.map
    //# sourceMappingURL=add-path-suffix.js.map
    // If no locale was given or the locale is the default locale, we don't need
    // to prefix the path.
    // If the path is an API path or the path already has the locale prefix, we
    // don't need to prefix the path.
    // Add the locale prefix to the path.
    //# sourceMappingURL=add-locale.js.map
    //# sourceMappingURL=format-next-pathname-info.js.map
    //# sourceMappingURL=compare-states.js.map
    /**
 * Run function with `scroll-behavior: auto` applied to `<html/>`.
 * This css change will be reverted after the function finishes.
 */
    // if only the hash is changed, we don't need to disable smooth scrolling
    // we only care to prevent smooth scrolling when navigating to a new page to avoid jarring UX
    // In Chrome-based browsers we need to force reflow before calling `scrollTo`.
    // Otherwise it will not pickup the change in scrollBehavior
    // More info here: https://github.com/vercel/next.js/issues/40719#issuecomment-1336248042
    //# sourceMappingURL=handle-smooth-scroll.js.map
    // tslint:disable:no-console
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // remove basePath first since path prefix has to be in the order of `/${basePath}/${locale}`
    // Check only path match on client. Matching "has" should be done on server
    // where we can access more info such as headers, HttpOnly cookie, etc.
    // If url and as provided as an object representation,
    // we'll format them into the string version here.
    // handle resolving href for dynamic routes
    // eslint-disable-next-line array-callback-return
    // leverage x-matched-path to detect next.config.js rewrites
    // eslint-disable-next-line no-sequences
    // Cookies are required to be present for Next.js' SSG "Preview Mode".
    // Cookies may also be required for `getServerSideProps`.
    //
    // > `fetch` won’t send cookies, unless you set the credentials init
    // > option.
    // https://developer.mozilla.org/docs/Web/API/Fetch_API/Using_Fetch
    //
    // > For maximum browser compatibility when it comes to sending &
    // > receiving cookies, always supply the `credentials: 'same-origin'`
    // > option instead of relying on the default.
    // https://github.com/github/fetch#caveats
    /**
             * When the data response is a redirect because of a middleware
             * we do not consider it an error. The headers must bring the
             * mapped location.
             * TODO: Change the status code in the handler.
             */
    /**
             * We should only trigger a server-side transition if this was
             * caused on a client-side transition. Otherwise, we'd get into
             * an infinite loop.
             */
    // firefox
    // safari
    // when skipping client cache we wait to update
    // inflight cache until successful data response
    // this allows racing click event with fetching newer data
    // without blocking navigation when stale data is available
    // only update cache if not marked as no-cache
    // ensure we don't trigger a hard navigation to the same
    // URL as this can end up with an infinite refresh
    /**
   * Go back in history
   */
    /**
   * Go forward in history
   */
    /**
   * Performs a `pushState` with arguments
   * @param url of the route
   * @param as masks `url` for the browser
   * @param options object you can define `shallow` and other options
   */
    /**
   * Performs a `replaceState` with arguments
   * @param url of the route
   * @param as masks `url` for the browser
   * @param options object you can define `shallow` and other options
   */
    // failed to load build manifest hard navigate
    // to be safe
    //n').pathname);
    //n').pathname)) {
    // if any sub-path of as matches a dynamic filter path
    // it should be hard navigated
    // if the client router filter is matched then we trigger
    // a hard navigation
    // WARNING: `_h` is an internal option for handing Next.js client-side
    // hydration. Your app should _never_ use this property. It may change at
    // any time without notice.
    // for static pages with query params in the URL we delay
    // marking the router ready until after the query is updated
    // or a navigation has occurred
    // if a route transition is already in progress before
    // the query updating is triggered ignore query updating
    // marking route changes as a navigation start entry
    // If the url change is only related to a hash change
    // We should not proceed. We should only change the state.
    // TODO: do we need the resolved href when only a hash change?
    // The build manifest needs to be loaded before auto-static dynamic pages
    // get their query parameters to allow ensuring they can be parsed properly
    // when rewritten to
    // If we fail to resolve the page list or client-build manifest, we must
    // do a server-side transition:
    // If asked to change the current URL we should reload the current page
    // (not location.reload() but reload getInitialProps and other Next.js stuffs)
    // We also need to set the method = replaceState always
    // as this should not go into the history (That's how browsers work)
    // We should compare the new asPath to the current asPath, not the url
    // we need to resolve the as value using rewrites for dynamic SSG
    // pages to allow building the data URL correctly
    // url and as should always be prefixed with basePath by this
    // point by either next/link or router.push/replace so strip the
    // basePath from the pathname to match the pages dir 1-to-1
    // if we detected the path as app route during prefetching
    // trigger hard navigation
    // we don't attempt resolve asPath when we need to execute
    // middleware as the resolving will occur server-side
    //nextjs.org/docs/messages/invalid-relative-url-external-as");
    //nextjs.org/docs/messages/" + (shouldInterpolate ? 'href-interpolation-failed' : 'incompatible-href-as')));
    // Merge params into `query`, overwriting any specified in search
    // If the routeInfo brings a redirect we simply apply it.
    // handle redirect on client-transition
    // Use the destination from redirect without adding locale
    // check if destination is internal (resolves to a page) and attempt
    // client-navigation if it is falling back to hard navigation if
    // it's not
    // handle SSG data 404
    // ensure statusCode is still correct for static 500 page
    // when updating query information
    // shallow routing is only allowed for same page URL changes.
    // the new state that the router gonna set
    // When the page being rendered is the 404 page, we should only update the
    // query parameters. Route changes here might add the basePath when it
    // wasn't originally present. This is also why this block is before the
    // below `changeState` call which updates the browser's history (changing
    // the URL).
    // ensure statusCode is still correct for static 500 page
    // when updating query information
    // for query updates we can skip it if the state is unchanged and we don't
    // need to scroll
    // https://github.com/vercel/next.js/issues/37139
    // A hash mark # is the optional last part of a URL
    // Passing the empty string here should be safe against future changes to the method.
    // https://developer.mozilla.org/docs/Web/API/History/replaceState
    // bubble up cancellation errors
    // If we can't load the page it could be one of following reasons
    //  1. Page doesn't exists
    //  2. Page does exist in a different zone
    //  3. Internal error while loading the page
    // So, doing a hard reload is the proper way to deal with this.
    // Changing the URL doesn't block executing the current code path.
    // So let's throw a cancellation error stop the routing logic.
    /**
     * This `route` binding can change if there's a rewrite
     * so we keep a reference to the original requested route
     * so we can store the cache for it and avoid re-requesting every time
     * for shallow routing purposes.
     */
    // we don't hard error during query updating
    // as it's un-necessary and doesn't need to be fatal
    // unless it is a fallback route and the props can't
    // be loaded
    // when rendering error routes we don't apply middleware
    // effects
    // during query updating the page must match although during
    // client-transition a redirect that doesn't match a page
    // can be returned and this should trigger a hard navigation
    // which is valid for incremental migration
    // Check again the cache with the new destination.
    // If we have a match with the current route due to rewrite,
    // we can copy the existing information to the rewritten one.
    // Then, we return the information along with the matched route.
    // For non-SSG prefetches that bailed before sending data
    // we clear the cache to fetch full response
    // Only bust the data cache for SSP routes although
    // middleware can skip cache per request with
    // x-middleware-cache: no-cache as well
    // we kick off a HEAD request in the background
    // when a non-prefetch request is made to signal revalidation
    /**
   * Callback to execute before replacing router state
   * @param cb callback to be executed
   */
    // Makes sure we scroll to the provided hash if the url/hash are the same
    // If the urls are change, there's more than a hash change
    // If the hash has changed, then it's a hash only change.
    // This check is necessary to handle both the enter and
    // leave hash === '' cases. The identity case falls through
    // and is treated as a next reload.
    // Scroll to top if the hash is just `#` with no value or `#top`
    // To mirror browsers
    // Decode hash to make non-latin anchor works.
    // First we check if the element by id is found
    // If there's no element with the id, we check the `name` property
    // To mirror browsers
    /**
   * Prefetch page code, you may wait for the data during page rendering.
   * This feature only works in production!
   * @param url the href of prefetched page
   * @param asPath the as path of the prefetched page
   */
    // Prefetch is not supported in development mode because it would trigger on-demand-entries
    // Server Data Cache (full data requests)
    // Server Background Cache (HEAD requests)
    // We get state as undefined for two reasons.
    //  1. With older safari (< 8) and older chrome (< 34)
    //  2. When the URL changed with #
    //
    // In the both cases, we don't need to proceed and change the route.
    // (as it's already changed)
    // But we can simply replace the state with the new changes.
    // Actually, for (1) we don't need to nothing. But it's hard to detect that event.
    // So, doing the following for (1) does no harm.
    // __NA is used to identify if the history entry can be handled by the app-router.
    // Safari fires popstateevent when reopening the browser.
    // Make sure we don't re-render on initial load,
    // can be caused by navigating back from an external site
    // If the downstream application returns falsy, return.
    // They will then be responsible for handling the event.
    // @ts-ignore internal value not exposed on types
    // represents the current component key
    // set up the component cache (by route keys)
    // We should not keep the cache, if there's an error
    // Otherwise, this cause issues when when going back and
    // come again to the errored page.
    // Backwards compat for Router.router.events
    // TODO: Should be remove the following major version as it was never documented
    // if auto prerendered and dynamic route wait to update asPath
    // until after mount to prevent hydration mismatch
    // make sure to ignore extra popState in safari on navigating
    // back from external site
    // make sure "as" doesn't start with double slashes or else it can
    // throw an error as it's considered invalid
    //')) {
    // in order for `e.state` to work on the `onpopstate` event
    // we have to register the initial route upon initialization
    // if middleware matches we leave resolving to the change function
    // as the server needs to resolve for correct priority
    // enable custom scroll restoration handling when available
    // otherwise fallback to browser's default handling
    //# sourceMappingURL=router.js.map
    /*#__PURE__*/
    //# sourceMappingURL=router-context.shared-runtime.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=with-router.js.map
    /* global window */
    // Export the singletonRouter and this is the public API.
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // Create public properties and methods of the router in the singletonRouter
    // Events is a static property on the router, the router doesn't have to be initialized to use it
    // Here we need to use Object.defineProperty because we need to return
    // the property assigned to the actual router
    // The value might get changed as we change routes and this is the
    // proper way to access it
    // We don't really know the types here, so we add them later instead
    //nextjs.org/docs/messages/next-router-not-mounted');
    // makes sure query is not stateful
    // Events is a static property on the router, the router doesn't have to be initialized to use it
    //# sourceMappingURL=router.js.map
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=node_modules_0dfd10._.js.map

File: ./frontend/.next/static/chunks/[root of the server]__f81d50._.js
  JavaScript Functions:
    - defaultSetTimout
    - defaultClearTimeout
    - runTimeout
    - runClearTimeout
    - cleanUpNextTick
    - drainQueue
    - Item
    - noop
    - __nccwpck_require__
    - computeFullKey
    - haveEqualSignatures
    - isReactClass
    - canPreserveStateBetween
    - resolveFamily
    - cloneMap
    - cloneSet
    - getProperty
    - performReactRefresh
    - register
    - setSignature
    - collectCustomHooksForSignature
    - getFamilyByID
    - getFamilyByType
    - findAffectedHostInstances
    - injectIntoGlobalHook
    - hasUnrecoverableErrors
    - _getMountedRootCount
    - is
    - Hello
    - createSignatureFunctionForTransform
    - isLikelyComponentType
    - with
    - isSafeExport
    - registerExportsForReactRefresh
    - getRefreshBoundarySignature
    - isReactRefreshBoundary
    - shouldInvalidateReactRefreshBoundary
    - aggregates
    - scheduleUpdate
    - canApplyUpdate
    - applyUpdate
    - statusHandler
    - mitt
    - with
    - finishes
    - handleSmoothScroll
    - ensures
    - ensureLeadingSlash
    - _export
    - isGroupSegment
    - isParallelRouteSegment
    - addSearchParamsIfPageSegment
    - _export
    - normalizeAppPath
    - normalizeRscURL
    - _export
    - isInterceptionRouteAppPath
    - extractInterceptionRouteInformation
    - isDynamicRoute
    - _export
    - searchParamsToUrlQuery
    - stringifyUrlQueryParam
    - urlQueryToSearchParams
    - assign
    - _export
    - _default
    - setConfig
    - _export
    - execOnce
    - isAbsoluteUrl
    - getLocationOrigin
    - getURL
    - getDisplayName
    - isResSent
    - normalizeRepeatedSlashes
    - loadGetInitialProps
    - stringifyError
    - Portal
    - isBooleanScriptAttribute
    - setAttributesFromProps
    - _export
    - reactElementToDOM
    - isEqualNode
    - updateElements
    - initHeadManager
    - will
    - parsePath
    - addPathPrefix
    - removeTrailingSlash
    - normalizePathTrailingSlash
    - addBasePath
    - getRouteMatcher
    - decode
    - _export
    - did
    - did
    - escapeStringRegexp
    - _export
    - parseParameter
    - parseMatchedParameter
    - getParametrizedRoute
    - getRouteRegex
    - to
    - buildGetSafeRouteKey
    - getSafeKeyFromSegment
    - getNamedParametrizedRoute
    - getNamedRouteRegex
    - getNamedMiddlewareRegex
    - interpolateAs
    - getAssetPathFromRoute
    - parseRelativeUrl
    - getPolicy
    - __unsafeCreateTrustedScriptURL
    - _export
    - getDeploymentIdQueryOrEmptyString
    - encodeURIPath
    - _export
    - withFuture
    - markAssetError
    - isAssetError
    - hasPrefetch
    - getAssetQueryString
    - prefetchViaDom
    - onerror
    - appendScript
    - onerror
    - resolvePromiseWithTimeout
    - getClientBuildManifest
    - __BUILD_MANIFEST_CB
    - getFilesForRoute
    - createRouteLoader
    - maybeExecuteScript
    - fetchStyleSheet
    - _export
    - getHrefForSlug
    - __SSG_MANIFEST_CB
    - var
    - murmurhash2
    - typeOf
    - _export
    - insertStylesheets
    - to
    - loadScript
    - onLoad
    - afterLoad
    - handleClientScriptLoad
    - loadLazyScript
    - addBeforeInteractiveToCache
    - initScriptLoader
    - Script
    - onLoad
    - if
    - _export
    - getObjectClassLabel
    - isPlainObject
    - _export
    - isError
    - safeStringify
    - getProperError
    - _export
    - handleSlug
    - getSortedRoutes
    - getSortedRouteObjects
    - _export
    - ensures
    - normalizePathSep
    - denormalizePagePath
    - normalizeLocalePath
    - lexer
    - parse
    - compile
    - tokensToFunction
    - match
    - regexpToFunction
    - escapeString
    - flags
    - regexpToRegexp
    - arrayToRegexp
    - stringToRegexp
    - tokensToRegexp
    - pathToRegexp
    - getPathMatch
    - that
    - parseUrl
    - _export
    - parse
    - serialize
    - tryDecode
    - getCookieParser
    - parseCookie
    - _export
    - getSafeParamName
    - escapeSegment
    - unescapeSegments
    - matchHas
    - hasMatch
    - compileNonPath
    - prepareDestination
    - pathHasPrefix
    - hasBasePath
    - removeBasePath
    - resolveRewrites
    - handleRewrite
    - modified
    - _export
    - formatUrl
    - formatWithValidation
    - removeLocale
    - omit
    - isLocalURL
    - resolveHref
    - isAPIRoute
    - removePathPrefix
    - getNextPathnameInfo
    - below
    - addPathSuffix
    - addLocale
    - formatNextPathnameInfo
    - compareRouterStates
    - isBot
    - _export
    - buildCancellationError
    - matchesMiddleware
    - stripOrigin
    - prepareUrlAs
    - resolveDynamicRoute
    - getMiddlewareData
    - withMiddlewareEffects
    - fetchRetry
    - tryToParseAsJSON
    - fetchNextData
    - getData
    - createKey
    - handleHardNavigation
    - getCancelledHandler
    - clc
    - handleCancelled
    - cancel
    - onPopState
    - withRouter
    - WithRouterWrapper
    - _export
    - getRouter
    - useRouter
    - createRouter
    - makePublicRouterInstance
    - _export
    - RouteAnnouncer
    - _export
    - _export
    - _export
    - asPathToSearchParams
    - _export
    - adaptForAppRouterInstance
    - adaptForSearchParams
    - adaptForPathParams
    - PathnameContextProviderAdapter
    - value
    - _export
    - isBailoutToCSRError
    - getReactStitchedError
    - appendOwnerStack
    - onRecoverableError
    - handleSpanEnd
    - normalizedAssetPrefix
    - getSocketProtocol
    - getSocketUrl
    - _export
    - addMessageListener
    - sendMessage
    - connectHMR
    - init
    - handleOnline
    - handleMessage
    - handleDisconnect
    - reportToSocket
    - _export
    - isHTTPAccessFallbackError
    - getAccessFallbackHTTPStatus
    - getAccessFallbackErrorTypeByStatus
    - _export
    - isRedirectError
    - isNextRouterError
    - _export
    - drain
    - emit
    - on
    - off
    - parse
    - parseChrome
    - parseWinjs
    - parseGecko
    - parseJSC
    - parseNode
    - _export
    - getDefaultHydrationErrorMessage
    - isHydrationError
    - isReactHydrationErrorMessage
    - getHydrationErrorStackInfo
    - parseStack
    - getLocationType
    - parseStackFrameLocation
    - parseComponentStack
    - _export
    - getHydrationWarningType
    - isHtmlTagsWarning
    - isTextMismatchWarning
    - isTextInTagsMismatchWarning
    - isKnownHydrationWarning
    - getReactHydrationDiffSegments
    - storeHydrationErrorStateFromConsoleArgs
    - _export
    - pushErrorFilterDuplicates
    - useErrorOverlayReducer
    - attachHydrationErrorState
    - _export
    - isWebpackInternalResource
    - formatFrameSourceFile
    - _export
    - getOriginalStackFrame
    - _getOriginalStackFrame
    - getOriginalStackFrames
    - getFrameSource
    - _export
    - getErrorSource
    - decorateServerError
    - getErrorByType
    - _export
    - getFilesystemFrame
    - getServerError
    - ShadowPortal
    - useOnClickOutside
    - Dialog
    - handler
    - handleFocus
    - DialogBody
    - DialogContent
    - DialogHeader
    - noop
    - _templateObject
    - _export
    - capitalize
    - cleanupOS
    - each
    - format
    - forOwn
    - getClassOf
    - isHostType
    - qualify
    - reduce
    - trim
    - parse
    - getLayout
    - getManufacturer
    - getName
    - getOS
    - getProduct
    - getVersion
    - toStringPlatform
    - __nccwpck_require__
    - nmd
    - __nccwpck_require__
    - function
    - contextToElement
    - getShadowHost
    - getDocument
    - isActiveElement
    - getParents
    - findMethodName
    - elementMatches
    - before
    - test
    - after
    - detectFocus
    - readLocalStorage
    - writeLocalStorage
    - get
    - set
    - cssShadowPiercingDeepCombinator
    - mutate
    - mutate
    - validate
    - mutate
    - validate
    - mutate
    - mutate
    - mutate
    - mutate
    - mutate
    - mutate
    - mutate
    - mutate
    - mutate
    - element
    - mutate
    - validate
    - focusInZeroDimensionObject
    - mutate
    - mutate
    - validate
    - mutate
    - mutate
    - validate
    - focusObjectSwf
    - mutate
    - validate
    - mutate
    - validate
    - mutate
    - mutate
    - mutate
    - mutate
    - makeFocusableForeignObject
    - focusSvgForeignObjectHack
    - generate
    - focus
    - validate
    - mutate
    - mutate
    - mutate
    - mutate
    - mutate
    - focusSvgInIframe
    - mutate
    - mutate
    - mutate
    - mutate
    - tabsequenceAreaAtImgPosition
    - executeTests
    - _supports
    - isValidTabindex
    - tabindexValue
    - isUserModifyWritable
    - hasCssOverflowScroll
    - hasCssDisplayFlex
    - isScrollableContainer
    - isFocusRelevantRules
    - isFocusRelevant
    - findIndex
    - getContentDocument
    - getWindow
    - selectInShadows
    - findDocumentHostElement
    - getFrameElement
    - computedStyle
    - notDisplayed
    - notVisible
    - collapsedParent
    - isVisibleRules
    - isVisible
    - getMapByName
    - getImageOfArea
    - isValidArea
    - isNativeDisabledSupported
    - isDisabledFieldset
    - isDisabledForm
    - isDisabled
    - isOnlyTabbableRules
    - isOnlyTabbable
    - isOnlyFocusRelevant
    - isFocusableRules
    - isFocusable
    - createFilter
    - filter
    - queryFocusableStrict
    - selector
    - queryFocusableQuick
    - queryFocusable
    - isTabbableRules
    - isTabbable
    - queryTabbable
    - compareDomPosition
    - sortDomOrder
    - getFirstSuccessorOffset
    - findInsertionOffsets
    - insertElementsAtOffsets
    - signature
    - mergeInDomOrder
    - defineProperties
    - _classCallCheck
    - Maps
    - getAreasFor
    - addMapByName
    - extractAreasFromList
    - sortArea
    - resolveElement
    - defineProperties
    - _classCallCheck
    - Shadows
    - _registerHost
    - _registerHostParent
    - _registerElement
    - extractElements
    - sort
    - _injectHosts
    - _merge
    - _replaceHosts
    - _resolveHostElement
    - _cleanup
    - sortShadowed
    - sortTabindex
    - moveContextToBeginning
    - sortElements
    - queryTabsequence
    - createExpectedModifiers
    - resolveModifiers
    - resolveKey
    - matchModifiers
    - keyBinding
    - getParentComparator
    - isChildOf
    - isParentOf
    - whenKey
    - registerBinding
    - addCallback
    - handleKeyDown
    - disengage
    - _default
    - altShiftTab
    - _export
    - lock
    - unlock
    - Overlay
    - defineProperties
    - _classCallCheck
    - escapeForHtml
    - linkify
    - ansiToHtml
    - ansiToJson
    - ansiToText
    - Anser
    - setupPalette
    - format
    - escapeForHtml
    - linkify
    - ansiToHtml
    - ansiToJson
    - ansiToText
    - process
    - processChunkJson
    - isEmpty
    - processChunk
    - render_data
    - __nccwpck_require__
    - _export
    - decodeHex
    - decodeMagicIdentifier
    - HotlinkedText
    - useOpenInEditor
    - openInEditor
    - EditorLink
    - getFile
    - getImportTraceFiles
    - getEditorLinks
    - Terminal
    - _templateObject
    - _export
    - VersionStalenessInfo
    - getStaleness
    - _export
    - _export
    - _templateObject
    - BuildError
    - CloseIcon
    - LeftRightDialogHeader
    - handler
    - _templateObject
    - _export
    - _templateObject
    - Toast
    - _export
    - exports
    - exports
    - __nccwpck_require__
    - CodeFrame
    - CallStackFrame
    - _export
    - _templateObject
    - RuntimeError
    - CollapseIcon
    - getAdjacentProps
    - PseudoHtmlDiff
    - htmlComponents
    - useCopyLegacy
    - copy
    - useCopyModern
    - copy
    - CopyButton
    - CopyIcon
    - CopySuccessIcon
    - isChrome
    - NodeJsIcon
    - NodeJsDisabledIcon
    - NodejsInspectorCopyButton
    - _export
    - createUnhandledError
    - isUnhandledConsoleOrRejection
    - getUnhandledErrorType
    - _export
    - _templateObject
    - isNextjsLink
    - ErrorDescription
    - getErrorSignature
    - Errors
    - isLoading
    - previous
    - next
    - activeError
    - minimize
    - hide
    - fullscreen
    - _templateObject
    - Base
    - _templateObject
    - _templateObject
    - _templateObject
    - _templateObject
    - ComponentStyles
    - _templateObject
    - CssReset
    - shouldPreventDisplay
    - ReactDevOverlay
    - _export
    - handleError
    - nextJsHandleConsoleError
    - onUnhandledError
    - onUnhandledRejection
    - register
    - unregister
    - onBuildOk
    - onBuildError
    - onRefresh
    - onBeforeRefresh
    - onVersionInfo
    - _export
    - looseToArray
    - initialize
    - register
    - getIsSsr
    - renderApp
    - AppContainer
    - wrapApp
    - renderError
    - Head
    - clearMarks
    - markHydrateComplete
    - markRenderComplete
    - renderReactElement
    - Root
    - doRender
    - resolvePromise
    - lastRenderReject
    - has
    - onStart
    - onHeadCommit
    - onRootCommit
    - render
    - hydrate
    - onPerfEntry
    - isLikelyASyntaxError
    - formatMessage
    - message
    - formatWebpackMessages
    - extractModulesFromTurbopackMessage
    - _export
    - connect
    - clearOutdatedErrors
    - handleSuccess
    - handleWarnings
    - printWarnings
    - handleErrors
    - onBeforeFastRefresh
    - onFastRefresh
    - reportHmrLatency
    - handleAvailableHash
    - processMessage
    - isUpdateAvailable
    - canApplyUpdates
    - afterApplyUpdates
    - handler
    - tryApplyUpdates
    - handleApplyUpdates
    - component
    - performFullReload
    - _default
    - initializeBuildWatcher
    - show
    - hide
    - handleMessage
    - updateContainer
    - createContainer
    - createCss
    - is
    - safeCallbackQueue
    - displayContent
    - pageBootstrap
    - clearIndicator
    - __next_set_public_path__
    - __turbopack_load_page_chunks__
    - appGetInitialProps
  Comments:
    //# sourceMappingURL=process.js.map
    /**
 * @license React
 * react-refresh-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    // ATTENTION
    // We never remove these associations.
    // It's OK to reference families, but use WeakMap/Set for types.
    // This WeakMap is read by React, so we only put families
    // that have actually been edited here. This keeps checks fast.
    // $FlowIssue
    // This is cleared on every performReactRefresh() call.
    // It is an array of [Family, NextType] tuples.
    // This is injected by the renderer via DevTools global hook.
    // We keep track of mounted roots so we can schedule updates.
    // If a root captures an error, we remember it so we can retry on edit.
    // In environments that support WeakMap, we also remember the last element for every root.
    // It needs to be weak because we do this even for roots that failed to mount.
    // If there is no WeakMap, we won't attempt to do retrying.
    // $FlowIssue
    // This can happen in an edge case, e.g. if expression like Foo.useSomething
    // depends on Foo which is lazily initialized during rendering.
    // In that case just assume we'll have to remount.
    // Something's wrong. Assume we need to remount.
    // Only check updated types to keep lookups fast.
    // If we didn't care about IE11, we could use new Map/Set(iterable).
    // This is a safety mechanism to protect against rogue getters and Proxies.
    // Intentionally ignore.
    // Now that we got a real edit, we can create associations
    // that will be read by the React reconciler.
    // Determine whether this should be a re-render or a re-mount.
    // TODO: rename these fields to something more meaningful.
    // Families that will re-render preserving state
    // Families that will be remounted
    // Even if there are no roots, set the handler on first update.
    // This ensures that if *new* roots are mounted, they'll use the resolve handler.
    // We snapshot maps and sets that are mutated during commits.
    // If we don't do this, there is a risk they will be mutated while
    // we iterate over them. For example, trying to recover a failed root
    // may cause another root to be added to the failed list -- an infinite loop.
    // Keep trying other roots.
    // Keep trying other roots.
    // This can happen in an edge case, e.g. if we register
    // return value of a HOC but it returns a cached component.
    // Ignore anything but the first registration for each type.
    // Create family or remember to update it.
    // None of this bookkeeping affects reconciliation
    // until the first performReactRefresh() call above.
    // Visit inner types because we might not have registered them.
    // Visit inner types because we might not have signed them.
    // This is lazily called during first render for a type.
    // It captures Hook list at that time so inline requires don't break comparisons.
    // For React Native, the global hook will be set up by require('react-devtools-core').
    // That code will run before us. So we need to monkeypatch functions on existing hook.
    // For React Web, the global hook will be set up by the extension.
    // This will also run before us.
    // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.
    // Note that in this case it's important that renderer code runs *after* this method call.
    // Otherwise, the renderer will think that there is no global hook, and won't do the injection.
    // This isn't a real property on the hook, but it can be set to opt out
    // of DevTools integration and associated warnings and logs.
    // Using console['warn'] to evade Babel and ESLint
    // Here, we just want to get a reference to scheduleRefresh.
    // This version supports React Refresh.
    // Do the same for any already injected roots.
    // This is useful if ReactDOM has already been initialized.
    // https://github.com/facebook/react/issues/17626
    // This version supports React Refresh.
    // We also want to track currently mounted roots.
    // If it was intentionally scheduled, don't attempt to restore.
    // This includes intentionally scheduled unmounts.
    // We need to determine whether this root has just (un)mounted.
    // This logic is copy-pasted from similar logic in the DevTools backend.
    // If this breaks with some refactoring, you'll want to update DevTools too.
    // Mount a new root.
    // Unmount an existing root.
    // We'll remount it on future edits.
    // We'll remount it on future edits.
    // Mount a new root.
    // Always call the decorated DevTools hook.
    // TODO: delete this after removing dependency in RN.
    // Exposed for testing.
    // This is a wrapper over more primitive functions for setting signature.
    // Signatures let us decide whether the Hook order has changed on refresh.
    //
    // This function is intended to be used as a transform target, e.g.:
    // var _s = createSignatureFunctionForTransform()
    //
    // function Hello() {
    //   const [foo, setFoo] = useState(0);
    //   const value = useCustomHook();
    //   _s(); /* Call without arguments triggers collecting the custom Hook list.
    //          * This doesn't happen during the module evaluation because we
    //          * don't want to change the module order with inline requires.
    //          * Next calls are noops. */
    //   return <h1>Hi</h1>;
    // }
    //
    // /* Call with arguments attaches the signature to the type: */
    // _s(
    //   Hello,
    //   'useState{[foo, setFoo]}(0)',
    //   () => [useCustomHook], /* Lazy to avoid triggering inline requires */
    // );
    // We're in the initial phase that associates signatures
    // with the functions. Note this may be called multiple times
    // in HOC chains like _s(hoc1(_s(hoc2(_s(actualFunction))))).
    // We're in the innermost call, so this is the actual type.
    // Set the signature for all types (even wrappers!) in case
    // they have no signatures of their own. This is to prevent
    // problems like https://github.com/facebook/react/issues/20417.
    // We're in the _s() call without arguments, which means
    // this is the time to collect custom Hook signatures.
    // Only do this once. This path is hot and runs *inside* every render!
    // First, deal with classes.
    // React class.
    // This looks like a class.
    // eslint-disable-next-line no-proto
    // It has a superclass.
    // Pass through.
    // This looks like a regular function with empty prototype.
    // For plain functions and arrows, use name as a heuristic.
    // Definitely React components.
    /**
 * MIT License
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
    // This file is copied from the Metro JavaScript bundler, with minor tweaks for
    // webpack 4 compatibility.
    //
    // https://github.com/facebook/metro/blob/d6b9685c730d0d63577db40f41369157f28dfa3a/packages/metro/src/lib/polyfills/require.js
    // TODO: remove this key from page config instead of allow listing it
    // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    // Exit if we can't iterate over exports.
    // This might fail due to circular dependencies
    // This function aggregates updates from multiple modules into a single React Refresh call.
    // Apply update on the next tick.
    // Apply update once the HMR runtime's status is idle.
    // Needs to be compatible with IE11
    //# sourceMappingURL=helpers.js.map
    // Hook into ReactDOM initialization
    // Register global helpers
    // Register a helper for module execution interception
    // Modeled after `useEffect` cleanup pattern:
    // https://react.dev/learn/synchronizing-with-effects#step-3-add-cleanup-if-needed
    //# sourceMappingURL=runtime.js.map
    /*#__PURE__*/
    //# sourceMappingURL=head-manager-context.shared-runtime.js.map
    /*
MIT License

Copyright (c) Jason Miller (https://jasonformat.com/)

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
    // This file is based on https://github.com/developit/mitt/blob/v1.1.3/src/index.js
    // It's been edited for the needs of this script
    // See the LICENSE at the top of the file
    // eslint-disable-next-line array-callback-return
    //# sourceMappingURL=mitt.js.map
    /*#__PURE__*/
    //# sourceMappingURL=router-context.shared-runtime.js.map
    /**
 * Run function with `scroll-behavior: auto` applied to `<html/>`.
 * This css change will be reverted after the function finishes.
 */
    // if only the hash is changed, we don't need to disable smooth scrolling
    // we only care to prevent smooth scrolling when navigating to a new page to avoid jarring UX
    // In Chrome-based browsers we need to force reflow before calling `scrollTo`.
    // Otherwise it will not pickup the change in scrollBehavior
    // More info here: https://github.com/vercel/next.js/issues/40719#issuecomment-1336248042
    //# sourceMappingURL=handle-smooth-scroll.js.map
    /**
 * For a given page path, this function ensures that there is a leading slash.
 * If there is not a leading slash, one is added, otherwise it is noop.
 */
    //# sourceMappingURL=ensure-leading-slash.js.map
    // Use array[0] for performant purpose
    //# sourceMappingURL=segment.js.map
    // Empty segments are ignored.
    // Groups are ignored.
    // Parallel segments are ignored.
    // The last segment (if it's a leaf) should be ignored.
    //# sourceMappingURL=app-paths.js.map
    // TODO-APP: add more serious validation
    // normalize the path, e.g. /(blog)/feed -> /feed
    // (.) indicates that we should match with sibling routes, so we just need to append the intercepted route to the intercepting route
    // (..) indicates that we should match at one level up, so we need to remove the last segment of the intercepting route
    // (...) will match the route segment in the root directory, so we need to use the root directory to prepend the intercepted route
    // (..)(..) indicates that we should match at two levels up, so we need to remove the last two segments of the intercepting route
    //# sourceMappingURL=interception-routes.js.map
    // Identify /[param]/ in route string
    //# sourceMappingURL=is-dynamic.js.map
    //# sourceMappingURL=querystring.js.map
    //# sourceMappingURL=runtime-config.external.js.map
    // Scheme: https://tools.ietf.org/html/rfc3986#section-3.1
    // Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3
    //" + hostname + (port ? ':' + port : '');
    // first we replace any non-encoded backslashes with forward
    // then normalize repeated forward slashes
    //nextjs.org/docs/messages/get-initial-props-as-an-instance-method for more information.';
    // when called from _app `ctx` is nested in `ctx`
    // @ts-ignore pageProps default
    //nextjs.org/docs/messages/empty-object-getInitialProps");
    //# sourceMappingURL=utils.js.map
    /*#__PURE__*/
    //# sourceMappingURL=index.js.map
    // we don't render undefined props to the DOM
    // Correctly assign boolean script attributes
    // https://github.com/vercel/next.js/pull/20748
    // Remove falsy non-zero boolean attributes so they are correctly interpreted
    // (e.g. if we set them to false, this coerces to the string "false", which the browser interprets as true)
    // Call setAttribute before, as we need to set and unset the attribute to override force async:
    // https://html.spec.whatwg.org/multipage/scripting.html#script-force-async
    //# sourceMappingURL=set-attributes-from-props.js.map
    // Only strip the nonce if `oldTag` has had it stripped. An element's nonce attribute will not
    // be stripped if there is no content security policy response header that includes a nonce.
    // meta[charset] must be first element so special case
    // it won't be inlined. In this case revert to the original behavior
    //# sourceMappingURL=head-manager.js.map
    /**
 * Given a path this function will find the pathname, query and hash and return
 * them. This is useful to parse full paths on the client side.
 * @param path A path to parse e.g. /foo/bar?id=1#hash
 */
    //# sourceMappingURL=parse-path.js.map
    //# sourceMappingURL=add-path-prefix.js.map
    /**
 * Removes the trailing slash for a given route or page path. Preserves the
 * root page. Examples:
 *   - `/foo/bar/` -> `/foo/bar`
 *   - `/foo/bar` -> `/foo/bar`
 *   - `/` -> `/`
 */
    //# sourceMappingURL=remove-trailing-slash.js.map
    //# sourceMappingURL=normalize-trailing-slash.js.map
    //# sourceMappingURL=add-base-path.js.map
    //# sourceMappingURL=route-matcher.js.map
    //nextjs.org/docs/messages/public-next-folder-conflict`;
    //nextjs.org/docs/messages/404-get-initial-props`;
    //nextjs.org/docs/messages/gssp-export`;
    //nextjs.org/docs/messages/gssp-component-member`;
    //nextjs.org/docs/messages/non-standard-node-env`;
    //nextjs.org/docs/messages/ssg-fallback-true-export`;
    /**
 * The names of the webpack layers. These layers are the primitives for the
 * webpack chunks.
 */
    /**
   * The layer for the shared code between the client and server bundles.
   */
    /**
   * The layer for server-only runtime and picking up `react-server` export conditions.
   * Including app router RSC pages and app router custom routes and metadata routes.
   */
    /**
   * Server Side Rendering layer for app (ssr).
   */
    /**
   * The browser client bundle layer for actions.
   */
    /**
   * The layer for the API routes.
   */
    /**
   * The layer for the middleware code.
   */
    /**
   * The layer for the instrumentation hooks.
   */
    /**
   * The layer for assets on the edge.
   */
    /**
   * The browser client bundle layer for App directory.
   */
    // pages api
    // app router pages and layouts
    //# sourceMappingURL=constants.js.map
    // regexp is based on https://github.com/sindresorhus/escape-string-regexp
    // see also: https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/escapeRegExp.js#L23
    //# sourceMappingURL=escape-regexp.js.map
    /**
 * Regular expression pattern used to match route parameters.
 * Matches both single parameters and parameter groups.
 * Examples:
 *   - `[[...slug]]` matches parameter group with key 'slug', repeat: true, optional: true
 *   - `[...slug]` matches parameter group with key 'slug', repeat: true, optional: false
 *   - `[[foo]]` matches parameter with key 'foo', repeat: false, optional: true
 *   - `[bar]` matches parameter with key 'bar', repeat: false, optional: false
 */
    /**
 * Parses a matched parameter from the PARAMETER_PATTERN regex to a data structure that can be used
 * to generate the parametrized route.
 * Examples:
 *   - `[...slug]` -> `{ key: 'slug', repeat: true, optional: true }`
 *   - `...slug` -> `{ key: 'slug', repeat: true, optional: false }`
 *   - `[foo]` -> `{ key: 'foo', repeat: false, optional: true }`
 *   - `bar` -> `{ key: 'bar', repeat: false, optional: false }`
 * @param param - The matched parameter to parse.
 * @returns The parsed parameter as a data structure.
 */
    // Check for parameters
    /**
 * Builds a function to generate a minimal routeKey using only a-z and minimal
 * number of characters.
 */
    // replace any non-word characters since they can break
    // the named regex
    // check if the key is still invalid and fallback to using a known
    // safe key
    // if the segment has an interception marker, make sure that's part of the regex pattern
    // this is to ensure that the route with the interception marker doesn't incorrectly match
    // the non-intercepted route (ie /app/(.)[username] should not match /app/[username])
    // Check for parameters
    //# sourceMappingURL=route-regex.js.map
    // Fall back to reading the values from the href
    // TODO: should this take priority; also need to change in the router.
    // support single-level catch-all
    // TODO: more robust handling for user-error (passing `/`)
    // Interpolate group into data URL if present
    // path delimiter escaped since they are being inserted
    // into the URL and we expect URL encoded segments
    // when parsing dynamic route params
    // did not satisfy all requirements
    // n.b. We ignore this error because we handle warning for this case in
    // development in the `<Link>` component directly.
    //# sourceMappingURL=interpolate-as.js.map
    // Translates a logical route into its pages asset path (relative from a common prefix)
    // "asset path" being its javascript file, data file, prerendered html,...
    //# sourceMappingURL=get-asset-path-from-route.js.map
    //# sourceMappingURL=add-locale.js.map
    //n' : (0, _utils.getLocationOrigin)());
    //n' : window.location.href) : globalBase;
    //# sourceMappingURL=parse-relative-url.js.map
    /**
 * Stores the Trusted Types Policy. Starts as undefined and can be set to null
 * if Trusted Types is not supported in the browser.
 */
    /**
 * Getter for the Trusted Types Policy. If it is undefined, it is instantiated
 * here or set to null if Trusted Types is not supported in the browser.
 */
    //# sourceMappingURL=trusted-types.js.map
    //# sourceMappingURL=request-idle-callback.js.map
    //# sourceMappingURL=deployment-id.js.map
    //# sourceMappingURL=encode-uri-path.js.map
    /*#__PURE__*/
    // 3.8s was arbitrarily chosen as it's what https://web.dev/interactive
    // considers as "Good" time-to-interactive. We must assume something went
    // wrong beyond this point, and then fall-back to a full page transition to
    // show the user something of value.
    // with relList.support
    // The order of property assignment here is intentional:
    // `href` should always be last:
    // The order of property assignment here is intentional.
    // 1. Setup success/failure hooks in case the browser synchronously
    //    executes when `src` is set.
    // 2. Configure the cross-origin attribute before setting `src` in case the
    //    browser begins to fetch.
    // 3. Finally, set the source and inject into the DOM in case the child
    //    must be appended for fetching to start.
    // We wait for pages to be built in dev before we start the route transition
    // timeout to prevent an un-necessary hard navigation in development.
    // Resolve a promise that times out after given amount of milliseconds.
    // Resolved, cancel the timeout
    // We wrap these checks separately for better dead-code elimination in
    // production bundles.
    // Mandatory because this is not concurrent safe:
    // Styles are handled by `style-loader` in development:
    // With HMR we might need to "reload" scripts when they are
    // disposed and readded. Executing scripts twice has no functional
    // differences
    // when this entrypoint has been resolved before
    // the route is outdated and we want to invalidate
    // this cache entry
    // we don't want to cache errors during prefetch
    // https://github.com/GoogleChromeLabs/quicklink/blob/453a661fa1fa940e2d2e044452398e38c67a98fb/src/index.mjs#L115-L118
    // License: Apache 2.0
    // Don't prefetch if using 2G or if Save-Data is enabled.
    //# sourceMappingURL=route-loader.js.map
    // Note: This file is JS because it's used by the taskfile-swc.js file, which is JS.
    // Keep file changes in sync with the corresponding `.d.ts` files.
    /**
 * These are the browser versions that support all of the following:
 * static import: https://caniuse.com/es6-module
 * dynamic import: https://caniuse.com/es6-module-dynamic-import
 * import.meta: https://caniuse.com/mdn-javascript_operators_import_meta
 */
    //# sourceMappingURL=modern-browserslist-target.js.map
    /*#__PURE__*/
    //# sourceMappingURL=constants.js.map
    /*#__PURE__*/
    //nextjs.org/docs/messages/failed-to-fetch-devpagesmanifest');
    // Webpack production
    // Turbopack production
    // Development both Turbopack and Webpack
    // TODO: Decide what should happen when fetching fails instead of asserting
    // @ts-ignore
    // TODO Remove this assertion as this could be undefined
    /** the route (file-system path) */
    //# sourceMappingURL=page-loader.js.map
    // minimal implementation MurmurHash2 hash function
    // default to 0.01% error rate as the filter compresses very well
    //# sourceMappingURL=bloom-filter.js.map
    /**
 * @license React
 * react-is.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    /*#__PURE__*/
    /*#__PURE__*/
    // Case 1: Styles for afterInteractive/lazyOnload with appDir injected via handleClientScriptLoad
    //
    // Using ReactDOM.preinit to feature detect appDir and inject styles
    // Stylesheets might have already been loaded if initialized with Script component
    // Re-inject styles here to handle scripts loaded via handleClientScriptLoad
    // ReactDOM.preinit handles dedup and ensures the styles are loaded only once
    // Case 2: Styles for afterInteractive/lazyOnload with pages injected via handleClientScriptLoad
    //
    // We use this function to load styles when appdir is not detected
    // TODO: Use React float APIs to load styles once available for pages dir
    // Script has already loaded
    // Contents of this script are already loading/loaded
    // It is possible that multiple `next/script` components all have same "src", but has different "onLoad"
    // This is to make sure the same remote script will only load once, but "onLoad" are executed in order
    /** Execute after the script first loaded */
    // Run onReady for the first time after load event
    // add cacheKey to LoadCache when load successfully
    // Casting since lib.dom.d.ts doesn't have TrustedHTML yet.
    // do not add cacheKey into LoadCache for remote script here
    // cacheKey will be added to LoadCache when it is actually loaded (see loadPromise above)
    // Load styles associated with this script
    /**
 * Load a third-party scripts in an optimized way.
 *
 * Read more: [Next.js Docs: `next/script`](https://nextjs.org/docs/app/api-reference/components/script)
 */
    // Context is available only during SSR
    /**
   * - First mount:
   *   1. The useEffect for onReady executes
   *   2. hasOnReadyEffectCalled.current is false, but the script hasn't loaded yet (not in LoadCache)
   *      onReady is skipped, set hasOnReadyEffectCalled.current to true
   *   3. The useEffect for loadScript executes
   *   4. hasLoadScriptEffectCalled.current is false, loadScript executes
   *      Once the script is loaded, the onLoad and onReady will be called by then
   *   [If strict mode is enabled / is wrapped in <OffScreen /> component]
   *   5. The useEffect for onReady executes again
   *   6. hasOnReadyEffectCalled.current is true, so entire effect is skipped
   *   7. The useEffect for loadScript executes again
   *   8. hasLoadScriptEffectCalled.current is true, so entire effect is skipped
   *
   * - Second mount:
   *   1. The useEffect for onReady executes
   *   2. hasOnReadyEffectCalled.current is false, but the script has already loaded (found in LoadCache)
   *      onReady is called, set hasOnReadyEffectCalled.current to true
   *   3. The useEffect for loadScript executes
   *   4. The script is already loaded, loadScript bails out
   *   [If strict mode is enabled / is wrapped in <OffScreen /> component]
   *   5. The useEffect for onReady executes again
   *   6. hasOnReadyEffectCalled.current is true, so entire effect is skipped
   *   7. The useEffect for loadScript executes again
   *   8. hasLoadScriptEffectCalled.current is true, so entire effect is skipped
   */
    // Run onReady if script has loaded before but component is re-mounted
    // Script has already loaded during SSR
    // For the app directory, we need React Float to preload these scripts.
    // Injecting stylesheets here handles beforeInteractive and worker scripts correctly
    // For other strategies injecting here ensures correct stylesheet order
    // ReactDOM.preinit handles loading the styles in the correct order,
    // also ensures the stylesheet is loaded only once and in a consistent manner
    //
    // Case 1: Styles for beforeInteractive/worker with appDir - handled here
    // Case 2: Styles for beforeInteractive/worker with pages dir - Not handled yet
    // Case 3: Styles for afterInteractive/lazyOnload with appDir - handled here
    // Case 4: Styles for afterInteractive/lazyOnload with pages dir - handled in insertStylesheets function
    // Before interactive scripts need to be loaded by Next.js' runtime instead
    // of native <script> tags, because they no longer have `defer`.
    // For inlined scripts, we put the content in `children`.
    // Casting since lib.dom.d.ts doesn't have TrustedHTML yet.
    /*#__PURE__*/
    // @ts-ignore
    /*#__PURE__*/
    // @ts-ignore
    //# sourceMappingURL=script.js.map
    /**
   * this used to be previously:
   *
   * `return prototype === null || prototype === Object.prototype`
   *
   * but Edge Runtime expose Object from vm, being that kind of type-checking wrongly fail.
   *
   * It was changed to the current implementation since it's resilient to serialization.
   */
    //# sourceMappingURL=is-plain-object.js.map
    /**
 * Checks whether the given value is a NextError.
 * This can be used to print a more detailed error message with properties like `code` & `digest`.
 */
    // If value is an object and already seen, replace with "[Circular]"
    // provide better error for case where `throw undefined`
    // is called in development
    //nextjs.org/docs/messages/threw-undefined');
    //nextjs.org/docs/messages/threw-undefined');
    //# sourceMappingURL=is-error.js.map
    // The next segment in the urlPaths list
    // Check if the segment matches `[something]`
    // Strip `[` and `]`, leaving only `something`
    // Strip optional `[` and `]`, leaving only `something`
    // Strip `...`, leaving only `something`
    // If the specific segment already has a slug but the slug is not `something`
    // This prevents collisions like:
    // pages/[post]/index.js
    // pages/[id]/index.js
    // Because currently multiple dynamic params on the same segment level are not supported
    // TODO: This error seems to be confusing for users, needs an error link, the description can be based on above comment.
    // slugName is kept as it can only be one particular slugName
    // nextSegment is overwritten to [[...]] so that it can later be sorted specifically
    // slugName is kept as it can only be one particular slugName
    // nextSegment is overwritten to [...] so that it can later be sorted specifically
    // slugName is kept as it can only be one particular slugName
    // nextSegment is overwritten to [] so that it can later be sorted specifically
    // If this UrlNode doesn't have the nextSegment yet we create a new child UrlNode
    // First the UrlNode is created, and every UrlNode can have only 1 dynamic segment
    // Eg you can't have pages/[post]/abc.js and pages/[hello]/something-else.js
    // Only 1 dynamic segment per nesting level
    // So in the case that is test/integration/dynamic-routing it'll be this:
    // pages/[post]/comments.js
    // pages/blog/[post]/comment/[id].js
    // Both are fine because `pages/[post]` and `pages/blog` are on the same level
    // So in this case `UrlNode` created here has `this.slugName === 'post'`
    // And since your PR passed through `slugName` as an array basically it'd including it in too many possibilities
    // Instead what has to be passed through is the upwards path's dynamic names
    // Here the `root` gets injected multiple paths, and insert will break them up into sublevels
    // Smoosh will then sort those sublevels up to the point where you get the correct route definition priority
    // We're assuming here that all the pathnames are unique, that way we can
    // sort the list and use the index as the key.
    // Sort the pathnames.
    // Map the sorted pathnames back to the original objects using the new sorted
    // index.
    //# sourceMappingURL=sorted-routes.js.map
    //# sourceMappingURL=index.js.map
    /**
 * For a given page path, this function ensures that there is no backslash
 * escaping slashes in the path. Example:
 *  - `foo\/bar\/baz` -> `foo/bar/baz`
 */
    //# sourceMappingURL=normalize-path-sep.js.map
    //# sourceMappingURL=denormalize-page-path.js.map
    // first item will be empty string from splitting at first char
    //# sourceMappingURL=normalize-locale-path.js.map
    /**
   * A matcher function that will check if a given pathname matches the path
   * given in the builder function. When the path does not match it will return
   * `false` but if it does it will return an object with the matched params
   * merged with the params provided in the second argument.
   */
    // If no pathname is provided it's not a match.
    // If the path did not match `false` will be returned.
    /**
     * If unnamed params are not allowed they must be removed from
     * the matched parameters. path-to-regexp uses "string" for named and
     * "number" for unnamed parameters.
     */
    //# sourceMappingURL=path-match.js.map
    //# sourceMappingURL=parse-url.js.map
    //# sourceMappingURL=app-router-headers.js.map
    /*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */
    //# sourceMappingURL=get-cookie-parser.js.map
    /**
 * Ensure only a-zA-Z are used for param names for proper interpolating
 * with path-to-regexp
 */
    // A-Z
    // a-z
    // remove port from host if present
    // the value needs to start with a forward-slash to be compiled
    // correctly
    // have already validated before we got to this point and validating
    // breaks compiling destinations with named pattern params from the source
    // e.g. /something:hello(.*) -> /another/:hello is broken with validation
    // since compile validation is meant for reversing and not for inserting
    // params from a separate path-regex into another
    // update any params in query values
    // the value needs to start with a forward-slash to be compiled
    // correctly
    // add path params to query if it's not a redirect and not
    // already defined in destination query or path
    // The compiler also that the interception route marker is an unnamed param, hence '0',
    // so we need to add it to the params object.
    //nextjs.org/docs/messages/invalid-multi-match");
    // Query merge order lowest priority to highest
    // 1. initial URL query values
    // 2. path segment values
    // 3. destination specified query values
    //# sourceMappingURL=prepare-destination.js.map
    //# sourceMappingURL=path-has-prefix.js.map
    //# sourceMappingURL=has-base-path.js.map
    // Can't trim the basePath if it has zero length!
    //# sourceMappingURL=remove-base-path.js.map
    // this is a proxied rewrite which isn't handled on the client
    // check if we now match a page as this means we are done
    // resolving the rewrites
    // check if we match a dynamic-route, if so we break the rewrites chain
    // we don't end after match in beforeFiles to allow
    // continuing through all beforeFiles rewrites
    // check dynamic route before processing fallback rewrites
    //# sourceMappingURL=resolve-rewrites.js.map
    // Format function modified from nodejs
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    /*#__PURE__*/
    //' + (host || '');
    //# sourceMappingURL=format-url.js.map
    //# sourceMappingURL=detect-domain-locale.js.map
    //# sourceMappingURL=remove-locale.js.map
    //# sourceMappingURL=omit.js.map
    // prevent a hydration mismatch on href for url with anchor refs
    // absolute urls can be local if they are on the same origin
    //# sourceMappingURL=is-local-url.js.map
    // we use a dummy base url for relative urls
    // repeated slashes and backslashes in the URL are considered
    // invalid and will never match a Next.js page/file
    //);
    //) or backslashes \\ are not valid in the href.");
    // Return because it cannot be routed by the Next.js router
    //n');
    // fallback to / for invalid asPath values e.g. //
    //n');
    // if the origin didn't change, it means we received a relative href
    //# sourceMappingURL=resolve-href.js.map
    //# sourceMappingURL=is-api-route.js.map
    // If the path doesn't start with the prefix we can return it as is. This
    // protects us from situations where the prefix is a substring of the path
    // prefix such as:
    //
    // For prefix: /blog
    //
    //   /blog -> true
    //   /blog/ -> true
    //   /blog/1 -> true
    //   /blogging -> false
    //   /blogging/ -> false
    //   /blogging/1 -> false
    // Remove the prefix from the path via slicing.
    // If the path without the prefix starts with a `/` we can return it as is.
    // If the path without the prefix doesn't start with a `/` we need to add it
    // back to the path to make sure it's a valid path.
    //# sourceMappingURL=remove-path-prefix.js.map
    //, '').replace(/\.json$/, '').split('/');
    // update pathname with normalized if enabled although
    // we use normalized to populate locale info still
    // If provided, use the locale route normalizer to detect the locale instead
    // of the function below.
    //# sourceMappingURL=get-next-pathname-info.js.map
    //# sourceMappingURL=add-path-suffix.js.map
    // If no locale was given or the locale is the default locale, we don't need
    // to prefix the path.
    // If the path is an API path or the path already has the locale prefix, we
    // don't need to prefix the path.
    // Add the locale prefix to the path.
    //# sourceMappingURL=add-locale.js.map
    //# sourceMappingURL=format-next-pathname-info.js.map
    //# sourceMappingURL=compare-states.js.map
    //# sourceMappingURL=is-bot.js.map
    // tslint:disable:no-console
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // remove basePath first since path prefix has to be in the order of `/${basePath}/${locale}`
    // Check only path match on client. Matching "has" should be done on server
    // where we can access more info such as headers, HttpOnly cookie, etc.
    // If url and as provided as an object representation,
    // we'll format them into the string version here.
    // handle resolving href for dynamic routes
    // eslint-disable-next-line array-callback-return
    // leverage x-matched-path to detect next.config.js rewrites
    // eslint-disable-next-line no-sequences
    // Cookies are required to be present for Next.js' SSG "Preview Mode".
    // Cookies may also be required for `getServerSideProps`.
    //
    // > `fetch` won’t send cookies, unless you set the credentials init
    // > option.
    // https://developer.mozilla.org/docs/Web/API/Fetch_API/Using_Fetch
    //
    // > For maximum browser compatibility when it comes to sending &
    // > receiving cookies, always supply the `credentials: 'same-origin'`
    // > option instead of relying on the default.
    // https://github.com/github/fetch#caveats
    /**
             * When the data response is a redirect because of a middleware
             * we do not consider it an error. The headers must bring the
             * mapped location.
             * TODO: Change the status code in the handler.
             */
    /**
             * We should only trigger a server-side transition if this was
             * caused on a client-side transition. Otherwise, we'd get into
             * an infinite loop.
             */
    // firefox
    // safari
    // when skipping client cache we wait to update
    // inflight cache until successful data response
    // this allows racing click event with fetching newer data
    // without blocking navigation when stale data is available
    // only update cache if not marked as no-cache
    // ensure we don't trigger a hard navigation to the same
    // URL as this can end up with an infinite refresh
    /**
   * Go back in history
   */
    /**
   * Go forward in history
   */
    /**
   * Performs a `pushState` with arguments
   * @param url of the route
   * @param as masks `url` for the browser
   * @param options object you can define `shallow` and other options
   */
    /**
   * Performs a `replaceState` with arguments
   * @param url of the route
   * @param as masks `url` for the browser
   * @param options object you can define `shallow` and other options
   */
    // failed to load build manifest hard navigate
    // to be safe
    //n').pathname);
    //n').pathname)) {
    // if any sub-path of as matches a dynamic filter path
    // it should be hard navigated
    // if the client router filter is matched then we trigger
    // a hard navigation
    // WARNING: `_h` is an internal option for handing Next.js client-side
    // hydration. Your app should _never_ use this property. It may change at
    // any time without notice.
    // for static pages with query params in the URL we delay
    // marking the router ready until after the query is updated
    // or a navigation has occurred
    // if a route transition is already in progress before
    // the query updating is triggered ignore query updating
    // marking route changes as a navigation start entry
    // If the url change is only related to a hash change
    // We should not proceed. We should only change the state.
    // TODO: do we need the resolved href when only a hash change?
    // The build manifest needs to be loaded before auto-static dynamic pages
    // get their query parameters to allow ensuring they can be parsed properly
    // when rewritten to
    // If we fail to resolve the page list or client-build manifest, we must
    // do a server-side transition:
    // If asked to change the current URL we should reload the current page
    // (not location.reload() but reload getInitialProps and other Next.js stuffs)
    // We also need to set the method = replaceState always
    // as this should not go into the history (That's how browsers work)
    // We should compare the new asPath to the current asPath, not the url
    // we need to resolve the as value using rewrites for dynamic SSG
    // pages to allow building the data URL correctly
    // url and as should always be prefixed with basePath by this
    // point by either next/link or router.push/replace so strip the
    // basePath from the pathname to match the pages dir 1-to-1
    // if we detected the path as app route during prefetching
    // trigger hard navigation
    // we don't attempt resolve asPath when we need to execute
    // middleware as the resolving will occur server-side
    //nextjs.org/docs/messages/invalid-relative-url-external-as");
    //nextjs.org/docs/messages/" + (shouldInterpolate ? 'href-interpolation-failed' : 'incompatible-href-as')));
    // Merge params into `query`, overwriting any specified in search
    // If the routeInfo brings a redirect we simply apply it.
    // handle redirect on client-transition
    // Use the destination from redirect without adding locale
    // check if destination is internal (resolves to a page) and attempt
    // client-navigation if it is falling back to hard navigation if
    // it's not
    // handle SSG data 404
    // ensure statusCode is still correct for static 500 page
    // when updating query information
    // shallow routing is only allowed for same page URL changes.
    // the new state that the router gonna set
    // When the page being rendered is the 404 page, we should only update the
    // query parameters. Route changes here might add the basePath when it
    // wasn't originally present. This is also why this block is before the
    // below `changeState` call which updates the browser's history (changing
    // the URL).
    // ensure statusCode is still correct for static 500 page
    // when updating query information
    // for query updates we can skip it if the state is unchanged and we don't
    // need to scroll
    // https://github.com/vercel/next.js/issues/37139
    // A hash mark # is the optional last part of a URL
    // Passing the empty string here should be safe against future changes to the method.
    // https://developer.mozilla.org/docs/Web/API/History/replaceState
    // bubble up cancellation errors
    // If we can't load the page it could be one of following reasons
    //  1. Page doesn't exists
    //  2. Page does exist in a different zone
    //  3. Internal error while loading the page
    // So, doing a hard reload is the proper way to deal with this.
    // Changing the URL doesn't block executing the current code path.
    // So let's throw a cancellation error stop the routing logic.
    /**
     * This `route` binding can change if there's a rewrite
     * so we keep a reference to the original requested route
     * so we can store the cache for it and avoid re-requesting every time
     * for shallow routing purposes.
     */
    // we don't hard error during query updating
    // as it's un-necessary and doesn't need to be fatal
    // unless it is a fallback route and the props can't
    // be loaded
    // when rendering error routes we don't apply middleware
    // effects
    // during query updating the page must match although during
    // client-transition a redirect that doesn't match a page
    // can be returned and this should trigger a hard navigation
    // which is valid for incremental migration
    // Check again the cache with the new destination.
    // If we have a match with the current route due to rewrite,
    // we can copy the existing information to the rewritten one.
    // Then, we return the information along with the matched route.
    // For non-SSG prefetches that bailed before sending data
    // we clear the cache to fetch full response
    // Only bust the data cache for SSP routes although
    // middleware can skip cache per request with
    // x-middleware-cache: no-cache as well
    // we kick off a HEAD request in the background
    // when a non-prefetch request is made to signal revalidation
    /**
   * Callback to execute before replacing router state
   * @param cb callback to be executed
   */
    // Makes sure we scroll to the provided hash if the url/hash are the same
    // If the urls are change, there's more than a hash change
    // If the hash has changed, then it's a hash only change.
    // This check is necessary to handle both the enter and
    // leave hash === '' cases. The identity case falls through
    // and is treated as a next reload.
    // Scroll to top if the hash is just `#` with no value or `#top`
    // To mirror browsers
    // Decode hash to make non-latin anchor works.
    // First we check if the element by id is found
    // If there's no element with the id, we check the `name` property
    // To mirror browsers
    /**
   * Prefetch page code, you may wait for the data during page rendering.
   * This feature only works in production!
   * @param url the href of prefetched page
   * @param asPath the as path of the prefetched page
   */
    // Prefetch is not supported in development mode because it would trigger on-demand-entries
    // Server Data Cache (full data requests)
    // Server Background Cache (HEAD requests)
    // We get state as undefined for two reasons.
    //  1. With older safari (< 8) and older chrome (< 34)
    //  2. When the URL changed with #
    //
    // In the both cases, we don't need to proceed and change the route.
    // (as it's already changed)
    // But we can simply replace the state with the new changes.
    // Actually, for (1) we don't need to nothing. But it's hard to detect that event.
    // So, doing the following for (1) does no harm.
    // __NA is used to identify if the history entry can be handled by the app-router.
    // Safari fires popstateevent when reopening the browser.
    // Make sure we don't re-render on initial load,
    // can be caused by navigating back from an external site
    // If the downstream application returns falsy, return.
    // They will then be responsible for handling the event.
    // @ts-ignore internal value not exposed on types
    // represents the current component key
    // set up the component cache (by route keys)
    // We should not keep the cache, if there's an error
    // Otherwise, this cause issues when when going back and
    // come again to the errored page.
    // Backwards compat for Router.router.events
    // TODO: Should be remove the following major version as it was never documented
    // if auto prerendered and dynamic route wait to update asPath
    // until after mount to prevent hydration mismatch
    // make sure to ignore extra popState in safari on navigating
    // back from external site
    // make sure "as" doesn't start with double slashes or else it can
    // throw an error as it's considered invalid
    //')) {
    // in order for `e.state` to work on the `onpopstate` event
    // we have to register the initial route upon initialization
    // if middleware matches we leave resolving to the change function
    // as the server needs to resolve for correct priority
    // enable custom scroll restoration handling when available
    // otherwise fallback to browser's default handling
    //# sourceMappingURL=router.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=with-router.js.map
    /* global window */
    // Export the singletonRouter and this is the public API.
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // Create public properties and methods of the router in the singletonRouter
    // Events is a static property on the router, the router doesn't have to be initialized to use it
    // Here we need to use Object.defineProperty because we need to return
    // the property assigned to the actual router
    // The value might get changed as we change routes and this is the
    // proper way to access it
    // We don't really know the types here, so we add them later instead
    //nextjs.org/docs/messages/next-router-not-mounted');
    // makes sure query is not stateful
    // Events is a static property on the router, the router doesn't have to be initialized to use it
    //# sourceMappingURL=router.js.map
    /*#__PURE__*/
    // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe
    // Only announce the path change, but not for the first load because screen
    // reader will do that automatically.
    // Every time the path changes, announce the new page’s title following this
    // priority: first the document title (from head), otherwise the first h1, or
    // if none of these exist, then the pathname from the URL. This methodology is
    // inspired by Marcy Sutton’s accessible client routing user testing. More
    // information can be found here:
    // https://www.gatsbyjs.com/blog/2019-07-11-user-testing-accessible-client-routing/
    // If the path hasn't change, we do nothing.
    /*#__PURE__*/
    // Make the announcement immediately.
    //# sourceMappingURL=route-announcer.js.map
    //# sourceMappingURL=image-config.js.map
    /*#__PURE__*/
    //# sourceMappingURL=image-config-context.shared-runtime.js.map
    /*#__PURE__*/
    //# sourceMappingURL=app-router-context.shared-runtime.js.map
    //# sourceMappingURL=hooks-client-context.shared-runtime.js.map
    // Convert router.asPath to a URLSearchParams object
    // example: /dynamic/[slug]?foo=bar -> { foo: 'bar' }
    //n').searchParams;
    //# sourceMappingURL=as-path-to-search-params.js.map
    /*#__PURE__*/
    // isAutoExport is only ever `true` on the first render from the server,
    // so reset it to `false` after we read it for the first time as `true`. If
    // we don't use the value, then we don't need it.
    // When the route is a dynamic route, we need to do more processing to
    // determine if we need to stop showing the pathname.
    // When the router is rendering the fallback page, it can't possibly know
    // the path, so return `null` here. Read more about fallback pages over
    // at:
    // https://nextjs.org/docs/api-reference/data-fetching/get-static-paths#fallback-pages
    // When `isAutoExport` is true, meaning this is a page page has been
    // automatically statically optimized, and the router is not ready, then
    // we can't know the pathname yet. Read more about automatic static
    // optimization at:
    // https://nextjs.org/docs/advanced-features/automatic-static-optimization
    // The `router.asPath` contains the pathname seen by the browser (including
    // any query strings), so it should have that stripped. Read more about the
    // `asPath` option over at:
    // https://nextjs.org/docs/api-reference/next/router#router-object
    //f');
    // fallback to / for invalid asPath values e.g. //
    /*#__PURE__*/
    //# sourceMappingURL=adapters.js.map
    // This has to be a shared module which is shared between client component error boundary and dynamic component
    //# sourceMappingURL=bailout-to-csr.js.map
    //# sourceMappingURL=report-global-error.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    // has the react-stack-bottom-frame
    // Copy all enumerable properties, e.g. digest
    // Avoid duplicate overriding stack frames
    // Avoid duplicate overriding stack frames
    // Override stack
    //# sourceMappingURL=stitched-error.js.map
    // This module can be shared between both pages router and app router
    /*#__PURE__*/
    // x-ref: https://github.com/facebook/react/pull/28736
    // In development mode, pass along the component stack to the error
    // Skip certain custom errors which are not expected to be reported on client
    //# sourceMappingURL=shared.js.map
    /*#__PURE__*/
    //# sourceMappingURL=tracer.js.map
    /*#__PURE__*/
    //# sourceMappingURL=hot-reloader-types.js.map
    // remove all leading slashes and trailing slashes
    // if an assetPrefix was '/', we return empty string
    // because it could be an unnecessary trailing slash
    // assuming assetPrefix here is a pathname-style,
    // restore the leading slash
    //# sourceMappingURL=normalized-asset-prefix.js.map
    // assetPrefix is a url
    // since normalized asset prefix is ensured to be a URL format,
    // we can safely replace the protocol
    //" + hostname + (port ? ":" + port : '') + prefix;
    //# sourceMappingURL=get-socket-url.js.map
    // While the page is reloading, don't respond to any more messages.
    // On reconnect, the server may send an empty list of changes if it was restarted.
    // Coerce into HMR_ACTION_TYPES as that is the format.
    // Either the server's session id has changed and it's a new server, or
    // it's been too long since we disconnected and we should reload the page.
    // There could be 1) unhandled server errors and/or 2) stale content.
    // Perform a hard reload of the page.
    // After 25 reconnects we'll want to reload the page as it indicates the dev server is no longer running.
    // Try again after 5 seconds
    //# sourceMappingURL=websocket.js.map
    //# sourceMappingURL=report-to-socket.js.map
    //# sourceMappingURL=http-access-fallback.js.map
    /*#__PURE__*/
    //# sourceMappingURL=redirect-status-code.js.map
    /*#__PURE__*/
    //# sourceMappingURL=redirect-error.js.map
    //# sourceMappingURL=is-next-router-error.js.map
    // Draining should never happen synchronously in case multiple handlers are
    // registered.
    // Or, if all handlers removed themselves as a result of handling the
    // event(s)
    //# sourceMappingURL=bus.js.map
    /*#__PURE__*/
    //react.dev/link/hydration-mismatch';
    // React built-in hydration diff starts with a newline, checking if length is > 1
    //# sourceMappingURL=is-hydration-error.js.map
    // throw away eval information that stacktrace-parser doesn't support
    // adapted from https://github.com/stacktracejs/error-stack-parser/blob/9f33c224b5d7b607755eb277f9d51fcdb7287e24/error-stack-parser.js#L59C33-L59C62
    //').replace(/\),.*$/g, ')');
    //' + distDir.concat(res.pop()) + url.search;
    //# sourceMappingURL=parse-stack.js.map
    /*#__PURE__*/
    /**
 * Get the type of frame line based on the location
 */
    //')) {
    //')) {
    //') || location.startsWith('https://')) {
    //')) {
    // When the location is a URL we only show the file
    // TODO: Resolve http(s) URLs through sourcemaps
    // TODO: support safari stack trace
    // Get component and file from the component stack line
    // Stop parsing the component stack if we reach a Next.js component
    //# sourceMappingURL=parse-component-stack.js.map
    // https://github.com/facebook/react/blob/main/packages/react-dom/src/__tests__/ReactDOMHydrationDiff-test.js used as a reference
    // TODO: Doesn't make sense to treat no message as a hydration error message.
    // We should bail out somewhere earlier.
    // React 18 has the `Warning: ` prefix.
    // React 19 does not.
    // remove the last %s from the message
    //# sourceMappingURL=hydration-error-info.js.map
    // Filter out duplicate errors
    // and UNHANDLED_REJECTION events might be dispatched between the
    // BEFORE_REFRESH and the REFRESH event. We want to keep those errors
    // around until the next refresh. Otherwise we run into a race
    // condition where those errors would be cleared on refresh completion
    // before they can be displayed.
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    //# sourceMappingURL=shared.js.map
    //nextjs.org/docs/messages/react-hydration-error')) {
    // If there's any extra information in the error message to display,
    // append it to the error message details property
    // The patched console.error found hydration errors logged by React
    // Append the logged warning to the error message
    // It contains the warning, component stack, server and client tag names
    //# sourceMappingURL=attach-hydration-error-state.js.map
    //# sourceMappingURL=webpack-module-path.js.map
    // TODO: merge this section into ignoredList handling
    //' || ((_source_file = source.file) == null ? void 0 : _source_file.match(/^node:/)) || ((_source_file1 = source.file) == null ? void 0 : _source_file1.match(/https?:\/\//))) {
    // Skip URL parsing for webpack internal file paths.
    // Strip the origin for same-origin scripts.
    // URLs can be valid without an `origin`, so long as they have a
    // `protocol`. However, `origin` is preferred.
    // Strip query string information as it's typically too verbose to be
    // meaningful.
    //# sourceMappingURL=stack-frame.js.map
    //# sourceMappingURL=error-source.js.map
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    //# sourceMappingURL=get-error-by-type.js.map
    // Win32:
    // Win32 UNC:
    //" + f.file;
    // If this is an internal Turbopack error we shouldn't show internal details
    // to the user. These are written to a log file instead.
    //# sourceMappingURL=node-stack-frames.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=ShadowPortal.js.map
    /*#__PURE__*/
    // Do nothing if clicking ref's element or descendent elements
    //# sourceMappingURL=use-on-click-outside.js.map
    /*#__PURE__*/
    // Make HTMLElements with `role=link` accessible to be triggered by the
    // keyboard, i.e. [Enter].
    // Always true, but we do this for TypeScript:
    // safari will force itself as the active application when a background page triggers any sort of autofocus
    // this is a workaround to only set the dialog role if the document has focus
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=Dialog.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=DialogBody.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=DialogContent.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=DialogHeader.js.map
    //# sourceMappingURL=noop-template.js.map
    /* banner width: */
    /* calc(padding + banner width offset) */
    //# sourceMappingURL=styles.js.map
    //# sourceMappingURL=index.js.map
    /*!
 * Platform.js v1.3.6
 * Copyright 2014-2020 Benjamin Tan
 * Copyright 2011-2013 John-David Dalton
 * Available under MIT license
 */
    //i.test(e)) {
    /* eslint-disable */
    // @ts-nocheck
    // Copied from https://github.com/medialize/ally.js
    // License: MIT
    // Copyright (c) 2015 Rodney Rehm
    //
    // Entrypoint: ally.js/maintain/tab-focus
    /*#__PURE__*/
    /*#__PURE__*/
    // input may be undefined, selector-tring, Node, NodeList, HTMLCollection, array of Nodes
    // yes, to some extent this is a bad replica of jQuery's constructor function
    // instanceof Node - does not work with iframes
    // walk up to the root
    // https://developer.mozilla.org/docs/Web/API/Node.nodeType
    // NOTE: Firefox 34 does not expose ShadowRoot.host (but 37 does)
    // the root is attached to a fragment node that has a host
    // [elem, elem.parent, elem.parent.parent, …, html]
    // will not contain the shadowRoot (DOCUMENT_FRAGMENT_NODE) and shadowHost
    // IE does know support parentElement on SVGElement
    // Element.prototype.matches may be available at a different name
    // https://developer.mozilla.org/en/docs/Web/API/Element/matches
    // deep clone of original platform
    // operating system
    // layout
    // browser version (not layout engine version!)
    // operating system
    // layout
    // INTERNET EXPLORERS
    // remember what had focus to restore after test
    // remember scroll positions to restore after test
    // wrap tests in an element hidden from screen readers to prevent them
    // from announcing focus, which can be quite irritating to the user
    // options.element:
    //  {string} element name
    //  {function} callback(wrapper, document) to generate an element
    // options.mutate: (optional)
    //  {function} callback(element, wrapper, document) to manipulate element prior to focus-test.
    //             Can return DOMElement to define focus target (default: element)
    // options.validate: (optional)
    //  {function} callback(element, focusTarget, document) to manipulate test-result
    // make sure we operate on a clean slate
    // create dummy element to test focusability of
    // allow callback to further specify dummy element
    // and optionally define element to focus
    // element needs to be part of the DOM to be focusable
    // test if the element with invalid tabindex can be focused
    // validate test's result
    // restore focus to what it was before test and cleanup
    // IE10 does not redirect focus to <body> when the activeElement is removed
    // restore scroll position
    // this file is overwritten by `npm run build:pre`
    /*
    Facility to cache test results in localStorage.

    USAGE:
      cache.get('key');
      cache.set('key', 'value');
 */
    // allow reading from storage to retrieve previous support results
    // even while the document does not have focus
    // if the document does not have focus when tests are executed, focus() may
    // not be handled properly and events may not be dispatched immediately.
    // This can happen when a document is reloaded while Developer Tools have focus.
    // ignore
    // ignore
    // update the cache if ally or the user agent changed (newer version, etc)
    // see https://dev.w3.org/csswg/css-scoping-1/#deep-combinator
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1117572
    // https://code.google.com/p/chromium/issues/detail?id=446051
    // old syntax supported at least up to Chrome 41
    // https://code.google.com/p/chromium/issues/detail?id=446051
    ///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7';
    // https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-usemap
    // https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-usemap
    // fixes https://github.com/medialize/ally.js/issues/35
    // Firefox loads the DataURI asynchronously, causing a false-negative
    // https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-usemap
    // fixes https://github.com/medialize/ally.js/issues/35
    // Firefox loads the DataURI asynchronously, causing a false-negative
    // invalid media file can trigger warning in console, data-uri to prevent HTTP request
    // IE9 may throw "Error: Not implemented"
    ///ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ';
    // NOTE: https://github.com/medialize/ally.js/issues/35
    // https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-usemap
    // Children of focusable elements with display:flex are focusable in IE10-11
    // fieldset[tabindex=0][disabled] should not be focusable, but Blink and WebKit disagree
    // @specification https://www.w3.org/TR/html5/disabled-elements.html#concept-element-disabled
    // @browser-issue Chromium https://crbug.com/453847
    // @browser-issue WebKit https://bugs.webkit.org/show_bug.cgi?id=141086
    // elements with display:flex are focusable in IE10-11
    // form[tabindex=0][disabled] should be focusable as the
    // specification doesn't know the disabled attribute on the form element
    // @specification https://www.w3.org/TR/html5/forms.html#the-form-element
    // NOTE: https://github.com/medialize/ally.js/issues/35
    // fixes https://github.com/medialize/ally.js/issues/20
    // https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-ismap
    // NOTE: https://github.com/medialize/ally.js/issues/35
    // https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-usemap
    // iframe must be part of the DOM before accessing the contentWindow is possible
    // create the iframe's default document (<html><head></head><body></body></html>)
    // Firefox allows *any* value and treats invalid values like tabindex="-1"
    // @browser-issue Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054
    // force layout in Chrome 49, otherwise the element won't be focusable
    /* eslint-disable no-unused-vars */
    /* eslint-enable no-unused-vars */
    // Note: IE10 on BrowserStack does not like this test
    // Note: IE10 on BrowserStack does not like this test
    // Firefox seems to be handling the object creation asynchronously and thereby produces a false negative test result.
    // Because we know Firefox is able to focus object elements referencing SVGs, we simply cheat by sniffing the user agent string
    // Every Environment except IE9 considers SWF objects focusable
    // focus the <img>, not the <div>
    // see https://jsbin.com/nenirisage/edit?html,js,console,output
    // take care of focus in validate();
    // Firefox requires this test to focus the <fieldset> first, while this is not necessary in
    // https://jsbin.com/nenirisage/edit?html,js,console,output
    // https://github.com/medialize/ally.js/issues/21
    // https://github.com/medialize/ally.js/issues/21
    // https://github.com/medialize/ally.js/issues/21
    // Constructs <foreignObject width="30" height="30"><input type="text"/></foreignObject>
    // without raising a Trusted Types violation
    //www.w3.org/2000/svg', 'foreignObject');
    // Edge13, Edge14: foreignObject focus hack
    // https://jsbin.com/kunehinugi/edit?html,js,output
    // https://jsbin.com/fajagi/3/edit?html,js,output
    // inject and focus an <input> element into the SVG element to receive focus
    // upon disabling the activeElement, IE and Edge
    // will not shift focus to <body> like all the other
    // browsers, but instead find the first focusable
    // ancestor and shift focus to that
    // clean up
    //www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">' + element + '</svg>';
    // Safari 8's querySelector() can't identify foreignObject, but getElementsByTagName() can
    // Firefox seems to be handling the SVG-document-in-iframe creation asynchronously
    // and thereby produces a false negative test result. Thus the test is pointless
    // and we resort to UA sniffing once again.
    // see http://jsbin.com/vunadohoko/1/edit?js,console,output
    // Firefox allows *any* value and treats invalid values like tabindex="-1"
    // @browser-issue Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054
    // IE9 has a problem replacing TBODY contents with innerHTML.
    // https://stackoverflow.com/a/8097055/515124
    // element.innerHTML = '<tr><td>cell</td></tr>';
    // invalid media file can trigger warning in console, data-uri to prevent HTTP request
    // IE9 may throw "Error: Not implemented"
    // https://jsbin.com/vafaba/3/edit?html,js,console,output
    // https://www.w3.org/TR/html5/infrastructure.html#rules-for-parsing-integers
    // NOTE: all browsers agree to allow trailing spaces as well
    // Edge 14 has a capitalization problem on SVG elements,
    // see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/9282058/
    // older Firefox and Internet Explorer don't support tabindex on SVG elements
    // @browser-issue Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054
    // an element matches the tabindex selector even if its value is invalid
    // IE11 parses tabindex="" as the value "-32768"
    // @browser-issue Trident https://connect.microsoft.com/IE/feedback/details/1072965
    // Edge 14 has a capitalization problem on SVG elements,
    // see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/9282058/
    // @browser-issue Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054
    // this is a shared utility file for focus-relevant.js and tabbable.js
    // separate testing of this file's functions is not necessary,
    // as they're implicitly tested by way of the consumers
    // https://www.w3.org/TR/1999/WD-css3-userint-19990916#user-modify
    // https://github.com/medialize/ally.js/issues/17
    // Internet Explorer advances scrollable containers and bodies to focusable
    // only if the scrollable container is <div> or <span> - this does *not*
    // happen for <section>, <article>, …
    // a ShadowDOM host receives focus when the focus moves to its content
    // input[type="hidden"] supports.cannot be focused
    // specifics filtered in is/focusable
    // specifics filtered in is/focusable
    // specifics filtered in is/focusable
    // object[usemap] is not focusable in any browser
    // object[type="image/svg+xml"] is not focusable in Internet Explorer
    // object[type="application/x-shockwave-flash"] is not focusable in Internet Explorer 9
    // browsing context containers
    // embed is considered focus-relevant but not focusable
    // see https://github.com/medialize/ally.js/issues/82
    // also see CSS property user-modify below
    // Gecko, Trident and Edge do not allow an image with an image map and tabindex to be focused,
    // it appears the tabindex is overruled so focus is still forwarded to the <map>
    // IE10-11 supports.can focus <table> and <td>
    // IE10-11 supports.can focus <fieldset>
    // <use> cannot be made focusable by adding a tabindex attribute anywhere but Blink and WebKit
    // <use> can only be made focusable in Blink and WebKit
    // Firefox 51 and 52 treat any natively tabbable SVG element with
    // tabindex="-1" as tabbable and everything else as inert
    // see https://bugzilla.mozilla.org/show_bug.cgi?id=1302340
    // Internet Explorer understands the focusable attribute introduced in SVG Tiny 1.2
    // Internet Explorer understands the focusable attribute introduced in SVG Tiny 1.2
    // https://www.w3.org/TR/html5/editing.html#sequential-focus-navigation-and-the-tabindex-attribute
    // IE10-11 considers the <img> in <a href><img ismap> focusable
    // https://github.com/medialize/ally.js/issues/20
    // https://github.com/medialize/ally.js/issues/21
    // Internet Explorer does will consider the scrollable area focusable
    // if the element is a <div> or a <span> and it is in fact scrollable,
    // regardless of the CSS overflow property
    // Firefox requires proper overflow setting, IE does not necessarily
    // https://developer.mozilla.org/docs/Web/CSS/overflow
    // elements with display:flex are focusable in IE10-11
    // scrollable bodies are focusable Internet Explorer
    // https://github.com/medialize/ally.js/issues/21
    // Children of focusable elements with display:flex are focusable in IE10-11
    // NOTE: elements marked as inert are not focusable,
    // but that property is not exposed to the DOM
    // https://www.w3.org/TR/html5/editing.html#inert
    // bind exceptions to an iterator callback
    // provide isFocusRelevant(context) as default iterator callback
    // attempt to use native or polyfilled Array#findIndex first
    // shortcut if the array is empty
    // otherwise loop over array
    // works on <object> and <iframe>
    // works on <object> and <iframe>
    // works on <object> and <iframe> that contain SVG
    // SecurityError: Failed to read the 'contentDocument' property from 'HTMLObjectElement'
    // also IE may throw member not found exception e.g. on <object type="image/png">
    // if there is no parent browsing context,
    // we're not going to get a frameElement either way
    // see https://developer.mozilla.org/docs/Web/API/Window/frameElement
    // does not work within <embed> anywhere, and not within in <object> in IE
    // https://www.w3.org/TR/html5/rendering.html#being-rendered
    // <area> is not rendered, but we *consider* it visible to simplfiy this function's usage
    // display:none is not visible (optimized away at layout)
    // https://github.com/jquery/jquery-ui/blob/master/ui/core.js#L109-L114
    // NOTE: a nested element can reverse visibility:hidden|collapse by explicitly setting visibility:visible
    // NOTE: visibility can be ["", "visible", "hidden", "collapse"]
    // there is no hidden element
    // there is no visible element (but a hidden element)
    // there is a hidden element and it's closer than the first visible element
    // there may be a hidden element, but the closest element is visible
    // "content children" of a closed details element are not visible
    // in Internet Explorer <audio> has a default display: none, where others have display: inline
    // but IE allows focusing <audio style="display:none">, but not <div display:none><audio>
    // this is irrelevant to other browsers, as the controls attribute is required to make <audio> focusable
    // elements within a browsing context are affected by the
    // browsing context host element's visibility and tabindex
    // bind exceptions to an iterator callback
    // provide isVisible(context) as default iterator callback
    // apparently getElementsByName() also considers id attribute in IE & opera
    // https://developer.mozilla.org/docs/Web/API/Document/getElementsByName
    // NOTE: image maps can also be applied to <object> with image content,
    // but no browser supports this at the moment
    // HTML5 specifies HTMLMapElement.images to be an HTMLCollection of all
    // <img> and <object> referencing the <map> element, but no browser implements this
    //   https://www.w3.org/TR/html5/embedded-content-0.html#the-map-element
    //   https://developer.mozilla.org/docs/Web/API/HTMLMapElement
    // the image must be valid and loaded for the map to take effect
    // https://developer.mozilla.org/docs/Web/HTML/Element/map
    // https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-usemap
    // https://github.com/jquery/jquery-ui/blob/master/ui/core.js#L88-L107
    // Blink and WebKit do not consider <area tabindex="-1" href="#void"> focusable
    // Firefox only allows fully loaded images to reference image maps
    // https://stereochro.me/ideas/detecting-broken-images-js
    // Firefox supports.can focus area elements even if they don't have an href attribute
    // Internet explorer supports.can focus area elements without href if either
    // the area element or the image element has a tabindex attribute
    // https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-usemap
    // https://www.w3.org/TR/html5/disabled-elements.html#concept-element-disabled
    // treat ally's element/disabled like the DOM native element.disabled
    // non-form elements do not support the disabled attribute
    // the element itself is disabled
    // a parental <fieldset> is disabld and inherits the state onto this element
    // a parental <form> is disabld and inherits the state onto this element
    // iframe[tabindex="-1"] and object[tabindex="-1"] inherit the
    // tabbable demotion onto elements of their browsing contexts
    // Firefox cannot focus, but tab to: label[tabindex=0]
    // SVG Elements were keyboard focusable but not script focusable before Firefox 51.
    // Firefox 51 added the focus management DOM API (.focus and .blur) to SVGElement,
    // see https://bugzilla.mozilla.org/show_bug.cgi?id=778654
    // any focusable child of <svg> cannot be focused, but tabbed to
    // bind exceptions to an iterator callback
    // provide isOnlyTabbable(context) as default iterator callback
    // embed is considered focus-relevant but not focusable
    // see https://github.com/medialize/ally.js/issues/82
    // ShadowDOM host elements *may* receive focus
    // even though they are not considered focuable
    // <label tabindex="0"> is only tabbable in Firefox, not script-focusable
    // there's no way to make an element focusable other than by adding a tabindex,
    // and focus behavior of the label element seems hard-wired to ignore tabindex
    // in some browsers (like Gecko, Blink and WebKit)
    // Internet Explorer understands the focusable attribute introduced in SVG Tiny 1.2
    // Gecko, Trident and Edge do not allow an image with an image map and tabindex to be focused,
    // it appears the tabindex is overruled so focus is still forwarded to the <map>
    // all <area>s are considered relevant,
    // but only the valid <area>s are focusable
    // some elements may be keyboard focusable, but not script focusable
    // elements that are not rendered, cannot be focused
    // WebKit and Blink can focus content in hidden <iframe> and <object>
    // Blink allows focusing the object element, even if it has visibility: hidden;
    // @browser-issue Blink https://code.google.com/p/chromium/issues/detail?id=586191
    // WebKit can not focus content in <object> if it doesn't have dimensions
    // bind exceptions to an iterator callback
    // provide isFocusRelevant(context) as default iterator callback
    // see https://developer.mozilla.org/docs/Web/API/NodeFilter
    // return ShadowRoot elements regardless of them being focusable,
    // so they can be walked recursively later
    // finds elements that could have been found by document.querySelectorAll()
    // IE requires a function, Browsers require {acceptNode: function}
    // see http://www.bennadel.com/blog/2607-finding-html-comment-nodes-in-the-dom-using-treewalker.htm
    // see https://developer.mozilla.org/docs/Web/API/Document/createTreeWalker
    // add context if requested and focusable
    // NOTE: this selector MUST *never* be used directly,
    // https://www.w3.org/TR/html5/editing.html#sequential-focus-navigation-and-the-tabindex-attribute
    // IE11 supports.can focus <table> and <td>
    // IE11 supports.can focus <fieldset>
    // Namespace problems of [xlink:href] explained in https://stackoverflow.com/a/23047888/515124
    // svg a[*|href] does not match in IE9, but since we're filtering
    // through is/focusable we can include all <a> from SVG
    // may behave as 'svg, svg *,' in chrome as *every* svg element with a focus event listener is focusable
    // navigational elements
    // validity determined by is/valid-area.js
    // validity determined by is/disabled.js
    // browsing context containers
    // interactive content
    // validity determined by is/valid-tabindex.js
    // editing hosts
    // where ShadowDOM is supported, we also want the shadowed focusable elements (via ">>>" or "/deep/")
    // the selector potentially matches more than really is focusable
    // add context if requested and focusable
    // Internet Explorer 11 considers fieldset, table, td focusable, but not tabbable
    // Internet Explorer 11 considers body to have [tabindex=0], but does not allow tabbing to it
    // External keyboard support worked fine in CHrome 42, but stopped working in Chrome 45.
    // The on-screen keyboard does not provide a way to focus the next input element (like iOS does).
    // That leaves us with no option to advance focus by keyboard, ergo nothing is tabbable (keyboard focusable).
    // iOS only does not consider anything from another browsing context keyboard focusable
    // iframe[tabindex="-1"] and object[tabindex="-1"] inherit the
    // tabbable demotion onto elements of their browsing contexts
    // Blink and WebKit consider elements in hidden browsing contexts focusable, but not tabbable
    // Webkit and Blink don't consider anything in <object> tabbable
    // Blink fixed that fixed in Chrome 54, Opera 41
    // Edge 14+ considers <a xlink:href="…" tabindex="-1"> keyboard focusable
    // if the element is in a nested browsing context
    // NOTE: Firefox 31 considers [contenteditable] to have [tabindex=-1], but allows tabbing to it
    // fixed in Firefox 40 the latest - https://bugzilla.mozilla.org/show_bug.cgi?id=1185657
    // tabbing can still be disabled by explicitly providing [tabindex="-1"]
    // iOS only considers a hand full of elements tabbable (keyboard focusable)
    // this holds true even with external keyboards
    // In Chrome and Safari 9 the <use> element is keyboard focusable even for tabindex="-1"
    // in Trident and Gecko SVGElement does not handle the tabIndex property properly
    // Firefox 51 and 52 treat any natively tabbable SVG element with
    // tabindex="-1" as tabbable and everything else as inert
    // see https://bugzilla.mozilla.org/show_bug.cgi?id=1302340
    // older Internet Explorers consider <svg> keyboard focusable
    // unless they have focsable="false", but then they wouldn't
    // be focusable and thus not even reach this filter
    // elements that have [focusable] are automatically keyboard focusable regardless of the attribute's value
    // elements that have [focusable] are automatically keyboard focusable regardless of the attribute's value
    // In Internet Explorer the <audio> element is focusable, but not tabbable, and tabIndex property is wrong
    // In Chrome <audio controls tabindex="-1"> remains keyboard focusable
    // In Internet Explorer and Edge the <video> element is focusable, but not tabbable, and tabIndex property is wrong
    // In Chrome and Firefox <video controls tabindex="-1"> remains keyboard focusable
    // In all Blink and WebKit based browsers <embed> and <object> are never keyboard focusable, even with tabindex="0" set
    // In Internet Explorer all iframes are only focusable
    // In WebKit, Blink and Gecko iframes may be tabbable depending on content.
    // Since we can't reliably investigate iframe documents because of the
    // SameOriginPolicy, we're declaring everything only focusable.
    // Firefox considers scrollable containers keyboard focusable,
    // even though their tabIndex property is -1
    // IE and Edge degrade <area> to script focusable, if the image
    // using the <map> has been given tabindex="-1"
    // prevent being swallowed by the overzealous isScrollableContainer() below
    // IE considers scrollable containers script focusable only,
    // even though their tabIndex property is 0
    // IE considers scrollable bodies script focusable only,
    // Children of focusable elements with display:flex are focusable in IE10-11,
    // even though their tabIndex property suggests otherwise
    // value of tabindex takes precedence
    // https://www.w3.org/WAI/PF/aria-practices/#focus_tabindex
    // bind exceptions to an iterator callback
    // provide isTabbable(context) as default iterator callback
    // sorts a list of elements according to their order in the DOM
    // find the first element that comes AFTER the target element
    // instead of mutating the elements list directly, remember position and map
    // to inject later, when we can do this more efficiently
    // element is not in target list
    // there is no successor in the tabsequence,
    // meaning the image must be the last element
    // allow the consumer to replace the injected element
    // we can't inject zero elements
    // remember the number of elements we have already injected
    // so we account for the caused index offset
    // make sure that we insert the elements in sequence,
    // otherwise the offset compensation won't work
    // array.splice has an annoying function signature :(
    // operate on a copy so we don't mutate the original array
    // make sure the elements we're injecting are provided in DOM order
    // find the offsets within the target array (list) at which to inject
    // each individual element (from elements)
    // actually inject the elements into the target array at the identified positions
    // the map is not defined within the context, so we
    // have to go find it elsewhere in the document
    // if there is no map, the img[usemap] wasn't doing anything anyway
    // remove all <area> elements from the elements list,
    // but put them the map for later retrieval
    // images - unless they are focusable themselves, likely not
    // part of the elements list, so we'll have to find them and
    // sort them into the elements list manually
    // remove all <area> elements from the elements list,
    // but put them the map for later retrieval
    // the context does not contain any <area>s so no need
    // to replace anything, just remove any maps
    // document context we're working with
    // callback that sorts an array of elements
    // reference to create unique IDs for each ShadowHost
    // reference map for child-ShadowHosts of a ShadowHost
    // reference map for child-ShadowHost of the document
    // reference map for ShadowHosts
    // reference map for tabbable elements of a ShadowHost
    // remember which hosts we have to sort within later
    // make the ShadowHost identifiable (see cleanup() for undo)
    // hosts may contain other hosts
    // remove those identifers we put on the ShadowHost to avoid using Map()
    // no shadowed content found, no need to continue
    // https://developer.mozilla.org/docs/Web/API/HTMLElement.tabIndex
    // elements with tabIndex "0" (including tabbableElements without tabIndex) should be navigated in the order they appear.
    // elements with a positive tabIndex:
    //   Elements that have identical tabIndexes should be navigated in the order they appear.
    //   Navigation proceeds from the lowest tabIndex to the highest tabIndex.
    // NOTE: sort implementation may be unstable and thus mess up DOM order,
    // that's why we build a map that's being sorted instead. If we were able to rely
    // on a stable sorting algorithm, sortTabindex() could be as simple as
    // elements.sort(function(a, b) { return a.tabIndex - b.tabIndex; });
    // at this time Chrome does not use a stable sorting algorithm
    // see http://blog.rodneyrehm.de/archives/14-Sorting-Were-Doing-It-Wrong.html#stability
    // NOTE: compareDocumentPosition seemed like more overhead than just sorting this with buckets
    // https://developer.mozilla.org/docs/Web/API/Node.compareDocumentPosition
    // in Trident and Gecko SVGElement does not know about the tabIndex property
    // extract elements that don't need sorting
    // create sortable bucket for dom-order-preservation of elements with the same tabIndex
    // maintain a list of unique tabIndexes
    // sort element into the proper bucket
    // element moved to sorting map, so not "normal" anymore
    // sort the tabindex ascending,
    // then resolve them to their appropriate buckets,
    // then flatten the array of arrays to an array
    // Some browsers sort <area> in DOM order, some place the <area>s
    // where the <img> referecing them would've been in DOM order.
    // https://github.com/medialize/ally.js/issues/5
    // sort tabindex localized to shadow dom
    // see https://github.com/medialize/ally.js/issues/6
    // if we include the context itself, it has to be the first
    // element of the sequence
    // codes mostly cloned from https://github.com/keithamus/jwerty/blob/master/jwerty.js
    // deliberately not exposing characters like <,.-#* because they vary *wildly*
    // across keyboard layouts and may cause various problems
    // (e.g. "*" is "Shift +" on a German Mac keyboard)
    // (e.g. "@" is "Alt L" on a German Mac keyboard)
    // Element Focus
    // Navigation
    // Action
    // Modifier
    // in firefox: 224
    // on mac (chrome): meta-left=91, meta-right=93
    // on win (IE11): meta-left=91, meta-right=92
    // Content Manipulation
    // the same logical key may be identified through different keyCodes
    // Function keys (112 - 137)
    // NOTE: not every keyboard knows F13+
    // Number keys (48-57, numpad 96-105)
    // NOTE: not every keyboard knows num-0+
    // Latin characters (65 - 90)
    // we've already covered the all-in operator
    // we want the modifier pressed
    // we don't care if the modifier is pressed
    // we do not want the modifier pressed
    // compensate for the modifier's operator
    // returns true on match
    // returns true on mismatch
    // Node.compareDocumentPosition is available since IE9
    // see https://developer.mozilla.org/docs/Web/API/Node.compareDocumentPosition
    // callback returns true when element is contained by parent or is the parent suited for use with Array.some()
    /*
  USAGE:
    var isChildOf = getParentComparator({parent: someNode});
    listOfElements.some(isChildOf)
*/
    // Bug 286933 - Key events in the autocomplete popup should be hidden from page scripts
    // @browser-issue Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=286933
    // ignore elements within the exempted sub-trees
    // Make sure the supports tests are run before intercepting the Tab key,
    // or IE10 and IE11 will fail to process the first Tab key event. Not
    // limiting this warm-up to IE because it may be a problem elsewhere, too.
    // Safari on OSX may require ALT+TAB to reach links,
    // see https://github.com/medialize/ally.js/issues/146
    // we're completely taking over the Tab key handling
    // wrap around first to last, last to first
    // find current position in tabsequence
    // redirect to first as we're not in our tabsequence
    // shift focus to previous/next element in the sequence
    //# sourceMappingURL=maintain--tab-focus.js.map
    //# sourceMappingURL=body-locker.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=Overlay.js.map
    //# sourceMappingURL=index.js.map
    //# sourceMappingURL=magic-identifier.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    // If link matcher is present but the link doesn't match, don't turn it into a link
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=index.js.map
    //# sourceMappingURL=use-open-in-editor.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=EditorLink.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    // Grab the lines at the end containing the files
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=Terminal.js.map
    //# sourceMappingURL=index.js.map
    //# sourceMappingURL=styles.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //nextjs.org/docs/messages/version-staleness",
    //# sourceMappingURL=VersionStalenessInfo.js.map
    //# sourceMappingURL=index.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=BuildError.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=CloseIcon.js.map
    /*#__PURE__*/
    // Unlock focus for browsers like Firefox, that break all user focus if the
    // currently focused item becomes disabled.
    // Always true, but we do this for TypeScript:
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=LeftRightDialogHeader.js.map
    //# sourceMappingURL=styles.js.map
    //# sourceMappingURL=index.js.map
    //# sourceMappingURL=styles.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=Toast.js.map
    //# sourceMappingURL=index.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // Strip leading spaces out of the code frame:
    // Find the minimum length of leading spaces after `|` in the code frame
    // When the minimum length of leading spaces is greater than 1, remove them
    // from the code frame to help the indentation looks better when there's a lot leading spaces.
    // TODO: make the caret absolute
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=CodeFrame.js.map
    //# sourceMappingURL=index.js.map
    // TODO: ability to expand resolved frames
    // TODO: render error or external indicator
    // Format method to strip out the webpack layer prefix.
    // e.g. (app-pages-browser)/./app/page.tsx -> ./app/page.tsx
    //, '');
    // Formatted file source could be empty. e.g. <anonymous> will be formatted to empty string,
    // we'll skip rendering the frame in this case.
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=CallStackFrame.js.map
    /*#__PURE__*/
    /* hide but text are still accessible in DOM */
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // if the default displayed ignored frames count is equal equal to the total frames count, hide the button
    /*#__PURE__*/
    //# sourceMappingURL=index.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=CollapseIcon.js.map
    // For text mismatch, mismatched text will take 2 rows, so we display 4 rows of component stack
    // React 19 unified mismatch
    // trim spaces after sign
    /*#__PURE__*/
    // If it's matched userland component or it's ... we will keep the component stack in diff
    /*#__PURE__*/
    /*#__PURE__*/
    // In general, if it's not collapsed, show the whole diff
    /*#__PURE__*/
    // [child index, parent index]
    // Reverse search for the child tag
    // Start searching parent tag from child tag above
    // When component is the server or client tag name, highlight it
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // Hydration mismatch: text or text-tag
    // hydration type is "text", represent [server content, client content]
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // hydration type is "text-in-tag", represent [parent tag, mismatch content]
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=component-stack-pseudo-html.js.map
    /*#__PURE__*/
    // This would be simpler with useActionState but we need to support React 18 here.
    // React 18 also doesn't have async transitions.
    // TODO: `dispatch` from `useActionState` is not reactive.
    // Remove from dependencies once https://github.com/facebook/react/pull/29665 is released.
    // Additional console.error to get the stack.
    // Assign default icon
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=index.js.map
    // Inline this helper to avoid widely used across the codebase,
    // as for this feature the Chrome detector doesn't need to be super accurate.
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //nextjs.org/docs/app/building-your-application/configuring/debugging#server-side-code",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=nodejs-inspector.js.map
    // To distinguish from React error.digest, we use a different symbol here to determine if the error is from console.error or unhandled promise rejection.
    //# sourceMappingURL=console-error.js.map
    //nextjs.org');
    // If the error is:
    // - hydration warning
    // - captured console error or unhandled rejection
    // skip displaying the error name
    // If it's replayed error, display the environment name
    /*#__PURE__*/
    /*#__PURE__*/
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    // Ensure errors are displayed in the order they occurred in:
    // Check for duplicate errors
    // We don't care if the desired error changed while we were resolving,
    // thus we're not tracking it using a ref. Once the work has been done,
    // we'll store it.
    // TODO: handle this, though an edge case
    // Reset component state when there are no errors to be displayed.
    // This should never happen, but lets handle it.
    // This component shouldn't be rendered with no errors, but if it is, let's
    // handle it gracefully by rendering nothing.
    // TODO: better loading state
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // remove the %s for stack
    // If there's still a %s at the end, remove it
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //nextjs.org/docs/messages/react-hydration-error"
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=Errors.js.map
    /*#__PURE__*/
    // accidentally excluded in some versions.
    // Explicit type is needed to avoid the generated `.d.ts` having a wide return type that could be specific to the `@types/react` version.
    // The component has to be unmounted or else it would continue to error
    // we have to render the html shell otherwise the shadow root will not be able to attach
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=ErrorBoundary.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=Base.js.map
    //# sourceMappingURL=styles.js.map
    //# sourceMappingURL=styles.js.map
    //# sourceMappingURL=styles.js.map
    /*#__PURE__*/
    //# sourceMappingURL=ComponentStyles.js.map
    /*#__PURE__*/
    /* the direction property is not reset by 'all' */
    /*!\n         * Bootstrap Reboot v4.4.1 (https://getbootstrap.com/)\n         * Copyright 2011-2019 The Bootstrap Authors\n         * Copyright 2011-2019 Twitter, Inc.\n         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n         * Forked from Normalize.css, licensed MIT (https://github.com/necolas/normalize.css/blob/master/LICENSE.md)\n         */
    /*#__PURE__*/
    //# sourceMappingURL=CssReset.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    // TODO: special handling
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=ReactDevOverlay.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    // A non-error was thrown, we don't have anything to show. :-(
    // Skip ModuleBuildError and ModuleNotFoundError, as it will be sent through onBuildError callback.
    // This is to avoid same error as different type showing up on client to cause flashing.
    // See https://github.com/facebook/react/blob/d50323eb845c5fde0d720cae888bf35dedd05506/packages/react-reconciler/src/ReactFiberErrorLogger.js#L78
    // A non-error was thrown, we don't have anything to show. :-(
    //# sourceMappingURL=client.js.map
    /* global location */
    // imports polyfill from `@next/polyfill-module` after build.
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // We need to replace the router state if:
    // - the page was (auto) exported and has a query string or search (hash)
    // - it was auto exported and is a dynamic route (to provide params)
    // - if it is a client-side skeleton (fallback render)
    // - if middleware matches the current page (may have rewrite params)
    // - if rewrites in next.config.js match (may have rewrite params)
    // update query on mount for exported pages
    // @ts-ignore
    // WARNING: `_h` is an internal option for handing Next.js
    // client-side hydration. Your app should _never_ use this property.
    // It may change at any time without notice.
    // Fallback pages must trigger the data fetch, so the transition is
    // not shallow.
    // Other pages (strictly updating query) happens shallowly, as data
    // requirements would already be present.
    // If we call scrollIntoView() in here without a setTimeout
    // it won't scroll properly.
    /*#__PURE__*/
    // This makes sure this specific lines are removed in production
    //eslint-disable-line
    // Initialize next/config with the environment configuration
    // make sure not to attempt stripping basePath for 404s
    // Defer page registration for another tick. This will increase the overall
    // latency in hydrating the page, but reduce the total blocking time.
    /*#__PURE__*/
    // Create a memoized value for next/navigation router context.
    /*#__PURE__*/
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // This method handles all runtime and debug errors.
    // 404 and 500 errors are special kind of errors
    // and they are still handle via the main render method.
    // In development runtime errors are caught by our overlay
    // In production we catch runtime errors using componentDidCatch which will trigger renderError
    // A Next.js rendering runtime error is always unrecoverable
    // FIXME: let's make this recoverable (error in GIP client-transition)
    // We need to render an empty <App> so that the `<ReactDevOverlay>` can
    // render itself.
    // TODO: Fix disabled eslint rule
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    // Dummy component that we render as a child of Root so that we can
    // toggle the correct styles before the page is rendered.
    // We use `useLayoutEffect` to guarantee the callback is executed
    // as soon as React flushes the update.
    // On initial render a hydrate should always happen
    // mark end of hydration
    // Old versions of Safari don't return `PerformanceMeasure`s from `performance.measure()`
    // mark end of render
    // mark start of hydrate/render
    // Unlike with createRoot, you don't need a separate root.render() call here
    // TODO: Remove shouldHydrate variable when React 18 is stable as it can depend on `reactRoot` existing
    // We use `useLayoutEffect` to guarantee the callbacks are executed
    // as soon as React flushes the update
    // lastAppProps has to be set before ReactDom.render to account for ReactDom throwing an error.
    // This function has a return type to ensure it doesn't start returning a
    // Promise. It should remain synchronous.
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // We catch runtime errors using componentDidCatch which will trigger renderError
    /*#__PURE__*/
    // if an error occurs in a server-side page (e.g. in getInitialProps),
    // skip re-rendering the error page client-side as data-fetching operations
    // will already have been done on the server and NEXT_DATA contains the correct
    // data for straight-forward hydration of the error page
    // renderingProps.Component might be undefined if there is a top/module-level error
    // bubble up cancelation errors
    // Ensure this error is displayed in the overlay in development
    // Combines timestamp with random number for unique ID
    // error, so we need to skip waiting for the entrypoint.
    // This catches errors like throwing in the top level of a module
    // Server-side runtime errors need to be re-thrown on the client-side so
    // that the overlay is rendered.
    // Generate a new error object. We `throw` it because some browsers
    // will set the `stack` when thrown, and we want to ensure ours is
    // not overridden when we re-throw it below.
    // In development, error the navigation API usage in runtime,
    // since it's not allowed to be used in pages router as it doesn't contain error boundary like app router.
    //# sourceMappingURL=index.js.map
    /**
MIT License

Copyright (c) 2015-present, Facebook, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
    /*#__PURE__*/
    // This file is based on https://github.com/facebook/create-react-app/blob/7b1a32be6ec9f99a6c9a3c66813f3ac09c4736b9/packages/react-dev-utils/formatWebpackMessages.js
    // It's been edited to remove chalk and CRA-specific logic
    // Cleans up webpack error messages.
    // TODO: Replace this once webpack 5 is stable
    // Strip Webpack-added headers off errors/warnings
    // https://github.com/webpack/webpack/blob/master/lib/ModuleError.js
    // Transform parsing error into syntax error
    // TODO: move this to our ESLint formatter?
    // Smoosh syntax errors (commonly found in CSS)
    // Clean up export errors
    // Remove leading newline
    // Cleans up verbose "module not found" messages for files and packages.
    // Add helpful message for users trying to use Sass for the first time
    // ./file.module.scss (<<loader info>>) => ./file.module.scss
    //nextjs.org/docs/messages/install-sass';
    // dispose of unhelpful stack trace
    // dispose of unhelpful stack trace following missing sass module
    // Internal stacks are generally useless so we strip them... with the
    // exception of stacks containing `webpack:` because they're normally
    // from user code generated by Webpack. For more information see
    // https://github.com/facebook/create-react-app/pull/1050
    // at ... ...:x:y
    // at <anonymous>
    // Remove duplicated newlines
    // Reassemble the message
    // Reorder errors to put the most relevant ones first.
    // Move the reactServerComponentsError to the top if it exists
    // If there are any syntax errors, show just them.
    //# sourceMappingURL=format-webpack-messages.js.map
    // TODO this won't capture changes to CSS since they don't result in a "merged" update
    //# sourceMappingURL=extract-modules-from-turbopack-message.js.map
    //# sourceMappingURL=runtime-error-handler.js.map
    // TODO: Remove use of `any` type. Fix no-use-before-define violations.
    /* eslint-disable @typescript-eslint/no-use-before-define */
    /**
 * MIT License
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
    // This file is a modified version of the Create React App HMR dev client that
    // can be found here:
    // https://github.com/facebook/create-react-app/blob/v3.4.1/packages/react-dev-utils/webpackHotDevClient.js
    /*#__PURE__*/
    /*#__PURE__*/
    // Remember some state related to hot module replacement.
    // Clean up outdated compile errors, if any.
    // Successful compilation.
    // Attempt to apply hot updates or reload.
    // Compilation with warnings (e.g. ESLint).
    // Print warnings to the console.
    // Attempt to apply hot updates or reload.
    // Compilation with errors (e.g. syntax error or missing modules).
    // "Massage" webpack messages.
    // Only show the first error.
    // Also log them to the console.
    // Do not attempt to reload now.
    // We will reload on next success instead.
    // Only trigger a pending state if we have updates to apply
    // (cf. onFastRefresh)
    // Whether the page (tab) was hidden at the time the event occurred.
    // This can impact the accuracy of the event's timing.
    // There is a newer version of the code available.
    // Update last known compilation hash.
    /** Handles messages from the sevrer for the Pages Router. */
    // Use turbopack message for analytics, (still need built for webpack)
    // Is undefined when it's a 'built' event
    // Is there a newer version of this code available?
    /* globals __webpack_hash__ */
    // __webpack_hash__ is the hash of the current compilation.
    // It's a global variable injected by Webpack.
    // Webpack disallows updates in other states.
    // @ts-expect-error TODO: module.hot exists but type needs to be added. Can't use `as any` here as webpack parses for `module.hot` calls.
    // @ts-expect-error TODO: module.hot exists but type needs to be added. Can't use `as any` here as webpack parses for `module.hot` calls.
    // @ts-expect-error TODO: module.hot exists but type needs to be added. Can't use `as any` here as webpack parses for `module.hot` calls.
    // Attempt to update code on the fly, fall back to a hard reload.
    // @ts-expect-error TODO: module.hot exists but type needs to be added. Can't use `as any` here as webpack parses for `module.hot` calls.
    // HotModuleReplacementPlugin is not in Webpack configuration.
    // window.location.reload();
    // Maybe we want to do something.
    // While we were updating, there was a new update! Do it again.
    // However, this time, don't trigger a pending refresh state.
    // https://webpack.js.org/api/hot-module-replacement/#check
    // @ts-expect-error TODO: module.hot exists but type needs to be added. Can't use `as any` here as webpack parses for `module.hot` calls.
    /* autoApply */
    // @ts-expect-error TODO: module.hot exists but type needs to be added. Can't use `as any` here as webpack parses for `module.hot` calls.
    //# sourceMappingURL=hot-reloader-client.js.map
    /*#__PURE__*/
    // if we're on an error/404 page, we can't reliably tell if the newly added/removed page
    // matches the current path. In that case, assume any added/removed entries should trigger a reload of the current page
    //# sourceMappingURL=hot-middleware-client.js.map
    /*#__PURE__*/
    // in AMP the router isn't initialized on the client and
    // client-transitions don't occur so ping initial page
    // when notFound: true is returned we should use the notFoundPage
    // as the Router.pathname will point to the 404 page but we want
    // to ping the source page that returned notFound: true instead
    //# sourceMappingURL=on-demand-entries-client.js.map
    /* eslint-disable @typescript-eslint/no-use-before-define */
    // Make sure container is fixed and on a high zIndex so it shows
    // Ensure container's position to be top or bottom (default)
    // Ensure container's position to be left or right (default)
    // If attachShadow is undefined then the browser does not support
    // the Shadow DOM, we need to prefix all the names so there
    // will be no conflicts
    // Container
    // CSS
    // State
    // Handle events
    // Wait for the fade out transition to complete
    // eslint-disable-next-line default-case
    //# sourceMappingURL=dev-build-watcher.js.map
    // This wrapper function is used to safely select the best available function
    // to schedule removal of the no-FOUC styles workaround. requestAnimationFrame
    // is the ideal choice, but when used in iframes, there are no guarantees that
    // the callback will actually be called, which could stall the promise returned
    // from displayContent.
    //
    // See: https://www.vector-logic.com/blog/posts/on-request-animation-frame-and-embedded-iframes
    //# sourceMappingURL=fouc.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    // This is used in `../server/dev/turbopack-utils.ts`.
    // On the error page we want to reload the page when a page was changed
    // Make sure to reload when the dev-overlay is showing for an
    // API route
    // TODO: Fix `__NEXT_PAGE` type
    // trigger hard reload when failing to refresh data
    // to show error overlay properly
    //# sourceMappingURL=page-bootstrap.js.map
    // TODO: Remove use of `any` type.
    /*#__PURE__*/
    // router is initialized later so it has to be live-binded
    // for the page loader
    //# sourceMappingURL=next-dev-turbopack.js.map
    /*#__PURE__*/
    /**
 * `App` component is used for initialize of pages. It allows for overwriting and full control of the `page` initialization.
 * This allows for keeping state between navigation, custom error handling, injecting additional data.
 */
    /*#__PURE__*/
    //# sourceMappingURL=_app.js.map
    // @ts-expect-error module.hot exists
    // @ts-expect-error module.hot exists
    //# sourceMappingURL=%5Broot%20of%20the%20server%5D__f81d50._.js.map

File: ./frontend/.next/static/chunks/node_modules_09bb94._.js
  JavaScript Functions:
    - getComponentNameFromType
    - testStringCoercion
    - checkKeyStringCoercion
    - disabledLog
    - disableLogs
    - reenableLogs
    - describeBuiltInComponentFrame
    - describeNativeComponentFrame
    - describeUnknownElementTypeFrameInDEV
    - getOwner
    - hasValidKey
    - defineKeyPropWarningGetter
    - warnAboutAccessingKey
    - elementRefGetterWithDeprecationWarning
    - ReactElement
    - jsxDEVImpl
    - validateChildKeys
    - isValidElement
    - validateExplicitKey
    - getCurrentComponentErrorInfo
    - _extends
    - is
    - memoizedSelector
    - isValidElementType
    - typeOf
    - isContextConsumer
    - isMemo
    - warning
    - verify
    - verifySubselectors
    - pureFinalPropsSelectorFactory
    - handleFirstCall
    - handleNewPropsAndNewState
    - handleNewProps
    - handleNewState
    - handleSubsequentCalls
    - pureFinalPropsSelector
    - finalPropsSelectorFactory
    - bindActionCreators
    - isPlainObject
    - verifyPlainObject
    - wrapMapToPropsConstant
    - initConstantSelector
    - constantSelector
    - getDependsOnOwnProps
    - wrapMapToPropsFunc
    - initProxySelector
    - mapToPropsProxy
    - detectFactoryAndVerify
    - createInvalidArgFactory
    - mapDispatchToPropsFactory
    - mapStateToPropsFactory
    - defaultMergeProps
    - wrapMergePropsFunc
    - initMergePropsProxy
    - mergePropsProxy
    - mergePropsFactory
    - defaultNoopBatch
    - createListenerCollection
    - unsubscribe
    - createSubscription
    - addNestedSub
    - notifyNestedSubs
    - handleChangeWrapper
    - isSubscribed
    - trySubscribe
    - tryUnsubscribe
    - trySubscribeSelf
    - tryUnsubscribeSelf
    - canUseDOM
    - isRunningInReactNative
    - getUseIsomorphicLayoutEffect
    - is
    - shallowEqual
    - getStatics
    - hoistNonReactStatics
    - getContext
    - stringifyComponent
    - useIsomorphicLayoutEffectWithArgs
    - captureWrapperProps
    - subscribeUpdates
    - checkForUpdates
    - unsubscribeWrapper
    - strictEqual
    - connect
    - wrapWithConnect
    - returned
    - ConnectFunction
    - forwardConnectRef
    - Provider
    - createReduxContextHook
    - useReduxContext2
    - createStoreHook
    - useStore2
    - createDispatchHook
    - useDispatch2
    - refEquality
    - createSelectorHook
    - useSelector2
    - as
    - as
    - to
    - invariant
    - getRect
    - expand
    - shrink
    - shift
    - createBox
    - parse
    - getWindowScroll
    - offset
    - withScroll
    - calculateBox
    - getBox
    - rafSchd
    - wrapperFn
    - formatProdErrorMessage
    - randomString
    - isPlainObject
    - miniKindOf
    - ctorName
    - isError
    - isDate
    - kindOf
    - createStore
    - ensureCanMutateNextListeners
    - getState
    - subscribe
    - unsubscribe
    - dispatch
    - replaceReducer
    - observable
    - observeState
    - legacy_createStore
    - warning
    - getUnexpectedStateShapeWarningMessage
    - assertReducerShape
    - combineReducers
    - combination
    - bindActionCreator
    - bindActionCreators
    - compose
    - applyMiddleware
    - dispatch
    - isAction
    - 2
    - getDevMessage
    - getFormattedMessage
    - log
    - noop
    - getOptions
    - bindEvents
    - unbind
    - unbindAll
    - toString
    - invariant
    - onWindowError
    - getCallbacks
    - setCallbacks
    - position
    - onDragStart
    - withLocation
    - withCombine
    - onDragUpdate
    - returnedToStart
    - onDragEnd
    - isEqual
    - areInputsEqual
    - useMemo
    - useCallback
    - add
    - subtract
    - 1
    - negate
    - patch
    - distance
    - 1
    - apply
    - executeClip
    - offsetByPosition
    - getCorners
    - 1
    - increase
    - clip
    - getSubject
    - scrollDroppable
    - memoizeOne
    - memoized
    - clear
    - tryGetDestination
    - tryGetCombine
    - moveToNextCombine
    - getImpact
    - isHomeOf
    - isWithin
    - isPartiallyVisibleThroughFrame
    - isTotallyVisibleThroughFrame
    - isTotallyVisibleThroughFrameOnAxis
    - getDroppableDisplaced
    - isVisibleInDroppable
    - isVisibleInViewport
    - 1
    - isPartiallyVisible
    - isTotallyVisible
    - isTotallyVisibleOnAxis
    - getShouldAnimate
    - getTarget
    - getDisplacementGroups
    - process
    - getIndexOfLastItem
    - goAtEnd
    - calculateReorderImpact
    - didStartAfterCritical
    - fromCombine
    - fromReorder
    - moveToNextIndex
    - getCombinedItemDisplacement
    - whenCombining
    - distanceFromStartToBorderBoxCenter
    - distanceFromEndToBorderBoxCenter
    - getCrossAxisBorderBoxCenter
    - goAfter
    - goBefore
    - goIntoStart
    - whenReordering
    - withDroppableDisplacement
    - getResultWithoutDroppableDisplacement
    - getPageBorderBoxCenterFromImpact
    - scrollViewport
    - getDraggables
    - tryGetVisible
    - speculativelyIncrease
    - withViewportDisplacement
    - getClientFromPageBorderBoxCenter
    - isTotallyVisibleInNewLocation
    - moveToNextPlace
    - getKnownActive
    - getBestCrossAxisDroppable
    - getCurrentPageBorderBoxCenter
    - getCurrentPageBorderBox
    - getClosestDraggable
    - getDisplacedBy
    - getRequiredGrowthForPlaceholder
    - withMaxScroll
    - addPlaceholder
    - removePlaceholder
    - moveToNewDroppable
    - proposedIndex
    - moveCrossAxis
    - whatIsDraggedOver
    - 1
    - moveInDirection
    - isMovementAllowed
    - isPositionInFrame
    - run
    - getHasOverlap
    - getFurthestAway
    - getDroppableOver
    - offsetRectByPosition
    - withDroppableScroll
    - getIsDisplaced
    - atIndex
    - getReorderImpact
    - getCombineImpact
    - getDragImpact
    - patchDroppableMap
    - clearUnusedPlaceholder
    - recomputePlaceholders
    - update
    - getDraggables
    - recompute
    - getClientBorderBoxCenter
    - refreshSnap
    - getHomeLocation
    - getLiftEffect
    - patchDimensionMap
    - start
    - finish
    - offsetDraggable
    - getFrame
    - adjustAdditionsForScrollChanges
    - publishWhileDraggingInVirtual
    - isSnapping
    - postDroppableChange
    - removeScrollJumpRequest
    - reducer
    - guard
    - beforeInitialCapture
    - 1
    - initialPublish
    - publishWhileDragging
    - collectionStarting
    - updateDroppableScroll
    - updateDroppableIsEnabled
    - updateDroppableIsCombineEnabled
    - move
    - moveByWindowScroll
    - updateViewportMaxScroll
    - moveUp
    - moveDown
    - moveRight
    - moveLeft
    - flush
    - animateDrop
    - completeDrop
    - drop
    - dropPending
    - dropAnimationFinished
    - checkIndexes
    - validateDimensions
    - lift
    - style
    - moveTo
    - getDropDuration
    - getNewHomeClientOffset
    - getDropImpact
    - dropMiddleware
    - getWindowScroll
    - getWindowScrollBinding
    - getScrollListener
    - updateScroll
    - isActive
    - start
    - stop
    - 1
    - scrollListener
    - getExpiringAnnounce
    - result
    - wasCalled
    - getAsyncMarshal
    - execute
    - add
    - flush
    - areLocationsEqual
    - isCombineEqual
    - isCriticalEqual
    - withTimings
    - getDragStart
    - execute
    - getPublisher
    - beforeCapture
    - beforeStart
    - start
    - update
    - flush
    - drop
    - abort
    - responders
    - dropAnimationFinishMiddleware
    - dropAnimationFlushOnScrollMiddleware
    - clear
    - flushDropAnimation
    - dimensionMarshalStopper
    - focus
    - shouldStop
    - autoScroll
    - pendingDrop
    - createStore
    - 1
    - createPublisher
    - collect
    - add
    - remove
    - stop
    - getMaxScroll
    - getDocumentElement
    - getMaxWindowScroll
    - getViewport
    - getInitialPublish
    - shouldPublishUpdate
    - createDimensionMarshal
    - updateDroppableIsEnabled
    - updateDroppableIsCombineEnabled
    - updateDroppableScroll
    - scrollDroppable
    - stopPublishing
    - subscriber
    - startPublishing
    - canStartDrag
    - scrollWindow
    - getScrollableDroppableOver
    - getBestScrollableDroppable
    - getDistanceThresholds
    - getPercentage
    - getValueFromDistance
    - dampenValueByTime
    - getValue
    - getScrollOnAxis
    - adjustForSizeLimits
    - 1
    - getOverlap
    - getRemainder
    - canPartiallyScroll
    - canScrollWindow
    - getWindowOverlap
    - canScrollDroppable
    - getDroppableOverlap
    - getWindowScrollChange
    - getDroppableScrollChange
    - scroll
    - createFluidScroller
    - tryScroll
    - 1
    - fakeScrollCallback
    - stop
    - createJumpScroller
    - moveByOffset
    - scrollDroppableAsMuchAsItCan
    - scrollWindowAsMuchAsItCan
    - jumpScroller
    - createAutoScroller
    - scroll
    - dragHandle
    - draggable
    - droppable
    - makeGetSelector
    - getStyles
    - 1
    - 1
    - 1
    - getHead
    - createStyleEl
    - useStyleMarshal
    - querySelectorAll
    - getWindowFromEl
    - isHtmlElement
    - findDragHandle
    - useFocusMarshal
    - register
    - unregister
    - tryGiveFocus
    - tryShiftRecord
    - tryRestoreFocusRecorded
    - tryRecordFocus
    - clearFrameOnUnmount
    - createRegistry
    - subscribe
    - unsubscribe
    - notify
    - findDraggableById
    - getDraggableById
    - findDroppableById
    - getDroppableById
    - clean
    - useRegistry
    - unmount
    - getBodyElement
    - getId
    - useAnnouncer
    - setup
    - cleanup
    - remove
    - useUniqueId
    - getElementId
    - useHiddenTextElement
    - mount
    - unmount
    - getVersion
    - isSatisfied
    - checkReactVersion
    - checkDoctype
    - useDev
    - useDevSetupWarning
    - useStartupValidation
    - usePrevious
    - create
    - isClaimed
    - isActive
    - claim
    - release
    - tryAbandon
    - isDragging
    - preventStandardKeyEvents
    - supportedEventName
    - isSloppyClickThresholdExceeded
    - getCaptureBindings
    - useMouseSensor
    - onMouseDown
    - listenForCapture
    - bindCapturingEvents
    - startPendingDrag
    - mount
    - unmount
    - noop
    - getDraggingBindings
    - cancel
    - drop
    - useKeyboardSensor
    - onKeyDown
    - stop
    - tryStartCapture
    - mount
    - unmount
    - getWindowBindings
    - getHandleBindings
    - useTouchSensor
    - getPhase
    - setPhase
    - onTouchStart
    - listenForCapture
    - bindCapturingEvents
    - unbindAll
    - startDragging
    - startPendingDrag
    - mount
    - unmount
    - webkitHack
    - useValidateSensorHooks
    - isAnInteractiveElement
    - isEventInInteractiveElement
    - getBorderBoxCenterPosition
    - isElement
    - supportedMatchesName
    - closestPonyfill
    - closest
    - getSelector
    - findClosestDragHandleFromEvent
    - tryGetClosestDraggableIdFromEvent
    - findDraggable
    - preventDefault
    - isActive
    - canStart
    - tryStart
    - getShouldRespectForcePress
    - isLockActive
    - tryDispatch
    - lift
    - completed
    - finish
    - fluidLift
    - 1
    - snapLift
    - abortPreDrag
    - useSensorMarshal
    - tryAbandonLock
    - listenToStore
    - tryReleaseLock
    - createResponders
    - onBeforeCapureCallback
    - createAutoScrollerOptions
    - getStore
    - App
    - useUniqueContextId
    - DragDropContext
    - getDraggingTransition
    - getDraggingOpacity
    - getShouldDraggingAnimate
    - getDraggingStyle
    - getSecondaryStyle
    - getStyle
    - getDimension
    - useDraggablePublisher
    - checkIsValidInnerRef
    - useValidation
    - prefix
    - useClonePropValidation
    - useRequiredContext
    - preventHtml5Dnd
    - Draggable
    - isStrictEqual
    - whatIsDraggedOverFromResult
    - getCombineWithFromResult
    - getCombineWithFromImpact
    - getDraggableSelector
    - selector
    - getSecondarySnapshot
    - getSecondarySelector
    - getFallback
    - getProps
    - selector
    - 1
    - selector
    - PrivateDraggable
    - PublicDraggable
    - isEqual
    - isEither
    - isBoth
    - isElementScrollable
    - isBodyScrollable
    - getClosestScrollable
    - checkForNestedScrollContainers
    - getScroll
    - getIsFixed
    - getEnv
    - getDroppableDimension
    - frame
    - getClient
    - getDimension
    - closest
    - getListenerOptions
    - getClosestScrollableFromDrag
    - useDroppablePublisher
    - noop
    - getSize
    - getStyle
    - Placeholder
    - isBoolean
    - runChecks
    - required
    - boolean
    - ref
    - placeholder
    - hasClone
    - hasNoPlaceholder
    - useValidation
    - onClose
    - Droppable
    - getClone
    - getBody
    - attachDefaultPropsToOwnProps
    - isMatchingType
    - getDraggable
    - makeMapStateToProps
    - selector
    - ConnectedDroppable
    - UserCircleIcon
    - ClipboardDocumentCheckIcon
    - BookmarkIcon
  Comments:
    /**
 * @license React
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    //react.dev/link/special-props)", displayName));
    //react.dev/link/warning-keys for more information.', parentType, childOwner);
    /**
 * @license React
 * use-sync-external-store-with-selector.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    // src/utils/react.ts
    // src/hooks/useSelector.ts
    // src/utils/react-is.ts
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/utils/warning.ts
    // src/connect/verifySubselectors.ts
    // src/connect/selectorFactory.ts
    // src/utils/bindActionCreators.ts
    // src/utils/isPlainObject.ts
    // src/utils/verifyPlainObject.ts
    // src/connect/wrapMapToProps.ts
    // src/connect/invalidArgFactory.ts
    // src/connect/mapDispatchToProps.ts
    // @ts-ignore
    // @ts-ignore
    // src/connect/mapStateToProps.ts
    // @ts-ignore
    // src/connect/mergeProps.ts
    // src/utils/batch.ts
    // src/utils/Subscription.ts
    // src/utils/useIsomorphicLayoutEffect.ts
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/utils/shallowEqual.ts
    // src/utils/hoistStatics.ts
    // src/components/Context.ts
    /* @__PURE__ */
    /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/components/connect.tsx
    // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.
    // @ts-ignore
    // use React's forwardRef to expose a ref of the wrapped component
    // the context consumer to use
    /* @__PURE__ */
    // @ts-ignore
    /* @__PURE__ */
    // @ts-ignore
    /* @__PURE__ */
    // @ts-ignore
    // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing
    // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,
    // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.
    // @ts-ignore
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/components/Provider.tsx
    /* @__PURE__ */
    /* @__PURE__ */
    // src/hooks/useReduxContext.ts
    /* @__PURE__ */
    // src/hooks/useStore.ts
    // @ts-ignore
    /* @__PURE__ */
    // src/hooks/useDispatch.ts
    /* @__PURE__ */
    //redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization", {
    /* @__PURE__ */
    // src/exports.ts
    //# sourceMappingURL=react-redux.mjs.map
    // src/utils/formatProdErrorMessage.ts
    //redux.js.org/Errors?code=${code} for the full message or use the non-minified dev environment for full errors. `;
    // src/utils/symbol-observable.ts
    /* @__PURE__ */
    // src/utils/actionTypes.ts
    // src/utils/isPlainObject.ts
    // src/utils/kindOf.ts
    // src/createStore.ts
    //redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
    /* @__PURE__ */
    /* @__PURE__ */
    //redux.js.org/api/store#subscribelistener for more details.");
    //redux.js.org/api/store#subscribelistener for more details.");
    //redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`);
    /**
       * The minimal observable subscription method.
       * @param observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
    // src/utils/warning.ts
    // src/combineReducers.ts
    /*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.`);
        }
    });
}
function combineReducers(reducers) {
    const reducerKeys = Object.keys(reducers);
    const finalReducers = {};
    for(let i = 0; i < reducerKeys.length; i++){
        const key = reducerKeys[i];
        if ("TURBOPACK compile-time truthy", 1) {
            if (typeof reducers[key] === "undefined") {
                warning(`No reducer provided for key "${key}"`);
            }
        }
        if (typeof reducers[key] === "function") {
            finalReducers[key] = reducers[key];
        }
    }
    const finalReducerKeys = Object.keys(finalReducers);
    let unexpectedKeyCache;
    if (("TURBOPACK compile-time value", "development") !== "production") {
        unexpectedKeyCache = {};
    }
    let shapeAssertionError;
    try {
        assertReducerShape(finalReducers);
    } catch (e) {
        shapeAssertionError = e;
    }
    return function combination(state = {}, action) {
        if (shapeAssertionError) {
            throw shapeAssertionError;
        }
        if ("TURBOPACK compile-time truthy", 1) {
            const warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
            if (warningMessage) {
                warning(warningMessage);
            }
        }
        let hasChanged = false;
        const nextState = {};
        for(let i = 0; i < finalReducerKeys.length; i++){
            const key = finalReducerKeys[i];
            const reducer = finalReducers[key];
            const previousStateForKey = state[key];
            const nextStateForKey = reducer(previousStateForKey, action);
            if (typeof nextStateForKey === "undefined") {
                const actionType = action && action.type;
                throw new Error(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : `When called with an action of type ${actionType ? `"${String(actionType)}"` : "(unknown type)"}, the slice reducer for key "${key}" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.`);
            }
            nextState[key] = nextStateForKey;
            hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
        }
        hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
        return hasChanged ? nextState : state;
    };
}
// src/bindActionCreators.ts
function bindActionCreator(actionCreator, dispatch) {
    return function(...args) {
        return dispatch(actionCreator.apply(this, args));
    };
}
function bindActionCreators(actionCreators, dispatch) {
    if (typeof actionCreators === "function") {
        return bindActionCreator(actionCreators, dispatch);
    }
    if (typeof actionCreators !== "object" || actionCreators === null) {
        throw new Error(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : `bindActionCreators expected an object or a function, but instead received: '${kindOf(actionCreators)}'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?`);
    }
    const boundActionCreators = {};
    for(const key in actionCreators){
        const actionCreator = actionCreators[key];
        if (typeof actionCreator === "function") {
            boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
        }
    }
    return boundActionCreators;
}
// src/compose.ts
function compose(...funcs) {
    if (funcs.length === 0) {
        return (arg)=>arg;
    }
    if (funcs.length === 1) {
        return funcs[0];
    }
    return funcs.reduce((a, b)=>(...args)=>a(b(...args)));
}
// src/applyMiddleware.ts
function applyMiddleware(...middlewares) {
    return (createStore2)=>(reducer, preloadedState)=>{
            const store = createStore2(reducer, preloadedState);
            let dispatch = ()=>{
                throw new Error(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
            };
            const middlewareAPI = {
                getState: store.getState,
                dispatch: (action, ...args)=>dispatch(action, ...args)
            };
            const chain = middlewares.map((middleware)=>middleware(middlewareAPI));
            dispatch = compose(...chain)(store.dispatch);
            return {
                ...store,
                dispatch
            };
        };
}
// src/utils/isAction.ts
function isAction(action) {
    return isPlainObject(action) && "type" in action && typeof action.type === "string";
}
;
 //# sourceMappingURL=redux.mjs.map
}}),
"[project]/node_modules/@hello-pangea/dnd/dist/dnd.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "DragDropContext": (()=>DragDropContext),
    "Draggable": (()=>PublicDraggable),
    "Droppable": (()=>ConnectedDroppable),
    "useKeyboardSensor": (()=>useKeyboardSensor),
    "useMouseSensor": (()=>useMouseSensor),
    "useTouchSensor": (()=>useTouchSensor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2d$dom$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react-dom/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/react-redux/dist/react-redux.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$box$2d$model$2f$dist$2f$css$2d$box$2d$model$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/css-box-model/dist/css-box-model.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$raf$2d$schd$2f$dist$2f$raf$2d$schd$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/raf-schd/dist/raf-schd.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/redux/dist/redux.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
;
const isProduction$1 = ("TURBOPACK compile-time value", "development") === 'production';
const spacesAndTabs = /[ \t]{2,}/g;
const lineStartWithSpaces = /^[ \t]*/
    //github.com/hello-pangea/dnd/blob/main/docs/patterns/virtual-lists.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/doctype.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/using-inner-ref.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/how-we-detect-scroll-containers.md
    //github.com/atlassian/react-beautiful-dnd/issues/131
    //github.com/hello-pangea/dnd/blob/main/docs/api/droppable.md
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=node_modules_09bb94._.js.map

File: ./frontend/.next/static/chunks/node_modules_fc9825._.js
  JavaScript Functions:
    - getComponentNameFromType
    - testStringCoercion
    - checkKeyStringCoercion
    - disabledLog
    - disableLogs
    - reenableLogs
    - describeBuiltInComponentFrame
    - describeNativeComponentFrame
    - describeUnknownElementTypeFrameInDEV
    - getOwner
    - hasValidKey
    - defineKeyPropWarningGetter
    - warnAboutAccessingKey
    - elementRefGetterWithDeprecationWarning
    - ReactElement
    - jsxDEVImpl
    - validateChildKeys
    - isValidElement
    - validateExplicitKey
    - getCurrentComponentErrorInfo
    - _extends
    - is
    - memoizedSelector
    - isValidElementType
    - typeOf
    - isContextConsumer
    - isMemo
    - warning
    - verify
    - verifySubselectors
    - pureFinalPropsSelectorFactory
    - handleFirstCall
    - handleNewPropsAndNewState
    - handleNewProps
    - handleNewState
    - handleSubsequentCalls
    - pureFinalPropsSelector
    - finalPropsSelectorFactory
    - bindActionCreators
    - isPlainObject
    - verifyPlainObject
    - wrapMapToPropsConstant
    - initConstantSelector
    - constantSelector
    - getDependsOnOwnProps
    - wrapMapToPropsFunc
    - initProxySelector
    - mapToPropsProxy
    - detectFactoryAndVerify
    - createInvalidArgFactory
    - mapDispatchToPropsFactory
    - mapStateToPropsFactory
    - defaultMergeProps
    - wrapMergePropsFunc
    - initMergePropsProxy
    - mergePropsProxy
    - mergePropsFactory
    - defaultNoopBatch
    - createListenerCollection
    - unsubscribe
    - createSubscription
    - addNestedSub
    - notifyNestedSubs
    - handleChangeWrapper
    - isSubscribed
    - trySubscribe
    - tryUnsubscribe
    - trySubscribeSelf
    - tryUnsubscribeSelf
    - canUseDOM
    - isRunningInReactNative
    - getUseIsomorphicLayoutEffect
    - is
    - shallowEqual
    - getStatics
    - hoistNonReactStatics
    - getContext
    - stringifyComponent
    - useIsomorphicLayoutEffectWithArgs
    - captureWrapperProps
    - subscribeUpdates
    - checkForUpdates
    - unsubscribeWrapper
    - strictEqual
    - connect
    - wrapWithConnect
    - returned
    - ConnectFunction
    - forwardConnectRef
    - Provider
    - createReduxContextHook
    - useReduxContext2
    - createStoreHook
    - useStore2
    - createDispatchHook
    - useDispatch2
    - refEquality
    - createSelectorHook
    - useSelector2
    - as
    - as
    - to
    - invariant
    - getRect
    - expand
    - shrink
    - shift
    - createBox
    - parse
    - getWindowScroll
    - offset
    - withScroll
    - calculateBox
    - getBox
    - rafSchd
    - wrapperFn
    - formatProdErrorMessage
    - randomString
    - isPlainObject
    - miniKindOf
    - ctorName
    - isError
    - isDate
    - kindOf
    - createStore
    - ensureCanMutateNextListeners
    - getState
    - subscribe
    - unsubscribe
    - dispatch
    - replaceReducer
    - observable
    - observeState
    - legacy_createStore
    - warning
    - getUnexpectedStateShapeWarningMessage
    - assertReducerShape
    - combineReducers
    - combination
    - bindActionCreator
    - bindActionCreators
    - compose
    - applyMiddleware
    - dispatch
    - isAction
    - 2
    - getDevMessage
    - getFormattedMessage
    - log
    - noop
    - getOptions
    - bindEvents
    - unbind
    - unbindAll
    - toString
    - invariant
    - onWindowError
    - getCallbacks
    - setCallbacks
    - position
    - onDragStart
    - withLocation
    - withCombine
    - onDragUpdate
    - returnedToStart
    - onDragEnd
    - isEqual
    - areInputsEqual
    - useMemo
    - useCallback
    - add
    - subtract
    - 1
    - negate
    - patch
    - distance
    - 1
    - apply
    - executeClip
    - offsetByPosition
    - getCorners
    - 1
    - increase
    - clip
    - getSubject
    - scrollDroppable
    - memoizeOne
    - memoized
    - clear
    - tryGetDestination
    - tryGetCombine
    - moveToNextCombine
    - getImpact
    - isHomeOf
    - isWithin
    - isPartiallyVisibleThroughFrame
    - isTotallyVisibleThroughFrame
    - isTotallyVisibleThroughFrameOnAxis
    - getDroppableDisplaced
    - isVisibleInDroppable
    - isVisibleInViewport
    - 1
    - isPartiallyVisible
    - isTotallyVisible
    - isTotallyVisibleOnAxis
    - getShouldAnimate
    - getTarget
    - getDisplacementGroups
    - process
    - getIndexOfLastItem
    - goAtEnd
    - calculateReorderImpact
    - didStartAfterCritical
    - fromCombine
    - fromReorder
    - moveToNextIndex
    - getCombinedItemDisplacement
    - whenCombining
    - distanceFromStartToBorderBoxCenter
    - distanceFromEndToBorderBoxCenter
    - getCrossAxisBorderBoxCenter
    - goAfter
    - goBefore
    - goIntoStart
    - whenReordering
    - withDroppableDisplacement
    - getResultWithoutDroppableDisplacement
    - getPageBorderBoxCenterFromImpact
    - scrollViewport
    - getDraggables
    - tryGetVisible
    - speculativelyIncrease
    - withViewportDisplacement
    - getClientFromPageBorderBoxCenter
    - isTotallyVisibleInNewLocation
    - moveToNextPlace
    - getKnownActive
    - getBestCrossAxisDroppable
    - getCurrentPageBorderBoxCenter
    - getCurrentPageBorderBox
    - getClosestDraggable
    - getDisplacedBy
    - getRequiredGrowthForPlaceholder
    - withMaxScroll
    - addPlaceholder
    - removePlaceholder
    - moveToNewDroppable
    - proposedIndex
    - moveCrossAxis
    - whatIsDraggedOver
    - 1
    - moveInDirection
    - isMovementAllowed
    - isPositionInFrame
    - run
    - getHasOverlap
    - getFurthestAway
    - getDroppableOver
    - offsetRectByPosition
    - withDroppableScroll
    - getIsDisplaced
    - atIndex
    - getReorderImpact
    - getCombineImpact
    - getDragImpact
    - patchDroppableMap
    - clearUnusedPlaceholder
    - recomputePlaceholders
    - update
    - getDraggables
    - recompute
    - getClientBorderBoxCenter
    - refreshSnap
    - getHomeLocation
    - getLiftEffect
    - patchDimensionMap
    - start
    - finish
    - offsetDraggable
    - getFrame
    - adjustAdditionsForScrollChanges
    - publishWhileDraggingInVirtual
    - isSnapping
    - postDroppableChange
    - removeScrollJumpRequest
    - reducer
    - guard
    - beforeInitialCapture
    - 1
    - initialPublish
    - publishWhileDragging
    - collectionStarting
    - updateDroppableScroll
    - updateDroppableIsEnabled
    - updateDroppableIsCombineEnabled
    - move
    - moveByWindowScroll
    - updateViewportMaxScroll
    - moveUp
    - moveDown
    - moveRight
    - moveLeft
    - flush
    - animateDrop
    - completeDrop
    - drop
    - dropPending
    - dropAnimationFinished
    - checkIndexes
    - validateDimensions
    - lift
    - style
    - moveTo
    - getDropDuration
    - getNewHomeClientOffset
    - getDropImpact
    - dropMiddleware
    - getWindowScroll
    - getWindowScrollBinding
    - getScrollListener
    - updateScroll
    - isActive
    - start
    - stop
    - 1
    - scrollListener
    - getExpiringAnnounce
    - result
    - wasCalled
    - getAsyncMarshal
    - execute
    - add
    - flush
    - areLocationsEqual
    - isCombineEqual
    - isCriticalEqual
    - withTimings
    - getDragStart
    - execute
    - getPublisher
    - beforeCapture
    - beforeStart
    - start
    - update
    - flush
    - drop
    - abort
    - responders
    - dropAnimationFinishMiddleware
    - dropAnimationFlushOnScrollMiddleware
    - clear
    - flushDropAnimation
    - dimensionMarshalStopper
    - focus
    - shouldStop
    - autoScroll
    - pendingDrop
    - createStore
    - 1
    - createPublisher
    - collect
    - add
    - remove
    - stop
    - getMaxScroll
    - getDocumentElement
    - getMaxWindowScroll
    - getViewport
    - getInitialPublish
    - shouldPublishUpdate
    - createDimensionMarshal
    - updateDroppableIsEnabled
    - updateDroppableIsCombineEnabled
    - updateDroppableScroll
    - scrollDroppable
    - stopPublishing
    - subscriber
    - startPublishing
    - canStartDrag
    - scrollWindow
    - getScrollableDroppableOver
    - getBestScrollableDroppable
    - getDistanceThresholds
    - getPercentage
    - getValueFromDistance
    - dampenValueByTime
    - getValue
    - getScrollOnAxis
    - adjustForSizeLimits
    - 1
    - getOverlap
    - getRemainder
    - canPartiallyScroll
    - canScrollWindow
    - getWindowOverlap
    - canScrollDroppable
    - getDroppableOverlap
    - getWindowScrollChange
    - getDroppableScrollChange
    - scroll
    - createFluidScroller
    - tryScroll
    - 1
    - fakeScrollCallback
    - stop
    - createJumpScroller
    - moveByOffset
    - scrollDroppableAsMuchAsItCan
    - scrollWindowAsMuchAsItCan
    - jumpScroller
    - createAutoScroller
    - scroll
    - dragHandle
    - draggable
    - droppable
    - makeGetSelector
    - getStyles
    - 1
    - 1
    - 1
    - getHead
    - createStyleEl
    - useStyleMarshal
    - querySelectorAll
    - getWindowFromEl
    - isHtmlElement
    - findDragHandle
    - useFocusMarshal
    - register
    - unregister
    - tryGiveFocus
    - tryShiftRecord
    - tryRestoreFocusRecorded
    - tryRecordFocus
    - clearFrameOnUnmount
    - createRegistry
    - subscribe
    - unsubscribe
    - notify
    - findDraggableById
    - getDraggableById
    - findDroppableById
    - getDroppableById
    - clean
    - useRegistry
    - unmount
    - getBodyElement
    - getId
    - useAnnouncer
    - setup
    - cleanup
    - remove
    - useUniqueId
    - getElementId
    - useHiddenTextElement
    - mount
    - unmount
    - getVersion
    - isSatisfied
    - checkReactVersion
    - checkDoctype
    - useDev
    - useDevSetupWarning
    - useStartupValidation
    - usePrevious
    - create
    - isClaimed
    - isActive
    - claim
    - release
    - tryAbandon
    - isDragging
    - preventStandardKeyEvents
    - supportedEventName
    - isSloppyClickThresholdExceeded
    - getCaptureBindings
    - useMouseSensor
    - onMouseDown
    - listenForCapture
    - bindCapturingEvents
    - startPendingDrag
    - mount
    - unmount
    - noop
    - getDraggingBindings
    - cancel
    - drop
    - useKeyboardSensor
    - onKeyDown
    - stop
    - tryStartCapture
    - mount
    - unmount
    - getWindowBindings
    - getHandleBindings
    - useTouchSensor
    - getPhase
    - setPhase
    - onTouchStart
    - listenForCapture
    - bindCapturingEvents
    - unbindAll
    - startDragging
    - startPendingDrag
    - mount
    - unmount
    - webkitHack
    - useValidateSensorHooks
    - isAnInteractiveElement
    - isEventInInteractiveElement
    - getBorderBoxCenterPosition
    - isElement
    - supportedMatchesName
    - closestPonyfill
    - closest
    - getSelector
    - findClosestDragHandleFromEvent
    - tryGetClosestDraggableIdFromEvent
    - findDraggable
    - preventDefault
    - isActive
    - canStart
    - tryStart
    - getShouldRespectForcePress
    - isLockActive
    - tryDispatch
    - lift
    - completed
    - finish
    - fluidLift
    - 1
    - snapLift
    - abortPreDrag
    - useSensorMarshal
    - tryAbandonLock
    - listenToStore
    - tryReleaseLock
    - createResponders
    - onBeforeCapureCallback
    - createAutoScrollerOptions
    - getStore
    - App
    - useUniqueContextId
    - DragDropContext
    - getDraggingTransition
    - getDraggingOpacity
    - getShouldDraggingAnimate
    - getDraggingStyle
    - getSecondaryStyle
    - getStyle
    - getDimension
    - useDraggablePublisher
    - checkIsValidInnerRef
    - useValidation
    - prefix
    - useClonePropValidation
    - useRequiredContext
    - preventHtml5Dnd
    - Draggable
    - isStrictEqual
    - whatIsDraggedOverFromResult
    - getCombineWithFromResult
    - getCombineWithFromImpact
    - getDraggableSelector
    - selector
    - getSecondarySnapshot
    - getSecondarySelector
    - getFallback
    - getProps
    - selector
    - 1
    - selector
    - PrivateDraggable
    - PublicDraggable
    - isEqual
    - isEither
    - isBoth
    - isElementScrollable
    - isBodyScrollable
    - getClosestScrollable
    - checkForNestedScrollContainers
    - getScroll
    - getIsFixed
    - getEnv
    - getDroppableDimension
    - frame
    - getClient
    - getDimension
    - closest
    - getListenerOptions
    - getClosestScrollableFromDrag
    - useDroppablePublisher
    - noop
    - getSize
    - getStyle
    - Placeholder
    - isBoolean
    - runChecks
    - required
    - boolean
    - ref
    - placeholder
    - hasClone
    - hasNoPlaceholder
    - useValidation
    - onClose
    - Droppable
    - getClone
    - getBody
    - attachDefaultPropsToOwnProps
    - isMatchingType
    - getDraggable
    - makeMapStateToProps
    - selector
    - ConnectedDroppable
    - ChevronRightIcon
    - ChevronDownIcon
    - UserCircleIcon
    - ClipboardDocumentCheckIcon
    - BookmarkIcon
    - ArrowsPointingOutIcon
  Comments:
    /**
 * @license React
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    //react.dev/link/special-props)", displayName));
    //react.dev/link/warning-keys for more information.', parentType, childOwner);
    /**
 * @license React
 * use-sync-external-store-with-selector.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    // src/utils/react.ts
    // src/hooks/useSelector.ts
    // src/utils/react-is.ts
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/utils/warning.ts
    // src/connect/verifySubselectors.ts
    // src/connect/selectorFactory.ts
    // src/utils/bindActionCreators.ts
    // src/utils/isPlainObject.ts
    // src/utils/verifyPlainObject.ts
    // src/connect/wrapMapToProps.ts
    // src/connect/invalidArgFactory.ts
    // src/connect/mapDispatchToProps.ts
    // @ts-ignore
    // @ts-ignore
    // src/connect/mapStateToProps.ts
    // @ts-ignore
    // src/connect/mergeProps.ts
    // src/utils/batch.ts
    // src/utils/Subscription.ts
    // src/utils/useIsomorphicLayoutEffect.ts
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/utils/shallowEqual.ts
    // src/utils/hoistStatics.ts
    // src/components/Context.ts
    /* @__PURE__ */
    /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/components/connect.tsx
    // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.
    // @ts-ignore
    // use React's forwardRef to expose a ref of the wrapped component
    // the context consumer to use
    /* @__PURE__ */
    // @ts-ignore
    /* @__PURE__ */
    // @ts-ignore
    /* @__PURE__ */
    // @ts-ignore
    // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing
    // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,
    // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.
    // @ts-ignore
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/components/Provider.tsx
    /* @__PURE__ */
    /* @__PURE__ */
    // src/hooks/useReduxContext.ts
    /* @__PURE__ */
    // src/hooks/useStore.ts
    // @ts-ignore
    /* @__PURE__ */
    // src/hooks/useDispatch.ts
    /* @__PURE__ */
    //redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization", {
    /* @__PURE__ */
    // src/exports.ts
    //# sourceMappingURL=react-redux.mjs.map
    // src/utils/formatProdErrorMessage.ts
    //redux.js.org/Errors?code=${code} for the full message or use the non-minified dev environment for full errors. `;
    // src/utils/symbol-observable.ts
    /* @__PURE__ */
    // src/utils/actionTypes.ts
    // src/utils/isPlainObject.ts
    // src/utils/kindOf.ts
    // src/createStore.ts
    //redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
    /* @__PURE__ */
    /* @__PURE__ */
    //redux.js.org/api/store#subscribelistener for more details.");
    //redux.js.org/api/store#subscribelistener for more details.");
    //redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`);
    /**
       * The minimal observable subscription method.
       * @param observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
    // src/utils/warning.ts
    // src/combineReducers.ts
    /*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.`);
        }
    });
}
function combineReducers(reducers) {
    const reducerKeys = Object.keys(reducers);
    const finalReducers = {};
    for(let i = 0; i < reducerKeys.length; i++){
        const key = reducerKeys[i];
        if ("TURBOPACK compile-time truthy", 1) {
            if (typeof reducers[key] === "undefined") {
                warning(`No reducer provided for key "${key}"`);
            }
        }
        if (typeof reducers[key] === "function") {
            finalReducers[key] = reducers[key];
        }
    }
    const finalReducerKeys = Object.keys(finalReducers);
    let unexpectedKeyCache;
    if (("TURBOPACK compile-time value", "development") !== "production") {
        unexpectedKeyCache = {};
    }
    let shapeAssertionError;
    try {
        assertReducerShape(finalReducers);
    } catch (e) {
        shapeAssertionError = e;
    }
    return function combination(state = {}, action) {
        if (shapeAssertionError) {
            throw shapeAssertionError;
        }
        if ("TURBOPACK compile-time truthy", 1) {
            const warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
            if (warningMessage) {
                warning(warningMessage);
            }
        }
        let hasChanged = false;
        const nextState = {};
        for(let i = 0; i < finalReducerKeys.length; i++){
            const key = finalReducerKeys[i];
            const reducer = finalReducers[key];
            const previousStateForKey = state[key];
            const nextStateForKey = reducer(previousStateForKey, action);
            if (typeof nextStateForKey === "undefined") {
                const actionType = action && action.type;
                throw new Error(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : `When called with an action of type ${actionType ? `"${String(actionType)}"` : "(unknown type)"}, the slice reducer for key "${key}" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.`);
            }
            nextState[key] = nextStateForKey;
            hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
        }
        hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
        return hasChanged ? nextState : state;
    };
}
// src/bindActionCreators.ts
function bindActionCreator(actionCreator, dispatch) {
    return function(...args) {
        return dispatch(actionCreator.apply(this, args));
    };
}
function bindActionCreators(actionCreators, dispatch) {
    if (typeof actionCreators === "function") {
        return bindActionCreator(actionCreators, dispatch);
    }
    if (typeof actionCreators !== "object" || actionCreators === null) {
        throw new Error(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : `bindActionCreators expected an object or a function, but instead received: '${kindOf(actionCreators)}'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?`);
    }
    const boundActionCreators = {};
    for(const key in actionCreators){
        const actionCreator = actionCreators[key];
        if (typeof actionCreator === "function") {
            boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
        }
    }
    return boundActionCreators;
}
// src/compose.ts
function compose(...funcs) {
    if (funcs.length === 0) {
        return (arg)=>arg;
    }
    if (funcs.length === 1) {
        return funcs[0];
    }
    return funcs.reduce((a, b)=>(...args)=>a(b(...args)));
}
// src/applyMiddleware.ts
function applyMiddleware(...middlewares) {
    return (createStore2)=>(reducer, preloadedState)=>{
            const store = createStore2(reducer, preloadedState);
            let dispatch = ()=>{
                throw new Error(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
            };
            const middlewareAPI = {
                getState: store.getState,
                dispatch: (action, ...args)=>dispatch(action, ...args)
            };
            const chain = middlewares.map((middleware)=>middleware(middlewareAPI));
            dispatch = compose(...chain)(store.dispatch);
            return {
                ...store,
                dispatch
            };
        };
}
// src/utils/isAction.ts
function isAction(action) {
    return isPlainObject(action) && "type" in action && typeof action.type === "string";
}
;
 //# sourceMappingURL=redux.mjs.map
}}),
"[project]/node_modules/@hello-pangea/dnd/dist/dnd.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "DragDropContext": (()=>DragDropContext),
    "Draggable": (()=>PublicDraggable),
    "Droppable": (()=>ConnectedDroppable),
    "useKeyboardSensor": (()=>useKeyboardSensor),
    "useMouseSensor": (()=>useMouseSensor),
    "useTouchSensor": (()=>useTouchSensor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2d$dom$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react-dom/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/react-redux/dist/react-redux.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$box$2d$model$2f$dist$2f$css$2d$box$2d$model$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/css-box-model/dist/css-box-model.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$raf$2d$schd$2f$dist$2f$raf$2d$schd$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/raf-schd/dist/raf-schd.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/redux/dist/redux.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
;
const isProduction$1 = ("TURBOPACK compile-time value", "development") === 'production';
const spacesAndTabs = /[ \t]{2,}/g;
const lineStartWithSpaces = /^[ \t]*/
    //github.com/hello-pangea/dnd/blob/main/docs/patterns/virtual-lists.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/doctype.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/using-inner-ref.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/how-we-detect-scroll-containers.md
    //github.com/atlassian/react-beautiful-dnd/issues/131
    //github.com/hello-pangea/dnd/blob/main/docs/api/droppable.md
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=node_modules_fc9825._.js.map

File: ./frontend/.next/static/chunks/node_modules_beb007._.js
  JavaScript Functions:
    - _interop_require_default
    - _getRequireWildcardCache
    - _interop_require_wildcard
    - _tagged_template_literal_loose
    - defineDeprecationWarning
    - getIteratorFn
    - warnNoop
    - Component
    - ComponentDummy
    - PureComponent
    - testStringCoercion
    - checkKeyStringCoercion
    - getComponentNameFromType
    - isValidElementType
    - disabledLog
    - disableLogs
    - reenableLogs
    - describeBuiltInComponentFrame
    - describeNativeComponentFrame
    - describeUnknownElementTypeFrameInDEV
    - getOwner
    - hasValidKey
    - defineKeyPropWarningGetter
    - warnAboutAccessingKey
    - elementRefGetterWithDeprecationWarning
    - ReactElement
    - cloneAndReplaceKey
    - validateChildKeys
    - isValidElement
    - validateExplicitKey
    - getCurrentComponentErrorInfo
    - escape
    - getElementKey
    - noop
    - resolveThenable
    - mapIntoArray
    - mapChildren
    - lazyInitializer
    - resolveDispatcher
    - component
    - noop
    - enqueueTask
    - aggregateErrors
    - popActScope
    - recursivelyFlushAsyncActWork
    - flushActQueue
    - which
    - but
    - but
    - getComponentNameFromType
    - testStringCoercion
    - checkKeyStringCoercion
    - disabledLog
    - disableLogs
    - reenableLogs
    - describeBuiltInComponentFrame
    - describeNativeComponentFrame
    - describeUnknownElementTypeFrameInDEV
    - getOwner
    - hasValidKey
    - defineKeyPropWarningGetter
    - warnAboutAccessingKey
    - elementRefGetterWithDeprecationWarning
    - ReactElement
    - jsxDEVImpl
    - validateChildKeys
    - isValidElement
    - validateExplicitKey
    - getCurrentComponentErrorInfo
    - performWorkUntilDeadline
    - push
    - peek
    - pop
    - compare
    - advanceTimers
    - handleTimeout
    - shouldYieldToHost
    - requestHostCallback
    - requestHostTimeout
  Comments:
    /**
 * @license React
 * react.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    //react.dev/link/special-props)", displayName));
    //react.dev/link/warning-keys for more information.', parentType, childOwner);
    //react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.");
    //github.com/facebook/react/issues if you encounter this warning."));
    //github.com/facebook/react/issues/3236)."
    //react.dev/link/new-jsx-transform")), hasValidKey(config) && (checkKeyStringCoercion(config.key), typeString = "" + config.key), config)hasOwnProperty.call(config, propName) && "key" !== propName && "__self" !== propName && "__source" !== propName && (i[propName] = config[propName]);
    /**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    //react.dev/link/special-props)", displayName));
    //react.dev/link/warning-keys for more information.', parentType, childOwner);
    /**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    //# sourceMappingURL=node_modules_beb007._.js.map

File: ./frontend/.next/static/chunks/[turbopack]_browser_dev_hmr-client_d6d8d4._.js
  JavaScript Functions:
    - getSocketProtocol
    - addMessageListener
    - sendMessage
    - connectHMR
    - init
    - handleOnline
    - handleMessage
    - handleDisconnect
    - connect
    - component
    - sendJSON
    - resourceKey
    - subscribeToUpdates
    - handleSocketConnected
    - aggregateUpdates
    - applyAggregatedUpdates
    - mergeChunkListUpdates
    - mergeChunkListChunks
    - mergeChunkUpdates
    - mergeChunkListEcmascriptMergedUpdates
    - mergeEcmascriptChunkEntries
    - mergeEcmascriptChunksUpdates
    - mergeEcmascriptChunkUpdates
    - invariant
    - compareByList
    - emitIssues
    - handleIssues
    - sortIssues
    - setHooks
    - handleSocketMessage
    - finalizeUpdate
    - subscribeToChunkUpdate
    - subscribeToUpdate
    - triggerUpdate
  Comments:
    // Adapted from https://github.com/vercel/next.js/blob/canary/packages/next/src/client/dev/error-overlay/websocket.ts
    // TODO: add timeout again
    // let lastActivity = Date.now()
    // assetPrefix is a url
    // lastActivity = Date.now()
    // lastActivity = Date.now()
    // let timer: NodeJS.Timeout
    //${hostname}:${port}${assetPrefix ? `/${assetPrefix}` : ""}`;
    //${assetPrefix.split("://")[1]}`;
    /// <reference path="../../../shared/runtime-types.d.ts" />
    /// <reference path="../../runtime/base/dev-globals.d.ts" />
    /// <reference path="../../runtime/base/dev-protocol.d.ts" />
    /// <reference path="../../runtime/base/dev-extensions.ts" />
    // TODO(WEB-1465) Remove this backwards compat fallback once
    // vercel/next.js#54586 is merged.
    // TODO(WEB-1465) Remove this backwards compat fallback once
    // vercel/next.js#54586 is merged.
    // we aggregate all pending updates until the issues are resolved
    // Since `merged` is an array of updates, we need to merge them all into
    // one, consistent update.
    // Since there can only be `EcmascriptMergeUpdates` in the array, there is
    // no need to key on the `type` field.
    // These two completely cancel each other out.
    // We could eagerly return `updateB` here, but this would potentially be
    // incorrect if `updateA` has added modules.
    // Any other update combination is invalid.
    // aggregate updates
    // run single update
    // This is used by the Next.js integration test suite to notify it when HMR
    // updates have been completed.
    // TODO: Only run this in test environments (gate by `process.env.__NEXT_TEST_MODE`)
    // TODO(WEB-1465) Remove this backwards compat fallback once
    // vercel/next.js#54586 is merged.
    // This indicates that the resource which we subscribed to either does not exist or
    // has been deleted. In either case, we should clear all update callbacks, so if a
    // new subscription is created for the same resource, it will send a new "subscribe"
    // message to the server.
    // No need to send an "unsubscribe" message to the server, it will have already
    // dropped the update stream before sending the "notFound" message.
    //# sourceMappingURL=%5Bturbopack%5D_browser_dev_hmr-client_d6d8d4._.js.map

File: ./frontend/.next/static/chunks/pages__error_b8c4c3._.js
  JavaScript Functions:
    - defineProp
    - esm
    - esmExport
    - ensureDynamicExports
    - dynamicExport
    - exportValue
    - exportNamespace
    - createGetter
    - interopEsm
    - createNS
    - esmImport
    - require1
    - commonJsRequire
    - moduleContext
    - moduleContext
    - keys
    - resolve
    - getChunkPath
    - isPromise
    - isAsyncModuleExt
    - createPromise
    - resolveQueue
    - wrapDeps
    - asyncModule
    - handleAsyncDependencies
    - getResult
    - fnQueue
    - asyncResult
    - to
    - relativeURL
    - toJSON
    - to
    - invariant
    - to
    - requireStub
    - loadChunk
    - loadChunkPath
    - createResolvePathFromModule
    - resolvePathFromModule
    - resolveAbsolutePath
    - getWorkerBlobURL
    - addModuleToChunk
    - getFirstModuleChunk
    - instantiateRuntimeModule
    - getChunkRelativeUrl
    - markChunkListAsRuntime
    - registerChunk
    - getOrInstantiateRuntimeModule
    - getOrInstantiateModuleFromParent
    - instantiateModule
    - runModuleExecutionHooks
    - registerExportsAndSetupBoundaryForReactRefresh
    - formatDependencyChain
    - computeOutdatedModules
    - computedInvalidatedModules
    - computeOutdatedSelfAcceptedModules
    - updateChunksPhase
    - disposePhase
    - disposeModule
    - applyPhase
    - applyUpdate
    - applyChunkListUpdate
    - applyEcmascriptMergedUpdate
    - applyInvalidatedModules
    - applyInternal
    - reportError
    - computeChangedModules
    - getAffectedModuleEffects
    - handleApply
    - createModuleHot
    - removeModuleFromChunk
    - disposeChunkList
    - disposeChunk
    - registerChunkList
    - augmentContext
    - fetchWebAssembly
    - loadWebAssembly
    - loadWebAssemblyModule
    - getOrCreateResolver
    - doLoadChunk
    - onerror
    - onload
    - onerror
    - onerror
    - onload
    - deleteResolver
    - _eval
  Comments:
    /**
 * This file contains runtime types and functions that are shared between all
 * TurboPack ECMAScript runtimes.
 *
 * It will be prepended to the runtime code of each runtime.
 */
    /* eslint-disable @typescript-eslint/no-unused-vars */
    /// <reference path="./runtime-types.d.ts" />
    /**
 * Adds the getters to the exports object.
 */
    /**
 * Makes the module an ESM with exports
 */
    /**
 * Dynamically exports properties from an object
 */
    /**
 * @returns prototype of the object
 */
    /** Prototypes that are not expanded for exports */
    /**
 * @param raw
 * @param ns
 * @param allowExportDefault
 *   * `false`: will have the raw module as default export
 *   * `true`: will have the default property as default export
 */
    // this is not really correct
    // we should set the `default` getter if the imported module is a `.cjs file`
    // any ES module has to have `module.namespaceObject` defined.
    // only ESM can be an async module, so we don't need to worry about exports being a promise here.
    // Add a simple runtime require so that environments without one can still pass
    // `typeof require` CommonJS checks so that exports are correctly registered.
    // @ts-ignore
    /**
 * `require.context` and require/import expression runtime.
 */
    /**
 * Returns the path of a chunk defined by its data.
 */
    // everything below is adapted from webpack
    // https://github.com/webpack/webpack/blob/6be4065ade1e252c1d8dcba4af0f43e32af1bdc1/lib/runtime/AsyncModuleRuntimeModule.js#L13
    // Calling `esmExport` leads to this.
    /**
 * A pseudo "fake" URL object to resolve to its relative path.
 *
 * When UrlRewriteBehavior is set to relative, calls to the `new URL()` will construct url without base using this
 * runtime function to generate context-agnostic urls between different rendering context, i.e ssr / client to avoid
 * hydration mismatch.
 *
 * This is based on webpack's existing implementation:
 * https://github.com/webpack/webpack/blob/87660921808566ef3b8796f8df61bd79fc026108/lib/runtime/RelativeUrlRuntimeModule.js
 */
    /**
 * Utility function to ensure all variants of an enum are handled.
 */
    /**
 * A stub function to make `require` available but non-functional in ESM.
 */
    /**
 * This file contains runtime types and functions that are shared between all
 * Turbopack *development* ECMAScript runtimes.
 *
 * It will be appended to the runtime code of each runtime right after the
 * shared runtime utils.
 */
    /* eslint-disable @typescript-eslint/no-unused-vars */
    /// <reference path="../base/globals.d.ts" />
    /// <reference path="../../../shared/runtime-utils.ts" />
    /*#__PURE__*/
    /**
   * The module was instantiated because it was included in an evaluated chunk's
   * runtime.
   */
    /**
   * The module was instantiated because a parent module imported it.
   */
    /**
   * The module was instantiated because it was included in a chunk's hot module
   * update.
   */
    /**
 * Module IDs that are instantiated as part of the runtime of a chunk.
 */
    /**
 * Map from module ID to the chunks that contain this module.
 *
 * In HMR, we need to keep track of which modules are contained in which so
 * chunks. This is so we don't eagerly dispose of a module when it is removed
 * from chunk A, but still exists in chunk B.
 */
    /**
 * Map from a chunk path to all modules it contains.
 */
    /**
 * Chunk lists that contain a runtime. When these chunk lists receive an update
 * that can't be reconciled with the current state of the page, we need to
 * reload the runtime entirely.
 */
    /**
 * Map from a chunk list to the chunk paths it contains.
 */
    /**
 * Map from a chunk path to the chunk lists it belongs to.
 */
    // When all included items are already loaded or loading, we can skip loading ourselves
    // TODO(alexkirsz) Do we need this check?
    // if (moduleFactories[included]) return true;
    // Some module chunks are already loaded or loading.
    // When all included module chunks are already loaded or loading, we can skip loading ourselves
    // Mark all included module chunks as loading if they are not already loaded or loading.
    // It might be better to race old and new promises, but it's rare that the new promise will be faster than a request started earlier.
    // In production it's even more rare, because the chunk optimization tries to deduplicate modules anyway.
    /**
 * Returns an absolute url to an asset.
 */
    /**
 * no-op for browser
 * @param modulePath
 */
    /**
 * Adds a module to a chunk.
 */
    /**
 * Returns the first chunk that included a module.
 * This is used by the Node.js backend, hence why it's marked as unused in this
 * file.
 */
    /**
 * Instantiates a runtime module.
 */
    /**
 * Returns the URL relative to the origin where a chunk can be fetched from.
 */
    /**
 * Marks a chunk list as a runtime chunk list. There can be more than one
 * runtime chunk list. For instance, integration tests can have multiple chunk
 * groups loaded at runtime, each with its own chunk list.
 */
    /// <reference path="./dev-globals.d.ts" />
    /// <reference path="./dev-protocol.d.ts" />
    /// <reference path="./dev-extensions.ts" />
    /**
 * This file contains runtime types and functions that are shared between all
 * Turbopack *development* ECMAScript runtimes.
 *
 * It will be appended to the runtime code of each runtime right after the
 * shared runtime utils.
 */
    /* eslint-disable @typescript-eslint/no-unused-vars */
    /**
 * Maps module IDs to persisted data between executions of their hot module
 * implementation (`hot.data`).
 */
    /**
 * Maps module instances to their hot module state.
 */
    /**
 * Modules that call `module.hot.invalidate()` (while being updated).
 */
    /**
 * Gets or instantiates a runtime module.
 */
    // @ts-ignore
    // @ts-ignore
    /**
 * Retrieves a module from the cache, or instantiate it if it is not cached.
 */
    // @ts-ignore Defined in `runtime-utils.ts`
    // @ts-ignore Defined in `runtime-base.ts`
    // This can happen if modules incorrectly handle HMR disposes/updates,
    // e.g. when they keep a `setTimeout` around which still executes old code
    // and contains e.g. a `require("something")` call.
    // No need to add this module as a child of the parent module here, this
    // has already been taken care of in `getOrInstantiateModuleFromParent`.
    // NOTE(alexkirsz) This can fail when the module encounters a runtime error.
    // in case of a circular dependency: cjs1 -> esm2 -> cjs1
    /**
 * NOTE(alexkirsz) Webpack has a "module execution" interception hook that
 * Next.js' React Refresh runtime hooks into to add module context to the
 * refresh registry.
 */
    // Always cleanup the intercept, even if module execution failed.
    /**
 * This is adapted from https://github.com/vercel/next.js/blob/3466862d9dc9c8bb3131712134d38757b918d1c0/packages/react-refresh-utils/internal/ReactRefreshModule.runtime.ts
 */
    // A module can be accepted automatically based on its exports, e.g. when
    // it is a Refresh Boundary.
    // Save the previous exports on update, so we can compare the boundary
    // signatures.
    // Unconditionally accept an update to this module, we'll check if it's
    // still a Refresh Boundary later.
    // This field is set when the previous version of this module was a
    // Refresh Boundary, letting us know we need to check for invalidation or
    // enqueue an update.
    // A boundary can become ineligible if its exports are incompatible
    // with the previous exports.
    //
    // For example, if you add/remove/change exports, we'll want to
    // re-execute the importing modules, and force those components to
    // re-render. Similarly, if you convert a class component to a
    // function, we want to invalidate the boundary.
    // Since we just executed the code for the module, it's possible that the
    // new exports made it ineligible for being a boundary.
    // We only care about the case when we were _previously_ a boundary,
    // because we already accepted this update (accidental side effect).
    // TODO(alexkirsz) Dependencies: handle dependencies effects.
    /**
 * Adds, deletes, and moves modules between chunks. This must happen before the
 * dispose phase as it needs to know which modules were removed from all chunks,
 * which we can only compute *after* taking care of added and moved modules.
 */
    // Removing modules from the module cache is a separate step.
    // We also want to keep track of previous parents of the outdated modules.
    // TODO(alexkirsz) Dependencies: remove outdated dependency from module
    // children.
    /**
 * Disposes of an instance of a module.
 *
 * Returns the persistent hot data that should be kept for the next module
 * instance.
 *
 * NOTE: mode = "replace" will not remove modules from the devModuleCache
 * This must be done in a separate step afterwards.
 * This is important because all modules need to be disposed to update the
 * parent/child relationships before they are actually removed from the devModuleCache.
 * If this was done in this method, the following disposeModule calls won't find
 * the module from the module id in the cache.
 */
    // Run the `hot.dispose` handler, if any, passing in the persistent
    // `hot.data` object.
    // This used to warn in `getOrInstantiateModuleFromParent` when a disposed
    // module is still importing other modules.
    // TODO(alexkirsz) Dependencies: delete the module from outdated deps.
    // Remove the disposed module from its children's parent list.
    // It will be added back once the module re-instantiates and imports its
    // children again.
    // Update module factories.
    // TODO(alexkirsz) Run new runtime entries here.
    // TODO(alexkirsz) Dependencies: call accept handlers for outdated deps.
    // Re-instantiate all outdated self-accepted modules.
    // we want to continue on error and only throw the error after we tried applying all updates
    // We could also use `mergedChunkUpdate.modules` here.
    // If a module was added from one chunk and deleted from another in the same update,
    // consider it to be modified, as it means the module was moved from one chunk to another
    // AND has new code in a single update.
    // Modules that haven't been added to any chunk but have new code are considered
    // to be modified.
    // This needs to be under the previous loop, as we need it to get rid of modules
    // that were added and deleted in the same update.
    // We've arrived at the runtime of the chunk, which means that nothing
    // else above can accept this update.
    // The module is not in the cache. Since this is a "modified" update,
    // it means that the module was never instantiated before.
    // TODO(alexkirsz) Dependencies: check accepted and declined
    // dependencies here.
    // This indicates that the update is can be applied to the current state of the application.
    // This indicates that there is no way to apply the update to the
    // current state of the application, and that the application must be
    // restarted.
    // This indicates that the chunk list no longer exists: either the dynamic import which created it was removed,
    // or the page itself was deleted.
    // If it is a dynamic import, we simply discard all modules that the chunk has exclusive access to.
    // If it is a runtime chunk list, we restart the application.
    // TODO(alexkirsz) This is not defined in the HMR API. It was used to
    // decide whether to warn whenever an HMR-disposed module required other
    // modules. We might want to remove it.
    // TODO(alexkirsz) Support full (dep, callback, errorHandler) form.
    // NOTE(alexkirsz) This is part of the management API, which we don't
    // implement, but the Next.js React Refresh runtime uses this to decide
    // whether to schedule an update.
    // NOTE(alexkirsz) Since we always return "idle" for now, these are no-ops.
    // NOTE(jridgewell) Check returns the list of updated modules, but we don't
    // want the webpack code paths to ever update (the turbopack paths handle
    // this already).
    /**
 * Removes a module from a chunk.
 * Returns `true` if there are no remaining chunks including this module.
 */
    /**
 * Disposes of a chunk list and its corresponding exclusive chunks.
 */
    // We must also dispose of the chunk list's chunk itself to ensure it may
    // be reloaded properly in the future.
    /**
 * Disposes of a chunk and its corresponding exclusive modules.
 *
 * @returns Whether the chunk was disposed of.
 */
    // This should happen whether the chunk has any modules in it or not.
    // For instance, CSS chunks have no modules in them, but they still need to be unloaded.
    /**
 * Subscribes to chunk list updates from the update server and applies them.
 */
    // Adding chunks to chunk lists and vice versa.
    /**
 * This file contains the runtime code specific to the Turbopack development
 * ECMAScript DOM runtime.
 *
 * It will be appended to the base development runtime code.
 */
    /* eslint-disable @typescript-eslint/no-unused-vars */
    /// <reference path="../../../browser/runtime/base/runtime-base.ts" />
    /// <reference path="../../../shared/runtime-types.d.ts" />
    /**
 * Maps chunk paths to the corresponding resolver.
 */
    // Chunk might have started loading, so we want to avoid triggering another load.
    // This waits for chunks to be loaded, but also marks included items as available.
    /**
   * Loads the given chunk, and returns a promise that resolves once the chunk
   * has been loaded.
   */
    // We don't need to load chunks references from runtime code, as they're already
    // present in the DOM.
    // CSS chunks do not register themselves, and as such must be marked as
    // loaded instantly.
    // We need to wait for JS chunks to register themselves within `registerChunk`
    // before we can start instantiating runtime modules, hence the absence of
    // `resolver.resolve()` in this branch.
    // We're in a web worker
    // ignore
    // CSS chunks do not register themselves, and as such must be marked as
    // loaded instantly.
    // CSS chunks do not register themselves, and as such must be marked as
    // loaded instantly.
    // There is this edge where the script already failed loading, but we
    // can't detect that. The Promise will never resolve in this case.
    // We'll only mark the chunk as loaded once the script has been executed,
    // which happens in `registerChunk`. Hence the absence of `resolve()` in
    // this branch.
    /**
 * This file contains the runtime code specific to the Turbopack development
 * ECMAScript DOM runtime.
 *
 * It will be appended to the base development runtime code.
 */
    /* eslint-disable @typescript-eslint/no-unused-vars */
    /// <reference path="../base/runtime-base.ts" />
    /// <reference path="../base/dev-base.ts" />
    /// <reference path="./runtime-backend-dom.ts" />
    /// <reference path="../../../shared/require-type.d.ts" />
    // TODO(PACK-2140): remove this once all filenames are guaranteed to be escaped.
    // Unloading a JS chunk would have no effect, as it lives in the JS
    // runtime once evaluated.
    // However, we still want to remove the script tag from the DOM to keep
    // the HTML somewhat consistent from the user's perspective.
    // Firefox won't reload CSS files that were previously loaded on the current page,
    // we need to add a query param to make sure CSS is actually reloaded from the server.
    //
    // I believe this is this issue: https://bugzilla.mozilla.org/show_bug.cgi?id=1037506
    //
    // Safari has a similar issue, but only if you have a `<link rel=preload ... />` tag
    // pointing to the same URL as the stylesheet: https://bugs.webkit.org/show_bug.cgi?id=187726
    // First load the new CSS, then remove the old ones. This prevents visible
    // flickering that would happen in-between removing the previous CSS and
    // loading the new one.
    // CSS chunks do not register themselves, and as such must be marked as
    // loaded instantly.
    // Make sure to insert the new CSS right after the previous one, so that
    // its precedence is higher.
    //# sourceURL=${encodeURI(location.origin + CHUNK_BASE_PATH + url)}`;
    //# sourceMappingURL=data:application/json;charset=utf-8;base64,${btoa(// btoa doesn't handle nonlatin characters, so escape them as \x sequences
    // See https://stackoverflow.com/a/26603875
    // eslint-disable-next-line no-eval
    //# sourceMappingURL=pages__error_b8c4c3._.js.map

File: ./frontend/.next/static/chunks/node_modules_next_dist_4bb10e._.js
  JavaScript Functions:
    - _export
    - getObjectClassLabel
    - isPlainObject
    - _export
    - isBailoutToCSRError
    - _export
    - djb2Hash
    - hexHash
    - _export
    - isGroupSegment
    - isParallelRouteSegment
    - addSearchParamsIfPageSegment
    - ensures
    - ensureLeadingSlash
    - _export
    - normalizeAppPath
    - normalizeRscURL
    - _export
    - _export
    - isThenable
    - isBot
    - will
    - parsePath
    - addPathPrefix
    - removeTrailingSlash
    - _export
    - useServerInsertedHTML
    - pathHasPrefix
    - warnOnce
    - warnOnce
    - _export
    - decodeHex
    - decodeMagicIdentifier
    - _export
    - getErrorSource
    - decorateServerError
    - normalizedAssetPrefix
    - runRemainingActions
    - runAction
    - handleResult
    - dispatchAction
    - createMutableActionQueue
    - _export
    - isError
    - safeStringify
    - getProperError
    - _export
    - _export
    - isInterceptionRouteAppPath
    - extractInterceptionRouteInformation
    - getSegmentParam
    - _export
    - createAsyncLocalStorage
    - bindSnapshot
    - createSnapshot
    - _export
    - getExpectedRequestStore
    - getPrerenderResumeDataCache
    - getRenderResumeDataCache
    - constructs
    - makeHangingPromise
    - ignoreReject
    - _export
    - _interop_require_default
    - createDynamicTrackingState
    - createDynamicValidationState
    - getFirstDynamicReason
    - markCurrentScopeAsDynamic
    - trackFallbackParamAccessed
    - throwToInterruptStaticGeneration
    - trackDynamicDataInDynamicRender
    - abortOnSynchronousDynamicDataAccess
    - abortOnSynchronousPlatformIOAccess
    - trackSynchronousPlatformIOAccessInDev
    - abortAndThrowOnSynchronousRequestDataAccess
    - Postpone
    - postponeWithTracking
    - createPostponeReason
    - isDynamicPostpone
    - isDynamicPostponeReason
    - createPrerenderInterruptedError
    - isPrerenderInterruptedError
    - accessedDynamicData
    - consumeDynamicAccess
    - formatDynamicAPIAccesses
    - assertPostpone
    - createPostponedAbortSignal
    - annotateDynamicAccess
    - useDynamicRouteParams
    - trackAllowedDynamicAccess
    - createErrorWithComponentStack
    - throwIfDisallowedDynamic
    - isPostpone
    - extractModulesFromTurbopackMessage
    - isDynamicUsageError
  Comments:
    //# sourceMappingURL=process.js.map
    /**
   * this used to be previously:
   *
   * `return prototype === null || prototype === Object.prototype`
   *
   * but Edge Runtime expose Object from vm, being that kind of type-checking wrongly fail.
   *
   * It was changed to the current implementation since it's resilient to serialization.
   */
    //# sourceMappingURL=is-plain-object.js.map
    /*#__PURE__*/
    //# sourceMappingURL=head-manager-context.shared-runtime.js.map
    // This has to be a shared module which is shared between client component error boundary and dynamic component
    //# sourceMappingURL=bailout-to-csr.js.map
    // http://www.cse.yorku.ca/~oz/hash.html
    // More specifically, 32-bit hash via djbxor
    // (ref: https://gist.github.com/eplawless/52813b1d8ad9af510d85?permalink_comment_id=3367765#gistcomment-3367765)
    // This is due to number type differences between rust for turbopack to js number types,
    // where rust does not have easy way to repreesnt js's 53-bit float number type for the matching
    // overflow behavior. This is more `correct` in terms of having canonical hash across different runtime / implementation
    // as can gaurantee determinstic output from 32bit hash.
    //# sourceMappingURL=hash.js.map
    // Use array[0] for performant purpose
    //# sourceMappingURL=segment.js.map
    /**
 * For a given page path, this function ensures that there is a leading slash.
 * If there is not a leading slash, one is added, otherwise it is noop.
 */
    //# sourceMappingURL=ensure-leading-slash.js.map
    // Empty segments are ignored.
    // Groups are ignored.
    // Parallel segments are ignored.
    // The last segment (if it's a leaf) should be ignored.
    //# sourceMappingURL=app-paths.js.map
    /*#__PURE__*/
    //# sourceMappingURL=app-router-context.shared-runtime.js.map
    //# sourceMappingURL=hooks-client-context.shared-runtime.js.map
    /**
 * Check to see if a value is Thenable.
 *
 * @param promise the maybe-thenable value
 * @returns true if the value is thenable
 */
    //# sourceMappingURL=is-thenable.js.map
    //# sourceMappingURL=is-bot.js.map
    /**
 * Given a path this function will find the pathname, query and hash and return
 * them. This is useful to parse full paths on the client side.
 * @param path A path to parse e.g. /foo/bar?id=1#hash
 */
    //# sourceMappingURL=parse-path.js.map
    //# sourceMappingURL=add-path-prefix.js.map
    /**
 * Removes the trailing slash for a given route or page path. Preserves the
 * root page. Examples:
 *   - `/foo/bar/` -> `/foo/bar`
 *   - `/foo/bar` -> `/foo/bar`
 *   - `/` -> `/`
 */
    //# sourceMappingURL=remove-trailing-slash.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    // Should have no effects on client where there's no flush effects provider
    //# sourceMappingURL=server-inserted-html.shared-runtime.js.map
    //# sourceMappingURL=path-has-prefix.js.map
    //# sourceMappingURL=warn-once.js.map
    //# sourceMappingURL=magic-identifier.js.map
    //# sourceMappingURL=error-source.js.map
    // remove all leading slashes and trailing slashes
    // if an assetPrefix was '/', we return empty string
    // because it could be an unnecessary trailing slash
    // assuming assetPrefix here is a pathname-style,
    // restore the leading slash
    //# sourceMappingURL=normalized-asset-prefix.js.map
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    // No more actions are pending, check if a refresh is needed
    // if we discarded this action, the state should also be discarded
    // if the action is a promise, set up a callback to resolve it
    // most of the action types are async with the exception of restore
    // it's important that restore is handled quickly since it's fired on the popstate event
    // and we don't want to add any delay on a back/forward nav
    // this only creates a promise for the async actions
    // Create the promise and assign the resolvers to the object.
    // we immediately notify React of the pending promise -- the resolver is attached to the action node
    // and will be called when the associated action promise resolves
    // Check if the queue is empty
    // The queue is empty, so add the action and start it immediately
    // Mark this action as the last in the queue
    // Navigations (including back/forward) take priority over any pending actions.
    // Mark the pending action as discarded (so the state is never applied) and start the navigation action immediately.
    // Mark this action as the last in the queue
    // if the pending action was a server action, mark the queue as needing a refresh once events are processed
    // The queue is not empty, so add the action to the end of the queue
    // It will be started by runRemainingActions after the previous action finishes
    //# sourceMappingURL=action-queue.js.map
    /**
 * Checks whether the given value is a NextError.
 * This can be used to print a more detailed error message with properties like `code` & `digest`.
 */
    // If value is an object and already seen, replace with "[Circular]"
    // provide better error for case where `throw undefined`
    // is called in development
    //nextjs.org/docs/messages/threw-undefined');
    //nextjs.org/docs/messages/threw-undefined');
    //# sourceMappingURL=is-error.js.map
    //# sourceMappingURL=metadata-constants.js.map
    // TODO-APP: add more serious validation
    // normalize the path, e.g. /(blog)/feed -> /feed
    // (.) indicates that we should match with sibling routes, so we just need to append the intercepted route to the intercepting route
    // (..) indicates that we should match at one level up, so we need to remove the last segment of the intercepting route
    // (...) will match the route segment in the root directory, so we need to use the root directory to prepend the intercepted route
    // (..)(..) indicates that we should match at two levels up, so we need to remove the last two segments of the intercepting route
    //# sourceMappingURL=interception-routes.js.map
    // if an interception marker is part of the path segment, we need to jump ahead
    // to the relevant portion for param parsing
    // TODO-APP: Optional catchall does not currently work with parallel routes,
    // so for now aren't handling a potential interception marker.
    //# sourceMappingURL=get-segment-param.js.map
    // This fake implementation of AsyncLocalStorage always returns `undefined`.
    //# sourceMappingURL=async-local-storage.js.map
    //# sourceMappingURL=work-async-storage-instance.js.map
    //# sourceMappingURL=work-async-storage.external.js.map
    //# sourceMappingURL=action-async-storage-instance.js.map
    //# sourceMappingURL=action-async-storage.external.js.map
    //# sourceMappingURL=work-unit-async-storage-instance.js.map
    // This should not happen because we should have checked it already.
    //nextjs.org/docs/messages/next-request-in-use-cache`);
    //nextjs.org/docs/app/api-reference/functions/unstable_cache`);
    //nextjs.org/docs/messages/next-dynamic-api-wrong-context`);
    // We return the mutable resume data cache here as an immutable version of
    // the cache as it can also be used for reading.
    //# sourceMappingURL=work-unit-async-storage.external.js.map
    /**
 * This function constructs a promise that will never resolve. This is primarily
 * useful for dynamicIO where we use promise resolution timing to determine which
 * parts of a render can be included in a prerender.
 *
 * @internal
 */
    // We are fine if no one actually awaits this promise. We shouldn't consider this an unhandled rejection so
    // we attach a noop catch handler here to suppress this warning. If you actually await somewhere or construct
    // your own promise out of it you'll need to ensure you handle the error when it rejects.
    //# sourceMappingURL=dynamic-rendering-utils.js.map
    /**
 * The functions provided by this module are used to communicate certain properties
 * about the currently running code so that Next.js can make decisions on how to handle
 * the current execution in different rendering modes such as pre-rendering, resuming, and SSR.
 *
 * Today Next.js treats all code as potentially static. Certain APIs may only make sense when dynamically rendering.
 * Traditionally this meant deopting the entire render to dynamic however with PPR we can now deopt parts
 * of a React tree as dynamic while still keeping other parts static. There are really two different kinds of
 * Dynamic indications.
 *
 * The first is simply an intention to be dynamic. unstable_noStore is an example of this where
 * the currently executing code simply declares that the current scope is dynamic but if you use it
 * inside unstable_cache it can still be cached. This type of indication can be removed if we ever
 * make the default dynamic to begin with because the only way you would ever be static is inside
 * a cache scope which this indication does not affect.
 *
 * The second is an indication that a dynamic data source was read. This is a stronger form of dynamic
 * because it means that it is inappropriate to cache this at all. using a dynamic data source inside
 * unstable_cache should error. If you want to use some dynamic data inside unstable_cache you should
 * read that data outside the cache and pass it in as an argument to the cached function.
 */
    /*#__PURE__*/
    // inside cache scopes marking a scope as dynamic has no effect because the outer cache scope
    // creates a cache boundary. This is subtly different from reading a dynamic data source which is
    // forbidden inside a cache scope.
    // If we're forcing dynamic rendering or we're forcing static rendering, we
    // don't need to do anything here because the entire page is already dynamic
    // or it's static and it should not throw or postpone here.
    //nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);
    // We aren't prerendering but we are generating a static page. We need to bail out of static generation
    //nextjs.org/docs/messages/dynamic-server-error`);
    // We aren't prerendering but we are generating a static page. We need to bail out of static generation
    //nextjs.org/docs/messages/dynamic-server-error`);
    // inside cache scopes marking a scope as dynamic has no effect because the outer cache scope
    // creates a cache boundary. This is subtly different from reading a dynamic data source which is
    // forbidden inside a cache scope.
    // Despite it's name we don't actually abort unless we have a controller to call abort on
    // There are times when we let a prerender run long to discover caches where we want the semantics
    // of tracking dynamic access without terminating the prerender early
    // When we aren't debugging, we don't need to create another error for the
    // stack trace.
    // We don't actually have a controller to abort but we do the semantic equivalent by
    // advancing the request store out of prerender mode
    // We always log Request Access in dev at the point of calling the function
    // So we mark the dynamic validation as not requiring it to be printed
    // When we aren't debugging, we don't need to create another error for the
    // stack trace.
    //nextjs.org/docs/messages/ppr-caught-error`;
    //nextjs.org/docs/messages/ppr-caught-error');
    // We mutate because we only call this once we are no longer writing
    // to the dynamicTrackingState and it's more efficient than creating a new
    // array.
    // Remove the "Error: " prefix from the first line of the stack trace as
    // well as the first 4 lines of the stack trace which is the distance
    // from the user code and the `new Error().stack` call.
    // Exclude Next.js internals from the stack trace.
    // Exclude anonymous functions from the stack trace.
    // Exclude Node.js internals from the stack trace.
    // We get our hands on a postpone instance by calling postpone and catching the throw
    // There are fallback route params, we should track these as dynamic
    // accesses.
    // We're prerendering with dynamicIO or PPR or both
    // We are in a prerender with dynamicIO semantics
    // We are going to hang here and never resolve. This will cause the currently
    // rendering component to effectively be a dynamic hole
    // We're prerendering with PPR
    // We don't need to track that this is dynamic. It is only so when something else is also dynamic.
    //nextjs.org/docs/messages/next-prerender-missing-suspense`;
    // In dev we already log errors about sync dynamic access. But during builds we need to ensure
    // the offending sync error is logged before we exit the build
    // The actual error should have been logged when the sync access ocurred
    //# sourceMappingURL=dynamic-rendering.js.map
    //# sourceMappingURL=is-postpone.js.map
    /*#__PURE__*/
    //# sourceMappingURL=hot-reloader-types.js.map
    // TODO this won't capture changes to CSS since they don't result in a "merged" update
    //# sourceMappingURL=extract-modules-from-turbopack-message.js.map
    //# sourceMappingURL=is-dynamic-usage-error.js.map
    //# sourceMappingURL=node_modules_next_dist_4bb10e._.js.map

File: ./frontend/.next/static/chunks/_cc6476._.js
  JavaScript Functions:
    - AllTasks
    - handleDragEnd
    - getComponentNameFromType
    - testStringCoercion
    - checkKeyStringCoercion
    - disabledLog
    - disableLogs
    - reenableLogs
    - describeBuiltInComponentFrame
    - describeNativeComponentFrame
    - describeUnknownElementTypeFrameInDEV
    - getOwner
    - hasValidKey
    - defineKeyPropWarningGetter
    - warnAboutAccessingKey
    - elementRefGetterWithDeprecationWarning
    - ReactElement
    - jsxDEVImpl
    - validateChildKeys
    - isValidElement
    - validateExplicitKey
    - getCurrentComponentErrorInfo
    - UserCircleIcon
    - ClipboardDocumentCheckIcon
    - BookmarkIcon
  Comments:
    // Task toggle & type icons
    //127.0.0.1:5000/api/tasks").then({
    // Drag & Drop handler
    // If dropped outside, do nothing
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //127.0.0.1:5000/dashboard",
    /*#__PURE__*/
    //127.0.0.1:5000/tasks/",
    /*#__PURE__*/
    //localhost:3000/alltasks",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /**
 * @license React
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    //react.dev/link/special-props)", displayName));
    //react.dev/link/warning-keys for more information.', parentType, childOwner);
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=_cc6476._.js.map

File: ./frontend/.next/static/chunks/src_app_alltasks_[taskId]_page_71263d.js

File: ./frontend/.next/static/chunks/node_modules_next_dist_build_polyfills_polyfill-nomodule.js
  JavaScript Functions:
    - e
    - t
    - t
    - t
    - t
    - t
    - Jm
    - Qm
    - Zm
    - tb
    - eb
    - rb
    - nb
    - ob
    - ib
    - ub
    - sb
    - cb
    - hb
    - a
  Comments:
    //github.com/zloirock/core-js/blob/v3.38.1/LICENSE",source:"https://github.com/zloirock/core-js"})}),nt=function(t,e){return rt[t]||(rt[t]=e||{})},ot=Object,it=function(t){return ot(j(t))},at=b({}.hasOwnProperty),ut=Object.hasOwn||function(t,e){return at(it(t),e)},st=0,ct=Math.random(),ft=b(1..toString),lt=function(t){return"Symbol("+(void 0===t?"":t)+")_"+ft(++st+ct,36)},ht=i.Symbol,pt=nt("wks"),vt=$?ht.for||ht:ht&&ht.withoutSetter||lt,dt=function(t){return ut(pt,t)||(pt[t]=H&&ut(ht,t)?ht[t]:vt("Symbol."+t)),pt[t]},gt=TypeError,yt=dt("toPrimitive"),mt=function(t,e){if(!M(t)||G(t))return t;var r,n=Q(t,yt);if(n){if(void 0===e&&(e="default"),r=f(n,t,e),!M(r)||G(r))return r;throw new gt("Can't convert object to primitive value")}return void 0===e&&(e="number"),function(t,e){var r,n;if("string"===e&&T(r=t.toString)&&!M(n=f(r,t)))return n;if(T(r=t.valueOf)&&!M(n=f(r,t)))return n;if("string"!==e&&T(r=t.toString)&&!M(n=f(r,t)))return n;throw new Z("Can't convert object to primitive value")}(t,e)},bt=function(t){var e=mt(t,"string");return G(e)?e:e+""},wt=i.document,St=M(wt)&&M(wt.createElement),Et=function(t){return St?wt.createElement(t):{}},Ot=!u&&!a(function(){return 7!==Object.defineProperty(Et("div"),"a",{get:function(){return 7}}).a}),xt=Object.getOwnPropertyDescriptor,Rt={f:u?xt:function(t,e){if(t=k(t),e=bt(e),Ot)try{return xt(t,e)}catch(t){}if(ut(t,e))return d(!f(v.f,t,e),t[e])}},Pt=u&&a(function(){return 42!==Object.defineProperty(function(){},"prototype",{value:42,writable:!1}).prototype}),At=String,jt=TypeError,kt=function(t){if(M(t))return t;throw new jt(At(t)+" is not an object")},It=TypeError,Tt=Object.defineProperty,Mt=Object.getOwnPropertyDescriptor,Lt="enumerable",Ut="configurable",Nt="writable",Ct={f:u?Pt?function(t,e,r){if(kt(t),e=bt(e),kt(r),"function"==typeof t&&"prototype"===e&&"value"in r&&Nt in r&&!r[Nt]){var n=Mt(t,e);n&&n[Nt]&&(t[e]=r.value,r={configurable:Ut in r?r[Ut]:n[Ut],enumerable:Lt in r?r[Lt]:n[Lt],writable:!1})}return Tt(t,e,r)}:Tt:function(t,e,r){if(kt(t),e=bt(e),kt(r),Ot)try{return Tt(t,e,r)}catch(t){}if("get"in r||"set"in r)throw new It("Accessors not supported");return"value"in r&&(t[e]=r.value),t}},_t=u?function(t,e,r){return Ct.f(t,e,d(1,r))}:function(t,e,r){return t[e]=r,t},Ft=Function.prototype,Bt=u&&Object.getOwnPropertyDescriptor,Dt=ut(Ft,"name"),zt={EXISTS:Dt,PROPER:Dt&&"something"===function(){}.name,CONFIGURABLE:Dt&&(!u||u&&Bt(Ft,"name").configurable)},Wt=b(Function.toString);T(rt.inspectSource)||(rt.inspectSource=function(t){return Wt(t)});var qt,Ht,$t,Kt=rt.inspectSource,Gt=i.WeakMap,Vt=T(Gt)&&/native code/.test(String(Gt)),Yt=nt("keys"),Xt=function(t){return Yt[t]||(Yt[t]=lt(t))},Jt={},Qt="Object already initialized",Zt=i.TypeError;if(Vt||rt.state){var te=rt.state||(rt.state=new(0,i.WeakMap));te.get=te.get,te.has=te.has,te.set=te.set,qt=function(t,e){if(te.has(t))throw new Zt(Qt);return e.facade=t,te.set(t,e),e},Ht=function(t){return te.get(t)||{}},$t=function(t){return te.has(t)}}else{var ee=Xt("state");Jt[ee]=!0,qt=function(t,e){if(ut(t,ee))throw new Zt(Qt);return e.facade=t,_t(t,ee,e),e},Ht=function(t){return ut(t,ee)?t[ee]:{}},$t=function(t){return ut(t,ee)}}var re,ne={set:qt,get:Ht,has:$t,enforce:function(t){return $t(t)?Ht(t):qt(t,{})},getterFor:function(t){return function(e){var r;if(!M(e)||(r=Ht(e)).type!==t)throw new Zt("Incompatible receiver, "+t+" required");return r}}},oe=e(function(t){var e=zt.CONFIGURABLE,r=ne.enforce,n=ne.get,o=String,i=Object.defineProperty,s=b("".slice),c=b("".replace),f=b([].join),l=u&&!a(function(){return 8!==i(function(){},"length",{value:8}).length}),h=String(String).split("String"),p=t.exports=function(t,n,a){"Symbol("===s(o(n),0,7)&&(n="["+c(o(n),/^Symbol\(([^)]*)\).*$/,"$1")+"]"),a&&a.getter&&(n="get "+n),a&&a.setter&&(n="set "+n),(!ut(t,"name")||e&&t.name!==n)&&(u?i(t,"name",{value:n,configurable:!0}):t.name=n),l&&a&&ut(a,"arity")&&t.length!==a.arity&&i(t,"length",{value:a.arity});try{a&&ut(a,"constructor")&&a.constructor?u&&i(t,"prototype",{writable:!1}):t.prototype&&(t.prototype=void 0)}catch(t){}var p=r(t);return ut(p,"source")||(p.source=f(h,"string"==typeof n?n:"")),t};Function.prototype.toString=p(function(){return T(this)&&n(this).source||Kt(this)},"toString")}),ie=function(t,e,r,n){n||(n={});var o=n.enumerable,i=void 0!==n.name?n.name:e;if(T(r)&&oe(r,i,n),n.global)o?t[e]=r:et(e,r);else{try{n.unsafe?t[e]&&(o=!0):delete t[e]}catch(t){}o?t[e]=r:Ct.f(t,e,{value:r,enumerable:!1,configurable:!n.nonConfigurable,writable:!n.nonWritable})}return t},ae=Math.ceil,ue=Math.floor,se=Math.trunc||function(t){var e=+t;return(e>0?ue:ae)(e)},ce=function(t){var e=+t;return e!=e||0===e?0:se(e)},fe=Math.max,le=Math.min,he=function(t,e){var r=ce(t);return r<0?fe(r+e,0):le(r,e)},pe=Math.min,ve=function(t){var e=ce(t);return e>0?pe(e,9007199254740991):0},de=function(t){return ve(t.length)},ge=function(t){return function(e,r,n){var o=k(e),i=de(o);if(0===i)return!t&&-1;var a,u=he(n,i);if(t&&r!=r){for(;i>u;)if((a=o[u++])!=a)return!0}else for(;i>u;u++)if((t||u in o)&&o[u]===r)return t||u||0;return!t&&-1}},ye={includes:ge(!0),indexOf:ge(!1)},me=ye.indexOf,be=b([].push),we=function(t,e){var r,n=k(t),o=0,i=[];for(r in n)!ut(Jt,r)&&ut(n,r)&&be(i,r);for(;e.length>o;)ut(n,r=e[o++])&&(~me(i,r)||be(i,r));return i},Se=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],Ee=Se.concat("length","prototype"),Oe={f:Object.getOwnPropertyNames||function(t){return we(t,Ee)}},xe={f:Object.getOwnPropertySymbols},Re=b([].concat),Pe=L("Reflect","ownKeys")||function(t){var e=Oe.f(kt(t)),r=xe.f;return r?Re(e,r(t)):e},Ae=function(t,e,r){for(var n=Pe(e),o=Ct.f,i=Rt.f,a=0;a<n.length;a++){var u=n[a];ut(t,u)||r&&ut(r,u)||o(t,u,i(e,u))}},je=/#|\.prototype\./,ke=function(t,e){var r=Te[Ie(t)];return r===Le||r!==Me&&(T(e)?a(e):!!e)},Ie=ke.normalize=function(t){return String(t).replace(je,".").toLowerCase()},Te=ke.data={},Me=ke.NATIVE="N",Le=ke.POLYFILL="P",Ue=ke,Ne=Rt.f,Ce=function(t,e){var r,n,o,a,u,s=t.target,c=t.global,f=t.stat;if(r=c?i:f?i[s]||et(s,{}):i[s]&&i[s].prototype)for(n in e){if(a=e[n],o=t.dontCallGetSet?(u=Ne(r,n))&&u.value:r[n],!Ue(c?n:s+(f?".":"#")+n,t.forced)&&void 0!==o){if(typeof a==typeof o)continue;Ae(a,o)}(t.sham||o&&o.sham)&&_t(a,"sham",!0),ie(r,n,a,t)}},_e=Object.keys||function(t){return we(t,Se)},Fe=u&&!Pt?Object.defineProperties:function(t,e){kt(t);for(var r,n=k(e),o=_e(e),i=o.length,a=0;i>a;)Ct.f(t,r=o[a++],n[r]);return t},Be={f:Fe},De=L("document","documentElement"),ze="prototype",We="script",qe=Xt("IE_PROTO"),He=function(){},$e=function(t){return"<"+We+">"+t+"</"+We+">"},Ke=function(t){t.write($e("")),t.close();var e=t.parentWindow.Object;return t=null,e},Ge=function(){try{re=new ActiveXObject("htmlfile")}catch(t){}var t,e,r;Ge="undefined"!=typeof document?document.domain&&re?Ke(re):(e=Et("iframe"),r="java"+We+":",e.style.display="none",De.appendChild(e),e.src=String(r),(t=e.contentWindow.document).open(),t.write($e("document.F=Object")),t.close(),t.F):Ke(re);for(var n=Se.length;n--;)delete Ge[ze][Se[n]];return Ge()};Jt[qe]=!0;var Ve=Object.create||function(t,e){var r;return null!==t?(He[ze]=kt(t),r=new He,He[ze]=null,r[qe]=t):r=Ge(),void 0===e?r:Be.f(r,e)},Ye=Ct.f,Xe=dt("unscopables"),Je=Array.prototype;void 0===Je[Xe]&&Ye(Je,Xe,{configurable:!0,value:Ve(null)});var Qe=function(t){Je[Xe][t]=!0};Ce({target:"Array",proto:!0},{at:function(t){var e=it(this),r=de(e),n=ce(t),o=n>=0?n:r+n;return o<0||o>=r?void 0:e[o]}}),Qe("at");var Ze=function(t,e){return b(i[t].prototype[e])},tr=(Ze("Array","at"),TypeError),er=function(t,e){if(!delete t[e])throw new tr("Cannot delete property "+Y(e)+" of "+Y(t))},rr=Math.min,nr=[].copyWithin||function(t,e){var r=it(this),n=de(r),o=he(t,n),i=he(e,n),a=arguments.length>2?arguments[2]:void 0,u=rr((void 0===a?n:he(a,n))-i,n-o),s=1;for(i<o&&o<i+u&&(s=-1,i+=u-1,o+=u-1);u-- >0;)i in r?r[o]=r[i]:er(r,o),o+=s,i+=s;return r};Ce({target:"Array",proto:!0},{copyWithin:nr}),Qe("copyWithin"),Ze("Array","copyWithin"),Ce({target:"Array",proto:!0},{fill:function(t){for(var e=it(this),r=de(e),n=arguments.length,o=he(n>1?arguments[1]:void 0,r),i=n>2?arguments[2]:void 0,a=void 0===i?r:he(i,r);a>o;)e[o++]=t;return e}}),Qe("fill"),Ze("Array","fill");var or=function(t){if("Function"===E(t))return b(t)},ir=or(or.bind),ar=function(t,e){return J(t),void 0===e?t:s?ir(t,e):function(){return t.apply(e,arguments)}},ur=Array.isArray||function(t){return"Array"===E(t)},sr={};sr[dt("toStringTag")]="z";var cr="[object z]"===String(sr),fr=dt("toStringTag"),lr=Object,hr="Arguments"===E(function(){return arguments}()),pr=cr?E:function(t){var e,r,n;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=lr(t),fr))?r:hr?E(e):"Object"===(n=E(e))&&T(e.callee)?"Arguments":n},vr=function(){},dr=L("Reflect","construct"),gr=/^\s*(?:class|function)\b/,yr=b(gr.exec),mr=!gr.test(vr),br=function(t){if(!T(t))return!1;try{return dr(vr,[],t),!0}catch(t){return!1}},wr=function(t){if(!T(t))return!1;switch(pr(t)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return mr||!!yr(gr,Kt(t))}catch(t){return!0}};wr.sham=!0;var Sr=!dr||a(function(){var t;return br(br.call)||!br(Object)||!br(function(){t=!0})||t})?wr:br,Er=dt("species"),Or=Array,xr=function(t,e){return new(function(t){var e;return ur(t)&&(Sr(e=t.constructor)&&(e===Or||ur(e.prototype))||M(e)&&null===(e=e[Er]))&&(e=void 0),void 0===e?Or:e}(t))(0===e?0:e)},Rr=b([].push),Pr=function(t){var e=1===t,r=2===t,n=3===t,o=4===t,i=6===t,a=7===t,u=5===t||i;return function(s,c,f,l){for(var h,p,v=it(s),d=R(v),g=de(d),y=ar(c,f),m=0,b=l||xr,w=e?b(s,g):r||a?b(s,0):void 0;g>m;m++)if((u||m in d)&&(p=y(h=d[m],m,v),t))if(e)w[m]=p;else if(p)switch(t){case 3:return!0;case 5:return h;case 6:return m;case 2:Rr(w,h)}else switch(t){case 4:return!1;case 7:Rr(w,h)}return i?-1:n||o?o:w}},Ar={forEach:Pr(0),map:Pr(1),filter:Pr(2),some:Pr(3),every:Pr(4),find:Pr(5),findIndex:Pr(6),filterReject:Pr(7)},jr=Ar.find,kr="find",Ir=!0;kr in[]&&Array(1)[kr](function(){Ir=!1}),Ce({target:"Array",proto:!0,forced:Ir},{find:function(t){return jr(this,t,arguments.length>1?arguments[1]:void 0)}}),Qe(kr),Ze("Array","find");var Tr=Ar.findIndex,Mr="findIndex",Lr=!0;Mr in[]&&Array(1)[Mr](function(){Lr=!1}),Ce({target:"Array",proto:!0,forced:Lr},{findIndex:function(t){return Tr(this,t,arguments.length>1?arguments[1]:void 0)}}),Qe(Mr),Ze("Array","findIndex");var Ur=TypeError,Nr=function(t){if(t>9007199254740991)throw Ur("Maximum allowed index exceeded");return t},Cr=function(t,e,r,n,o,i,a,u){for(var s,c,f=o,l=0,h=!!a&&ar(a,u);l<n;)l in r&&(s=h?h(r[l],l,e):r[l],i>0&&ur(s)?(c=de(s),f=Cr(t,e,s,c,f,i-1)-1):(Nr(f+1),t[f]=s),f++),l++;return f},_r=Cr;Ce({target:"Array",proto:!0},{flatMap:function(t){var e,r=it(this),n=de(r);return J(t),(e=xr(r,0)).length=_r(e,r,r,n,0,1,t,arguments.length>1?arguments[1]:void 0),e}}),Qe("flatMap"),Ze("Array","flatMap"),Ce({target:"Array",proto:!0},{flat:function(){var t=arguments.length?arguments[0]:void 0,e=it(this),r=de(e),n=xr(e,0);return n.length=_r(n,e,e,r,0,void 0===t?1:ce(t)),n}}),Qe("flat"),Ze("Array","flat");var Fr,Br,Dr,zr=String,Wr=function(t){if("Symbol"===pr(t))throw new TypeError("Cannot convert a Symbol value to a string");return zr(t)},qr=b("".charAt),Hr=b("".charCodeAt),$r=b("".slice),Kr=function(t){return function(e,r){var n,o,i=Wr(j(e)),a=ce(r),u=i.length;return a<0||a>=u?t?"":void 0:(n=Hr(i,a))<55296||n>56319||a+1===u||(o=Hr(i,a+1))<56320||o>57343?t?qr(i,a):n:t?$r(i,a,a+2):o-56320+(n-55296<<10)+65536}},Gr={codeAt:Kr(!1),charAt:Kr(!0)},Vr=!a(function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}),Yr=Xt("IE_PROTO"),Xr=Object,Jr=Xr.prototype,Qr=Vr?Xr.getPrototypeOf:function(t){var e=it(t);if(ut(e,Yr))return e[Yr];var r=e.constructor;return T(r)&&e instanceof r?r.prototype:e instanceof Xr?Jr:null},Zr=dt("iterator"),tn=!1;[].keys&&("next"in(Dr=[].keys())?(Br=Qr(Qr(Dr)))!==Object.prototype&&(Fr=Br):tn=!0);var en=!M(Fr)||a(function(){var t={};return Fr[Zr].call(t)!==t});en&&(Fr={}),T(Fr[Zr])||ie(Fr,Zr,function(){return this});var rn={IteratorPrototype:Fr,BUGGY_SAFARI_ITERATORS:tn},nn=Ct.f,on=dt("toStringTag"),an=function(t,e,r){t&&!r&&(t=t.prototype),t&&!ut(t,on)&&nn(t,on,{configurable:!0,value:e})},un={},sn=rn.IteratorPrototype,cn=function(){return this},fn=function(t,e,r,n){var o=e+" Iterator";return t.prototype=Ve(sn,{next:d(+!n,r)}),an(t,o,!1),un[o]=cn,t},ln=function(t,e,r){try{return b(J(Object.getOwnPropertyDescriptor(t,e)[r]))}catch(t){}},hn=String,pn=TypeError,vn=function(t){if(function(t){return M(t)||null===t}(t))return t;throw new pn("Can't set "+hn(t)+" as a prototype")},dn=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,r={};try{(t=ln(Object.prototype,"__proto__","set"))(r,[]),e=r instanceof Array}catch(t){}return function(r,n){return j(r),vn(n),M(r)?(e?t(r,n):r.__proto__=n,r):r}}():void 0),gn=zt.PROPER,yn=zt.CONFIGURABLE,mn=rn.IteratorPrototype,bn=rn.BUGGY_SAFARI_ITERATORS,wn=dt("iterator"),Sn="keys",En="values",On="entries",xn=function(){return this},Rn=function(t,e,r,n,o,i,a){fn(r,e,n);var u,s,c,l=function(t){if(t===o&&g)return g;if(!bn&&t&&t in v)return v[t];switch(t){case Sn:case En:case On:return function(){return new r(this,t)}}return function(){return new r(this)}},h=e+" Iterator",p=!1,v=t.prototype,d=v[wn]||v["@@iterator"]||o&&v[o],g=!bn&&d||l(o),y="Array"===e&&v.entries||d;if(y&&(u=Qr(y.call(new t)))!==Object.prototype&&u.next&&(Qr(u)!==mn&&(dn?dn(u,mn):T(u[wn])||ie(u,wn,xn)),an(u,h,!0)),gn&&o===En&&d&&d.name!==En&&(yn?_t(v,"name",En):(p=!0,g=function(){return f(d,this)})),o)if(s={values:l(En),keys:i?g:l(Sn),entries:l(On)},a)for(c in s)(bn||p||!(c in v))&&ie(v,c,s[c]);else Ce({target:e,proto:!0,forced:bn||p},s);return v[wn]!==g&&ie(v,wn,g,{name:o}),un[e]=g,s},Pn=function(t,e){return{value:t,done:e}},An=Gr.charAt,jn="String Iterator",kn=ne.set,In=ne.getterFor(jn);Rn(String,"String",function(t){kn(this,{type:jn,string:Wr(t),index:0})},function(){var t,e=In(this),r=e.string,n=e.index;return n>=r.length?Pn(void 0,!0):(t=An(r,n),e.index+=t.length,Pn(t,!1))});var Tn=function(t,e,r){var n,o;kt(t);try{if(!(n=Q(t,"return"))){if("throw"===e)throw r;return r}n=f(n,t)}catch(t){o=!0,n=t}if("throw"===e)throw r;if(o)throw n;return kt(n),r},Mn=function(t,e,r,n){try{return n?e(kt(r)[0],r[1]):e(r)}catch(e){Tn(t,"throw",e)}},Ln=dt("iterator"),Un=Array.prototype,Nn=function(t){return void 0!==t&&(un.Array===t||Un[Ln]===t)},Cn=function(t,e,r){u?Ct.f(t,e,d(0,r)):t[e]=r},_n=dt("iterator"),Fn=function(t){if(!P(t))return Q(t,_n)||Q(t,"@@iterator")||un[pr(t)]},Bn=TypeError,Dn=function(t,e){var r=arguments.length<2?Fn(t):e;if(J(r))return kt(f(r,t));throw new Bn(Y(t)+" is not iterable")},zn=Array,Wn=function(t){var e=it(t),r=Sr(this),n=arguments.length,o=n>1?arguments[1]:void 0,i=void 0!==o;i&&(o=ar(o,n>2?arguments[2]:void 0));var a,u,s,c,l,h,p=Fn(e),v=0;if(!p||this===zn&&Nn(p))for(a=de(e),u=r?new this(a):zn(a);a>v;v++)h=i?o(e[v],v):e[v],Cn(u,v,h);else for(u=r?new this:[],l=(c=Dn(e,p)).next;!(s=f(l,c)).done;v++)h=i?Mn(c,o,[s.value,v],!0):s.value,Cn(u,v,h);return u.length=v,u},qn=dt("iterator"),Hn=!1;try{var $n=0,Kn={next:function(){return{done:!!$n++}},return:function(){Hn=!0}};Kn[qn]=function(){return this},Array.from(Kn,function(){throw 2})}catch(t){}var Gn=function(t,e){try{if(!e&&!Hn)return!1}catch(t){return!1}var r=!1;try{var n={};n[qn]=function(){return{next:function(){return{done:r=!0}}}},t(n)}catch(t){}return r},Vn=!Gn(function(t){Array.from(t)});Ce({target:"Array",stat:!0,forced:Vn},{from:Wn});var Yn=i,Xn=ye.includes,Jn=a(function(){return!Array(1).includes()});Ce({target:"Array",proto:!0,forced:Jn},{includes:function(t){return Xn(this,t,arguments.length>1?arguments[1]:void 0)}}),Qe("includes"),Ze("Array","includes");var Qn=Ct.f,Zn="Array Iterator",to=ne.set,eo=ne.getterFor(Zn),ro=Rn(Array,"Array",function(t,e){to(this,{type:Zn,target:k(t),index:0,kind:e})},function(){var t=eo(this),e=t.target,r=t.index++;if(!e||r>=e.length)return t.target=null,Pn(void 0,!0);switch(t.kind){case"keys":return Pn(r,!1);case"values":return Pn(e[r],!1)}return Pn([r,e[r]],!1)},"values"),no=un.Arguments=un.Array;if(Qe("keys"),Qe("values"),Qe("entries"),u&&"values"!==no.name)try{Qn(no,"name",{value:"values"})}catch(t){}cr||ie(Object.prototype,"toString",cr?{}.toString:function(){return"[object "+pr(this)+"]"},{unsafe:!0}),Ze("Array","values");var oo=Array,io=a(function(){function t(){}return!(oo.of.call(t)instanceof t)});Ce({target:"Array",stat:!0,forced:io},{of:function(){for(var t=0,e=arguments.length,r=new(Sr(this)?this:oo)(e);e>t;)Cn(r,t,arguments[t++]);return r.length=e,r}});var ao=dt("hasInstance"),uo=Function.prototype;ao in uo||Ct.f(uo,ao,{value:oe(function(t){if(!T(this)||!M(t))return!1;var e=this.prototype;return M(e)?U(e,t):t instanceof this},ao)}),dt("hasInstance");var so=function(t,e,r){return r.get&&oe(r.get,e,{getter:!0}),r.set&&oe(r.set,e,{setter:!0}),Ct.f(t,e,r)},co=zt.EXISTS,fo=Function.prototype,lo=b(fo.toString),ho=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,po=b(ho.exec);u&&!co&&so(fo,"name",{configurable:!0,get:function(){try{return po(ho,lo(this))[1]}catch(t){return""}}});var vo=b([].slice),go=Oe.f,yo="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],mo={f:function(t){return yo&&"Window"===E(t)?function(t){try{return go(t)}catch(t){return vo(yo)}}(t):go(k(t))}},bo=a(function(){if("function"==typeof ArrayBuffer){var t=new ArrayBuffer(8);Object.isExtensible(t)&&Object.defineProperty(t,"a",{value:8})}}),wo=Object.isExtensible,So=a(function(){wo(1)})||bo?function(t){return!!M(t)&&(!bo||"ArrayBuffer"!==E(t))&&(!wo||wo(t))}:wo,Eo=!a(function(){return Object.isExtensible(Object.preventExtensions({}))}),Oo=e(function(t){var e=Ct.f,r=!1,n=lt("meta"),o=0,i=function(t){e(t,n,{value:{objectID:"O"+o++,weakData:{}}})},a=t.exports={enable:function(){a.enable=function(){},r=!0;var t=Oe.f,e=b([].splice),o={};o[n]=1,t(o).length&&(Oe.f=function(r){for(var o=t(r),i=0,a=o.length;i<a;i++)if(o[i]===n){e(o,i,1);break}return o},Ce({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:mo.f}))},fastKey:function(t,e){if(!M(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!ut(t,n)){if(!So(t))return"F";if(!e)return"E";i(t)}return t[n].objectID},getWeakData:function(t,e){if(!ut(t,n)){if(!So(t))return!0;if(!e)return!1;i(t)}return t[n].weakData},onFreeze:function(t){return Eo&&r&&So(t)&&!ut(t,n)&&i(t),t}};Jt[n]=!0}),xo=TypeError,Ro=function(t,e){this.stopped=t,this.result=e},Po=Ro.prototype,Ao=function(t,e,r){var n,o,i,a,u,s,c,l=!(!r||!r.AS_ENTRIES),h=!(!r||!r.IS_RECORD),p=!(!r||!r.IS_ITERATOR),v=!(!r||!r.INTERRUPTED),d=ar(e,r&&r.that),g=function(t){return n&&Tn(n,"normal",t),new Ro(!0,t)},y=function(t){return l?(kt(t),v?d(t[0],t[1],g):d(t[0],t[1])):v?d(t,g):d(t)};if(h)n=t.iterator;else if(p)n=t;else{if(!(o=Fn(t)))throw new xo(Y(t)+" is not iterable");if(Nn(o)){for(i=0,a=de(t);a>i;i++)if((u=y(t[i]))&&U(Po,u))return u;return new Ro(!1)}n=Dn(t,o)}for(s=h?t.next:n.next;!(c=f(s,n)).done;){try{u=y(c.value)}catch(t){Tn(n,"throw",t)}if("object"==typeof u&&u&&U(Po,u))return u}return new Ro(!1)},jo=TypeError,ko=function(t,e){if(U(e,t))return t;throw new jo("Incorrect invocation")},Io=function(t,e,r){var n,o;return dn&&T(n=e.constructor)&&n!==r&&M(o=n.prototype)&&o!==r.prototype&&dn(t,o),t},To=function(t,e,r){var n=-1!==t.indexOf("Map"),o=-1!==t.indexOf("Weak"),u=n?"set":"add",s=i[t],c=s&&s.prototype,f=s,l={},h=function(t){var e=b(c[t]);ie(c,t,"add"===t?function(t){return e(this,0===t?0:t),this}:"delete"===t?function(t){return!(o&&!M(t))&&e(this,0===t?0:t)}:"get"===t?function(t){return o&&!M(t)?void 0:e(this,0===t?0:t)}:"has"===t?function(t){return!(o&&!M(t))&&e(this,0===t?0:t)}:function(t,r){return e(this,0===t?0:t,r),this})};if(Ue(t,!T(s)||!(o||c.forEach&&!a(function(){(new s).entries().next()}))))f=r.getConstructor(e,t,n,u),Oo.enable();else if(Ue(t,!0)){var p=new f,v=p[u](o?{}:-0,1)!==p,d=a(function(){p.has(1)}),g=Gn(function(t){new s(t)}),y=!o&&a(function(){for(var t=new s,e=5;e--;)t[u](e,e);return!t.has(-0)});g||((f=e(function(t,e){ko(t,c);var r=Io(new s,t,f);return P(e)||Ao(e,r[u],{that:r,AS_ENTRIES:n}),r})).prototype=c,c.constructor=f),(d||y)&&(h("delete"),h("has"),n&&h("get")),(y||v)&&h(u),o&&c.clear&&delete c.clear}return l[t]=f,Ce({global:!0,constructor:!0,forced:f!==s},l),an(f,t),o||r.setStrong(f,t,n),f},Mo=function(t,e,r){for(var n in e)ie(t,n,e[n],r);return t},Lo=dt("species"),Uo=function(t){var e=L(t);u&&e&&!e[Lo]&&so(e,Lo,{configurable:!0,get:function(){return this}})},No=Oo.fastKey,Co=ne.set,_o=ne.getterFor,Fo={getConstructor:function(t,e,r,n){var o=t(function(t,o){ko(t,i),Co(t,{type:e,index:Ve(null),first:null,last:null,size:0}),u||(t.size=0),P(o)||Ao(o,t[n],{that:t,AS_ENTRIES:r})}),i=o.prototype,a=_o(e),s=function(t,e,r){var n,o,i=a(t),s=c(t,e);return s?s.value=r:(i.last=s={index:o=No(e,!0),key:e,value:r,previous:n=i.last,next:null,removed:!1},i.first||(i.first=s),n&&(n.next=s),u?i.size++:t.size++,"F"!==o&&(i.index[o]=s)),t},c=function(t,e){var r,n=a(t),o=No(e);if("F"!==o)return n.index[o];for(r=n.first;r;r=r.next)if(r.key===e)return r};return Mo(i,{clear:function(){for(var t=a(this),e=t.first;e;)e.removed=!0,e.previous&&(e.previous=e.previous.next=null),e=e.next;t.first=t.last=null,t.index=Ve(null),u?t.size=0:this.size=0},delete:function(t){var e=this,r=a(e),n=c(e,t);if(n){var o=n.next,i=n.previous;delete r.index[n.index],n.removed=!0,i&&(i.next=o),o&&(o.previous=i),r.first===n&&(r.first=o),r.last===n&&(r.last=i),u?r.size--:e.size--}return!!n},forEach:function(t){for(var e,r=a(this),n=ar(t,arguments.length>1?arguments[1]:void 0);e=e?e.next:r.first;)for(n(e.value,e.key,this);e&&e.removed;)e=e.previous},has:function(t){return!!c(this,t)}}),Mo(i,r?{get:function(t){var e=c(this,t);return e&&e.value},set:function(t,e){return s(this,0===t?0:t,e)}}:{add:function(t){return s(this,t=0===t?0:t,t)}}),u&&so(i,"size",{configurable:!0,get:function(){return a(this).size}}),o},setStrong:function(t,e,r){var n=e+" Iterator",o=_o(e),i=_o(n);Rn(t,e,function(t,e){Co(this,{type:n,target:t,state:o(t),kind:e,last:null})},function(){for(var t=i(this),e=t.kind,r=t.last;r&&r.removed;)r=r.previous;return t.target&&(t.last=r=r?r.next:t.state.first)?Pn("keys"===e?r.key:"values"===e?r.value:[r.key,r.value],!1):(t.target=null,Pn(void 0,!0))},r?"entries":"values",!r,!0),Uo(e)}};To("Map",function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}},Fo);var Bo=Map.prototype,Do={Map:Map,set:b(Bo.set),get:b(Bo.get),has:b(Bo.has),remove:b(Bo.delete),proto:Bo},zo=Do.Map,Wo=Do.has,qo=Do.get,Ho=Do.set,$o=b([].push),Ko=a(function(){return 1!==zo.groupBy("ab",function(t){return t}).get("a").length});Ce({target:"Map",stat:!0,forced:Ko},{groupBy:function(t,e){j(t),J(e);var r=new zo,n=0;return Ao(t,function(t){var o=e(t,n++);Wo(r,o)?$o(qo(r,o),t):Ho(r,o,[t])}),r}});var Go={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0},Vo=Et("span").classList,Yo=Vo&&Vo.constructor&&Vo.constructor.prototype,Xo=Yo===Object.prototype?void 0:Yo,Jo=dt("iterator"),Qo=ro.values,Zo=function(t,e){if(t){if(t[Jo]!==Qo)try{_t(t,Jo,Qo)}catch(e){t[Jo]=Qo}if(an(t,e,!0),Go[e])for(var r in ro)if(t[r]!==ro[r])try{_t(t,r,ro[r])}catch(e){t[r]=ro[r]}}};for(var ti in Go)Zo(i[ti]&&i[ti].prototype,ti);Zo(Xo,"DOMTokenList");var ei=function(t,e,r){return function(n){var o=it(n),i=arguments.length,a=i>1?arguments[1]:void 0,u=void 0!==a,s=u?ar(a,i>2?arguments[2]:void 0):void 0,c=new t,f=0;return Ao(o,function(t){var n=u?s(t,f++):t;r?e(c,kt(n)[0],n[1]):e(c,n)}),c}};Ce({target:"Map",stat:!0,forced:!0},{from:ei(Do.Map,Do.set,!0)});var ri=function(t,e,r){return function(){for(var n=new t,o=arguments.length,i=0;i<o;i++){var a=arguments[i];r?e(n,kt(a)[0],a[1]):e(n,a)}return n}};Ce({target:"Map",stat:!0,forced:!0},{of:ri(Do.Map,Do.set,!0)});var ni=Do.has,oi=function(t){return ni(t),t},ii=Do.remove;Ce({target:"Map",proto:!0,real:!0,forced:!0},{deleteAll:function(){for(var t,e=oi(this),r=!0,n=0,o=arguments.length;n<o;n++)t=ii(e,arguments[n]),r=r&&t;return!!r}});var ai=Do.get,ui=Do.has,si=Do.set;Ce({target:"Map",proto:!0,real:!0,forced:!0},{emplace:function(t,e){var r,n,o=oi(this);return ui(o,t)?(r=ai(o,t),"update"in e&&(r=e.update(r,t,o),si(o,t,r)),r):(n=e.insert(t,o),si(o,t,n),n)}});var ci=function(t,e,r){for(var n,o,i=r?t:t.iterator,a=t.next;!(n=f(a,i)).done;)if(void 0!==(o=e(n.value)))return o},fi=Do.Map,li=Do.proto,hi=b(li.forEach),pi=b(li.entries),vi=pi(new fi).next,di=function(t,e,r){return r?ci({iterator:pi(t),next:vi},function(t){return e(t[1],t[0])}):hi(t,e)};Ce({target:"Map",proto:!0,real:!0,forced:!0},{every:function(t){var e=oi(this),r=ar(t,arguments.length>1?arguments[1]:void 0);return!1!==di(e,function(t,n){if(!r(t,n,e))return!1},!0)}});var gi=Do.Map,yi=Do.set;Ce({target:"Map",proto:!0,real:!0,forced:!0},{filter:function(t){var e=oi(this),r=ar(t,arguments.length>1?arguments[1]:void 0),n=new gi;return di(e,function(t,o){r(t,o,e)&&yi(n,o,t)}),n}}),Ce({target:"Map",proto:!0,real:!0,forced:!0},{find:function(t){var e=oi(this),r=ar(t,arguments.length>1?arguments[1]:void 0),n=di(e,function(t,n){if(r(t,n,e))return{value:t}},!0);return n&&n.value}}),Ce({target:"Map",proto:!0,real:!0,forced:!0},{findKey:function(t){var e=oi(this),r=ar(t,arguments.length>1?arguments[1]:void 0),n=di(e,function(t,n){if(r(t,n,e))return{key:n}},!0);return n&&n.key}}),Ce({target:"Map",proto:!0,real:!0,forced:!0},{includes:function(t){return!0===di(oi(this),function(e){if((r=e)===(n=t)||r!=r&&n!=n)return!0;var r,n},!0)}});var mi=Do.Map;Ce({target:"Map",stat:!0,forced:!0},{keyBy:function(t,e){var r=new(T(this)?this:mi);J(e);var n=J(r.set);return Ao(t,function(t){f(n,r,e(t),t)}),r}}),Ce({target:"Map",proto:!0,real:!0,forced:!0},{keyOf:function(t){var e=di(oi(this),function(e,r){if(e===t)return{key:r}},!0);return e&&e.key}});var bi=Do.Map,wi=Do.set;Ce({target:"Map",proto:!0,real:!0,forced:!0},{mapKeys:function(t){var e=oi(this),r=ar(t,arguments.length>1?arguments[1]:void 0),n=new bi;return di(e,function(t,o){wi(n,r(t,o,e),t)}),n}});var Si=Do.Map,Ei=Do.set;Ce({target:"Map",proto:!0,real:!0,forced:!0},{mapValues:function(t){var e=oi(this),r=ar(t,arguments.length>1?arguments[1]:void 0),n=new Si;return di(e,function(t,o){Ei(n,o,r(t,o,e))}),n}});var Oi=Do.set;Ce({target:"Map",proto:!0,real:!0,arity:1,forced:!0},{merge:function(t){for(var e=oi(this),r=arguments.length,n=0;n<r;)Ao(arguments[n++],function(t,r){Oi(e,t,r)},{AS_ENTRIES:!0});return e}});var xi=TypeError;Ce({target:"Map",proto:!0,real:!0,forced:!0},{reduce:function(t){var e=oi(this),r=arguments.length<2,n=r?void 0:arguments[1];if(J(t),di(e,function(o,i){r?(r=!1,n=o):n=t(n,o,i,e)}),r)throw new xi("Reduce of empty map with no initial value");return n}}),Ce({target:"Map",proto:!0,real:!0,forced:!0},{some:function(t){var e=oi(this),r=ar(t,arguments.length>1?arguments[1]:void 0);return!0===di(e,function(t,n){if(r(t,n,e))return!0},!0)}});var Ri=TypeError,Pi=Do.get,Ai=Do.has,ji=Do.set;Ce({target:"Map",proto:!0,real:!0,forced:!0},{update:function(t,e){var r=oi(this),n=arguments.length;J(e);var o=Ai(r,t);if(!o&&n<3)throw new Ri("Updating absent value");var i=o?Pi(r,t):J(n>2?arguments[2]:void 0)(t,r);return ji(r,t,e(i,t,r)),r}});var ki=TypeError,Ii=function(t,e){var r,n=kt(this),o=J(n.get),i=J(n.has),a=J(n.set),u=arguments.length>2?arguments[2]:void 0;if(!T(e)&&!T(u))throw new ki("At least one callback required");return f(i,n,t)?(r=f(o,n,t),T(e)&&(r=e(r),f(a,n,t,r))):T(u)&&(r=u(),f(a,n,t,r)),r};Ce({target:"Map",proto:!0,real:!0,forced:!0},{upsert:Ii}),Ce({target:"Map",proto:!0,real:!0,name:"upsert",forced:!0},{updateOrInsert:Ii});var Ti=b(1..valueOf),Mi="\t\n\v\f\r                　\u2028\u2029\ufeff",Li=b("".replace),Ui=RegExp("^["+Mi+"]+"),Ni=RegExp("(^|[^"+Mi+"])["+Mi+"]+$"),Ci=function(t){return function(e){var r=Wr(j(e));return 1&t&&(r=Li(r,Ui,"")),2&t&&(r=Li(r,Ni,"$1")),r}},_i={start:Ci(1),end:Ci(2),trim:Ci(3)},Fi=Oe.f,Bi=Rt.f,Di=Ct.f,zi=_i.trim,Wi="Number",qi=i[Wi],Hi=qi.prototype,$i=i.TypeError,Ki=b("".slice),Gi=b("".charCodeAt),Vi=Ue(Wi,!qi(" 0o1")||!qi("0b1")||qi("+0x1")),Yi=function(t){var e,r=arguments.length<1?0:qi(function(t){var e=mt(t,"number");return"bigint"==typeof e?e:function(t){var e,r,n,o,i,a,u,s,c=mt(t,"number");if(G(c))throw new $i("Cannot convert a Symbol value to a number");if("string"==typeof c&&c.length>2)if(c=zi(c),43===(e=Gi(c,0))||45===e){if(88===(r=Gi(c,2))||120===r)return NaN}else if(48===e){switch(Gi(c,1)){case 66:case 98:n=2,o=49;break;case 79:case 111:n=8,o=55;break;default:return+c}for(a=(i=Ki(c,2)).length,u=0;u<a;u++)if((s=Gi(i,u))<48||s>o)return NaN;return parseInt(i,n)}return+c}(e)}(t));return U(Hi,e=this)&&a(function(){Ti(e)})?Io(Object(r),this,Yi):r};Yi.prototype=Hi,Vi&&(Hi.constructor=Yi),Ce({global:!0,constructor:!0,wrap:!0,forced:Vi},{Number:Yi}),Vi&&function(t,e){for(var r,n=u?Fi(e):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","),o=0;n.length>o;o++)ut(e,r=n[o])&&!ut(t,r)&&Di(t,r,Bi(e,r))}(Yn[Wi],qi),Ce({target:"Number",stat:!0,nonConfigurable:!0,nonWritable:!0},{EPSILON:Math.pow(2,-52)});var Xi=i.isFinite;Ce({target:"Number",stat:!0},{isFinite:Number.isFinite||function(t){return"number"==typeof t&&Xi(t)}});var Ji=Math.floor,Qi=Number.isInteger||function(t){return!M(t)&&isFinite(t)&&Ji(t)===t};Ce({target:"Number",stat:!0},{isInteger:Qi}),Ce({target:"Number",stat:!0},{isNaN:function(t){return t!=t}});var Zi=Math.abs;Ce({target:"Number",stat:!0},{isSafeInteger:function(t){return Qi(t)&&Zi(t)<=9007199254740991}}),Ce({target:"Number",stat:!0,nonConfigurable:!0,nonWritable:!0},{MAX_SAFE_INTEGER:9007199254740991}),Ce({target:"Number",stat:!0,nonConfigurable:!0,nonWritable:!0},{MIN_SAFE_INTEGER:-9007199254740991});var ta=_i.trim,ea=b("".charAt),ra=i.parseFloat,na=i.Symbol,oa=na&&na.iterator,ia=1/ra(Mi+"-0")!=-Infinity||oa&&!a(function(){ra(Object(oa))})?function(t){var e=ta(Wr(t)),r=ra(e);return 0===r&&"-"===ea(e,0)?-0:r}:ra;Ce({target:"Number",stat:!0,forced:Number.parseFloat!==ia},{parseFloat:ia});var aa=_i.trim,ua=i.parseInt,sa=i.Symbol,ca=sa&&sa.iterator,fa=/^[+-]?0x/i,la=b(fa.exec),ha=8!==ua(Mi+"08")||22!==ua(Mi+"0x16")||ca&&!a(function(){ua(Object(ca))})?function(t,e){var r=aa(Wr(t));return ua(r,e>>>0||(la(fa,r)?16:10))}:ua;Ce({target:"Number",stat:!0,forced:Number.parseInt!==ha},{parseInt:ha});var pa=b(v.f),va=b([].push),da=u&&a(function(){var t=Object.create(null);return t[2]=2,!pa(t,2)}),ga=function(t){return function(e){for(var r,n=k(e),o=_e(n),i=da&&null===Qr(n),a=o.length,s=0,c=[];a>s;)r=o[s++],u&&!(i?r in n:pa(n,r))||va(c,t?[r,n[r]]:n[r]);return c}},ya={entries:ga(!0),values:ga(!1)},ma=ya.entries;Ce({target:"Object",stat:!0},{entries:function(t){return ma(t)}}),Ce({target:"Object",stat:!0,sham:!u},{getOwnPropertyDescriptors:function(t){for(var e,r,n=k(t),o=Rt.f,i=Pe(n),a={},u=0;i.length>u;)void 0!==(r=o(n,e=i[u++]))&&Cn(a,e,r);return a}});var ba=a(function(){_e(1)});Ce({target:"Object",stat:!0,forced:ba},{keys:function(t){return _e(it(t))}});var wa=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e};Ce({target:"Object",stat:!0},{is:wa});var Sa=ya.values;Ce({target:"Object",stat:!0},{values:function(t){return Sa(t)}}),Ce({target:"Object",stat:!0},{hasOwn:ut});var Ea=Function.prototype,Oa=Ea.apply,xa=Ea.call,Ra="object"==typeof Reflect&&Reflect.apply||(s?xa.bind(Oa):function(){return xa.apply(Oa,arguments)}),Pa=!a(function(){Reflect.apply(function(){})});Ce({target:"Reflect",stat:!0,forced:Pa},{apply:function(t,e,r){return Ra(J(t),e,kt(r))}});var Aa=Function,ja=b([].concat),ka=b([].join),Ia={},Ta=s?Aa.bind:function(t){var e=J(this),r=e.prototype,n=vo(arguments,1),o=function(){var r=ja(n,vo(arguments));return this instanceof o?function(t,e,r){if(!ut(Ia,e)){for(var n=[],o=0;o<e;o++)n[o]="a["+o+"]";Ia[e]=Aa("C,a","return new C("+ka(n,",")+")")}return Ia[e](t,r)}(e,r.length,r):e.apply(t,r)};return M(r)&&(o.prototype=r),o},Ma=TypeError,La=function(t){if(Sr(t))return t;throw new Ma(Y(t)+" is not a constructor")},Ua=L("Reflect","construct"),Na=Object.prototype,Ca=[].push,_a=a(function(){function t(){}return!(Ua(function(){},[],t)instanceof t)}),Fa=!a(function(){Ua(function(){})}),Ba=_a||Fa;Ce({target:"Reflect",stat:!0,forced:Ba,sham:Ba},{construct:function(t,e){La(t),kt(e);var r=arguments.length<3?t:La(arguments[2]);if(Fa&&!_a)return Ua(t,e,r);if(t===r){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var n=[null];return Ra(Ca,n,e),new(Ra(Ta,t,n))}var o=r.prototype,i=Ve(M(o)?o:Na),a=Ra(t,i,e);return M(a)?a:i}});var Da=a(function(){Reflect.defineProperty(Ct.f({},1,{value:1}),1,{value:2})});Ce({target:"Reflect",stat:!0,forced:Da,sham:!u},{defineProperty:function(t,e,r){kt(t);var n=bt(e);kt(r);try{return Ct.f(t,n,r),!0}catch(t){return!1}}});var za=Rt.f;Ce({target:"Reflect",stat:!0},{deleteProperty:function(t,e){var r=za(kt(t),e);return!(r&&!r.configurable)&&delete t[e]}});var Wa=function(t){return void 0!==t&&(ut(t,"value")||ut(t,"writable"))};Ce({target:"Reflect",stat:!0},{get:function t(e,r){var n,o,i=arguments.length<3?e:arguments[2];return kt(e)===i?e[r]:(n=Rt.f(e,r))?Wa(n)?n.value:void 0===n.get?void 0:f(n.get,i):M(o=Qr(e))?t(o,r,i):void 0}}),Ce({target:"Reflect",stat:!0,sham:!u},{getOwnPropertyDescriptor:function(t,e){return Rt.f(kt(t),e)}}),Ce({target:"Reflect",stat:!0,sham:!Vr},{getPrototypeOf:function(t){return Qr(kt(t))}}),Ce({target:"Reflect",stat:!0},{has:function(t,e){return e in t}}),Ce({target:"Reflect",stat:!0},{isExtensible:function(t){return kt(t),So(t)}}),Ce({target:"Reflect",stat:!0},{ownKeys:Pe}),Ce({target:"Reflect",stat:!0,sham:!Eo},{preventExtensions:function(t){kt(t);try{var e=L("Object","preventExtensions");return e&&e(t),!0}catch(t){return!1}}});var qa=a(function(){var t=function(){},e=Ct.f(new t,"a",{configurable:!0});return!1!==Reflect.set(t.prototype,"a",1,e)});Ce({target:"Reflect",stat:!0,forced:qa},{set:function t(e,r,n){var o,i,a,u=arguments.length<4?e:arguments[3],s=Rt.f(kt(e),r);if(!s){if(M(i=Qr(e)))return t(i,r,n,u);s=d(0)}if(Wa(s)){if(!1===s.writable||!M(u))return!1;if(o=Rt.f(u,r)){if(o.get||o.set||!1===o.writable)return!1;o.value=n,Ct.f(u,r,o)}else Ct.f(u,r,d(0,n))}else{if(void 0===(a=s.set))return!1;f(a,u,n)}return!0}}),dn&&Ce({target:"Reflect",stat:!0},{setPrototypeOf:function(t,e){kt(t),vn(e);try{return dn(t,e),!0}catch(t){return!1}}}),Ce({global:!0},{Reflect:{}}),an(i.Reflect,"Reflect",!0);var Ha=Oo.getWeakData,$a=ne.set,Ka=ne.getterFor,Ga=Ar.find,Va=Ar.findIndex,Ya=b([].splice),Xa=0,Ja=function(t){return t.frozen||(t.frozen=new Qa)},Qa=function(){this.entries=[]},Za=function(t,e){return Ga(t.entries,function(t){return t[0]===e})};Qa.prototype={get:function(t){var e=Za(this,t);if(e)return e[1]},has:function(t){return!!Za(this,t)},set:function(t,e){var r=Za(this,t);r?r[1]=e:this.entries.push([t,e])},delete:function(t){var e=Va(this.entries,function(e){return e[0]===t});return~e&&Ya(this.entries,e,1),!!~e}};var tu,eu={getConstructor:function(t,e,r,n){var o=t(function(t,o){ko(t,i),$a(t,{type:e,id:Xa++,frozen:null}),P(o)||Ao(o,t[n],{that:t,AS_ENTRIES:r})}),i=o.prototype,a=Ka(e),u=function(t,e,r){var n=a(t),o=Ha(kt(e),!0);return!0===o?Ja(n).set(e,r):o[n.id]=r,t};return Mo(i,{delete:function(t){var e=a(this);if(!M(t))return!1;var r=Ha(t);return!0===r?Ja(e).delete(t):r&&ut(r,e.id)&&delete r[e.id]},has:function(t){var e=a(this);if(!M(t))return!1;var r=Ha(t);return!0===r?Ja(e).has(t):r&&ut(r,e.id)}}),Mo(i,r?{get:function(t){var e=a(this);if(M(t)){var r=Ha(t);if(!0===r)return Ja(e).get(t);if(r)return r[e.id]}},set:function(t,e){return u(this,t,e)}}:{add:function(t){return u(this,t,!0)}}),o}},ru=ne.enforce,nu=Object,ou=Array.isArray,iu=nu.isExtensible,au=nu.isFrozen,uu=nu.isSealed,su=nu.freeze,cu=nu.seal,fu=!i.ActiveXObject&&"ActiveXObject"in i,lu=function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}},hu=To("WeakMap",lu,eu),pu=hu.prototype,vu=b(pu.set);if(Vt)if(fu){tu=eu.getConstructor(lu,"WeakMap",!0),Oo.enable();var du=b(pu.delete),gu=b(pu.has),yu=b(pu.get);Mo(pu,{delete:function(t){if(M(t)&&!iu(t)){var e=ru(this);return e.frozen||(e.frozen=new tu),du(this,t)||e.frozen.delete(t)}return du(this,t)},has:function(t){if(M(t)&&!iu(t)){var e=ru(this);return e.frozen||(e.frozen=new tu),gu(this,t)||e.frozen.has(t)}return gu(this,t)},get:function(t){if(M(t)&&!iu(t)){var e=ru(this);return e.frozen||(e.frozen=new tu),gu(this,t)?yu(this,t):e.frozen.get(t)}return yu(this,t)},set:function(t,e){if(M(t)&&!iu(t)){var r=ru(this);r.frozen||(r.frozen=new tu),gu(this,t)?vu(this,t,e):r.frozen.set(t,e)}else vu(this,t,e);return this}})}else Eo&&a(function(){var t=su([]);return vu(new hu,t,1),!au(t)})&&Mo(pu,{set:function(t,e){var r;return ou(t)&&(au(t)?r=su:uu(t)&&(r=cu)),vu(this,t,e),r&&r(t),this}});var mu=L("Map"),bu=L("WeakMap"),wu=b([].push),Su=nt("metadata"),Eu=Su.store||(Su.store=new bu),Ou=function(t,e,r){var n=Eu.get(t);if(!n){if(!r)return;Eu.set(t,n=new mu)}var o=n.get(e);if(!o){if(!r)return;n.set(e,o=new mu)}return o},xu={store:Eu,getMap:Ou,has:function(t,e,r){var n=Ou(e,r,!1);return void 0!==n&&n.has(t)},get:function(t,e,r){var n=Ou(e,r,!1);return void 0===n?void 0:n.get(t)},set:function(t,e,r,n){Ou(r,n,!0).set(t,e)},keys:function(t,e){var r=Ou(t,e,!1),n=[];return r&&r.forEach(function(t,e){wu(n,e)}),n},toKey:function(t){return void 0===t||"symbol"==typeof t?t:String(t)}},Ru=xu.toKey,Pu=xu.set;Ce({target:"Reflect",stat:!0},{defineMetadata:function(t,e,r){var n=arguments.length<4?void 0:Ru(arguments[3]);Pu(t,e,kt(r),n)}});var Au=xu.toKey,ju=xu.getMap,ku=xu.store;Ce({target:"Reflect",stat:!0},{deleteMetadata:function(t,e){var r=arguments.length<3?void 0:Au(arguments[2]),n=ju(kt(e),r,!1);if(void 0===n||!n.delete(t))return!1;if(n.size)return!0;var o=ku.get(e);return o.delete(r),!!o.size||ku.delete(e)}});var Iu=xu.has,Tu=xu.get,Mu=xu.toKey,Lu=function(t,e,r){if(Iu(t,e,r))return Tu(t,e,r);var n=Qr(e);return null!==n?Lu(t,n,r):void 0};Ce({target:"Reflect",stat:!0},{getMetadata:function(t,e){var r=arguments.length<3?void 0:Mu(arguments[2]);return Lu(t,kt(e),r)}});var Uu=Do.Map,Nu=Do.has,Cu=Do.set,_u=b([].push),Fu=b(function(t){var e,r,n,o=it(this),i=de(o),a=[],u=new Uu,s=P(t)?function(t){return t}:J(t);for(e=0;e<i;e++)n=s(r=o[e]),Nu(u,n)||Cu(u,n,r);return di(u,function(t){_u(a,t)}),a}),Bu=b([].concat),Du=xu.keys,zu=xu.toKey,Wu=function(t,e){var r=Du(t,e),n=Qr(t);if(null===n)return r;var o=Wu(n,e);return o.length?r.length?Fu(Bu(r,o)):o:r};Ce({target:"Reflect",stat:!0},{getMetadataKeys:function(t){var e=arguments.length<2?void 0:zu(arguments[1]);return Wu(kt(t),e)}});var qu=xu.get,Hu=xu.toKey;Ce({target:"Reflect",stat:!0},{getOwnMetadata:function(t,e){var r=arguments.length<3?void 0:Hu(arguments[2]);return qu(t,kt(e),r)}});var $u=xu.keys,Ku=xu.toKey;Ce({target:"Reflect",stat:!0},{getOwnMetadataKeys:function(t){var e=arguments.length<2?void 0:Ku(arguments[1]);return $u(kt(t),e)}});var Gu=xu.has,Vu=xu.toKey,Yu=function(t,e,r){if(Gu(t,e,r))return!0;var n=Qr(e);return null!==n&&Yu(t,n,r)};Ce({target:"Reflect",stat:!0},{hasMetadata:function(t,e){var r=arguments.length<3?void 0:Vu(arguments[2]);return Yu(t,kt(e),r)}});var Xu=xu.has,Ju=xu.toKey;Ce({target:"Reflect",stat:!0},{hasOwnMetadata:function(t,e){var r=arguments.length<3?void 0:Ju(arguments[2]);return Xu(t,kt(e),r)}});var Qu=xu.toKey,Zu=xu.set;Ce({target:"Reflect",stat:!0},{metadata:function(t,e){return function(r,n){Zu(t,e,kt(r),Qu(n))}}});var ts=dt("match"),es=function(t){var e;return M(t)&&(void 0!==(e=t[ts])?!!e:"RegExp"===E(t))},rs=function(){var t=kt(this),e="";return t.hasIndices&&(e+="d"),t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.unicodeSets&&(e+="v"),t.sticky&&(e+="y"),e},ns=RegExp.prototype,os=function(t){var e=t.flags;return void 0!==e||"flags"in ns||ut(t,"flags")||!U(ns,t)?e:f(rs,t)},is=i.RegExp,as=a(function(){var t=is("a","y");return t.lastIndex=2,null!==t.exec("abcd")}),us=as||a(function(){return!is("a","y").sticky}),ss=as||a(function(){var t=is("^r","gy");return t.lastIndex=2,null!==t.exec("str")}),cs={BROKEN_CARET:ss,MISSED_STICKY:us,UNSUPPORTED_Y:as},fs=Ct.f,ls=function(t,e,r){r in t||fs(t,r,{configurable:!0,get:function(){return e[r]},set:function(t){e[r]=t}})},hs=i.RegExp,ps=a(function(){var t=hs(".","s");return!(t.dotAll&&t.test("\n")&&"s"===t.flags)}),vs=i.RegExp,ds=a(function(){var t=vs("(?<a>b)","g");return"b"!==t.exec("b").groups.a||"bc"!=="b".replace(t,"$<a>c")}),gs=Oe.f,ys=ne.enforce,ms=dt("match"),bs=i.RegExp,ws=bs.prototype,Ss=i.SyntaxError,Es=b(ws.exec),Os=b("".charAt),xs=b("".replace),Rs=b("".indexOf),Ps=b("".slice),As=/^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/,js=/a/g,ks=/a/g,Is=new bs(js)!==js,Ts=cs.MISSED_STICKY,Ms=cs.UNSUPPORTED_Y,Ls=u&&(!Is||Ts||ps||ds||a(function(){return ks[ms]=!1,bs(js)!==js||bs(ks)===ks||"/a/i"!==String(bs(js,"i"))}));if(Ue("RegExp",Ls)){for(var Us=function(t,e){var r,n,o,i,a,u,s=U(ws,this),c=es(t),f=void 0===e,l=[],h=t;if(!s&&c&&f&&t.constructor===Us)return t;if((c||U(ws,t))&&(t=t.source,f&&(e=os(h))),t=void 0===t?"":Wr(t),e=void 0===e?"":Wr(e),h=t,ps&&"dotAll"in js&&(n=!!e&&Rs(e,"s")>-1)&&(e=xs(e,/s/g,"")),r=e,Ts&&"sticky"in js&&(o=!!e&&Rs(e,"y")>-1)&&Ms&&(e=xs(e,/y/g,"")),ds&&(i=function(t){for(var e,r=t.length,n=0,o="",i=[],a=Ve(null),u=!1,s=!1,c=0,f="";n<=r;n++){if("\\"===(e=Os(t,n)))e+=Os(t,++n);else if("]"===e)u=!1;else if(!u)switch(!0){case"["===e:u=!0;break;case"("===e:if(o+=e,"?:"===Ps(t,n+1,n+3))continue;Es(As,Ps(t,n+1))&&(n+=2,s=!0),c++;continue;case">"===e&&s:if(""===f||ut(a,f))throw new Ss("Invalid capture group name");a[f]=!0,i[i.length]=[f,c],s=!1,f="";continue}s?f+=e:o+=e}return[o,i]}(t),t=i[0],l=i[1]),a=Io(bs(t,e),s?this:ws,Us),(n||o||l.length)&&(u=ys(a),n&&(u.dotAll=!0,u.raw=Us(function(t){for(var e,r=t.length,n=0,o="",i=!1;n<=r;n++)"\\"!==(e=Os(t,n))?i||"."!==e?("["===e?i=!0:"]"===e&&(i=!1),o+=e):o+="[\\s\\S]":o+=e+Os(t,++n);return o}(t),r)),o&&(u.sticky=!0),l.length&&(u.groups=l)),t!==h)try{_t(a,"source",""===h?"(?:)":h)}catch(t){}return a},Ns=gs(bs),Cs=0;Ns.length>Cs;)ls(Us,bs,Ns[Cs++]);ws.constructor=Us,Us.prototype=ws,ie(i,"RegExp",Us,{constructor:!0})}Uo("RegExp");var _s=zt.PROPER,Fs="toString",Bs=RegExp.prototype,Ds=Bs[Fs];(a(function(){return"/a/b"!==Ds.call({source:"a",flags:"b"})})||_s&&Ds.name!==Fs)&&ie(Bs,Fs,function(){var t=kt(this);return"/"+Wr(t.source)+"/"+Wr(os(t))},{unsafe:!0});var zs=ne.get,Ws=RegExp.prototype,qs=TypeError;u&&ps&&so(Ws,"dotAll",{configurable:!0,get:function(){if(this!==Ws){if("RegExp"===E(this))return!!zs(this).dotAll;throw new qs("Incompatible receiver, RegExp required")}}});var Hs=ne.get,$s=nt("native-string-replace",String.prototype.replace),Ks=RegExp.prototype.exec,Gs=Ks,Vs=b("".charAt),Ys=b("".indexOf),Xs=b("".replace),Js=b("".slice),Qs=function(){var t=/a/,e=/b*/g;return f(Ks,t,"a"),f(Ks,e,"a"),0!==t.lastIndex||0!==e.lastIndex}(),Zs=cs.BROKEN_CARET,tc=void 0!==/()??/.exec("")[1];(Qs||tc||Zs||ps||ds)&&(Gs=function(t){var e,r,n,o,i,a,u,s=this,c=Hs(s),l=Wr(t),h=c.raw;if(h)return h.lastIndex=s.lastIndex,e=f(Gs,h,l),s.lastIndex=h.lastIndex,e;var p=c.groups,v=Zs&&s.sticky,d=f(rs,s),g=s.source,y=0,m=l;if(v&&(d=Xs(d,"y",""),-1===Ys(d,"g")&&(d+="g"),m=Js(l,s.lastIndex),s.lastIndex>0&&(!s.multiline||s.multiline&&"\n"!==Vs(l,s.lastIndex-1))&&(g="(?: "+g+")",m=" "+m,y++),r=new RegExp("^(?:"+g+")",d)),tc&&(r=new RegExp("^"+g+"$(?!\\s)",d)),Qs&&(n=s.lastIndex),o=f(Ks,v?r:s,m),v?o?(o.input=Js(o.input,y),o[0]=Js(o[0],y),o.index=s.lastIndex,s.lastIndex+=o[0].length):s.lastIndex=0:Qs&&o&&(s.lastIndex=s.global?o.index+o[0].length:n),tc&&o&&o.length>1&&f($s,o[0],r,function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(o[i]=void 0)}),o&&p)for(o.groups=a=Ve(null),i=0;i<p.length;i++)a[(u=p[i])[0]]=o[u[1]];return o});var ec=Gs;Ce({target:"RegExp",proto:!0,forced:/./.exec!==ec},{exec:ec});var rc=i.RegExp,nc=rc.prototype;u&&a(function(){var t=!0;try{rc(".","d")}catch(e){t=!1}var e={},r="",n=t?"dgimsy":"gimsy",o=function(t,n){Object.defineProperty(e,t,{get:function(){return r+=n,!0}})},i={dotAll:"s",global:"g",ignoreCase:"i",multiline:"m",sticky:"y"};for(var a in t&&(i.hasIndices="d"),i)o(a,i[a]);return Object.getOwnPropertyDescriptor(nc,"flags").get.call(e)!==n||r!==n})&&so(nc,"flags",{configurable:!0,get:rs});var oc=ne.get,ic=RegExp.prototype,ac=TypeError;u&&cs.MISSED_STICKY&&so(ic,"sticky",{configurable:!0,get:function(){if(this!==ic){if("RegExp"===E(this))return!!oc(this).sticky;throw new ac("Incompatible receiver, RegExp required")}}});var uc,sc,cc=(uc=!1,(sc=/[ac]/).exec=function(){return uc=!0,/./.exec.apply(this,arguments)},!0===sc.test("abc")&&uc),fc=/./.test;Ce({target:"RegExp",proto:!0,forced:!cc},{test:function(t){var e=kt(this),r=Wr(t),n=e.exec;if(!T(n))return f(fc,e,r);var o=f(n,e,r);return null!==o&&(kt(o),!0)}});var lc=dt("species"),hc=RegExp.prototype,pc=function(t,e,r,n){var o=dt(t),i=!a(function(){var e={};return e[o]=function(){return 7},7!==""[t](e)}),u=i&&!a(function(){var e=!1,r=/a/;return"split"===t&&((r={}).constructor={},r.constructor[lc]=function(){return r},r.flags="",r[o]=/./[o]),r.exec=function(){return e=!0,null},r[o](""),!e});if(!i||!u||r){var s=/./[o],c=e(o,""[t],function(t,e,r,n,o){var a=e.exec;return a===ec||a===hc.exec?i&&!o?{done:!0,value:f(s,e,r,n)}:{done:!0,value:f(t,r,e,n)}:{done:!1}});ie(String.prototype,t,c[0]),ie(hc,o,c[1])}n&&_t(hc[o],"sham",!0)},vc=Gr.charAt,dc=function(t,e,r){return e+(r?vc(t,e).length:1)},gc=TypeError,yc=function(t,e){var r=t.exec;if(T(r)){var n=f(r,t,e);return null!==n&&kt(n),n}if("RegExp"===E(t))return f(ec,t,e);throw new gc("RegExp#exec called on incompatible receiver")};pc("match",function(t,e,r){return[function(e){var r=j(this),n=P(e)?void 0:Q(e,t);return n?f(n,e,r):new RegExp(e)[t](Wr(r))},function(t){var n=kt(this),o=Wr(t),i=r(e,n,o);if(i.done)return i.value;if(!n.global)return yc(n,o);var a=n.unicode;n.lastIndex=0;for(var u,s=[],c=0;null!==(u=yc(n,o));){var f=Wr(u[0]);s[c]=f,""===f&&(n.lastIndex=dc(o,ve(n.lastIndex),a)),c++}return 0===c?null:s}]});var mc=Math.floor,bc=b("".charAt),wc=b("".replace),Sc=b("".slice),Ec=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,Oc=/\$([$&'`]|\d{1,2})/g,xc=function(t,e,r,n,o,i){var a=r+t.length,u=n.length,s=Oc;return void 0!==o&&(o=it(o),s=Ec),wc(i,s,function(i,s){var c;switch(bc(s,0)){case"$":return"$";case"&":return t;case"`":return Sc(e,0,r);case"'":return Sc(e,a);case"<":c=o[Sc(s,1,-1)];break;default:var f=+s;if(0===f)return i;if(f>u){var l=mc(f/10);return 0===l?i:l<=u?void 0===n[l-1]?bc(s,1):n[l-1]+bc(s,1):i}c=n[f-1]}return void 0===c?"":c})},Rc=dt("replace"),Pc=Math.max,Ac=Math.min,jc=b([].concat),kc=b([].push),Ic=b("".indexOf),Tc=b("".slice),Mc="$0"==="a".replace(/./,"$0"),Lc=!!/./[Rc]&&""===/./[Rc]("a","$0"),Uc=!a(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")});pc("replace",function(t,e,r){var n=Lc?"$":"$0";return[function(t,r){var n=j(this),o=P(t)?void 0:Q(t,Rc);return o?f(o,t,n,r):f(e,Wr(n),t,r)},function(t,o){var i=kt(this),a=Wr(t);if("string"==typeof o&&-1===Ic(o,n)&&-1===Ic(o,"$<")){var u=r(e,i,a,o);if(u.done)return u.value}var s=T(o);s||(o=Wr(o));var c,f=i.global;f&&(c=i.unicode,i.lastIndex=0);for(var l,h=[];null!==(l=yc(i,a))&&(kc(h,l),f);)""===Wr(l[0])&&(i.lastIndex=dc(a,ve(i.lastIndex),c));for(var p,v="",d=0,g=0;g<h.length;g++){for(var y,m=Wr((l=h[g])[0]),b=Pc(Ac(ce(l.index),a.length),0),w=[],S=1;S<l.length;S++)kc(w,void 0===(p=l[S])?p:String(p));var E=l.groups;if(s){var O=jc([m],w,b,a);void 0!==E&&kc(O,E),y=Wr(Ra(o,void 0,O))}else y=xc(m,a,b,w,E,o);b>=d&&(v+=Tc(a,d,b)+y,d=b+m.length)}return v+Tc(a,d)}]},!Uc||!Mc||Lc),pc("search",function(t,e,r){return[function(e){var r=j(this),n=P(e)?void 0:Q(e,t);return n?f(n,e,r):new RegExp(e)[t](Wr(r))},function(t){var n=kt(this),o=Wr(t),i=r(e,n,o);if(i.done)return i.value;var a=n.lastIndex;wa(a,0)||(n.lastIndex=0);var u=yc(n,o);return wa(n.lastIndex,a)||(n.lastIndex=a),null===u?-1:u.index}]});var Nc=dt("species"),Cc=function(t,e){var r,n=kt(t).constructor;return void 0===n||P(r=kt(n)[Nc])?e:La(r)},_c=cs.UNSUPPORTED_Y,Fc=Math.min,Bc=b([].push),Dc=b("".slice),zc=!a(function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var r="ab".split(t);return 2!==r.length||"a"!==r[0]||"b"!==r[1]}),Wc="c"==="abbc".split(/(b)*/)[1]||4!=="test".split(/(?:)/,-1).length||2!=="ab".split(/(?:ab)*/).length||4!==".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length;pc("split",function(t,e,r){var n="0".split(void 0,0).length?function(t,r){return void 0===t&&0===r?[]:f(e,this,t,r)}:e;return[function(e,r){var o=j(this),i=P(e)?void 0:Q(e,t);return i?f(i,e,o,r):f(n,Wr(o),e,r)},function(t,o){var i=kt(this),a=Wr(t);if(!Wc){var u=r(n,i,a,o,n!==e);if(u.done)return u.value}var s=Cc(i,RegExp),c=i.unicode,f=new s(_c?"^(?:"+i.source+")":i,(i.ignoreCase?"i":"")+(i.multiline?"m":"")+(i.unicode?"u":"")+(_c?"g":"y")),l=void 0===o?4294967295:o>>>0;if(0===l)return[];if(0===a.length)return null===yc(f,a)?[a]:[];for(var h=0,p=0,v=[];p<a.length;){f.lastIndex=_c?0:p;var d,g=yc(f,_c?Dc(a,p):a);if(null===g||(d=Fc(ve(f.lastIndex+(_c?p:0)),a.length))===h)p=dc(a,p,c);else{if(Bc(v,Dc(a,h,p)),v.length===l)return v;for(var y=1;y<=g.length-1;y++)if(Bc(v,g[y]),v.length===l)return v;p=h=d}}return Bc(v,Dc(a,h)),v}]},Wc||!zc,_c);var qc=TypeError,Hc=RangeError,$c=function(t){var e=Wr(j(this)),r="",n=ce(t);if(n<0||Infinity===n)throw new Hc("Wrong number of repetitions");for(;n>0;(n>>>=1)&&(e+=e))1&n&&(r+=e);return r},Kc=b($c),Gc=b("".slice),Vc=Math.ceil,Yc=function(t){return function(e,r,n){var o,i,a=Wr(j(e)),u=ve(r),s=a.length,c=void 0===n?" ":Wr(n);return u<=s||""===c?a:((i=Kc(c,Vc((o=u-s)/c.length))).length>o&&(i=Gc(i,0,o)),t?a+i:i+a)}},Xc={start:Yc(!1),end:Yc(!0)},Jc=Xc.start,Qc=Array,Zc=RegExp.escape,tf=b("".charAt),ef=b("".charCodeAt),rf=b(1.1.toString),nf=b([].join),of=/^[0-9a-z]/i,af=/^[$()*+./?[\\\]^{|}]/,uf=RegExp("^[!\"#%&',\\-:;<=>@`~"+Mi+"]"),sf=b(of.exec),cf={"\t":"t","\n":"n","\v":"v","\f":"f","\r":"r"},ff=function(t){var e=rf(ef(t,0),16);return e.length<3?"\\x"+Jc(e,2,"0"):"\\u"+Jc(e,4,"0")},lf=!Zc||"\\x61b"!==Zc("ab");Ce({target:"RegExp",stat:!0,forced:lf},{escape:function(t){!function(t){if("string"==typeof t)return t;throw new qc("Argument is not a string")}(t);for(var e=t.length,r=Qc(e),n=0;n<e;n++){var o=tf(t,n);if(0===n&&sf(of,o))r[n]=ff(o);else if(ut(cf,o))r[n]="\\"+cf[o];else if(sf(af,o))r[n]="\\"+o;else if(sf(uf,o))r[n]=ff(o);else{var i=ef(o,0);55296!=(63488&i)?r[n]=o:i>=56320||n+1>=e||56320!=(64512&ef(t,n+1))?r[n]=ff(o):(r[n]=o,r[++n]=tf(t,n))}}return nf(r,"")}}),To("Set",function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}},Fo);var hf=Set.prototype,pf={Set:Set,add:b(hf.add),has:b(hf.has),remove:b(hf.delete),proto:hf},vf=pf.has,df=function(t){return vf(t),t},gf=pf.Set,yf=pf.proto,mf=b(yf.forEach),bf=b(yf.keys),wf=bf(new gf).next,Sf=function(t,e,r){return r?ci({iterator:bf(t),next:wf},e):mf(t,e)},Ef=pf.Set,Of=pf.add,xf=function(t){var e=new Ef;return Sf(t,function(t){Of(e,t)}),e},Rf=ln(pf.proto,"size","get")||function(t){return t.size},Pf="Invalid size",Af=RangeError,jf=TypeError,kf=Math.max,If=function(t,e){this.set=t,this.size=kf(e,0),this.has=J(t.has),this.keys=J(t.keys)};If.prototype={getIterator:function(){return{iterator:t=kt(f(this.keys,this.set)),next:t.next,done:!1};var t},includes:function(t){return f(this.has,this.set,t)}};var Tf=function(t){kt(t);var e=+t.size;if(e!=e)throw new jf(Pf);var r=ce(e);if(r<0)throw new Af(Pf);return new If(t,r)},Mf=pf.has,Lf=pf.remove,Uf=function(t){var e=df(this),r=Tf(t),n=xf(e);return Rf(e)<=r.size?Sf(e,function(t){r.includes(t)&&Lf(n,t)}):ci(r.getIterator(),function(t){Mf(e,t)&&Lf(n,t)}),n},Nf=function(t){return{size:t,has:function(){return!1},keys:function(){return{next:function(){return{done:!0}}}}}},Cf=function(t){var e=L("Set");try{(new e)[t](Nf(0));try{return(new e)[t](Nf(-1)),!1}catch(t){return!0}}catch(t){return!1}};Ce({target:"Set",proto:!0,real:!0,forced:!Cf("difference")},{difference:Uf});var _f=pf.Set,Ff=pf.add,Bf=pf.has,Df=function(t){var e=df(this),r=Tf(t),n=new _f;return Rf(e)>r.size?ci(r.getIterator(),function(t){Bf(e,t)&&Ff(n,t)}):Sf(e,function(t){r.includes(t)&&Ff(n,t)}),n},zf=!Cf("intersection")||a(function(){return"3,2"!==String(Array.from(new Set([1,2,3]).intersection(new Set([3,2]))))});Ce({target:"Set",proto:!0,real:!0,forced:zf},{intersection:Df});var Wf=pf.has,qf=function(t){var e=df(this),r=Tf(t);if(Rf(e)<=r.size)return!1!==Sf(e,function(t){if(r.includes(t))return!1},!0);var n=r.getIterator();return!1!==ci(n,function(t){if(Wf(e,t))return Tn(n,"normal",!1)})};Ce({target:"Set",proto:!0,real:!0,forced:!Cf("isDisjointFrom")},{isDisjointFrom:qf});var Hf=function(t){var e=df(this),r=Tf(t);return!(Rf(e)>r.size)&&!1!==Sf(e,function(t){if(!r.includes(t))return!1},!0)};Ce({target:"Set",proto:!0,real:!0,forced:!Cf("isSubsetOf")},{isSubsetOf:Hf});var $f=pf.has,Kf=function(t){var e=df(this),r=Tf(t);if(Rf(e)<r.size)return!1;var n=r.getIterator();return!1!==ci(n,function(t){if(!$f(e,t))return Tn(n,"normal",!1)})};Ce({target:"Set",proto:!0,real:!0,forced:!Cf("isSupersetOf")},{isSupersetOf:Kf});var Gf=pf.add,Vf=pf.has,Yf=pf.remove,Xf=function(t){var e=df(this),r=Tf(t).getIterator(),n=xf(e);return ci(r,function(t){Vf(e,t)?Yf(n,t):Gf(n,t)}),n};Ce({target:"Set",proto:!0,real:!0,forced:!Cf("symmetricDifference")},{symmetricDifference:Xf});var Jf=pf.add,Qf=function(t){var e=df(this),r=Tf(t).getIterator(),n=xf(e);return ci(r,function(t){Jf(n,t)}),n};Ce({target:"Set",proto:!0,real:!0,forced:!Cf("union")},{union:Qf}),Ce({target:"Set",stat:!0,forced:!0},{from:ei(pf.Set,pf.add,!1)}),Ce({target:"Set",stat:!0,forced:!0},{of:ri(pf.Set,pf.add,!1)});var Zf=pf.add;Ce({target:"Set",proto:!0,real:!0,forced:!0},{addAll:function(){for(var t=df(this),e=0,r=arguments.length;e<r;e++)Zf(t,arguments[e]);return t}});var tl=pf.remove;Ce({target:"Set",proto:!0,real:!0,forced:!0},{deleteAll:function(){for(var t,e=df(this),r=!0,n=0,o=arguments.length;n<o;n++)t=tl(e,arguments[n]),r=r&&t;return!!r}}),Ce({target:"Set",proto:!0,real:!0,forced:!0},{every:function(t){var e=df(this),r=ar(t,arguments.length>1?arguments[1]:void 0);return!1!==Sf(e,function(t){if(!r(t,t,e))return!1},!0)}});var el=dt("iterator"),rl=Object,nl=L("Set"),ol=function(t){return function(t){return M(t)&&"number"==typeof t.size&&T(t.has)&&T(t.keys)}(t)?t:function(t){if(P(t))return!1;var e=rl(t);return void 0!==e[el]||"@@iterator"in e||ut(un,pr(e))}(t)?new nl(t):t};Ce({target:"Set",proto:!0,real:!0,forced:!0},{difference:function(t){return f(Uf,this,ol(t))}});var il=pf.Set,al=pf.add;Ce({target:"Set",proto:!0,real:!0,forced:!0},{filter:function(t){var e=df(this),r=ar(t,arguments.length>1?arguments[1]:void 0),n=new il;return Sf(e,function(t){r(t,t,e)&&al(n,t)}),n}}),Ce({target:"Set",proto:!0,real:!0,forced:!0},{find:function(t){var e=df(this),r=ar(t,arguments.length>1?arguments[1]:void 0),n=Sf(e,function(t){if(r(t,t,e))return{value:t}},!0);return n&&n.value}}),Ce({target:"Set",proto:!0,real:!0,forced:!0},{intersection:function(t){return f(Df,this,ol(t))}}),Ce({target:"Set",proto:!0,real:!0,forced:!0},{isDisjointFrom:function(t){return f(qf,this,ol(t))}}),Ce({target:"Set",proto:!0,real:!0,forced:!0},{isSubsetOf:function(t){return f(Hf,this,ol(t))}}),Ce({target:"Set",proto:!0,real:!0,forced:!0},{isSupersetOf:function(t){return f(Kf,this,ol(t))}});var ul=b([].join),sl=b([].push);Ce({target:"Set",proto:!0,real:!0,forced:!0},{join:function(t){var e=df(this),r=void 0===t?",":Wr(t),n=[];return Sf(e,function(t){sl(n,t)}),ul(n,r)}});var cl=pf.Set,fl=pf.add;Ce({target:"Set",proto:!0,real:!0,forced:!0},{map:function(t){var e=df(this),r=ar(t,arguments.length>1?arguments[1]:void 0),n=new cl;return Sf(e,function(t){fl(n,r(t,t,e))}),n}});var ll=TypeError;Ce({target:"Set",proto:!0,real:!0,forced:!0},{reduce:function(t){var e=df(this),r=arguments.length<2,n=r?void 0:arguments[1];if(J(t),Sf(e,function(o){r?(r=!1,n=o):n=t(n,o,o,e)}),r)throw new ll("Reduce of empty set with no initial value");return n}}),Ce({target:"Set",proto:!0,real:!0,forced:!0},{some:function(t){var e=df(this),r=ar(t,arguments.length>1?arguments[1]:void 0);return!0===Sf(e,function(t){if(r(t,t,e))return!0},!0)}}),Ce({target:"Set",proto:!0,real:!0,forced:!0},{symmetricDifference:function(t){return f(Xf,this,ol(t))}}),Ce({target:"Set",proto:!0,real:!0,forced:!0},{union:function(t){return f(Qf,this,ol(t))}});var hl=dt("species"),pl=dt("isConcatSpreadable"),vl=W>=51||!a(function(){var t=[];return t[pl]=!1,t.concat()[0]!==t}),dl=function(t){if(!M(t))return!1;var e=t[pl];return void 0!==e?!!e:ur(t)},gl=!(vl&&(W>=51||!a(function(){var t=[];return(t.constructor={})[hl]=function(){return{foo:1}},1!==t.concat(Boolean).foo})));Ce({target:"Array",proto:!0,arity:1,forced:gl},{concat:function(t){var e,r,n,o,i,a=it(this),u=xr(a,0),s=0;for(e=-1,n=arguments.length;e<n;e++)if(dl(i=-1===e?a:arguments[e]))for(o=de(i),Nr(s+o),r=0;r<o;r++,s++)r in i&&Cn(u,s,i[r]);else Nr(s+1),Cn(u,s++,i);return u.length=s,u}});var yl={f:dt},ml=Ct.f,bl=function(t){var e=Yn.Symbol||(Yn.Symbol={});ut(e,t)||ml(e,t,{value:yl.f(t)})},wl=function(){var t=L("Symbol"),e=t&&t.prototype,r=e&&e.valueOf,n=dt("toPrimitive");e&&!e[n]&&ie(e,n,function(t){return f(r,this)},{arity:1})},Sl=Ar.forEach,El=Xt("hidden"),Ol="Symbol",xl="prototype",Rl=ne.set,Pl=ne.getterFor(Ol),Al=Object[xl],jl=i.Symbol,kl=jl&&jl[xl],Il=i.RangeError,Tl=i.TypeError,Ml=i.QObject,Ll=Rt.f,Ul=Ct.f,Nl=mo.f,Cl=v.f,_l=b([].push),Fl=nt("symbols"),Bl=nt("op-symbols"),Dl=nt("wks"),zl=!Ml||!Ml[xl]||!Ml[xl].findChild,Wl=function(t,e,r){var n=Ll(Al,e);n&&delete Al[e],Ul(t,e,r),n&&t!==Al&&Ul(Al,e,n)},ql=u&&a(function(){return 7!==Ve(Ul({},"a",{get:function(){return Ul(this,"a",{value:7}).a}})).a})?Wl:Ul,Hl=function(t,e){var r=Fl[t]=Ve(kl);return Rl(r,{type:Ol,tag:t,description:e}),u||(r.description=e),r},$l=function(t,e,r){t===Al&&$l(Bl,e,r),kt(t);var n=bt(e);return kt(r),ut(Fl,n)?(r.enumerable?(ut(t,El)&&t[El][n]&&(t[El][n]=!1),r=Ve(r,{enumerable:d(0,!1)})):(ut(t,El)||Ul(t,El,d(1,Ve(null))),t[El][n]=!0),ql(t,n,r)):Ul(t,n,r)},Kl=function(t,e){kt(t);var r=k(e),n=_e(r).concat(Xl(r));return Sl(n,function(e){u&&!f(Gl,r,e)||$l(t,e,r[e])}),t},Gl=function(t){var e=bt(t),r=f(Cl,this,e);return!(this===Al&&ut(Fl,e)&&!ut(Bl,e))&&(!(r||!ut(this,e)||!ut(Fl,e)||ut(this,El)&&this[El][e])||r)},Vl=function(t,e){var r=k(t),n=bt(e);if(r!==Al||!ut(Fl,n)||ut(Bl,n)){var o=Ll(r,n);return!o||!ut(Fl,n)||ut(r,El)&&r[El][n]||(o.enumerable=!0),o}},Yl=function(t){var e=Nl(k(t)),r=[];return Sl(e,function(t){ut(Fl,t)||ut(Jt,t)||_l(r,t)}),r},Xl=function(t){var e=t===Al,r=Nl(e?Bl:k(t)),n=[];return Sl(r,function(t){!ut(Fl,t)||e&&!ut(Al,t)||_l(n,Fl[t])}),n};H||(jl=function(){if(U(kl,this))throw new Tl("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?Wr(arguments[0]):void 0,e=lt(t),r=function(t){var n=void 0===this?i:this;n===Al&&f(r,Bl,t),ut(n,El)&&ut(n[El],e)&&(n[El][e]=!1);var o=d(1,t);try{ql(n,e,o)}catch(t){if(!(t instanceof Il))throw t;Wl(n,e,o)}};return u&&zl&&ql(Al,e,{configurable:!0,set:r}),Hl(e,t)},ie(kl=jl[xl],"toString",function(){return Pl(this).tag}),ie(jl,"withoutSetter",function(t){return Hl(lt(t),t)}),v.f=Gl,Ct.f=$l,Be.f=Kl,Rt.f=Vl,Oe.f=mo.f=Yl,xe.f=Xl,yl.f=function(t){return Hl(dt(t),t)},u&&(so(kl,"description",{configurable:!0,get:function(){return Pl(this).description}}),ie(Al,"propertyIsEnumerable",Gl,{unsafe:!0}))),Ce({global:!0,constructor:!0,wrap:!0,forced:!H,sham:!H},{Symbol:jl}),Sl(_e(Dl),function(t){bl(t)}),Ce({target:Ol,stat:!0,forced:!H},{useSetter:function(){zl=!0},useSimple:function(){zl=!1}}),Ce({target:"Object",stat:!0,forced:!H,sham:!u},{create:function(t,e){return void 0===e?Ve(t):Kl(Ve(t),e)},defineProperty:$l,defineProperties:Kl,getOwnPropertyDescriptor:Vl}),Ce({target:"Object",stat:!0,forced:!H},{getOwnPropertyNames:Yl}),wl(),an(jl,Ol),Jt[El]=!0;var Jl=H&&!!Symbol.for&&!!Symbol.keyFor,Ql=nt("string-to-symbol-registry"),Zl=nt("symbol-to-string-registry");Ce({target:"Symbol",stat:!0,forced:!Jl},{for:function(t){var e=Wr(t);if(ut(Ql,e))return Ql[e];var r=L("Symbol")(e);return Ql[e]=r,Zl[r]=e,r}});var th=nt("symbol-to-string-registry");Ce({target:"Symbol",stat:!0,forced:!Jl},{keyFor:function(t){if(!G(t))throw new TypeError(Y(t)+" is not a symbol");if(ut(th,t))return th[t]}});var eh=b([].push),rh=String,nh=L("JSON","stringify"),oh=b(/./.exec),ih=b("".charAt),ah=b("".charCodeAt),uh=b("".replace),sh=b(1..toString),ch=/[\uD800-\uDFFF]/g,fh=/^[\uD800-\uDBFF]$/,lh=/^[\uDC00-\uDFFF]$/,hh=!H||a(function(){var t=L("Symbol")("stringify detection");return"[null]"!==nh([t])||"{}"!==nh({a:t})||"{}"!==nh(Object(t))}),ph=a(function(){return'"\\udf06\\ud834"'!==nh("\udf06\ud834")||'"\\udead"'!==nh("\udead")}),vh=function(t,e){var r=vo(arguments),n=function(t){if(T(t))return t;if(ur(t)){for(var e=t.length,r=[],n=0;n<e;n++){var o=t[n];"string"==typeof o?eh(r,o):"number"!=typeof o&&"Number"!==E(o)&&"String"!==E(o)||eh(r,Wr(o))}var i=r.length,a=!0;return function(t,e){if(a)return a=!1,e;if(ur(this))return e;for(var n=0;n<i;n++)if(r[n]===t)return e}}}(e);if(T(n)||void 0!==t&&!G(t))return r[1]=function(t,e){if(T(n)&&(e=f(n,this,rh(t),e)),!G(e))return e},Ra(nh,null,r)},dh=function(t,e,r){var n=ih(r,e-1),o=ih(r,e+1);return oh(fh,t)&&!oh(lh,o)||oh(lh,t)&&!oh(fh,n)?"\\u"+sh(ah(t,0),16):t};nh&&Ce({target:"JSON",stat:!0,arity:3,forced:hh||ph},{stringify:function(t,e,r){var n=vo(arguments),o=Ra(hh?vh:nh,null,n);return ph&&"string"==typeof o?uh(o,ch,dh):o}});var gh=!H||a(function(){xe.f(1)});Ce({target:"Object",stat:!0,forced:gh},{getOwnPropertySymbols:function(t){var e=xe.f;return e?e(it(t)):[]}}),bl("asyncIterator");var yh=i.Symbol,mh=yh&&yh.prototype;if(u&&T(yh)&&(!("description"in mh)||void 0!==yh().description)){var bh={},wh=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:Wr(arguments[0]),e=U(mh,this)?new yh(t):void 0===t?yh():yh(t);return""===t&&(bh[e]=!0),e};Ae(wh,yh),wh.prototype=mh,mh.constructor=wh;var Sh="Symbol(description detection)"===String(yh("description detection")),Eh=b(mh.valueOf),Oh=b(mh.toString),xh=/^Symbol\((.*)\)[^)]+$/,Rh=b("".replace),Ph=b("".slice);so(mh,"description",{configurable:!0,get:function(){var t=Eh(this);if(ut(bh,t))return"";var e=Oh(t),r=Sh?Ph(e,7,-1):Rh(e,xh,"$1");return""===r?void 0:r}}),Ce({global:!0,constructor:!0,forced:!0},{Symbol:wh})}bl("hasInstance"),bl("isConcatSpreadable"),bl("iterator"),bl("match"),bl("matchAll"),bl("replace"),bl("search"),bl("species"),bl("split"),bl("toPrimitive"),wl(),bl("toStringTag"),an(L("Symbol"),"Symbol"),bl("unscopables"),an(i.JSON,"JSON",!0),an(Math,"Math",!0);var Ah=Ct.f,jh=dt("metadata"),kh=Function.prototype;void 0===kh[jh]&&Ah(kh,jh,{value:null});var Ih=Ct.f,Th=Rt.f,Mh=i.Symbol;if(bl("asyncDispose"),Mh){var Lh=Th(Mh,"asyncDispose");Lh.enumerable&&Lh.configurable&&Lh.writable&&Ih(Mh,"asyncDispose",{value:Lh.value,enumerable:!1,configurable:!1,writable:!1})}var Uh=Ct.f,Nh=Rt.f,Ch=i.Symbol;if(bl("dispose"),Ch){var _h=Nh(Ch,"dispose");_h.enumerable&&_h.configurable&&_h.writable&&Uh(Ch,"dispose",{value:_h.value,enumerable:!1,configurable:!1,writable:!1})}bl("metadata");var Fh=L("Symbol"),Bh=Fh.keyFor,Dh=b(Fh.prototype.valueOf),zh=Fh.isRegisteredSymbol||function(t){try{return void 0!==Bh(Dh(t))}catch(t){return!1}};Ce({target:"Symbol",stat:!0},{isRegisteredSymbol:zh});for(var Wh=L("Symbol"),qh=Wh.isWellKnownSymbol,Hh=L("Object","getOwnPropertyNames"),$h=b(Wh.prototype.valueOf),Kh=nt("wks"),Gh=0,Vh=Hh(Wh),Yh=Vh.length;Gh<Yh;Gh++)try{var Xh=Vh[Gh];G(Wh[Xh])&&dt(Xh)}catch(t){}var Jh=function(t){if(qh&&qh(t))return!0;try{for(var e=$h(t),r=0,n=Hh(Kh),o=n.length;r<o;r++)if(Kh[n[r]]==e)return!0}catch(t){}return!1};Ce({target:"Symbol",stat:!0,forced:!0},{isWellKnownSymbol:Jh}),bl("customMatcher"),bl("observable"),Ce({target:"Symbol",stat:!0,name:"isRegisteredSymbol"},{isRegistered:zh}),Ce({target:"Symbol",stat:!0,name:"isWellKnownSymbol",forced:!0},{isWellKnown:Jh}),bl("matcher"),bl("metadataKey"),bl("patternMatch"),bl("replaceAll"),yl.f("asyncIterator");var Qh=Gr.codeAt;Ce({target:"String",proto:!0},{codePointAt:function(t){return Qh(this,t)}}),Ze("String","codePointAt");var Zh=TypeError,tp=function(t){if(es(t))throw new Zh("The method doesn't accept regular expressions");return t},ep=dt("match"),rp=function(t){var e=/./;try{"/./"[t](e)}catch(r){try{return e[ep]=!1,"/./"[t](e)}catch(t){}}return!1},np=Rt.f,op=or("".slice),ip=Math.min,ap=rp("endsWith"),up=!ap&&!!function(){var t=np(String.prototype,"endsWith");return t&&!t.writable}();Ce({target:"String",proto:!0,forced:!up&&!ap},{endsWith:function(t){var e=Wr(j(this));tp(t);var r=arguments.length>1?arguments[1]:void 0,n=e.length,o=void 0===r?n:ip(ve(r),n),i=Wr(t);return op(e,o-i.length,o)===i}}),Ze("String","endsWith");var sp=RangeError,cp=String.fromCharCode,fp=String.fromCodePoint,lp=b([].join);Ce({target:"String",stat:!0,arity:1,forced:!!fp&&1!==fp.length},{fromCodePoint:function(t){for(var e,r=[],n=arguments.length,o=0;n>o;){if(e=+arguments[o++],he(e,1114111)!==e)throw new sp(e+" is not a valid code point");r[o]=e<65536?cp(e):cp(55296+((e-=65536)>>10),e%1024+56320)}return lp(r,"")}});var hp=b("".indexOf);Ce({target:"String",proto:!0,forced:!rp("includes")},{includes:function(t){return!!~hp(Wr(j(this)),Wr(tp(t)),arguments.length>1?arguments[1]:void 0)}}),Ze("String","includes"),b(un.String);var pp=/Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(_),vp=Xc.start;Ce({target:"String",proto:!0,forced:pp},{padStart:function(t){return vp(this,t,arguments.length>1?arguments[1]:void 0)}}),Ze("String","padStart");var dp=Xc.end;Ce({target:"String",proto:!0,forced:pp},{padEnd:function(t){return dp(this,t,arguments.length>1?arguments[1]:void 0)}}),Ze("String","padEnd");var gp=b([].push),yp=b([].join);Ce({target:"String",stat:!0},{raw:function(t){var e=k(it(t).raw),r=de(e);if(!r)return"";for(var n=arguments.length,o=[],i=0;;){if(gp(o,Wr(e[i++])),i===r)return yp(o,"");i<n&&gp(o,Wr(arguments[i]))}}}),Ce({target:"String",proto:!0},{repeat:$c}),Ze("String","repeat");var mp=Rt.f,bp=or("".slice),wp=Math.min,Sp=rp("startsWith"),Ep=!Sp&&!!function(){var t=mp(String.prototype,"startsWith");return t&&!t.writable}();Ce({target:"String",proto:!0,forced:!Ep&&!Sp},{startsWith:function(t){var e=Wr(j(this));tp(t);var r=ve(wp(arguments.length>1?arguments[1]:void 0,e.length)),n=Wr(t);return bp(e,r,r+n.length)===n}}),Ze("String","startsWith");var Op=zt.PROPER,xp=function(t){return a(function(){return!!Mi[t]()||"​᠎"!=="​᠎"[t]()||Op&&Mi[t].name!==t})},Rp=_i.start,Pp=xp("trimStart")?function(){return Rp(this)}:"".trimStart;Ce({target:"String",proto:!0,name:"trimStart",forced:"".trimLeft!==Pp},{trimLeft:Pp}),Ce({target:"String",proto:!0,name:"trimStart",forced:"".trimStart!==Pp},{trimStart:Pp}),Ze("String","trimLeft");var Ap=_i.end,jp=xp("trimEnd")?function(){return Ap(this)}:"".trimEnd;Ce({target:"String",proto:!0,name:"trimEnd",forced:"".trimRight!==jp},{trimRight:jp}),Ce({target:"String",proto:!0,name:"trimEnd",forced:"".trimEnd!==jp},{trimEnd:jp}),Ze("String","trimRight");var kp=Object.getOwnPropertyDescriptor,Ip=function(t){if(!u)return i[t];var e=kp(i,t);return e&&e.value},Tp=dt("iterator"),Mp=!a(function(){var t=new URL("b?a=1&b=2&c=3","https://a"),e=t.searchParams,r=new URLSearchParams("a=1&a=2&b=3"),n="";return t.pathname="c%20d",e.forEach(function(t,r){e.delete("b"),n+=r+t}),r.delete("a",2),r.delete("b",void 0),!e.size&&!u||!e.sort||"https://a/c%20d?a=1&c=3"!==t.href||"3"!==e.get("c")||"a=1"!==String(new URLSearchParams("?a=1"))||!e[Tp]||"a"!==new URL("https://a@b").username||"b"!==new URLSearchParams(new URLSearchParams("a=b")).get("a")||"xn--e1aybc"!==new URL("https://тест").host||"#%D0%B1"!==new URL("https://a#б").hash||"a1c3"!==n||"x"!==new URL("https://x",void 0).host}),Lp=TypeError,Up=function(t,e){if(t<e)throw new Lp("Not enough arguments");return t},Np=Math.floor,Cp=function(t,e){var r=t.length;if(r<8)for(var n,o,i=1;i<r;){for(o=i,n=t[i];o&&e(t[o-1],n)>0;)t[o]=t[--o];o!==i++&&(t[o]=n)}else for(var a=Np(r/2),u=Cp(vo(t,0,a),e),s=Cp(vo(t,a),e),c=u.length,f=s.length,l=0,h=0;l<c||h<f;)t[l+h]=l<c&&h<f?e(u[l],s[h])<=0?u[l++]:s[h++]:l<c?u[l++]:s[h++];return t},_p=Cp,Fp=dt("iterator"),Bp="URLSearchParams",Dp=Bp+"Iterator",zp=ne.set,Wp=ne.getterFor(Bp),qp=ne.getterFor(Dp),Hp=Ip("fetch"),$p=Ip("Request"),Kp=Ip("Headers"),Gp=$p&&$p.prototype,Vp=Kp&&Kp.prototype,Yp=i.TypeError,Xp=i.encodeURIComponent,Jp=String.fromCharCode,Qp=L("String","fromCodePoint"),Zp=parseInt,tv=b("".charAt),ev=b([].join),rv=b([].push),nv=b("".replace),ov=b([].shift),iv=b([].splice),av=b("".split),uv=b("".slice),sv=b(/./.exec),cv=/\+/g,fv=/^[0-9a-f]+$/i,lv=function(t,e){var r=uv(t,e,e+2);return sv(fv,r)?Zp(r,16):NaN},hv=function(t){for(var e=0,r=128;r>0&&0!=(t&r);r>>=1)e++;return e},pv=function(t){var e=null;switch(t.length){case 1:e=t[0];break;case 2:e=(31&t[0])<<6|63&t[1];break;case 3:e=(15&t[0])<<12|(63&t[1])<<6|63&t[2];break;case 4:e=(7&t[0])<<18|(63&t[1])<<12|(63&t[2])<<6|63&t[3]}return e>1114111?null:e},vv=function(t){for(var e=(t=nv(t,cv," ")).length,r="",n=0;n<e;){var o=tv(t,n);if("%"===o){if("%"===tv(t,n+1)||n+3>e){r+="%",n++;continue}var i=lv(t,n+1);if(i!=i){r+=o,n++;continue}n+=2;var a=hv(i);if(0===a)o=Jp(i);else{if(1===a||a>4){r+="�",n++;continue}for(var u=[i],s=1;s<a&&!(3+ ++n>e||"%"!==tv(t,n));){var c=lv(t,n+1);if(c!=c){n+=3;break}if(c>191||c<128)break;rv(u,c),n+=2,s++}if(u.length!==a){r+="�";continue}var f=pv(u);null===f?r+="�":o=Qp(f)}}r+=o,n++}return r},dv=/[!'()~]|%20/g,gv={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+"},yv=function(t){return gv[t]},mv=function(t){return nv(Xp(t),dv,yv)},bv=fn(function(t,e){zp(this,{type:Dp,target:Wp(t).entries,index:0,kind:e})},Bp,function(){var t=qp(this),e=t.target,r=t.index++;if(!e||r>=e.length)return t.target=null,Pn(void 0,!0);var n=e[r];switch(t.kind){case"keys":return Pn(n.key,!1);case"values":return Pn(n.value,!1)}return Pn([n.key,n.value],!1)},!0),wv=function(t){this.entries=[],this.url=null,void 0!==t&&(M(t)?this.parseObject(t):this.parseQuery("string"==typeof t?"?"===tv(t,0)?uv(t,1):t:Wr(t)))};wv.prototype={type:Bp,bindURL:function(t){this.url=t,this.update()},parseObject:function(t){var e,r,n,o,i,a,u,s=this.entries,c=Fn(t);if(c)for(r=(e=Dn(t,c)).next;!(n=f(r,e)).done;){if(o=Dn(kt(n.value)),(a=f(i=o.next,o)).done||(u=f(i,o)).done||!f(i,o).done)throw new Yp("Expected sequence with length 2");rv(s,{key:Wr(a.value),value:Wr(u.value)})}else for(var l in t)ut(t,l)&&rv(s,{key:l,value:Wr(t[l])})},parseQuery:function(t){if(t)for(var e,r,n=this.entries,o=av(t,"&"),i=0;i<o.length;)(e=o[i++]).length&&(r=av(e,"="),rv(n,{key:vv(ov(r)),value:vv(ev(r,"="))}))},serialize:function(){for(var t,e=this.entries,r=[],n=0;n<e.length;)t=e[n++],rv(r,mv(t.key)+"="+mv(t.value));return ev(r,"&")},update:function(){this.entries.length=0,this.parseQuery(this.url.query)},updateURL:function(){this.url&&this.url.update()}};var Sv=function(){ko(this,Ev);var t=zp(this,new wv(arguments.length>0?arguments[0]:void 0));u||(this.size=t.entries.length)},Ev=Sv.prototype;if(Mo(Ev,{append:function(t,e){var r=Wp(this);Up(arguments.length,2),rv(r.entries,{key:Wr(t),value:Wr(e)}),u||this.length++,r.updateURL()},delete:function(t){for(var e=Wp(this),r=Up(arguments.length,1),n=e.entries,o=Wr(t),i=r<2?void 0:arguments[1],a=void 0===i?i:Wr(i),s=0;s<n.length;){var c=n[s];if(c.key!==o||void 0!==a&&c.value!==a)s++;else if(iv(n,s,1),void 0!==a)break}u||(this.size=n.length),e.updateURL()},get:function(t){var e=Wp(this).entries;Up(arguments.length,1);for(var r=Wr(t),n=0;n<e.length;n++)if(e[n].key===r)return e[n].value;return null},getAll:function(t){var e=Wp(this).entries;Up(arguments.length,1);for(var r=Wr(t),n=[],o=0;o<e.length;o++)e[o].key===r&&rv(n,e[o].value);return n},has:function(t){for(var e=Wp(this).entries,r=Up(arguments.length,1),n=Wr(t),o=r<2?void 0:arguments[1],i=void 0===o?o:Wr(o),a=0;a<e.length;){var u=e[a++];if(u.key===n&&(void 0===i||u.value===i))return!0}return!1},set:function(t,e){var r=Wp(this);Up(arguments.length,1);for(var n,o=r.entries,i=!1,a=Wr(t),s=Wr(e),c=0;c<o.length;c++)(n=o[c]).key===a&&(i?iv(o,c--,1):(i=!0,n.value=s));i||rv(o,{key:a,value:s}),u||(this.size=o.length),r.updateURL()},sort:function(){var t=Wp(this);_p(t.entries,function(t,e){return t.key>e.key?1:-1}),t.updateURL()},forEach:function(t){for(var e,r=Wp(this).entries,n=ar(t,arguments.length>1?arguments[1]:void 0),o=0;o<r.length;)n((e=r[o++]).value,e.key,this)},keys:function(){return new bv(this,"keys")},values:function(){return new bv(this,"values")},entries:function(){return new bv(this,"entries")}},{enumerable:!0}),ie(Ev,Fp,Ev.entries,{name:"entries"}),ie(Ev,"toString",function(){return Wp(this).serialize()},{enumerable:!0}),u&&so(Ev,"size",{get:function(){return Wp(this).entries.length},configurable:!0,enumerable:!0}),an(Sv,Bp),Ce({global:!0,constructor:!0,forced:!Mp},{URLSearchParams:Sv}),!Mp&&T(Kp)){var Ov=b(Vp.has),xv=b(Vp.set),Rv=function(t){if(M(t)){var e,r=t.body;if(pr(r)===Bp)return e=t.headers?new Kp(t.headers):new Kp,Ov(e,"content-type")||xv(e,"content-type","application/x-www-form-urlencoded;charset=UTF-8"),Ve(t,{body:d(0,Wr(r)),headers:d(0,e)})}return t};if(T(Hp)&&Ce({global:!0,enumerable:!0,dontCallGetSet:!0,forced:!0},{fetch:function(t){return Hp(t,arguments.length>1?Rv(arguments[1]):{})}}),T($p)){var Pv=function(t){return ko(this,Gp),new $p(t,arguments.length>1?Rv(arguments[1]):{})};Gp.constructor=Pv,Pv.prototype=Gp,Ce({global:!0,constructor:!0,dontCallGetSet:!0,forced:!0},{Request:Pv})}}var Av={URLSearchParams:Sv,getState:Wp},jv=URLSearchParams,kv=jv.prototype,Iv=b(kv.append),Tv=b(kv.delete),Mv=b(kv.forEach),Lv=b([].push),Uv=new jv("a=1&a=2&b=3");Uv.delete("a",1),Uv.delete("b",void 0),Uv+""!="a=2"&&ie(kv,"delete",function(t){var e=arguments.length,r=e<2?void 0:arguments[1];if(e&&void 0===r)return Tv(this,t);var n=[];Mv(this,function(t,e){Lv(n,{key:e,value:t})}),Up(e,1);for(var o,i=Wr(t),a=Wr(r),u=0,s=0,c=!1,f=n.length;u<f;)o=n[u++],c||o.key===i?(c=!0,Tv(this,o.key)):s++;for(;s<f;)(o=n[s++]).key===i&&o.value===a||Iv(this,o.key,o.value)},{enumerable:!0,unsafe:!0});var Nv=URLSearchParams,Cv=Nv.prototype,_v=b(Cv.getAll),Fv=b(Cv.has),Bv=new Nv("a=1");!Bv.has("a",2)&&Bv.has("a",void 0)||ie(Cv,"has",function(t){var e=arguments.length,r=e<2?void 0:arguments[1];if(e&&void 0===r)return Fv(this,t);var n=_v(this,t);Up(e,1);for(var o=Wr(r),i=0;i<n.length;)if(n[i++]===o)return!0;return!1},{enumerable:!0,unsafe:!0});var Dv=URLSearchParams.prototype,zv=b(Dv.forEach);u&&!("size"in Dv)&&so(Dv,"size",{get:function(){var t=0;return zv(this,function(){t++}),t},configurable:!0,enumerable:!0});var Wv,qv=Object.assign,Hv=Object.defineProperty,$v=b([].concat),Kv=!qv||a(function(){if(u&&1!==qv({b:1},qv(Hv({},"a",{enumerable:!0,get:function(){Hv(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var t={},e={},r=Symbol("assign detection"),n="abcdefghijklmnopqrst";return t[r]=7,n.split("").forEach(function(t){e[t]=t}),7!==qv({},t)[r]||_e(qv({},e)).join("")!==n})?function(t,e){for(var r=it(t),n=arguments.length,o=1,i=xe.f,a=v.f;n>o;)for(var s,c=R(arguments[o++]),l=i?$v(_e(c),i(c)):_e(c),h=l.length,p=0;h>p;)s=l[p++],u&&!f(a,c,s)||(r[s]=c[s]);return r}:qv,Gv=2147483647,Vv=/[^\0-\u007E]/,Yv=/[.\u3002\uFF0E\uFF61]/g,Xv="Overflow: input needs wider integers to process",Jv=RangeError,Qv=b(Yv.exec),Zv=Math.floor,td=String.fromCharCode,ed=b("".charCodeAt),rd=b([].join),nd=b([].push),od=b("".replace),id=b("".split),ad=b("".toLowerCase),ud=function(t){return t+22+75*(t<26)},sd=function(t,e,r){var n=0;for(t=r?Zv(t/700):t>>1,t+=Zv(t/e);t>455;)t=Zv(t/35),n+=36;return Zv(n+36*t/(t+38))},cd=function(t){var e=[];t=function(t){for(var e=[],r=0,n=t.length;r<n;){var o=ed(t,r++);if(o>=55296&&o<=56319&&r<n){var i=ed(t,r++);56320==(64512&i)?nd(e,((1023&o)<<10)+(1023&i)+65536):(nd(e,o),r--)}else nd(e,o)}return e}(t);var r,n,o=t.length,i=128,a=0,u=72;for(r=0;r<t.length;r++)(n=t[r])<128&&nd(e,td(n));var s=e.length,c=s;for(s&&nd(e,"-");c<o;){var f=Gv;for(r=0;r<t.length;r++)(n=t[r])>=i&&n<f&&(f=n);var l=c+1;if(f-i>Zv((Gv-a)/l))throw new Jv(Xv);for(a+=(f-i)*l,i=f,r=0;r<t.length;r++){if((n=t[r])<i&&++a>Gv)throw new Jv(Xv);if(n===i){for(var h=a,p=36;;){var v=p<=u?1:p>=u+26?26:p-u;if(h<v)break;var d=h-v,g=36-v;nd(e,td(ud(v+d%g))),h=Zv(d/g),p+=36}nd(e,td(ud(h))),u=sd(a,l,c===s),a=0,c++}}a++,i++}return rd(e,"")},fd=Gr.codeAt,ld=ne.set,hd=ne.getterFor("URL"),pd=Av.URLSearchParams,vd=Av.getState,dd=i.URL,gd=i.TypeError,yd=i.parseInt,md=Math.floor,bd=Math.pow,wd=b("".charAt),Sd=b(/./.exec),Ed=b([].join),Od=b(1..toString),xd=b([].pop),Rd=b([].push),Pd=b("".replace),Ad=b([].shift),jd=b("".split),kd=b("".slice),Id=b("".toLowerCase),Td=b([].unshift),Md="Invalid scheme",Ld="Invalid host",Ud="Invalid port",Nd=/[a-z]/i,Cd=/[\d+-.a-z]/i,_d=/\d/,Fd=/^0x/i,Bd=/^[0-7]+$/,Dd=/^\d+$/,zd=/^[\da-f]+$/i,Wd=/[\0\t\n\r #%/:<>?@[\\\]^|]/,qd=/[\0\t\n\r #/:<>?@[\\\]^|]/,Hd=/^[\u0000-\u0020]+/,$d=/(^|[^\u0000-\u0020])[\u0000-\u0020]+$/,Kd=/[\t\n\r]/g,Gd=function(t){var e,r,n,o;if("number"==typeof t){for(e=[],r=0;r<4;r++)Td(e,t%256),t=md(t/256);return Ed(e,".")}if("object"==typeof t){for(e="",n=function(t){for(var e=null,r=1,n=null,o=0,i=0;i<8;i++)0!==t[i]?(o>r&&(e=n,r=o),n=null,o=0):(null===n&&(n=i),++o);return o>r?n:e}(t),r=0;r<8;r++)o&&0===t[r]||(o&&(o=!1),n===r?(e+=r?":":"::",o=!0):(e+=Od(t[r],16),r<7&&(e+=":")));return"["+e+"]"}return t},Vd={},Yd=Kv({},Vd,{" ":1,'"':1,"<":1,">":1,"`":1}),Xd=Kv({},Yd,{"#":1,"?":1,"{":1,"}":1}),Jd=Kv({},Xd,{"/":1,":":1,";":1,"=":1,"@":1,"[":1,"\\":1,"]":1,"^":1,"|":1}),Qd=function(t,e){var r=fd(t,0);return r>32&&r<127&&!ut(e,t)?t:encodeURIComponent(t)},Zd={ftp:21,file:null,http:80,https:443,ws:80,wss:443},tg=function(t,e){var r;return 2===t.length&&Sd(Nd,wd(t,0))&&(":"===(r=wd(t,1))||!e&&"|"===r)},eg=function(t){var e;return t.length>1&&tg(kd(t,0,2))&&(2===t.length||"/"===(e=wd(t,2))||"\\"===e||"?"===e||"#"===e)},rg=function(t){return"."===t||"%2e"===Id(t)},ng={},og={},ig={},ag={},ug={},sg={},cg={},fg={},lg={},hg={},pg={},vg={},dg={},gg={},yg={},mg={},bg={},wg={},Sg={},Eg={},Og={},xg=function(t,e,r){var n,o,i,a=Wr(t);if(e){if(o=this.parse(a))throw new gd(o);this.searchParams=null}else{if(void 0!==r&&(n=new xg(r,!0)),o=this.parse(a,null,n))throw new gd(o);(i=vd(new pd)).bindURL(this),this.searchParams=i}};xg.prototype={type:"URL",parse:function(t,e,r){var n,o,i,a,u,s=this,c=e||ng,f=0,l="",h=!1,p=!1,v=!1;for(t=Wr(t),e||(s.scheme="",s.username="",s.password="",s.host=null,s.port=null,s.path=[],s.query=null,s.fragment=null,s.cannotBeABaseURL=!1,t=Pd(t,Hd,""),t=Pd(t,$d,"$1")),t=Pd(t,Kd,""),n=Wn(t);f<=n.length;){switch(o=n[f],c){case ng:if(!o||!Sd(Nd,o)){if(e)return Md;c=ig;continue}l+=Id(o),c=og;break;case og:if(o&&(Sd(Cd,o)||"+"===o||"-"===o||"."===o))l+=Id(o);else{if(":"!==o){if(e)return Md;l="",c=ig,f=0;continue}if(e&&(s.isSpecial()!==ut(Zd,l)||"file"===l&&(s.includesCredentials()||null!==s.port)||"file"===s.scheme&&!s.host))return;if(s.scheme=l,e)return void(s.isSpecial()&&Zd[s.scheme]===s.port&&(s.port=null));l="","file"===s.scheme?c=gg:s.isSpecial()&&r&&r.scheme===s.scheme?c=ag:s.isSpecial()?c=fg:"/"===n[f+1]?(c=ug,f++):(s.cannotBeABaseURL=!0,Rd(s.path,""),c=Sg)}break;case ig:if(!r||r.cannotBeABaseURL&&"#"!==o)return Md;if(r.cannotBeABaseURL&&"#"===o){s.scheme=r.scheme,s.path=vo(r.path),s.query=r.query,s.fragment="",s.cannotBeABaseURL=!0,c=Og;break}c="file"===r.scheme?gg:sg;continue;case ag:if("/"!==o||"/"!==n[f+1]){c=sg;continue}c=lg,f++;break;case ug:if("/"===o){c=hg;break}c=wg;continue;case sg:if(s.scheme=r.scheme,o===Wv)s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,s.path=vo(r.path),s.query=r.query;else if("/"===o||"\\"===o&&s.isSpecial())c=cg;else if("?"===o)s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,s.path=vo(r.path),s.query="",c=Eg;else{if("#"!==o){s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,s.path=vo(r.path),s.path.length--,c=wg;continue}s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,s.path=vo(r.path),s.query=r.query,s.fragment="",c=Og}break;case cg:if(!s.isSpecial()||"/"!==o&&"\\"!==o){if("/"!==o){s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,c=wg;continue}c=hg}else c=lg;break;case fg:if(c=lg,"/"!==o||"/"!==wd(l,f+1))continue;f++;break;case lg:if("/"!==o&&"\\"!==o){c=hg;continue}break;case hg:if("@"===o){h&&(l="%40"+l),h=!0,i=Wn(l);for(var d=0;d<i.length;d++){var g=i[d];if(":"!==g||v){var y=Qd(g,Jd);v?s.password+=y:s.username+=y}else v=!0}l=""}else if(o===Wv||"/"===o||"?"===o||"#"===o||"\\"===o&&s.isSpecial()){if(h&&""===l)return"Invalid authority";f-=Wn(l).length+1,l="",c=pg}else l+=o;break;case pg:case vg:if(e&&"file"===s.scheme){c=mg;continue}if(":"!==o||p){if(o===Wv||"/"===o||"?"===o||"#"===o||"\\"===o&&s.isSpecial()){if(s.isSpecial()&&""===l)return Ld;if(e&&""===l&&(s.includesCredentials()||null!==s.port))return;if(a=s.parseHost(l))return a;if(l="",c=bg,e)return;continue}"["===o?p=!0:"]"===o&&(p=!1),l+=o}else{if(""===l)return Ld;if(a=s.parseHost(l))return a;if(l="",c=dg,e===vg)return}break;case dg:if(!Sd(_d,o)){if(o===Wv||"/"===o||"?"===o||"#"===o||"\\"===o&&s.isSpecial()||e){if(""!==l){var m=yd(l,10);if(m>65535)return Ud;s.port=s.isSpecial()&&m===Zd[s.scheme]?null:m,l=""}if(e)return;c=bg;continue}return Ud}l+=o;break;case gg:if(s.scheme="file","/"===o||"\\"===o)c=yg;else{if(!r||"file"!==r.scheme){c=wg;continue}switch(o){case Wv:s.host=r.host,s.path=vo(r.path),s.query=r.query;break;case"?":s.host=r.host,s.path=vo(r.path),s.query="",c=Eg;break;case"#":s.host=r.host,s.path=vo(r.path),s.query=r.query,s.fragment="",c=Og;break;default:eg(Ed(vo(n,f),""))||(s.host=r.host,s.path=vo(r.path),s.shortenPath()),c=wg;continue}}break;case yg:if("/"===o||"\\"===o){c=mg;break}r&&"file"===r.scheme&&!eg(Ed(vo(n,f),""))&&(tg(r.path[0],!0)?Rd(s.path,r.path[0]):s.host=r.host),c=wg;continue;case mg:if(o===Wv||"/"===o||"\\"===o||"?"===o||"#"===o){if(!e&&tg(l))c=wg;else if(""===l){if(s.host="",e)return;c=bg}else{if(a=s.parseHost(l))return a;if("localhost"===s.host&&(s.host=""),e)return;l="",c=bg}continue}l+=o;break;case bg:if(s.isSpecial()){if(c=wg,"/"!==o&&"\\"!==o)continue}else if(e||"?"!==o)if(e||"#"!==o){if(o!==Wv&&(c=wg,"/"!==o))continue}else s.fragment="",c=Og;else s.query="",c=Eg;break;case wg:if(o===Wv||"/"===o||"\\"===o&&s.isSpecial()||!e&&("?"===o||"#"===o)){if(".."===(u=Id(u=l))||"%2e."===u||".%2e"===u||"%2e%2e"===u?(s.shortenPath(),"/"===o||"\\"===o&&s.isSpecial()||Rd(s.path,"")):rg(l)?"/"===o||"\\"===o&&s.isSpecial()||Rd(s.path,""):("file"===s.scheme&&!s.path.length&&tg(l)&&(s.host&&(s.host=""),l=wd(l,0)+":"),Rd(s.path,l)),l="","file"===s.scheme&&(o===Wv||"?"===o||"#"===o))for(;s.path.length>1&&""===s.path[0];)Ad(s.path);"?"===o?(s.query="",c=Eg):"#"===o&&(s.fragment="",c=Og)}else l+=Qd(o,Xd);break;case Sg:"?"===o?(s.query="",c=Eg):"#"===o?(s.fragment="",c=Og):o!==Wv&&(s.path[0]+=Qd(o,Vd));break;case Eg:e||"#"!==o?o!==Wv&&("'"===o&&s.isSpecial()?s.query+="%27":s.query+="#"===o?"%23":Qd(o,Vd)):(s.fragment="",c=Og);break;case Og:o!==Wv&&(s.fragment+=Qd(o,Yd))}f++}},parseHost:function(t){var e,r,n;if("["===wd(t,0)){if("]"!==wd(t,t.length-1))return Ld;if(e=function(t){var e,r,n,o,i,a,u,s=[0,0,0,0,0,0,0,0],c=0,f=null,l=0,h=function(){return wd(t,l)};if(":"===h()){if(":"!==wd(t,1))return;l+=2,f=++c}for(;h();){if(8===c)return;if(":"!==h()){for(e=r=0;r<4&&Sd(zd,h());)e=16*e+yd(h(),16),l++,r++;if("."===h()){if(0===r)return;if(l-=r,c>6)return;for(n=0;h();){if(o=null,n>0){if(!("."===h()&&n<4))return;l++}if(!Sd(_d,h()))return;for(;Sd(_d,h());){if(i=yd(h(),10),null===o)o=i;else{if(0===o)return;o=10*o+i}if(o>255)return;l++}s[c]=256*s[c]+o,2!=++n&&4!==n||c++}if(4!==n)return;break}if(":"===h()){if(l++,!h())return}else if(h())return;s[c++]=e}else{if(null!==f)return;l++,f=++c}}if(null!==f)for(a=c-f,c=7;0!==c&&a>0;)u=s[c],s[c--]=s[f+a-1],s[f+--a]=u;else if(8!==c)return;return s}(kd(t,1,-1)),!e)return Ld;this.host=e}else if(this.isSpecial()){if(t=function(t){var e,r,n=[],o=id(od(ad(t),Yv,"."),".");for(e=0;e<o.length;e++)nd(n,Qv(Vv,r=o[e])?"xn--"+cd(r):r);return rd(n,".")}(t),Sd(Wd,t))return Ld;if(e=function(t){var e,r,n,o,i,a,u,s=jd(t,".");if(s.length&&""===s[s.length-1]&&s.length--,(e=s.length)>4)return t;for(r=[],n=0;n<e;n++){if(""===(o=s[n]))return t;if(i=10,o.length>1&&"0"===wd(o,0)&&(i=Sd(Fd,o)?16:8,o=kd(o,8===i?1:2)),""===o)a=0;else{if(!Sd(10===i?Dd:8===i?Bd:zd,o))return t;a=yd(o,i)}Rd(r,a)}for(n=0;n<e;n++)if(a=r[n],n===e-1){if(a>=bd(256,5-e))return null}else if(a>255)return null;for(u=xd(r),n=0;n<r.length;n++)u+=r[n]*bd(256,3-n);return u}(t),null===e)return Ld;this.host=e}else{if(Sd(qd,t))return Ld;for(e="",r=Wn(t),n=0;n<r.length;n++)e+=Qd(r[n],Vd);this.host=e}},cannotHaveUsernamePasswordPort:function(){return!this.host||this.cannotBeABaseURL||"file"===this.scheme},includesCredentials:function(){return""!==this.username||""!==this.password},isSpecial:function(){return ut(Zd,this.scheme)},shortenPath:function(){var t=this.path,e=t.length;!e||"file"===this.scheme&&1===e&&tg(t[0],!0)||t.length--},serialize:function(){var t=this,e=t.scheme,r=t.username,n=t.password,o=t.host,i=t.port,a=t.path,u=t.query,s=t.fragment,c=e+":";return null!==o?(c+="//",t.includesCredentials()&&(c+=r+(n?":"+n:"")+"@"),c+=Gd(o),null!==i&&(c+=":"+i)):"file"===e&&(c+="//"),c+=t.cannotBeABaseURL?a[0]:a.length?"/"+Ed(a,"/"):"",null!==u&&(c+="?"+u),null!==s&&(c+="#"+s),c},setHref:function(t){var e=this.parse(t);if(e)throw new gd(e);this.searchParams.update()},getOrigin:function(){var t=this.scheme,e=this.port;if("blob"===t)try{return new Rg(t.path[0]).origin}catch(t){return"null"}return"file"!==t&&this.isSpecial()?t+"://"+Gd(this.host)+(null!==e?":"+e:""):"null"},getProtocol:function(){return this.scheme+":"},setProtocol:function(t){this.parse(Wr(t)+":",ng)},getUsername:function(){return this.username},setUsername:function(t){var e=Wn(Wr(t));if(!this.cannotHaveUsernamePasswordPort()){this.username="";for(var r=0;r<e.length;r++)this.username+=Qd(e[r],Jd)}},getPassword:function(){return this.password},setPassword:function(t){var e=Wn(Wr(t));if(!this.cannotHaveUsernamePasswordPort()){this.password="";for(var r=0;r<e.length;r++)this.password+=Qd(e[r],Jd)}},getHost:function(){var t=this.host,e=this.port;return null===t?"":null===e?Gd(t):Gd(t)+":"+e},setHost:function(t){this.cannotBeABaseURL||this.parse(t,pg)},getHostname:function(){var t=this.host;return null===t?"":Gd(t)},setHostname:function(t){this.cannotBeABaseURL||this.parse(t,vg)},getPort:function(){var t=this.port;return null===t?"":Wr(t)},setPort:function(t){this.cannotHaveUsernamePasswordPort()||(""===(t=Wr(t))?this.port=null:this.parse(t,dg))},getPathname:function(){var t=this.path;return this.cannotBeABaseURL?t[0]:t.length?"/"+Ed(t,"/"):""},setPathname:function(t){this.cannotBeABaseURL||(this.path=[],this.parse(t,bg))},getSearch:function(){var t=this.query;return t?"?"+t:""},setSearch:function(t){""===(t=Wr(t))?this.query=null:("?"===wd(t,0)&&(t=kd(t,1)),this.query="",this.parse(t,Eg)),this.searchParams.update()},getSearchParams:function(){return this.searchParams.facade},getHash:function(){var t=this.fragment;return t?"#"+t:""},setHash:function(t){""!==(t=Wr(t))?("#"===wd(t,0)&&(t=kd(t,1)),this.fragment="",this.parse(t,Og)):this.fragment=null},update:function(){this.query=this.searchParams.serialize()||null}};var Rg=function(t){var e=ko(this,Pg),r=Up(arguments.length,1)>1?arguments[1]:void 0,n=ld(e,new xg(t,!1,r));u||(e.href=n.serialize(),e.origin=n.getOrigin(),e.protocol=n.getProtocol(),e.username=n.getUsername(),e.password=n.getPassword(),e.host=n.getHost(),e.hostname=n.getHostname(),e.port=n.getPort(),e.pathname=n.getPathname(),e.search=n.getSearch(),e.searchParams=n.getSearchParams(),e.hash=n.getHash())},Pg=Rg.prototype,Ag=function(t,e){return{get:function(){return hd(this)[t]()},set:e&&function(t){return hd(this)[e](t)},configurable:!0,enumerable:!0}};if(u&&(so(Pg,"href",Ag("serialize","setHref")),so(Pg,"origin",Ag("getOrigin")),so(Pg,"protocol",Ag("getProtocol","setProtocol")),so(Pg,"username",Ag("getUsername","setUsername")),so(Pg,"password",Ag("getPassword","setPassword")),so(Pg,"host",Ag("getHost","setHost")),so(Pg,"hostname",Ag("getHostname","setHostname")),so(Pg,"port",Ag("getPort","setPort")),so(Pg,"pathname",Ag("getPathname","setPathname")),so(Pg,"search",Ag("getSearch","setSearch")),so(Pg,"searchParams",Ag("getSearchParams")),so(Pg,"hash",Ag("getHash","setHash"))),ie(Pg,"toJSON",function(){return hd(this).serialize()},{enumerable:!0}),ie(Pg,"toString",function(){return hd(this).serialize()},{enumerable:!0}),dd){var jg=dd.createObjectURL,kg=dd.revokeObjectURL;jg&&ie(Rg,"createObjectURL",ar(jg,dd)),kg&&ie(Rg,"revokeObjectURL",ar(kg,dd))}an(Rg,"URL"),Ce({global:!0,constructor:!0,forced:!Mp,sham:!u},{URL:Rg});var Ig=L("URL"),Tg=Mp&&a(function(){Ig.canParse()}),Mg=a(function(){return 1!==Ig.canParse.length});Ce({target:"URL",stat:!0,forced:!Tg||Mg},{canParse:function(t){var e=Up(arguments.length,1),r=Wr(t),n=e<2||void 0===arguments[1]?void 0:Wr(arguments[1]);try{return!!new Ig(r,n)}catch(t){return!1}}});var Lg=L("URL");Ce({target:"URL",stat:!0,forced:!Mp},{parse:function(t){var e=Up(arguments.length,1),r=Wr(t),n=e<2||void 0===arguments[1]?void 0:Wr(arguments[1]);try{return new Lg(r,n)}catch(t){return null}}}),Ce({target:"URL",proto:!0,enumerable:!0},{toJSON:function(){return f(URL.prototype.toString,this)}});var Ug=WeakMap.prototype,Ng={WeakMap:WeakMap,set:b(Ug.set),get:b(Ug.get),has:b(Ug.has),remove:b(Ug.delete)},Cg=Ng.has,_g=function(t){return Cg(t),t},Fg=Ng.get,Bg=Ng.has,Dg=Ng.set;Ce({target:"WeakMap",proto:!0,real:!0,forced:!0},{emplace:function(t,e){var r,n,o=_g(this);return Bg(o,t)?(r=Fg(o,t),"update"in e&&(r=e.update(r,t,o),Dg(o,t,r)),r):(n=e.insert(t,o),Dg(o,t,n),n)}}),Ce({target:"WeakMap",stat:!0,forced:!0},{from:ei(Ng.WeakMap,Ng.set,!0)}),Ce({target:"WeakMap",stat:!0,forced:!0},{of:ri(Ng.WeakMap,Ng.set,!0)});var zg=Ng.remove;Ce({target:"WeakMap",proto:!0,real:!0,forced:!0},{deleteAll:function(){for(var t,e=_g(this),r=!0,n=0,o=arguments.length;n<o;n++)t=zg(e,arguments[n]),r=r&&t;return!!r}}),Ce({target:"WeakMap",proto:!0,real:!0,forced:!0},{upsert:Ii}),To("WeakSet",function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}},eu);var Wg=WeakSet.prototype,qg={WeakSet:WeakSet,add:b(Wg.add),has:b(Wg.has),remove:b(Wg.delete)},Hg=qg.has,$g=function(t){return Hg(t),t},Kg=qg.add;Ce({target:"WeakSet",proto:!0,real:!0,forced:!0},{addAll:function(){for(var t=$g(this),e=0,r=arguments.length;e<r;e++)Kg(t,arguments[e]);return t}});var Gg=qg.remove;Ce({target:"WeakSet",proto:!0,real:!0,forced:!0},{deleteAll:function(){for(var t,e=$g(this),r=!0,n=0,o=arguments.length;n<o;n++)t=Gg(e,arguments[n]),r=r&&t;return!!r}}),Ce({target:"WeakSet",stat:!0,forced:!0},{from:ei(qg.WeakSet,qg.add,!1)}),Ce({target:"WeakSet",stat:!0,forced:!0},{of:ri(qg.WeakSet,qg.add,!1)});var Vg=Error,Yg=b("".replace),Xg=String(new Vg("zxcasd").stack),Jg=/\n\s*at [^:]*:[^\n]*/,Qg=Jg.test(Xg),Zg=!a(function(){var t=new Error("a");return!("stack"in t)||(Object.defineProperty(t,"stack",d(1,7)),7!==t.stack)}),ty=Error.captureStackTrace,ey=dt("toStringTag"),ry=Error,ny=[].push,oy=function(t,e){var r,n,o,i,a,u=U(iy,this);dn?r=dn(new ry,u?Qr(this):iy):(r=u?this:Ve(iy),_t(r,ey,"Error")),void 0!==e&&_t(r,"message",function(t,e){return void 0===t?arguments.length<2?"":e:Wr(t)}(e)),i=r,a=r.stack,Zg&&(ty?ty(i,oy):_t(i,"stack",function(t,e){if(Qg&&"string"==typeof t&&!Vg.prepareStackTrace)for(;e--;)t=Yg(t,Jg,"");return t}(a,1))),arguments.length>2&&(n=r,M(o=arguments[2])&&"cause"in o&&_t(n,"cause",o.cause));var s=[];return Ao(t,ny,{that:s}),_t(r,"errors",s),r};dn?dn(oy,ry):Ae(oy,ry,{name:!0});var iy=oy.prototype=Ve(ry.prototype,{constructor:d(1,oy),message:d(1,""),name:d(1,"AggregateError")});Ce({global:!0,constructor:!0,arity:2},{AggregateError:oy});var ay,uy,sy,cy,fy=function(t){return _.slice(0,t.length)===t},ly=fy("Bun/")?"BUN":fy("Cloudflare-Workers")?"CLOUDFLARE":fy("Deno/")?"DENO":fy("Node.js/")?"NODE":i.Bun&&"string"==typeof Bun.version?"BUN":i.Deno&&"object"==typeof Deno.version?"DENO":"process"===E(i.process)?"NODE":i.window&&i.document?"BROWSER":"REST",hy="NODE"===ly,py=/(?:ipad|iphone|ipod).*applewebkit/i.test(_),vy=i.setImmediate,dy=i.clearImmediate,gy=i.process,yy=i.Dispatch,my=i.Function,by=i.MessageChannel,wy=i.String,Sy=0,Ey={},Oy="onreadystatechange";a(function(){ay=i.location});var xy=function(t){if(ut(Ey,t)){var e=Ey[t];delete Ey[t],e()}},Ry=function(t){return function(){xy(t)}},Py=function(t){xy(t.data)},Ay=function(t){i.postMessage(wy(t),ay.protocol+"//"+ay.host)};vy&&dy||(vy=function(t){Up(arguments.length,1);var e=T(t)?t:my(t),r=vo(arguments,1);return Ey[++Sy]=function(){Ra(e,void 0,r)},uy(Sy),Sy},dy=function(t){delete Ey[t]},hy?uy=function(t){gy.nextTick(Ry(t))}:yy&&yy.now?uy=function(t){yy.now(Ry(t))}:by&&!py?(cy=(sy=new by).port2,sy.port1.onmessage=Py,uy=ar(cy.postMessage,cy)):i.addEventListener&&T(i.postMessage)&&!i.importScripts&&ay&&"file:"!==ay.protocol&&!a(Ay)?(uy=Ay,i.addEventListener("message",Py,!1)):uy=Oy in Et("script")?function(t){De.appendChild(Et("script"))[Oy]=function(){De.removeChild(this),xy(t)}}:function(t){setTimeout(Ry(t),0)});var jy={set:vy,clear:dy},ky=function(){this.head=null,this.tail=null};ky.prototype={add:function(t){var e={item:t,next:null},r=this.tail;r?r.next=e:this.head=e,this.tail=e},get:function(){var t=this.head;if(t)return null===(this.head=t.next)&&(this.tail=null),t.item}};var Iy,Ty,My,Ly,Uy,Ny=ky,Cy=/ipad|iphone|ipod/i.test(_)&&"undefined"!=typeof Pebble,_y=/web0s(?!.*chrome)/i.test(_),Fy=jy.set,By=i.MutationObserver||i.WebKitMutationObserver,Dy=i.document,zy=i.process,Wy=i.Promise,qy=Ip("queueMicrotask");if(!qy){var Hy=new Ny,$y=function(){var t,e;for(hy&&(t=zy.domain)&&t.exit();e=Hy.get();)try{e()}catch(t){throw Hy.head&&Iy(),t}t&&t.enter()};py||hy||_y||!By||!Dy?!Cy&&Wy&&Wy.resolve?((Ly=Wy.resolve(void 0)).constructor=Wy,Uy=ar(Ly.then,Ly),Iy=function(){Uy($y)}):hy?Iy=function(){zy.nextTick($y)}:(Fy=ar(Fy,i),Iy=function(){Fy($y)}):(Ty=!0,My=Dy.createTextNode(""),new By($y).observe(My,{characterData:!0}),Iy=function(){My.data=Ty=!Ty}),qy=function(t){Hy.head||Iy(),Hy.add(t)}}var Ky,Gy,Vy,Yy=qy,Xy=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}},Jy=i.Promise,Qy=dt("species"),Zy=!1,tm=T(i.PromiseRejectionEvent),em=Ue("Promise",function(){var t=Kt(Jy),e=t!==String(Jy);if(!e&&66===W)return!0;if(!W||W<51||!/native code/.test(t)){var r=new Jy(function(t){t(1)}),n=function(t){t(function(){},function(){})};if((r.constructor={})[Qy]=n,!(Zy=r.then(function(){})instanceof n))return!0}return!(e||"BROWSER"!==ly&&"DENO"!==ly||tm)}),rm={CONSTRUCTOR:em,REJECTION_EVENT:tm,SUBCLASSING:Zy},nm=TypeError,om=function(t){var e,r;this.promise=new t(function(t,n){if(void 0!==e||void 0!==r)throw new nm("Bad Promise constructor");e=t,r=n}),this.resolve=J(e),this.reject=J(r)},im={f:function(t){return new om(t)}},am=jy.set,um="Promise",sm=rm.CONSTRUCTOR,cm=rm.REJECTION_EVENT,fm=rm.SUBCLASSING,lm=ne.getterFor(um),hm=ne.set,pm=Jy&&Jy.prototype,vm=Jy,dm=pm,gm=i.TypeError,ym=i.document,mm=i.process,bm=im.f,wm=bm,Sm=!!(ym&&ym.createEvent&&i.dispatchEvent),Em="unhandledrejection",Om=function(t){var e;return!(!M(t)||!T(e=t.then))&&e},xm=function(t,e){var r,n,o,i=e.value,a=1===e.state,u=a?t.ok:t.fail,s=t.resolve,c=t.reject,l=t.domain;try{u?(a||(2===e.rejection&&km(e),e.rejection=1),!0===u?r=i:(l&&l.enter(),r=u(i),l&&(l.exit(),o=!0)),r===t.promise?c(new gm("Promise-chain cycle")):(n=Om(r))?f(n,r,s,c):s(r)):c(i)}catch(t){l&&!o&&l.exit(),c(t)}},Rm=function(t,e){t.notified||(t.notified=!0,Yy(function(){for(var r,n=t.reactions;r=n.get();)xm(r,t);t.notified=!1,e&&!t.rejection&&Am(t)}))},Pm=function(t,e,r){var n,o;Sm?((n=ym.createEvent("Event")).promise=e,n.reason=r,n.initEvent(t,!1,!0),i.dispatchEvent(n)):n={promise:e,reason:r},!cm&&(o=i["on"+t])?o(n):t===Em&&function(t,e){try{1===arguments.length?console.error(t):console.error(t,e)}catch(t){}}("Unhandled promise rejection",r)},Am=function(t){f(am,i,function(){var e,r=t.facade,n=t.value;if(jm(t)&&(e=Xy(function(){hy?mm.emit("unhandledRejection",n,r):Pm(Em,r,n)}),t.rejection=hy||jm(t)?2:1,e.error))throw e.value})},jm=function(t){return 1!==t.rejection&&!t.parent},km=function(t){f(am,i,function(){var e=t.facade;hy?mm.emit("rejectionHandled",e):Pm("rejectionhandled",e,t.value)})},Im=function(t,e,r){return function(n){t(e,n,r)}},Tm=function(t,e,r){t.done||(t.done=!0,r&&(t=r),t.value=e,t.state=2,Rm(t,!0))},Mm=function(t,e,r){if(!t.done){t.done=!0,r&&(t=r);try{if(t.facade===e)throw new gm("Promise can't be resolved itself");var n=Om(e);n?Yy(function(){var r={done:!1};try{f(n,e,Im(Mm,r,t),Im(Tm,r,t))}catch(e){Tm(r,e,t)}}):(t.value=e,t.state=1,Rm(t,!1))}catch(e){Tm({done:!1},e,t)}}};if(sm&&(vm=function(t){ko(this,dm),J(t),f(Ky,this);var e=lm(this);try{t(Im(Mm,e),Im(Tm,e))}catch(t){Tm(e,t)}},(Ky=function(t){hm(this,{type:um,done:!1,notified:!1,parent:!1,reactions:new Ny,rejection:!1,state:0,value:null})}).prototype=ie(dm=vm.prototype,"then",function(t,e){var r=lm(this),n=bm(Cc(this,vm));return r.parent=!0,n.ok=!T(t)||t,n.fail=T(e)&&e,n.domain=hy?mm.domain:void 0,0===r.state?r.reactions.add(n):Yy(function(){xm(n,r)}),n.promise}),Gy=function(){var t=new Ky,e=lm(t);this.promise=t,this.resolve=Im(Mm,e),this.reject=Im(Tm,e)},im.f=bm=function(t){return t===vm||void 0===t?new Gy(t):wm(t)},T(Jy)&&pm!==Object.prototype)){Vy=pm.then,fm||ie(pm,"then",function(t,e){var r=this;return new vm(function(t,e){f(Vy,r,t,e)}).then(t,e)},{unsafe:!0});try{delete pm.constructor}catch(t){}dn&&dn(pm,dm)}Ce({global:!0,constructor:!0,wrap:!0,forced:sm},{Promise:vm}),an(vm,um,!1),Uo(um);var Lm=rm.CONSTRUCTOR||!Gn(function(t){Jy.all(t).then(void 0,function(){})});Ce({target:"Promise",stat:!0,forced:Lm},{all:function(t){var e=this,r=im.f(e),n=r.resolve,o=r.reject,i=Xy(function(){var r=J(e.resolve),i=[],a=0,u=1;Ao(t,function(t){var s=a++,c=!1;u++,f(r,e,t).then(function(t){c||(c=!0,i[s]=t,--u||n(i))},o)}),--u||n(i)});return i.error&&o(i.value),r.promise}});var Um=Jy&&Jy.prototype;if(Ce({target:"Promise",proto:!0,forced:rm.CONSTRUCTOR,real:!0},{catch:function(t){return this.then(void 0,t)}}),T(Jy)){var Nm=L("Promise").prototype.catch;Um.catch!==Nm&&ie(Um,"catch",Nm,{unsafe:!0})}Ce({target:"Promise",stat:!0,forced:Lm},{race:function(t){var e=this,r=im.f(e),n=r.reject,o=Xy(function(){var o=J(e.resolve);Ao(t,function(t){f(o,e,t).then(r.resolve,n)})});return o.error&&n(o.value),r.promise}}),Ce({target:"Promise",stat:!0,forced:rm.CONSTRUCTOR},{reject:function(t){var e=im.f(this);return(0,e.reject)(t),e.promise}});var Cm=function(t,e){if(kt(t),M(e)&&e.constructor===t)return e;var r=im.f(t);return(0,r.resolve)(e),r.promise};Ce({target:"Promise",stat:!0,forced:rm.CONSTRUCTOR},{resolve:function(t){return Cm(this,t)}}),Ce({target:"Promise",stat:!0,forced:Lm},{allSettled:function(t){var e=this,r=im.f(e),n=r.resolve,o=r.reject,i=Xy(function(){var r=J(e.resolve),o=[],i=0,a=1;Ao(t,function(t){var u=i++,s=!1;a++,f(r,e,t).then(function(t){s||(s=!0,o[u]={status:"fulfilled",value:t},--a||n(o))},function(t){s||(s=!0,o[u]={status:"rejected",reason:t},--a||n(o))})}),--a||n(o)});return i.error&&o(i.value),r.promise}});var _m="No one promise resolved";Ce({target:"Promise",stat:!0,forced:Lm},{any:function(t){var e=this,r=L("AggregateError"),n=im.f(e),o=n.resolve,i=n.reject,a=Xy(function(){var n=J(e.resolve),a=[],u=0,s=1,c=!1;Ao(t,function(t){var l=u++,h=!1;s++,f(n,e,t).then(function(t){h||c||(c=!0,o(t))},function(t){h||c||(h=!0,a[l]=t,--s||i(new r(a,_m)))})}),--s||i(new r(a,_m))});return a.error&&i(a.value),n.promise}}),Ce({target:"Promise",stat:!0},{withResolvers:function(){var t=im.f(this);return{promise:t.promise,resolve:t.resolve,reject:t.reject}}});var Fm=Jy&&Jy.prototype,Bm=!!Jy&&a(function(){Fm.finally.call({then:function(){}},function(){})});if(Ce({target:"Promise",proto:!0,real:!0,forced:Bm},{finally:function(t){var e=Cc(this,L("Promise")),r=T(t);return this.then(r?function(r){return Cm(e,t()).then(function(){return r})}:t,r?function(r){return Cm(e,t()).then(function(){throw r})}:t)}}),T(Jy)){var Dm=L("Promise").prototype.finally;Fm.finally!==Dm&&ie(Fm,"finally",Dm,{unsafe:!0})}var zm=i.Promise,Wm=!1,qm=!zm||!zm.try||Xy(function(){zm.try(function(t){Wm=8===t},8)}).error||!Wm;Ce({target:"Promise",stat:!0,forced:qm},{try:function(t){var e=arguments.length>1?vo(arguments,1):[],r=im.f(this),n=Xy(function(){return Ra(J(t),void 0,e)});return(n.error?r.reject:r.resolve)(n.value),r.promise}}),Ze("Promise","finally");var Hm="URLSearchParams"in self,$m="Symbol"in self&&"iterator"in Symbol,Km="FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(t){return!1}}(),Gm="FormData"in self,Vm="ArrayBuffer"in self;if(Vm)var Ym=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],Xm=ArrayBuffer.isView||function(t){return t&&Ym.indexOf(Object.prototype.toString.call(t))>-1};function Jm(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function Qm(t){return"string"!=typeof t&&(t=String(t)),t}function Zm(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return $m&&(e[Symbol.iterator]=function(){return e}),e}function tb(t){this.map={},t instanceof tb?t.forEach(function(t,e){this.append(e,t)},this):Array.isArray(t)?t.forEach(function(t){this.append(t[0],t[1])},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function eb(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function rb(t){return new Promise(function(e,r){t.onload=function(){e(t.result)},t.onerror=function(){r(t.error)}})}function nb(t){var e=new FileReader,r=rb(e);return e.readAsArrayBuffer(t),r}function ob(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function ib(){return this.bodyUsed=!1,this._initBody=function(t){var e;this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:Km&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:Gm&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:Hm&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():Vm&&Km&&(e=t)&&DataView.prototype.isPrototypeOf(e)?(this._bodyArrayBuffer=ob(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):Vm&&(ArrayBuffer.prototype.isPrototypeOf(t)||Xm(t))?this._bodyArrayBuffer=ob(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):Hm&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},Km&&(this.blob=function(){var t=eb(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?eb(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(nb)}),this.text=function(){var t=eb(this);if(t)return t;if(this._bodyBlob)return function(t){var e=new FileReader,r=rb(e);return e.readAsText(t),r}(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),r=new Array(e.length),n=0;n<e.length;n++)r[n]=String.fromCharCode(e[n]);return r.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},Gm&&(this.formData=function(){return this.text().then(sb)}),this.json=function(){return this.text().then(JSON.parse)},this}tb.prototype.append=function(t,e){t=Jm(t),e=Qm(e);var r=this.map[t];this.map[t]=r?r+", "+e:e},tb.prototype.delete=function(t){delete this.map[Jm(t)]},tb.prototype.get=function(t){return t=Jm(t),this.has(t)?this.map[t]:null},tb.prototype.has=function(t){return this.map.hasOwnProperty(Jm(t))},tb.prototype.set=function(t,e){this.map[Jm(t)]=Qm(e)},tb.prototype.forEach=function(t,e){for(var r in this.map)this.map.hasOwnProperty(r)&&t.call(e,this.map[r],r,this)},tb.prototype.keys=function(){var t=[];return this.forEach(function(e,r){t.push(r)}),Zm(t)},tb.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),Zm(t)},tb.prototype.entries=function(){var t=[];return this.forEach(function(e,r){t.push([r,e])}),Zm(t)},$m&&(tb.prototype[Symbol.iterator]=tb.prototype.entries);var ab=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function ub(t,e){var r=(e=e||{}).body;if(t instanceof ub){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new tb(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,r||null==t._bodyInit||(r=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new tb(e.headers)),this.method=function(t){var e=t.toUpperCase();return ab.indexOf(e)>-1?e:t}(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&r)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(r)}function sb(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var r=t.split("="),n=r.shift().replace(/\+/g," "),o=r.join("=").replace(/\+/g," ");e.append(decodeURIComponent(n),decodeURIComponent(o))}}),e}function cb(t,e){e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new tb(e.headers),this.url=e.url||"",this._initBody(t)}ub.prototype.clone=function(){return new ub(this,{body:this._bodyInit})},ib.call(ub.prototype),ib.call(cb.prototype),cb.prototype.clone=function(){return new cb(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new tb(this.headers),url:this.url})},cb.error=function(){var t=new cb(null,{status:0,statusText:""});return t.type="error",t};var fb=[301,302,303,307,308];cb.redirect=function(t,e){if(-1===fb.indexOf(e))throw new RangeError("Invalid status code");return new cb(null,{status:e,headers:{location:t}})};var lb=self.DOMException;try{new lb}catch(t){(lb=function(t,e){this.message=t,this.name=e;var r=Error(t);this.stack=r.stack}).prototype=Object.create(Error.prototype),lb.prototype.constructor=lb}function hb(t,e){return new Promise(function(r,n){var o=new ub(t,e);if(o.signal&&o.signal.aborted)return n(new lb("Aborted","AbortError"));var i=new XMLHttpRequest;function a(){i.abort()}i.onload=function(){var t,e,n={status:i.status,statusText:i.statusText,headers:(t=i.getAllResponseHeaders()||"",e=new tb,t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach(function(t){var r=t.split(":"),n=r.shift().trim();if(n){var o=r.join(":").trim();e.append(n,o)}}),e)};n.url="responseURL"in i?i.responseURL:n.headers.get("X-Request-URL"),r(new cb("response"in i?i.response:i.responseText,n))},i.onerror=function(){n(new TypeError("Network request failed"))},i.ontimeout=function(){n(new TypeError("Network request failed"))},i.onabort=function(){n(new lb("Aborted","AbortError"))},i.open(o.method,o.url,!0),"include"===o.credentials?i.withCredentials=!0:"omit"===o.credentials&&(i.withCredentials=!1),"responseType"in i&&Km&&(i.responseType="blob"),o.headers.forEach(function(t,e){i.setRequestHeader(e,t)}),o.signal&&(o.signal.addEventListener("abort",a),i.onreadystatechange=function(){4===i.readyState&&o.signal.removeEventListener("abort",a)}),i.send(void 0===o._bodyInit?null:o._bodyInit)})}hb.polyfill=!0,self.fetch||(self.fetch=hb,self.Headers=tb,self.Request=ub,self.Response=cb);var pb=Object.getOwnPropertySymbols,vb=Object.prototype.hasOwnProperty,db=Object.prototype.propertyIsEnumerable,gb=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},r=0;r<10;r++)e["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(e).map(function(t){return e[t]}).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach(function(t){n[t]=t}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(t){return!1}}()?Object.assign:function(t,e){for(var r,n,o=function(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}(t),i=1;i<arguments.length;i++){for(var a in r=Object(arguments[i]))vb.call(r,a)&&(o[a]=r[a]);if(pb){n=pb(r);for(var u=0;u<n.length;u++)db.call(r,n[u])&&(o[n[u]]=r[n[u]])}}return o};Object.assign=gb}();

File: ./frontend/.next/static/chunks/_a91c21._.js
  JavaScript Functions:
    - with
    - finishes
    - handleSmoothScroll
    - walkAddRefetch
    - findDOMNode
    - shouldSkipElement
    - topOfElementInViewport
    - getHashFragmentDomNode
    - handlePotentialScroll
    - ScrollAndFocusHandler
    - InnerLayoutRouter
    - LoadingBoundary
    - OuterLayoutRouter
    - RenderFromTemplateContext
    - _export
    - describeStringPropertyAccess
    - describeHasCheckingStringProperty
    - throwWithStaticGenerationBailoutError
    - throwWithStaticGenerationBailoutErrorWithDynamicError
    - isRequestAPICallableInsideAfter
    - createRenderSearchParamsFromClient
    - makeUntrackedExoticSearchParamsWithDevWarnings
    - makeUntrackedExoticSearchParams
    - noop
    - warnForSyncAccess
    - warnForSyncSpread
    - createRenderParamsFromClient
    - makeUntrackedExoticParams
    - makeDynamicallyTrackedExoticParamsWithDevWarnings
    - noop
    - warnForSyncAccess
    - warnForEnumeration
    - describeListOfPropertyNames
    - _getRequireWildcardCache
    - _interop_require_wildcard
    - createDedupedByCallsiteServerErrorLoggerDev
    - logDedupedError
    - _export
    - scheduleOnNextTick
    - scheduleImmediate
    - atLeastOneTask
    - waitAtLeastOneReactRenderTask
    - _export
    - createSearchParamsFromClient
    - createServerSearchParamsForServerPage
    - createPrerenderSearchParamsForClientPage
    - createPrerenderSearchParams
    - createRenderSearchParams
    - makeAbortingExoticSearchParams
    - on
    - makeErroringExoticSearchParams
    - on
    - makeUntrackedExoticSearchParams
    - makeDynamicallyTrackedExoticSearchParamsWithDevWarnings
    - syncIODev
    - noop
    - createSearchAccessError
    - createIncompleteEnumerationError
    - describeListOfPropertyNames
    - _export
    - createParamsFromClient
    - createServerParamsForRoute
    - createServerParamsForServerSegment
    - createPrerenderParamsForClientSegment
    - createPrerenderParams
    - createRenderParams
    - makeAbortingExoticParams
    - makeErroringExoticParams
    - makeUntrackedExoticParams
    - makeDynamicallyTrackedExoticParamsWithDevWarnings
    - syncIODev
    - noop
    - createParamsAccessError
    - createIncompleteEnumerationError
    - describeListOfPropertyNames
    - ClientPageRoot
    - ClientSegmentRoot
    - _export
  Comments:
    /**
 * Run function with `scroll-behavior: auto` applied to `<html/>`.
 * This css change will be reverted after the function finishes.
 */
    // if only the hash is changed, we don't need to disable smooth scrolling
    // we only care to prevent smooth scrolling when navigating to a new page to avoid jarring UX
    // In Chrome-based browsers we need to force reflow before calling `scrollTo`.
    // Otherwise it will not pickup the change in scrollBehavior
    // More info here: https://github.com/vercel/next.js/issues/40719#issuecomment-1336248042
    //# sourceMappingURL=handle-smooth-scroll.js.map
    /**
 * OuterLayoutRouter handles the current segment as well as <Offscreen> rendering of other segments.
 * It can be rendered next to each other with a different `parallelRouterKey`, allowing for Parallel routes.
 */
    /*#__PURE__*/
    /*#__PURE__*/
    /**
 * Add refetch marker to router state at the point of the current layout segment.
 * This ensures the response returned is not further down than the current layout segment.
 */
    // TODO-APP: Replace with new React API for finding dom nodes without a `ref` when available
    /**
 * Wraps ReactDOM.findDOMNode with additional logic to hide React Strict Mode warning
 */
    // Tree-shake for server bundle
    // __DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE.findDOMNode is null during module init.
    // We need to lazily reference it.
    /**
 * Check if a HTMLElement is hidden or fixed/sticky position
 */
    // we ignore fixed or sticky positioned elements since they'll likely pass the "in-viewport" check
    // and will result in a situation we bail on scroll because of something like a fixed nav,
    // even though the actual page content is offscreen
    // Uses `getBoundingClientRect` to check if the element is hidden instead of `offsetParent`
    // because `offsetParent` doesn't consider document/body
    /**
 * Check if the top corner of the HTMLElement is in the viewport.
 */
    /**
 * Find the DOM node for a hash fragment.
 * If `top` the page has to scroll to the top of the page. This mirrors the browser's behavior.
 * If the hash fragment is an id, the page has to scroll to the element with that id.
 * If the hash fragment is a name, the page has to scroll to the first element with that name.
 */
    // If the hash fragment is `top` the page has to scroll to the top of the page.
    // If the hash fragment is an id, the page has to scroll to the element with that id.
    // Because this property is overwritten in handlePotentialScroll it's fine to always run it when true as it'll be set to false for subsequent renders.
    // Handle scroll and focus, it's only applied once in the first useEffect that triggers that changed.
    // segmentPaths is an array of segment paths that should be scrolled to
    // if the current segment path is not in the array, the scroll is not applied
    // unless the array is empty, in which case the scroll is always applied
    // `findDOMNode` is tricky because it returns just the first child if the component is a fragment.
    // This already caused a bug where the first child was a <link/> in head.
    // If there is no DOM node this layout-router level is skipped. It'll be handled higher-up in the tree.
    // Verify if the element is a HTMLElement and if we want to consider it for scroll behavior.
    // If the element is skipped, try to select the next sibling and try again.
    // No siblings found that match the criteria are found, so handle scroll higher up in the tree instead.
    // State is mutated to ensure that the focus and scroll is applied only once.
    // In case of hash scroll, we only need to scroll the element into view
    // Store the current viewport height because reading `clientHeight` causes a reflow,
    // and it won't change during this function.
    // If the element's top edge is already in the viewport, exit early.
    // Otherwise, try scrolling go the top of the document to be backward compatible with pages
    // scrollIntoView() called on `<html/>` element scrolls horizontally on chrome and firefox (that shouldn't happen)
    // We could use it to scroll horizontally following RTL but that also seems to be broken - it will always scroll left
    // scrollLeft = 0 also seems to ignore RTL and manually checking for RTL is too much hassle so we will scroll just vertically
    // Scroll to domNode if domNode is not in viewport when scrolled to top of document
    // Scroll into view doesn't scroll horizontally by default when not needed
    // We will force layout by querying domNode position
    // Mutate after scrolling so that it can be read by `handleSmoothScroll`
    // Set focus on the element
    /*#__PURE__*/
    /**
 * InnerLayoutRouter handles rendering the provided segment based on the cache.
 */
    // isActive,
    // Read segment path from the parallel router cache node.
    // When data is not available during rendering client-side we need to fetch
    // it from the server.
    /**
     * Flight data fetch kicked off during render and put into the cache.
     */
    // `rsc` represents the renderable node for this segment.
    // If this segment has a `prefetchRsc`, it's the statically prefetched data.
    // We should use that on initial render instead of `rsc`. Then we'll switch
    // to `rsc` when the dynamic response streams in.
    //
    // If no prefetch data is available, then we go straight to rendering `rsc`.
    // We use `useDeferredValue` to handle switching between the prefetched and
    // final values. The second argument is returned on initial render, then it
    // re-renders with the first argument.
    //
    // @ts-expect-error The second argument to `useDeferredValue` is only
    // available in the experimental builds. When its disabled, it will always
    // return `rsc`.
    // `rsc` is either a React node or a promise for a React node, except we
    // special case `null` to represent that this segment's data is missing. If
    // it's a promise, we need to unwrap it so we can determine whether or not the
    // data is missing.
    // The data for this segment is not available, and there's no pending
    // navigation that will be able to fulfill it. We need to fetch more from
    // the server and patch the cache.
    // Check if there's already a pending request.
    /**
       * Router state with refetch marker added
       */
    // TODO-APP: remove ''
    // Suspend infinitely as `changeByServerResponse` will cause a different part of the tree to be rendered.
    // A falsey `resolvedRsc` indicates missing data -- we should not commit that branch, and we need to wait for the data to arrive.
    // If we get to this point, then we know we have something we can render.
    /*#__PURE__*/
    // TODO-APP: overriding of url for parallel routes
    // Ensure root layout is not wrapped in a div as the root layout renders `<html>`
    /**
 * Renders suspense boundary with the provided "loading" property as the fallback.
 * If no loading property is provided it renders the children without a suspense boundary.
 */
    // If loading is a promise, unwrap it. This happens in cases where we haven't
    // yet received the loading data from the server — which includes whether or
    // not this layout has a loading component at all.
    //
    // It's OK to suspend here instead of inside the fallback because this
    // promise will resolve simultaneously with the data for the segment itself.
    // So it will never suspend for longer than it would have if we didn't use
    // a Suspense fallback at all.
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // Get the current parallelRouter cache node
    // If the parallel router cache node does not exist yet, create it.
    // This writes to the cache when there is no item in the cache yet. It never *overwrites* existing cache items which is why it's safe in concurrent mode.
    // Get the active segment in the tree
    // The reason arrays are used in the data format is that these are transferred from the server to the browser so it's optimized to save bytes.
    // If segment is an array it's a dynamic route and we want to read the dynamic route value as the segment to get from the cache.
    /**
   * Decides which segments to keep rendering, all segments that are not active will be wrapped in `<Offscreen>`.
   */
    // TODO-APP: Add handling of `<Offscreen>` when it's available.
    /*#__PURE__*/
    /*
            - Error boundary
              - Only renders error boundary if error component is provided.
              - Rendered for each segment to ensure they have their own error state.
            - Loading boundary
              - Only renders suspense boundary if loading components is provided.
              - Rendered for each segment to ensure they have their own loading state.
              - Passed to the router during rendering to ensure it can be immediately rendered when suspending on a Flight fetch.
          */
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=layout-router.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=render-from-template-context.js.map
    //# sourceMappingURL=invariant-error.js.map
    //# sourceMappingURL=reflect.js.map
    //# sourceMappingURL=after-task-async-storage-instance.js.map
    //# sourceMappingURL=after-task-async-storage.external.js.map
    // This regex will have fast negatives meaning valid identifiers may not pass
    // this test. However this is only used during static generation to provide hints
    // about why a page bailed out of some or all prerendering and we can use bracket notation
    // for example while `ಠ_ಠ` is a valid identifier it's ok to print `searchParams['ಠ_ಠ']`
    // even if this would have been fine too `searchParams.ಠ_ಠ`
    //nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);
    //nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);
    // Promise prototype
    // fallthrough
    // React Promise extension
    // fallthrough
    // React introspection
    // Common tested properties
    // fallthrough
    //# sourceMappingURL=utils.js.map
    // These properties cannot be shadowed because they need to be the
    // true underlying value for Promises to work correctly at runtime
    // We are accessing a property that doesn't exist on the promise nor
    // the underlying searchParams.
    // We are accessing a property that doesn't exist on the promise nor
    // the underlying searchParams.
    // We don't use makeResolvedReactPromise here because searchParams
    // supports copying with spread and we don't want to unnecessarily
    // instrument the promise with spreadable properties of ReactPromise.
    // These properties cannot be shadowed because they need to be the
    // true underlying value for Promises to work correctly at runtime
    //nextjs.org/docs/messages/sync-dynamic-apis`);
    //nextjs.org/docs/messages/sync-dynamic-apis`);
    //# sourceMappingURL=search-params.browser.js.map
    // These properties cannot be shadowed because they need to be the
    // true underlying value for Promises to work correctly at runtime
    // We don't use makeResolvedReactPromise here because params
    // supports copying with spread and we don't want to unnecessarily
    // instrument the promise with spreadable properties of ReactPromise.
    // These properties cannot be shadowed because they need to be the
    // true underlying value for Promises to work correctly at runtime
    //nextjs.org/docs/messages/sync-dynamic-apis`);
    //nextjs.org/docs/messages/sync-dynamic-apis`);
    //# sourceMappingURL=params.browser.js.map
    /*#__PURE__*/
    // React.cache is currently only available in canary/experimental React channels.
    // When Dynamic IO is enabled, we record these as errors so that they
    // are captured by the dev overlay as it's more critical to fix these
    // when enabled.
    // We don't want to dedupe across requests.
    // The developer might've just attempted to fix the warning so we should warn again if it still happens.
    // Error:
    //   logDedupedError
    //   asyncApiBeingAccessedSynchronously
    //   <userland callsite>
    // TODO: This breaks if sourcemaps with ignore lists are enabled.
    //# sourceMappingURL=create-deduped-by-callsite-server-error-logger.js.map
    // We use Promise.resolve().then() here so that the operation is scheduled at
    // the end of the promise job queue, we then add it to the next process tick
    // to ensure it's evaluated afterwards.
    //
    // This was inspired by the implementation of the DataLoader interface: https://github.com/graphql/dataloader/blob/d336bd15282664e0be4b4a657cb796f09bafbc6b/src/index.js#L213-L255
    //
    //# sourceMappingURL=scheduler.js.map
    // When using forceStatic we override all other logic and always just return an empty
    // dictionary object.
    // dynamicIO Prerender
    // We're prerendering in a mode that aborts (dynamicIO) and should stall
    // the promise to ensure the RSC side is considered dynamic
    // We're prerendering in a mode that does not aborts. We resolve the promise without
    // any tracking because we're just transporting a value from server to client where the tracking
    // will be applied.
    // When using forceStatic we override all other logic and always just return an empty
    // dictionary object.
    // We are in a dynamicIO (PPR or otherwise) prerender
    // The remaining cases are prerender-ppr and prerender-legacy
    // We are in a legacy static generation and need to interrupt the prerender
    // when search params are accessed.
    // When using forceStatic we override all other logic and always just return an empty
    // dictionary object.
    // The promise has this property directly. we must return it.
    // We know it isn't a dynamic access because it can only be something
    // that was previously written to the promise and thus not an underlying searchParam value
    // Object prototype
    // Promise prototype
    // fallthrough
    // Common tested properties
    // fallthrough
    // These properties cannot be shadowed because they need to be the
    // true underlying value for Promises to work correctly at runtime
    // We don't expect key checking to be used except for testing the existence of
    // searchParams so we make all has tests trigger dynamic. this means that `promise.then`
    // can resolve to the then function on the Promise prototype but 'then' in promise will assume
    // you are testing whether the searchParams has a 'then' property.
    // For search params we don't construct a ReactPromise because we want to interrupt
    // rendering on any property access that was not set from outside and so we only want
    // to have properties like value and status if React sets them.
    // The promise has this property directly. we must return it.
    // We know it isn't a dynamic access because it can only be something
    // that was previously written to the promise and thus not an underlying searchParam value
    // Object prototype
    // Promise prototype
    // fallthrough
    // Common tested properties
    // fallthrough
    // These properties cannot be shadowed because they need to be the
    // true underlying value for Promises to work correctly at runtime
    // PPR Prerender (no dynamicIO)
    // Legacy Prerender
    // PPR Prerender (no dynamicIO)
    // Legacy Prerender
    // PPR Prerender (no dynamicIO)
    // Legacy Prerender
    // We don't expect key checking to be used except for testing the existence of
    // searchParams so we make all has tests trigger dynamic. this means that `promise.then`
    // can resolve to the then function on the Promise prototype but 'then' in promise will assume
    // you are testing whether the searchParams has a 'then' property.
    // PPR Prerender (no dynamicIO)
    // Legacy Prerender
    // PPR Prerender (no dynamicIO)
    // Legacy Prerender
    // We don't use makeResolvedReactPromise here because searchParams
    // supports copying with spread and we don't want to unnecessarily
    // instrument the promise with spreadable properties of ReactPromise.
    // Object prototype
    // Promise prototype
    // fallthrough
    // React Promise extension
    // fallthrough
    // Common tested properties
    // fallthrough
    // We have an unfortunate sequence of events that requires this initialization logic. We want to instrument the underlying
    // searchParams object to detect if you are accessing values in dev. This is used for warnings and for things like the static prerender
    // indicator. However when we pass this proxy to our Promise.resolve() below the VM checks if the resolved value is a promise by looking
    // at the `.then` property. To our dynamic tracking logic this is indistinguishable from a `then` searchParam and so we would normally trigger
    // dynamic tracking. However we know that this .then is not real dynamic access, it's just how thenables resolve in sequence. So we introduce
    // this initialization concept so we omit the dynamic check until after we've constructed our resolved promise.
    // We don't use makeResolvedReactPromise here because searchParams
    // supports copying with spread and we don't want to unnecessarily
    // instrument the promise with spreadable properties of ReactPromise.
    // These properties cannot be shadowed because they need to be the
    // true underlying value for Promises to work correctly at runtime
    // We are accessing a property that doesn't exist on the promise nor
    // the underlying searchParams.
    // We are accessing a property that doesn't exist on the promise nor
    // the underlying searchParams.
    // In all cases we warn normally
    // When we're rendering dynamically in dev we need to advance out of the
    // Prerender environment when we read Request data synchronously
    //nextjs.org/docs/messages/sync-dynamic-apis`);
    //nextjs.org/docs/messages/sync-dynamic-apis`);
    //# sourceMappingURL=search-params.js.map
    // This params object has one of more fallback params so we need to consider
    // the awaiting of this params object "dynamic". Since we are in dynamicIO mode
    // we encode this as a promise that never resolves
    // We're prerendering in a mode that does not abort. We resolve the promise without
    // any tracking because we're just transporting a value from server to client where the tracking
    // will be applied.
    // params need to be treated as dynamic because we have at least one fallback param
    // We are in a dynamicIO (PPR or otherwise) prerender
    // remaining cases are prender-ppr and prerender-legacy
    // We aren't in a dynamicIO prerender but we do have fallback params at this
    // level so we need to make an erroring exotic params object which will postpone
    // if you access the fallback params
    // We don't have any fallback params so we have an entirely static safe params object
    // These properties cannot be shadowed because they need to be the
    // true underlying value for Promises to work correctly at runtime
    // We don't use makeResolvedReactPromise here because params
    // supports copying with spread and we don't want to unnecessarily
    // instrument the promise with spreadable properties of ReactPromise.
    // These properties cannot be shadowed because they need to be the
    // true underlying value for Promises to work correctly at runtime
    // In most dynamic APIs we also throw if `dynamic = "error"` however
    // for params is only dynamic when we're generating a fallback shell
    // and even when `dynamic = "error"` we still support generating dynamic
    // fallback shells
    // TODO remove this comment when dynamicIO is the default since there
    // will be no `dynamic = "error"`
    // PPR Prerender (no dynamicIO)
    // Legacy Prerender
    // In most dynamic APIs we also throw if `dynamic = "error"` however
    // for params is only dynamic when we're generating a fallback shell
    // and even when `dynamic = "error"` we still support generating dynamic
    // fallback shells
    // TODO remove this comment when dynamicIO is the default since there
    // will be no `dynamic = "error"`
    // PPR Prerender (no dynamicIO)
    // Legacy Prerender
    // We don't use makeResolvedReactPromise here because params
    // supports copying with spread and we don't want to unnecessarily
    // instrument the promise with spreadable properties of ReactPromise.
    // These properties cannot be shadowed because they need to be the
    // true underlying value for Promises to work correctly at runtime
    // We don't use makeResolvedReactPromise here because params
    // supports copying with spread and we don't want to unnecessarily
    // instrument the promise with spreadable properties of ReactPromise.
    // These properties cannot be shadowed because they need to be the
    // true underlying value for Promises to work correctly at runtime
    // When we're rendering dynamically in dev we need to advance out of the
    // Prerender environment when we read Request data synchronously
    // In all cases we warn normally
    //nextjs.org/docs/messages/sync-dynamic-apis`);
    //nextjs.org/docs/messages/sync-dynamic-apis`);
    //# sourceMappingURL=params.js.map
    // We are going to instrument the searchParams prop with tracking for the
    // appropriate context. We wrap differently in prerendering vs rendering
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=client-page.js.map
    // We are going to instrument the searchParams prop with tracking for the
    // appropriate context. We wrap differently in prerendering vs rendering
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=client-segment.js.map
    // We use a namespace object to allow us to recover the name of the function
    // at runtime even when production bundling/minification is used.
    // so it retains the name inferred from the namespace object
    // so it retains the name inferred from the namespace object
    // so it retains the name inferred from the namespace object
    //# sourceMappingURL=metadata-boundary.js.map
    //# sourceMappingURL=_a91c21._.js.map

File: ./frontend/.next/static/chunks/_e85ca9._.js
  JavaScript Functions:
    - TaskDetails
    - fetchData
    - handleChange
    - getComponentNameFromType
    - testStringCoercion
    - checkKeyStringCoercion
    - disabledLog
    - disableLogs
    - reenableLogs
    - describeBuiltInComponentFrame
    - describeNativeComponentFrame
    - describeUnknownElementTypeFrameInDEV
    - getOwner
    - hasValidKey
    - defineKeyPropWarningGetter
    - warnAboutAccessingKey
    - elementRefGetterWithDeprecationWarning
    - ReactElement
    - jsxDEVImpl
    - validateChildKeys
    - isValidElement
    - validateExplicitKey
    - getCurrentComponentErrorInfo
    - ArrowsPointingOutIcon
    - XMarkIcon
  Comments:
    // ✅ Corrected import
    // ✅ Get taskId from URL
    // ✅ Extract taskId correctly
    //127.0.0.1:5000/api/tasks/${taskId}`);
    //127.0.0.1:5000/api/projects");
    //127.0.0.1:5000/api/contributors");
    //127.0.0.1:5000/api/tasks/${taskId}`, {
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /**
 * @license React
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    //react.dev/link/special-props)", displayName));
    //react.dev/link/warning-keys for more information.', parentType, childOwner);
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=_e85ca9._.js.map

File: ./frontend/.next/static/chunks/src_app_page_19ad6a.js

File: ./frontend/.next/static/chunks/pages__error_5771e1._.js

File: ./frontend/.next/static/chunks/_c46518._.js
  JavaScript Functions:
    - AllTasks
    - toggleExpand
    - to
    - renderTasks
    - getComponentNameFromType
    - testStringCoercion
    - checkKeyStringCoercion
    - disabledLog
    - disableLogs
    - reenableLogs
    - describeBuiltInComponentFrame
    - describeNativeComponentFrame
    - describeUnknownElementTypeFrameInDEV
    - getOwner
    - hasValidKey
    - defineKeyPropWarningGetter
    - warnAboutAccessingKey
    - elementRefGetterWithDeprecationWarning
    - ReactElement
    - jsxDEVImpl
    - validateChildKeys
    - isValidElement
    - validateExplicitKey
    - getCurrentComponentErrorInfo
  Comments:
    // ✅ Theme toggle
    //127.0.0.1:5000/api/tasks").then({
    // ✅ Toggle nested subtasks visibility
    // ✅ Recursive function to render nested tasks
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /**
 * @license React
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    //react.dev/link/special-props)", displayName));
    //react.dev/link/warning-keys for more information.', parentType, childOwner);
    //# sourceMappingURL=_c46518._.js.map

File: ./frontend/.next/static/chunks/node_modules_173380._.js
  JavaScript Functions:
    - getComponentNameFromType
    - testStringCoercion
    - checkKeyStringCoercion
    - disabledLog
    - disableLogs
    - reenableLogs
    - describeBuiltInComponentFrame
    - describeNativeComponentFrame
    - describeUnknownElementTypeFrameInDEV
    - getOwner
    - hasValidKey
    - defineKeyPropWarningGetter
    - warnAboutAccessingKey
    - elementRefGetterWithDeprecationWarning
    - ReactElement
    - jsxDEVImpl
    - validateChildKeys
    - isValidElement
    - validateExplicitKey
    - getCurrentComponentErrorInfo
    - _extends
    - is
    - memoizedSelector
    - isValidElementType
    - typeOf
    - isContextConsumer
    - isMemo
    - warning
    - verify
    - verifySubselectors
    - pureFinalPropsSelectorFactory
    - handleFirstCall
    - handleNewPropsAndNewState
    - handleNewProps
    - handleNewState
    - handleSubsequentCalls
    - pureFinalPropsSelector
    - finalPropsSelectorFactory
    - bindActionCreators
    - isPlainObject
    - verifyPlainObject
    - wrapMapToPropsConstant
    - initConstantSelector
    - constantSelector
    - getDependsOnOwnProps
    - wrapMapToPropsFunc
    - initProxySelector
    - mapToPropsProxy
    - detectFactoryAndVerify
    - createInvalidArgFactory
    - mapDispatchToPropsFactory
    - mapStateToPropsFactory
    - defaultMergeProps
    - wrapMergePropsFunc
    - initMergePropsProxy
    - mergePropsProxy
    - mergePropsFactory
    - defaultNoopBatch
    - createListenerCollection
    - unsubscribe
    - createSubscription
    - addNestedSub
    - notifyNestedSubs
    - handleChangeWrapper
    - isSubscribed
    - trySubscribe
    - tryUnsubscribe
    - trySubscribeSelf
    - tryUnsubscribeSelf
    - canUseDOM
    - isRunningInReactNative
    - getUseIsomorphicLayoutEffect
    - is
    - shallowEqual
    - getStatics
    - hoistNonReactStatics
    - getContext
    - stringifyComponent
    - useIsomorphicLayoutEffectWithArgs
    - captureWrapperProps
    - subscribeUpdates
    - checkForUpdates
    - unsubscribeWrapper
    - strictEqual
    - connect
    - wrapWithConnect
    - returned
    - ConnectFunction
    - forwardConnectRef
    - Provider
    - createReduxContextHook
    - useReduxContext2
    - createStoreHook
    - useStore2
    - createDispatchHook
    - useDispatch2
    - refEquality
    - createSelectorHook
    - useSelector2
    - as
    - as
    - to
    - invariant
    - getRect
    - expand
    - shrink
    - shift
    - createBox
    - parse
    - getWindowScroll
    - offset
    - withScroll
    - calculateBox
    - getBox
    - rafSchd
    - wrapperFn
    - formatProdErrorMessage
    - randomString
    - isPlainObject
    - miniKindOf
    - ctorName
    - isError
    - isDate
    - kindOf
    - createStore
    - ensureCanMutateNextListeners
    - getState
    - subscribe
    - unsubscribe
    - dispatch
    - replaceReducer
    - observable
    - observeState
    - legacy_createStore
    - warning
    - getUnexpectedStateShapeWarningMessage
    - assertReducerShape
    - combineReducers
    - combination
    - bindActionCreator
    - bindActionCreators
    - compose
    - applyMiddleware
    - dispatch
    - isAction
    - 2
    - getDevMessage
    - getFormattedMessage
    - log
    - noop
    - getOptions
    - bindEvents
    - unbind
    - unbindAll
    - toString
    - invariant
    - onWindowError
    - getCallbacks
    - setCallbacks
    - position
    - onDragStart
    - withLocation
    - withCombine
    - onDragUpdate
    - returnedToStart
    - onDragEnd
    - isEqual
    - areInputsEqual
    - useMemo
    - useCallback
    - add
    - subtract
    - 1
    - negate
    - patch
    - distance
    - 1
    - apply
    - executeClip
    - offsetByPosition
    - getCorners
    - 1
    - increase
    - clip
    - getSubject
    - scrollDroppable
    - memoizeOne
    - memoized
    - clear
    - tryGetDestination
    - tryGetCombine
    - moveToNextCombine
    - getImpact
    - isHomeOf
    - isWithin
    - isPartiallyVisibleThroughFrame
    - isTotallyVisibleThroughFrame
    - isTotallyVisibleThroughFrameOnAxis
    - getDroppableDisplaced
    - isVisibleInDroppable
    - isVisibleInViewport
    - 1
    - isPartiallyVisible
    - isTotallyVisible
    - isTotallyVisibleOnAxis
    - getShouldAnimate
    - getTarget
    - getDisplacementGroups
    - process
    - getIndexOfLastItem
    - goAtEnd
    - calculateReorderImpact
    - didStartAfterCritical
    - fromCombine
    - fromReorder
    - moveToNextIndex
    - getCombinedItemDisplacement
    - whenCombining
    - distanceFromStartToBorderBoxCenter
    - distanceFromEndToBorderBoxCenter
    - getCrossAxisBorderBoxCenter
    - goAfter
    - goBefore
    - goIntoStart
    - whenReordering
    - withDroppableDisplacement
    - getResultWithoutDroppableDisplacement
    - getPageBorderBoxCenterFromImpact
    - scrollViewport
    - getDraggables
    - tryGetVisible
    - speculativelyIncrease
    - withViewportDisplacement
    - getClientFromPageBorderBoxCenter
    - isTotallyVisibleInNewLocation
    - moveToNextPlace
    - getKnownActive
    - getBestCrossAxisDroppable
    - getCurrentPageBorderBoxCenter
    - getCurrentPageBorderBox
    - getClosestDraggable
    - getDisplacedBy
    - getRequiredGrowthForPlaceholder
    - withMaxScroll
    - addPlaceholder
    - removePlaceholder
    - moveToNewDroppable
    - proposedIndex
    - moveCrossAxis
    - whatIsDraggedOver
    - 1
    - moveInDirection
    - isMovementAllowed
    - isPositionInFrame
    - run
    - getHasOverlap
    - getFurthestAway
    - getDroppableOver
    - offsetRectByPosition
    - withDroppableScroll
    - getIsDisplaced
    - atIndex
    - getReorderImpact
    - getCombineImpact
    - getDragImpact
    - patchDroppableMap
    - clearUnusedPlaceholder
    - recomputePlaceholders
    - update
    - getDraggables
    - recompute
    - getClientBorderBoxCenter
    - refreshSnap
    - getHomeLocation
    - getLiftEffect
    - patchDimensionMap
    - start
    - finish
    - offsetDraggable
    - getFrame
    - adjustAdditionsForScrollChanges
    - publishWhileDraggingInVirtual
    - isSnapping
    - postDroppableChange
    - removeScrollJumpRequest
    - reducer
    - guard
    - beforeInitialCapture
    - 1
    - initialPublish
    - publishWhileDragging
    - collectionStarting
    - updateDroppableScroll
    - updateDroppableIsEnabled
    - updateDroppableIsCombineEnabled
    - move
    - moveByWindowScroll
    - updateViewportMaxScroll
    - moveUp
    - moveDown
    - moveRight
    - moveLeft
    - flush
    - animateDrop
    - completeDrop
    - drop
    - dropPending
    - dropAnimationFinished
    - checkIndexes
    - validateDimensions
    - lift
    - style
    - moveTo
    - getDropDuration
    - getNewHomeClientOffset
    - getDropImpact
    - dropMiddleware
    - getWindowScroll
    - getWindowScrollBinding
    - getScrollListener
    - updateScroll
    - isActive
    - start
    - stop
    - 1
    - scrollListener
    - getExpiringAnnounce
    - result
    - wasCalled
    - getAsyncMarshal
    - execute
    - add
    - flush
    - areLocationsEqual
    - isCombineEqual
    - isCriticalEqual
    - withTimings
    - getDragStart
    - execute
    - getPublisher
    - beforeCapture
    - beforeStart
    - start
    - update
    - flush
    - drop
    - abort
    - responders
    - dropAnimationFinishMiddleware
    - dropAnimationFlushOnScrollMiddleware
    - clear
    - flushDropAnimation
    - dimensionMarshalStopper
    - focus
    - shouldStop
    - autoScroll
    - pendingDrop
    - createStore
    - 1
    - createPublisher
    - collect
    - add
    - remove
    - stop
    - getMaxScroll
    - getDocumentElement
    - getMaxWindowScroll
    - getViewport
    - getInitialPublish
    - shouldPublishUpdate
    - createDimensionMarshal
    - updateDroppableIsEnabled
    - updateDroppableIsCombineEnabled
    - updateDroppableScroll
    - scrollDroppable
    - stopPublishing
    - subscriber
    - startPublishing
    - canStartDrag
    - scrollWindow
    - getScrollableDroppableOver
    - getBestScrollableDroppable
    - getDistanceThresholds
    - getPercentage
    - getValueFromDistance
    - dampenValueByTime
    - getValue
    - getScrollOnAxis
    - adjustForSizeLimits
    - 1
    - getOverlap
    - getRemainder
    - canPartiallyScroll
    - canScrollWindow
    - getWindowOverlap
    - canScrollDroppable
    - getDroppableOverlap
    - getWindowScrollChange
    - getDroppableScrollChange
    - scroll
    - createFluidScroller
    - tryScroll
    - 1
    - fakeScrollCallback
    - stop
    - createJumpScroller
    - moveByOffset
    - scrollDroppableAsMuchAsItCan
    - scrollWindowAsMuchAsItCan
    - jumpScroller
    - createAutoScroller
    - scroll
    - dragHandle
    - draggable
    - droppable
    - makeGetSelector
    - getStyles
    - 1
    - 1
    - 1
    - getHead
    - createStyleEl
    - useStyleMarshal
    - querySelectorAll
    - getWindowFromEl
    - isHtmlElement
    - findDragHandle
    - useFocusMarshal
    - register
    - unregister
    - tryGiveFocus
    - tryShiftRecord
    - tryRestoreFocusRecorded
    - tryRecordFocus
    - clearFrameOnUnmount
    - createRegistry
    - subscribe
    - unsubscribe
    - notify
    - findDraggableById
    - getDraggableById
    - findDroppableById
    - getDroppableById
    - clean
    - useRegistry
    - unmount
    - getBodyElement
    - getId
    - useAnnouncer
    - setup
    - cleanup
    - remove
    - useUniqueId
    - getElementId
    - useHiddenTextElement
    - mount
    - unmount
    - getVersion
    - isSatisfied
    - checkReactVersion
    - checkDoctype
    - useDev
    - useDevSetupWarning
    - useStartupValidation
    - usePrevious
    - create
    - isClaimed
    - isActive
    - claim
    - release
    - tryAbandon
    - isDragging
    - preventStandardKeyEvents
    - supportedEventName
    - isSloppyClickThresholdExceeded
    - getCaptureBindings
    - useMouseSensor
    - onMouseDown
    - listenForCapture
    - bindCapturingEvents
    - startPendingDrag
    - mount
    - unmount
    - noop
    - getDraggingBindings
    - cancel
    - drop
    - useKeyboardSensor
    - onKeyDown
    - stop
    - tryStartCapture
    - mount
    - unmount
    - getWindowBindings
    - getHandleBindings
    - useTouchSensor
    - getPhase
    - setPhase
    - onTouchStart
    - listenForCapture
    - bindCapturingEvents
    - unbindAll
    - startDragging
    - startPendingDrag
    - mount
    - unmount
    - webkitHack
    - useValidateSensorHooks
    - isAnInteractiveElement
    - isEventInInteractiveElement
    - getBorderBoxCenterPosition
    - isElement
    - supportedMatchesName
    - closestPonyfill
    - closest
    - getSelector
    - findClosestDragHandleFromEvent
    - tryGetClosestDraggableIdFromEvent
    - findDraggable
    - preventDefault
    - isActive
    - canStart
    - tryStart
    - getShouldRespectForcePress
    - isLockActive
    - tryDispatch
    - lift
    - completed
    - finish
    - fluidLift
    - 1
    - snapLift
    - abortPreDrag
    - useSensorMarshal
    - tryAbandonLock
    - listenToStore
    - tryReleaseLock
    - createResponders
    - onBeforeCapureCallback
    - createAutoScrollerOptions
    - getStore
    - App
    - useUniqueContextId
    - DragDropContext
    - getDraggingTransition
    - getDraggingOpacity
    - getShouldDraggingAnimate
    - getDraggingStyle
    - getSecondaryStyle
    - getStyle
    - getDimension
    - useDraggablePublisher
    - checkIsValidInnerRef
    - useValidation
    - prefix
    - useClonePropValidation
    - useRequiredContext
    - preventHtml5Dnd
    - Draggable
    - isStrictEqual
    - whatIsDraggedOverFromResult
    - getCombineWithFromResult
    - getCombineWithFromImpact
    - getDraggableSelector
    - selector
    - getSecondarySnapshot
    - getSecondarySelector
    - getFallback
    - getProps
    - selector
    - 1
    - selector
    - PrivateDraggable
    - PublicDraggable
    - isEqual
    - isEither
    - isBoth
    - isElementScrollable
    - isBodyScrollable
    - getClosestScrollable
    - checkForNestedScrollContainers
    - getScroll
    - getIsFixed
    - getEnv
    - getDroppableDimension
    - frame
    - getClient
    - getDimension
    - closest
    - getListenerOptions
    - getClosestScrollableFromDrag
    - useDroppablePublisher
    - noop
    - getSize
    - getStyle
    - Placeholder
    - isBoolean
    - runChecks
    - required
    - boolean
    - ref
    - placeholder
    - hasClone
    - hasNoPlaceholder
    - useValidation
    - onClose
    - Droppable
    - getClone
    - getBody
    - attachDefaultPropsToOwnProps
    - isMatchingType
    - getDraggable
    - makeMapStateToProps
    - selector
    - ConnectedDroppable
    - ChevronRightIcon
    - ChevronDownIcon
    - UserCircleIcon
    - ClipboardDocumentCheckIcon
    - BookmarkIcon
  Comments:
    /**
 * @license React
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    //react.dev/link/special-props)", displayName));
    //react.dev/link/warning-keys for more information.', parentType, childOwner);
    /**
 * @license React
 * use-sync-external-store-with-selector.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    // src/utils/react.ts
    // src/hooks/useSelector.ts
    // src/utils/react-is.ts
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/utils/warning.ts
    // src/connect/verifySubselectors.ts
    // src/connect/selectorFactory.ts
    // src/utils/bindActionCreators.ts
    // src/utils/isPlainObject.ts
    // src/utils/verifyPlainObject.ts
    // src/connect/wrapMapToProps.ts
    // src/connect/invalidArgFactory.ts
    // src/connect/mapDispatchToProps.ts
    // @ts-ignore
    // @ts-ignore
    // src/connect/mapStateToProps.ts
    // @ts-ignore
    // src/connect/mergeProps.ts
    // src/utils/batch.ts
    // src/utils/Subscription.ts
    // src/utils/useIsomorphicLayoutEffect.ts
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/utils/shallowEqual.ts
    // src/utils/hoistStatics.ts
    // src/components/Context.ts
    /* @__PURE__ */
    /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/components/connect.tsx
    // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.
    // @ts-ignore
    // use React's forwardRef to expose a ref of the wrapped component
    // the context consumer to use
    /* @__PURE__ */
    // @ts-ignore
    /* @__PURE__ */
    // @ts-ignore
    /* @__PURE__ */
    // @ts-ignore
    // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing
    // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,
    // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.
    // @ts-ignore
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/components/Provider.tsx
    /* @__PURE__ */
    /* @__PURE__ */
    // src/hooks/useReduxContext.ts
    /* @__PURE__ */
    // src/hooks/useStore.ts
    // @ts-ignore
    /* @__PURE__ */
    // src/hooks/useDispatch.ts
    /* @__PURE__ */
    //redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization", {
    /* @__PURE__ */
    // src/exports.ts
    //# sourceMappingURL=react-redux.mjs.map
    // src/utils/formatProdErrorMessage.ts
    //redux.js.org/Errors?code=${code} for the full message or use the non-minified dev environment for full errors. `;
    // src/utils/symbol-observable.ts
    /* @__PURE__ */
    // src/utils/actionTypes.ts
    // src/utils/isPlainObject.ts
    // src/utils/kindOf.ts
    // src/createStore.ts
    //redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
    /* @__PURE__ */
    /* @__PURE__ */
    //redux.js.org/api/store#subscribelistener for more details.");
    //redux.js.org/api/store#subscribelistener for more details.");
    //redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`);
    /**
       * The minimal observable subscription method.
       * @param observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
    // src/utils/warning.ts
    // src/combineReducers.ts
    /*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.`);
        }
    });
}
function combineReducers(reducers) {
    const reducerKeys = Object.keys(reducers);
    const finalReducers = {};
    for(let i = 0; i < reducerKeys.length; i++){
        const key = reducerKeys[i];
        if ("TURBOPACK compile-time truthy", 1) {
            if (typeof reducers[key] === "undefined") {
                warning(`No reducer provided for key "${key}"`);
            }
        }
        if (typeof reducers[key] === "function") {
            finalReducers[key] = reducers[key];
        }
    }
    const finalReducerKeys = Object.keys(finalReducers);
    let unexpectedKeyCache;
    if (("TURBOPACK compile-time value", "development") !== "production") {
        unexpectedKeyCache = {};
    }
    let shapeAssertionError;
    try {
        assertReducerShape(finalReducers);
    } catch (e) {
        shapeAssertionError = e;
    }
    return function combination(state = {}, action) {
        if (shapeAssertionError) {
            throw shapeAssertionError;
        }
        if ("TURBOPACK compile-time truthy", 1) {
            const warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
            if (warningMessage) {
                warning(warningMessage);
            }
        }
        let hasChanged = false;
        const nextState = {};
        for(let i = 0; i < finalReducerKeys.length; i++){
            const key = finalReducerKeys[i];
            const reducer = finalReducers[key];
            const previousStateForKey = state[key];
            const nextStateForKey = reducer(previousStateForKey, action);
            if (typeof nextStateForKey === "undefined") {
                const actionType = action && action.type;
                throw new Error(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : `When called with an action of type ${actionType ? `"${String(actionType)}"` : "(unknown type)"}, the slice reducer for key "${key}" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.`);
            }
            nextState[key] = nextStateForKey;
            hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
        }
        hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
        return hasChanged ? nextState : state;
    };
}
// src/bindActionCreators.ts
function bindActionCreator(actionCreator, dispatch) {
    return function(...args) {
        return dispatch(actionCreator.apply(this, args));
    };
}
function bindActionCreators(actionCreators, dispatch) {
    if (typeof actionCreators === "function") {
        return bindActionCreator(actionCreators, dispatch);
    }
    if (typeof actionCreators !== "object" || actionCreators === null) {
        throw new Error(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : `bindActionCreators expected an object or a function, but instead received: '${kindOf(actionCreators)}'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?`);
    }
    const boundActionCreators = {};
    for(const key in actionCreators){
        const actionCreator = actionCreators[key];
        if (typeof actionCreator === "function") {
            boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
        }
    }
    return boundActionCreators;
}
// src/compose.ts
function compose(...funcs) {
    if (funcs.length === 0) {
        return (arg)=>arg;
    }
    if (funcs.length === 1) {
        return funcs[0];
    }
    return funcs.reduce((a, b)=>(...args)=>a(b(...args)));
}
// src/applyMiddleware.ts
function applyMiddleware(...middlewares) {
    return (createStore2)=>(reducer, preloadedState)=>{
            const store = createStore2(reducer, preloadedState);
            let dispatch = ()=>{
                throw new Error(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
            };
            const middlewareAPI = {
                getState: store.getState,
                dispatch: (action, ...args)=>dispatch(action, ...args)
            };
            const chain = middlewares.map((middleware)=>middleware(middlewareAPI));
            dispatch = compose(...chain)(store.dispatch);
            return {
                ...store,
                dispatch
            };
        };
}
// src/utils/isAction.ts
function isAction(action) {
    return isPlainObject(action) && "type" in action && typeof action.type === "string";
}
;
 //# sourceMappingURL=redux.mjs.map
}}),
"[project]/node_modules/@hello-pangea/dnd/dist/dnd.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "DragDropContext": (()=>DragDropContext),
    "Draggable": (()=>PublicDraggable),
    "Droppable": (()=>ConnectedDroppable),
    "useKeyboardSensor": (()=>useKeyboardSensor),
    "useMouseSensor": (()=>useMouseSensor),
    "useTouchSensor": (()=>useTouchSensor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2d$dom$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react-dom/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/react-redux/dist/react-redux.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$box$2d$model$2f$dist$2f$css$2d$box$2d$model$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/css-box-model/dist/css-box-model.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$raf$2d$schd$2f$dist$2f$raf$2d$schd$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/raf-schd/dist/raf-schd.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/redux/dist/redux.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
;
const isProduction$1 = ("TURBOPACK compile-time value", "development") === 'production';
const spacesAndTabs = /[ \t]{2,}/g;
const lineStartWithSpaces = /^[ \t]*/
    //github.com/hello-pangea/dnd/blob/main/docs/patterns/virtual-lists.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/doctype.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/using-inner-ref.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/how-we-detect-scroll-containers.md
    //github.com/atlassian/react-beautiful-dnd/issues/131
    //github.com/hello-pangea/dnd/blob/main/docs/api/droppable.md
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=node_modules_173380._.js.map

File: ./frontend/.next/static/chunks/src_app_favicon_ico_mjs_ddfdf0._.js

File: ./frontend/.next/static/chunks/_865b28._.js
  JavaScript Functions:
    - AllTasks
    - toggleExpand
    - to
    - renderTasks
    - getComponentNameFromType
    - testStringCoercion
    - checkKeyStringCoercion
    - disabledLog
    - disableLogs
    - reenableLogs
    - describeBuiltInComponentFrame
    - describeNativeComponentFrame
    - describeUnknownElementTypeFrameInDEV
    - getOwner
    - hasValidKey
    - defineKeyPropWarningGetter
    - warnAboutAccessingKey
    - elementRefGetterWithDeprecationWarning
    - ReactElement
    - jsxDEVImpl
    - validateChildKeys
    - isValidElement
    - validateExplicitKey
    - getCurrentComponentErrorInfo
    - ChevronRightIcon
    - ChevronDownIcon
    - UserCircleIcon
    - ClipboardDocumentCheckIcon
    - BookmarkIcon
  Comments:
    // Task toggle & type icons
    // ✅ Theme toggle
    //127.0.0.1:5000/api/tasks").then({
    // ✅ Toggle nested subtasks visibility
    // ✅ Recursive function to render nested tasks
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /**
 * @license React
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    //react.dev/link/special-props)", displayName));
    //react.dev/link/warning-keys for more information.', parentType, childOwner);
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=_865b28._.js.map

File: ./frontend/.next/static/chunks/[root of the server]__f265a1._.js
  JavaScript Functions:
    - getSocketProtocol
    - addMessageListener
    - sendMessage
    - connectHMR
    - init
    - handleOnline
    - handleMessage
    - handleDisconnect
    - connect
    - component
    - sendJSON
    - resourceKey
    - subscribeToUpdates
    - handleSocketConnected
    - aggregateUpdates
    - applyAggregatedUpdates
    - mergeChunkListUpdates
    - mergeChunkListChunks
    - mergeChunkUpdates
    - mergeChunkListEcmascriptMergedUpdates
    - mergeEcmascriptChunkEntries
    - mergeEcmascriptChunksUpdates
    - mergeEcmascriptChunkUpdates
    - invariant
    - compareByList
    - emitIssues
    - handleIssues
    - sortIssues
    - setHooks
    - handleSocketMessage
    - finalizeUpdate
    - subscribeToChunkUpdate
    - subscribeToUpdate
    - triggerUpdate
  Comments:
    // Adapted from https://github.com/vercel/next.js/blob/canary/packages/next/src/client/dev/error-overlay/websocket.ts
    // TODO: add timeout again
    // let lastActivity = Date.now()
    // assetPrefix is a url
    // lastActivity = Date.now()
    // lastActivity = Date.now()
    // let timer: NodeJS.Timeout
    //${hostname}:${port}${assetPrefix ? `/${assetPrefix}` : ""}`;
    //${assetPrefix.split("://")[1]}`;
    /// <reference path="../../../shared/runtime-types.d.ts" />
    /// <reference path="../../runtime/base/dev-globals.d.ts" />
    /// <reference path="../../runtime/base/dev-protocol.d.ts" />
    /// <reference path="../../runtime/base/dev-extensions.ts" />
    // TODO(WEB-1465) Remove this backwards compat fallback once
    // vercel/next.js#54586 is merged.
    // TODO(WEB-1465) Remove this backwards compat fallback once
    // vercel/next.js#54586 is merged.
    // we aggregate all pending updates until the issues are resolved
    // Since `merged` is an array of updates, we need to merge them all into
    // one, consistent update.
    // Since there can only be `EcmascriptMergeUpdates` in the array, there is
    // no need to key on the `type` field.
    // These two completely cancel each other out.
    // We could eagerly return `updateB` here, but this would potentially be
    // incorrect if `updateA` has added modules.
    // Any other update combination is invalid.
    // aggregate updates
    // run single update
    // This is used by the Next.js integration test suite to notify it when HMR
    // updates have been completed.
    // TODO: Only run this in test environments (gate by `process.env.__NEXT_TEST_MODE`)
    // TODO(WEB-1465) Remove this backwards compat fallback once
    // vercel/next.js#54586 is merged.
    // This indicates that the resource which we subscribed to either does not exist or
    // has been deleted. In either case, we should clear all update callbacks, so if a
    // new subscription is created for the same resource, it will send a new "subscribe"
    // message to the server.
    // No need to send an "unsubscribe" message to the server, it will have already
    // dropped the update stream before sending the "notFound" message.
    //# sourceMappingURL=%5Broot%20of%20the%20server%5D__f265a1._.js.map

File: ./frontend/.next/static/chunks/node_modules_c86101._.js
  JavaScript Functions:
    - getComponentNameFromType
    - testStringCoercion
    - checkKeyStringCoercion
    - disabledLog
    - disableLogs
    - reenableLogs
    - describeBuiltInComponentFrame
    - describeNativeComponentFrame
    - describeUnknownElementTypeFrameInDEV
    - getOwner
    - hasValidKey
    - defineKeyPropWarningGetter
    - warnAboutAccessingKey
    - elementRefGetterWithDeprecationWarning
    - ReactElement
    - jsxDEVImpl
    - validateChildKeys
    - isValidElement
    - validateExplicitKey
    - getCurrentComponentErrorInfo
    - var
    - murmurhash2
    - typeOf
    - getAssetPathFromRoute
    - getPolicy
    - __unsafeCreateTrustedScriptURL
    - _export
    - getDeploymentIdQueryOrEmptyString
    - encodeURIPath
    - _export
    - withFuture
    - markAssetError
    - isAssetError
    - hasPrefetch
    - getAssetQueryString
    - prefetchViaDom
    - onerror
    - appendScript
    - onerror
    - resolvePromiseWithTimeout
    - getClientBuildManifest
    - __BUILD_MANIFEST_CB
    - getFilesForRoute
    - createRouteLoader
    - maybeExecuteScript
    - fetchStyleSheet
    - isBooleanScriptAttribute
    - setAttributesFromProps
    - _export
    - insertStylesheets
    - to
    - loadScript
    - onLoad
    - afterLoad
    - handleClientScriptLoad
    - loadLazyScript
    - addBeforeInteractiveToCache
    - initScriptLoader
    - Script
    - onLoad
    - if
    - _export
    - handleSlug
    - getSortedRoutes
    - getSortedRouteObjects
    - isDynamicRoute
    - _export
    - ensures
    - normalizePathSep
    - denormalizePagePath
    - normalizeLocalePath
    - mitt
    - _export
    - execOnce
    - isAbsoluteUrl
    - getLocationOrigin
    - getURL
    - getDisplayName
    - isResSent
    - normalizeRepeatedSlashes
    - loadGetInitialProps
    - stringifyError
    - _export
    - searchParamsToUrlQuery
    - stringifyUrlQueryParam
    - urlQueryToSearchParams
    - assign
    - parseRelativeUrl
    - lexer
    - parse
    - compile
    - tokensToFunction
    - match
    - regexpToFunction
    - escapeString
    - flags
    - regexpToRegexp
    - arrayToRegexp
    - stringToRegexp
    - tokensToRegexp
    - pathToRegexp
    - getPathMatch
    - that
    - escapeStringRegexp
    - parseUrl
    - parse
    - serialize
    - tryDecode
    - getCookieParser
    - parseCookie
    - _export
    - getSafeParamName
    - escapeSegment
    - unescapeSegments
    - matchHas
    - hasMatch
    - compileNonPath
    - prepareDestination
    - resolveRewrites
    - handleRewrite
    - getRouteMatcher
    - decode
    - _export
    - did
    - did
    - _export
    - parseParameter
    - parseMatchedParameter
    - getParametrizedRoute
    - getRouteRegex
    - to
    - buildGetSafeRouteKey
    - getSafeKeyFromSegment
    - getNamedParametrizedRoute
    - getNamedRouteRegex
    - getNamedMiddlewareRegex
    - modified
    - _export
    - formatUrl
    - formatWithValidation
    - removeLocale
    - omit
    - isLocalURL
    - interpolateAs
    - resolveHref
    - isAPIRoute
    - removePathPrefix
    - getNextPathnameInfo
    - below
    - addPathSuffix
    - addLocale
    - formatNextPathnameInfo
    - compareRouterStates
    - with
    - finishes
    - handleSmoothScroll
    - _export
    - buildCancellationError
    - matchesMiddleware
    - stripOrigin
    - prepareUrlAs
    - resolveDynamicRoute
    - getMiddlewareData
    - withMiddlewareEffects
    - fetchRetry
    - tryToParseAsJSON
    - fetchNextData
    - getData
    - createKey
    - handleHardNavigation
    - getCancelledHandler
    - clc
    - handleCancelled
    - cancel
    - onPopState
    - withRouter
    - WithRouterWrapper
    - _export
    - getRouter
    - useRouter
    - createRouter
    - makePublicRouterInstance
    - ArrowsPointingOutIcon
    - XMarkIcon
  Comments:
    /**
 * @license React
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    //react.dev/link/special-props)", displayName));
    //react.dev/link/warning-keys for more information.', parentType, childOwner);
    // minimal implementation MurmurHash2 hash function
    // default to 0.01% error rate as the filter compresses very well
    //# sourceMappingURL=bloom-filter.js.map
    /**
 * @license React
 * react-is.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    // Translates a logical route into its pages asset path (relative from a common prefix)
    // "asset path" being its javascript file, data file, prerendered html,...
    //# sourceMappingURL=get-asset-path-from-route.js.map
    /**
 * Stores the Trusted Types Policy. Starts as undefined and can be set to null
 * if Trusted Types is not supported in the browser.
 */
    /**
 * Getter for the Trusted Types Policy. If it is undefined, it is instantiated
 * here or set to null if Trusted Types is not supported in the browser.
 */
    //# sourceMappingURL=trusted-types.js.map
    //# sourceMappingURL=request-idle-callback.js.map
    //# sourceMappingURL=deployment-id.js.map
    //# sourceMappingURL=encode-uri-path.js.map
    /*#__PURE__*/
    // 3.8s was arbitrarily chosen as it's what https://web.dev/interactive
    // considers as "Good" time-to-interactive. We must assume something went
    // wrong beyond this point, and then fall-back to a full page transition to
    // show the user something of value.
    // with relList.support
    // The order of property assignment here is intentional:
    // `href` should always be last:
    // The order of property assignment here is intentional.
    // 1. Setup success/failure hooks in case the browser synchronously
    //    executes when `src` is set.
    // 2. Configure the cross-origin attribute before setting `src` in case the
    //    browser begins to fetch.
    // 3. Finally, set the source and inject into the DOM in case the child
    //    must be appended for fetching to start.
    // We wait for pages to be built in dev before we start the route transition
    // timeout to prevent an un-necessary hard navigation in development.
    // Resolve a promise that times out after given amount of milliseconds.
    // Resolved, cancel the timeout
    // We wrap these checks separately for better dead-code elimination in
    // production bundles.
    // Mandatory because this is not concurrent safe:
    // Styles are handled by `style-loader` in development:
    // With HMR we might need to "reload" scripts when they are
    // disposed and readded. Executing scripts twice has no functional
    // differences
    // when this entrypoint has been resolved before
    // the route is outdated and we want to invalidate
    // this cache entry
    // we don't want to cache errors during prefetch
    // https://github.com/GoogleChromeLabs/quicklink/blob/453a661fa1fa940e2d2e044452398e38c67a98fb/src/index.mjs#L115-L118
    // License: Apache 2.0
    // Don't prefetch if using 2G or if Save-Data is enabled.
    //# sourceMappingURL=route-loader.js.map
    // we don't render undefined props to the DOM
    // Correctly assign boolean script attributes
    // https://github.com/vercel/next.js/pull/20748
    // Remove falsy non-zero boolean attributes so they are correctly interpreted
    // (e.g. if we set them to false, this coerces to the string "false", which the browser interprets as true)
    // Call setAttribute before, as we need to set and unset the attribute to override force async:
    // https://html.spec.whatwg.org/multipage/scripting.html#script-force-async
    //# sourceMappingURL=set-attributes-from-props.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    // Case 1: Styles for afterInteractive/lazyOnload with appDir injected via handleClientScriptLoad
    //
    // Using ReactDOM.preinit to feature detect appDir and inject styles
    // Stylesheets might have already been loaded if initialized with Script component
    // Re-inject styles here to handle scripts loaded via handleClientScriptLoad
    // ReactDOM.preinit handles dedup and ensures the styles are loaded only once
    // Case 2: Styles for afterInteractive/lazyOnload with pages injected via handleClientScriptLoad
    //
    // We use this function to load styles when appdir is not detected
    // TODO: Use React float APIs to load styles once available for pages dir
    // Script has already loaded
    // Contents of this script are already loading/loaded
    // It is possible that multiple `next/script` components all have same "src", but has different "onLoad"
    // This is to make sure the same remote script will only load once, but "onLoad" are executed in order
    /** Execute after the script first loaded */
    // Run onReady for the first time after load event
    // add cacheKey to LoadCache when load successfully
    // Casting since lib.dom.d.ts doesn't have TrustedHTML yet.
    // do not add cacheKey into LoadCache for remote script here
    // cacheKey will be added to LoadCache when it is actually loaded (see loadPromise above)
    // Load styles associated with this script
    /**
 * Load a third-party scripts in an optimized way.
 *
 * Read more: [Next.js Docs: `next/script`](https://nextjs.org/docs/app/api-reference/components/script)
 */
    // Context is available only during SSR
    /**
   * - First mount:
   *   1. The useEffect for onReady executes
   *   2. hasOnReadyEffectCalled.current is false, but the script hasn't loaded yet (not in LoadCache)
   *      onReady is skipped, set hasOnReadyEffectCalled.current to true
   *   3. The useEffect for loadScript executes
   *   4. hasLoadScriptEffectCalled.current is false, loadScript executes
   *      Once the script is loaded, the onLoad and onReady will be called by then
   *   [If strict mode is enabled / is wrapped in <OffScreen /> component]
   *   5. The useEffect for onReady executes again
   *   6. hasOnReadyEffectCalled.current is true, so entire effect is skipped
   *   7. The useEffect for loadScript executes again
   *   8. hasLoadScriptEffectCalled.current is true, so entire effect is skipped
   *
   * - Second mount:
   *   1. The useEffect for onReady executes
   *   2. hasOnReadyEffectCalled.current is false, but the script has already loaded (found in LoadCache)
   *      onReady is called, set hasOnReadyEffectCalled.current to true
   *   3. The useEffect for loadScript executes
   *   4. The script is already loaded, loadScript bails out
   *   [If strict mode is enabled / is wrapped in <OffScreen /> component]
   *   5. The useEffect for onReady executes again
   *   6. hasOnReadyEffectCalled.current is true, so entire effect is skipped
   *   7. The useEffect for loadScript executes again
   *   8. hasLoadScriptEffectCalled.current is true, so entire effect is skipped
   */
    // Run onReady if script has loaded before but component is re-mounted
    // Script has already loaded during SSR
    // For the app directory, we need React Float to preload these scripts.
    // Injecting stylesheets here handles beforeInteractive and worker scripts correctly
    // For other strategies injecting here ensures correct stylesheet order
    // ReactDOM.preinit handles loading the styles in the correct order,
    // also ensures the stylesheet is loaded only once and in a consistent manner
    //
    // Case 1: Styles for beforeInteractive/worker with appDir - handled here
    // Case 2: Styles for beforeInteractive/worker with pages dir - Not handled yet
    // Case 3: Styles for afterInteractive/lazyOnload with appDir - handled here
    // Case 4: Styles for afterInteractive/lazyOnload with pages dir - handled in insertStylesheets function
    // Before interactive scripts need to be loaded by Next.js' runtime instead
    // of native <script> tags, because they no longer have `defer`.
    // For inlined scripts, we put the content in `children`.
    // Casting since lib.dom.d.ts doesn't have TrustedHTML yet.
    /*#__PURE__*/
    // @ts-ignore
    /*#__PURE__*/
    // @ts-ignore
    //# sourceMappingURL=script.js.map
    // The next segment in the urlPaths list
    // Check if the segment matches `[something]`
    // Strip `[` and `]`, leaving only `something`
    // Strip optional `[` and `]`, leaving only `something`
    // Strip `...`, leaving only `something`
    // If the specific segment already has a slug but the slug is not `something`
    // This prevents collisions like:
    // pages/[post]/index.js
    // pages/[id]/index.js
    // Because currently multiple dynamic params on the same segment level are not supported
    // TODO: This error seems to be confusing for users, needs an error link, the description can be based on above comment.
    // slugName is kept as it can only be one particular slugName
    // nextSegment is overwritten to [[...]] so that it can later be sorted specifically
    // slugName is kept as it can only be one particular slugName
    // nextSegment is overwritten to [...] so that it can later be sorted specifically
    // slugName is kept as it can only be one particular slugName
    // nextSegment is overwritten to [] so that it can later be sorted specifically
    // If this UrlNode doesn't have the nextSegment yet we create a new child UrlNode
    // First the UrlNode is created, and every UrlNode can have only 1 dynamic segment
    // Eg you can't have pages/[post]/abc.js and pages/[hello]/something-else.js
    // Only 1 dynamic segment per nesting level
    // So in the case that is test/integration/dynamic-routing it'll be this:
    // pages/[post]/comments.js
    // pages/blog/[post]/comment/[id].js
    // Both are fine because `pages/[post]` and `pages/blog` are on the same level
    // So in this case `UrlNode` created here has `this.slugName === 'post'`
    // And since your PR passed through `slugName` as an array basically it'd including it in too many possibilities
    // Instead what has to be passed through is the upwards path's dynamic names
    // Here the `root` gets injected multiple paths, and insert will break them up into sublevels
    // Smoosh will then sort those sublevels up to the point where you get the correct route definition priority
    // We're assuming here that all the pathnames are unique, that way we can
    // sort the list and use the index as the key.
    // Sort the pathnames.
    // Map the sorted pathnames back to the original objects using the new sorted
    // index.
    //# sourceMappingURL=sorted-routes.js.map
    // Identify /[param]/ in route string
    //# sourceMappingURL=is-dynamic.js.map
    //# sourceMappingURL=index.js.map
    /**
 * For a given page path, this function ensures that there is no backslash
 * escaping slashes in the path. Example:
 *  - `foo\/bar\/baz` -> `foo/bar/baz`
 */
    //# sourceMappingURL=normalize-path-sep.js.map
    //# sourceMappingURL=denormalize-page-path.js.map
    // first item will be empty string from splitting at first char
    //# sourceMappingURL=normalize-locale-path.js.map
    /*
MIT License

Copyright (c) Jason Miller (https://jasonformat.com/)

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
    // This file is based on https://github.com/developit/mitt/blob/v1.1.3/src/index.js
    // It's been edited for the needs of this script
    // See the LICENSE at the top of the file
    // eslint-disable-next-line array-callback-return
    //# sourceMappingURL=mitt.js.map
    // Scheme: https://tools.ietf.org/html/rfc3986#section-3.1
    // Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3
    //" + hostname + (port ? ':' + port : '');
    // first we replace any non-encoded backslashes with forward
    // then normalize repeated forward slashes
    //nextjs.org/docs/messages/get-initial-props-as-an-instance-method for more information.';
    // when called from _app `ctx` is nested in `ctx`
    // @ts-ignore pageProps default
    //nextjs.org/docs/messages/empty-object-getInitialProps");
    //# sourceMappingURL=utils.js.map
    //# sourceMappingURL=querystring.js.map
    //n' : (0, _utils.getLocationOrigin)());
    //n' : window.location.href) : globalBase;
    //# sourceMappingURL=parse-relative-url.js.map
    /**
   * A matcher function that will check if a given pathname matches the path
   * given in the builder function. When the path does not match it will return
   * `false` but if it does it will return an object with the matched params
   * merged with the params provided in the second argument.
   */
    // If no pathname is provided it's not a match.
    // If the path did not match `false` will be returned.
    /**
     * If unnamed params are not allowed they must be removed from
     * the matched parameters. path-to-regexp uses "string" for named and
     * "number" for unnamed parameters.
     */
    //# sourceMappingURL=path-match.js.map
    // regexp is based on https://github.com/sindresorhus/escape-string-regexp
    // see also: https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/escapeRegExp.js#L23
    //# sourceMappingURL=escape-regexp.js.map
    //# sourceMappingURL=parse-url.js.map
    /*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */
    //# sourceMappingURL=get-cookie-parser.js.map
    /**
 * Ensure only a-zA-Z are used for param names for proper interpolating
 * with path-to-regexp
 */
    // A-Z
    // a-z
    // remove port from host if present
    // the value needs to start with a forward-slash to be compiled
    // correctly
    // have already validated before we got to this point and validating
    // breaks compiling destinations with named pattern params from the source
    // e.g. /something:hello(.*) -> /another/:hello is broken with validation
    // since compile validation is meant for reversing and not for inserting
    // params from a separate path-regex into another
    // update any params in query values
    // the value needs to start with a forward-slash to be compiled
    // correctly
    // add path params to query if it's not a redirect and not
    // already defined in destination query or path
    // The compiler also that the interception route marker is an unnamed param, hence '0',
    // so we need to add it to the params object.
    //nextjs.org/docs/messages/invalid-multi-match");
    // Query merge order lowest priority to highest
    // 1. initial URL query values
    // 2. path segment values
    // 3. destination specified query values
    //# sourceMappingURL=prepare-destination.js.map
    // this is a proxied rewrite which isn't handled on the client
    // check if we now match a page as this means we are done
    // resolving the rewrites
    // check if we match a dynamic-route, if so we break the rewrites chain
    // we don't end after match in beforeFiles to allow
    // continuing through all beforeFiles rewrites
    // check dynamic route before processing fallback rewrites
    //# sourceMappingURL=resolve-rewrites.js.map
    //# sourceMappingURL=route-matcher.js.map
    //nextjs.org/docs/messages/public-next-folder-conflict`;
    //nextjs.org/docs/messages/404-get-initial-props`;
    //nextjs.org/docs/messages/gssp-export`;
    //nextjs.org/docs/messages/gssp-component-member`;
    //nextjs.org/docs/messages/non-standard-node-env`;
    //nextjs.org/docs/messages/ssg-fallback-true-export`;
    /**
 * The names of the webpack layers. These layers are the primitives for the
 * webpack chunks.
 */
    /**
   * The layer for the shared code between the client and server bundles.
   */
    /**
   * The layer for server-only runtime and picking up `react-server` export conditions.
   * Including app router RSC pages and app router custom routes and metadata routes.
   */
    /**
   * Server Side Rendering layer for app (ssr).
   */
    /**
   * The browser client bundle layer for actions.
   */
    /**
   * The layer for the API routes.
   */
    /**
   * The layer for the middleware code.
   */
    /**
   * The layer for the instrumentation hooks.
   */
    /**
   * The layer for assets on the edge.
   */
    /**
   * The browser client bundle layer for App directory.
   */
    // pages api
    // app router pages and layouts
    //# sourceMappingURL=constants.js.map
    /**
 * Regular expression pattern used to match route parameters.
 * Matches both single parameters and parameter groups.
 * Examples:
 *   - `[[...slug]]` matches parameter group with key 'slug', repeat: true, optional: true
 *   - `[...slug]` matches parameter group with key 'slug', repeat: true, optional: false
 *   - `[[foo]]` matches parameter with key 'foo', repeat: false, optional: true
 *   - `[bar]` matches parameter with key 'bar', repeat: false, optional: false
 */
    /**
 * Parses a matched parameter from the PARAMETER_PATTERN regex to a data structure that can be used
 * to generate the parametrized route.
 * Examples:
 *   - `[...slug]` -> `{ key: 'slug', repeat: true, optional: true }`
 *   - `...slug` -> `{ key: 'slug', repeat: true, optional: false }`
 *   - `[foo]` -> `{ key: 'foo', repeat: false, optional: true }`
 *   - `bar` -> `{ key: 'bar', repeat: false, optional: false }`
 * @param param - The matched parameter to parse.
 * @returns The parsed parameter as a data structure.
 */
    // Check for parameters
    /**
 * Builds a function to generate a minimal routeKey using only a-z and minimal
 * number of characters.
 */
    // replace any non-word characters since they can break
    // the named regex
    // check if the key is still invalid and fallback to using a known
    // safe key
    // if the segment has an interception marker, make sure that's part of the regex pattern
    // this is to ensure that the route with the interception marker doesn't incorrectly match
    // the non-intercepted route (ie /app/(.)[username] should not match /app/[username])
    // Check for parameters
    //# sourceMappingURL=route-regex.js.map
    // Format function modified from nodejs
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    /*#__PURE__*/
    //' + (host || '');
    //# sourceMappingURL=format-url.js.map
    //# sourceMappingURL=detect-domain-locale.js.map
    //# sourceMappingURL=add-locale.js.map
    //# sourceMappingURL=remove-locale.js.map
    //# sourceMappingURL=omit.js.map
    // prevent a hydration mismatch on href for url with anchor refs
    // absolute urls can be local if they are on the same origin
    //# sourceMappingURL=is-local-url.js.map
    // Fall back to reading the values from the href
    // TODO: should this take priority; also need to change in the router.
    // support single-level catch-all
    // TODO: more robust handling for user-error (passing `/`)
    // Interpolate group into data URL if present
    // path delimiter escaped since they are being inserted
    // into the URL and we expect URL encoded segments
    // when parsing dynamic route params
    // did not satisfy all requirements
    // n.b. We ignore this error because we handle warning for this case in
    // development in the `<Link>` component directly.
    //# sourceMappingURL=interpolate-as.js.map
    // we use a dummy base url for relative urls
    // repeated slashes and backslashes in the URL are considered
    // invalid and will never match a Next.js page/file
    //);
    //) or backslashes \\ are not valid in the href.");
    // Return because it cannot be routed by the Next.js router
    //n');
    // fallback to / for invalid asPath values e.g. //
    //n');
    // if the origin didn't change, it means we received a relative href
    //# sourceMappingURL=resolve-href.js.map
    //# sourceMappingURL=is-api-route.js.map
    // If the path doesn't start with the prefix we can return it as is. This
    // protects us from situations where the prefix is a substring of the path
    // prefix such as:
    //
    // For prefix: /blog
    //
    //   /blog -> true
    //   /blog/ -> true
    //   /blog/1 -> true
    //   /blogging -> false
    //   /blogging/ -> false
    //   /blogging/1 -> false
    // Remove the prefix from the path via slicing.
    // If the path without the prefix starts with a `/` we can return it as is.
    // If the path without the prefix doesn't start with a `/` we need to add it
    // back to the path to make sure it's a valid path.
    //# sourceMappingURL=remove-path-prefix.js.map
    //, '').replace(/\.json$/, '').split('/');
    // update pathname with normalized if enabled although
    // we use normalized to populate locale info still
    // If provided, use the locale route normalizer to detect the locale instead
    // of the function below.
    //# sourceMappingURL=get-next-pathname-info.js.map
    //# sourceMappingURL=add-path-suffix.js.map
    // If no locale was given or the locale is the default locale, we don't need
    // to prefix the path.
    // If the path is an API path or the path already has the locale prefix, we
    // don't need to prefix the path.
    // Add the locale prefix to the path.
    //# sourceMappingURL=add-locale.js.map
    //# sourceMappingURL=format-next-pathname-info.js.map
    //# sourceMappingURL=compare-states.js.map
    /**
 * Run function with `scroll-behavior: auto` applied to `<html/>`.
 * This css change will be reverted after the function finishes.
 */
    // if only the hash is changed, we don't need to disable smooth scrolling
    // we only care to prevent smooth scrolling when navigating to a new page to avoid jarring UX
    // In Chrome-based browsers we need to force reflow before calling `scrollTo`.
    // Otherwise it will not pickup the change in scrollBehavior
    // More info here: https://github.com/vercel/next.js/issues/40719#issuecomment-1336248042
    //# sourceMappingURL=handle-smooth-scroll.js.map
    // tslint:disable:no-console
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // remove basePath first since path prefix has to be in the order of `/${basePath}/${locale}`
    // Check only path match on client. Matching "has" should be done on server
    // where we can access more info such as headers, HttpOnly cookie, etc.
    // If url and as provided as an object representation,
    // we'll format them into the string version here.
    // handle resolving href for dynamic routes
    // eslint-disable-next-line array-callback-return
    // leverage x-matched-path to detect next.config.js rewrites
    // eslint-disable-next-line no-sequences
    // Cookies are required to be present for Next.js' SSG "Preview Mode".
    // Cookies may also be required for `getServerSideProps`.
    //
    // > `fetch` won’t send cookies, unless you set the credentials init
    // > option.
    // https://developer.mozilla.org/docs/Web/API/Fetch_API/Using_Fetch
    //
    // > For maximum browser compatibility when it comes to sending &
    // > receiving cookies, always supply the `credentials: 'same-origin'`
    // > option instead of relying on the default.
    // https://github.com/github/fetch#caveats
    /**
             * When the data response is a redirect because of a middleware
             * we do not consider it an error. The headers must bring the
             * mapped location.
             * TODO: Change the status code in the handler.
             */
    /**
             * We should only trigger a server-side transition if this was
             * caused on a client-side transition. Otherwise, we'd get into
             * an infinite loop.
             */
    // firefox
    // safari
    // when skipping client cache we wait to update
    // inflight cache until successful data response
    // this allows racing click event with fetching newer data
    // without blocking navigation when stale data is available
    // only update cache if not marked as no-cache
    // ensure we don't trigger a hard navigation to the same
    // URL as this can end up with an infinite refresh
    /**
   * Go back in history
   */
    /**
   * Go forward in history
   */
    /**
   * Performs a `pushState` with arguments
   * @param url of the route
   * @param as masks `url` for the browser
   * @param options object you can define `shallow` and other options
   */
    /**
   * Performs a `replaceState` with arguments
   * @param url of the route
   * @param as masks `url` for the browser
   * @param options object you can define `shallow` and other options
   */
    // failed to load build manifest hard navigate
    // to be safe
    //n').pathname);
    //n').pathname)) {
    // if any sub-path of as matches a dynamic filter path
    // it should be hard navigated
    // if the client router filter is matched then we trigger
    // a hard navigation
    // WARNING: `_h` is an internal option for handing Next.js client-side
    // hydration. Your app should _never_ use this property. It may change at
    // any time without notice.
    // for static pages with query params in the URL we delay
    // marking the router ready until after the query is updated
    // or a navigation has occurred
    // if a route transition is already in progress before
    // the query updating is triggered ignore query updating
    // marking route changes as a navigation start entry
    // If the url change is only related to a hash change
    // We should not proceed. We should only change the state.
    // TODO: do we need the resolved href when only a hash change?
    // The build manifest needs to be loaded before auto-static dynamic pages
    // get their query parameters to allow ensuring they can be parsed properly
    // when rewritten to
    // If we fail to resolve the page list or client-build manifest, we must
    // do a server-side transition:
    // If asked to change the current URL we should reload the current page
    // (not location.reload() but reload getInitialProps and other Next.js stuffs)
    // We also need to set the method = replaceState always
    // as this should not go into the history (That's how browsers work)
    // We should compare the new asPath to the current asPath, not the url
    // we need to resolve the as value using rewrites for dynamic SSG
    // pages to allow building the data URL correctly
    // url and as should always be prefixed with basePath by this
    // point by either next/link or router.push/replace so strip the
    // basePath from the pathname to match the pages dir 1-to-1
    // if we detected the path as app route during prefetching
    // trigger hard navigation
    // we don't attempt resolve asPath when we need to execute
    // middleware as the resolving will occur server-side
    //nextjs.org/docs/messages/invalid-relative-url-external-as");
    //nextjs.org/docs/messages/" + (shouldInterpolate ? 'href-interpolation-failed' : 'incompatible-href-as')));
    // Merge params into `query`, overwriting any specified in search
    // If the routeInfo brings a redirect we simply apply it.
    // handle redirect on client-transition
    // Use the destination from redirect without adding locale
    // check if destination is internal (resolves to a page) and attempt
    // client-navigation if it is falling back to hard navigation if
    // it's not
    // handle SSG data 404
    // ensure statusCode is still correct for static 500 page
    // when updating query information
    // shallow routing is only allowed for same page URL changes.
    // the new state that the router gonna set
    // When the page being rendered is the 404 page, we should only update the
    // query parameters. Route changes here might add the basePath when it
    // wasn't originally present. This is also why this block is before the
    // below `changeState` call which updates the browser's history (changing
    // the URL).
    // ensure statusCode is still correct for static 500 page
    // when updating query information
    // for query updates we can skip it if the state is unchanged and we don't
    // need to scroll
    // https://github.com/vercel/next.js/issues/37139
    // A hash mark # is the optional last part of a URL
    // Passing the empty string here should be safe against future changes to the method.
    // https://developer.mozilla.org/docs/Web/API/History/replaceState
    // bubble up cancellation errors
    // If we can't load the page it could be one of following reasons
    //  1. Page doesn't exists
    //  2. Page does exist in a different zone
    //  3. Internal error while loading the page
    // So, doing a hard reload is the proper way to deal with this.
    // Changing the URL doesn't block executing the current code path.
    // So let's throw a cancellation error stop the routing logic.
    /**
     * This `route` binding can change if there's a rewrite
     * so we keep a reference to the original requested route
     * so we can store the cache for it and avoid re-requesting every time
     * for shallow routing purposes.
     */
    // we don't hard error during query updating
    // as it's un-necessary and doesn't need to be fatal
    // unless it is a fallback route and the props can't
    // be loaded
    // when rendering error routes we don't apply middleware
    // effects
    // during query updating the page must match although during
    // client-transition a redirect that doesn't match a page
    // can be returned and this should trigger a hard navigation
    // which is valid for incremental migration
    // Check again the cache with the new destination.
    // If we have a match with the current route due to rewrite,
    // we can copy the existing information to the rewritten one.
    // Then, we return the information along with the matched route.
    // For non-SSG prefetches that bailed before sending data
    // we clear the cache to fetch full response
    // Only bust the data cache for SSP routes although
    // middleware can skip cache per request with
    // x-middleware-cache: no-cache as well
    // we kick off a HEAD request in the background
    // when a non-prefetch request is made to signal revalidation
    /**
   * Callback to execute before replacing router state
   * @param cb callback to be executed
   */
    // Makes sure we scroll to the provided hash if the url/hash are the same
    // If the urls are change, there's more than a hash change
    // If the hash has changed, then it's a hash only change.
    // This check is necessary to handle both the enter and
    // leave hash === '' cases. The identity case falls through
    // and is treated as a next reload.
    // Scroll to top if the hash is just `#` with no value or `#top`
    // To mirror browsers
    // Decode hash to make non-latin anchor works.
    // First we check if the element by id is found
    // If there's no element with the id, we check the `name` property
    // To mirror browsers
    /**
   * Prefetch page code, you may wait for the data during page rendering.
   * This feature only works in production!
   * @param url the href of prefetched page
   * @param asPath the as path of the prefetched page
   */
    // Prefetch is not supported in development mode because it would trigger on-demand-entries
    // Server Data Cache (full data requests)
    // Server Background Cache (HEAD requests)
    // We get state as undefined for two reasons.
    //  1. With older safari (< 8) and older chrome (< 34)
    //  2. When the URL changed with #
    //
    // In the both cases, we don't need to proceed and change the route.
    // (as it's already changed)
    // But we can simply replace the state with the new changes.
    // Actually, for (1) we don't need to nothing. But it's hard to detect that event.
    // So, doing the following for (1) does no harm.
    // __NA is used to identify if the history entry can be handled by the app-router.
    // Safari fires popstateevent when reopening the browser.
    // Make sure we don't re-render on initial load,
    // can be caused by navigating back from an external site
    // If the downstream application returns falsy, return.
    // They will then be responsible for handling the event.
    // @ts-ignore internal value not exposed on types
    // represents the current component key
    // set up the component cache (by route keys)
    // We should not keep the cache, if there's an error
    // Otherwise, this cause issues when when going back and
    // come again to the errored page.
    // Backwards compat for Router.router.events
    // TODO: Should be remove the following major version as it was never documented
    // if auto prerendered and dynamic route wait to update asPath
    // until after mount to prevent hydration mismatch
    // make sure to ignore extra popState in safari on navigating
    // back from external site
    // make sure "as" doesn't start with double slashes or else it can
    // throw an error as it's considered invalid
    //')) {
    // in order for `e.state` to work on the `onpopstate` event
    // we have to register the initial route upon initialization
    // if middleware matches we leave resolving to the change function
    // as the server needs to resolve for correct priority
    // enable custom scroll restoration handling when available
    // otherwise fallback to browser's default handling
    //# sourceMappingURL=router.js.map
    /*#__PURE__*/
    //# sourceMappingURL=router-context.shared-runtime.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=with-router.js.map
    /* global window */
    // Export the singletonRouter and this is the public API.
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // Create public properties and methods of the router in the singletonRouter
    // Events is a static property on the router, the router doesn't have to be initialized to use it
    // Here we need to use Object.defineProperty because we need to return
    // the property assigned to the actual router
    // The value might get changed as we change routes and this is the
    // proper way to access it
    // We don't really know the types here, so we add them later instead
    //nextjs.org/docs/messages/next-router-not-mounted');
    // makes sure query is not stateful
    // Events is a static property on the router, the router doesn't have to be initialized to use it
    //# sourceMappingURL=router.js.map
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=node_modules_c86101._.js.map

File: ./frontend/.next/static/chunks/node_modules_react-dom_82bb97._.js
  JavaScript Functions:
    - noop
    - testStringCoercion
    - createPortal
    - getCrossOriginStringAs
    - getValueDescriptorExpectingObjectForWarning
    - getValueDescriptorExpectingEnumForWarning
    - resolveDispatcher
    - component
    - is
    - checkDCE
    - is
    - findHook
    - copyWithSetImpl
    - copyWithRename
    - copyWithRenameImpl
    - copyWithDeleteImpl
    - shouldSuspendImpl
    - shouldErrorImpl
    - createFiber
    - warnInvalidHookAccess
    - warnInvalidContextAccess
    - components
    - body
    - noop
    - warnForMissingKey
    - setToSortedString
    - scheduleRoot
    - scheduleRefresh
    - setRefreshHandler
    - isValidContainer
    - getIteratorFn
    - getComponentNameFromType
    - getComponentNameFromOwner
    - getComponentNameFromFiber
    - disabledLog
    - disableLogs
    - reenableLogs
    - describeBuiltInComponentFrame
    - describeNativeComponentFrame
    - describeFiber
    - getStackByFiberInDevAndProd
    - getCurrentFiberOwnerNameInDevOrNull
    - getCurrentFiberStackInDev
    - runWithFiberInDEV
    - getNearestMountedFiber
    - getSuspenseInstanceFromFiber
    - assertIsMounted
    - findCurrentFiberUsingSlowPath
    - findCurrentHostFiberImpl
    - createCursor
    - pop
    - push
    - requiredContext
    - pushHostContainer
    - popHostContainer
    - getHostContext
    - pushHostContext
    - popHostContext
    - typeName
    - willCoercionThrow
    - testStringCoercion
    - checkAttributeStringCoercion
    - checkCSSPropertyStringCoercion
    - checkFormFieldValueStringCoercion
    - injectInternals
    - onCommitRoot
    - setIsStrictModeForDevtools
    - injectProfilingHooks
    - markCommitStopped
    - markComponentRenderStarted
    - markComponentRenderStopped
    - markRenderStarted
    - markRenderStopped
    - markStateUpdateScheduled
    - clz32Fallback
    - getLabelForLane
    - getHighestPriorityLanes
    - getNextLanes
    - checkIfRootIsPrerendering
    - computeExpirationTime
    - claimNextTransitionLane
    - claimNextRetryLane
    - createLaneMap
    - markRootUpdated
    - markRootFinished
    - markSpawnedDeferredLane
    - markRootEntangled
    - addFiberToLanesMap
    - movePendingFibersToMemoized
    - lanesToEventPriority
    - resolveUpdatePriority
    - runWithPriority
    - detachDeletedInstance
    - getClosestInstanceFromNode
    - getInstanceFromNode
    - getNodeFromInstance
    - getResourcesFromRoot
    - markNodeAsHoistable
    - registerTwoPhaseEvent
    - registerDirectEvent
    - checkControlledValueProps
    - isAttributeNameSafe
    - getValueForAttributeOnCustomComponent
    - setValueForAttribute
    - setValueForKnownAttribute
    - setValueForNamespacedAttribute
    - getToStringValue
    - isCheckable
    - trackValueOnNode
    - track
    - updateValueIfChanged
    - getActiveElement
    - escapeSelectorAttributeValueInsideDoubleQuotes
    - validateInputProps
    - updateInput
    - initInput
    - setDefaultValue
    - validateOptionProps
    - getDeclarationErrorAddendum
    - updateOptions
    - validateSelectProps
    - validateTextareaProps
    - updateTextarea
    - initTextarea
    - findNotableNode
    - indentation
    - added
    - removed
    - describeFiberType
    - describeTextNode
    - describeTextDiff
    - objectName
    - describeValue
    - describePropValue
    - describeExpandedElement
    - describePropertiesDiff
    - describeElementDiff
    - describeSiblingFiber
    - describeNode
    - describeDiff
    - describeAncestors
    - updatedAncestorInfoDev
    - isTagValidWithParent
    - findInvalidAncestorForTag
    - findAncestor
    - validateDOMNesting
    - validateTextNesting
    - setTextContent
    - camelize
    - setValueForStyle
    - setValueForStyles
    - isCustomElement
    - getAttributeAlias
    - validateProperty
    - validateProperties
    - validateProperty
    - warnUnknownProperties
    - sanitizeURL
    - getEventTarget
    - restoreStateOfTarget
    - batchedUpdates
    - getListener
    - getData
    - getEventCharCode
    - functionThatReturnsTrue
    - functionThatReturnsFalse
    - createSyntheticEvent
    - SyntheticBaseEvent
    - modifierStateGetter
    - getEventModifierState
    - isFallbackCompositionEnd
    - getDataFromCustomEvent
    - getNativeBeforeInputChars
    - getFallbackBeforeInputChars
    - isTextInputElement
    - isEventSupported
    - createAndAccumulateChangeEvent
    - runEventInBatch
    - getInstIfValueChanged
    - getTargetInstForChangeEvent
    - stopWatchingForValueChange
    - handlePropertyChange
    - handleEventsForInputEventPolyfill
    - getTargetInstForInputEventPolyfill
    - getTargetInstForClickEvent
    - getTargetInstForInputOrChangeEvent
    - is
    - shallowEqual
    - getLeafNode
    - getNodeForCharacterOffset
    - containsNode
    - getActiveElementDeep
    - hasSelectionCapabilities
    - restoreSelection
    - constructSelectEvent
    - makePrefixMap
    - getVendorPrefixedEventName
    - registerSimpleEvent
    - finishQueueingConcurrentUpdates
    - enqueueUpdate
    - enqueueConcurrentHookUpdate
    - enqueueConcurrentRenderForLane
    - markUpdateLaneFromFiberToRoot
    - getRootForUpdatedFiber
    - resolveFunctionForHotReloading
    - resolveForwardRefForHotReloading
    - isCompatibleFamilyForHotReloading
    - markFailedErrorBoundaryForHotReloading
    - scheduleFibersWithFamiliesRecursively
    - pushNestedEffectDurations
    - popNestedEffectDurations
    - bubbleNestedEffectDurations
    - startProfilerTimer
    - stopProfilerTimerIfRunningAndRecordDuration
    - stopProfilerTimerIfRunningAndRecordIncompleteDuration
    - recordEffectDuration
    - startEffectTimer
    - transferActualDuration
    - createCapturedValueAtFiber
    - pushTreeFork
    - pushTreeId
    - pushMaterializedTreeId
    - popTreeContext
    - warnIfNotHydrating
    - buildHydrationDiffNode
    - warnNonHydratedInstance
    - throwOnHydrationMismatch
    - prepareToHydrateHostInstance
    - popToNextHostParent
    - popHydrationState
    - resetHydrationState
    - queueHydrationError
    - emitPendingHydrationWarnings
    - createThenableState
    - isThenableResolved
    - noop
    - trackUsedThenable
    - getSuspendedThenable
    - checkIfUseWrappedInAsyncCatch
    - pushDebugInfo
    - validateFragmentProps
    - unwrapThenable
    - coerceRef
    - throwOnInvalidObjectType
    - warnOnFunctionType
    - rather
    - rather
    - warnOnSymbolType
    - createChildReconciler
    - deleteChild
    - deleteRemainingChildren
    - mapRemainingChildren
    - useFiber
    - placeChild
    - placeSingleChild
    - updateTextNode
    - updateElement
    - updatePortal
    - updateFragment
    - createChild
    - updateSlot
    - updateFromMap
    - warnOnInvalidKey
    - reconcileChildrenArray
    - reconcileChildrenIterator
    - reconcileChildFibersImpl
    - pushHiddenContext
    - reuseHiddenContextOnStack
    - popHiddenContext
    - pushPrimaryTreeSuspenseHandler
    - pushOffscreenSuspenseHandler
    - reuseSuspenseHandlerOnStack
    - popSuspenseHandler
    - findFirstSuspended
    - createCache
    - retainCache
    - releaseCache
    - entangleAsyncAction
    - pingEngtangledActionScope
    - chainThenableValue
    - peekCacheFromPool
    - pushTransition
    - getSuspendedCache
    - mountHookTypesDev
    - updateHookTypesDev
    - checkDepsAreArrayDev
    - warnOnUseFormStateInDev
    - throwInvalidHookError
    - component
    - areHookInputsEqual
    - renderWithHooks
    - finishRenderingHooks
    - renderWithHooksAgain
    - TransitionAwareHostComponent
    - checkDidRenderIdHook
    - bailoutHooks
    - resetHooksOnUnwind
    - mountWorkInProgressHook
    - updateWorkInProgressHook
    - useThenable
    - use
    - useMemoCache
    - basicStateReducer
    - mountReducer
    - updateReducer
    - updateReducerImpl
    - rerenderReducer
    - mountSyncExternalStore
    - updateSyncExternalStore
    - pushStoreConsistencyCheck
    - updateStoreInstance
    - subscribeToStore
    - checkIfSnapshotChanged
    - forceStoreRerender
    - mountStateImpl
    - mountState
    - mountOptimistic
    - updateOptimistic
    - updateOptimisticImpl
    - rerenderOptimistic
    - dispatchActionState
    - runActionStateAction
    - handleActionReturnValue
    - was
    - to
    - onActionSuccess
    - onActionError
    - notifyActionListeners
    - actionStateReducer
    - mountActionState
    - updateActionState
    - updateActionStateImpl
    - actionStateActionEffect
    - rerenderActionState
    - pushEffect
    - mountRef
    - mountEffectImpl
    - updateEffectImpl
    - mountEffect
    - mountLayoutEffect
    - imperativeHandleEffect
    - mountImperativeHandle
    - that
    - updateImperativeHandle
    - that
    - mountCallback
    - updateCallback
    - mountMemo
    - updateMemo
    - mountDeferredValue
    - updateDeferredValue
    - rerenderDeferredValue
    - mountDeferredValueImpl
    - updateDeferredValueImpl
    - startTransition
    - startHostTransition
    - ensureFormComponentIsStateful
    - requestFormReset
    - mountTransition
    - updateTransition
    - rerenderTransition
    - useHostTransitionStatus
    - mountId
    - mountRefresh
    - refreshCache
    - dispatchReducerAction
    - dispatchSetState
    - dispatchSetStateInternal
    - dispatchOptimisticSetState
    - isRenderPhaseUpdate
    - enqueueRenderPhaseUpdate
    - entangleTransitionUpdate
    - warnOnInvalidCallback
    - applyDerivedStateFromProps
    - checkShouldComponentUpdate
    - callComponentWillReceiveProps
    - resolveClassComponentProps
    - defaultOnUncaughtError
    - defaultOnCaughtError
    - defaultOnRecoverableError
    - logUncaughtError
    - logCaughtError
    - createRootErrorUpdate
    - createClassErrorUpdate
    - initializeClassErrorUpdate
    - throwException
    - reconcileChildren
    - updateForwardRef
    - updateMemoComponent
    - updateSimpleMemoComponent
    - updateOffscreenComponent
    - deferHiddenOffscreenComponent
    - markRef
    - updateFunctionComponent
    - replayFunctionComponent
    - updateClassComponent
    - is
    - mountHostRootWithoutHydrating
    - validateFunctionComponentInDev
    - component
    - mountSuspenseOffscreenState
    - getRemainingWorkInPrimaryTree
    - updateSuspenseComponent
    - mountSuspensePrimaryChildren
    - mountWorkInProgressOffscreenFiber
    - retrySuspenseComponentWithoutHydrating
    - scheduleSuspenseWorkOnFiber
    - validateSuspenseListNestedChild
    - initSuspenseListRenderState
    - updateSuspenseListComponent
    - bailoutOnAlreadyFinishedWork
    - checkScheduledUpdateOrContext
    - attemptEarlyBailoutIfNoScheduledUpdate
    - beginWork
    - resetContextDependencies
    - pushProvider
    - popProvider
    - scheduleContextWorkOnParentPath
    - propagateContextChanges
    - propagateParentContextChanges
    - checkIfContextChanged
    - prepareToReadContext
    - readContext
    - components
    - body
    - readContextDuringReconciliation
    - readContextForConsumer
    - components
    - body
    - initializeUpdateQueue
    - cloneUpdateQueue
    - createUpdate
    - enqueueUpdate
    - entangleTransitions
    - enqueueCapturedUpdate
    - suspendIfUpdateReadFromEntangledAsyncAction
    - processUpdateQueue
    - callCallback
    - commitHiddenCallbacks
    - commitCallbacks
    - shouldProfile
    - commitHookLayoutEffects
    - commitHookLayoutUnmountEffects
    - commitHookEffectListMount
    - inside
    - fetchData
    - commitHookEffectListUnmount
    - commitHookPassiveMountEffects
    - commitHookPassiveUnmountEffects
    - commitClassCallbacks
    - callGetSnapshotBeforeUpdates
    - commitClassSnapshot
    - safelyCallComponentWillUnmount
    - commitAttachRef
    - or
    - safelyAttachRef
    - safelyDetachRef
    - commitProfiler
    - commitProfilerPostCommitImpl
    - commitHostMount
    - commitHostUpdate
    - isHostParent
    - getHostSibling
    - insertOrAppendPlacementNodeIntoContainer
    - insertOrAppendPlacementNode
    - commitPlacement
    - commitBeforeMutationEffects
    - commitLayoutEffectOnFiber
    - detachFiberAfterEffects
    - recursivelyTraverseDeletionEffects
    - commitDeletionEffectsOnFiber
    - commitSuspenseHydrationCallbacks
    - getRetryCache
    - attachSuspenseRetryListeners
    - commitMutationEffects
    - recursivelyTraverseMutationEffects
    - commitMutationEffectsOnFiber
    - commitReconciliationEffects
    - recursivelyResetForms
    - commitLayoutEffects
    - recursivelyTraverseLayoutEffects
    - disappearLayoutEffects
    - recursivelyTraverseDisappearLayoutEffects
    - reappearLayoutEffects
    - recursivelyTraverseReappearLayoutEffects
    - commitOffscreenPassiveMountEffects
    - commitCachePassiveMountEffect
    - recursivelyTraversePassiveMountEffects
    - commitPassiveMountOnFiber
    - recursivelyTraverseReconnectPassiveEffects
    - reconnectPassiveEffects
    - recursivelyTraverseAtomicPassiveEffects
    - recursivelyAccumulateSuspenseyCommit
    - accumulateSuspenseyCommitOnFiber
    - detachAlternateSiblings
    - recursivelyTraversePassiveUnmountEffects
    - commitPassiveUnmountOnFiber
    - recursivelyTraverseDisconnectPassiveEffects
    - disconnectPassiveEffect
    - commitPassiveUnmountEffectsInsideOfDeletedTree_begin
    - FiberNode
    - shouldConstruct
    - createWorkInProgress
    - resetWorkInProgress
    - createFiberFromTypeAndProps
    - createFiberFromElement
    - createFiberFromFragment
    - createFiberFromOffscreen
    - createFiberFromText
    - createFiberFromPortal
    - markUpdate
    - preloadResourceAndSuspendIfNeeded
    - scheduleRetryEffect
    - cutOffTailIfNeeded
    - bubbleProperties
    - completeWork
    - unwindWork
    - unwindInterruptedWork
    - onCommitRoot
    - isConcurrentActEnvironment
    - requestUpdateLane
    - requestDeferredLane
    - scheduleUpdateOnFiber
    - of
    - performWorkOnRoot
    - queueRecoverableErrors
    - commitRootWhenReady
    - isRenderConsistentWithExternalStores
    - markRootSuspended
    - flushSyncWork
    - resetWorkInProgressStack
    - prepareFreshStack
    - handleThrow
    - pushDispatcher
    - pushAsyncDispatcher
    - renderDidSuspendDelayIfPossible
    - renderRootSync
    - workLoopSync
    - renderRootConcurrent
    - workLoopConcurrent
    - performUnitOfWork
    - replaySuspendedUnitOfWork
    - replayBeginWork
    - throwAndUnwindWorkLoop
    - completeUnitOfWork
    - unwindUnitOfWork
    - commitRoot
    - commitRootImpl
    - makeErrorInfo
    - releaseRootPooledCache
    - flushPassiveEffects
    - captureCommitPhaseErrorOnRoot
    - captureCommitPhaseError
    - attachPingListener
    - pingSuspendedRoot
    - retryTimedOutBoundary
    - retryDehydratedSuspenseBoundary
    - resolveRetryWakeable
    - recursivelyTraverseAndDoubleInvokeEffectsInDEV
    - doubleInvokeEffectsOnFiber
    - commitDoubleInvokeEffectsInDEV
    - warnAboutUpdateOnNotYetMountedFiberInDEV
    - that
    - restorePendingUpdaters
    - scheduleCallback
    - warnIfUpdatesNotWrappedWithActDEV
    - ensureRootIsScheduled
    - flushSyncWorkAcrossRoots_impl
    - processRootScheduleInMicrotask
    - scheduleTaskForRootDuringMicrotask
    - performWorkOnRootViaSchedulerTask
    - performSyncWorkOnRoot
    - cancelCallback
    - scheduleImmediateTask
    - requestTransitionLane
    - coerceFormActionProp
    - createFormDataWithSubmitter
    - extractEvents
    - processDispatchQueue
    - listenToNonDelegatedEvent
    - listenToNativeEvent
    - listenToAllSupportedEvents
    - addTrappedEventListener
    - dispatchEventForPluginEventSystem
    - createDispatchListener
    - accumulateTwoPhaseListeners
    - getParent
    - accumulateEnterLeaveListenersForEvent
    - validatePropertiesInDevelopment
    - warnForPropDifference
    - warnForExtraAttributes
    - warnForInvalidEventListener
    - normalizeHTML
    - normalizeMarkupForTextOrAttribute
    - checkForUnmatchedText
    - noop
    - setProp
    - as
    - as
    - will
    - as
    - as
    - as
    - will
    - setPropOnCustomElement
    - setInitialProperties
    - updateProperties
    - getPropNameFromAttributeName
    - getStylesObjectFromElement
    - diffHydratedStyles
    - hydrateAttribute
    - hydrateBooleanAttribute
    - hydrateBooleanishAttribute
    - hydrateNumericAttribute
    - hydrateSanitizedAttribute
    - diffHydratedProperties
    - propNamesListJoin
    - getOwnerDocumentFromRootContainer
    - getOwnHostContext
    - getChildHostContextProd
    - shouldSetTextContent
    - shouldAttemptEagerTransition
    - handleErrorInNextTick
    - commitMount
    - commitUpdate
    - resetTextContent
    - commitTextUpdate
    - removeChild
    - removeChildFromContainer
    - clearSuspenseBoundary
    - hideInstance
    - hideTextInstance
    - unhideInstance
    - unhideTextInstance
    - clearContainerSparingly
    - canHydrateInstance
    - canHydrateTextInstance
    - getNextHydratable
    - describeHydratableInstanceForDevWarnings
    - diffHydratedTextForDevWarnings
    - getNextHydratableInstanceAfterSuspenseInstance
    - getParentSuspenseInstance
    - commitHydratedContainer
    - commitHydratedSuspenseInstance
    - resolveSingletonInstance
    - acquireSingletonInstance
    - getHoistableRoot
    - preconnectAs
    - getResource
    - describeLinkForResourceErrorDEV
    - getStyleKey
    - getStylesheetSelectorFromKey
    - stylesheetPropsFromRawProps
    - preloadStylesheet
    - getScriptKey
    - getScriptSelectorFromKey
    - acquireResource
    - insertStylesheet
    - adoptPreloadPropsForStylesheet
    - adoptPreloadPropsForScript
    - getHydratableHoistableCache
    - mountHoistable
    - isHostHoistableType
    - preloadResource
    - noop
    - suspendResource
    - waitForCommitToBeReady
    - onUnsuspend
    - insertSuspendedStylesheets
    - insertStylesheetIntoRoot
    - bindToConsole
    - FiberRootNode
    - createFiberRoot
    - getContextForSubtree
    - updateContainerSync
    - updateContainerImpl
    - of
    - markRetryLaneImpl
    - markRetryLaneIfNotHydrated
    - attemptContinuousHydration
    - getCurrentFiberForDevTools
    - getLaneLabelMap
    - dispatchDiscreteEvent
    - dispatchContinuousEvent
    - dispatchEvent
    - findInstanceBlockingEvent
    - findInstanceBlockingTarget
    - getEventPriority
    - clearIfContinuousEvent
    - accumulateOrCreateContinuousQueuedReplayableEvent
    - queueIfContinuousEvent
    - attemptExplicitHydrationTarget
    - attemptReplayContinuousQueuedEvent
    - attemptReplayContinuousQueuedEventInMap
    - replayUnblockedEvents
    - scheduleCallbackIfUnblocked
    - scheduleReplayQueueIfNeeded
    - retryIfBlockedOn
    - unblock
    - ReactDOMRoot
    - ReactDOMHydrationRoot
    - warnIfReactDOMContainerInDEV
    - of
    - checkDCE
    - is
  Comments:
    /**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    //react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.");
    //reactjs.org/link/react-polyfills");
    //github.com/tc39/proposal-import-attributes)', encountered, href);
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    // Verify that the code above has been dead code eliminated (DCE'd).
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    /**
 * @license React
 * react-dom-client.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    /*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/
    //react.dev/link/rules-of-hooks");
    //react.dev/link/react-devtools"), !0;
    //react.dev/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type), didWarnCheckedDefaultChecked = !0);
    //react.dev/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type), didWarnValueDefaultValue$1 = !0);
    //react.dev/link/controlled-components"), didWarnValueDefaultValue = !0);
    //react.dev/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component"), didWarnValDefaultVal = !0);
    //react.dev/link/invalid-aria-props", props, type) : 1 < invalidProps.length && console.error("Invalid aria props %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props", props, type);
    //react.dev/link/attribute-behavior ", props, type) : 1 < unknownProps.length && console.error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://react.dev/link/attribute-behavior ", props, type);
    //react.dev/link/hydration-mismatch" + diff), fiber));
    //react.dev/link/hydration-mismatch", diffRoot));
    //react.dev/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
    //react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.");
    //react.dev/link/invalid-hook-call)");
    //react.dev/link/invalid-hook-call)");
    //react.dev/link/error-boundaries to learn more about error boundaries.");
    //react.dev/link/legacy-context)", componentName))));
    //react.dev/link/unsafe-component-lifecycles", _instance, newApiName, null !== state ? "\n  " + state : "", null !== lane ? "\n  " + lane : "", null !== foundWillUpdateName ? "\n  " + foundWillUpdateName : ""));
    //react.dev/link/legacy-context)", state));
    //react.dev/link/legacy-context)", state));
    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://react.dev/link/hooks-data-fetching" : " You returned: " + lastEffect;
    //react.dev/link/setstate-in-render", fiber, root, root));
    /* finish loading suspended data */
    /* assert on the output */
    //react.dev/link/wrap-tests-with-act");
    /* fire events that update state */
    /* assert on the output */
    //react.dev/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
    //react.dev/link/dangerously-set-inner-html for more information.");
    //react.dev/link/dangerously-set-inner-html for more information.");
    //react.dev/link/controlled-components"), didWarnUncontrolledToControlled = !0);
    //react.dev/link/controlled-components"), didWarnControlledToUncontrolled = !0);
    //www.w3.org/1998/Math/MathML", SVG_NAMESPACE = "http://www.w3.org/2000/svg", shorthandToLonghand = {
    //react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
    //react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n\nPlease update the following components: %s", sortedNames));
    //react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", sortedNames));
    //react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", sortedNames));
    //react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", sortedNames));
    //react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", sortedNames));
    //react.dev/link/legacy-context", sortedNames);
    //react.dev/link/warning-keys for more information.', currentComponentErrorInfo, childOwnerAppendix);
    //www.w3.org/1999/xlink", xmlNamespace = "http://www.w3.org/XML/1998/namespace", EXPECTED_FORM_ACTION_URL = "javascript:throw new Error('React form unexpectedly submitted.')", SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning", SUSPENSE_START_DATA = "$", SUSPENSE_END_DATA = "/$", SUSPENSE_PENDING_START_DATA = "$?", SUSPENSE_FALLBACK_START_DATA = "$!", FORM_STATE_IS_MATCHING = "F!", FORM_STATE_IS_NOT_MATCHING = "F", STYLE = "style", HostContextNamespaceNone = 0, HostContextNamespaceSvg = 1, HostContextNamespaceMath = 2, eventsEnabled = null, selectionInformation = null, warnedUnknownTags = {
    //react.dev/warnings/version-mismatch"));
    //react.dev/link/react-polyfills");
    //react.dev/link/react-devtools" + ("file:" === protocol ? "\nYou might need to use a local HTTP server (instead of file://): https://react.dev/link/react-devtools-faq" : ""), "font-weight:bold");
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    // Verify that the code above has been dead code eliminated (DCE'd).
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    //# sourceMappingURL=node_modules_react-dom_82bb97._.js.map

File: ./frontend/.next/static/chunks/node_modules_next_dist_compiled_107ce8._.js
  JavaScript Functions:
    - defaultSetTimout
    - defaultClearTimeout
    - runTimeout
    - runClearTimeout
    - cleanUpNextTick
    - drainQueue
    - Item
    - noop
    - __nccwpck_require__
    - computeFullKey
    - haveEqualSignatures
    - isReactClass
    - canPreserveStateBetween
    - resolveFamily
    - cloneMap
    - cloneSet
    - getProperty
    - performReactRefresh
    - register
    - setSignature
    - collectCustomHooksForSignature
    - getFamilyByID
    - getFamilyByType
    - findAffectedHostInstances
    - injectIntoGlobalHook
    - hasUnrecoverableErrors
    - _getMountedRootCount
    - is
    - Hello
    - createSignatureFunctionForTransform
    - isLikelyComponentType
    - with
    - isSafeExport
    - registerExportsForReactRefresh
    - getRefreshBoundarySignature
    - isReactRefreshBoundary
    - shouldInvalidateReactRefreshBoundary
    - aggregates
    - scheduleUpdate
    - canApplyUpdate
    - applyUpdate
    - statusHandler
    - defineDeprecationWarning
    - getIteratorFn
    - warnNoop
    - Component
    - ComponentDummy
    - PureComponent
    - testStringCoercion
    - checkKeyStringCoercion
    - getComponentNameFromType
    - isValidElementType
    - disabledLog
    - disableLogs
    - reenableLogs
    - describeBuiltInComponentFrame
    - describeNativeComponentFrame
    - describeUnknownElementTypeFrameInDEV
    - getOwner
    - hasValidKey
    - defineKeyPropWarningGetter
    - warnAboutAccessingKey
    - elementRefGetterWithDeprecationWarning
    - ReactElement
    - cloneAndReplaceKey
    - validateChildKeys
    - isValidElement
    - validateExplicitKey
    - getCurrentComponentErrorInfo
    - escape
    - getElementKey
    - noop
    - resolveThenable
    - mapIntoArray
    - mapChildren
    - lazyInitializer
    - resolveDispatcher
    - component
    - noop
    - enqueueTask
    - aggregateErrors
    - popActScope
    - recursivelyFlushAsyncActWork
    - flushActQueue
    - which
    - but
    - but
    - getComponentNameFromType
    - testStringCoercion
    - checkKeyStringCoercion
    - disabledLog
    - disableLogs
    - reenableLogs
    - describeBuiltInComponentFrame
    - describeNativeComponentFrame
    - describeUnknownElementTypeFrameInDEV
    - getOwner
    - hasValidKey
    - defineKeyPropWarningGetter
    - warnAboutAccessingKey
    - elementRefGetterWithDeprecationWarning
    - ReactElement
    - jsxDEVImpl
    - validateChildKeys
    - isValidElement
    - validateExplicitKey
    - getCurrentComponentErrorInfo
    - performWorkUntilDeadline
    - push
    - peek
    - pop
    - compare
    - advanceTimers
    - handleTimeout
    - shouldYieldToHost
    - requestHostCallback
    - requestHostTimeout
    - _defineProperty
    - resolveClientReference
    - resolveServerReference
    - requireAsyncModule
    - ignoreReject
    - preloadModule
    - requireModule
    - getIteratorFn
    - isObjectPrototype
    - isSimpleObject
    - objectName
    - describeKeyForErrorMessage
    - describeValueForErrorMessage
    - describeElementType
    - describeObjectForErrorMessage
    - serializeNumber
    - processReply
    - serializeTypedArray
    - serializeBinaryReader
    - progress
    - serializeReader
    - progress
    - serializeReadableStream
    - serializeAsyncIterable
    - progress
    - resolveToJSON
    - serializeModel
    - createFakeServerFunction
    - registerServerReference
    - createBoundServerReference
    - action
    - parseStackLocation
    - getComponentNameFromType
    - ReactPromise
    - readChunk
    - createPendingChunk
    - wakeChunk
    - wakeChunkIfInitialized
    - triggerErrorOnChunk
    - createResolvedIteratorResultChunk
    - resolveIteratorResultChunk
    - resolveModelChunk
    - resolveModuleChunk
    - initializeModelChunk
    - initializeModuleChunk
    - reportGlobalError
    - nullRefGetter
    - createLazyChunkWrapper
    - getChunk
    - waitForReference
    - fulfill
    - reject
    - loadServerReference
    - getOutlinedModel
    - createMap
    - createSet
    - createBlob
    - createFormData
    - extractIterator
    - createModel
    - parseModelString
    - missingCall
    - from
    - ResponseInstance
    - resolveModel
    - resolveText
    - resolveBuffer
    - resolveModule
    - resolveStream
    - startReadableStream
    - asyncIterator
    - createIterator
    - startAsyncIterable
    - stopStream
    - resolveErrorDev
    - resolveHint
    - createFakeFunction
    - buildFakeCallStack
    - getRootTask
    - fakeJSXCallSite
    - initializeFakeStack
    - resolveDebugInfo
    - getCurrentStackInDEV
    - resolveConsoleEntry
    - mergeBuffer
    - resolveTypedArray
    - processFullBinaryRow
    - processFullStringRow
    - createFromJSONCallback
    - createResponseFromOptions
    - startReadingFromStream
    - progress
    - error
    - action
    - exports
    - exports
    - __nccwpck_require__
    - parse
    - parseChrome
    - parseWinjs
    - parseGecko
    - parseJSC
    - parseNode
    - capitalize
    - cleanupOS
    - each
    - format
    - forOwn
    - getClassOf
    - isHostType
    - qualify
    - reduce
    - trim
    - parse
    - getLayout
    - getManufacturer
    - getName
    - getOS
    - getProduct
    - getVersion
    - toStringPlatform
    - __nccwpck_require__
    - nmd
    - __nccwpck_require__
    - defineProperties
    - _classCallCheck
    - escapeForHtml
    - linkify
    - ansiToHtml
    - ansiToJson
    - ansiToText
    - Anser
    - setupPalette
    - format
    - escapeForHtml
    - linkify
    - ansiToHtml
    - ansiToJson
    - ansiToText
    - process
    - processChunkJson
    - isEmpty
    - processChunk
    - render_data
    - __nccwpck_require__
  Comments:
    /**
 * @license React
 * react-refresh-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    // ATTENTION
    // We never remove these associations.
    // It's OK to reference families, but use WeakMap/Set for types.
    // This WeakMap is read by React, so we only put families
    // that have actually been edited here. This keeps checks fast.
    // $FlowIssue
    // This is cleared on every performReactRefresh() call.
    // It is an array of [Family, NextType] tuples.
    // This is injected by the renderer via DevTools global hook.
    // We keep track of mounted roots so we can schedule updates.
    // If a root captures an error, we remember it so we can retry on edit.
    // In environments that support WeakMap, we also remember the last element for every root.
    // It needs to be weak because we do this even for roots that failed to mount.
    // If there is no WeakMap, we won't attempt to do retrying.
    // $FlowIssue
    // This can happen in an edge case, e.g. if expression like Foo.useSomething
    // depends on Foo which is lazily initialized during rendering.
    // In that case just assume we'll have to remount.
    // Something's wrong. Assume we need to remount.
    // Only check updated types to keep lookups fast.
    // If we didn't care about IE11, we could use new Map/Set(iterable).
    // This is a safety mechanism to protect against rogue getters and Proxies.
    // Intentionally ignore.
    // Now that we got a real edit, we can create associations
    // that will be read by the React reconciler.
    // Determine whether this should be a re-render or a re-mount.
    // TODO: rename these fields to something more meaningful.
    // Families that will re-render preserving state
    // Families that will be remounted
    // Even if there are no roots, set the handler on first update.
    // This ensures that if *new* roots are mounted, they'll use the resolve handler.
    // We snapshot maps and sets that are mutated during commits.
    // If we don't do this, there is a risk they will be mutated while
    // we iterate over them. For example, trying to recover a failed root
    // may cause another root to be added to the failed list -- an infinite loop.
    // Keep trying other roots.
    // Keep trying other roots.
    // This can happen in an edge case, e.g. if we register
    // return value of a HOC but it returns a cached component.
    // Ignore anything but the first registration for each type.
    // Create family or remember to update it.
    // None of this bookkeeping affects reconciliation
    // until the first performReactRefresh() call above.
    // Visit inner types because we might not have registered them.
    // Visit inner types because we might not have signed them.
    // This is lazily called during first render for a type.
    // It captures Hook list at that time so inline requires don't break comparisons.
    // For React Native, the global hook will be set up by require('react-devtools-core').
    // That code will run before us. So we need to monkeypatch functions on existing hook.
    // For React Web, the global hook will be set up by the extension.
    // This will also run before us.
    // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.
    // Note that in this case it's important that renderer code runs *after* this method call.
    // Otherwise, the renderer will think that there is no global hook, and won't do the injection.
    // This isn't a real property on the hook, but it can be set to opt out
    // of DevTools integration and associated warnings and logs.
    // Using console['warn'] to evade Babel and ESLint
    // Here, we just want to get a reference to scheduleRefresh.
    // This version supports React Refresh.
    // Do the same for any already injected roots.
    // This is useful if ReactDOM has already been initialized.
    // https://github.com/facebook/react/issues/17626
    // This version supports React Refresh.
    // We also want to track currently mounted roots.
    // If it was intentionally scheduled, don't attempt to restore.
    // This includes intentionally scheduled unmounts.
    // We need to determine whether this root has just (un)mounted.
    // This logic is copy-pasted from similar logic in the DevTools backend.
    // If this breaks with some refactoring, you'll want to update DevTools too.
    // Mount a new root.
    // Unmount an existing root.
    // We'll remount it on future edits.
    // We'll remount it on future edits.
    // Mount a new root.
    // Always call the decorated DevTools hook.
    // TODO: delete this after removing dependency in RN.
    // Exposed for testing.
    // This is a wrapper over more primitive functions for setting signature.
    // Signatures let us decide whether the Hook order has changed on refresh.
    //
    // This function is intended to be used as a transform target, e.g.:
    // var _s = createSignatureFunctionForTransform()
    //
    // function Hello() {
    //   const [foo, setFoo] = useState(0);
    //   const value = useCustomHook();
    //   _s(); /* Call without arguments triggers collecting the custom Hook list.
    //          * This doesn't happen during the module evaluation because we
    //          * don't want to change the module order with inline requires.
    //          * Next calls are noops. */
    //   return <h1>Hi</h1>;
    // }
    //
    // /* Call with arguments attaches the signature to the type: */
    // _s(
    //   Hello,
    //   'useState{[foo, setFoo]}(0)',
    //   () => [useCustomHook], /* Lazy to avoid triggering inline requires */
    // );
    // We're in the initial phase that associates signatures
    // with the functions. Note this may be called multiple times
    // in HOC chains like _s(hoc1(_s(hoc2(_s(actualFunction))))).
    // We're in the innermost call, so this is the actual type.
    // Set the signature for all types (even wrappers!) in case
    // they have no signatures of their own. This is to prevent
    // problems like https://github.com/facebook/react/issues/20417.
    // We're in the _s() call without arguments, which means
    // this is the time to collect custom Hook signatures.
    // Only do this once. This path is hot and runs *inside* every render!
    // First, deal with classes.
    // React class.
    // This looks like a class.
    // eslint-disable-next-line no-proto
    // It has a superclass.
    // Pass through.
    // This looks like a regular function with empty prototype.
    // For plain functions and arrows, use name as a heuristic.
    // Definitely React components.
    /**
 * MIT License
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
    // This file is copied from the Metro JavaScript bundler, with minor tweaks for
    // webpack 4 compatibility.
    //
    // https://github.com/facebook/metro/blob/d6b9685c730d0d63577db40f41369157f28dfa3a/packages/metro/src/lib/polyfills/require.js
    // TODO: remove this key from page config instead of allow listing it
    // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    // Exit if we can't iterate over exports.
    // This might fail due to circular dependencies
    // This function aggregates updates from multiple modules into a single React Refresh call.
    // Apply update on the next tick.
    // Apply update once the HMR runtime's status is idle.
    // Needs to be compatible with IE11
    //# sourceMappingURL=helpers.js.map
    // Hook into ReactDOM initialization
    // Register global helpers
    // Register a helper for module execution interception
    // Modeled after `useEffect` cleanup pattern:
    // https://react.dev/learn/synchronizing-with-effects#step-3-add-cleanup-if-needed
    //# sourceMappingURL=runtime.js.map
    /**
 * @license React
 * react.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    //react.dev/link/special-props)", displayName));
    //react.dev/link/warning-keys for more information.', parentType, childOwner);
    //react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.");
    //github.com/facebook/react/issues if you encounter this warning."));
    //github.com/facebook/react/issues/3236)."
    //react.dev/link/new-jsx-transform")), hasValidKey(config) && (checkKeyStringCoercion(config.key), typeString = "" + config.key), config)hasOwnProperty.call(config, propName) && "key" !== propName && "__self" !== propName && "__source" !== propName && (i[propName] = config[propName]);
    /**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    //react.dev/link/special-props)", displayName));
    //react.dev/link/warning-keys for more information.', parentType, childOwner);
    /**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    /**
 * @license React
 * react-server-dom-turbopack-client.browser.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    /* This module is a proxy to a Server Action. Turn on Source Maps to see the server source. */
    /* This module is a proxy to a Server Action. Turn on Source Maps to see the server source. */
    //" + filename);
    //# sourceURL=rsc://React/" + encodeURIComponent(environmentName) + "/" + filename + "?s" + fakeServerFunctionIdx++, col += "\n//# sourceMappingURL=" + sourceMap) : filename && (col += "\n//# sourceURL=" + filename);
    /* This module was rendered by a Server Component. Turn on Source Maps to see the server source. */
    /* This module was rendered by a Server Component. Turn on Source Maps to see the server source. */
    //" + filename);
    //# sourceURL=rsc://React/" + encodeURIComponent(environmentName) + "/" + encodeURI(filename) + "?" + fakeFunctionIdx++, col += "\n//# sourceMappingURL=" + sourceMap) : col = filename ? col + ("\n//# sourceURL=" + encodeURI(filename)) : col + "\n//# sourceURL=<anonymous>";
    /*!
 * Platform.js v1.3.6
 * Copyright 2014-2020 Benjamin Tan
 * Copyright 2011-2013 John-David Dalton
 * Available under MIT license
 */
    //i.test(e)) {
    //# sourceMappingURL=node_modules_next_dist_compiled_107ce8._.js.map

File: ./frontend/.next/static/chunks/[turbopack]_browser_dev_hmr-client_hmr-client_ts_8e6352._.js

File: ./frontend/.next/static/chunks/src_app_layout_61af54.js

File: ./frontend/.next/static/chunks/node_modules_55c860._.js
  JavaScript Functions:
    - getComponentNameFromType
    - testStringCoercion
    - checkKeyStringCoercion
    - disabledLog
    - disableLogs
    - reenableLogs
    - describeBuiltInComponentFrame
    - describeNativeComponentFrame
    - describeUnknownElementTypeFrameInDEV
    - getOwner
    - hasValidKey
    - defineKeyPropWarningGetter
    - warnAboutAccessingKey
    - elementRefGetterWithDeprecationWarning
    - ReactElement
    - jsxDEVImpl
    - validateChildKeys
    - isValidElement
    - validateExplicitKey
    - getCurrentComponentErrorInfo
    - _extends
    - is
    - memoizedSelector
    - isValidElementType
    - typeOf
    - isContextConsumer
    - isMemo
    - warning
    - verify
    - verifySubselectors
    - pureFinalPropsSelectorFactory
    - handleFirstCall
    - handleNewPropsAndNewState
    - handleNewProps
    - handleNewState
    - handleSubsequentCalls
    - pureFinalPropsSelector
    - finalPropsSelectorFactory
    - bindActionCreators
    - isPlainObject
    - verifyPlainObject
    - wrapMapToPropsConstant
    - initConstantSelector
    - constantSelector
    - getDependsOnOwnProps
    - wrapMapToPropsFunc
    - initProxySelector
    - mapToPropsProxy
    - detectFactoryAndVerify
    - createInvalidArgFactory
    - mapDispatchToPropsFactory
    - mapStateToPropsFactory
    - defaultMergeProps
    - wrapMergePropsFunc
    - initMergePropsProxy
    - mergePropsProxy
    - mergePropsFactory
    - defaultNoopBatch
    - createListenerCollection
    - unsubscribe
    - createSubscription
    - addNestedSub
    - notifyNestedSubs
    - handleChangeWrapper
    - isSubscribed
    - trySubscribe
    - tryUnsubscribe
    - trySubscribeSelf
    - tryUnsubscribeSelf
    - canUseDOM
    - isRunningInReactNative
    - getUseIsomorphicLayoutEffect
    - is
    - shallowEqual
    - getStatics
    - hoistNonReactStatics
    - getContext
    - stringifyComponent
    - useIsomorphicLayoutEffectWithArgs
    - captureWrapperProps
    - subscribeUpdates
    - checkForUpdates
    - unsubscribeWrapper
    - strictEqual
    - connect
    - wrapWithConnect
    - returned
    - ConnectFunction
    - forwardConnectRef
    - Provider
    - createReduxContextHook
    - useReduxContext2
    - createStoreHook
    - useStore2
    - createDispatchHook
    - useDispatch2
    - refEquality
    - createSelectorHook
    - useSelector2
    - as
    - as
    - to
    - invariant
    - getRect
    - expand
    - shrink
    - shift
    - createBox
    - parse
    - getWindowScroll
    - offset
    - withScroll
    - calculateBox
    - getBox
    - rafSchd
    - wrapperFn
    - formatProdErrorMessage
    - randomString
    - isPlainObject
    - miniKindOf
    - ctorName
    - isError
    - isDate
    - kindOf
    - createStore
    - ensureCanMutateNextListeners
    - getState
    - subscribe
    - unsubscribe
    - dispatch
    - replaceReducer
    - observable
    - observeState
    - legacy_createStore
    - warning
    - getUnexpectedStateShapeWarningMessage
    - assertReducerShape
    - combineReducers
    - combination
    - bindActionCreator
    - bindActionCreators
    - compose
    - applyMiddleware
    - dispatch
    - isAction
    - 2
    - getDevMessage
    - getFormattedMessage
    - log
    - noop
    - getOptions
    - bindEvents
    - unbind
    - unbindAll
    - toString
    - invariant
    - onWindowError
    - getCallbacks
    - setCallbacks
    - position
    - onDragStart
    - withLocation
    - withCombine
    - onDragUpdate
    - returnedToStart
    - onDragEnd
    - isEqual
    - areInputsEqual
    - useMemo
    - useCallback
    - add
    - subtract
    - 1
    - negate
    - patch
    - distance
    - 1
    - apply
    - executeClip
    - offsetByPosition
    - getCorners
    - 1
    - increase
    - clip
    - getSubject
    - scrollDroppable
    - memoizeOne
    - memoized
    - clear
    - tryGetDestination
    - tryGetCombine
    - moveToNextCombine
    - getImpact
    - isHomeOf
    - isWithin
    - isPartiallyVisibleThroughFrame
    - isTotallyVisibleThroughFrame
    - isTotallyVisibleThroughFrameOnAxis
    - getDroppableDisplaced
    - isVisibleInDroppable
    - isVisibleInViewport
    - 1
    - isPartiallyVisible
    - isTotallyVisible
    - isTotallyVisibleOnAxis
    - getShouldAnimate
    - getTarget
    - getDisplacementGroups
    - process
    - getIndexOfLastItem
    - goAtEnd
    - calculateReorderImpact
    - didStartAfterCritical
    - fromCombine
    - fromReorder
    - moveToNextIndex
    - getCombinedItemDisplacement
    - whenCombining
    - distanceFromStartToBorderBoxCenter
    - distanceFromEndToBorderBoxCenter
    - getCrossAxisBorderBoxCenter
    - goAfter
    - goBefore
    - goIntoStart
    - whenReordering
    - withDroppableDisplacement
    - getResultWithoutDroppableDisplacement
    - getPageBorderBoxCenterFromImpact
    - scrollViewport
    - getDraggables
    - tryGetVisible
    - speculativelyIncrease
    - withViewportDisplacement
    - getClientFromPageBorderBoxCenter
    - isTotallyVisibleInNewLocation
    - moveToNextPlace
    - getKnownActive
    - getBestCrossAxisDroppable
    - getCurrentPageBorderBoxCenter
    - getCurrentPageBorderBox
    - getClosestDraggable
    - getDisplacedBy
    - getRequiredGrowthForPlaceholder
    - withMaxScroll
    - addPlaceholder
    - removePlaceholder
    - moveToNewDroppable
    - proposedIndex
    - moveCrossAxis
    - whatIsDraggedOver
    - 1
    - moveInDirection
    - isMovementAllowed
    - isPositionInFrame
    - run
    - getHasOverlap
    - getFurthestAway
    - getDroppableOver
    - offsetRectByPosition
    - withDroppableScroll
    - getIsDisplaced
    - atIndex
    - getReorderImpact
    - getCombineImpact
    - getDragImpact
    - patchDroppableMap
    - clearUnusedPlaceholder
    - recomputePlaceholders
    - update
    - getDraggables
    - recompute
    - getClientBorderBoxCenter
    - refreshSnap
    - getHomeLocation
    - getLiftEffect
    - patchDimensionMap
    - start
    - finish
    - offsetDraggable
    - getFrame
    - adjustAdditionsForScrollChanges
    - publishWhileDraggingInVirtual
    - isSnapping
    - postDroppableChange
    - removeScrollJumpRequest
    - reducer
    - guard
    - beforeInitialCapture
    - 1
    - initialPublish
    - publishWhileDragging
    - collectionStarting
    - updateDroppableScroll
    - updateDroppableIsEnabled
    - updateDroppableIsCombineEnabled
    - move
    - moveByWindowScroll
    - updateViewportMaxScroll
    - moveUp
    - moveDown
    - moveRight
    - moveLeft
    - flush
    - animateDrop
    - completeDrop
    - drop
    - dropPending
    - dropAnimationFinished
    - checkIndexes
    - validateDimensions
    - lift
    - style
    - moveTo
    - getDropDuration
    - getNewHomeClientOffset
    - getDropImpact
    - dropMiddleware
    - getWindowScroll
    - getWindowScrollBinding
    - getScrollListener
    - updateScroll
    - isActive
    - start
    - stop
    - 1
    - scrollListener
    - getExpiringAnnounce
    - result
    - wasCalled
    - getAsyncMarshal
    - execute
    - add
    - flush
    - areLocationsEqual
    - isCombineEqual
    - isCriticalEqual
    - withTimings
    - getDragStart
    - execute
    - getPublisher
    - beforeCapture
    - beforeStart
    - start
    - update
    - flush
    - drop
    - abort
    - responders
    - dropAnimationFinishMiddleware
    - dropAnimationFlushOnScrollMiddleware
    - clear
    - flushDropAnimation
    - dimensionMarshalStopper
    - focus
    - shouldStop
    - autoScroll
    - pendingDrop
    - createStore
    - 1
    - createPublisher
    - collect
    - add
    - remove
    - stop
    - getMaxScroll
    - getDocumentElement
    - getMaxWindowScroll
    - getViewport
    - getInitialPublish
    - shouldPublishUpdate
    - createDimensionMarshal
    - updateDroppableIsEnabled
    - updateDroppableIsCombineEnabled
    - updateDroppableScroll
    - scrollDroppable
    - stopPublishing
    - subscriber
    - startPublishing
    - canStartDrag
    - scrollWindow
    - getScrollableDroppableOver
    - getBestScrollableDroppable
    - getDistanceThresholds
    - getPercentage
    - getValueFromDistance
    - dampenValueByTime
    - getValue
    - getScrollOnAxis
    - adjustForSizeLimits
    - 1
    - getOverlap
    - getRemainder
    - canPartiallyScroll
    - canScrollWindow
    - getWindowOverlap
    - canScrollDroppable
    - getDroppableOverlap
    - getWindowScrollChange
    - getDroppableScrollChange
    - scroll
    - createFluidScroller
    - tryScroll
    - 1
    - fakeScrollCallback
    - stop
    - createJumpScroller
    - moveByOffset
    - scrollDroppableAsMuchAsItCan
    - scrollWindowAsMuchAsItCan
    - jumpScroller
    - createAutoScroller
    - scroll
    - dragHandle
    - draggable
    - droppable
    - makeGetSelector
    - getStyles
    - 1
    - 1
    - 1
    - getHead
    - createStyleEl
    - useStyleMarshal
    - querySelectorAll
    - getWindowFromEl
    - isHtmlElement
    - findDragHandle
    - useFocusMarshal
    - register
    - unregister
    - tryGiveFocus
    - tryShiftRecord
    - tryRestoreFocusRecorded
    - tryRecordFocus
    - clearFrameOnUnmount
    - createRegistry
    - subscribe
    - unsubscribe
    - notify
    - findDraggableById
    - getDraggableById
    - findDroppableById
    - getDroppableById
    - clean
    - useRegistry
    - unmount
    - getBodyElement
    - getId
    - useAnnouncer
    - setup
    - cleanup
    - remove
    - useUniqueId
    - getElementId
    - useHiddenTextElement
    - mount
    - unmount
    - getVersion
    - isSatisfied
    - checkReactVersion
    - checkDoctype
    - useDev
    - useDevSetupWarning
    - useStartupValidation
    - usePrevious
    - create
    - isClaimed
    - isActive
    - claim
    - release
    - tryAbandon
    - isDragging
    - preventStandardKeyEvents
    - supportedEventName
    - isSloppyClickThresholdExceeded
    - getCaptureBindings
    - useMouseSensor
    - onMouseDown
    - listenForCapture
    - bindCapturingEvents
    - startPendingDrag
    - mount
    - unmount
    - noop
    - getDraggingBindings
    - cancel
    - drop
    - useKeyboardSensor
    - onKeyDown
    - stop
    - tryStartCapture
    - mount
    - unmount
    - getWindowBindings
    - getHandleBindings
    - useTouchSensor
    - getPhase
    - setPhase
    - onTouchStart
    - listenForCapture
    - bindCapturingEvents
    - unbindAll
    - startDragging
    - startPendingDrag
    - mount
    - unmount
    - webkitHack
    - useValidateSensorHooks
    - isAnInteractiveElement
    - isEventInInteractiveElement
    - getBorderBoxCenterPosition
    - isElement
    - supportedMatchesName
    - closestPonyfill
    - closest
    - getSelector
    - findClosestDragHandleFromEvent
    - tryGetClosestDraggableIdFromEvent
    - findDraggable
    - preventDefault
    - isActive
    - canStart
    - tryStart
    - getShouldRespectForcePress
    - isLockActive
    - tryDispatch
    - lift
    - completed
    - finish
    - fluidLift
    - 1
    - snapLift
    - abortPreDrag
    - useSensorMarshal
    - tryAbandonLock
    - listenToStore
    - tryReleaseLock
    - createResponders
    - onBeforeCapureCallback
    - createAutoScrollerOptions
    - getStore
    - App
    - useUniqueContextId
    - DragDropContext
    - getDraggingTransition
    - getDraggingOpacity
    - getShouldDraggingAnimate
    - getDraggingStyle
    - getSecondaryStyle
    - getStyle
    - getDimension
    - useDraggablePublisher
    - checkIsValidInnerRef
    - useValidation
    - prefix
    - useClonePropValidation
    - useRequiredContext
    - preventHtml5Dnd
    - Draggable
    - isStrictEqual
    - whatIsDraggedOverFromResult
    - getCombineWithFromResult
    - getCombineWithFromImpact
    - getDraggableSelector
    - selector
    - getSecondarySnapshot
    - getSecondarySelector
    - getFallback
    - getProps
    - selector
    - 1
    - selector
    - PrivateDraggable
    - PublicDraggable
    - isEqual
    - isEither
    - isBoth
    - isElementScrollable
    - isBodyScrollable
    - getClosestScrollable
    - checkForNestedScrollContainers
    - getScroll
    - getIsFixed
    - getEnv
    - getDroppableDimension
    - frame
    - getClient
    - getDimension
    - closest
    - getListenerOptions
    - getClosestScrollableFromDrag
    - useDroppablePublisher
    - noop
    - getSize
    - getStyle
    - Placeholder
    - isBoolean
    - runChecks
    - required
    - boolean
    - ref
    - placeholder
    - hasClone
    - hasNoPlaceholder
    - useValidation
    - onClose
    - Droppable
    - getClone
    - getBody
    - attachDefaultPropsToOwnProps
    - isMatchingType
    - getDraggable
    - makeMapStateToProps
    - selector
    - ConnectedDroppable
  Comments:
    /**
 * @license React
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    //react.dev/link/special-props)", displayName));
    //react.dev/link/warning-keys for more information.', parentType, childOwner);
    /**
 * @license React
 * use-sync-external-store-with-selector.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    // src/utils/react.ts
    // src/hooks/useSelector.ts
    // src/utils/react-is.ts
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/utils/warning.ts
    // src/connect/verifySubselectors.ts
    // src/connect/selectorFactory.ts
    // src/utils/bindActionCreators.ts
    // src/utils/isPlainObject.ts
    // src/utils/verifyPlainObject.ts
    // src/connect/wrapMapToProps.ts
    // src/connect/invalidArgFactory.ts
    // src/connect/mapDispatchToProps.ts
    // @ts-ignore
    // @ts-ignore
    // src/connect/mapStateToProps.ts
    // @ts-ignore
    // src/connect/mergeProps.ts
    // src/utils/batch.ts
    // src/utils/Subscription.ts
    // src/utils/useIsomorphicLayoutEffect.ts
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/utils/shallowEqual.ts
    // src/utils/hoistStatics.ts
    // src/components/Context.ts
    /* @__PURE__ */
    /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/components/connect.tsx
    // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.
    // @ts-ignore
    // use React's forwardRef to expose a ref of the wrapped component
    // the context consumer to use
    /* @__PURE__ */
    // @ts-ignore
    /* @__PURE__ */
    // @ts-ignore
    /* @__PURE__ */
    // @ts-ignore
    // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing
    // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,
    // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.
    // @ts-ignore
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/components/Provider.tsx
    /* @__PURE__ */
    /* @__PURE__ */
    // src/hooks/useReduxContext.ts
    /* @__PURE__ */
    // src/hooks/useStore.ts
    // @ts-ignore
    /* @__PURE__ */
    // src/hooks/useDispatch.ts
    /* @__PURE__ */
    //redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization", {
    /* @__PURE__ */
    // src/exports.ts
    //# sourceMappingURL=react-redux.mjs.map
    // src/utils/formatProdErrorMessage.ts
    //redux.js.org/Errors?code=${code} for the full message or use the non-minified dev environment for full errors. `;
    // src/utils/symbol-observable.ts
    /* @__PURE__ */
    // src/utils/actionTypes.ts
    // src/utils/isPlainObject.ts
    // src/utils/kindOf.ts
    // src/createStore.ts
    //redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
    /* @__PURE__ */
    /* @__PURE__ */
    //redux.js.org/api/store#subscribelistener for more details.");
    //redux.js.org/api/store#subscribelistener for more details.");
    //redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`);
    /**
       * The minimal observable subscription method.
       * @param observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
    // src/utils/warning.ts
    // src/combineReducers.ts
    /*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.`);
        }
    });
}
function combineReducers(reducers) {
    const reducerKeys = Object.keys(reducers);
    const finalReducers = {};
    for(let i = 0; i < reducerKeys.length; i++){
        const key = reducerKeys[i];
        if ("TURBOPACK compile-time truthy", 1) {
            if (typeof reducers[key] === "undefined") {
                warning(`No reducer provided for key "${key}"`);
            }
        }
        if (typeof reducers[key] === "function") {
            finalReducers[key] = reducers[key];
        }
    }
    const finalReducerKeys = Object.keys(finalReducers);
    let unexpectedKeyCache;
    if (("TURBOPACK compile-time value", "development") !== "production") {
        unexpectedKeyCache = {};
    }
    let shapeAssertionError;
    try {
        assertReducerShape(finalReducers);
    } catch (e) {
        shapeAssertionError = e;
    }
    return function combination(state = {}, action) {
        if (shapeAssertionError) {
            throw shapeAssertionError;
        }
        if ("TURBOPACK compile-time truthy", 1) {
            const warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
            if (warningMessage) {
                warning(warningMessage);
            }
        }
        let hasChanged = false;
        const nextState = {};
        for(let i = 0; i < finalReducerKeys.length; i++){
            const key = finalReducerKeys[i];
            const reducer = finalReducers[key];
            const previousStateForKey = state[key];
            const nextStateForKey = reducer(previousStateForKey, action);
            if (typeof nextStateForKey === "undefined") {
                const actionType = action && action.type;
                throw new Error(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : `When called with an action of type ${actionType ? `"${String(actionType)}"` : "(unknown type)"}, the slice reducer for key "${key}" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.`);
            }
            nextState[key] = nextStateForKey;
            hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
        }
        hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
        return hasChanged ? nextState : state;
    };
}
// src/bindActionCreators.ts
function bindActionCreator(actionCreator, dispatch) {
    return function(...args) {
        return dispatch(actionCreator.apply(this, args));
    };
}
function bindActionCreators(actionCreators, dispatch) {
    if (typeof actionCreators === "function") {
        return bindActionCreator(actionCreators, dispatch);
    }
    if (typeof actionCreators !== "object" || actionCreators === null) {
        throw new Error(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : `bindActionCreators expected an object or a function, but instead received: '${kindOf(actionCreators)}'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?`);
    }
    const boundActionCreators = {};
    for(const key in actionCreators){
        const actionCreator = actionCreators[key];
        if (typeof actionCreator === "function") {
            boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
        }
    }
    return boundActionCreators;
}
// src/compose.ts
function compose(...funcs) {
    if (funcs.length === 0) {
        return (arg)=>arg;
    }
    if (funcs.length === 1) {
        return funcs[0];
    }
    return funcs.reduce((a, b)=>(...args)=>a(b(...args)));
}
// src/applyMiddleware.ts
function applyMiddleware(...middlewares) {
    return (createStore2)=>(reducer, preloadedState)=>{
            const store = createStore2(reducer, preloadedState);
            let dispatch = ()=>{
                throw new Error(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
            };
            const middlewareAPI = {
                getState: store.getState,
                dispatch: (action, ...args)=>dispatch(action, ...args)
            };
            const chain = middlewares.map((middleware)=>middleware(middlewareAPI));
            dispatch = compose(...chain)(store.dispatch);
            return {
                ...store,
                dispatch
            };
        };
}
// src/utils/isAction.ts
function isAction(action) {
    return isPlainObject(action) && "type" in action && typeof action.type === "string";
}
;
 //# sourceMappingURL=redux.mjs.map
}}),
"[project]/node_modules/@hello-pangea/dnd/dist/dnd.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "DragDropContext": (()=>DragDropContext),
    "Draggable": (()=>PublicDraggable),
    "Droppable": (()=>ConnectedDroppable),
    "useKeyboardSensor": (()=>useKeyboardSensor),
    "useMouseSensor": (()=>useMouseSensor),
    "useTouchSensor": (()=>useTouchSensor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2d$dom$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react-dom/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/react-redux/dist/react-redux.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$box$2d$model$2f$dist$2f$css$2d$box$2d$model$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/css-box-model/dist/css-box-model.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$raf$2d$schd$2f$dist$2f$raf$2d$schd$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/raf-schd/dist/raf-schd.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/redux/dist/redux.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
;
const isProduction$1 = ("TURBOPACK compile-time value", "development") === 'production';
const spacesAndTabs = /[ \t]{2,}/g;
const lineStartWithSpaces = /^[ \t]*/
    //github.com/hello-pangea/dnd/blob/main/docs/patterns/virtual-lists.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/doctype.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/using-inner-ref.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/how-we-detect-scroll-containers.md
    //github.com/atlassian/react-beautiful-dnd/issues/131
    //github.com/hello-pangea/dnd/blob/main/docs/api/droppable.md
    //# sourceMappingURL=node_modules_55c860._.js.map

File: ./frontend/.next/static/chunks/node_modules_next_dist_client_523921._.js
  JavaScript Functions:
    - loadScriptsInSequence
    - onload
    - appBootstrap
    - _export
    - isHTTPAccessFallbackError
    - getAccessFallbackHTTPStatus
    - getAccessFallbackErrorTypeByStatus
    - _export
    - isRedirectError
    - isNextRouterError
    - _export
    - getDefaultHydrationErrorMessage
    - isHydrationError
    - isReactHydrationErrorMessage
    - getHydrationErrorStackInfo
    - _export
    - getHydrationWarningType
    - isHtmlTagsWarning
    - isTextMismatchWarning
    - isTextInTagsMismatchWarning
    - isKnownHydrationWarning
    - getReactHydrationDiffSegments
    - storeHydrationErrorStateFromConsoleArgs
    - attachHydrationErrorState
    - formatObject
    - formatConsoleArgs
    - _export
    - createUnhandledError
    - isUnhandledConsoleOrRejection
    - getUnhandledErrorType
    - enqueueConsecutiveDedupedError
    - getReactStitchedError
    - appendOwnerStack
    - _export
    - handleClientError
    - useErrorHandler
    - onUnhandledError
    - onUnhandledRejection
    - handleGlobalErrors
    - _export
    - patchConsoleError
    - error
    - matchReplayedError
    - onRecoverableError
    - _export
    - onCaughtError
    - onUncaughtError
    - _export
    - _export
    - useServerActionDispatcher
    - serverActionDispatcher
    - callServer
    - findSourceMapURL
    - _export
    - _export
    - getFlightDataPartsFromPath
    - getNextFlightSegmentPath
    - normalizeFlightData
    - _export
    - setAppBuildId
    - getAppBuildId
    - _export
    - urlToUrlWithoutFlightMarker
    - doMpaNavigation
    - fetchServerResponse
    - is
    - createFetch
    - createFromNextReadableStream
    - createUnclosingPrefetchStream
    - createHrefFromUrl
    - createRouterCacheKey
    - invalidateCacheBelowFlightSegmentPath
    - _export
    - matchSegment
    - canSegmentBeOverridden
    - fillLazyItemsTillLeafWithHead
    - invalidateCacheByRouterState
    - _export
    - fillCacheHelper
    - fillCacheWithNewSubTreeData
    - fillCacheWithNewSubTreeDataButOnlyLoading
    - applyFlightData
    - _export
    - refreshInactiveParallelSegments
    - refreshInactiveParallelSegmentsImpl
    - is
    - addRefreshMarkerToActiveParallelSegments
    - applyPatch
    - applyRouterStatePatchToTree
    - shouldHardNavigate
    - isNavigatingToNewRootLayout
    - _export
    - removeLeadingSlash
    - segmentToPathname
    - normalizeSegments
    - extractPathFromFlightRouterState
    - computeChangedPathImpl
    - computeChangedPath
    - getSelectedParams
    - isNotUndefined
    - handleMutable
    - processNext
    - _export
    - createPrefetchCacheKeyImpl
    - createPrefetchCacheKey
    - getExistingCacheEntry
    - getOrCreatePrefetchCacheEntry
    - prefixExistingPrefetchCacheEntry
    - createSeededPrefetchCacheEntry
    - createLazyPrefetchEntry
    - prunePrefetchCache
    - getPrefetchEntryCacheStatus
    - _export
    - identityReducerWhenSegmentCacheIsEnabled
    - prefetchReducerImpl
    - _export
    - useUnwrapState
    - useReducer
    - dispatch
    - hasFallbackRouteParams
    - useUntrackedPathname
    - _export
    - handleHardNavError
    - useNavFailureHandler
    - _export
    - crashes
    - HandleISRError
    - reset
    - GlobalError
    - ErrorBoundary
    - normalizePathTrailingSlash
    - addBasePath
    - getAnnouncerNode
    - AppRouterAnnouncer
    - getSegmentValue
    - _export
    - getRedirectError
    - redirect
    - permanentRedirect
    - getURLFromRedirectError
    - getRedirectTypeFromError
    - getRedirectStatusCodeFromError
    - allows
    - notFound
    - allows
    - forbidden
    - allows
    - unauthorized
    - _export
    - isDynamicServerError
    - _export
    - isStaticGenBailoutError
    - unstable_rethrow
    - _export
    - bailoutToClientRendering
    - _export
    - useSearchParams
    - readonlySearchParams
    - usePathname
    - useRouter
    - useParams
    - getSelectedLayoutSegmentPath
    - useSelectedLayoutSegments
    - useSelectedLayoutSegment
    - _export
    - HandleRedirect
    - RedirectBoundary
    - findHeadInCache
    - findHeadInCacheImpl
    - hasBasePath
    - removeBasePath
    - createCacheKey
    - createTupleMap
    - getOrCreateEntry
    - getEntryIfExists
    - set
    - get
    - deleteEntry
    - createLRU
    - put
    - updateSize
    - so
    - deleteNode
    - ensureCleanupIsScheduled
    - cleanup
    - _export
    - readExactRouteCacheEntry
    - readRouteCacheEntry
    - readSegmentCacheEntry
    - waitForSegmentCacheEntry
    - requestRouteCacheEntryFromCache
    - requestSegmentEntryFromCache
    - deleteRouteFromCache
    - deleteSegmentFromCache
    - onRouteLRUEviction
    - onSegmentLRUEviction
    - cancelEntryListeners
    - pingBlockedTasks
    - fulfillRouteCacheEntry
    - fulfillSegmentCacheEntry
    - rejectRouteCacheEntry
    - rejectSegmentCacheEntry
    - fetchRouteOnCacheMiss
    - is
    - fetchSegmentEntryOnCacheMiss
    - is
    - fetchSegmentPrefetchResponse
    - createPrefetchResponseStream
    - createPromiseWithResolvers
    - _export
    - schedulePrefetchTask
    - ensureWorkIsScheduled
    - hasNetworkBandwidth
    - trackPrefetchRequestBandwidth
    - noop
    - spawnPrefetchSubtask
    - only
    - onPrefetchRequestCompletion
    - pingPrefetchTask
    - processQueueInMicrotask
    - pingRouteTree
    - pingSegmentTree
    - compareQueuePriority
    - heapPush
    - heapPeek
    - heapPop
    - heapSift
    - heapSiftUp
    - heapSiftDown
    - prefetch
    - HTTPAccessFallbackBoundary
    - _export
    - bailOnRootNotFound
    - NotAllowedRootHTTPFallbackError
    - DevRootHTTPAccessFallbackBoundary
    - isLikelyASyntaxError
    - formatMessage
    - message
    - formatWebpackMessages
    - _export
    - pushErrorFilterDuplicates
    - useErrorOverlayReducer
    - parseStack
    - ShadowPortal
    - useOnClickOutside
    - Dialog
    - handler
    - handleFocus
    - DialogBody
    - DialogContent
    - DialogHeader
    - noop
    - _templateObject
    - _export
    - function
    - contextToElement
    - getShadowHost
    - getDocument
    - isActiveElement
    - getParents
    - findMethodName
    - elementMatches
    - before
    - test
    - after
    - detectFocus
    - readLocalStorage
    - writeLocalStorage
    - get
    - set
    - cssShadowPiercingDeepCombinator
    - mutate
    - mutate
    - validate
    - mutate
    - validate
    - mutate
    - mutate
    - mutate
    - mutate
    - mutate
    - mutate
    - mutate
    - mutate
    - mutate
    - element
    - mutate
    - validate
    - focusInZeroDimensionObject
    - mutate
    - mutate
    - validate
    - mutate
    - mutate
    - validate
    - focusObjectSwf
    - mutate
    - validate
    - mutate
    - validate
    - mutate
    - mutate
    - mutate
    - mutate
    - makeFocusableForeignObject
    - focusSvgForeignObjectHack
    - generate
    - focus
    - validate
    - mutate
    - mutate
    - mutate
    - mutate
    - mutate
    - focusSvgInIframe
    - mutate
    - mutate
    - mutate
    - mutate
    - tabsequenceAreaAtImgPosition
    - executeTests
    - _supports
    - isValidTabindex
    - tabindexValue
    - isUserModifyWritable
    - hasCssOverflowScroll
    - hasCssDisplayFlex
    - isScrollableContainer
    - isFocusRelevantRules
    - isFocusRelevant
    - findIndex
    - getContentDocument
    - getWindow
    - selectInShadows
    - findDocumentHostElement
    - getFrameElement
    - computedStyle
    - notDisplayed
    - notVisible
    - collapsedParent
    - isVisibleRules
    - isVisible
    - getMapByName
    - getImageOfArea
    - isValidArea
    - isNativeDisabledSupported
    - isDisabledFieldset
    - isDisabledForm
    - isDisabled
    - isOnlyTabbableRules
    - isOnlyTabbable
    - isOnlyFocusRelevant
    - isFocusableRules
    - isFocusable
    - createFilter
    - filter
    - queryFocusableStrict
    - selector
    - queryFocusableQuick
    - queryFocusable
    - isTabbableRules
    - isTabbable
    - queryTabbable
    - compareDomPosition
    - sortDomOrder
    - getFirstSuccessorOffset
    - findInsertionOffsets
    - insertElementsAtOffsets
    - signature
    - mergeInDomOrder
    - defineProperties
    - _classCallCheck
    - Maps
    - getAreasFor
    - addMapByName
    - extractAreasFromList
    - sortArea
    - resolveElement
    - defineProperties
    - _classCallCheck
    - Shadows
    - _registerHost
    - _registerHostParent
    - _registerElement
    - extractElements
    - sort
    - _injectHosts
    - _merge
    - _replaceHosts
    - _resolveHostElement
    - _cleanup
    - sortShadowed
    - sortTabindex
    - moveContextToBeginning
    - sortElements
    - queryTabsequence
    - createExpectedModifiers
    - resolveModifiers
    - resolveKey
    - matchModifiers
    - keyBinding
    - getParentComparator
    - isChildOf
    - isParentOf
    - whenKey
    - registerBinding
    - addCallback
    - handleKeyDown
    - disengage
    - _default
    - altShiftTab
    - _export
    - lock
    - unlock
    - Overlay
    - HotlinkedText
    - useOpenInEditor
    - openInEditor
    - EditorLink
    - getFile
    - getImportTraceFiles
    - getEditorLinks
    - Terminal
    - _templateObject
    - _export
    - VersionStalenessInfo
    - getStaleness
    - _export
    - _export
    - _templateObject
    - BuildError
    - CloseIcon
    - LeftRightDialogHeader
    - handler
    - _templateObject
    - _export
    - _templateObject
    - Toast
    - _export
    - _export
    - isWebpackInternalResource
    - formatFrameSourceFile
    - _export
    - getOriginalStackFrame
    - _getOriginalStackFrame
    - getOriginalStackFrames
    - getFrameSource
    - getErrorByType
    - CodeFrame
    - CallStackFrame
    - _export
    - _templateObject
    - RuntimeError
    - CollapseIcon
    - getAdjacentProps
    - PseudoHtmlDiff
    - htmlComponents
    - useCopyLegacy
    - copy
    - useCopyModern
    - copy
    - CopyButton
    - CopyIcon
    - CopySuccessIcon
    - isChrome
    - NodeJsIcon
    - NodeJsDisabledIcon
    - NodejsInspectorCopyButton
    - _export
    - _templateObject
    - isNextjsLink
    - ErrorDescription
    - getErrorSignature
    - Errors
    - isLoading
    - previous
    - next
    - activeError
    - minimize
    - hide
    - fullscreen
    - LightningBolt
    - StaticIndicator
    - _templateObject
    - Base
    - _templateObject
    - _templateObject
    - _templateObject
    - _templateObject
    - ComponentStyles
    - _templateObject
    - CssReset
    - RootLayoutMissingTagsError
    - getSocketProtocol
    - getSocketUrl
    - _export
    - useWebsocket
    - useSendMessage
    - sendMessage
    - useTurbopack
    - processTurbopackMessage
    - useWebsocketPing
    - getLocationType
    - parseStackFrameLocation
    - parseComponentStack
    - _export
    - resolvePendingHotUpdateWebpack
    - setPendingHotUpdateWebpack
    - resolvePendingHotUpdateWebpack
    - waitForWebpackRuntimeHotUpdate
    - handleBeforeHotUpdateWebpack
    - handleSuccessfulHotUpdateWebpack
    - reportHmrLatency
    - handleAvailableHash
    - isUpdateAvailable
    - canApplyUpdates
    - afterApplyUpdates
    - handler
    - performFullReload
    - tryApplyUpdates
    - handleApplyUpdates
    - component
    - processMessage
    - handleErrors
    - handleHotUpdate
    - HotReload
    - dispatcher
    - handleOnUnhandledError
    - handleOnUnhandledRejection
    - processTurbopackMessage
    - handler
    - _export
    - isExternalURL
    - createPrefetchURL
    - HistoryUpdater
    - createEmptyCacheNode
    - useChangeByServerResponse
    - useNavigate
    - copyNextJsInternalHistoryState
    - Head
    - Router
    - appRouter
    - handlePageShow
    - handleUnhandledRedirect
    - applyUrlFromHistoryPushReplace
    - pushState
    - replaceState
    - onPopState
    - matchingHead
    - pathParams
    - layoutRouterContext
    - globalLayoutRouterContext
    - AppRouter
    - RuntimeStyles
    - changed
    - _export
    - updateCacheNodeOnNavigation
    - createCacheNodeOnNavigation
    - patchRouterStateWithNewChildren
    - spawnPendingTask
    - spawnReusedTask
    - listenForDynamicRequest
    - writeDynamicDataIntoPendingTask
    - finishTaskUsingDynamicDataPayload
    - createPendingCacheNode
    - finishPendingCacheNode
    - abortTask
    - abortPendingCacheNode
    - updateCacheNodeOnPopstateRestoration
    - clones
    - isDeferredRsc
    - createDeferredRsc
    - resolve
    - reject
    - clearCacheNodeDataForSegmentPath
    - _export
    - handleAliasedPrefetchEntry
    - hasLoadingComponentInSeedData
    - fillNewTreeWithOnlyLoadingSegments
    - addSearchParamsToPageSegments
    - _export
    - navigate
    - navigateUsingPrefetchedRouteTree
    - navigationTaskToResult
    - readRenderSnapshotFromCache
    - navigateDynamicallyWithNoPrefetch
    - simulatePrefetchTreeUsingDynamicTreePatch
    - simulatePrefetchTreeUsingDynamicTreePatchImpl
    - _export
    - handleExternalUrl
    - generateSegmentsFromPatch
    - triggerLazyFetchForLeafSegments
    - handleNavigationResult
    - navigateReducer
    - serverPatchReducer
    - restoreReducer
    - handleSegmentMismatch
    - hasInterceptionRouteInCurrentTree
    - refreshReducer
    - hmrRefreshReducerImpl
    - hmrRefreshReducerNoop
    - assignLocation
    - _export
    - extractInfoFromServerReferenceId
    - omitUnusedArgs
    - fetchServerAction
    - serverActionReducer
    - clientReducer
    - serverReducer
    - createInitialRouterState
    - createDevOverlayElement
    - handler
    - linkGc
    - callback
    - const
    - nextServerDataCallback
    - isStreamErrorOrUnfinished
    - nextServerDataRegisterWriter
    - ServerRoot
    - Root
    - hydrate
  Comments:
    /**
 * Before starting the Next.js runtime and requiring any module, we need to make
 * sure the following scripts are executed in the correct order:
 * - Polyfills
 * - next/script with `beforeInteractive` strategy
 */
    // Still try to hydrate even if there's an error.
    //# sourceMappingURL=app-bootstrap.js.map
    //# sourceMappingURL=http-access-fallback.js.map
    /*#__PURE__*/
    //# sourceMappingURL=redirect-status-code.js.map
    /*#__PURE__*/
    //# sourceMappingURL=redirect-error.js.map
    //# sourceMappingURL=is-next-router-error.js.map
    /*#__PURE__*/
    //react.dev/link/hydration-mismatch';
    // React built-in hydration diff starts with a newline, checking if length is > 1
    //# sourceMappingURL=is-hydration-error.js.map
    // https://github.com/facebook/react/blob/main/packages/react-dom/src/__tests__/ReactDOMHydrationDiff-test.js used as a reference
    // TODO: Doesn't make sense to treat no message as a hydration error message.
    // We should bail out somewhere earlier.
    // React 18 has the `Warning: ` prefix.
    // React 19 does not.
    // remove the last %s from the message
    //# sourceMappingURL=hydration-error-info.js.map
    //nextjs.org/docs/messages/react-hydration-error')) {
    // If there's any extra information in the error message to display,
    // append it to the error message details property
    // The patched console.error found hydration errors logged by React
    // Append the logged warning to the error message
    // It contains the warning, component stack, server and client tag names
    //# sourceMappingURL=attach-hydration-error-state.js.map
    // TODO: We should colorize with HTML instead of turning into a string.
    // Ignore for now.
    //# sourceMappingURL=console.js.map
    // To distinguish from React error.digest, we use a different symbol here to determine if the error is from console.error or unhandled promise rejection.
    //# sourceMappingURL=console-error.js.map
    // Compare the error stack to dedupe the consecutive errors
    // TODO: change all to push error into errorQueue,
    // currently there's a async api error is always erroring while hydration error showing up.
    // Move hydration error to the front of the queue to unblock.
    //# sourceMappingURL=enqueue-client-error.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    // has the react-stack-bottom-frame
    // Copy all enumerable properties, e.g. digest
    // Avoid duplicate overriding stack frames
    // Avoid duplicate overriding stack frames
    // Override stack
    //# sourceMappingURL=stitched-error.js.map
    /*#__PURE__*/
    // If it's not an error, format the args into an error
    // Delayed the error being passed to React Dev Overlay,
    // avoid the state being synchronously updated in the component.
    // Handle queued errors.
    // Listen to new errors.
    // Remove listeners.
    // When there's an error property present, we log the error to error overlay.
    // Otherwise we don't do anything as it's not logging in the console either.
    // Increase the number of stack frames on the client
    //# sourceMappingURL=use-error-handler.js.map
    /*#__PURE__*/
    // Ensure it's only patched once
    // See https://github.com/facebook/react/blob/d50323eb845c5fde0d720cae888bf35dedd05506/packages/react-reconciler/src/ReactFiberErrorLogger.js#L78
    // but if we pass the error directly, `handleClientError` will ignore it
    // See
    // https://github.com/facebook/react/blob/65a56d0e99261481c721334a3ec4561d173594cd/packages/react-devtools-shared/src/backend/flight/renderer.js#L88-L93
    //
    // Logs replayed from the server look like this:
    // [
    //   "%c%s%c %o\n\n%s\n\n%s\n",
    //   "background: #e6e6e6; ...",
    //   " Server ", // can also be e.g. " Prerender "
    //   "",
    //   Error
    //   "The above error occurred in the <Page> component."
    //   ...
    // ]
    //# sourceMappingURL=intercept-console-error.js.map
    //# sourceMappingURL=patch-console.js.map
    //# sourceMappingURL=handle-global-errors.js.map
    //# sourceMappingURL=report-global-error.js.map
    // This module can be shared between both pages router and app router
    /*#__PURE__*/
    // x-ref: https://github.com/facebook/react/pull/28736
    // In development mode, pass along the component stack to the error
    // Skip certain custom errors which are not expected to be reported on client
    //# sourceMappingURL=shared.js.map
    // This file is only used in app router due to the specific error state handling.
    // Skip certain custom errors which are not expected to be reported on client
    // example 1: at Page (http://localhost:3000/_next/static/chunks/pages/index.js?ts=1631600000000:2:1)
    // example 2: Page@http://localhost:3000/_next/static/chunks/pages/index.js?ts=1631600000000:2:1
    // Match chrome or safari stack trace
    // Create error location with errored component and error boundary, to match the behavior of default React onCaughtError handler.
    // TODO: change to passing down errorInfo later
    // In development mode, pass along the component stack to the error
    // Log and report the error with location but without modifying the error stack
    // Skip certain custom errors which are not expected to be reported on client
    // Match chrome or safari stack trace
    // Create error location with errored component and error boundary, to match the behavior of default React onCaughtError handler.
    // TODO: change to passing down errorInfo later
    // In development mode, pass along the component stack to the error
    // Log and report the error with location but without modifying the error stack
    //# sourceMappingURL=app-router.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=router-reducer-types.js.map
    //# sourceMappingURL=app-call-server.js.map
    // This is a request for a client chunk. This can only happen when
    // using Turbopack. In this case, since we control how those source
    // maps are generated, we can safely assume that the sourceMappingURL
    // is relative to the filename, with an added `.map` extension. The
    // browser can just request this file, and it gets served through the
    // normal dev server, without the need to route this through
    // the `/__nextjs_source-map` dev middleware.
    //# sourceMappingURL=app-find-source-map-url.js.map
    //# sourceMappingURL=app-router-headers.js.map
    // tree, seedData, and head are *always* the last three items in the `FlightDataPath`.
    // The `FlightSegmentPath` is everything except the last three items. For a root render, it won't be present.
    // TODO: Unify these two segment path helpers. We are inconsistently pushing an empty segment ("")
    // to the start of the segment path in some places which makes it hard to use solely the segment path.
    // Look for "// TODO-APP: remove ''" in the codebase.
    // if the `FlightDataPath` corresponds with the root, there'll be no segment path,
    // in which case we default to ''.
    // Since `FlightSegmentPath` is a repeated tuple of `Segment` and `ParallelRouteKey`, we slice off two items
    // to get the next segment path.
    // FlightData can be a string when the server didn't respond with a proper flight response,
    // or when a redirect happens, to signal to the client that it needs to perform an MPA navigation.
    //# sourceMappingURL=flight-data-helpers.js.map
    // This gets assigned as a side-effect during app initialization. Because it
    // represents the build used to create the JS bundle, it should never change
    // after being set, so we store it in a global variable.
    //
    // When performing RSC requests, if the incoming data has a different build ID,
    // we perform an MPA navigation/refresh to load the updated build and ensure
    // that the client and server in sync.
    // Starts as an empty string. In practice, because setAppBuildId is called
    // during initialization before hydration starts, this will always get
    // reassigned to the actual build ID before it's ever needed by a navigation.
    // If for some reasons it didn't, due to a bug or race condition, then on
    // navigation the build comparision would fail and trigger an MPA navigation.
    //# sourceMappingURL=app-build-id.js.map
    // @ts-ignore
    // eslint-disable-next-line import/no-extraneous-dependencies
    // import { createFromReadableStream } from 'react-server-dom-webpack/client'
    // Enable flight response
    // Provide the current router state
    /**
   * Three cases:
   * - `prefetchKind` is `undefined`, it means it's a normal navigation, so we want to prefetch the page data fully
   * - `prefetchKind` is `full` - we want to prefetch the whole page so same as above
   * - `prefetchKind` is `auto` - if the page is dynamic, prefetch the page data partially, if static prefetch the page data fully
   */
    // When creating a "temporary" prefetch (the "on-demand" prefetch that gets created on navigation, if one doesn't exist)
    // we send the request with a "high" priority as it's in response to a user interaction that could be blocking a transition.
    // Otherwise, all other prefetches are sent with a "low" priority.
    // We use "auto" for in all other cases to match the existing default, as this function is shared outside of prefetching.
    // If fetch returns something different than flight response handle it like a mpa navigation
    // If the fetch was not 200, we also handle it like a mpa navigation
    // in case the original URL came with a hash, preserve it before redirecting to the new URL
    // We may navigate to a page that requires a different Webpack runtime.
    // In prod, every page will have the same Webpack runtime.
    // In dev, the Webpack runtime is minimal for each page.
    // We need to ensure the Webpack runtime is updated before executing client-side JS of the new page.
    // Handle the `fetch` readable stream that can be unwrapped by `React.use`.
    // If fetch fails handle it like a mpa navigation
    // TODO-APP: Add a test for the case where a CORS request fails, e.g. external url redirect coming from the response.
    // See https://github.com/vercel/next.js/issues/43605#issuecomment-1451617521 for a reproduction.
    // This is used to cache bust CDNs that don't support custom headers. The
    // result is stored in a search param.
    // TODO: Given that we have to use a search param anyway, we might as well
    // _only_ use a search param and not bother with the custom headers.
    // Add unique cache query to avoid caching conflicts on CDN which don't respect the Vary header
    // Backwards compat for older browsers. `same-origin` is the default in modern browsers.
    // When PPR is enabled, prefetch streams may contain references that never
    // resolve, because that's how we encode dynamic data access. In the decoded
    // object returned by the Flight client, these are reified into hanging
    // promises that suspend during render, which is effectively what we want.
    // The UI resolves when it switches to the dynamic data stream
    // (via useDeferredValue(dynamic, static)).
    //
    // However, the Flight implementation currently errors if the server closes
    // the response before all the references are resolved. As a cheat to work
    // around this, we wrap the original stream in a new stream that never closes,
    // and therefore doesn't error.
    // Pass to the target stream and keep consuming the Flight response
    // from the server.
    // The server stream has closed. Exit, but intentionally do not close
    // the target stream.
    //# sourceMappingURL=fetch-server-response.js.map
    //# sourceMappingURL=create-href-from-url.js.map
    // if the segment is an array, it means it's a dynamic segment
    // for example, ['lang', 'en', 'd']. We need to convert it to a string to store it as a cache node key.
    // Page segments might have search parameters, ie __PAGE__?foo=bar
    // When `withoutSearchParameters` is true, we only want to return the page segment
    //# sourceMappingURL=create-router-cache-key.js.map
    // Bailout because the existing cache does not have the path to the leaf node
    // Will trigger lazy fetch in layout-router because of missing segment
    // In case of last entry don't copy further down.
    // Bailout because the existing cache does not have the path to the leaf node
    // Will trigger lazy fetch in layout-router because of missing segment
    //# sourceMappingURL=invalidate-cache-below-flight-segmentpath.js.map
    // segment is either Array or string
    // Common case: segment is just a string
    //# sourceMappingURL=match-segments.js.map
    // Remove segment that we got data for so that it is filled in during rendering of rsc.
    // TODO: We should traverse the cacheNodeSeedData tree instead of the router
    // state tree. Ideally, they would always be the same shape, but because of
    // the loading.js pattern, cacheNodeSeedData sometimes only represents a
    // partial tree. That's why this node is sometimes null. Once PPR lands,
    // loading.js will no longer have special behavior and we can traverse the
    // data tree instead.
    //
    // We should also consider merging the router state tree and the data tree
    // in the response format, so that we don't have to send the keys twice.
    // Then the client can convert them into separate representations.
    // New data was sent from the server.
    // This is a PPR-only field. When PPR is enabled, we shouldn't hit
    // this path during a navigation, but until PPR is fully implemented
    // yet it's possible the existing node does have a non-null
    // `prefetchRsc`. As an incremental step, we'll just de-opt to the
    // old behavior — no PPR value.
    // No new data was sent from the server, but the existing cache node
    // was prefetched, so we should reuse that.
    // This is a PPR-only field. Unlike the previous branch, since we're
    // just cloning the existing cache node, we might as well keep the
    // PPR value, if it exists.
    // No data available for this node. This will trigger a lazy fetch
    // during render.
    // Overrides the cache key with the new cache node.
    // Traverse deeper to apply the head / fill lazy items till the head.
    // New data was sent from the server.
    // No data available for this node. This will trigger a lazy fetch
    // during render.
    //# sourceMappingURL=fill-lazy-items-till-leaf-with-head.js.map
    // Remove segment that we got data for so that it is filled in during rendering of rsc.
    //# sourceMappingURL=invalidate-cache-by-router-state.js.map
    /**
 * Common logic for filling cache with new sub tree data.
 */
    // segmentPath is a repeating tuple of parallelRouteKey and segment
    // we know we've hit the last entry we've reached our final pair
    // When `fillLazyItems` is false, we only want to fill the RSC data for the layout,
    // not the page segment.
    // Move deeper into the cache nodes
    //# sourceMappingURL=fill-cache-with-new-subtree-data.js.map
    // The one before last item is the router state tree patch
    // Handles case where prefetch only returns the router tree patch without rendered components.
    // This is a PPR-only field. When PPR is enabled, we shouldn't hit
    // this path during a navigation, but until PPR is fully implemented
    // yet it's possible the existing node does have a non-null
    // `prefetchRsc`. As an incremental step, we'll just de-opt to the
    // old behavior — no PPR value.
    // Copy rsc for the root node of the cache.
    // This is a PPR-only field. Unlike the previous branch, since we're
    // just cloning the existing cache node, we might as well keep the
    // PPR value, if it exists.
    // Create a copy of the existing cache with the rsc applied.
    //# sourceMappingURL=apply-flight-data.js.map
    // it's possible for the tree to contain multiple segments that contain data at the same URL
    // we keep track of them so we can dedupe the requests
    // Mark this URL as fetched
    // Eagerly kick off the fetch for the refetch path & the parallel routes. This should be fine to do as they each operate
    // independently on their own cache nodes, and `applyFlightData` will copy anything it doesn't care about from the existing cache.
    // refetch from the root of the updated tree, otherwise it will be scoped to the current segment
    // and might not contain the data we need to patch in interception route data (such as dynamic params from a previous segment)
    // we only pass the new cache as this function is called after clearing the router cache
    // and filling in the new page data from the server. Meaning the existing cache is actually the cache that's
    // just been created & has been written to, but hasn't been "committed" yet.
    // When flightData is a string, it suggests that the server response should have triggered an MPA navigation
    // I'm not 100% sure of this decision, but it seems unlikely that we'd want to introduce a redirect side effect
    // when refreshing on-screen data, so handling this has been ommitted.
    // a page segment might also contain concatenated search params, so we do a partial match on the key
    //# sourceMappingURL=refetch-inactive-parallel-segments.js.map
    /**
 * Deep merge of the two router states. Parallel route keys are preserved if the patch doesn't have them.
 */
    // if the applied patch segment is __DEFAULT__ then it can be ignored in favor of the initial tree
    // this is because the __DEFAULT__ segment is used as a placeholder on navigation
    // Copy over the existing tree
    // Root refresh
    // Tree path returned from the server should always match up with the current tree in the browser
    // Current segment is the root layout
    //# sourceMappingURL=apply-router-state-patch-to-tree.js.map
    // TODO-APP: Check if `as` can be replaced.
    // Check if current segment matches the existing segment.
    // If dynamic parameter in tree doesn't match up with segment path a hard navigation is triggered.
    // If the existing segment did not match soft navigation is triggered.
    //# sourceMappingURL=should-hard-navigate.js.map
    // Compare segments
    // If any segment is different before we find the root layout, the root layout has changed.
    // E.g. /same/(group1)/layout.js -> /same/(group2)/layout.js
    // First segment is 'same' for both, keep looking. (group1) changed to (group2) before the root layout was found, it must have changed.
    // Compare dynamic param name and type but ignore the value, different values would not affect the current root layout
    // /[name] - /slug1 and /slug2, both values (slug1 & slug2) still has the same layout /[name]/layout.js
    // Current tree root layout found
    // If the next tree doesn't have the root layout flag, it must have changed.
    // Current tree didn't have its root layout here, must have changed.
    // We can't assume it's `parallelRoutes.children` here in case the root layout is `app/@something/layout.js`
    // But it's not possible to be more than one parallelRoutes before the root layout is found
    // TODO-APP: change to traverse all parallel routes
    //# sourceMappingURL=is-navigating-to-new-root-layout.js.map
    // 'children' is not a valid path -- it's technically a parallel route that corresponds with the current segment's page
    // if we don't skip it, then the computed pathname might be something like `/children` which doesn't make sense.
    // once we find where the tree changed, we compute the rest of the path by traversing the tree
    // lightweight normalization to remove route groups
    // Ensure catchAll and optional catchall are turned into an array
    //# sourceMappingURL=compute-changed-path.js.map
    // shouldScroll is true by default, can override to false.
    // If we received a patched tree, we need to compute the changed path.
    // If the tree changed, we need to update the nextUrl
    // if the tree ends up being the same (ie, no changed path), and we don't have a nextUrl, then we should use the canonicalUrl
    // otherwise this will be a no-op and continue to use the existing nextUrl
    // Set href.
    // All navigation requires scroll and focus management to trigger.
    // Apply cache.
    // Apply patched router state.
    //# sourceMappingURL=handle-mutable.js.map
    /*
    This is a simple promise queue that allows you to limit the number of concurrent promises
    that are running at any given time. It's used to limit the number of concurrent
    prefetch requests that are being made to the server but could be used for other
    things as well.
*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // wonder if we should take a LIFO approach here
    //# sourceMappingURL=promise-queue.js.map
    /**
 * Creates a cache key for the router prefetch cache
 *
 * @param url - The URL being navigated to
 * @param nextUrl - an internal URL, primarily used for handling rewrites. Defaults to '/'.
 * @return The generated prefetch cache key.
 */
    // Initially we only use the pathname as the cache key. We don't want to include
    // search params so that multiple URLs with the same search parameter can re-use
    // loading states.
    // RSC responses can differ based on search params, specifically in the case where we aren't
    // returning a partial response (ie with `PrefetchKind.AUTO`).
    // In the auto case, since loading.js & layout.js won't have access to search params,
    // we can safely re-use that cache entry. But for full prefetches, we should not
    // re-use the cache entry as the response may differ.
    // if we have a full prefetch, we can include the search param in the key,
    // as we'll be getting back a full response. The server might have read the search
    // params when generating the full response.
    // We first check if there's a more specific interception route prefetch entry
    // This is because when we detect a prefetch that corresponds with an interception route, we prefix it with nextUrl (see `createPrefetchCacheKey`)
    // to avoid conflicts with other pages that may have the same URL but render different things depending on the `Next-URL` header.
    // First, we check if we have a cache entry that exactly matches the URL
    // We know we're returning an aliased entry when the pathname matches but the search params don't,
    // If the request contains search params, and we're not doing a full prefetch, we can return the
    // param-less entry if it exists.
    // This is technically covered by the check at the bottom of this function, which iterates over cache entries,
    // but lets us arrive there quicker in the param-full case.
    // We shouldn't return the aliased entry if it was relocated to a new cache key.
    // Since it's rewritten, it could respond with a completely different loading state.
    // If we've gotten to this point, we didn't find a specific cache entry that matched
    // the request URL.
    // We attempt a partial match by checking if there's a cache entry with the same pathname.
    // Regardless of what we find, since it doesn't correspond with the requested URL, we'll mark it "aliased".
    // This will signal to the router that it should only apply the loading state on the prefetched data.
    // Grab the latest status of the cache entry and update it
    // when `kind` is provided, an explicit prefetch was requested.
    // if the requested prefetch is "full" and the current cache entry wasn't, we want to re-prefetch with the new intent
    // If we switched to a full prefetch, validate that the existing cache entry contained partial data.
    // It's possible that the cache entry was seeded with full data but has a cache type of "auto" (ie when cache entries
    // are seeded but without a prefetch intent)
    // If we started rendering from the root and we returned RSC data (seedData), we already had a full prefetch.
    // If we didn't get an explicit prefetch kind, we want to set a temporary kind
    // rather than assuming the same intent as the previous entry, to be consistent with how we
    // lazily create prefetch entries when intent is left unspecified.
    // If the existing cache entry was marked as temporary, it means it was lazily created when attempting to get an entry,
    // where we didn't have the prefetch intent. Now that we have the intent (in `kind`), we want to update the entry to the more accurate kind.
    // We've determined that the existing entry we found is still valid, so we return it.
    // If we didn't return an entry, create a new one.
    /*
 * Used to take an existing cache entry and prefix it with the nextUrl, if it exists.
 * This ensures that we don't have conflicting cache entries for the same URL (as is the case with route interception).
 */
    // no-op -- there wasn't an entry to move
    // The initial cache entry technically includes full data, but it isn't explicitly prefetched -- we just seed the
    // prefetch cache so that we can skip an extra prefetch request later, since we already have the data.
    // if the prefetch corresponds with an interception route, we use the nextUrl to prefix the cache key
    /**
 * Creates a prefetch entry entry and enqueues a fetch request to retrieve the data.
 */
    // initiates the fetch request for the prefetch and attaches a listener
    // to the promise to update the prefetch cache entry when the promise resolves (if necessary)
    // TODO: `fetchServerResponse` should be more tighly coupled to these prefetch cache operations
    // to avoid drift between this cache key prefixing logic
    // (which is currently directly influenced by the server response)
    // Determine if we need to prefix the cache key with the nextUrl
    // If the prefetch was a cache hit, we want to update the existing cache entry to reflect that it was a full prefetch.
    // This is because we know that a static response will contain the full RSC payload, and can be updated to respect the `static`
    // staleTime.
    // This is the stale time that was collected by the server during
    // static generation. Use this in place of the default stale time.
    // These values are set by `define-env-plugin` (based on `nextConfig.experimental.staleTimes`)
    // and default to 5 minutes (static) / 0 seconds (dynamic)
    // `staleTime` is the value sent by the server during static generation.
    // When this is available, it takes precedence over any of the heuristics
    // that follow.
    //
    // TODO: When PPR is enabled, the server will *always* return a stale time
    // when prefetching. We should never use a prefetch entry that hasn't yet
    // received data from the server. So the only two cases should be 1) we use
    // the server-generated stale time 2) the unresolved entry is discarded.
    // We will re-use the cache entry data for up to the `dynamic` staletime window.
    // For "auto" prefetching, we'll re-use only the loading boundary for up to `static` staletime window.
    // A stale entry will only re-use the `loading` boundary, not the full data.
    // This will trigger a "lazy fetch" for the full data.
    // for "full" prefetching, we'll re-use the cache entry data for up to `static` staletime window.
    //# sourceMappingURL=prefetch-cache-utils.js.map
    // Unlike the old implementation, the Segment Cache doesn't store its data in
    // the router reducer state.
    //
    // This shouldn't be reachable because we wrap the prefetch API in a check,
    // too, which prevents the action from being dispatched. But it's here for
    // clarity + code elimination.
    // let's prune the prefetch cache before we do anything else
    //# sourceMappingURL=prefetch-reducer.js.map
    /*#__PURE__*/
    // reducer actions can be async, so sometimes we need to suspend until the state is resolved
    //# sourceMappingURL=use-reducer.js.map
    /**
 * This checks to see if the current render has any unknown route parameters.
 * It's used to trigger a different render path in the error boundary.
 *
 * @returns true if there are any unknown route parameters, false otherwise
 */
    // AsyncLocalStorage should not be included in the client bundle.
    // If there are any unknown route parameters we would typically throw
    // an error, but this internal method allows us to return a null value instead
    // for components that do not propagate the pathname to the static shell (like
    // the error boundary).
    // This shouldn't cause any issues related to conditional rendering because
    // the environment will be consistent for the render.
    // eslint-disable-next-line react-hooks/rules-of-hooks
    //# sourceMappingURL=navigation-untracked.js.map
    //# sourceMappingURL=nav-failure-handler.js.map
    // Exported so that the import signature in the loaders can be identical to user
    // supplied custom global error signatures.
    /*#__PURE__*/
    // https://github.com/sindresorhus/modern-normalize/blob/main/modern-normalize.css#L38-L52
    // if we are revalidating we want to re-throw the error so the
    // function crashes so we can maintain our previous cache
    // instead of caching the error page
    // Re-throw if an expected internal Next.js router error occurs
    // this means it should be handled by a different boundary (such as a NotFound boundary in a parent segment)
    // if we encounter an error while
    // a navigation is pending we shouldn't render
    // the error boundary and instead should fallback
    // to a hard navigation to attempt recovering
    /**
     * Handles reset of the error boundary when a navigation happens.
     * Ensures the error boundary does not stay enabled when navigating to a new page.
     * Approach of setState in render is safe as it checks the previous pathname and then overrides
     * it as outlined in https://react.dev/reference/react/useState#storing-information-from-previous-renders
     */
    // Explicit type is needed to avoid the generated `.d.ts` having a wide return type that could be specific to the `@types/react` version.
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // When we're rendering the missing params shell, this will return null. This
    // is because we won't be rendering any not found boundaries or error
    // boundaries for the missing params shell. When this runs on the client
    // (where these errors can occur), we will get the correct pathname.
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=error-boundary.js.map
    //# sourceMappingURL=normalize-trailing-slash.js.map
    //# sourceMappingURL=add-base-path.js.map
    // Use shadow DOM here to avoid any potential CSS bleed
    // Only announce the title change, but not for the first load because screen
    // readers do that automatically.
    /*#__PURE__*/
    //# sourceMappingURL=app-router-announcer.js.map
    //# sourceMappingURL=get-segment-value.js.map
    /** The URL to redirect to */
    /** The URL to redirect to */
    // Slices off the beginning of the digest that contains the code and the
    // separating ';'.
    //# sourceMappingURL=redirect.js.map
    /**
 * This function allows you to render the [not-found.js file](https://nextjs.org/docs/app/api-reference/file-conventions/not-found)
 * within a route segment as well as inject a tag.
 *
 * `notFound()` can be used in
 * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),
 * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and
 * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).
 *
 * - In a Server Component, this will insert a `<meta name="robots" content="noindex" />` meta tag and set the status code to 404.
 * - In a Route Handler or Server Action, it will serve a 404 to the caller.
 *
 * Read more: [Next.js Docs: `notFound`](https://nextjs.org/docs/app/api-reference/functions/not-found)
 */
    // eslint-disable-next-line no-throw-literal
    //# sourceMappingURL=not-found.js.map
    // TODO: Add `forbidden` docs
    /**
 * @experimental
 * This function allows you to render the [forbidden.js file](https://nextjs.org/docs/app/api-reference/file-conventions/forbidden)
 * within a route segment as well as inject a tag.
 *
 * `forbidden()` can be used in
 * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),
 * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and
 * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).
 *
 * Read more: [Next.js Docs: `forbidden`](https://nextjs.org/docs/app/api-reference/functions/forbidden)
 */
    // eslint-disable-next-line no-throw-literal
    //# sourceMappingURL=forbidden.js.map
    // TODO: Add `unauthorized` docs
    /**
 * @experimental
 * This function allows you to render the [unauthorized.js file](https://nextjs.org/docs/app/api-reference/file-conventions/unauthorized)
 * within a route segment as well as inject a tag.
 *
 * `unauthorized()` can be used in
 * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),
 * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and
 * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).
 *
 *
 * Read more: [Next.js Docs: `unauthorized`](https://nextjs.org/docs/app/api-reference/functions/unauthorized)
 */
    // eslint-disable-next-line no-throw-literal
    //# sourceMappingURL=unauthorized.js.map
    //# sourceMappingURL=hooks-server-context.js.map
    //# sourceMappingURL=static-generation-bailout.js.map
    //# sourceMappingURL=unstable-rethrow.js.map
    /** @internal */
    //nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams');
    /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */
    /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */
    /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */
    /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */
    //# sourceMappingURL=navigation.react-server.js.map
    //# sourceMappingURL=bailout-to-client-rendering.js.map
    // In the case where this is `null`, the compat types added in
    // `next-env.d.ts` will add a new overload that changes the return type to
    // include `null`.
    // When the router is not ready in pages, we won't have the search params
    // available.
    // AsyncLocalStorage should not be included in the client bundle.
    // TODO-APP: handle dynamic = 'force-static' here and on the client
    // In the case where this is `null`, the compat types added in `next-env.d.ts`
    // will add a new overload that changes the return type to include `null`.
    /** Get the canonical parameters from the current level to the leaf node. */
    // Client components API
    // Use the provided parallel route key on the first parallel route
    // After first parallel route prefer children, if there's no children pick the first parallel route.
    // @ts-expect-error This only happens in `pages`. Type is overwritten in navigation.d.ts
    // if the default slot is showing, we return null since it's not technically "selected" (it's a fallback)
    // and returning an internal value like `__DEFAULT__` would be confusing.
    //# sourceMappingURL=navigation.js.map
    /*#__PURE__*/
    // Re-throw if error is not for redirect
    // Explicit type is needed to avoid the generated `.d.ts` having a wide return type that could be specific to the `@types/react` version.
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=redirect-boundary.js.map
    // Returns the entire Cache Node of the segment whose head we will render.
    //# sourceMappingURL=find-head-in-cache.js.map
    /**
 * Create a "Thenable" that does not resolve. This is used to suspend indefinitely when data is not available yet.
 */
    //# sourceMappingURL=unresolved-thenable.js.map
    //# sourceMappingURL=has-base-path.js.map
    // Can't trim the basePath if it has zero length!
    //# sourceMappingURL=remove-base-path.js.map
    // TypeScript trick to simulate opaque types, like in Flow.
    // TODO: As of now, we never include search params in the cache key because
    // per-segment prefetch requests are always static, and cannot contain search
    // params. But to support <Link prefetch={true}>, we will sometimes populate
    // the cache with dynamic data, so this will have to change.
    //# sourceMappingURL=cache-key.js.map
    // Utility type. Prefix<[A, B, C, D]> matches [A], [A, B], [A, B, C] etc.
    // To optimize successive lookups, we cache the last accessed keypath.
    // Although it's not encoded in the type, these are both null or
    // both non-null. It uses object equality, so to take advantage of this
    // optimization, you must pass the same array instance to each successive
    // method call, and you must also not mutate the array between calls.
    // Go through each level of keys until we find the entry that matches,
    // or create a new one if it doesn't already exist.
    // Found a match. Keep going.
    // No entry exists yet at this level. Create a new one.
    // Go through each level of keys until we find the entry that matches, or
    // return null if no match exists.
    // Found a match. Keep going.
    // No entry exists at this level.
    // Found a match. Delete it from the cache.
    // Check if we can garbage collect the entry.
    // Since this entry has no value, and also no child entries, we can
    // garbage collect it. Remove it from its parent, and keep garbage
    // collecting the parents until we reach a non-empty entry.
    // Unlike a `set` operation, these are no longer valid because the entry
    // itself is being modified, not just the value it contains.
    // We just removed the last entry in the parent map.
    // The parent node has no child entries, nor does it have a value
    // on itself. It can be garbage collected. Keep going.
    //# sourceMappingURL=tuple-map.js.map
    // purposes this is the byte size.
    // Already at the head
    // This is an insertion
    // Whenever we add an entry, we need to check if we've exceeded the
    // max size. We don't evict entries immediately; they're evicted later in
    // an asynchronous task.
    // This is a move. Remove from its current position.
    // Move to the front of the list
    // This is the first entry
    // Add to the front of the list
    // This is a separate function so that we can resize the entry after it's
    // already been inserted.
    // No longer part of LRU.
    // Remove from the list
    // Update the head
    // This was the last entry
    // Already deleted
    // Evict entries until we're at 90% capacity. We can assume this won't
    // infinite loop because even if `maxLruSize` were 0, eventually
    // `deleteNode` sets `head` to `null` when we run out entries.
    //# sourceMappingURL=lru.js.map
    /*#__PURE__*/
    // We use an LRU for memory management. We must update this whenever we add or
    // remove a new cache entry, or when an entry changes size.
    // TODO: I chose the max size somewhat arbitrarily. Consider setting this based
    // on navigator.deviceMemory, or some other heuristic. We should make this
    // customizable via the Next.js config, too.
    // 10 MB
    // TODO: We may eventually store segment entries in a tuple map, too, to
    // account for search params.
    // NOTE: Segments and Route entries are managed by separate LRUs. We could
    // combine them into a single LRU, but because they are separate types, we'd
    // need to wrap each one in an extra LRU node (to maintain monomorphism, at the
    // cost of additional memory).
    // 50 MB
    // Check if the entry is stale
    // Reuse the existing entry.
    // Since this is an access, move the entry to the front of the LRU.
    // Evict the stale entry from the cache.
    // First check if there's a non-intercepted entry. Most routes cannot be
    // intercepted, so this is the common case.
    // Found a match, and the route cannot be intercepted. We can reuse it.
    // There was no match. Check again but include the Next-Url this time.
    // Check if the entry is stale
    // Reuse the existing entry.
    // Since this is an access, move the entry to the front of the LRU.
    // Evict the stale entry from the cache.
    // Because the entry is pending, there's already a in-progress request.
    // Attach a promise to the entry that will resolve when the server responds.
    // There's already a promise we can use
    // First check if there's a non-intercepted entry. Most routes cannot be
    // intercepted, so this is the common case.
    // Found a match, and the route cannot be intercepted. We can reuse it.
    // There was no match. Check again but include the Next-Url this time.
    // Create a pending entry and spawn a request for its data.
    // If the request takes longer than a minute, a subsequent request should
    // retry instead of waiting for this one.
    //
    // When the response is received, this value will be replaced by a new value
    // based on the stale time sent from the server.
    // This is initialized to true because we don't know yet whether the route
    // could be intercepted. It's only set to false once we receive a response
    // from the server.
    // LRU-related fields
    // Stash the keypath on the entry so we know how to remove it from the map
    // if it gets evicted from the LRU.
    // Create a pending entry and spawn a request for its data.
    // LRU-related fields
    // Stash the keypath on the entry so we know how to remove it from the map
    // if it gets evicted from the LRU.
    // The LRU evicted this entry. Remove it from the map.
    // The LRU evicted this entry. Remove it from the map.
    // There were listeners for this entry. Resolve them with `null` to indicate
    // that the prefetch failed. It's up to the listener to decide how to handle
    // this case.
    // NOTE: We don't currently propagate the reason the prefetch was canceled
    // but we could by accepting a `reason` argument.
    // Resolve any listeners that were waiting for this data.
    // Free the promise for garbage collection.
    // NOTE: We don't currently propagate the reason the prefetch was canceled
    // but we could by accepting a `reason` argument.
    // This function is allowed to use async/await because it contains the actual
    // fetch that gets issued on a cache miss. Notice though that it does not
    // return anything; it writes the result to the cache entry directly, then
    // pings the scheduler to unblock the corresponding prefetch task.
    // 204 is a Cache miss. Though theoretically this shouldn't happen when
    // PPR is enabled, because we always respond to route tree requests, even
    // if it needs to be blockingly generated on demand.
    // Server responded with an error, or with a miss. We should still cache
    // the response, but we can try again after 10 seconds.
    // The server build does not match the client. Treat as a 404. During
    // an actual navigation, the router will trigger an MPA navigation.
    // TODO: Consider moving the build ID to a response header so we can check
    // it before decoding the response, and so there's one way of checking
    // across all response types.
    // This is a bit convoluted but it's taken from router-reducer and
    // fetch-server-response
    // Check whether the response varies based on the Next-Url header.
    // This route will never be intercepted. So we can use this entry for all
    // requests to this route, regardless of the Next-Url header. This works
    // because when reading the cache we always check for a valid
    // non-intercepted entry first.
    //
    // Re-key the entry. Since we're in an async task, we must first confirm
    // that the entry hasn't been concurrently modified by a different task.
    // We don't need to update the LRU because the entry is already in it.
    // But since we changed the keypath, we do need to update that, so we
    // know how to remove it from the map if it gets evicted from the LRU.
    // Something else modified this entry already. Since the re-keying is
    // just a performance optimization, we can safely skip it.
    // Either the connection itself failed, or something bad happened while
    // decoding the response.
    // This function is allowed to use async/await because it contains the actual
    // fetch that gets issued on a cache miss. Notice though that it does not
    // return anything; it writes the result to the cache entry directly.
    //
    // Segment fetches are non-blocking so we don't need to ping the scheduler
    // on completion.
    // Cache miss
    // Server responded with an error, or with a miss. We should still cache
    // the response, but we can try again after 10 seconds.
    // Wrap the original stream in a new stream that never closes. That way the
    // Flight client doesn't error if there's a hanging promise.
    // The server build does not match the client. Treat as a 404. During
    // an actual navigation, the router will trigger an MPA navigation.
    // TODO: Consider moving the build ID to a response header so we can check
    // it before decoding the response, and so there's one way of checking
    // across all response types.
    // So we use the stale time of the route.
    // Either the connection itself failed, or something bad happened while
    // decoding the response.
    // When PPR is enabled, prefetch streams may contain references that never
    // resolve, because that's how we encode dynamic data access. In the decoded
    // object returned by the Flight client, these are reified into hanging
    // promises that suspend during render, which is effectively what we want.
    // The UI resolves when it switches to the dynamic data stream
    // (via useDeferredValue(dynamic, static)).
    //
    // However, the Flight implementation currently errors if the server closes
    // the response before all the references are resolved. As a cheat to work
    // around this, we wrap the original stream in a new stream that never closes,
    // and therefore doesn't error.
    //
    // While processing the original stream, we also incrementally update the size
    // of the cache entry in the LRU.
    // Pass to the target stream and keep consuming the Flight response
    // from the server.
    // Incrementally update the size of the cache entry in the LRU.
    // NOTE: Since prefetch responses are delivered in a single chunk,
    // it's not really necessary to do this streamingly, but I'm doing it
    // anyway in case this changes in the future.
    // The server stream has closed. Exit, but intentionally do not close
    // the target stream.
    // Shim of Stage 4 Promise.withResolvers proposal
    //# sourceMappingURL=cache.js.map
    // This is intentionally low so that when a navigation happens, the browser's
    // internal network queue is not already saturated with prefetch requests.
    // Spawn a new prefetch task
    // Schedule an async task to process the queue.
    //
    // The main reason we process the queue in an async task is for batching.
    // It's common for a single JS task/event to trigger multiple prefetches.
    // By deferring to a microtask, we only process the queue once per JS task.
    // If they have different priorities, it also ensures they are processed in
    // the optimal order.
    // Either we already scheduled a task to process the queue, or there are
    // too many concurrent requests in progress. In the latter case, the
    // queue will resume processing once more bandwidth is available.
    /**
 * Checks if we've exceeded the maximum number of concurrent prefetch requests,
 * to avoid saturating the browser's internal network queue. This is a
 * cooperative limit — prefetch tasks should check this before issuing
 * new requests.
 */
    // TODO: Also check if there's an in-progress navigation. We should never
    // add prefetch requests to the network queue if an actual navigation is
    // taking place, to ensure there's sufficient bandwidth for render-blocking
    // data and resources.
    // When the scheduler spawns an async task, we don't await its result
    // directly. Instead, the async task writes its result directly into the
    // cache, then pings the scheduler to continue.
    //
    // This function only exists to prevent warnings about unhandled promises.
    // Notify the scheduler that we have more bandwidth, and can continue
    // processing tasks.
    // "Ping" a prefetch that's already in progress to notify it of new data.
    // Prefetch is already queued.
    // Unblock the task and requeue it.
    // We aim to minimize how often we read the current time. Since nearly all
    // functions in the prefetch scheduler are synchronous, we can read the time
    // once and pass it as an argument wherever it's needed.
    // Process the task queue until we run out of network bandwidth.
    // The task yielded because there are too many requests in progress.
    // Stop processing tasks until we have more bandwidth.
    // The task is blocked. It needs more data before it can proceed.
    // Keep the task out of the queue until the server responds.
    // Continue to the next task
    // The prefetch is complete. Continue to the next task.
    // Still pending. We can't start prefetching the segments until the route
    // tree has loaded.
    // Route tree failed to load. Treat as a 404.
    // Recursively fill in the segment tree.
    // Stop prefetching segments until there's more bandwidth.
    // Recursively ping the children.
    // Stop prefetching segments until there's more bandwidth.
    // Child yielded without finishing.
    // This segment and all its children have finished prefetching.
    // -----------------------------------------------------------------------------
    // The remainider of the module is a MinHeap implementation. Try not to put any
    // logic below here unless it's related to the heap algorithm. We can extract
    // this to a separate module if/when we need multiple kinds of heaps.
    // -----------------------------------------------------------------------------
    // Since the queue is a MinHeap, this should return a positive number if b is
    // higher priority than a, and a negative number if a is higher priority
    // than b.
    //
    // sortId is an incrementing counter assigned to prefetches. We want to
    // process the newest prefetches first.
    // Not currently used, but will be once we add the ability to update a
    // task's priority.
    // function heapSift(heap: Array<PrefetchTask>, node: PrefetchTask) {
    //   const index = node._heapIndex
    //   if (index !== -1) {
    //     const parentIndex = (index - 1) >>> 1
    //     const parent = heap[parentIndex]
    //     if (compareQueuePriority(parent, node) > 0) {
    //       // The parent is larger. Sift up.
    //       heapSiftUp(heap, node, index)
    //     } else {
    //       // The parent is smaller (or equal). Sift down.
    //       heapSiftDown(heap, node, index)
    //     }
    //   }
    // }
    // The parent is larger. Swap positions.
    // The parent is smaller. Exit.
    // If the left or right node is smaller, swap with the smaller of those.
    // Neither child is smaller. Exit.
    //# sourceMappingURL=scheduler.js.map
    // This href should not be prefetched.
    //# sourceMappingURL=prefetch.js.map
    /*#__PURE__*/
    // A missing children slot is the typical not-found case, so no need to warn
    //nextjs.org/docs/app/building-your-application/routing/parallel-routes#defaultjs\n\n';
    // Re-throw if error is not for 404
    /**
     * Handles reset of the error boundary when a navigation happens.
     * Ensures the error boundary does not stay enabled when navigating to a new page.
     * Approach of setState in render is safe as it checks the previous pathname and then overrides
     * it as outlined in https://react.dev/reference/react/useState#storing-information-from-previous-renders
     */
    // If there's no matched boundary in this layer, keep throwing the error by rendering the children
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // When we're rendering the missing params shell, this will return null. This
    // is because we won't be rendering any not found boundaries or error
    // boundaries for the missing params shell. When this runs on the client
    // (where these error can occur), we will get the correct pathname.
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=error-boundary.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=dev-root-http-access-fallback-boundary.js.map
    /**
MIT License

Copyright (c) 2015-present, Facebook, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
    /*#__PURE__*/
    // This file is based on https://github.com/facebook/create-react-app/blob/7b1a32be6ec9f99a6c9a3c66813f3ac09c4736b9/packages/react-dev-utils/formatWebpackMessages.js
    // It's been edited to remove chalk and CRA-specific logic
    // Cleans up webpack error messages.
    // TODO: Replace this once webpack 5 is stable
    // Strip Webpack-added headers off errors/warnings
    // https://github.com/webpack/webpack/blob/master/lib/ModuleError.js
    // Transform parsing error into syntax error
    // TODO: move this to our ESLint formatter?
    // Smoosh syntax errors (commonly found in CSS)
    // Clean up export errors
    // Remove leading newline
    // Cleans up verbose "module not found" messages for files and packages.
    // Add helpful message for users trying to use Sass for the first time
    // ./file.module.scss (<<loader info>>) => ./file.module.scss
    //nextjs.org/docs/messages/install-sass';
    // dispose of unhelpful stack trace
    // dispose of unhelpful stack trace following missing sass module
    // Internal stacks are generally useless so we strip them... with the
    // exception of stacks containing `webpack:` because they're normally
    // from user code generated by Webpack. For more information see
    // https://github.com/facebook/create-react-app/pull/1050
    // at ... ...:x:y
    // at <anonymous>
    // Remove duplicated newlines
    // Reassemble the message
    // Reorder errors to put the most relevant ones first.
    // Move the reactServerComponentsError to the top if it exists
    // If there are any syntax errors, show just them.
    //# sourceMappingURL=format-webpack-messages.js.map
    // Filter out duplicate errors
    // and UNHANDLED_REJECTION events might be dispatched between the
    // BEFORE_REFRESH and the REFRESH event. We want to keep those errors
    // around until the next refresh. Otherwise we run into a race
    // condition where those errors would be cleared on refresh completion
    // before they can be displayed.
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    //# sourceMappingURL=shared.js.map
    // throw away eval information that stacktrace-parser doesn't support
    // adapted from https://github.com/stacktracejs/error-stack-parser/blob/9f33c224b5d7b607755eb277f9d51fcdb7287e24/error-stack-parser.js#L59C33-L59C62
    //').replace(/\),.*$/g, ')');
    //' + distDir.concat(res.pop()) + url.search;
    //# sourceMappingURL=parse-stack.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=ShadowPortal.js.map
    /*#__PURE__*/
    // Do nothing if clicking ref's element or descendent elements
    //# sourceMappingURL=use-on-click-outside.js.map
    /*#__PURE__*/
    // Make HTMLElements with `role=link` accessible to be triggered by the
    // keyboard, i.e. [Enter].
    // Always true, but we do this for TypeScript:
    // safari will force itself as the active application when a background page triggers any sort of autofocus
    // this is a workaround to only set the dialog role if the document has focus
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=Dialog.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=DialogBody.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=DialogContent.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=DialogHeader.js.map
    //# sourceMappingURL=noop-template.js.map
    /* banner width: */
    /* calc(padding + banner width offset) */
    //# sourceMappingURL=styles.js.map
    //# sourceMappingURL=index.js.map
    /* eslint-disable */
    // @ts-nocheck
    // Copied from https://github.com/medialize/ally.js
    // License: MIT
    // Copyright (c) 2015 Rodney Rehm
    //
    // Entrypoint: ally.js/maintain/tab-focus
    /*#__PURE__*/
    /*#__PURE__*/
    // input may be undefined, selector-tring, Node, NodeList, HTMLCollection, array of Nodes
    // yes, to some extent this is a bad replica of jQuery's constructor function
    // instanceof Node - does not work with iframes
    // walk up to the root
    // https://developer.mozilla.org/docs/Web/API/Node.nodeType
    // NOTE: Firefox 34 does not expose ShadowRoot.host (but 37 does)
    // the root is attached to a fragment node that has a host
    // [elem, elem.parent, elem.parent.parent, …, html]
    // will not contain the shadowRoot (DOCUMENT_FRAGMENT_NODE) and shadowHost
    // IE does know support parentElement on SVGElement
    // Element.prototype.matches may be available at a different name
    // https://developer.mozilla.org/en/docs/Web/API/Element/matches
    // deep clone of original platform
    // operating system
    // layout
    // browser version (not layout engine version!)
    // operating system
    // layout
    // INTERNET EXPLORERS
    // remember what had focus to restore after test
    // remember scroll positions to restore after test
    // wrap tests in an element hidden from screen readers to prevent them
    // from announcing focus, which can be quite irritating to the user
    // options.element:
    //  {string} element name
    //  {function} callback(wrapper, document) to generate an element
    // options.mutate: (optional)
    //  {function} callback(element, wrapper, document) to manipulate element prior to focus-test.
    //             Can return DOMElement to define focus target (default: element)
    // options.validate: (optional)
    //  {function} callback(element, focusTarget, document) to manipulate test-result
    // make sure we operate on a clean slate
    // create dummy element to test focusability of
    // allow callback to further specify dummy element
    // and optionally define element to focus
    // element needs to be part of the DOM to be focusable
    // test if the element with invalid tabindex can be focused
    // validate test's result
    // restore focus to what it was before test and cleanup
    // IE10 does not redirect focus to <body> when the activeElement is removed
    // restore scroll position
    // this file is overwritten by `npm run build:pre`
    /*
    Facility to cache test results in localStorage.

    USAGE:
      cache.get('key');
      cache.set('key', 'value');
 */
    // allow reading from storage to retrieve previous support results
    // even while the document does not have focus
    // if the document does not have focus when tests are executed, focus() may
    // not be handled properly and events may not be dispatched immediately.
    // This can happen when a document is reloaded while Developer Tools have focus.
    // ignore
    // ignore
    // update the cache if ally or the user agent changed (newer version, etc)
    // see https://dev.w3.org/csswg/css-scoping-1/#deep-combinator
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1117572
    // https://code.google.com/p/chromium/issues/detail?id=446051
    // old syntax supported at least up to Chrome 41
    // https://code.google.com/p/chromium/issues/detail?id=446051
    ///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7';
    // https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-usemap
    // https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-usemap
    // fixes https://github.com/medialize/ally.js/issues/35
    // Firefox loads the DataURI asynchronously, causing a false-negative
    // https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-usemap
    // fixes https://github.com/medialize/ally.js/issues/35
    // Firefox loads the DataURI asynchronously, causing a false-negative
    // invalid media file can trigger warning in console, data-uri to prevent HTTP request
    // IE9 may throw "Error: Not implemented"
    ///ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ';
    // NOTE: https://github.com/medialize/ally.js/issues/35
    // https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-usemap
    // Children of focusable elements with display:flex are focusable in IE10-11
    // fieldset[tabindex=0][disabled] should not be focusable, but Blink and WebKit disagree
    // @specification https://www.w3.org/TR/html5/disabled-elements.html#concept-element-disabled
    // @browser-issue Chromium https://crbug.com/453847
    // @browser-issue WebKit https://bugs.webkit.org/show_bug.cgi?id=141086
    // elements with display:flex are focusable in IE10-11
    // form[tabindex=0][disabled] should be focusable as the
    // specification doesn't know the disabled attribute on the form element
    // @specification https://www.w3.org/TR/html5/forms.html#the-form-element
    // NOTE: https://github.com/medialize/ally.js/issues/35
    // fixes https://github.com/medialize/ally.js/issues/20
    // https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-ismap
    // NOTE: https://github.com/medialize/ally.js/issues/35
    // https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-usemap
    // iframe must be part of the DOM before accessing the contentWindow is possible
    // create the iframe's default document (<html><head></head><body></body></html>)
    // Firefox allows *any* value and treats invalid values like tabindex="-1"
    // @browser-issue Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054
    // force layout in Chrome 49, otherwise the element won't be focusable
    /* eslint-disable no-unused-vars */
    /* eslint-enable no-unused-vars */
    // Note: IE10 on BrowserStack does not like this test
    // Note: IE10 on BrowserStack does not like this test
    // Firefox seems to be handling the object creation asynchronously and thereby produces a false negative test result.
    // Because we know Firefox is able to focus object elements referencing SVGs, we simply cheat by sniffing the user agent string
    // Every Environment except IE9 considers SWF objects focusable
    // focus the <img>, not the <div>
    // see https://jsbin.com/nenirisage/edit?html,js,console,output
    // take care of focus in validate();
    // Firefox requires this test to focus the <fieldset> first, while this is not necessary in
    // https://jsbin.com/nenirisage/edit?html,js,console,output
    // https://github.com/medialize/ally.js/issues/21
    // https://github.com/medialize/ally.js/issues/21
    // https://github.com/medialize/ally.js/issues/21
    // Constructs <foreignObject width="30" height="30"><input type="text"/></foreignObject>
    // without raising a Trusted Types violation
    //www.w3.org/2000/svg', 'foreignObject');
    // Edge13, Edge14: foreignObject focus hack
    // https://jsbin.com/kunehinugi/edit?html,js,output
    // https://jsbin.com/fajagi/3/edit?html,js,output
    // inject and focus an <input> element into the SVG element to receive focus
    // upon disabling the activeElement, IE and Edge
    // will not shift focus to <body> like all the other
    // browsers, but instead find the first focusable
    // ancestor and shift focus to that
    // clean up
    //www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">' + element + '</svg>';
    // Safari 8's querySelector() can't identify foreignObject, but getElementsByTagName() can
    // Firefox seems to be handling the SVG-document-in-iframe creation asynchronously
    // and thereby produces a false negative test result. Thus the test is pointless
    // and we resort to UA sniffing once again.
    // see http://jsbin.com/vunadohoko/1/edit?js,console,output
    // Firefox allows *any* value and treats invalid values like tabindex="-1"
    // @browser-issue Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054
    // IE9 has a problem replacing TBODY contents with innerHTML.
    // https://stackoverflow.com/a/8097055/515124
    // element.innerHTML = '<tr><td>cell</td></tr>';
    // invalid media file can trigger warning in console, data-uri to prevent HTTP request
    // IE9 may throw "Error: Not implemented"
    // https://jsbin.com/vafaba/3/edit?html,js,console,output
    // https://www.w3.org/TR/html5/infrastructure.html#rules-for-parsing-integers
    // NOTE: all browsers agree to allow trailing spaces as well
    // Edge 14 has a capitalization problem on SVG elements,
    // see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/9282058/
    // older Firefox and Internet Explorer don't support tabindex on SVG elements
    // @browser-issue Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054
    // an element matches the tabindex selector even if its value is invalid
    // IE11 parses tabindex="" as the value "-32768"
    // @browser-issue Trident https://connect.microsoft.com/IE/feedback/details/1072965
    // Edge 14 has a capitalization problem on SVG elements,
    // see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/9282058/
    // @browser-issue Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054
    // this is a shared utility file for focus-relevant.js and tabbable.js
    // separate testing of this file's functions is not necessary,
    // as they're implicitly tested by way of the consumers
    // https://www.w3.org/TR/1999/WD-css3-userint-19990916#user-modify
    // https://github.com/medialize/ally.js/issues/17
    // Internet Explorer advances scrollable containers and bodies to focusable
    // only if the scrollable container is <div> or <span> - this does *not*
    // happen for <section>, <article>, …
    // a ShadowDOM host receives focus when the focus moves to its content
    // input[type="hidden"] supports.cannot be focused
    // specifics filtered in is/focusable
    // specifics filtered in is/focusable
    // specifics filtered in is/focusable
    // object[usemap] is not focusable in any browser
    // object[type="image/svg+xml"] is not focusable in Internet Explorer
    // object[type="application/x-shockwave-flash"] is not focusable in Internet Explorer 9
    // browsing context containers
    // embed is considered focus-relevant but not focusable
    // see https://github.com/medialize/ally.js/issues/82
    // also see CSS property user-modify below
    // Gecko, Trident and Edge do not allow an image with an image map and tabindex to be focused,
    // it appears the tabindex is overruled so focus is still forwarded to the <map>
    // IE10-11 supports.can focus <table> and <td>
    // IE10-11 supports.can focus <fieldset>
    // <use> cannot be made focusable by adding a tabindex attribute anywhere but Blink and WebKit
    // <use> can only be made focusable in Blink and WebKit
    // Firefox 51 and 52 treat any natively tabbable SVG element with
    // tabindex="-1" as tabbable and everything else as inert
    // see https://bugzilla.mozilla.org/show_bug.cgi?id=1302340
    // Internet Explorer understands the focusable attribute introduced in SVG Tiny 1.2
    // Internet Explorer understands the focusable attribute introduced in SVG Tiny 1.2
    // https://www.w3.org/TR/html5/editing.html#sequential-focus-navigation-and-the-tabindex-attribute
    // IE10-11 considers the <img> in <a href><img ismap> focusable
    // https://github.com/medialize/ally.js/issues/20
    // https://github.com/medialize/ally.js/issues/21
    // Internet Explorer does will consider the scrollable area focusable
    // if the element is a <div> or a <span> and it is in fact scrollable,
    // regardless of the CSS overflow property
    // Firefox requires proper overflow setting, IE does not necessarily
    // https://developer.mozilla.org/docs/Web/CSS/overflow
    // elements with display:flex are focusable in IE10-11
    // scrollable bodies are focusable Internet Explorer
    // https://github.com/medialize/ally.js/issues/21
    // Children of focusable elements with display:flex are focusable in IE10-11
    // NOTE: elements marked as inert are not focusable,
    // but that property is not exposed to the DOM
    // https://www.w3.org/TR/html5/editing.html#inert
    // bind exceptions to an iterator callback
    // provide isFocusRelevant(context) as default iterator callback
    // attempt to use native or polyfilled Array#findIndex first
    // shortcut if the array is empty
    // otherwise loop over array
    // works on <object> and <iframe>
    // works on <object> and <iframe>
    // works on <object> and <iframe> that contain SVG
    // SecurityError: Failed to read the 'contentDocument' property from 'HTMLObjectElement'
    // also IE may throw member not found exception e.g. on <object type="image/png">
    // if there is no parent browsing context,
    // we're not going to get a frameElement either way
    // see https://developer.mozilla.org/docs/Web/API/Window/frameElement
    // does not work within <embed> anywhere, and not within in <object> in IE
    // https://www.w3.org/TR/html5/rendering.html#being-rendered
    // <area> is not rendered, but we *consider* it visible to simplfiy this function's usage
    // display:none is not visible (optimized away at layout)
    // https://github.com/jquery/jquery-ui/blob/master/ui/core.js#L109-L114
    // NOTE: a nested element can reverse visibility:hidden|collapse by explicitly setting visibility:visible
    // NOTE: visibility can be ["", "visible", "hidden", "collapse"]
    // there is no hidden element
    // there is no visible element (but a hidden element)
    // there is a hidden element and it's closer than the first visible element
    // there may be a hidden element, but the closest element is visible
    // "content children" of a closed details element are not visible
    // in Internet Explorer <audio> has a default display: none, where others have display: inline
    // but IE allows focusing <audio style="display:none">, but not <div display:none><audio>
    // this is irrelevant to other browsers, as the controls attribute is required to make <audio> focusable
    // elements within a browsing context are affected by the
    // browsing context host element's visibility and tabindex
    // bind exceptions to an iterator callback
    // provide isVisible(context) as default iterator callback
    // apparently getElementsByName() also considers id attribute in IE & opera
    // https://developer.mozilla.org/docs/Web/API/Document/getElementsByName
    // NOTE: image maps can also be applied to <object> with image content,
    // but no browser supports this at the moment
    // HTML5 specifies HTMLMapElement.images to be an HTMLCollection of all
    // <img> and <object> referencing the <map> element, but no browser implements this
    //   https://www.w3.org/TR/html5/embedded-content-0.html#the-map-element
    //   https://developer.mozilla.org/docs/Web/API/HTMLMapElement
    // the image must be valid and loaded for the map to take effect
    // https://developer.mozilla.org/docs/Web/HTML/Element/map
    // https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-usemap
    // https://github.com/jquery/jquery-ui/blob/master/ui/core.js#L88-L107
    // Blink and WebKit do not consider <area tabindex="-1" href="#void"> focusable
    // Firefox only allows fully loaded images to reference image maps
    // https://stereochro.me/ideas/detecting-broken-images-js
    // Firefox supports.can focus area elements even if they don't have an href attribute
    // Internet explorer supports.can focus area elements without href if either
    // the area element or the image element has a tabindex attribute
    // https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-usemap
    // https://www.w3.org/TR/html5/disabled-elements.html#concept-element-disabled
    // treat ally's element/disabled like the DOM native element.disabled
    // non-form elements do not support the disabled attribute
    // the element itself is disabled
    // a parental <fieldset> is disabld and inherits the state onto this element
    // a parental <form> is disabld and inherits the state onto this element
    // iframe[tabindex="-1"] and object[tabindex="-1"] inherit the
    // tabbable demotion onto elements of their browsing contexts
    // Firefox cannot focus, but tab to: label[tabindex=0]
    // SVG Elements were keyboard focusable but not script focusable before Firefox 51.
    // Firefox 51 added the focus management DOM API (.focus and .blur) to SVGElement,
    // see https://bugzilla.mozilla.org/show_bug.cgi?id=778654
    // any focusable child of <svg> cannot be focused, but tabbed to
    // bind exceptions to an iterator callback
    // provide isOnlyTabbable(context) as default iterator callback
    // embed is considered focus-relevant but not focusable
    // see https://github.com/medialize/ally.js/issues/82
    // ShadowDOM host elements *may* receive focus
    // even though they are not considered focuable
    // <label tabindex="0"> is only tabbable in Firefox, not script-focusable
    // there's no way to make an element focusable other than by adding a tabindex,
    // and focus behavior of the label element seems hard-wired to ignore tabindex
    // in some browsers (like Gecko, Blink and WebKit)
    // Internet Explorer understands the focusable attribute introduced in SVG Tiny 1.2
    // Gecko, Trident and Edge do not allow an image with an image map and tabindex to be focused,
    // it appears the tabindex is overruled so focus is still forwarded to the <map>
    // all <area>s are considered relevant,
    // but only the valid <area>s are focusable
    // some elements may be keyboard focusable, but not script focusable
    // elements that are not rendered, cannot be focused
    // WebKit and Blink can focus content in hidden <iframe> and <object>
    // Blink allows focusing the object element, even if it has visibility: hidden;
    // @browser-issue Blink https://code.google.com/p/chromium/issues/detail?id=586191
    // WebKit can not focus content in <object> if it doesn't have dimensions
    // bind exceptions to an iterator callback
    // provide isFocusRelevant(context) as default iterator callback
    // see https://developer.mozilla.org/docs/Web/API/NodeFilter
    // return ShadowRoot elements regardless of them being focusable,
    // so they can be walked recursively later
    // finds elements that could have been found by document.querySelectorAll()
    // IE requires a function, Browsers require {acceptNode: function}
    // see http://www.bennadel.com/blog/2607-finding-html-comment-nodes-in-the-dom-using-treewalker.htm
    // see https://developer.mozilla.org/docs/Web/API/Document/createTreeWalker
    // add context if requested and focusable
    // NOTE: this selector MUST *never* be used directly,
    // https://www.w3.org/TR/html5/editing.html#sequential-focus-navigation-and-the-tabindex-attribute
    // IE11 supports.can focus <table> and <td>
    // IE11 supports.can focus <fieldset>
    // Namespace problems of [xlink:href] explained in https://stackoverflow.com/a/23047888/515124
    // svg a[*|href] does not match in IE9, but since we're filtering
    // through is/focusable we can include all <a> from SVG
    // may behave as 'svg, svg *,' in chrome as *every* svg element with a focus event listener is focusable
    // navigational elements
    // validity determined by is/valid-area.js
    // validity determined by is/disabled.js
    // browsing context containers
    // interactive content
    // validity determined by is/valid-tabindex.js
    // editing hosts
    // where ShadowDOM is supported, we also want the shadowed focusable elements (via ">>>" or "/deep/")
    // the selector potentially matches more than really is focusable
    // add context if requested and focusable
    // Internet Explorer 11 considers fieldset, table, td focusable, but not tabbable
    // Internet Explorer 11 considers body to have [tabindex=0], but does not allow tabbing to it
    // External keyboard support worked fine in CHrome 42, but stopped working in Chrome 45.
    // The on-screen keyboard does not provide a way to focus the next input element (like iOS does).
    // That leaves us with no option to advance focus by keyboard, ergo nothing is tabbable (keyboard focusable).
    // iOS only does not consider anything from another browsing context keyboard focusable
    // iframe[tabindex="-1"] and object[tabindex="-1"] inherit the
    // tabbable demotion onto elements of their browsing contexts
    // Blink and WebKit consider elements in hidden browsing contexts focusable, but not tabbable
    // Webkit and Blink don't consider anything in <object> tabbable
    // Blink fixed that fixed in Chrome 54, Opera 41
    // Edge 14+ considers <a xlink:href="…" tabindex="-1"> keyboard focusable
    // if the element is in a nested browsing context
    // NOTE: Firefox 31 considers [contenteditable] to have [tabindex=-1], but allows tabbing to it
    // fixed in Firefox 40 the latest - https://bugzilla.mozilla.org/show_bug.cgi?id=1185657
    // tabbing can still be disabled by explicitly providing [tabindex="-1"]
    // iOS only considers a hand full of elements tabbable (keyboard focusable)
    // this holds true even with external keyboards
    // In Chrome and Safari 9 the <use> element is keyboard focusable even for tabindex="-1"
    // in Trident and Gecko SVGElement does not handle the tabIndex property properly
    // Firefox 51 and 52 treat any natively tabbable SVG element with
    // tabindex="-1" as tabbable and everything else as inert
    // see https://bugzilla.mozilla.org/show_bug.cgi?id=1302340
    // older Internet Explorers consider <svg> keyboard focusable
    // unless they have focsable="false", but then they wouldn't
    // be focusable and thus not even reach this filter
    // elements that have [focusable] are automatically keyboard focusable regardless of the attribute's value
    // elements that have [focusable] are automatically keyboard focusable regardless of the attribute's value
    // In Internet Explorer the <audio> element is focusable, but not tabbable, and tabIndex property is wrong
    // In Chrome <audio controls tabindex="-1"> remains keyboard focusable
    // In Internet Explorer and Edge the <video> element is focusable, but not tabbable, and tabIndex property is wrong
    // In Chrome and Firefox <video controls tabindex="-1"> remains keyboard focusable
    // In all Blink and WebKit based browsers <embed> and <object> are never keyboard focusable, even with tabindex="0" set
    // In Internet Explorer all iframes are only focusable
    // In WebKit, Blink and Gecko iframes may be tabbable depending on content.
    // Since we can't reliably investigate iframe documents because of the
    // SameOriginPolicy, we're declaring everything only focusable.
    // Firefox considers scrollable containers keyboard focusable,
    // even though their tabIndex property is -1
    // IE and Edge degrade <area> to script focusable, if the image
    // using the <map> has been given tabindex="-1"
    // prevent being swallowed by the overzealous isScrollableContainer() below
    // IE considers scrollable containers script focusable only,
    // even though their tabIndex property is 0
    // IE considers scrollable bodies script focusable only,
    // Children of focusable elements with display:flex are focusable in IE10-11,
    // even though their tabIndex property suggests otherwise
    // value of tabindex takes precedence
    // https://www.w3.org/WAI/PF/aria-practices/#focus_tabindex
    // bind exceptions to an iterator callback
    // provide isTabbable(context) as default iterator callback
    // sorts a list of elements according to their order in the DOM
    // find the first element that comes AFTER the target element
    // instead of mutating the elements list directly, remember position and map
    // to inject later, when we can do this more efficiently
    // element is not in target list
    // there is no successor in the tabsequence,
    // meaning the image must be the last element
    // allow the consumer to replace the injected element
    // we can't inject zero elements
    // remember the number of elements we have already injected
    // so we account for the caused index offset
    // make sure that we insert the elements in sequence,
    // otherwise the offset compensation won't work
    // array.splice has an annoying function signature :(
    // operate on a copy so we don't mutate the original array
    // make sure the elements we're injecting are provided in DOM order
    // find the offsets within the target array (list) at which to inject
    // each individual element (from elements)
    // actually inject the elements into the target array at the identified positions
    // the map is not defined within the context, so we
    // have to go find it elsewhere in the document
    // if there is no map, the img[usemap] wasn't doing anything anyway
    // remove all <area> elements from the elements list,
    // but put them the map for later retrieval
    // images - unless they are focusable themselves, likely not
    // part of the elements list, so we'll have to find them and
    // sort them into the elements list manually
    // remove all <area> elements from the elements list,
    // but put them the map for later retrieval
    // the context does not contain any <area>s so no need
    // to replace anything, just remove any maps
    // document context we're working with
    // callback that sorts an array of elements
    // reference to create unique IDs for each ShadowHost
    // reference map for child-ShadowHosts of a ShadowHost
    // reference map for child-ShadowHost of the document
    // reference map for ShadowHosts
    // reference map for tabbable elements of a ShadowHost
    // remember which hosts we have to sort within later
    // make the ShadowHost identifiable (see cleanup() for undo)
    // hosts may contain other hosts
    // remove those identifers we put on the ShadowHost to avoid using Map()
    // no shadowed content found, no need to continue
    // https://developer.mozilla.org/docs/Web/API/HTMLElement.tabIndex
    // elements with tabIndex "0" (including tabbableElements without tabIndex) should be navigated in the order they appear.
    // elements with a positive tabIndex:
    //   Elements that have identical tabIndexes should be navigated in the order they appear.
    //   Navigation proceeds from the lowest tabIndex to the highest tabIndex.
    // NOTE: sort implementation may be unstable and thus mess up DOM order,
    // that's why we build a map that's being sorted instead. If we were able to rely
    // on a stable sorting algorithm, sortTabindex() could be as simple as
    // elements.sort(function(a, b) { return a.tabIndex - b.tabIndex; });
    // at this time Chrome does not use a stable sorting algorithm
    // see http://blog.rodneyrehm.de/archives/14-Sorting-Were-Doing-It-Wrong.html#stability
    // NOTE: compareDocumentPosition seemed like more overhead than just sorting this with buckets
    // https://developer.mozilla.org/docs/Web/API/Node.compareDocumentPosition
    // in Trident and Gecko SVGElement does not know about the tabIndex property
    // extract elements that don't need sorting
    // create sortable bucket for dom-order-preservation of elements with the same tabIndex
    // maintain a list of unique tabIndexes
    // sort element into the proper bucket
    // element moved to sorting map, so not "normal" anymore
    // sort the tabindex ascending,
    // then resolve them to their appropriate buckets,
    // then flatten the array of arrays to an array
    // Some browsers sort <area> in DOM order, some place the <area>s
    // where the <img> referecing them would've been in DOM order.
    // https://github.com/medialize/ally.js/issues/5
    // sort tabindex localized to shadow dom
    // see https://github.com/medialize/ally.js/issues/6
    // if we include the context itself, it has to be the first
    // element of the sequence
    // codes mostly cloned from https://github.com/keithamus/jwerty/blob/master/jwerty.js
    // deliberately not exposing characters like <,.-#* because they vary *wildly*
    // across keyboard layouts and may cause various problems
    // (e.g. "*" is "Shift +" on a German Mac keyboard)
    // (e.g. "@" is "Alt L" on a German Mac keyboard)
    // Element Focus
    // Navigation
    // Action
    // Modifier
    // in firefox: 224
    // on mac (chrome): meta-left=91, meta-right=93
    // on win (IE11): meta-left=91, meta-right=92
    // Content Manipulation
    // the same logical key may be identified through different keyCodes
    // Function keys (112 - 137)
    // NOTE: not every keyboard knows F13+
    // Number keys (48-57, numpad 96-105)
    // NOTE: not every keyboard knows num-0+
    // Latin characters (65 - 90)
    // we've already covered the all-in operator
    // we want the modifier pressed
    // we don't care if the modifier is pressed
    // we do not want the modifier pressed
    // compensate for the modifier's operator
    // returns true on match
    // returns true on mismatch
    // Node.compareDocumentPosition is available since IE9
    // see https://developer.mozilla.org/docs/Web/API/Node.compareDocumentPosition
    // callback returns true when element is contained by parent or is the parent suited for use with Array.some()
    /*
  USAGE:
    var isChildOf = getParentComparator({parent: someNode});
    listOfElements.some(isChildOf)
*/
    // Bug 286933 - Key events in the autocomplete popup should be hidden from page scripts
    // @browser-issue Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=286933
    // ignore elements within the exempted sub-trees
    // Make sure the supports tests are run before intercepting the Tab key,
    // or IE10 and IE11 will fail to process the first Tab key event. Not
    // limiting this warm-up to IE because it may be a problem elsewhere, too.
    // Safari on OSX may require ALT+TAB to reach links,
    // see https://github.com/medialize/ally.js/issues/146
    // we're completely taking over the Tab key handling
    // wrap around first to last, last to first
    // find current position in tabsequence
    // redirect to first as we're not in our tabsequence
    // shift focus to previous/next element in the sequence
    //# sourceMappingURL=maintain--tab-focus.js.map
    //# sourceMappingURL=body-locker.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=Overlay.js.map
    //# sourceMappingURL=index.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    // If link matcher is present but the link doesn't match, don't turn it into a link
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=index.js.map
    //# sourceMappingURL=use-open-in-editor.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=EditorLink.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    // Grab the lines at the end containing the files
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=Terminal.js.map
    //# sourceMappingURL=index.js.map
    //# sourceMappingURL=styles.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //nextjs.org/docs/messages/version-staleness",
    //# sourceMappingURL=VersionStalenessInfo.js.map
    //# sourceMappingURL=index.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=BuildError.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=CloseIcon.js.map
    /*#__PURE__*/
    // Unlock focus for browsers like Firefox, that break all user focus if the
    // currently focused item becomes disabled.
    // Always true, but we do this for TypeScript:
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=LeftRightDialogHeader.js.map
    //# sourceMappingURL=styles.js.map
    //# sourceMappingURL=index.js.map
    //# sourceMappingURL=styles.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=Toast.js.map
    //# sourceMappingURL=index.js.map
    //# sourceMappingURL=webpack-module-path.js.map
    // TODO: merge this section into ignoredList handling
    //' || ((_source_file = source.file) == null ? void 0 : _source_file.match(/^node:/)) || ((_source_file1 = source.file) == null ? void 0 : _source_file1.match(/https?:\/\//))) {
    // Skip URL parsing for webpack internal file paths.
    // Strip the origin for same-origin scripts.
    // URLs can be valid without an `origin`, so long as they have a
    // `protocol`. However, `origin` is preferred.
    // Strip query string information as it's typically too verbose to be
    // meaningful.
    //# sourceMappingURL=stack-frame.js.map
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    //# sourceMappingURL=get-error-by-type.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // Strip leading spaces out of the code frame:
    // Find the minimum length of leading spaces after `|` in the code frame
    // When the minimum length of leading spaces is greater than 1, remove them
    // from the code frame to help the indentation looks better when there's a lot leading spaces.
    // TODO: make the caret absolute
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=CodeFrame.js.map
    //# sourceMappingURL=index.js.map
    // TODO: ability to expand resolved frames
    // TODO: render error or external indicator
    // Format method to strip out the webpack layer prefix.
    // e.g. (app-pages-browser)/./app/page.tsx -> ./app/page.tsx
    //, '');
    // Formatted file source could be empty. e.g. <anonymous> will be formatted to empty string,
    // we'll skip rendering the frame in this case.
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=CallStackFrame.js.map
    /*#__PURE__*/
    /* hide but text are still accessible in DOM */
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // if the default displayed ignored frames count is equal equal to the total frames count, hide the button
    /*#__PURE__*/
    //# sourceMappingURL=index.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=CollapseIcon.js.map
    // For text mismatch, mismatched text will take 2 rows, so we display 4 rows of component stack
    // React 19 unified mismatch
    // trim spaces after sign
    /*#__PURE__*/
    // If it's matched userland component or it's ... we will keep the component stack in diff
    /*#__PURE__*/
    /*#__PURE__*/
    // In general, if it's not collapsed, show the whole diff
    /*#__PURE__*/
    // [child index, parent index]
    // Reverse search for the child tag
    // Start searching parent tag from child tag above
    // When component is the server or client tag name, highlight it
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // Hydration mismatch: text or text-tag
    // hydration type is "text", represent [server content, client content]
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // hydration type is "text-in-tag", represent [parent tag, mismatch content]
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=component-stack-pseudo-html.js.map
    /*#__PURE__*/
    // This would be simpler with useActionState but we need to support React 18 here.
    // React 18 also doesn't have async transitions.
    // TODO: `dispatch` from `useActionState` is not reactive.
    // Remove from dependencies once https://github.com/facebook/react/pull/29665 is released.
    // Additional console.error to get the stack.
    // Assign default icon
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=index.js.map
    // Inline this helper to avoid widely used across the codebase,
    // as for this feature the Chrome detector doesn't need to be super accurate.
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //nextjs.org/docs/app/building-your-application/configuring/debugging#server-side-code",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=nodejs-inspector.js.map
    //nextjs.org');
    // If the error is:
    // - hydration warning
    // - captured console error or unhandled rejection
    // skip displaying the error name
    // If it's replayed error, display the environment name
    /*#__PURE__*/
    /*#__PURE__*/
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    // Ensure errors are displayed in the order they occurred in:
    // Check for duplicate errors
    // We don't care if the desired error changed while we were resolving,
    // thus we're not tracking it using a ref. Once the work has been done,
    // we'll store it.
    // TODO: handle this, though an edge case
    // Reset component state when there are no errors to be displayed.
    // This should never happen, but lets handle it.
    // This component shouldn't be rendered with no errors, but if it is, let's
    // handle it gracefully by rendering nothing.
    // TODO: better loading state
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // remove the %s for stack
    // If there's still a %s at the end, remove it
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //nextjs.org/docs/messages/react-hydration-error"
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=Errors.js.map
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    //# sourceMappingURL=LightningBolt.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // When dismissed, we hide the indicator for 1 hour. Store the
    // timestamp for when to show it again.
    /*#__PURE__*/
    //# sourceMappingURL=StaticIndicator.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=Base.js.map
    //# sourceMappingURL=styles.js.map
    //# sourceMappingURL=styles.js.map
    //# sourceMappingURL=styles.js.map
    /*#__PURE__*/
    //# sourceMappingURL=ComponentStyles.js.map
    /*#__PURE__*/
    /* the direction property is not reset by 'all' */
    /*!\n         * Bootstrap Reboot v4.4.1 (https://getbootstrap.com/)\n         * Copyright 2011-2019 The Bootstrap Authors\n         * Copyright 2011-2019 Twitter, Inc.\n         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n         * Forked from Normalize.css, licensed MIT (https://github.com/necolas/normalize.css/blob/master/LICENSE.md)\n         */
    /*#__PURE__*/
    //# sourceMappingURL=CssReset.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //nextjs.org/docs/messages/missing-root-layout-tags"
    //# sourceMappingURL=root-layout-missing-tags-error.js.map
    //# sourceMappingURL=runtime-error-handler.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=ReactDevOverlay.js.map
    // assetPrefix is a url
    // since normalized asset prefix is ensured to be a URL format,
    // we can safely replace the protocol
    //" + hostname + (port ? ":" + port : '') + prefix;
    //# sourceMappingURL=get-socket-url.js.map
    // Until the dynamic import resolves, queue any turbopack messages which will be replayed.
    // TODO(WEB-1589): only install if `process.turbopack` set.
    // Replay all Turbopack messages before we were able to establish the HMR client.
    // Taken from on-demand-entries-client.js
    //# sourceMappingURL=use-websocket.js.map
    /*#__PURE__*/
    /**
 * Get the type of frame line based on the location
 */
    //')) {
    //')) {
    //') || location.startsWith('https://')) {
    //')) {
    // When the location is a URL we only show the file
    // TODO: Resolve http(s) URLs through sourcemaps
    // TODO: support safari stack trace
    // Get component and file from the component stack line
    // Stop parsing the component stack if we reach a Next.js component
    //# sourceMappingURL=parse-component-stack.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // Whether the page (tab) was hidden at the time the event occurred.
    // This can impact the accuracy of the event's timing.
    // There is a newer version of the code available.
    // Update last known compilation hash.
    /**
 * Is there a newer version of this code available?
 * For webpack: Check if the hash changed compared to __webpack_hash__
 * For Turbopack: Always true because it doesn't have __webpack_hash__
 */
    // Webpack disallows updates in other states.
    // @ts-expect-error module.hot exists
    // @ts-expect-error module.hot exists
    // @ts-expect-error module.hot exists
    // Attempt to update code on the fly, fall back to a hard reload.
    // Maybe we want to do something.
    // While we were updating, there was a new update! Do it again.
    // https://webpack.js.org/api/hot-module-replacement/#check
    // @ts-expect-error module.hot exists
    /* autoApply */
    // https://webpack.js.org/api/hot-module-replacement/#apply
    // @ts-expect-error module.hot exists
    /** Handles messages from the sevrer for the App Router. */
    // "Massage" webpack messages.
    // Only show the first error.
    // Also log them to the console.
    // Do not attempt to reload now.
    // We will reload on next success instead.
    // handle initial status on receiving manifest
    // navigation is handled in useEffect for pathname changes
    // as we'll receive the updated manifest before usePathname
    // triggers for new value
    // the indicator can be hidden for an hour.
    // check if it's still hidden
    // Is undefined when it's a 'built' event
    // Compilation with errors (e.g. syntax error or missing modules).
    // Print warnings to the console.
    // No early return here as we need to apply modules in the same way between warnings only and compiles without warnings
    // Handle hot updates
    // TODO-APP: make server component change more granular
    // TODO-APP: potentially only refresh if the currently viewed page was added/removed.
    // Component stack is added to the error in use-error-handler in case there was a hydration error
    // We don't want access of the pathname for the dev tools to trigger a dynamic
    // access (as the dev overlay will never be present in production).
    // this conditional is only for dead-code elimination which
    // isn't a runtime conditional only build-time so ignore hooks rule
    // eslint-disable-next-line react-hooks/rules-of-hooks
    // Most likely a SecurityError, because of an unavailable localStorage
    /*#__PURE__*/
    //# sourceMappingURL=hot-reloader-client.js.map
    /*#__PURE__*/
    // Don't prefetch for bots as they don't navigate.
    // TODO: Does this need to throw or can we just console.error instead? Does
    // anyone rely on this throwing? (Seems unlikely.)
    // Don't prefetch during development (improves compilation performance)
    // Identifier is shortened intentionally.
    // __NA is used to identify if the history entry can be handled by the app-router.
    // __N is used to identify if the history entry can be handled by the old router.
    // Skip pushing an additional history entry if the canonicalUrl is the same as the current url.
    // This mirrors the browser behavior for normal navigation.
    // This intentionally mutates React state, pushRef is overwritten to ensure additional push/replace calls do not trigger an additional history entry.
    /**
 * Server response that only patches the cache and tree.
 */
    // If this segment has a `prefetchHead`, it's the statically prefetched data.
    // We should use that on initial render instead of `head`. Then we'll switch
    // to `head` when the dynamic response streams in.
    // If no prefetch data is available, then we go straight to rendering `head`.
    // We use `useDeferredValue` to handle switching between the prefetched and
    // final values. The second argument is returned on initial render, then it
    // re-renders with the first argument.
    //
    // @ts-expect-error The second argument to `useDeferredValue` is only
    // available in the experimental builds. When its disabled, it will always
    // return `head`.
    /**
 * The global router that wraps the application components.
 */
    // Add memoized pathname/query for useSearchParams and usePathname.
    //n' : window.location.href);
    // This is turned into a readonly class in `useSearchParams`
    /**
   * The app router that is exposed through `useRouter`. It's only concerned with dispatching actions to the reducer, does not hold state.
   */
    // Use the old prefetch implementation.
    // Exists for debugging purposes. Don't use in application code.
    // eslint-disable-next-line react-hooks/rules-of-hooks
    // This hook is in a conditional but that is ok because `process.env.NODE_ENV` never changes
    // eslint-disable-next-line react-hooks/rules-of-hooks
    // Add `window.nd` for debugging purposes.
    // This is not meant for use in applications as concurrent rendering will affect the cache/tree/router.
    // @ts-ignore this is for debugging
    // If the app is restored from bfcache, it's possible that
    // pushRef.mpaNavigation is true, which would mean that any re-render of this component
    // would trigger the mpa navigation logic again from the lines below.
    // This will restore the router to the initial state in the event that the app is restored from bfcache.
    // Clear the pendingMpaPath value so that a subsequent MPA navigation to the same URL can be triggered.
    // This is necessary because if the browser restored from bfcache, the pendingMpaPath would still be set to the value
    // of the last MPA navigation.
    // Ensure that any redirect errors that bubble up outside of the RedirectBoundary
    // are caught and handled by the router.
    // When mpaNavigation flag is set do a hard navigation to the new url.
    // Infinitely suspend because we don't actually want to rerender any child
    // components with the new URL and any entangled state updates shouldn't
    // commit either (eg: useTransition isPending should stay true until the page
    // unloads).
    //
    // This is a side effect in render. Don't try this at home, kids. It's
    // probably safe because we know this is a singleton component and it's never
    // in <Offscreen>. At least I hope so. (It will run twice in dev strict mode,
    // but that's... fine?)
    // if there's a re-render, we don't want to trigger another redirect if one is already in flight to the same URL
    // TODO-APP: Should we listen to navigateerror here to catch failed
    // navigations somehow? And should we call window.stop() if a SPA navigation
    // should interrupt an MPA one?
    // Ensure the canonical URL in the Next.js Router is updated when the URL is changed so that `usePathname` and `useSearchParams` hold the pushed values.
    /**
     * Patch pushState to ensure external changes to the history are reflected in the Next.js Router.
     * Ensures Next.js internal history state is copied to the new history entry.
     * Ensures usePathname and useSearchParams hold the newly provided url.
     */
    // Avoid a loop when Next.js internals trigger pushState/replaceState
    /**
     * Patch replaceState to ensure external changes to the history are reflected in the Next.js Router.
     * Ensures Next.js internal history state is copied to the new history entry.
     * Ensures usePathname and useSearchParams hold the newly provided url.
     */
    // Avoid a loop when Next.js internals trigger pushState/replaceState
    /**
     * Handle popstate event, this is used to handle back/forward in the browser.
     * By default dispatches ACTION_RESTORE, however if the history entry was not pushed/replaced by app-router it will reload the page.
     * That case can happen when the old router injected the history entry.
     */
    // TODO-APP: this case only happens when pushState/replaceState was called outside of Next.js. It should probably reload the page in this case.
    // This case happens when the history entry was pushed by the `pages` router.
    // TODO-APP: Ideally the back button should not use startTransition as it should apply the updates synchronously
    // Without startTransition works if the cache is there for this path
    // Register popstate event to call onPopstate.
    // Add memoized pathParams for useParams.
    // Root node always has `url`
    // Provided in AppTreeContext to ensure it can be overwritten in layout-router
    // The head is wrapped in an extra component so we can use
    // `useDeferredValue` to swap between the prefetched and final versions of
    // the head. (This is what LayoutRouter does for segment data, too.)
    //
    // The `key` is used to remount the component whenever the head moves to
    // a different segment.
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // TODO figure out how to get a promise here
    // But maybe it's not necessary as react would block rendering until it's loaded
    /*#__PURE__*/
    // @ts-ignore
    //# sourceMappingURL=app-router.js.map
    // Diff the old and new trees to reuse the shared layouts.
    // Clone the current set of segment children, even if they aren't active in
    // the new tree.
    // TODO: We currently retain all the inactive segments indefinitely, until
    // there's an explicit refresh, or a parent layout is lazily refreshed. We
    // rely on this for popstate navigations, which update the Router State Tree
    // but do not eagerly perform a data fetch, because they expect the segment
    // data to already be in the Cache Node tree. For highly static sites that
    // are mostly read-only, this may happen only rarely, causing memory to
    // leak. We should figure out a better model for the lifetime of inactive
    // segments, so we can maintain instant back/forward navigations without
    // leaking memory indefinitely.
    // As we diff the trees, we may sometimes modify (copy-on-write, not mutate)
    // the Route Tree that was returned by the server — for example, in the case
    // of default parallel routes, we preserve the currently active segment. To
    // avoid mutating the original tree, we clone the router state children along
    // the return path.
    // Most navigations require a request to fetch additional data from the
    // server, either because the data was not already prefetched, or because the
    // target route contains dynamic data that cannot be prefetched.
    //
    // However, if the target route is fully static, and it's already completely
    // loaded into the segment cache, then we can skip the server request.
    //
    // This starts off as `false`, and is set to `true` if any of the child
    // routes requires a dynamic request.
    // This is another kind of leaf segment — a default route.
    //
    // Default routes have special behavior. When there's no matching segment
    // for a parallel route, Next.js preserves the currently active segment
    // during a client navigation — but not for initial render. The server
    // leaves it to the client to account for this. So we need to handle
    // it here.
    // Reuse the existing Router State for this segment. We spawn a "task"
    // just to keep track of the updated router state; unlike most, it's
    // already fulfilled and won't be affected by the dynamic response.
    // There's no currently active segment. Switch to the "create" path.
    // This segment exists in both the old and new trees. Recursively update
    // the children.
    // Either there's no existing Cache Node for this segment, or this
    // segment doesn't exist in the old Router State tree. Switch to the
    // "create" path.
    // This is a new tree. Switch to the "create" path.
    // Something changed in the child tree. Keep track of the child task.
    // The child tree's route state may be different from the prefetched
    // route sent by the server. We need to clone it as we traverse back up
    // the tree.
    // The child didn't change. We can use the prefetched router state.
    // No new tasks were spawned.
    // We intentionally aren't updating the prefetchRsc field, since this node
    // is already part of the current tree, because it would be weird for
    // prefetch data to be newer than the final data. It probably won't ever be
    // observable anyway, but it could happen if the segment is unmounted then
    // mounted again, because LayoutRouter will momentarily switch to rendering
    // prefetchRsc, via useDeferredValue.
    // Everything is cloned except for the children, which we computed above.
    // Return a cloned copy of the router state with updated children.
    // Same traversal as updateCacheNodeNavigation, but we switch to this path
    // once we reach the part of the tree that was not in the previous route. We
    // don't need to diff against the old tree, we just need to create a new one.
    // There's no prefetch for this segment. Everything from this point will be
    // requested from the server, even if there are static children below it.
    // Create a terminal task node that will later be fulfilled by
    // server response.
    // The head is assigned to every leaf segment delivered by the server. Based
    // on corresponding logic in fill-lazy-items-till-leaf-with-head.ts
    // If prefetch data is available for a segment, and it's fully static (i.e.
    // does not contain any dynamic holes), we don't need to request it from
    // the server.
    // Check if the head is partial (only relevant if this is a leaf segment)
    // We only have partial data from this segment. Like missing segments, we
    // must request the full data from the server.
    // The prefetched segment is fully static, so we don't need to request a new
    // one from the server. Keep traversing down the tree until we reach something
    // that requires a dynamic request.
    // Since this is a fully static segment, we don't need to use the
    // `prefetchRsc` field.
    // Based on equivalent logic in apply-router-state-patch-to-tree, but should
    // confirm whether we need to copy all of these fields. Not sure the server
    // ever sends, e.g. the refetch marker.
    // Create a task that will later be fulfilled by data from the server.
    // Corresponds to the part of the route that will be rendered on the server.
    // Set this to true to indicate that this tree is missing data. This will
    // be propagated to all the parent tasks.
    // Create a task that reuses an existing segment, e.g. when reusing
    // the current active segment in place of a default route.
    // Happens when navigating to page in `pages` from `app`. We shouldn't
    // get here because should have already handled this during
    // the prefetch.
    // Now that we've exhausted all the data we received from the server, if
    // there are any remaining pending tasks in the tree, abort them now.
    // If there's any missing data, it will trigger a lazy fetch.
    // This will trigger an error during render
    // The data sent by the server represents only a subtree of the app. We need
    // to find the part of the task tree that matches the server response, and
    // fulfill it using the dynamic data.
    //
    // segmentPath represents the parent path of subtree. It's a repeating pattern
    // of parallel route key and segment:
    //
    //   [string, Segment, string, Segment, string, Segment, ...]
    //
    // Iterate through the path and finish any tasks that match this payload.
    // Found a match for this task. Keep traversing down the task tree.
    // We didn't find a child task that matches the server data. Exit. We won't
    // abort the task, though, because a different FlightDataPath may be able to
    // fulfill it (see loop in listenForDynamicRequest). We only abort tasks
    // once we've run out of data.
    // Everything in this subtree is already complete. Bail out.
    // dynamicData may represent a larger subtree than the task. Before we can
    // finish the task, we need to line them up.
    // We've reached the leaf node of the pending task. The server data tree
    // lines up the pending Cache Node tree. We can now switch to the
    // normal algorithm.
    // Set this to false to indicate that this task is now complete.
    // The server returned more data than we need to finish the task. Skip over
    // the extra segments until we reach the leaf task node.
    // Found a match for this task. Keep traversing down the task tree.
    // We didn't find a child task that matches the server data. We won't abort
    // the task, though, because a different FlightDataPath may be able to
    // fulfill it (see loop in listenForDynamicRequest). We only abort tasks
    // once we've run out of data.
    // The head is assigned to every leaf segment delivered by the server. Based
    // on corresponding logic in fill-lazy-items-till-leaf-with-head.ts
    // TODO: Technically, a loading boundary could contain dynamic data. We must
    // have separate `loading` and `prefetchLoading` fields to handle this, like
    // we do for the segment data and head.
    // Create a deferred promise. This will be fulfilled once the dynamic
    // response is received from the server.
    // Writes a dynamic response into an existing Cache Node tree. This does _not_
    // create a new tree, it updates the existing tree in-place. So it must follow
    // the Suspense rules of cache safety — it can resolve pending promises, but
    // it cannot overwrite existing data. It can add segments to the tree (because
    // a missing segment will cause the layout router to suspend).
    // but it cannot delete them.
    //
    // We must resolve every promise in the tree, or else it will suspend
    // indefinitely. If we did not receive data for a segment, we will resolve its
    // data promise to `null` to trigger a lazy fetch during render.
    // The router state that we traverse the tree with (taskState) is the same one
    // that we used to construct the pending Cache Node tree. That way we're sure
    // to resolve all the pending promises.
    // This is the happy path. Recursively update all the children.
    // The server never returned data for this segment. Trigger a lazy
    // fetch during render. This shouldn't happen because the Route Tree
    // and the Seed Data tree sent by the server should always be the same
    // shape when part of the same server response.
    // The server never returned data for this segment. Trigger a lazy
    // fetch during render.
    // The server response matches what was expected to receive, but there's
    // no matching Cache Node in the task tree. This is a bug in the
    // implementation because we should have created a node for every
    // segment in the tree that's associated with this task.
    // Use the dynamic data from the server to fulfill the deferred RSC promise
    // on the Cache Node.
    // This is a lazy cache node. We can overwrite it. This is only safe
    // because we know that the LayoutRouter suspends if `rsc` is `null`.
    // This is a deferred RSC promise. We can fulfill it with the data we just
    // received from the server. If it was already resolved by a different
    // navigation, then this does nothing because we can't overwrite data.
    // This is not a deferred RSC promise, nor is it empty, so it must have
    // been populated by a different navigation. We must not overwrite it.
    // Check if this is a leaf segment. If so, it will have a `head` property with
    // a pending promise that needs to be resolved with the dynamic head from
    // the server.
    // This indicates the task is already complete.
    // Reached the leaf task node. This is the root of a pending cache
    // node tree.
    // This is an intermediate task node. Keep traversing until we reach a
    // task node with no children. That will be the root of the cache node tree
    // that needs to be resolved.
    // Set this to false to indicate that this task is now complete.
    // For every pending segment in the tree, resolve its `rsc` promise to `null`
    // to trigger a lazy fetch during render.
    //
    // Or, if an error object is provided, it will error instead.
    // This shouldn't happen because we're traversing the same tree that was
    // used to construct the cache nodes in the first place.
    // This will trigger a lazy fetch during render.
    // This will trigger an error during rendering.
    // Check if this is a leaf segment. If so, it will have a `head` property with
    // a pending promise that needs to be resolved. If an error was provided, we
    // will not resolve it with an error, since this is rendered at the root of
    // the app. We want the segment to error, not the entire app.
    // A popstate navigation reads data from the local cache. It does not issue
    // new network requests (unless the cache entries have been evicted). So, we
    // update the cache to drop the prefetch data for any segment whose dynamic
    // data was already received. This prevents an unnecessary flash back to PPR
    // state during a back/forward navigation.
    //
    // This function clones the entire cache node tree and sets the `prefetchRsc`
    // field to `null` to prevent it from being rendered. We can't mutate the node
    // in place because this is a concurrent data structure.
    // Only show prefetched data if the dynamic data is still pending.
    //
    // Tehnically, what we're actually checking is whether the dynamic network
    // response was received. But since it's a streaming response, this does not
    // mean that all the dynamic data has fully streamed in. It just means that
    // _some_ of the dynamic data was received. But as a heuristic, we assume that
    // the rest dynamic data will stream in quickly, so it's still better to skip
    // the prefetch state.
    // These are the cloned children we computed above
    // This type exists to distinguish a DeferredRsc from a Flight promise. It's a
    // compromise to avoid adding an extra field on every Cache Node, which would be
    // awkward because the pre-PPR parts of codebase would need to account for it,
    // too. We can remove it once type Cache Node type is more settled.
    //# sourceMappingURL=ppr-navigations.js.map
    // In case of last segment start off the fetch at this level and don't copy further down.
    // Start fetch in the place where the existing cache doesn't have the data yet.
    //# sourceMappingURL=clear-cache-node-data-for-segment-path.js.map
    // If the segment doesn't have a loading component, we don't need to do anything.
    // Segments are keyed by searchParams (e.g. __PAGE__?{"foo":"bar"}). We might return a less specific, param-less entry,
    // so we ensure that the final tree contains the correct searchParams (reflected in the URL) are provided in the updated FlightRouterState tree.
    // We only do this on the first read, as otherwise we'd be overwriting the searchParams that may have already been set
    // TODO-APP: remove ''
    // Segments are keyed by searchParams (e.g. __PAGE__?{"foo":"bar"}). We might return a less specific, param-less entry,
    // so we ensure that the final tree contains the correct searchParams (reflected in the URL) are provided in the updated FlightRouterState tree.
    // We only do this on the first read, as otherwise we'd be overwriting the searchParams that may have already been set
    // The prefetch cache entry was aliased -- this signals that we only fill in the cache with the
    // loading state and not the actual parallel route seed data.
    // Fill in the cache with the new loading / rsc data
    // Construct a new tree and apply the aliased loading state for each parallel route
    // Copy rsc for the root node of the cache.
    // copy the loading state only into the leaf node (the part that changed)
    // If we don't have an updated tree, there's no reason to update the cache, as the tree
    // dictates what cache nodes to render.
    // New data was sent from the server.
    // copy the layout but null the page segment as that's not meant to be used
    // No data available for this node. This will trigger a lazy fetch
    // during render.
    // If it's a page segment, modify the segment by adding search params
    // Otherwise, recurse through the parallel routes and return a new tree
    //# sourceMappingURL=aliased-prefetch-navigations.js.map
    /*#__PURE__*/
    // We have a matching prefetch.
    // There's no matching prefetch for this route in the cache.
    // Recursively construct a prefetch tree by reading from the Segment Cache. To
    // maintain compatibility, we output the same data structures as the old
    // prefetching implementation: FlightRouterState and CacheNodeSeedData.
    // TODO: Eventually updateCacheNodeOnNavigation (or the equivalent) should
    // read from the Segment Cache directly. It's only structured this way for now
    // so we can share code with the old prefetching implementation.
    // The prefetched tree does not contain dynamic holes — it's
    // fully static. We can skip the dynamic request.
    // The server sent back an empty tree patch. There's nothing to update.
    // Happy path: a cache hit
    // We haven't received data for this segment yet, but there's already
    // an in-progress request. Since it's extremely likely to arrive
    // before the dynamic data response, we might as well use it.
    // Since we don't know yet whether the segment is partial or fully
    // static, we must assume it's partial; we can't skip the
    // dynamic request.
    // Runs when a navigation happens but there's no cached prefetch we can use.
    // Don't bother to wait for a prefetch response; go straight to a full
    // navigation that contains both static and dynamic data in a single stream.
    // (This is unlike the old navigation implementation, which instead blocks
    // the dynamic request until a prefetch request is received.)
    //
    // To avoid duplication of logic, we're going to pretend that the tree
    // returned by the dynamic request is, in fact, a prefetch tree. Then we can
    // use the same server response to write the actual data into the CacheNode
    // tree. So it's the same flow as the "happy path" (prefetch, then
    // navigation), except we use a single server response for both stages.
    // TODO: Detect if the only thing that changed was the hash, like we do in
    // in navigateReducer
    // This is an MPA navigation.
    // Since the response format of dynamic requests and prefetches is slightly
    // different, we'll need to massage the data a bit. Create FlightRouterState
    // tree that simulates what we'd receive as the result of a prefetch.
    // In our simulated prefetch payload, we pretend that there's no seed data
    // nor a prefetch head.
    // Now we proceed exactly as we would for normal navigation.
    // The prefetched tree does not contain dynamic holes — it's
    // fully static. We can skip the dynamic request.
    // The server sent back an empty tree patch. There's nothing to update.
    // Takes the current FlightRouterState and applies the router state patch
    // received from the server, to create a full FlightRouterState tree that we
    // can pretend was returned by a prefetch.
    //
    // (It sounds similar to what applyRouterStatePatch does, but it doesn't need
    // to handle stuff like interception routes or diffing since that will be
    // handled later.)
    // If the server sends us multiple tree patches, we only need to clone the
    // base tree when applying the first patch. After the first patch, we can
    // apply the remaining patches in place without copying.
    // We reached the part of the tree that we need to patch.
    // segmentPath represents the parent path of subtree. It's a repeating
    // pattern of parallel route key and segment:
    //
    //   [string, Segment, string, Segment, string, Segment, ...]
    //
    // This path tells us which part of the base tree to apply the tree patch.
    //
    // NOTE: In the case of a fully dynamic request with no prefetch, we receive
    // the FlightRouterState patch in the same request as the dynamic data.
    // Therefore we don't need to worry about diffing the segment values; we can
    // assume the server sent us a correct result.
    // const segment: Segment = segmentPath[index + 1] <-- Not used, see note above
    // the end of the segment path.
    // This child is not being patched. Copy it over as-is.
    // We can mutate the base tree in place, because the base tree is already
    // a clone.
    // Clone all the fields except the children.
    //
    // Based on equivalent logic in apply-router-state-patch-to-tree, but should
    // confirm whether we need to copy all of these fields. Not sure the server
    // ever sends, e.g. the refetch marker.
    //# sourceMappingURL=navigation.js.map
    // If the segment is empty, it means we are at the root of the tree
    // Perform an MPA navigation.
    // The server responded with no change to the current page.
    // Received a new result.
    // TODO: Not yet implemented
    // mutable.scrollableSegments = scrollableSegments
    // mutable.hashFragment = hash
    // mutable.shouldScroll = shouldScroll
    // TODO: This matches the current behavior but we need to do something
    // better here if the network fails.
    // we want to prune the prefetch cache on every navigation to avoid it growing too large
    // Handles case where `<meta http-equiv="refresh">` tag is present,
    // which will trigger an MPA navigation.
    // we only want to mark this once
    // important: we should only mark the cache node as dirty after we unsuspend from the call above
    // Handle case when navigating to page in `pages` from `app`
    // If only the hash has changed, the server hasn't sent us any new data. We can just update
    // the mutable properties responsible for URL and scroll handling and return early.
    // We didn't return new router state because we didn't apply the aliased entry for some reason.
    // We'll re-invoke the navigation handler but ensure that we don't attempt to use the aliased entry. This
    // will create an on-demand prefetch entry.
    // TODO-APP: remove ''
    // Create new tree based on the flightSegmentPath and router state patch
    // If the tree patch can't be applied to the current tree then we use the tree at time of prefetch
    // TODO-APP: This should instead fill in the missing pieces in `currentTree` with the data from `treeAtTimeOfPrefetch`, then apply the patch.
    // will send back a static response that's rendered from
    // the root. If for some reason it doesn't, we fall back to the
    // non-PPR implementation.
    // TODO: We should get rid of the else branch and do all navigations
    // via updateCacheNodeOnNavigation. The current structure is just
    // an incremental step.
    // Use the tree computed by updateCacheNodeOnNavigation instead
    // of the one computed by applyRouterStatePatchToTree.
    // TODO: We should remove applyRouterStatePatchToTree
    // from the PPR path entirely.
    // We've created a new Cache Node tree that contains a prefetched
    // version of the next page. This can be rendered instantly.
    // The prefetched tree has dynamic holes in it. We initiate a
    // dynamic request to fill them in.
    //
    // Do not block on the result. We'll immediately render the Cache
    // Node tree and suspend on the dynamic parts. When the request
    // comes in, we'll fill in missing data and ping React to
    // re-render. Unlike the lazy fetching model in the non-PPR
    // implementation, this is modeled as a single React update +
    // streaming, rather than multiple top-level updates. (However,
    // even in the new model, we'll still need to sometimes update the
    // root multiple times per navigation, like if the server sends us
    // a different response than we expected. For now, we revert back
    // to the lazy fetching mechanism in that case.)
    // We store the dynamic request on the `lazyData` property of the CacheNode
    // because we're not going to await the dynamic request here. Since we're not blocking
    // on the dynamic request, `layout-router` will
    // task.node.lazyData = dynamicRequest
    // The prefetched tree does not contain dynamic holes — it's
    // fully static. We can skip the dynamic request.
    // Nothing changed, so reuse the old cache.
    // TODO: What if the head changed but not any of the segment data?
    // Is that possible? If so, we should clone the whole tree and
    // update the head.
    // The static response does not include any dynamic holes, so
    // there's no need to do a second request.
    // TODO: As an incremental step this just reverts back to the
    // non-PPR implementation. We can simplify this branch further,
    // given that PPR prefetches are always static and return the whole
    // tree. Or in the meantime we could factor it out into a
    // separate function.
    // When we have a stale prefetch entry, we only want to re-use the loading state of the route we're navigating to, to support instant loading navigations
    // this will trigger a lazy fetch for the actual page data by nulling the `rsc` and `prefetchRsc` values for page data,
    // while copying over the `loading` for the segment that contains the page data.
    // We only do this on subsequent reads, as otherwise there'd be no loading data to re-use.
    // We skip this branch if only the hash fragment has changed, as we don't want to trigger a lazy fetch in that case
    // since we re-used the stale cache's loading state & refreshed the data,
    // update the `lastUsedTime` so that it can continue to be re-used for the next 30s
    // Copy rsc for the root node of the cache.
    // Ensure the existing cache value is used when the cache was not invalidated.
    // If we applied the cache, we update the "current cache" value so any other
    // segments in the FlightDataPath will be able to reference the updated cache.
    // Filter out the __DEFAULT__ paths as they shouldn't be scrolled to in this case.
    //# sourceMappingURL=navigate-reducer.js.map
    // Handle case when navigating to page in `pages` from `app`
    // `applyRouterStatePatchToTree` returns `null` when it determined that the server response is not applicable to the current tree.
    // In other words, the server responded with a tree that doesn't match what the client is currently rendering.
    // This can happen if the server patch action took longer to resolve than a subsequent navigation which would have changed the tree.
    // Previously this case triggered an MPA navigation but it should be safe to simply discard the server response rather than forcing
    // the entire page to reload.
    //# sourceMappingURL=server-patch-reducer.js.map
    // This action is used to restore the router state from the history state.
    // However, it's possible that the history state no longer contains the `FlightRouterState`.
    // We will copy over the internal state on pushState/replaceState events, but if a history entry
    // occurred before hydration, or if the user navigated to a hash using a regular anchor link,
    // the history state will not contain the `FlightRouterState`.
    // In this case, we'll continue to use the existing tree so the router doesn't get into an invalid state.
    // Set canonical url
    // Ensures that the custom history state that was set is preserved when applying this update.
    // Restore provided tree
    //# sourceMappingURL=restore-reducer.js.map
    //# sourceMappingURL=handle-segment-mismatch.js.map
    // If we have a dynamic segment, it's marked as an interception route by the presence of the `i` suffix.
    // If segment is not an array, apply the existing string-based check
    // Iterate through parallelRoutes if they exist
    //# sourceMappingURL=has-interception-route-in-current-tree.js.map
    // If the current tree was intercepted, the nextUrl should be included in the request.
    // This is to ensure that the refresh request doesn't get intercepted, accidentally triggering the interception route.
    // TODO-APP: verify that `href` is not an external url.
    // Fetch data from the root of the tree.
    // Handle case when navigating to page in `pages` from `app`
    // Remove cache.lazyData as it has been resolved at this point.
    // TODO-APP: handle this case better
    // Handles case where prefetch only returns the router tree patch without rendered components.
    //# sourceMappingURL=refresh-reducer.js.map
    // A version of refresh reducer that keeps the cache around instead of wiping all of it.
    // If the current tree was intercepted, the nextUrl should be included in the request.
    // This is to ensure that the refresh request doesn't get intercepted, accidentally triggering the interception route.
    // TODO-APP: verify that `href` is not an external url.
    // Fetch data from the root of the tree.
    // Handle case when navigating to page in `pages` from `app`
    // Remove cache.lazyData as it has been resolved at this point.
    // TODO-APP: handle this case better
    //# sourceMappingURL=hmr-refresh-reducer.js.map
    // new URL('./relative', 'https://example.com/subdir').href -> 'https://example.com/relative'
    // new URL('./relative', 'https://example.com/subdir/').href -> 'https://example.com/subdir/relative'
    //# sourceMappingURL=assign-location.js.map
    // This assumes that the server reference info byte has the restArgs bit
    // set to 1 if there are more than 6 args.
    //# sourceMappingURL=server-reference-info.js.map
    // // eslint-disable-next-line import/no-extraneous-dependencies
    // import { createFromFetch } from 'react-server-dom-webpack/client'
    // // eslint-disable-next-line import/no-extraneous-dependencies
    // import { encodeReply } from 'react-server-dom-webpack/client'
    // TODO: Currently, we're only omitting unused args for the experimental "use
    // cache" functions. Once the server reference info byte feature is stable, we
    // should apply this to server actions as well.
    // if it was a redirection, then result is just a regular RSC payload
    // Handle invalid server action responses
    // The server can respond with a text/plain error message, but we'll fallback to something generic
    // if there isn't one.
    // only pass along the `nextUrl` param (used for interception routes) if the current route was intercepted.
    // If the route has been intercepted, the action should be as well.
    // Otherwise the server action might be intercepted with the wrong action id
    // (ie, one that corresponds with the intercepted route)
    // honor the redirect type instead of defaulting to push in case of server actions.
    // If there is a redirect but no flight data we need to do a mpaNavigation.
    // Handle case when navigating to page in `pages` from `app`
    // TODO-APP: handle this case better
    // Given the path can only have two items the items are only the router state and rsc for the root.
    // The server sent back RSC data for the server action, so we need to apply it to the cache.
    // Because the RedirectBoundary will trigger a navigation, we need to seed the prefetch cache
    // with the FlightData that we got from the server action for the target page, so that it's
    // available when the page is navigated to and doesn't need to be re-fetched.
    // We only do this if the server action didn't revalidate any data, as in that case the
    // client cache will be cleared and the data will be re-fetched anyway.
    // TODO: We should be able to set this if the server action
    // returned a fully static response.
    // If the action triggered a redirect, the action promise promise will be rejected with
    // a redirect so that it's handled by RedirectBoundary as we won't have a valid
    // action result to resolve the promise with. This will effectively reset the state of
    // the component that called the action as the error boundary will remount the tree.
    // The status code doesn't matter here as the action handler will have already sent
    // a response with the correct status code.
    // When the server action is rejected we don't update the state and instead call the reject handler of the promise.
    //# sourceMappingURL=server-action-reducer.js.map
    /**
 * Reducer that handles the app-router state updates.
 */
    // This case should never be hit as dispatch is strongly typed.
    //# sourceMappingURL=router-reducer.js.map
    // When initialized on the server, the canonical URL is provided as an array of parts.
    // This is to ensure that when the RSC payload streamed to the client, crawlers don't interpret it
    // as a URL that should be crawled.
    // For the SSR render, seed data should always be available (we only send back a `null` response
    // in the case of a `loading` segment, pre-PPR.)
    // The cache gets seeded during the first render. `initialParallelRoutes` ensures the cache from the first render is there during the second render.
    // This is safe to do as canonicalUrl can't be rendered, it's only used to control the history updates in the useEffect further down in this file.
    // When the cache hasn't been seeded yet we fill the cache with the head.
    // First render needs to preserve the previous window.history.state
    // to avoid it being overwritten on navigation back/forward with MPA Navigation.
    //# sourceMappingURL=create-initial-router-state.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    // add minimal "hot reload" support for RSC errors
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=client-entry.js.map
    // TODO-APP: Remove this logic when Float has GC built-in in development.
    // It's possible that the resource is a full URL or only pathname,
    // so we need to remove the alternative href as well.
    // Delay the removal of the stylesheet to avoid FOUC
    // caused by `@font-face` rules, as they seem to be
    // a couple of ticks delayed between the old and new
    // styles being swapped even if the font is cached.
    // Create an observer instance linked to the callback function
    //# sourceMappingURL=app-link-gc.js.map
    // imports polyfill from `@next/polyfill-module` after build.
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /// <reference types="react-dom/experimental" />
    // Decode the base64 string back to binary data.
    // If `desiredSize` is null, it means the stream is closed or errored. If it is lower than 0, the stream is still unfinished.
    // There might be race conditions between `nextServerDataRegisterWriter` and
    // `DOMContentLoaded`. The former will be called when React starts to hydrate
    // the root, the latter will be called when the DOM is fully loaded.
    // For streaming, the former is called first due to partial hydration.
    // For non-streaming, the latter can be called first.
    // Hence, we use two variables `initialServerDataLoaded` and
    // `initialServerDataFlushed` to make sure the writer will be closed and
    // `initialServerDataBuffer` will be cleared in the right time.
    // When `DOMContentLoaded`, we can close all pending writers to finish hydration.
    // It's possible that the DOM is already loaded.
    // Delayed in marco task to ensure it's executed later than hydration
    // React overrides `.then` and doesn't return a new promise chain,
    // so we wrap the action queue in a promise to ensure that its value
    // is defined when the promise resolves.
    // https://github.com/facebook/react/blob/163365a07872337e04826c4f501565d43dbd2fd4/packages/react-client/src/ReactFlightClient.js#L189-L190
    // setAppBuildId should be called only once, during JS initialization
    // and before any components have hydrated.
    /*#__PURE__*/
    // We provide missing slot information in a context provider only during development
    // as we log some additional information about the missing slots in the console.
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // TODO-APP: Remove this logic when Float has GC built-in in development.
    //# sourceMappingURL=app-index.js.map
    // TODO-APP: hydration warning
    // TODO-APP: build indicator
    //# sourceMappingURL=app-next-turbopack.js.map
    //# sourceMappingURL=node_modules_next_dist_client_523921._.js.map

File: ./frontend/.next/static/chunks/pages__app_f2320d._.js
  JavaScript Functions:
    - defineProp
    - esm
    - esmExport
    - ensureDynamicExports
    - dynamicExport
    - exportValue
    - exportNamespace
    - createGetter
    - interopEsm
    - createNS
    - esmImport
    - require1
    - commonJsRequire
    - moduleContext
    - moduleContext
    - keys
    - resolve
    - getChunkPath
    - isPromise
    - isAsyncModuleExt
    - createPromise
    - resolveQueue
    - wrapDeps
    - asyncModule
    - handleAsyncDependencies
    - getResult
    - fnQueue
    - asyncResult
    - to
    - relativeURL
    - toJSON
    - to
    - invariant
    - to
    - requireStub
    - loadChunk
    - loadChunkPath
    - createResolvePathFromModule
    - resolvePathFromModule
    - resolveAbsolutePath
    - getWorkerBlobURL
    - addModuleToChunk
    - getFirstModuleChunk
    - instantiateRuntimeModule
    - getChunkRelativeUrl
    - markChunkListAsRuntime
    - registerChunk
    - getOrInstantiateRuntimeModule
    - getOrInstantiateModuleFromParent
    - instantiateModule
    - runModuleExecutionHooks
    - registerExportsAndSetupBoundaryForReactRefresh
    - formatDependencyChain
    - computeOutdatedModules
    - computedInvalidatedModules
    - computeOutdatedSelfAcceptedModules
    - updateChunksPhase
    - disposePhase
    - disposeModule
    - applyPhase
    - applyUpdate
    - applyChunkListUpdate
    - applyEcmascriptMergedUpdate
    - applyInvalidatedModules
    - applyInternal
    - reportError
    - computeChangedModules
    - getAffectedModuleEffects
    - handleApply
    - createModuleHot
    - removeModuleFromChunk
    - disposeChunkList
    - disposeChunk
    - registerChunkList
    - augmentContext
    - fetchWebAssembly
    - loadWebAssembly
    - loadWebAssemblyModule
    - getOrCreateResolver
    - doLoadChunk
    - onerror
    - onload
    - onerror
    - onerror
    - onload
    - deleteResolver
    - _eval
  Comments:
    /**
 * This file contains runtime types and functions that are shared between all
 * TurboPack ECMAScript runtimes.
 *
 * It will be prepended to the runtime code of each runtime.
 */
    /* eslint-disable @typescript-eslint/no-unused-vars */
    /// <reference path="./runtime-types.d.ts" />
    /**
 * Adds the getters to the exports object.
 */
    /**
 * Makes the module an ESM with exports
 */
    /**
 * Dynamically exports properties from an object
 */
    /**
 * @returns prototype of the object
 */
    /** Prototypes that are not expanded for exports */
    /**
 * @param raw
 * @param ns
 * @param allowExportDefault
 *   * `false`: will have the raw module as default export
 *   * `true`: will have the default property as default export
 */
    // this is not really correct
    // we should set the `default` getter if the imported module is a `.cjs file`
    // any ES module has to have `module.namespaceObject` defined.
    // only ESM can be an async module, so we don't need to worry about exports being a promise here.
    // Add a simple runtime require so that environments without one can still pass
    // `typeof require` CommonJS checks so that exports are correctly registered.
    // @ts-ignore
    /**
 * `require.context` and require/import expression runtime.
 */
    /**
 * Returns the path of a chunk defined by its data.
 */
    // everything below is adapted from webpack
    // https://github.com/webpack/webpack/blob/6be4065ade1e252c1d8dcba4af0f43e32af1bdc1/lib/runtime/AsyncModuleRuntimeModule.js#L13
    // Calling `esmExport` leads to this.
    /**
 * A pseudo "fake" URL object to resolve to its relative path.
 *
 * When UrlRewriteBehavior is set to relative, calls to the `new URL()` will construct url without base using this
 * runtime function to generate context-agnostic urls between different rendering context, i.e ssr / client to avoid
 * hydration mismatch.
 *
 * This is based on webpack's existing implementation:
 * https://github.com/webpack/webpack/blob/87660921808566ef3b8796f8df61bd79fc026108/lib/runtime/RelativeUrlRuntimeModule.js
 */
    /**
 * Utility function to ensure all variants of an enum are handled.
 */
    /**
 * A stub function to make `require` available but non-functional in ESM.
 */
    /**
 * This file contains runtime types and functions that are shared between all
 * Turbopack *development* ECMAScript runtimes.
 *
 * It will be appended to the runtime code of each runtime right after the
 * shared runtime utils.
 */
    /* eslint-disable @typescript-eslint/no-unused-vars */
    /// <reference path="../base/globals.d.ts" />
    /// <reference path="../../../shared/runtime-utils.ts" />
    /*#__PURE__*/
    /**
   * The module was instantiated because it was included in an evaluated chunk's
   * runtime.
   */
    /**
   * The module was instantiated because a parent module imported it.
   */
    /**
   * The module was instantiated because it was included in a chunk's hot module
   * update.
   */
    /**
 * Module IDs that are instantiated as part of the runtime of a chunk.
 */
    /**
 * Map from module ID to the chunks that contain this module.
 *
 * In HMR, we need to keep track of which modules are contained in which so
 * chunks. This is so we don't eagerly dispose of a module when it is removed
 * from chunk A, but still exists in chunk B.
 */
    /**
 * Map from a chunk path to all modules it contains.
 */
    /**
 * Chunk lists that contain a runtime. When these chunk lists receive an update
 * that can't be reconciled with the current state of the page, we need to
 * reload the runtime entirely.
 */
    /**
 * Map from a chunk list to the chunk paths it contains.
 */
    /**
 * Map from a chunk path to the chunk lists it belongs to.
 */
    // When all included items are already loaded or loading, we can skip loading ourselves
    // TODO(alexkirsz) Do we need this check?
    // if (moduleFactories[included]) return true;
    // Some module chunks are already loaded or loading.
    // When all included module chunks are already loaded or loading, we can skip loading ourselves
    // Mark all included module chunks as loading if they are not already loaded or loading.
    // It might be better to race old and new promises, but it's rare that the new promise will be faster than a request started earlier.
    // In production it's even more rare, because the chunk optimization tries to deduplicate modules anyway.
    /**
 * Returns an absolute url to an asset.
 */
    /**
 * no-op for browser
 * @param modulePath
 */
    /**
 * Adds a module to a chunk.
 */
    /**
 * Returns the first chunk that included a module.
 * This is used by the Node.js backend, hence why it's marked as unused in this
 * file.
 */
    /**
 * Instantiates a runtime module.
 */
    /**
 * Returns the URL relative to the origin where a chunk can be fetched from.
 */
    /**
 * Marks a chunk list as a runtime chunk list. There can be more than one
 * runtime chunk list. For instance, integration tests can have multiple chunk
 * groups loaded at runtime, each with its own chunk list.
 */
    /// <reference path="./dev-globals.d.ts" />
    /// <reference path="./dev-protocol.d.ts" />
    /// <reference path="./dev-extensions.ts" />
    /**
 * This file contains runtime types and functions that are shared between all
 * Turbopack *development* ECMAScript runtimes.
 *
 * It will be appended to the runtime code of each runtime right after the
 * shared runtime utils.
 */
    /* eslint-disable @typescript-eslint/no-unused-vars */
    /**
 * Maps module IDs to persisted data between executions of their hot module
 * implementation (`hot.data`).
 */
    /**
 * Maps module instances to their hot module state.
 */
    /**
 * Modules that call `module.hot.invalidate()` (while being updated).
 */
    /**
 * Gets or instantiates a runtime module.
 */
    // @ts-ignore
    // @ts-ignore
    /**
 * Retrieves a module from the cache, or instantiate it if it is not cached.
 */
    // @ts-ignore Defined in `runtime-utils.ts`
    // @ts-ignore Defined in `runtime-base.ts`
    // This can happen if modules incorrectly handle HMR disposes/updates,
    // e.g. when they keep a `setTimeout` around which still executes old code
    // and contains e.g. a `require("something")` call.
    // No need to add this module as a child of the parent module here, this
    // has already been taken care of in `getOrInstantiateModuleFromParent`.
    // NOTE(alexkirsz) This can fail when the module encounters a runtime error.
    // in case of a circular dependency: cjs1 -> esm2 -> cjs1
    /**
 * NOTE(alexkirsz) Webpack has a "module execution" interception hook that
 * Next.js' React Refresh runtime hooks into to add module context to the
 * refresh registry.
 */
    // Always cleanup the intercept, even if module execution failed.
    /**
 * This is adapted from https://github.com/vercel/next.js/blob/3466862d9dc9c8bb3131712134d38757b918d1c0/packages/react-refresh-utils/internal/ReactRefreshModule.runtime.ts
 */
    // A module can be accepted automatically based on its exports, e.g. when
    // it is a Refresh Boundary.
    // Save the previous exports on update, so we can compare the boundary
    // signatures.
    // Unconditionally accept an update to this module, we'll check if it's
    // still a Refresh Boundary later.
    // This field is set when the previous version of this module was a
    // Refresh Boundary, letting us know we need to check for invalidation or
    // enqueue an update.
    // A boundary can become ineligible if its exports are incompatible
    // with the previous exports.
    //
    // For example, if you add/remove/change exports, we'll want to
    // re-execute the importing modules, and force those components to
    // re-render. Similarly, if you convert a class component to a
    // function, we want to invalidate the boundary.
    // Since we just executed the code for the module, it's possible that the
    // new exports made it ineligible for being a boundary.
    // We only care about the case when we were _previously_ a boundary,
    // because we already accepted this update (accidental side effect).
    // TODO(alexkirsz) Dependencies: handle dependencies effects.
    /**
 * Adds, deletes, and moves modules between chunks. This must happen before the
 * dispose phase as it needs to know which modules were removed from all chunks,
 * which we can only compute *after* taking care of added and moved modules.
 */
    // Removing modules from the module cache is a separate step.
    // We also want to keep track of previous parents of the outdated modules.
    // TODO(alexkirsz) Dependencies: remove outdated dependency from module
    // children.
    /**
 * Disposes of an instance of a module.
 *
 * Returns the persistent hot data that should be kept for the next module
 * instance.
 *
 * NOTE: mode = "replace" will not remove modules from the devModuleCache
 * This must be done in a separate step afterwards.
 * This is important because all modules need to be disposed to update the
 * parent/child relationships before they are actually removed from the devModuleCache.
 * If this was done in this method, the following disposeModule calls won't find
 * the module from the module id in the cache.
 */
    // Run the `hot.dispose` handler, if any, passing in the persistent
    // `hot.data` object.
    // This used to warn in `getOrInstantiateModuleFromParent` when a disposed
    // module is still importing other modules.
    // TODO(alexkirsz) Dependencies: delete the module from outdated deps.
    // Remove the disposed module from its children's parent list.
    // It will be added back once the module re-instantiates and imports its
    // children again.
    // Update module factories.
    // TODO(alexkirsz) Run new runtime entries here.
    // TODO(alexkirsz) Dependencies: call accept handlers for outdated deps.
    // Re-instantiate all outdated self-accepted modules.
    // we want to continue on error and only throw the error after we tried applying all updates
    // We could also use `mergedChunkUpdate.modules` here.
    // If a module was added from one chunk and deleted from another in the same update,
    // consider it to be modified, as it means the module was moved from one chunk to another
    // AND has new code in a single update.
    // Modules that haven't been added to any chunk but have new code are considered
    // to be modified.
    // This needs to be under the previous loop, as we need it to get rid of modules
    // that were added and deleted in the same update.
    // We've arrived at the runtime of the chunk, which means that nothing
    // else above can accept this update.
    // The module is not in the cache. Since this is a "modified" update,
    // it means that the module was never instantiated before.
    // TODO(alexkirsz) Dependencies: check accepted and declined
    // dependencies here.
    // This indicates that the update is can be applied to the current state of the application.
    // This indicates that there is no way to apply the update to the
    // current state of the application, and that the application must be
    // restarted.
    // This indicates that the chunk list no longer exists: either the dynamic import which created it was removed,
    // or the page itself was deleted.
    // If it is a dynamic import, we simply discard all modules that the chunk has exclusive access to.
    // If it is a runtime chunk list, we restart the application.
    // TODO(alexkirsz) This is not defined in the HMR API. It was used to
    // decide whether to warn whenever an HMR-disposed module required other
    // modules. We might want to remove it.
    // TODO(alexkirsz) Support full (dep, callback, errorHandler) form.
    // NOTE(alexkirsz) This is part of the management API, which we don't
    // implement, but the Next.js React Refresh runtime uses this to decide
    // whether to schedule an update.
    // NOTE(alexkirsz) Since we always return "idle" for now, these are no-ops.
    // NOTE(jridgewell) Check returns the list of updated modules, but we don't
    // want the webpack code paths to ever update (the turbopack paths handle
    // this already).
    /**
 * Removes a module from a chunk.
 * Returns `true` if there are no remaining chunks including this module.
 */
    /**
 * Disposes of a chunk list and its corresponding exclusive chunks.
 */
    // We must also dispose of the chunk list's chunk itself to ensure it may
    // be reloaded properly in the future.
    /**
 * Disposes of a chunk and its corresponding exclusive modules.
 *
 * @returns Whether the chunk was disposed of.
 */
    // This should happen whether the chunk has any modules in it or not.
    // For instance, CSS chunks have no modules in them, but they still need to be unloaded.
    /**
 * Subscribes to chunk list updates from the update server and applies them.
 */
    // Adding chunks to chunk lists and vice versa.
    /**
 * This file contains the runtime code specific to the Turbopack development
 * ECMAScript DOM runtime.
 *
 * It will be appended to the base development runtime code.
 */
    /* eslint-disable @typescript-eslint/no-unused-vars */
    /// <reference path="../../../browser/runtime/base/runtime-base.ts" />
    /// <reference path="../../../shared/runtime-types.d.ts" />
    /**
 * Maps chunk paths to the corresponding resolver.
 */
    // Chunk might have started loading, so we want to avoid triggering another load.
    // This waits for chunks to be loaded, but also marks included items as available.
    /**
   * Loads the given chunk, and returns a promise that resolves once the chunk
   * has been loaded.
   */
    // We don't need to load chunks references from runtime code, as they're already
    // present in the DOM.
    // CSS chunks do not register themselves, and as such must be marked as
    // loaded instantly.
    // We need to wait for JS chunks to register themselves within `registerChunk`
    // before we can start instantiating runtime modules, hence the absence of
    // `resolver.resolve()` in this branch.
    // We're in a web worker
    // ignore
    // CSS chunks do not register themselves, and as such must be marked as
    // loaded instantly.
    // CSS chunks do not register themselves, and as such must be marked as
    // loaded instantly.
    // There is this edge where the script already failed loading, but we
    // can't detect that. The Promise will never resolve in this case.
    // We'll only mark the chunk as loaded once the script has been executed,
    // which happens in `registerChunk`. Hence the absence of `resolve()` in
    // this branch.
    /**
 * This file contains the runtime code specific to the Turbopack development
 * ECMAScript DOM runtime.
 *
 * It will be appended to the base development runtime code.
 */
    /* eslint-disable @typescript-eslint/no-unused-vars */
    /// <reference path="../base/runtime-base.ts" />
    /// <reference path="../base/dev-base.ts" />
    /// <reference path="./runtime-backend-dom.ts" />
    /// <reference path="../../../shared/require-type.d.ts" />
    // TODO(PACK-2140): remove this once all filenames are guaranteed to be escaped.
    // Unloading a JS chunk would have no effect, as it lives in the JS
    // runtime once evaluated.
    // However, we still want to remove the script tag from the DOM to keep
    // the HTML somewhat consistent from the user's perspective.
    // Firefox won't reload CSS files that were previously loaded on the current page,
    // we need to add a query param to make sure CSS is actually reloaded from the server.
    //
    // I believe this is this issue: https://bugzilla.mozilla.org/show_bug.cgi?id=1037506
    //
    // Safari has a similar issue, but only if you have a `<link rel=preload ... />` tag
    // pointing to the same URL as the stylesheet: https://bugs.webkit.org/show_bug.cgi?id=187726
    // First load the new CSS, then remove the old ones. This prevents visible
    // flickering that would happen in-between removing the previous CSS and
    // loading the new one.
    // CSS chunks do not register themselves, and as such must be marked as
    // loaded instantly.
    // Make sure to insert the new CSS right after the previous one, so that
    // its precedence is higher.
    //# sourceURL=${encodeURI(location.origin + CHUNK_BASE_PATH + url)}`;
    //# sourceMappingURL=data:application/json;charset=utf-8;base64,${btoa(// btoa doesn't handle nonlatin characters, so escape them as \x sequences
    // See https://stackoverflow.com/a/26603875
    // eslint-disable-next-line no-eval
    //# sourceMappingURL=pages__app_f2320d._.js.map

File: ./frontend/.next/static/chunks/src_app_alltasks_page_38715d.js
  JavaScript Functions:
    - AllTasks
    - handleDragEnd
    - toggleExpand
    - renderTasks
  Comments:
    //127.0.0.1:5000/api/tasks").then({
    // ✅ Drag & Drop Handler
    // ✅ Expand/Collapse Nested Tasks
    // ✅ Render Tasks Recursively (Ensuring Nested Task Visibility)
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //127.0.0.1:5000/dashboard",
    /*#__PURE__*/
    //127.0.0.1:5000/tasks/",
    /*#__PURE__*/
    //localhost:3000/alltasks",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=src_app_alltasks_page_38715d.js.map

File: ./frontend/.next/static/chunks/src_app_alltasks_[taskId]_page_0a92ca.js
  JavaScript Functions:
    - TaskDetails
    - fetchData
    - handleChange
  Comments:
    // ✅ Get the taskId from URL
    // ✅ Extract taskId correctly
    // Fetch task details
    //127.0.0.1:5000/api/tasks/${taskId}`);
    // Fetch projects
    //127.0.0.1:5000/api/projects");
    // Fetch contributors
    //127.0.0.1:5000/api/contributors");
    // ✅ This now correctly runs on taskId change
    // ✅ Handle Input Changes
    // ✅ Save Changes to Flask API
    //127.0.0.1:5000/api/tasks/${taskId}`, {
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=src_app_alltasks_%5BtaskId%5D_page_0a92ca.js.map

File: ./frontend/.next/static/chunks/src_app_layout_4b4952.js

File: ./frontend/.next/static/chunks/node_modules_@hello-pangea_dnd_dist_dnd_esm_f3930d.js
  JavaScript Functions:
    - 2
    - getDevMessage
    - getFormattedMessage
    - log
    - noop
    - getOptions
    - bindEvents
    - unbind
    - unbindAll
    - toString
    - invariant
    - onWindowError
    - getCallbacks
    - setCallbacks
    - position
    - onDragStart
    - withLocation
    - withCombine
    - onDragUpdate
    - returnedToStart
    - onDragEnd
    - isEqual
    - areInputsEqual
    - useMemo
    - useCallback
    - add
    - subtract
    - 1
    - negate
    - patch
    - distance
    - 1
    - apply
    - executeClip
    - offsetByPosition
    - getCorners
    - 1
    - increase
    - clip
    - getSubject
    - scrollDroppable
    - memoizeOne
    - memoized
    - clear
    - tryGetDestination
    - tryGetCombine
    - moveToNextCombine
    - getImpact
    - isHomeOf
    - isWithin
    - isPartiallyVisibleThroughFrame
    - isTotallyVisibleThroughFrame
    - isTotallyVisibleThroughFrameOnAxis
    - getDroppableDisplaced
    - isVisibleInDroppable
    - isVisibleInViewport
    - 1
    - isPartiallyVisible
    - isTotallyVisible
    - isTotallyVisibleOnAxis
    - getShouldAnimate
    - getTarget
    - getDisplacementGroups
    - process
    - getIndexOfLastItem
    - goAtEnd
    - calculateReorderImpact
    - didStartAfterCritical
    - fromCombine
    - fromReorder
    - moveToNextIndex
    - getCombinedItemDisplacement
    - whenCombining
    - distanceFromStartToBorderBoxCenter
    - distanceFromEndToBorderBoxCenter
    - getCrossAxisBorderBoxCenter
    - goAfter
    - goBefore
    - goIntoStart
    - whenReordering
    - withDroppableDisplacement
    - getResultWithoutDroppableDisplacement
    - getPageBorderBoxCenterFromImpact
    - scrollViewport
    - getDraggables
    - tryGetVisible
    - speculativelyIncrease
    - withViewportDisplacement
    - getClientFromPageBorderBoxCenter
    - isTotallyVisibleInNewLocation
    - moveToNextPlace
    - getKnownActive
    - getBestCrossAxisDroppable
    - getCurrentPageBorderBoxCenter
    - getCurrentPageBorderBox
    - getClosestDraggable
    - getDisplacedBy
    - getRequiredGrowthForPlaceholder
    - withMaxScroll
    - addPlaceholder
    - removePlaceholder
    - moveToNewDroppable
    - proposedIndex
    - moveCrossAxis
    - whatIsDraggedOver
    - 1
    - moveInDirection
    - isMovementAllowed
    - isPositionInFrame
    - run
    - getHasOverlap
    - getFurthestAway
    - getDroppableOver
    - offsetRectByPosition
    - withDroppableScroll
    - getIsDisplaced
    - atIndex
    - getReorderImpact
    - getCombineImpact
    - getDragImpact
    - patchDroppableMap
    - clearUnusedPlaceholder
    - recomputePlaceholders
    - update
    - getDraggables
    - recompute
    - getClientBorderBoxCenter
    - refreshSnap
    - getHomeLocation
    - getLiftEffect
    - patchDimensionMap
    - start
    - finish
    - offsetDraggable
    - getFrame
    - adjustAdditionsForScrollChanges
    - publishWhileDraggingInVirtual
    - isSnapping
    - postDroppableChange
    - removeScrollJumpRequest
    - reducer
    - guard
    - beforeInitialCapture
    - 1
    - initialPublish
    - publishWhileDragging
    - collectionStarting
    - updateDroppableScroll
    - updateDroppableIsEnabled
    - updateDroppableIsCombineEnabled
    - move
    - moveByWindowScroll
    - updateViewportMaxScroll
    - moveUp
    - moveDown
    - moveRight
    - moveLeft
    - flush
    - animateDrop
    - completeDrop
    - drop
    - dropPending
    - dropAnimationFinished
    - checkIndexes
    - validateDimensions
    - lift
    - style
    - moveTo
    - getDropDuration
    - getNewHomeClientOffset
    - getDropImpact
    - dropMiddleware
    - getWindowScroll
    - getWindowScrollBinding
    - getScrollListener
    - updateScroll
    - isActive
    - start
    - stop
    - 1
    - scrollListener
    - getExpiringAnnounce
    - result
    - wasCalled
    - getAsyncMarshal
    - execute
    - add
    - flush
    - areLocationsEqual
    - isCombineEqual
    - isCriticalEqual
    - withTimings
    - getDragStart
    - execute
    - getPublisher
    - beforeCapture
    - beforeStart
    - start
    - update
    - flush
    - drop
    - abort
    - responders
    - dropAnimationFinishMiddleware
    - dropAnimationFlushOnScrollMiddleware
    - clear
    - flushDropAnimation
    - dimensionMarshalStopper
    - focus
    - shouldStop
    - autoScroll
    - pendingDrop
    - createStore
    - 1
    - createPublisher
    - collect
    - add
    - remove
    - stop
    - getMaxScroll
    - getDocumentElement
    - getMaxWindowScroll
    - getViewport
    - getInitialPublish
    - shouldPublishUpdate
    - createDimensionMarshal
    - updateDroppableIsEnabled
    - updateDroppableIsCombineEnabled
    - updateDroppableScroll
    - scrollDroppable
    - stopPublishing
    - subscriber
    - startPublishing
    - canStartDrag
    - scrollWindow
    - getScrollableDroppableOver
    - getBestScrollableDroppable
    - getDistanceThresholds
    - getPercentage
    - getValueFromDistance
    - dampenValueByTime
    - getValue
    - getScrollOnAxis
    - adjustForSizeLimits
    - 1
    - getOverlap
    - getRemainder
    - canPartiallyScroll
    - canScrollWindow
    - getWindowOverlap
    - canScrollDroppable
    - getDroppableOverlap
    - getWindowScrollChange
    - getDroppableScrollChange
    - scroll
    - createFluidScroller
    - tryScroll
    - 1
    - fakeScrollCallback
    - stop
    - createJumpScroller
    - moveByOffset
    - scrollDroppableAsMuchAsItCan
    - scrollWindowAsMuchAsItCan
    - jumpScroller
    - createAutoScroller
    - scroll
    - dragHandle
    - draggable
    - droppable
    - makeGetSelector
    - getStyles
    - 1
    - 1
    - 1
    - getHead
    - createStyleEl
    - useStyleMarshal
    - querySelectorAll
    - getWindowFromEl
    - isHtmlElement
    - findDragHandle
    - useFocusMarshal
    - register
    - unregister
    - tryGiveFocus
    - tryShiftRecord
    - tryRestoreFocusRecorded
    - tryRecordFocus
    - clearFrameOnUnmount
    - createRegistry
    - subscribe
    - unsubscribe
    - notify
    - findDraggableById
    - getDraggableById
    - findDroppableById
    - getDroppableById
    - clean
    - useRegistry
    - unmount
    - getBodyElement
    - getId
    - useAnnouncer
    - setup
    - cleanup
    - remove
    - useUniqueId
    - getElementId
    - useHiddenTextElement
    - mount
    - unmount
    - getVersion
    - isSatisfied
    - checkReactVersion
    - checkDoctype
    - useDev
    - useDevSetupWarning
    - useStartupValidation
    - usePrevious
    - create
    - isClaimed
    - isActive
    - claim
    - release
    - tryAbandon
    - isDragging
    - preventStandardKeyEvents
    - supportedEventName
    - isSloppyClickThresholdExceeded
    - getCaptureBindings
    - useMouseSensor
    - onMouseDown
    - listenForCapture
    - bindCapturingEvents
    - startPendingDrag
    - mount
    - unmount
    - noop
    - getDraggingBindings
    - cancel
    - drop
    - useKeyboardSensor
    - onKeyDown
    - stop
    - tryStartCapture
    - mount
    - unmount
    - getWindowBindings
    - getHandleBindings
    - useTouchSensor
    - getPhase
    - setPhase
    - onTouchStart
    - listenForCapture
    - bindCapturingEvents
    - unbindAll
    - startDragging
    - startPendingDrag
    - mount
    - unmount
    - webkitHack
    - useValidateSensorHooks
    - isAnInteractiveElement
    - isEventInInteractiveElement
    - getBorderBoxCenterPosition
    - isElement
    - supportedMatchesName
    - closestPonyfill
    - closest
    - getSelector
    - findClosestDragHandleFromEvent
    - tryGetClosestDraggableIdFromEvent
    - findDraggable
    - preventDefault
    - isActive
    - canStart
    - tryStart
    - getShouldRespectForcePress
    - isLockActive
    - tryDispatch
    - lift
    - completed
    - finish
    - fluidLift
    - 1
    - snapLift
    - abortPreDrag
    - useSensorMarshal
    - tryAbandonLock
    - listenToStore
    - tryReleaseLock
    - createResponders
    - onBeforeCapureCallback
    - createAutoScrollerOptions
    - getStore
    - App
    - useUniqueContextId
    - DragDropContext
    - getDraggingTransition
    - getDraggingOpacity
    - getShouldDraggingAnimate
    - getDraggingStyle
    - getSecondaryStyle
    - getStyle
    - getDimension
    - useDraggablePublisher
    - checkIsValidInnerRef
    - useValidation
    - prefix
    - useClonePropValidation
    - useRequiredContext
    - preventHtml5Dnd
    - Draggable
    - isStrictEqual
    - whatIsDraggedOverFromResult
    - getCombineWithFromResult
    - getCombineWithFromImpact
    - getDraggableSelector
    - selector
    - getSecondarySnapshot
    - getSecondarySelector
    - getFallback
    - getProps
    - selector
    - 1
    - selector
    - PrivateDraggable
    - PublicDraggable
    - isEqual
    - isEither
    - isBoth
    - isElementScrollable
    - isBodyScrollable
    - getClosestScrollable
    - checkForNestedScrollContainers
    - getScroll
    - getIsFixed
    - getEnv
    - getDroppableDimension
    - frame
    - getClient
    - getDimension
    - closest
    - getListenerOptions
    - getClosestScrollableFromDrag
    - useDroppablePublisher
    - noop
    - getSize
    - getStyle
    - Placeholder
    - isBoolean
    - runChecks
    - required
    - boolean
    - ref
    - placeholder
    - hasClone
    - hasNoPlaceholder
    - useValidation
    - onClose
    - Droppable
    - getClone
    - getBody
    - attachDefaultPropsToOwnProps
    - isMatchingType
    - getDraggable
    - makeMapStateToProps
    - selector
    - ConnectedDroppable
  Comments:
    //github.com/hello-pangea/dnd/blob/main/docs/patterns/virtual-lists.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/doctype.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/using-inner-ref.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/how-we-detect-scroll-containers.md
    //github.com/atlassian/react-beautiful-dnd/issues/131
    //github.com/hello-pangea/dnd/blob/main/docs/api/droppable.md
    //# sourceMappingURL=node_modules_%40hello-pangea_dnd_dist_dnd_esm_f3930d.js.map

File: ./frontend/.next/static/chunks/src_app_alltasks_page_71263d.js

File: ./frontend/.next/static/chunks/node_modules_ef1477._.js
  JavaScript Functions:
    - getComponentNameFromType
    - testStringCoercion
    - checkKeyStringCoercion
    - disabledLog
    - disableLogs
    - reenableLogs
    - describeBuiltInComponentFrame
    - describeNativeComponentFrame
    - describeUnknownElementTypeFrameInDEV
    - getOwner
    - hasValidKey
    - defineKeyPropWarningGetter
    - warnAboutAccessingKey
    - elementRefGetterWithDeprecationWarning
    - ReactElement
    - jsxDEVImpl
    - validateChildKeys
    - isValidElement
    - validateExplicitKey
    - getCurrentComponentErrorInfo
    - _extends
    - is
    - memoizedSelector
    - isValidElementType
    - typeOf
    - isContextConsumer
    - isMemo
    - warning
    - verify
    - verifySubselectors
    - pureFinalPropsSelectorFactory
    - handleFirstCall
    - handleNewPropsAndNewState
    - handleNewProps
    - handleNewState
    - handleSubsequentCalls
    - pureFinalPropsSelector
    - finalPropsSelectorFactory
    - bindActionCreators
    - isPlainObject
    - verifyPlainObject
    - wrapMapToPropsConstant
    - initConstantSelector
    - constantSelector
    - getDependsOnOwnProps
    - wrapMapToPropsFunc
    - initProxySelector
    - mapToPropsProxy
    - detectFactoryAndVerify
    - createInvalidArgFactory
    - mapDispatchToPropsFactory
    - mapStateToPropsFactory
    - defaultMergeProps
    - wrapMergePropsFunc
    - initMergePropsProxy
    - mergePropsProxy
    - mergePropsFactory
    - defaultNoopBatch
    - createListenerCollection
    - unsubscribe
    - createSubscription
    - addNestedSub
    - notifyNestedSubs
    - handleChangeWrapper
    - isSubscribed
    - trySubscribe
    - tryUnsubscribe
    - trySubscribeSelf
    - tryUnsubscribeSelf
    - canUseDOM
    - isRunningInReactNative
    - getUseIsomorphicLayoutEffect
    - is
    - shallowEqual
    - getStatics
    - hoistNonReactStatics
    - getContext
    - stringifyComponent
    - useIsomorphicLayoutEffectWithArgs
    - captureWrapperProps
    - subscribeUpdates
    - checkForUpdates
    - unsubscribeWrapper
    - strictEqual
    - connect
    - wrapWithConnect
    - returned
    - ConnectFunction
    - forwardConnectRef
    - Provider
    - createReduxContextHook
    - useReduxContext2
    - createStoreHook
    - useStore2
    - createDispatchHook
    - useDispatch2
    - refEquality
    - createSelectorHook
    - useSelector2
    - as
    - as
    - to
    - invariant
    - getRect
    - expand
    - shrink
    - shift
    - createBox
    - parse
    - getWindowScroll
    - offset
    - withScroll
    - calculateBox
    - getBox
    - rafSchd
    - wrapperFn
    - formatProdErrorMessage
    - randomString
    - isPlainObject
    - miniKindOf
    - ctorName
    - isError
    - isDate
    - kindOf
    - createStore
    - ensureCanMutateNextListeners
    - getState
    - subscribe
    - unsubscribe
    - dispatch
    - replaceReducer
    - observable
    - observeState
    - legacy_createStore
    - warning
    - getUnexpectedStateShapeWarningMessage
    - assertReducerShape
    - combineReducers
    - combination
    - bindActionCreator
    - bindActionCreators
    - compose
    - applyMiddleware
    - dispatch
    - isAction
    - 2
    - getDevMessage
    - getFormattedMessage
    - log
    - noop
    - getOptions
    - bindEvents
    - unbind
    - unbindAll
    - toString
    - invariant
    - onWindowError
    - getCallbacks
    - setCallbacks
    - position
    - onDragStart
    - withLocation
    - withCombine
    - onDragUpdate
    - returnedToStart
    - onDragEnd
    - isEqual
    - areInputsEqual
    - useMemo
    - useCallback
    - add
    - subtract
    - 1
    - negate
    - patch
    - distance
    - 1
    - apply
    - executeClip
    - offsetByPosition
    - getCorners
    - 1
    - increase
    - clip
    - getSubject
    - scrollDroppable
    - memoizeOne
    - memoized
    - clear
    - tryGetDestination
    - tryGetCombine
    - moveToNextCombine
    - getImpact
    - isHomeOf
    - isWithin
    - isPartiallyVisibleThroughFrame
    - isTotallyVisibleThroughFrame
    - isTotallyVisibleThroughFrameOnAxis
    - getDroppableDisplaced
    - isVisibleInDroppable
    - isVisibleInViewport
    - 1
    - isPartiallyVisible
    - isTotallyVisible
    - isTotallyVisibleOnAxis
    - getShouldAnimate
    - getTarget
    - getDisplacementGroups
    - process
    - getIndexOfLastItem
    - goAtEnd
    - calculateReorderImpact
    - didStartAfterCritical
    - fromCombine
    - fromReorder
    - moveToNextIndex
    - getCombinedItemDisplacement
    - whenCombining
    - distanceFromStartToBorderBoxCenter
    - distanceFromEndToBorderBoxCenter
    - getCrossAxisBorderBoxCenter
    - goAfter
    - goBefore
    - goIntoStart
    - whenReordering
    - withDroppableDisplacement
    - getResultWithoutDroppableDisplacement
    - getPageBorderBoxCenterFromImpact
    - scrollViewport
    - getDraggables
    - tryGetVisible
    - speculativelyIncrease
    - withViewportDisplacement
    - getClientFromPageBorderBoxCenter
    - isTotallyVisibleInNewLocation
    - moveToNextPlace
    - getKnownActive
    - getBestCrossAxisDroppable
    - getCurrentPageBorderBoxCenter
    - getCurrentPageBorderBox
    - getClosestDraggable
    - getDisplacedBy
    - getRequiredGrowthForPlaceholder
    - withMaxScroll
    - addPlaceholder
    - removePlaceholder
    - moveToNewDroppable
    - proposedIndex
    - moveCrossAxis
    - whatIsDraggedOver
    - 1
    - moveInDirection
    - isMovementAllowed
    - isPositionInFrame
    - run
    - getHasOverlap
    - getFurthestAway
    - getDroppableOver
    - offsetRectByPosition
    - withDroppableScroll
    - getIsDisplaced
    - atIndex
    - getReorderImpact
    - getCombineImpact
    - getDragImpact
    - patchDroppableMap
    - clearUnusedPlaceholder
    - recomputePlaceholders
    - update
    - getDraggables
    - recompute
    - getClientBorderBoxCenter
    - refreshSnap
    - getHomeLocation
    - getLiftEffect
    - patchDimensionMap
    - start
    - finish
    - offsetDraggable
    - getFrame
    - adjustAdditionsForScrollChanges
    - publishWhileDraggingInVirtual
    - isSnapping
    - postDroppableChange
    - removeScrollJumpRequest
    - reducer
    - guard
    - beforeInitialCapture
    - 1
    - initialPublish
    - publishWhileDragging
    - collectionStarting
    - updateDroppableScroll
    - updateDroppableIsEnabled
    - updateDroppableIsCombineEnabled
    - move
    - moveByWindowScroll
    - updateViewportMaxScroll
    - moveUp
    - moveDown
    - moveRight
    - moveLeft
    - flush
    - animateDrop
    - completeDrop
    - drop
    - dropPending
    - dropAnimationFinished
    - checkIndexes
    - validateDimensions
    - lift
    - style
    - moveTo
    - getDropDuration
    - getNewHomeClientOffset
    - getDropImpact
    - dropMiddleware
    - getWindowScroll
    - getWindowScrollBinding
    - getScrollListener
    - updateScroll
    - isActive
    - start
    - stop
    - 1
    - scrollListener
    - getExpiringAnnounce
    - result
    - wasCalled
    - getAsyncMarshal
    - execute
    - add
    - flush
    - areLocationsEqual
    - isCombineEqual
    - isCriticalEqual
    - withTimings
    - getDragStart
    - execute
    - getPublisher
    - beforeCapture
    - beforeStart
    - start
    - update
    - flush
    - drop
    - abort
    - responders
    - dropAnimationFinishMiddleware
    - dropAnimationFlushOnScrollMiddleware
    - clear
    - flushDropAnimation
    - dimensionMarshalStopper
    - focus
    - shouldStop
    - autoScroll
    - pendingDrop
    - createStore
    - 1
    - createPublisher
    - collect
    - add
    - remove
    - stop
    - getMaxScroll
    - getDocumentElement
    - getMaxWindowScroll
    - getViewport
    - getInitialPublish
    - shouldPublishUpdate
    - createDimensionMarshal
    - updateDroppableIsEnabled
    - updateDroppableIsCombineEnabled
    - updateDroppableScroll
    - scrollDroppable
    - stopPublishing
    - subscriber
    - startPublishing
    - canStartDrag
    - scrollWindow
    - getScrollableDroppableOver
    - getBestScrollableDroppable
    - getDistanceThresholds
    - getPercentage
    - getValueFromDistance
    - dampenValueByTime
    - getValue
    - getScrollOnAxis
    - adjustForSizeLimits
    - 1
    - getOverlap
    - getRemainder
    - canPartiallyScroll
    - canScrollWindow
    - getWindowOverlap
    - canScrollDroppable
    - getDroppableOverlap
    - getWindowScrollChange
    - getDroppableScrollChange
    - scroll
    - createFluidScroller
    - tryScroll
    - 1
    - fakeScrollCallback
    - stop
    - createJumpScroller
    - moveByOffset
    - scrollDroppableAsMuchAsItCan
    - scrollWindowAsMuchAsItCan
    - jumpScroller
    - createAutoScroller
    - scroll
    - dragHandle
    - draggable
    - droppable
    - makeGetSelector
    - getStyles
    - 1
    - 1
    - 1
    - getHead
    - createStyleEl
    - useStyleMarshal
    - querySelectorAll
    - getWindowFromEl
    - isHtmlElement
    - findDragHandle
    - useFocusMarshal
    - register
    - unregister
    - tryGiveFocus
    - tryShiftRecord
    - tryRestoreFocusRecorded
    - tryRecordFocus
    - clearFrameOnUnmount
    - createRegistry
    - subscribe
    - unsubscribe
    - notify
    - findDraggableById
    - getDraggableById
    - findDroppableById
    - getDroppableById
    - clean
    - useRegistry
    - unmount
    - getBodyElement
    - getId
    - useAnnouncer
    - setup
    - cleanup
    - remove
    - useUniqueId
    - getElementId
    - useHiddenTextElement
    - mount
    - unmount
    - getVersion
    - isSatisfied
    - checkReactVersion
    - checkDoctype
    - useDev
    - useDevSetupWarning
    - useStartupValidation
    - usePrevious
    - create
    - isClaimed
    - isActive
    - claim
    - release
    - tryAbandon
    - isDragging
    - preventStandardKeyEvents
    - supportedEventName
    - isSloppyClickThresholdExceeded
    - getCaptureBindings
    - useMouseSensor
    - onMouseDown
    - listenForCapture
    - bindCapturingEvents
    - startPendingDrag
    - mount
    - unmount
    - noop
    - getDraggingBindings
    - cancel
    - drop
    - useKeyboardSensor
    - onKeyDown
    - stop
    - tryStartCapture
    - mount
    - unmount
    - getWindowBindings
    - getHandleBindings
    - useTouchSensor
    - getPhase
    - setPhase
    - onTouchStart
    - listenForCapture
    - bindCapturingEvents
    - unbindAll
    - startDragging
    - startPendingDrag
    - mount
    - unmount
    - webkitHack
    - useValidateSensorHooks
    - isAnInteractiveElement
    - isEventInInteractiveElement
    - getBorderBoxCenterPosition
    - isElement
    - supportedMatchesName
    - closestPonyfill
    - closest
    - getSelector
    - findClosestDragHandleFromEvent
    - tryGetClosestDraggableIdFromEvent
    - findDraggable
    - preventDefault
    - isActive
    - canStart
    - tryStart
    - getShouldRespectForcePress
    - isLockActive
    - tryDispatch
    - lift
    - completed
    - finish
    - fluidLift
    - 1
    - snapLift
    - abortPreDrag
    - useSensorMarshal
    - tryAbandonLock
    - listenToStore
    - tryReleaseLock
    - createResponders
    - onBeforeCapureCallback
    - createAutoScrollerOptions
    - getStore
    - App
    - useUniqueContextId
    - DragDropContext
    - getDraggingTransition
    - getDraggingOpacity
    - getShouldDraggingAnimate
    - getDraggingStyle
    - getSecondaryStyle
    - getStyle
    - getDimension
    - useDraggablePublisher
    - checkIsValidInnerRef
    - useValidation
    - prefix
    - useClonePropValidation
    - useRequiredContext
    - preventHtml5Dnd
    - Draggable
    - isStrictEqual
    - whatIsDraggedOverFromResult
    - getCombineWithFromResult
    - getCombineWithFromImpact
    - getDraggableSelector
    - selector
    - getSecondarySnapshot
    - getSecondarySelector
    - getFallback
    - getProps
    - selector
    - 1
    - selector
    - PrivateDraggable
    - PublicDraggable
    - isEqual
    - isEither
    - isBoth
    - isElementScrollable
    - isBodyScrollable
    - getClosestScrollable
    - checkForNestedScrollContainers
    - getScroll
    - getIsFixed
    - getEnv
    - getDroppableDimension
    - frame
    - getClient
    - getDimension
    - closest
    - getListenerOptions
    - getClosestScrollableFromDrag
    - useDroppablePublisher
    - noop
    - getSize
    - getStyle
    - Placeholder
    - isBoolean
    - runChecks
    - required
    - boolean
    - ref
    - placeholder
    - hasClone
    - hasNoPlaceholder
    - useValidation
    - onClose
    - Droppable
    - getClone
    - getBody
    - attachDefaultPropsToOwnProps
    - isMatchingType
    - getDraggable
    - makeMapStateToProps
    - selector
    - ConnectedDroppable
    - ChevronRightIcon
    - ChevronDownIcon
    - UserCircleIcon
    - ClipboardDocumentCheckIcon
    - BookmarkIcon
  Comments:
    /**
 * @license React
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    //react.dev/link/special-props)", displayName));
    //react.dev/link/warning-keys for more information.', parentType, childOwner);
    /**
 * @license React
 * use-sync-external-store-with-selector.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    // src/utils/react.ts
    // src/hooks/useSelector.ts
    // src/utils/react-is.ts
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/utils/warning.ts
    // src/connect/verifySubselectors.ts
    // src/connect/selectorFactory.ts
    // src/utils/bindActionCreators.ts
    // src/utils/isPlainObject.ts
    // src/utils/verifyPlainObject.ts
    // src/connect/wrapMapToProps.ts
    // src/connect/invalidArgFactory.ts
    // src/connect/mapDispatchToProps.ts
    // @ts-ignore
    // @ts-ignore
    // src/connect/mapStateToProps.ts
    // @ts-ignore
    // src/connect/mergeProps.ts
    // src/utils/batch.ts
    // src/utils/Subscription.ts
    // src/utils/useIsomorphicLayoutEffect.ts
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/utils/shallowEqual.ts
    // src/utils/hoistStatics.ts
    // src/components/Context.ts
    /* @__PURE__ */
    /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/components/connect.tsx
    // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.
    // @ts-ignore
    // use React's forwardRef to expose a ref of the wrapped component
    // the context consumer to use
    /* @__PURE__ */
    // @ts-ignore
    /* @__PURE__ */
    // @ts-ignore
    /* @__PURE__ */
    // @ts-ignore
    // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing
    // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,
    // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.
    // @ts-ignore
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    /* @__PURE__ */
    // src/components/Provider.tsx
    /* @__PURE__ */
    /* @__PURE__ */
    // src/hooks/useReduxContext.ts
    /* @__PURE__ */
    // src/hooks/useStore.ts
    // @ts-ignore
    /* @__PURE__ */
    // src/hooks/useDispatch.ts
    /* @__PURE__ */
    //redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization", {
    /* @__PURE__ */
    // src/exports.ts
    //# sourceMappingURL=react-redux.mjs.map
    // src/utils/formatProdErrorMessage.ts
    //redux.js.org/Errors?code=${code} for the full message or use the non-minified dev environment for full errors. `;
    // src/utils/symbol-observable.ts
    /* @__PURE__ */
    // src/utils/actionTypes.ts
    // src/utils/isPlainObject.ts
    // src/utils/kindOf.ts
    // src/createStore.ts
    //redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
    /* @__PURE__ */
    /* @__PURE__ */
    //redux.js.org/api/store#subscribelistener for more details.");
    //redux.js.org/api/store#subscribelistener for more details.");
    //redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`);
    /**
       * The minimal observable subscription method.
       * @param observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
    // src/utils/warning.ts
    // src/combineReducers.ts
    /*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.`);
        }
    });
}
function combineReducers(reducers) {
    const reducerKeys = Object.keys(reducers);
    const finalReducers = {};
    for(let i = 0; i < reducerKeys.length; i++){
        const key = reducerKeys[i];
        if ("TURBOPACK compile-time truthy", 1) {
            if (typeof reducers[key] === "undefined") {
                warning(`No reducer provided for key "${key}"`);
            }
        }
        if (typeof reducers[key] === "function") {
            finalReducers[key] = reducers[key];
        }
    }
    const finalReducerKeys = Object.keys(finalReducers);
    let unexpectedKeyCache;
    if (("TURBOPACK compile-time value", "development") !== "production") {
        unexpectedKeyCache = {};
    }
    let shapeAssertionError;
    try {
        assertReducerShape(finalReducers);
    } catch (e) {
        shapeAssertionError = e;
    }
    return function combination(state = {}, action) {
        if (shapeAssertionError) {
            throw shapeAssertionError;
        }
        if ("TURBOPACK compile-time truthy", 1) {
            const warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
            if (warningMessage) {
                warning(warningMessage);
            }
        }
        let hasChanged = false;
        const nextState = {};
        for(let i = 0; i < finalReducerKeys.length; i++){
            const key = finalReducerKeys[i];
            const reducer = finalReducers[key];
            const previousStateForKey = state[key];
            const nextStateForKey = reducer(previousStateForKey, action);
            if (typeof nextStateForKey === "undefined") {
                const actionType = action && action.type;
                throw new Error(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : `When called with an action of type ${actionType ? `"${String(actionType)}"` : "(unknown type)"}, the slice reducer for key "${key}" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.`);
            }
            nextState[key] = nextStateForKey;
            hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
        }
        hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
        return hasChanged ? nextState : state;
    };
}
// src/bindActionCreators.ts
function bindActionCreator(actionCreator, dispatch) {
    return function(...args) {
        return dispatch(actionCreator.apply(this, args));
    };
}
function bindActionCreators(actionCreators, dispatch) {
    if (typeof actionCreators === "function") {
        return bindActionCreator(actionCreators, dispatch);
    }
    if (typeof actionCreators !== "object" || actionCreators === null) {
        throw new Error(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : `bindActionCreators expected an object or a function, but instead received: '${kindOf(actionCreators)}'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?`);
    }
    const boundActionCreators = {};
    for(const key in actionCreators){
        const actionCreator = actionCreators[key];
        if (typeof actionCreator === "function") {
            boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
        }
    }
    return boundActionCreators;
}
// src/compose.ts
function compose(...funcs) {
    if (funcs.length === 0) {
        return (arg)=>arg;
    }
    if (funcs.length === 1) {
        return funcs[0];
    }
    return funcs.reduce((a, b)=>(...args)=>a(b(...args)));
}
// src/applyMiddleware.ts
function applyMiddleware(...middlewares) {
    return (createStore2)=>(reducer, preloadedState)=>{
            const store = createStore2(reducer, preloadedState);
            let dispatch = ()=>{
                throw new Error(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
            };
            const middlewareAPI = {
                getState: store.getState,
                dispatch: (action, ...args)=>dispatch(action, ...args)
            };
            const chain = middlewares.map((middleware)=>middleware(middlewareAPI));
            dispatch = compose(...chain)(store.dispatch);
            return {
                ...store,
                dispatch
            };
        };
}
// src/utils/isAction.ts
function isAction(action) {
    return isPlainObject(action) && "type" in action && typeof action.type === "string";
}
;
 //# sourceMappingURL=redux.mjs.map
}}),
"[project]/node_modules/@hello-pangea/dnd/dist/dnd.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "DragDropContext": (()=>DragDropContext),
    "Draggable": (()=>PublicDraggable),
    "Droppable": (()=>ConnectedDroppable),
    "useKeyboardSensor": (()=>useKeyboardSensor),
    "useMouseSensor": (()=>useMouseSensor),
    "useTouchSensor": (()=>useTouchSensor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2d$dom$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react-dom/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$extends$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@babel/runtime/helpers/esm/extends.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/react-redux/dist/react-redux.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$box$2d$model$2f$dist$2f$css$2d$box$2d$model$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/css-box-model/dist/css-box-model.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$raf$2d$schd$2f$dist$2f$raf$2d$schd$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/raf-schd/dist/raf-schd.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/redux/dist/redux.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
;
const isProduction$1 = ("TURBOPACK compile-time value", "development") === 'production';
const spacesAndTabs = /[ \t]{2,}/g;
const lineStartWithSpaces = /^[ \t]*/
    //github.com/hello-pangea/dnd/blob/main/docs/patterns/virtual-lists.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/doctype.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/using-inner-ref.md
    //github.com/hello-pangea/dnd/blob/main/docs/guides/how-we-detect-scroll-containers.md
    //github.com/atlassian/react-beautiful-dnd/issues/131
    //github.com/hello-pangea/dnd/blob/main/docs/api/droppable.md
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=node_modules_ef1477._.js.map

File: ./frontend/.next/static/chunks/src_app_page_71263d.js

File: ./frontend/.next/static/chunks/pages__app_5771e1._.js

File: ./frontend/.next/static/chunks/[root of the server]__31723f._.js
  JavaScript Functions:
    - defaultSetTimout
    - defaultClearTimeout
    - runTimeout
    - runClearTimeout
    - cleanUpNextTick
    - drainQueue
    - Item
    - noop
    - __nccwpck_require__
    - computeFullKey
    - haveEqualSignatures
    - isReactClass
    - canPreserveStateBetween
    - resolveFamily
    - cloneMap
    - cloneSet
    - getProperty
    - performReactRefresh
    - register
    - setSignature
    - collectCustomHooksForSignature
    - getFamilyByID
    - getFamilyByType
    - findAffectedHostInstances
    - injectIntoGlobalHook
    - hasUnrecoverableErrors
    - _getMountedRootCount
    - is
    - Hello
    - createSignatureFunctionForTransform
    - isLikelyComponentType
    - with
    - isSafeExport
    - registerExportsForReactRefresh
    - getRefreshBoundarySignature
    - isReactRefreshBoundary
    - shouldInvalidateReactRefreshBoundary
    - aggregates
    - scheduleUpdate
    - canApplyUpdate
    - applyUpdate
    - statusHandler
    - mitt
    - with
    - finishes
    - handleSmoothScroll
    - ensures
    - ensureLeadingSlash
    - _export
    - isGroupSegment
    - isParallelRouteSegment
    - addSearchParamsIfPageSegment
    - _export
    - normalizeAppPath
    - normalizeRscURL
    - _export
    - isInterceptionRouteAppPath
    - extractInterceptionRouteInformation
    - isDynamicRoute
    - _export
    - searchParamsToUrlQuery
    - stringifyUrlQueryParam
    - urlQueryToSearchParams
    - assign
    - _export
    - _default
    - setConfig
    - _export
    - execOnce
    - isAbsoluteUrl
    - getLocationOrigin
    - getURL
    - getDisplayName
    - isResSent
    - normalizeRepeatedSlashes
    - loadGetInitialProps
    - stringifyError
    - Portal
    - isBooleanScriptAttribute
    - setAttributesFromProps
    - _export
    - reactElementToDOM
    - isEqualNode
    - updateElements
    - initHeadManager
    - will
    - parsePath
    - addPathPrefix
    - removeTrailingSlash
    - normalizePathTrailingSlash
    - addBasePath
    - getRouteMatcher
    - decode
    - _export
    - did
    - did
    - escapeStringRegexp
    - _export
    - parseParameter
    - parseMatchedParameter
    - getParametrizedRoute
    - getRouteRegex
    - to
    - buildGetSafeRouteKey
    - getSafeKeyFromSegment
    - getNamedParametrizedRoute
    - getNamedRouteRegex
    - getNamedMiddlewareRegex
    - interpolateAs
    - getAssetPathFromRoute
    - parseRelativeUrl
    - getPolicy
    - __unsafeCreateTrustedScriptURL
    - _export
    - getDeploymentIdQueryOrEmptyString
    - encodeURIPath
    - _export
    - withFuture
    - markAssetError
    - isAssetError
    - hasPrefetch
    - getAssetQueryString
    - prefetchViaDom
    - onerror
    - appendScript
    - onerror
    - resolvePromiseWithTimeout
    - getClientBuildManifest
    - __BUILD_MANIFEST_CB
    - getFilesForRoute
    - createRouteLoader
    - maybeExecuteScript
    - fetchStyleSheet
    - _export
    - getHrefForSlug
    - __SSG_MANIFEST_CB
    - var
    - murmurhash2
    - typeOf
    - _export
    - insertStylesheets
    - to
    - loadScript
    - onLoad
    - afterLoad
    - handleClientScriptLoad
    - loadLazyScript
    - addBeforeInteractiveToCache
    - initScriptLoader
    - Script
    - onLoad
    - if
    - _export
    - getObjectClassLabel
    - isPlainObject
    - _export
    - isError
    - safeStringify
    - getProperError
    - _export
    - handleSlug
    - getSortedRoutes
    - getSortedRouteObjects
    - _export
    - ensures
    - normalizePathSep
    - denormalizePagePath
    - normalizeLocalePath
    - lexer
    - parse
    - compile
    - tokensToFunction
    - match
    - regexpToFunction
    - escapeString
    - flags
    - regexpToRegexp
    - arrayToRegexp
    - stringToRegexp
    - tokensToRegexp
    - pathToRegexp
    - getPathMatch
    - that
    - parseUrl
    - _export
    - parse
    - serialize
    - tryDecode
    - getCookieParser
    - parseCookie
    - _export
    - getSafeParamName
    - escapeSegment
    - unescapeSegments
    - matchHas
    - hasMatch
    - compileNonPath
    - prepareDestination
    - pathHasPrefix
    - hasBasePath
    - removeBasePath
    - resolveRewrites
    - handleRewrite
    - modified
    - _export
    - formatUrl
    - formatWithValidation
    - removeLocale
    - omit
    - isLocalURL
    - resolveHref
    - isAPIRoute
    - removePathPrefix
    - getNextPathnameInfo
    - below
    - addPathSuffix
    - addLocale
    - formatNextPathnameInfo
    - compareRouterStates
    - isBot
    - _export
    - buildCancellationError
    - matchesMiddleware
    - stripOrigin
    - prepareUrlAs
    - resolveDynamicRoute
    - getMiddlewareData
    - withMiddlewareEffects
    - fetchRetry
    - tryToParseAsJSON
    - fetchNextData
    - getData
    - createKey
    - handleHardNavigation
    - getCancelledHandler
    - clc
    - handleCancelled
    - cancel
    - onPopState
    - withRouter
    - WithRouterWrapper
    - _export
    - getRouter
    - useRouter
    - createRouter
    - makePublicRouterInstance
    - _export
    - RouteAnnouncer
    - _export
    - _export
    - _export
    - asPathToSearchParams
    - _export
    - adaptForAppRouterInstance
    - adaptForSearchParams
    - adaptForPathParams
    - PathnameContextProviderAdapter
    - value
    - _export
    - isBailoutToCSRError
    - getReactStitchedError
    - appendOwnerStack
    - onRecoverableError
    - handleSpanEnd
    - normalizedAssetPrefix
    - getSocketProtocol
    - getSocketUrl
    - _export
    - addMessageListener
    - sendMessage
    - connectHMR
    - init
    - handleOnline
    - handleMessage
    - handleDisconnect
    - reportToSocket
    - _export
    - isHTTPAccessFallbackError
    - getAccessFallbackHTTPStatus
    - getAccessFallbackErrorTypeByStatus
    - _export
    - isRedirectError
    - isNextRouterError
    - _export
    - drain
    - emit
    - on
    - off
    - parse
    - parseChrome
    - parseWinjs
    - parseGecko
    - parseJSC
    - parseNode
    - _export
    - getDefaultHydrationErrorMessage
    - isHydrationError
    - isReactHydrationErrorMessage
    - getHydrationErrorStackInfo
    - parseStack
    - getLocationType
    - parseStackFrameLocation
    - parseComponentStack
    - _export
    - getHydrationWarningType
    - isHtmlTagsWarning
    - isTextMismatchWarning
    - isTextInTagsMismatchWarning
    - isKnownHydrationWarning
    - getReactHydrationDiffSegments
    - storeHydrationErrorStateFromConsoleArgs
    - _export
    - pushErrorFilterDuplicates
    - useErrorOverlayReducer
    - attachHydrationErrorState
    - _export
    - isWebpackInternalResource
    - formatFrameSourceFile
    - _export
    - getOriginalStackFrame
    - _getOriginalStackFrame
    - getOriginalStackFrames
    - getFrameSource
    - _export
    - getErrorSource
    - decorateServerError
    - getErrorByType
    - _export
    - getFilesystemFrame
    - getServerError
    - ShadowPortal
    - useOnClickOutside
    - Dialog
    - handler
    - handleFocus
    - DialogBody
    - DialogContent
    - DialogHeader
    - noop
    - _templateObject
    - _export
    - capitalize
    - cleanupOS
    - each
    - format
    - forOwn
    - getClassOf
    - isHostType
    - qualify
    - reduce
    - trim
    - parse
    - getLayout
    - getManufacturer
    - getName
    - getOS
    - getProduct
    - getVersion
    - toStringPlatform
    - __nccwpck_require__
    - nmd
    - __nccwpck_require__
    - function
    - contextToElement
    - getShadowHost
    - getDocument
    - isActiveElement
    - getParents
    - findMethodName
    - elementMatches
    - before
    - test
    - after
    - detectFocus
    - readLocalStorage
    - writeLocalStorage
    - get
    - set
    - cssShadowPiercingDeepCombinator
    - mutate
    - mutate
    - validate
    - mutate
    - validate
    - mutate
    - mutate
    - mutate
    - mutate
    - mutate
    - mutate
    - mutate
    - mutate
    - mutate
    - element
    - mutate
    - validate
    - focusInZeroDimensionObject
    - mutate
    - mutate
    - validate
    - mutate
    - mutate
    - validate
    - focusObjectSwf
    - mutate
    - validate
    - mutate
    - validate
    - mutate
    - mutate
    - mutate
    - mutate
    - makeFocusableForeignObject
    - focusSvgForeignObjectHack
    - generate
    - focus
    - validate
    - mutate
    - mutate
    - mutate
    - mutate
    - mutate
    - focusSvgInIframe
    - mutate
    - mutate
    - mutate
    - mutate
    - tabsequenceAreaAtImgPosition
    - executeTests
    - _supports
    - isValidTabindex
    - tabindexValue
    - isUserModifyWritable
    - hasCssOverflowScroll
    - hasCssDisplayFlex
    - isScrollableContainer
    - isFocusRelevantRules
    - isFocusRelevant
    - findIndex
    - getContentDocument
    - getWindow
    - selectInShadows
    - findDocumentHostElement
    - getFrameElement
    - computedStyle
    - notDisplayed
    - notVisible
    - collapsedParent
    - isVisibleRules
    - isVisible
    - getMapByName
    - getImageOfArea
    - isValidArea
    - isNativeDisabledSupported
    - isDisabledFieldset
    - isDisabledForm
    - isDisabled
    - isOnlyTabbableRules
    - isOnlyTabbable
    - isOnlyFocusRelevant
    - isFocusableRules
    - isFocusable
    - createFilter
    - filter
    - queryFocusableStrict
    - selector
    - queryFocusableQuick
    - queryFocusable
    - isTabbableRules
    - isTabbable
    - queryTabbable
    - compareDomPosition
    - sortDomOrder
    - getFirstSuccessorOffset
    - findInsertionOffsets
    - insertElementsAtOffsets
    - signature
    - mergeInDomOrder
    - defineProperties
    - _classCallCheck
    - Maps
    - getAreasFor
    - addMapByName
    - extractAreasFromList
    - sortArea
    - resolveElement
    - defineProperties
    - _classCallCheck
    - Shadows
    - _registerHost
    - _registerHostParent
    - _registerElement
    - extractElements
    - sort
    - _injectHosts
    - _merge
    - _replaceHosts
    - _resolveHostElement
    - _cleanup
    - sortShadowed
    - sortTabindex
    - moveContextToBeginning
    - sortElements
    - queryTabsequence
    - createExpectedModifiers
    - resolveModifiers
    - resolveKey
    - matchModifiers
    - keyBinding
    - getParentComparator
    - isChildOf
    - isParentOf
    - whenKey
    - registerBinding
    - addCallback
    - handleKeyDown
    - disengage
    - _default
    - altShiftTab
    - _export
    - lock
    - unlock
    - Overlay
    - defineProperties
    - _classCallCheck
    - escapeForHtml
    - linkify
    - ansiToHtml
    - ansiToJson
    - ansiToText
    - Anser
    - setupPalette
    - format
    - escapeForHtml
    - linkify
    - ansiToHtml
    - ansiToJson
    - ansiToText
    - process
    - processChunkJson
    - isEmpty
    - processChunk
    - render_data
    - __nccwpck_require__
    - _export
    - decodeHex
    - decodeMagicIdentifier
    - HotlinkedText
    - useOpenInEditor
    - openInEditor
    - EditorLink
    - getFile
    - getImportTraceFiles
    - getEditorLinks
    - Terminal
    - _templateObject
    - _export
    - VersionStalenessInfo
    - getStaleness
    - _export
    - _export
    - _templateObject
    - BuildError
    - CloseIcon
    - LeftRightDialogHeader
    - handler
    - _templateObject
    - _export
    - _templateObject
    - Toast
    - _export
    - exports
    - exports
    - __nccwpck_require__
    - CodeFrame
    - CallStackFrame
    - _export
    - _templateObject
    - RuntimeError
    - CollapseIcon
    - getAdjacentProps
    - PseudoHtmlDiff
    - htmlComponents
    - useCopyLegacy
    - copy
    - useCopyModern
    - copy
    - CopyButton
    - CopyIcon
    - CopySuccessIcon
    - isChrome
    - NodeJsIcon
    - NodeJsDisabledIcon
    - NodejsInspectorCopyButton
    - _export
    - createUnhandledError
    - isUnhandledConsoleOrRejection
    - getUnhandledErrorType
    - _export
    - _templateObject
    - isNextjsLink
    - ErrorDescription
    - getErrorSignature
    - Errors
    - isLoading
    - previous
    - next
    - activeError
    - minimize
    - hide
    - fullscreen
    - _templateObject
    - Base
    - _templateObject
    - _templateObject
    - _templateObject
    - _templateObject
    - ComponentStyles
    - _templateObject
    - CssReset
    - shouldPreventDisplay
    - ReactDevOverlay
    - _export
    - handleError
    - nextJsHandleConsoleError
    - onUnhandledError
    - onUnhandledRejection
    - register
    - unregister
    - onBuildOk
    - onBuildError
    - onRefresh
    - onBeforeRefresh
    - onVersionInfo
    - _export
    - looseToArray
    - initialize
    - register
    - getIsSsr
    - renderApp
    - AppContainer
    - wrapApp
    - renderError
    - Head
    - clearMarks
    - markHydrateComplete
    - markRenderComplete
    - renderReactElement
    - Root
    - doRender
    - resolvePromise
    - lastRenderReject
    - has
    - onStart
    - onHeadCommit
    - onRootCommit
    - render
    - hydrate
    - onPerfEntry
    - isLikelyASyntaxError
    - formatMessage
    - message
    - formatWebpackMessages
    - extractModulesFromTurbopackMessage
    - _export
    - connect
    - clearOutdatedErrors
    - handleSuccess
    - handleWarnings
    - printWarnings
    - handleErrors
    - onBeforeFastRefresh
    - onFastRefresh
    - reportHmrLatency
    - handleAvailableHash
    - processMessage
    - isUpdateAvailable
    - canApplyUpdates
    - afterApplyUpdates
    - handler
    - tryApplyUpdates
    - handleApplyUpdates
    - component
    - performFullReload
    - _default
    - initializeBuildWatcher
    - show
    - hide
    - handleMessage
    - updateContainer
    - createContainer
    - createCss
    - is
    - safeCallbackQueue
    - displayContent
    - pageBootstrap
    - clearIndicator
    - __next_set_public_path__
    - __turbopack_load_page_chunks__
    - SideEffect
    - emitChange
    - isInAmpMode
    - warnOnce
    - warnOnce
    - _export
    - defaultHead
    - onlyReactElement
    - for
    - unique
    - reduceComponents
    - Head
    - _getInitialProps
  Comments:
    //# sourceMappingURL=process.js.map
    /**
 * @license React
 * react-refresh-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    // ATTENTION
    // We never remove these associations.
    // It's OK to reference families, but use WeakMap/Set for types.
    // This WeakMap is read by React, so we only put families
    // that have actually been edited here. This keeps checks fast.
    // $FlowIssue
    // This is cleared on every performReactRefresh() call.
    // It is an array of [Family, NextType] tuples.
    // This is injected by the renderer via DevTools global hook.
    // We keep track of mounted roots so we can schedule updates.
    // If a root captures an error, we remember it so we can retry on edit.
    // In environments that support WeakMap, we also remember the last element for every root.
    // It needs to be weak because we do this even for roots that failed to mount.
    // If there is no WeakMap, we won't attempt to do retrying.
    // $FlowIssue
    // This can happen in an edge case, e.g. if expression like Foo.useSomething
    // depends on Foo which is lazily initialized during rendering.
    // In that case just assume we'll have to remount.
    // Something's wrong. Assume we need to remount.
    // Only check updated types to keep lookups fast.
    // If we didn't care about IE11, we could use new Map/Set(iterable).
    // This is a safety mechanism to protect against rogue getters and Proxies.
    // Intentionally ignore.
    // Now that we got a real edit, we can create associations
    // that will be read by the React reconciler.
    // Determine whether this should be a re-render or a re-mount.
    // TODO: rename these fields to something more meaningful.
    // Families that will re-render preserving state
    // Families that will be remounted
    // Even if there are no roots, set the handler on first update.
    // This ensures that if *new* roots are mounted, they'll use the resolve handler.
    // We snapshot maps and sets that are mutated during commits.
    // If we don't do this, there is a risk they will be mutated while
    // we iterate over them. For example, trying to recover a failed root
    // may cause another root to be added to the failed list -- an infinite loop.
    // Keep trying other roots.
    // Keep trying other roots.
    // This can happen in an edge case, e.g. if we register
    // return value of a HOC but it returns a cached component.
    // Ignore anything but the first registration for each type.
    // Create family or remember to update it.
    // None of this bookkeeping affects reconciliation
    // until the first performReactRefresh() call above.
    // Visit inner types because we might not have registered them.
    // Visit inner types because we might not have signed them.
    // This is lazily called during first render for a type.
    // It captures Hook list at that time so inline requires don't break comparisons.
    // For React Native, the global hook will be set up by require('react-devtools-core').
    // That code will run before us. So we need to monkeypatch functions on existing hook.
    // For React Web, the global hook will be set up by the extension.
    // This will also run before us.
    // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.
    // Note that in this case it's important that renderer code runs *after* this method call.
    // Otherwise, the renderer will think that there is no global hook, and won't do the injection.
    // This isn't a real property on the hook, but it can be set to opt out
    // of DevTools integration and associated warnings and logs.
    // Using console['warn'] to evade Babel and ESLint
    // Here, we just want to get a reference to scheduleRefresh.
    // This version supports React Refresh.
    // Do the same for any already injected roots.
    // This is useful if ReactDOM has already been initialized.
    // https://github.com/facebook/react/issues/17626
    // This version supports React Refresh.
    // We also want to track currently mounted roots.
    // If it was intentionally scheduled, don't attempt to restore.
    // This includes intentionally scheduled unmounts.
    // We need to determine whether this root has just (un)mounted.
    // This logic is copy-pasted from similar logic in the DevTools backend.
    // If this breaks with some refactoring, you'll want to update DevTools too.
    // Mount a new root.
    // Unmount an existing root.
    // We'll remount it on future edits.
    // We'll remount it on future edits.
    // Mount a new root.
    // Always call the decorated DevTools hook.
    // TODO: delete this after removing dependency in RN.
    // Exposed for testing.
    // This is a wrapper over more primitive functions for setting signature.
    // Signatures let us decide whether the Hook order has changed on refresh.
    //
    // This function is intended to be used as a transform target, e.g.:
    // var _s = createSignatureFunctionForTransform()
    //
    // function Hello() {
    //   const [foo, setFoo] = useState(0);
    //   const value = useCustomHook();
    //   _s(); /* Call without arguments triggers collecting the custom Hook list.
    //          * This doesn't happen during the module evaluation because we
    //          * don't want to change the module order with inline requires.
    //          * Next calls are noops. */
    //   return <h1>Hi</h1>;
    // }
    //
    // /* Call with arguments attaches the signature to the type: */
    // _s(
    //   Hello,
    //   'useState{[foo, setFoo]}(0)',
    //   () => [useCustomHook], /* Lazy to avoid triggering inline requires */
    // );
    // We're in the initial phase that associates signatures
    // with the functions. Note this may be called multiple times
    // in HOC chains like _s(hoc1(_s(hoc2(_s(actualFunction))))).
    // We're in the innermost call, so this is the actual type.
    // Set the signature for all types (even wrappers!) in case
    // they have no signatures of their own. This is to prevent
    // problems like https://github.com/facebook/react/issues/20417.
    // We're in the _s() call without arguments, which means
    // this is the time to collect custom Hook signatures.
    // Only do this once. This path is hot and runs *inside* every render!
    // First, deal with classes.
    // React class.
    // This looks like a class.
    // eslint-disable-next-line no-proto
    // It has a superclass.
    // Pass through.
    // This looks like a regular function with empty prototype.
    // For plain functions and arrows, use name as a heuristic.
    // Definitely React components.
    /**
 * MIT License
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
    // This file is copied from the Metro JavaScript bundler, with minor tweaks for
    // webpack 4 compatibility.
    //
    // https://github.com/facebook/metro/blob/d6b9685c730d0d63577db40f41369157f28dfa3a/packages/metro/src/lib/polyfills/require.js
    // TODO: remove this key from page config instead of allow listing it
    // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    // Exit if we can't iterate over exports.
    // This might fail due to circular dependencies
    // This function aggregates updates from multiple modules into a single React Refresh call.
    // Apply update on the next tick.
    // Apply update once the HMR runtime's status is idle.
    // Needs to be compatible with IE11
    //# sourceMappingURL=helpers.js.map
    // Hook into ReactDOM initialization
    // Register global helpers
    // Register a helper for module execution interception
    // Modeled after `useEffect` cleanup pattern:
    // https://react.dev/learn/synchronizing-with-effects#step-3-add-cleanup-if-needed
    //# sourceMappingURL=runtime.js.map
    /*#__PURE__*/
    //# sourceMappingURL=head-manager-context.shared-runtime.js.map
    /*
MIT License

Copyright (c) Jason Miller (https://jasonformat.com/)

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
    // This file is based on https://github.com/developit/mitt/blob/v1.1.3/src/index.js
    // It's been edited for the needs of this script
    // See the LICENSE at the top of the file
    // eslint-disable-next-line array-callback-return
    //# sourceMappingURL=mitt.js.map
    /*#__PURE__*/
    //# sourceMappingURL=router-context.shared-runtime.js.map
    /**
 * Run function with `scroll-behavior: auto` applied to `<html/>`.
 * This css change will be reverted after the function finishes.
 */
    // if only the hash is changed, we don't need to disable smooth scrolling
    // we only care to prevent smooth scrolling when navigating to a new page to avoid jarring UX
    // In Chrome-based browsers we need to force reflow before calling `scrollTo`.
    // Otherwise it will not pickup the change in scrollBehavior
    // More info here: https://github.com/vercel/next.js/issues/40719#issuecomment-1336248042
    //# sourceMappingURL=handle-smooth-scroll.js.map
    /**
 * For a given page path, this function ensures that there is a leading slash.
 * If there is not a leading slash, one is added, otherwise it is noop.
 */
    //# sourceMappingURL=ensure-leading-slash.js.map
    // Use array[0] for performant purpose
    //# sourceMappingURL=segment.js.map
    // Empty segments are ignored.
    // Groups are ignored.
    // Parallel segments are ignored.
    // The last segment (if it's a leaf) should be ignored.
    //# sourceMappingURL=app-paths.js.map
    // TODO-APP: add more serious validation
    // normalize the path, e.g. /(blog)/feed -> /feed
    // (.) indicates that we should match with sibling routes, so we just need to append the intercepted route to the intercepting route
    // (..) indicates that we should match at one level up, so we need to remove the last segment of the intercepting route
    // (...) will match the route segment in the root directory, so we need to use the root directory to prepend the intercepted route
    // (..)(..) indicates that we should match at two levels up, so we need to remove the last two segments of the intercepting route
    //# sourceMappingURL=interception-routes.js.map
    // Identify /[param]/ in route string
    //# sourceMappingURL=is-dynamic.js.map
    //# sourceMappingURL=querystring.js.map
    //# sourceMappingURL=runtime-config.external.js.map
    // Scheme: https://tools.ietf.org/html/rfc3986#section-3.1
    // Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3
    //" + hostname + (port ? ':' + port : '');
    // first we replace any non-encoded backslashes with forward
    // then normalize repeated forward slashes
    //nextjs.org/docs/messages/get-initial-props-as-an-instance-method for more information.';
    // when called from _app `ctx` is nested in `ctx`
    // @ts-ignore pageProps default
    //nextjs.org/docs/messages/empty-object-getInitialProps");
    //# sourceMappingURL=utils.js.map
    /*#__PURE__*/
    //# sourceMappingURL=index.js.map
    // we don't render undefined props to the DOM
    // Correctly assign boolean script attributes
    // https://github.com/vercel/next.js/pull/20748
    // Remove falsy non-zero boolean attributes so they are correctly interpreted
    // (e.g. if we set them to false, this coerces to the string "false", which the browser interprets as true)
    // Call setAttribute before, as we need to set and unset the attribute to override force async:
    // https://html.spec.whatwg.org/multipage/scripting.html#script-force-async
    //# sourceMappingURL=set-attributes-from-props.js.map
    // Only strip the nonce if `oldTag` has had it stripped. An element's nonce attribute will not
    // be stripped if there is no content security policy response header that includes a nonce.
    // meta[charset] must be first element so special case
    // it won't be inlined. In this case revert to the original behavior
    //# sourceMappingURL=head-manager.js.map
    /**
 * Given a path this function will find the pathname, query and hash and return
 * them. This is useful to parse full paths on the client side.
 * @param path A path to parse e.g. /foo/bar?id=1#hash
 */
    //# sourceMappingURL=parse-path.js.map
    //# sourceMappingURL=add-path-prefix.js.map
    /**
 * Removes the trailing slash for a given route or page path. Preserves the
 * root page. Examples:
 *   - `/foo/bar/` -> `/foo/bar`
 *   - `/foo/bar` -> `/foo/bar`
 *   - `/` -> `/`
 */
    //# sourceMappingURL=remove-trailing-slash.js.map
    //# sourceMappingURL=normalize-trailing-slash.js.map
    //# sourceMappingURL=add-base-path.js.map
    //# sourceMappingURL=route-matcher.js.map
    //nextjs.org/docs/messages/public-next-folder-conflict`;
    //nextjs.org/docs/messages/404-get-initial-props`;
    //nextjs.org/docs/messages/gssp-export`;
    //nextjs.org/docs/messages/gssp-component-member`;
    //nextjs.org/docs/messages/non-standard-node-env`;
    //nextjs.org/docs/messages/ssg-fallback-true-export`;
    /**
 * The names of the webpack layers. These layers are the primitives for the
 * webpack chunks.
 */
    /**
   * The layer for the shared code between the client and server bundles.
   */
    /**
   * The layer for server-only runtime and picking up `react-server` export conditions.
   * Including app router RSC pages and app router custom routes and metadata routes.
   */
    /**
   * Server Side Rendering layer for app (ssr).
   */
    /**
   * The browser client bundle layer for actions.
   */
    /**
   * The layer for the API routes.
   */
    /**
   * The layer for the middleware code.
   */
    /**
   * The layer for the instrumentation hooks.
   */
    /**
   * The layer for assets on the edge.
   */
    /**
   * The browser client bundle layer for App directory.
   */
    // pages api
    // app router pages and layouts
    //# sourceMappingURL=constants.js.map
    // regexp is based on https://github.com/sindresorhus/escape-string-regexp
    // see also: https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/escapeRegExp.js#L23
    //# sourceMappingURL=escape-regexp.js.map
    /**
 * Regular expression pattern used to match route parameters.
 * Matches both single parameters and parameter groups.
 * Examples:
 *   - `[[...slug]]` matches parameter group with key 'slug', repeat: true, optional: true
 *   - `[...slug]` matches parameter group with key 'slug', repeat: true, optional: false
 *   - `[[foo]]` matches parameter with key 'foo', repeat: false, optional: true
 *   - `[bar]` matches parameter with key 'bar', repeat: false, optional: false
 */
    /**
 * Parses a matched parameter from the PARAMETER_PATTERN regex to a data structure that can be used
 * to generate the parametrized route.
 * Examples:
 *   - `[...slug]` -> `{ key: 'slug', repeat: true, optional: true }`
 *   - `...slug` -> `{ key: 'slug', repeat: true, optional: false }`
 *   - `[foo]` -> `{ key: 'foo', repeat: false, optional: true }`
 *   - `bar` -> `{ key: 'bar', repeat: false, optional: false }`
 * @param param - The matched parameter to parse.
 * @returns The parsed parameter as a data structure.
 */
    // Check for parameters
    /**
 * Builds a function to generate a minimal routeKey using only a-z and minimal
 * number of characters.
 */
    // replace any non-word characters since they can break
    // the named regex
    // check if the key is still invalid and fallback to using a known
    // safe key
    // if the segment has an interception marker, make sure that's part of the regex pattern
    // this is to ensure that the route with the interception marker doesn't incorrectly match
    // the non-intercepted route (ie /app/(.)[username] should not match /app/[username])
    // Check for parameters
    //# sourceMappingURL=route-regex.js.map
    // Fall back to reading the values from the href
    // TODO: should this take priority; also need to change in the router.
    // support single-level catch-all
    // TODO: more robust handling for user-error (passing `/`)
    // Interpolate group into data URL if present
    // path delimiter escaped since they are being inserted
    // into the URL and we expect URL encoded segments
    // when parsing dynamic route params
    // did not satisfy all requirements
    // n.b. We ignore this error because we handle warning for this case in
    // development in the `<Link>` component directly.
    //# sourceMappingURL=interpolate-as.js.map
    // Translates a logical route into its pages asset path (relative from a common prefix)
    // "asset path" being its javascript file, data file, prerendered html,...
    //# sourceMappingURL=get-asset-path-from-route.js.map
    //# sourceMappingURL=add-locale.js.map
    //n' : (0, _utils.getLocationOrigin)());
    //n' : window.location.href) : globalBase;
    //# sourceMappingURL=parse-relative-url.js.map
    /**
 * Stores the Trusted Types Policy. Starts as undefined and can be set to null
 * if Trusted Types is not supported in the browser.
 */
    /**
 * Getter for the Trusted Types Policy. If it is undefined, it is instantiated
 * here or set to null if Trusted Types is not supported in the browser.
 */
    //# sourceMappingURL=trusted-types.js.map
    //# sourceMappingURL=request-idle-callback.js.map
    //# sourceMappingURL=deployment-id.js.map
    //# sourceMappingURL=encode-uri-path.js.map
    /*#__PURE__*/
    // 3.8s was arbitrarily chosen as it's what https://web.dev/interactive
    // considers as "Good" time-to-interactive. We must assume something went
    // wrong beyond this point, and then fall-back to a full page transition to
    // show the user something of value.
    // with relList.support
    // The order of property assignment here is intentional:
    // `href` should always be last:
    // The order of property assignment here is intentional.
    // 1. Setup success/failure hooks in case the browser synchronously
    //    executes when `src` is set.
    // 2. Configure the cross-origin attribute before setting `src` in case the
    //    browser begins to fetch.
    // 3. Finally, set the source and inject into the DOM in case the child
    //    must be appended for fetching to start.
    // We wait for pages to be built in dev before we start the route transition
    // timeout to prevent an un-necessary hard navigation in development.
    // Resolve a promise that times out after given amount of milliseconds.
    // Resolved, cancel the timeout
    // We wrap these checks separately for better dead-code elimination in
    // production bundles.
    // Mandatory because this is not concurrent safe:
    // Styles are handled by `style-loader` in development:
    // With HMR we might need to "reload" scripts when they are
    // disposed and readded. Executing scripts twice has no functional
    // differences
    // when this entrypoint has been resolved before
    // the route is outdated and we want to invalidate
    // this cache entry
    // we don't want to cache errors during prefetch
    // https://github.com/GoogleChromeLabs/quicklink/blob/453a661fa1fa940e2d2e044452398e38c67a98fb/src/index.mjs#L115-L118
    // License: Apache 2.0
    // Don't prefetch if using 2G or if Save-Data is enabled.
    //# sourceMappingURL=route-loader.js.map
    // Note: This file is JS because it's used by the taskfile-swc.js file, which is JS.
    // Keep file changes in sync with the corresponding `.d.ts` files.
    /**
 * These are the browser versions that support all of the following:
 * static import: https://caniuse.com/es6-module
 * dynamic import: https://caniuse.com/es6-module-dynamic-import
 * import.meta: https://caniuse.com/mdn-javascript_operators_import_meta
 */
    //# sourceMappingURL=modern-browserslist-target.js.map
    /*#__PURE__*/
    //# sourceMappingURL=constants.js.map
    /*#__PURE__*/
    //nextjs.org/docs/messages/failed-to-fetch-devpagesmanifest');
    // Webpack production
    // Turbopack production
    // Development both Turbopack and Webpack
    // TODO: Decide what should happen when fetching fails instead of asserting
    // @ts-ignore
    // TODO Remove this assertion as this could be undefined
    /** the route (file-system path) */
    //# sourceMappingURL=page-loader.js.map
    // minimal implementation MurmurHash2 hash function
    // default to 0.01% error rate as the filter compresses very well
    //# sourceMappingURL=bloom-filter.js.map
    /**
 * @license React
 * react-is.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    /*#__PURE__*/
    /*#__PURE__*/
    // Case 1: Styles for afterInteractive/lazyOnload with appDir injected via handleClientScriptLoad
    //
    // Using ReactDOM.preinit to feature detect appDir and inject styles
    // Stylesheets might have already been loaded if initialized with Script component
    // Re-inject styles here to handle scripts loaded via handleClientScriptLoad
    // ReactDOM.preinit handles dedup and ensures the styles are loaded only once
    // Case 2: Styles for afterInteractive/lazyOnload with pages injected via handleClientScriptLoad
    //
    // We use this function to load styles when appdir is not detected
    // TODO: Use React float APIs to load styles once available for pages dir
    // Script has already loaded
    // Contents of this script are already loading/loaded
    // It is possible that multiple `next/script` components all have same "src", but has different "onLoad"
    // This is to make sure the same remote script will only load once, but "onLoad" are executed in order
    /** Execute after the script first loaded */
    // Run onReady for the first time after load event
    // add cacheKey to LoadCache when load successfully
    // Casting since lib.dom.d.ts doesn't have TrustedHTML yet.
    // do not add cacheKey into LoadCache for remote script here
    // cacheKey will be added to LoadCache when it is actually loaded (see loadPromise above)
    // Load styles associated with this script
    /**
 * Load a third-party scripts in an optimized way.
 *
 * Read more: [Next.js Docs: `next/script`](https://nextjs.org/docs/app/api-reference/components/script)
 */
    // Context is available only during SSR
    /**
   * - First mount:
   *   1. The useEffect for onReady executes
   *   2. hasOnReadyEffectCalled.current is false, but the script hasn't loaded yet (not in LoadCache)
   *      onReady is skipped, set hasOnReadyEffectCalled.current to true
   *   3. The useEffect for loadScript executes
   *   4. hasLoadScriptEffectCalled.current is false, loadScript executes
   *      Once the script is loaded, the onLoad and onReady will be called by then
   *   [If strict mode is enabled / is wrapped in <OffScreen /> component]
   *   5. The useEffect for onReady executes again
   *   6. hasOnReadyEffectCalled.current is true, so entire effect is skipped
   *   7. The useEffect for loadScript executes again
   *   8. hasLoadScriptEffectCalled.current is true, so entire effect is skipped
   *
   * - Second mount:
   *   1. The useEffect for onReady executes
   *   2. hasOnReadyEffectCalled.current is false, but the script has already loaded (found in LoadCache)
   *      onReady is called, set hasOnReadyEffectCalled.current to true
   *   3. The useEffect for loadScript executes
   *   4. The script is already loaded, loadScript bails out
   *   [If strict mode is enabled / is wrapped in <OffScreen /> component]
   *   5. The useEffect for onReady executes again
   *   6. hasOnReadyEffectCalled.current is true, so entire effect is skipped
   *   7. The useEffect for loadScript executes again
   *   8. hasLoadScriptEffectCalled.current is true, so entire effect is skipped
   */
    // Run onReady if script has loaded before but component is re-mounted
    // Script has already loaded during SSR
    // For the app directory, we need React Float to preload these scripts.
    // Injecting stylesheets here handles beforeInteractive and worker scripts correctly
    // For other strategies injecting here ensures correct stylesheet order
    // ReactDOM.preinit handles loading the styles in the correct order,
    // also ensures the stylesheet is loaded only once and in a consistent manner
    //
    // Case 1: Styles for beforeInteractive/worker with appDir - handled here
    // Case 2: Styles for beforeInteractive/worker with pages dir - Not handled yet
    // Case 3: Styles for afterInteractive/lazyOnload with appDir - handled here
    // Case 4: Styles for afterInteractive/lazyOnload with pages dir - handled in insertStylesheets function
    // Before interactive scripts need to be loaded by Next.js' runtime instead
    // of native <script> tags, because they no longer have `defer`.
    // For inlined scripts, we put the content in `children`.
    // Casting since lib.dom.d.ts doesn't have TrustedHTML yet.
    /*#__PURE__*/
    // @ts-ignore
    /*#__PURE__*/
    // @ts-ignore
    //# sourceMappingURL=script.js.map
    /**
   * this used to be previously:
   *
   * `return prototype === null || prototype === Object.prototype`
   *
   * but Edge Runtime expose Object from vm, being that kind of type-checking wrongly fail.
   *
   * It was changed to the current implementation since it's resilient to serialization.
   */
    //# sourceMappingURL=is-plain-object.js.map
    /**
 * Checks whether the given value is a NextError.
 * This can be used to print a more detailed error message with properties like `code` & `digest`.
 */
    // If value is an object and already seen, replace with "[Circular]"
    // provide better error for case where `throw undefined`
    // is called in development
    //nextjs.org/docs/messages/threw-undefined');
    //nextjs.org/docs/messages/threw-undefined');
    //# sourceMappingURL=is-error.js.map
    // The next segment in the urlPaths list
    // Check if the segment matches `[something]`
    // Strip `[` and `]`, leaving only `something`
    // Strip optional `[` and `]`, leaving only `something`
    // Strip `...`, leaving only `something`
    // If the specific segment already has a slug but the slug is not `something`
    // This prevents collisions like:
    // pages/[post]/index.js
    // pages/[id]/index.js
    // Because currently multiple dynamic params on the same segment level are not supported
    // TODO: This error seems to be confusing for users, needs an error link, the description can be based on above comment.
    // slugName is kept as it can only be one particular slugName
    // nextSegment is overwritten to [[...]] so that it can later be sorted specifically
    // slugName is kept as it can only be one particular slugName
    // nextSegment is overwritten to [...] so that it can later be sorted specifically
    // slugName is kept as it can only be one particular slugName
    // nextSegment is overwritten to [] so that it can later be sorted specifically
    // If this UrlNode doesn't have the nextSegment yet we create a new child UrlNode
    // First the UrlNode is created, and every UrlNode can have only 1 dynamic segment
    // Eg you can't have pages/[post]/abc.js and pages/[hello]/something-else.js
    // Only 1 dynamic segment per nesting level
    // So in the case that is test/integration/dynamic-routing it'll be this:
    // pages/[post]/comments.js
    // pages/blog/[post]/comment/[id].js
    // Both are fine because `pages/[post]` and `pages/blog` are on the same level
    // So in this case `UrlNode` created here has `this.slugName === 'post'`
    // And since your PR passed through `slugName` as an array basically it'd including it in too many possibilities
    // Instead what has to be passed through is the upwards path's dynamic names
    // Here the `root` gets injected multiple paths, and insert will break them up into sublevels
    // Smoosh will then sort those sublevels up to the point where you get the correct route definition priority
    // We're assuming here that all the pathnames are unique, that way we can
    // sort the list and use the index as the key.
    // Sort the pathnames.
    // Map the sorted pathnames back to the original objects using the new sorted
    // index.
    //# sourceMappingURL=sorted-routes.js.map
    //# sourceMappingURL=index.js.map
    /**
 * For a given page path, this function ensures that there is no backslash
 * escaping slashes in the path. Example:
 *  - `foo\/bar\/baz` -> `foo/bar/baz`
 */
    //# sourceMappingURL=normalize-path-sep.js.map
    //# sourceMappingURL=denormalize-page-path.js.map
    // first item will be empty string from splitting at first char
    //# sourceMappingURL=normalize-locale-path.js.map
    /**
   * A matcher function that will check if a given pathname matches the path
   * given in the builder function. When the path does not match it will return
   * `false` but if it does it will return an object with the matched params
   * merged with the params provided in the second argument.
   */
    // If no pathname is provided it's not a match.
    // If the path did not match `false` will be returned.
    /**
     * If unnamed params are not allowed they must be removed from
     * the matched parameters. path-to-regexp uses "string" for named and
     * "number" for unnamed parameters.
     */
    //# sourceMappingURL=path-match.js.map
    //# sourceMappingURL=parse-url.js.map
    //# sourceMappingURL=app-router-headers.js.map
    /*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */
    //# sourceMappingURL=get-cookie-parser.js.map
    /**
 * Ensure only a-zA-Z are used for param names for proper interpolating
 * with path-to-regexp
 */
    // A-Z
    // a-z
    // remove port from host if present
    // the value needs to start with a forward-slash to be compiled
    // correctly
    // have already validated before we got to this point and validating
    // breaks compiling destinations with named pattern params from the source
    // e.g. /something:hello(.*) -> /another/:hello is broken with validation
    // since compile validation is meant for reversing and not for inserting
    // params from a separate path-regex into another
    // update any params in query values
    // the value needs to start with a forward-slash to be compiled
    // correctly
    // add path params to query if it's not a redirect and not
    // already defined in destination query or path
    // The compiler also that the interception route marker is an unnamed param, hence '0',
    // so we need to add it to the params object.
    //nextjs.org/docs/messages/invalid-multi-match");
    // Query merge order lowest priority to highest
    // 1. initial URL query values
    // 2. path segment values
    // 3. destination specified query values
    //# sourceMappingURL=prepare-destination.js.map
    //# sourceMappingURL=path-has-prefix.js.map
    //# sourceMappingURL=has-base-path.js.map
    // Can't trim the basePath if it has zero length!
    //# sourceMappingURL=remove-base-path.js.map
    // this is a proxied rewrite which isn't handled on the client
    // check if we now match a page as this means we are done
    // resolving the rewrites
    // check if we match a dynamic-route, if so we break the rewrites chain
    // we don't end after match in beforeFiles to allow
    // continuing through all beforeFiles rewrites
    // check dynamic route before processing fallback rewrites
    //# sourceMappingURL=resolve-rewrites.js.map
    // Format function modified from nodejs
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    /*#__PURE__*/
    //' + (host || '');
    //# sourceMappingURL=format-url.js.map
    //# sourceMappingURL=detect-domain-locale.js.map
    //# sourceMappingURL=remove-locale.js.map
    //# sourceMappingURL=omit.js.map
    // prevent a hydration mismatch on href for url with anchor refs
    // absolute urls can be local if they are on the same origin
    //# sourceMappingURL=is-local-url.js.map
    // we use a dummy base url for relative urls
    // repeated slashes and backslashes in the URL are considered
    // invalid and will never match a Next.js page/file
    //);
    //) or backslashes \\ are not valid in the href.");
    // Return because it cannot be routed by the Next.js router
    //n');
    // fallback to / for invalid asPath values e.g. //
    //n');
    // if the origin didn't change, it means we received a relative href
    //# sourceMappingURL=resolve-href.js.map
    //# sourceMappingURL=is-api-route.js.map
    // If the path doesn't start with the prefix we can return it as is. This
    // protects us from situations where the prefix is a substring of the path
    // prefix such as:
    //
    // For prefix: /blog
    //
    //   /blog -> true
    //   /blog/ -> true
    //   /blog/1 -> true
    //   /blogging -> false
    //   /blogging/ -> false
    //   /blogging/1 -> false
    // Remove the prefix from the path via slicing.
    // If the path without the prefix starts with a `/` we can return it as is.
    // If the path without the prefix doesn't start with a `/` we need to add it
    // back to the path to make sure it's a valid path.
    //# sourceMappingURL=remove-path-prefix.js.map
    //, '').replace(/\.json$/, '').split('/');
    // update pathname with normalized if enabled although
    // we use normalized to populate locale info still
    // If provided, use the locale route normalizer to detect the locale instead
    // of the function below.
    //# sourceMappingURL=get-next-pathname-info.js.map
    //# sourceMappingURL=add-path-suffix.js.map
    // If no locale was given or the locale is the default locale, we don't need
    // to prefix the path.
    // If the path is an API path or the path already has the locale prefix, we
    // don't need to prefix the path.
    // Add the locale prefix to the path.
    //# sourceMappingURL=add-locale.js.map
    //# sourceMappingURL=format-next-pathname-info.js.map
    //# sourceMappingURL=compare-states.js.map
    //# sourceMappingURL=is-bot.js.map
    // tslint:disable:no-console
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // remove basePath first since path prefix has to be in the order of `/${basePath}/${locale}`
    // Check only path match on client. Matching "has" should be done on server
    // where we can access more info such as headers, HttpOnly cookie, etc.
    // If url and as provided as an object representation,
    // we'll format them into the string version here.
    // handle resolving href for dynamic routes
    // eslint-disable-next-line array-callback-return
    // leverage x-matched-path to detect next.config.js rewrites
    // eslint-disable-next-line no-sequences
    // Cookies are required to be present for Next.js' SSG "Preview Mode".
    // Cookies may also be required for `getServerSideProps`.
    //
    // > `fetch` won’t send cookies, unless you set the credentials init
    // > option.
    // https://developer.mozilla.org/docs/Web/API/Fetch_API/Using_Fetch
    //
    // > For maximum browser compatibility when it comes to sending &
    // > receiving cookies, always supply the `credentials: 'same-origin'`
    // > option instead of relying on the default.
    // https://github.com/github/fetch#caveats
    /**
             * When the data response is a redirect because of a middleware
             * we do not consider it an error. The headers must bring the
             * mapped location.
             * TODO: Change the status code in the handler.
             */
    /**
             * We should only trigger a server-side transition if this was
             * caused on a client-side transition. Otherwise, we'd get into
             * an infinite loop.
             */
    // firefox
    // safari
    // when skipping client cache we wait to update
    // inflight cache until successful data response
    // this allows racing click event with fetching newer data
    // without blocking navigation when stale data is available
    // only update cache if not marked as no-cache
    // ensure we don't trigger a hard navigation to the same
    // URL as this can end up with an infinite refresh
    /**
   * Go back in history
   */
    /**
   * Go forward in history
   */
    /**
   * Performs a `pushState` with arguments
   * @param url of the route
   * @param as masks `url` for the browser
   * @param options object you can define `shallow` and other options
   */
    /**
   * Performs a `replaceState` with arguments
   * @param url of the route
   * @param as masks `url` for the browser
   * @param options object you can define `shallow` and other options
   */
    // failed to load build manifest hard navigate
    // to be safe
    //n').pathname);
    //n').pathname)) {
    // if any sub-path of as matches a dynamic filter path
    // it should be hard navigated
    // if the client router filter is matched then we trigger
    // a hard navigation
    // WARNING: `_h` is an internal option for handing Next.js client-side
    // hydration. Your app should _never_ use this property. It may change at
    // any time without notice.
    // for static pages with query params in the URL we delay
    // marking the router ready until after the query is updated
    // or a navigation has occurred
    // if a route transition is already in progress before
    // the query updating is triggered ignore query updating
    // marking route changes as a navigation start entry
    // If the url change is only related to a hash change
    // We should not proceed. We should only change the state.
    // TODO: do we need the resolved href when only a hash change?
    // The build manifest needs to be loaded before auto-static dynamic pages
    // get their query parameters to allow ensuring they can be parsed properly
    // when rewritten to
    // If we fail to resolve the page list or client-build manifest, we must
    // do a server-side transition:
    // If asked to change the current URL we should reload the current page
    // (not location.reload() but reload getInitialProps and other Next.js stuffs)
    // We also need to set the method = replaceState always
    // as this should not go into the history (That's how browsers work)
    // We should compare the new asPath to the current asPath, not the url
    // we need to resolve the as value using rewrites for dynamic SSG
    // pages to allow building the data URL correctly
    // url and as should always be prefixed with basePath by this
    // point by either next/link or router.push/replace so strip the
    // basePath from the pathname to match the pages dir 1-to-1
    // if we detected the path as app route during prefetching
    // trigger hard navigation
    // we don't attempt resolve asPath when we need to execute
    // middleware as the resolving will occur server-side
    //nextjs.org/docs/messages/invalid-relative-url-external-as");
    //nextjs.org/docs/messages/" + (shouldInterpolate ? 'href-interpolation-failed' : 'incompatible-href-as')));
    // Merge params into `query`, overwriting any specified in search
    // If the routeInfo brings a redirect we simply apply it.
    // handle redirect on client-transition
    // Use the destination from redirect without adding locale
    // check if destination is internal (resolves to a page) and attempt
    // client-navigation if it is falling back to hard navigation if
    // it's not
    // handle SSG data 404
    // ensure statusCode is still correct for static 500 page
    // when updating query information
    // shallow routing is only allowed for same page URL changes.
    // the new state that the router gonna set
    // When the page being rendered is the 404 page, we should only update the
    // query parameters. Route changes here might add the basePath when it
    // wasn't originally present. This is also why this block is before the
    // below `changeState` call which updates the browser's history (changing
    // the URL).
    // ensure statusCode is still correct for static 500 page
    // when updating query information
    // for query updates we can skip it if the state is unchanged and we don't
    // need to scroll
    // https://github.com/vercel/next.js/issues/37139
    // A hash mark # is the optional last part of a URL
    // Passing the empty string here should be safe against future changes to the method.
    // https://developer.mozilla.org/docs/Web/API/History/replaceState
    // bubble up cancellation errors
    // If we can't load the page it could be one of following reasons
    //  1. Page doesn't exists
    //  2. Page does exist in a different zone
    //  3. Internal error while loading the page
    // So, doing a hard reload is the proper way to deal with this.
    // Changing the URL doesn't block executing the current code path.
    // So let's throw a cancellation error stop the routing logic.
    /**
     * This `route` binding can change if there's a rewrite
     * so we keep a reference to the original requested route
     * so we can store the cache for it and avoid re-requesting every time
     * for shallow routing purposes.
     */
    // we don't hard error during query updating
    // as it's un-necessary and doesn't need to be fatal
    // unless it is a fallback route and the props can't
    // be loaded
    // when rendering error routes we don't apply middleware
    // effects
    // during query updating the page must match although during
    // client-transition a redirect that doesn't match a page
    // can be returned and this should trigger a hard navigation
    // which is valid for incremental migration
    // Check again the cache with the new destination.
    // If we have a match with the current route due to rewrite,
    // we can copy the existing information to the rewritten one.
    // Then, we return the information along with the matched route.
    // For non-SSG prefetches that bailed before sending data
    // we clear the cache to fetch full response
    // Only bust the data cache for SSP routes although
    // middleware can skip cache per request with
    // x-middleware-cache: no-cache as well
    // we kick off a HEAD request in the background
    // when a non-prefetch request is made to signal revalidation
    /**
   * Callback to execute before replacing router state
   * @param cb callback to be executed
   */
    // Makes sure we scroll to the provided hash if the url/hash are the same
    // If the urls are change, there's more than a hash change
    // If the hash has changed, then it's a hash only change.
    // This check is necessary to handle both the enter and
    // leave hash === '' cases. The identity case falls through
    // and is treated as a next reload.
    // Scroll to top if the hash is just `#` with no value or `#top`
    // To mirror browsers
    // Decode hash to make non-latin anchor works.
    // First we check if the element by id is found
    // If there's no element with the id, we check the `name` property
    // To mirror browsers
    /**
   * Prefetch page code, you may wait for the data during page rendering.
   * This feature only works in production!
   * @param url the href of prefetched page
   * @param asPath the as path of the prefetched page
   */
    // Prefetch is not supported in development mode because it would trigger on-demand-entries
    // Server Data Cache (full data requests)
    // Server Background Cache (HEAD requests)
    // We get state as undefined for two reasons.
    //  1. With older safari (< 8) and older chrome (< 34)
    //  2. When the URL changed with #
    //
    // In the both cases, we don't need to proceed and change the route.
    // (as it's already changed)
    // But we can simply replace the state with the new changes.
    // Actually, for (1) we don't need to nothing. But it's hard to detect that event.
    // So, doing the following for (1) does no harm.
    // __NA is used to identify if the history entry can be handled by the app-router.
    // Safari fires popstateevent when reopening the browser.
    // Make sure we don't re-render on initial load,
    // can be caused by navigating back from an external site
    // If the downstream application returns falsy, return.
    // They will then be responsible for handling the event.
    // @ts-ignore internal value not exposed on types
    // represents the current component key
    // set up the component cache (by route keys)
    // We should not keep the cache, if there's an error
    // Otherwise, this cause issues when when going back and
    // come again to the errored page.
    // Backwards compat for Router.router.events
    // TODO: Should be remove the following major version as it was never documented
    // if auto prerendered and dynamic route wait to update asPath
    // until after mount to prevent hydration mismatch
    // make sure to ignore extra popState in safari on navigating
    // back from external site
    // make sure "as" doesn't start with double slashes or else it can
    // throw an error as it's considered invalid
    //')) {
    // in order for `e.state` to work on the `onpopstate` event
    // we have to register the initial route upon initialization
    // if middleware matches we leave resolving to the change function
    // as the server needs to resolve for correct priority
    // enable custom scroll restoration handling when available
    // otherwise fallback to browser's default handling
    //# sourceMappingURL=router.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=with-router.js.map
    /* global window */
    // Export the singletonRouter and this is the public API.
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // Create public properties and methods of the router in the singletonRouter
    // Events is a static property on the router, the router doesn't have to be initialized to use it
    // Here we need to use Object.defineProperty because we need to return
    // the property assigned to the actual router
    // The value might get changed as we change routes and this is the
    // proper way to access it
    // We don't really know the types here, so we add them later instead
    //nextjs.org/docs/messages/next-router-not-mounted');
    // makes sure query is not stateful
    // Events is a static property on the router, the router doesn't have to be initialized to use it
    //# sourceMappingURL=router.js.map
    /*#__PURE__*/
    // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe
    // Only announce the path change, but not for the first load because screen
    // reader will do that automatically.
    // Every time the path changes, announce the new page’s title following this
    // priority: first the document title (from head), otherwise the first h1, or
    // if none of these exist, then the pathname from the URL. This methodology is
    // inspired by Marcy Sutton’s accessible client routing user testing. More
    // information can be found here:
    // https://www.gatsbyjs.com/blog/2019-07-11-user-testing-accessible-client-routing/
    // If the path hasn't change, we do nothing.
    /*#__PURE__*/
    // Make the announcement immediately.
    //# sourceMappingURL=route-announcer.js.map
    //# sourceMappingURL=image-config.js.map
    /*#__PURE__*/
    //# sourceMappingURL=image-config-context.shared-runtime.js.map
    /*#__PURE__*/
    //# sourceMappingURL=app-router-context.shared-runtime.js.map
    //# sourceMappingURL=hooks-client-context.shared-runtime.js.map
    // Convert router.asPath to a URLSearchParams object
    // example: /dynamic/[slug]?foo=bar -> { foo: 'bar' }
    //n').searchParams;
    //# sourceMappingURL=as-path-to-search-params.js.map
    /*#__PURE__*/
    // isAutoExport is only ever `true` on the first render from the server,
    // so reset it to `false` after we read it for the first time as `true`. If
    // we don't use the value, then we don't need it.
    // When the route is a dynamic route, we need to do more processing to
    // determine if we need to stop showing the pathname.
    // When the router is rendering the fallback page, it can't possibly know
    // the path, so return `null` here. Read more about fallback pages over
    // at:
    // https://nextjs.org/docs/api-reference/data-fetching/get-static-paths#fallback-pages
    // When `isAutoExport` is true, meaning this is a page page has been
    // automatically statically optimized, and the router is not ready, then
    // we can't know the pathname yet. Read more about automatic static
    // optimization at:
    // https://nextjs.org/docs/advanced-features/automatic-static-optimization
    // The `router.asPath` contains the pathname seen by the browser (including
    // any query strings), so it should have that stripped. Read more about the
    // `asPath` option over at:
    // https://nextjs.org/docs/api-reference/next/router#router-object
    //f');
    // fallback to / for invalid asPath values e.g. //
    /*#__PURE__*/
    //# sourceMappingURL=adapters.js.map
    // This has to be a shared module which is shared between client component error boundary and dynamic component
    //# sourceMappingURL=bailout-to-csr.js.map
    //# sourceMappingURL=report-global-error.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    // has the react-stack-bottom-frame
    // Copy all enumerable properties, e.g. digest
    // Avoid duplicate overriding stack frames
    // Avoid duplicate overriding stack frames
    // Override stack
    //# sourceMappingURL=stitched-error.js.map
    // This module can be shared between both pages router and app router
    /*#__PURE__*/
    // x-ref: https://github.com/facebook/react/pull/28736
    // In development mode, pass along the component stack to the error
    // Skip certain custom errors which are not expected to be reported on client
    //# sourceMappingURL=shared.js.map
    /*#__PURE__*/
    //# sourceMappingURL=tracer.js.map
    /*#__PURE__*/
    //# sourceMappingURL=hot-reloader-types.js.map
    // remove all leading slashes and trailing slashes
    // if an assetPrefix was '/', we return empty string
    // because it could be an unnecessary trailing slash
    // assuming assetPrefix here is a pathname-style,
    // restore the leading slash
    //# sourceMappingURL=normalized-asset-prefix.js.map
    // assetPrefix is a url
    // since normalized asset prefix is ensured to be a URL format,
    // we can safely replace the protocol
    //" + hostname + (port ? ":" + port : '') + prefix;
    //# sourceMappingURL=get-socket-url.js.map
    // While the page is reloading, don't respond to any more messages.
    // On reconnect, the server may send an empty list of changes if it was restarted.
    // Coerce into HMR_ACTION_TYPES as that is the format.
    // Either the server's session id has changed and it's a new server, or
    // it's been too long since we disconnected and we should reload the page.
    // There could be 1) unhandled server errors and/or 2) stale content.
    // Perform a hard reload of the page.
    // After 25 reconnects we'll want to reload the page as it indicates the dev server is no longer running.
    // Try again after 5 seconds
    //# sourceMappingURL=websocket.js.map
    //# sourceMappingURL=report-to-socket.js.map
    //# sourceMappingURL=http-access-fallback.js.map
    /*#__PURE__*/
    //# sourceMappingURL=redirect-status-code.js.map
    /*#__PURE__*/
    //# sourceMappingURL=redirect-error.js.map
    //# sourceMappingURL=is-next-router-error.js.map
    // Draining should never happen synchronously in case multiple handlers are
    // registered.
    // Or, if all handlers removed themselves as a result of handling the
    // event(s)
    //# sourceMappingURL=bus.js.map
    /*#__PURE__*/
    //react.dev/link/hydration-mismatch';
    // React built-in hydration diff starts with a newline, checking if length is > 1
    //# sourceMappingURL=is-hydration-error.js.map
    // throw away eval information that stacktrace-parser doesn't support
    // adapted from https://github.com/stacktracejs/error-stack-parser/blob/9f33c224b5d7b607755eb277f9d51fcdb7287e24/error-stack-parser.js#L59C33-L59C62
    //').replace(/\),.*$/g, ')');
    //' + distDir.concat(res.pop()) + url.search;
    //# sourceMappingURL=parse-stack.js.map
    /*#__PURE__*/
    /**
 * Get the type of frame line based on the location
 */
    //')) {
    //')) {
    //') || location.startsWith('https://')) {
    //')) {
    // When the location is a URL we only show the file
    // TODO: Resolve http(s) URLs through sourcemaps
    // TODO: support safari stack trace
    // Get component and file from the component stack line
    // Stop parsing the component stack if we reach a Next.js component
    //# sourceMappingURL=parse-component-stack.js.map
    // https://github.com/facebook/react/blob/main/packages/react-dom/src/__tests__/ReactDOMHydrationDiff-test.js used as a reference
    // TODO: Doesn't make sense to treat no message as a hydration error message.
    // We should bail out somewhere earlier.
    // React 18 has the `Warning: ` prefix.
    // React 19 does not.
    // remove the last %s from the message
    //# sourceMappingURL=hydration-error-info.js.map
    // Filter out duplicate errors
    // and UNHANDLED_REJECTION events might be dispatched between the
    // BEFORE_REFRESH and the REFRESH event. We want to keep those errors
    // around until the next refresh. Otherwise we run into a race
    // condition where those errors would be cleared on refresh completion
    // before they can be displayed.
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    //# sourceMappingURL=shared.js.map
    //nextjs.org/docs/messages/react-hydration-error')) {
    // If there's any extra information in the error message to display,
    // append it to the error message details property
    // The patched console.error found hydration errors logged by React
    // Append the logged warning to the error message
    // It contains the warning, component stack, server and client tag names
    //# sourceMappingURL=attach-hydration-error-state.js.map
    //# sourceMappingURL=webpack-module-path.js.map
    // TODO: merge this section into ignoredList handling
    //' || ((_source_file = source.file) == null ? void 0 : _source_file.match(/^node:/)) || ((_source_file1 = source.file) == null ? void 0 : _source_file1.match(/https?:\/\//))) {
    // Skip URL parsing for webpack internal file paths.
    // Strip the origin for same-origin scripts.
    // URLs can be valid without an `origin`, so long as they have a
    // `protocol`. However, `origin` is preferred.
    // Strip query string information as it's typically too verbose to be
    // meaningful.
    //# sourceMappingURL=stack-frame.js.map
    //# sourceMappingURL=error-source.js.map
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    //# sourceMappingURL=get-error-by-type.js.map
    // Win32:
    // Win32 UNC:
    //" + f.file;
    // If this is an internal Turbopack error we shouldn't show internal details
    // to the user. These are written to a log file instead.
    //# sourceMappingURL=node-stack-frames.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=ShadowPortal.js.map
    /*#__PURE__*/
    // Do nothing if clicking ref's element or descendent elements
    //# sourceMappingURL=use-on-click-outside.js.map
    /*#__PURE__*/
    // Make HTMLElements with `role=link` accessible to be triggered by the
    // keyboard, i.e. [Enter].
    // Always true, but we do this for TypeScript:
    // safari will force itself as the active application when a background page triggers any sort of autofocus
    // this is a workaround to only set the dialog role if the document has focus
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=Dialog.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=DialogBody.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=DialogContent.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=DialogHeader.js.map
    //# sourceMappingURL=noop-template.js.map
    /* banner width: */
    /* calc(padding + banner width offset) */
    //# sourceMappingURL=styles.js.map
    //# sourceMappingURL=index.js.map
    /*!
 * Platform.js v1.3.6
 * Copyright 2014-2020 Benjamin Tan
 * Copyright 2011-2013 John-David Dalton
 * Available under MIT license
 */
    //i.test(e)) {
    /* eslint-disable */
    // @ts-nocheck
    // Copied from https://github.com/medialize/ally.js
    // License: MIT
    // Copyright (c) 2015 Rodney Rehm
    //
    // Entrypoint: ally.js/maintain/tab-focus
    /*#__PURE__*/
    /*#__PURE__*/
    // input may be undefined, selector-tring, Node, NodeList, HTMLCollection, array of Nodes
    // yes, to some extent this is a bad replica of jQuery's constructor function
    // instanceof Node - does not work with iframes
    // walk up to the root
    // https://developer.mozilla.org/docs/Web/API/Node.nodeType
    // NOTE: Firefox 34 does not expose ShadowRoot.host (but 37 does)
    // the root is attached to a fragment node that has a host
    // [elem, elem.parent, elem.parent.parent, …, html]
    // will not contain the shadowRoot (DOCUMENT_FRAGMENT_NODE) and shadowHost
    // IE does know support parentElement on SVGElement
    // Element.prototype.matches may be available at a different name
    // https://developer.mozilla.org/en/docs/Web/API/Element/matches
    // deep clone of original platform
    // operating system
    // layout
    // browser version (not layout engine version!)
    // operating system
    // layout
    // INTERNET EXPLORERS
    // remember what had focus to restore after test
    // remember scroll positions to restore after test
    // wrap tests in an element hidden from screen readers to prevent them
    // from announcing focus, which can be quite irritating to the user
    // options.element:
    //  {string} element name
    //  {function} callback(wrapper, document) to generate an element
    // options.mutate: (optional)
    //  {function} callback(element, wrapper, document) to manipulate element prior to focus-test.
    //             Can return DOMElement to define focus target (default: element)
    // options.validate: (optional)
    //  {function} callback(element, focusTarget, document) to manipulate test-result
    // make sure we operate on a clean slate
    // create dummy element to test focusability of
    // allow callback to further specify dummy element
    // and optionally define element to focus
    // element needs to be part of the DOM to be focusable
    // test if the element with invalid tabindex can be focused
    // validate test's result
    // restore focus to what it was before test and cleanup
    // IE10 does not redirect focus to <body> when the activeElement is removed
    // restore scroll position
    // this file is overwritten by `npm run build:pre`
    /*
    Facility to cache test results in localStorage.

    USAGE:
      cache.get('key');
      cache.set('key', 'value');
 */
    // allow reading from storage to retrieve previous support results
    // even while the document does not have focus
    // if the document does not have focus when tests are executed, focus() may
    // not be handled properly and events may not be dispatched immediately.
    // This can happen when a document is reloaded while Developer Tools have focus.
    // ignore
    // ignore
    // update the cache if ally or the user agent changed (newer version, etc)
    // see https://dev.w3.org/csswg/css-scoping-1/#deep-combinator
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1117572
    // https://code.google.com/p/chromium/issues/detail?id=446051
    // old syntax supported at least up to Chrome 41
    // https://code.google.com/p/chromium/issues/detail?id=446051
    ///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7';
    // https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-usemap
    // https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-usemap
    // fixes https://github.com/medialize/ally.js/issues/35
    // Firefox loads the DataURI asynchronously, causing a false-negative
    // https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-usemap
    // fixes https://github.com/medialize/ally.js/issues/35
    // Firefox loads the DataURI asynchronously, causing a false-negative
    // invalid media file can trigger warning in console, data-uri to prevent HTTP request
    // IE9 may throw "Error: Not implemented"
    ///ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ';
    // NOTE: https://github.com/medialize/ally.js/issues/35
    // https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-usemap
    // Children of focusable elements with display:flex are focusable in IE10-11
    // fieldset[tabindex=0][disabled] should not be focusable, but Blink and WebKit disagree
    // @specification https://www.w3.org/TR/html5/disabled-elements.html#concept-element-disabled
    // @browser-issue Chromium https://crbug.com/453847
    // @browser-issue WebKit https://bugs.webkit.org/show_bug.cgi?id=141086
    // elements with display:flex are focusable in IE10-11
    // form[tabindex=0][disabled] should be focusable as the
    // specification doesn't know the disabled attribute on the form element
    // @specification https://www.w3.org/TR/html5/forms.html#the-form-element
    // NOTE: https://github.com/medialize/ally.js/issues/35
    // fixes https://github.com/medialize/ally.js/issues/20
    // https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-ismap
    // NOTE: https://github.com/medialize/ally.js/issues/35
    // https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-usemap
    // iframe must be part of the DOM before accessing the contentWindow is possible
    // create the iframe's default document (<html><head></head><body></body></html>)
    // Firefox allows *any* value and treats invalid values like tabindex="-1"
    // @browser-issue Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054
    // force layout in Chrome 49, otherwise the element won't be focusable
    /* eslint-disable no-unused-vars */
    /* eslint-enable no-unused-vars */
    // Note: IE10 on BrowserStack does not like this test
    // Note: IE10 on BrowserStack does not like this test
    // Firefox seems to be handling the object creation asynchronously and thereby produces a false negative test result.
    // Because we know Firefox is able to focus object elements referencing SVGs, we simply cheat by sniffing the user agent string
    // Every Environment except IE9 considers SWF objects focusable
    // focus the <img>, not the <div>
    // see https://jsbin.com/nenirisage/edit?html,js,console,output
    // take care of focus in validate();
    // Firefox requires this test to focus the <fieldset> first, while this is not necessary in
    // https://jsbin.com/nenirisage/edit?html,js,console,output
    // https://github.com/medialize/ally.js/issues/21
    // https://github.com/medialize/ally.js/issues/21
    // https://github.com/medialize/ally.js/issues/21
    // Constructs <foreignObject width="30" height="30"><input type="text"/></foreignObject>
    // without raising a Trusted Types violation
    //www.w3.org/2000/svg', 'foreignObject');
    // Edge13, Edge14: foreignObject focus hack
    // https://jsbin.com/kunehinugi/edit?html,js,output
    // https://jsbin.com/fajagi/3/edit?html,js,output
    // inject and focus an <input> element into the SVG element to receive focus
    // upon disabling the activeElement, IE and Edge
    // will not shift focus to <body> like all the other
    // browsers, but instead find the first focusable
    // ancestor and shift focus to that
    // clean up
    //www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">' + element + '</svg>';
    // Safari 8's querySelector() can't identify foreignObject, but getElementsByTagName() can
    // Firefox seems to be handling the SVG-document-in-iframe creation asynchronously
    // and thereby produces a false negative test result. Thus the test is pointless
    // and we resort to UA sniffing once again.
    // see http://jsbin.com/vunadohoko/1/edit?js,console,output
    // Firefox allows *any* value and treats invalid values like tabindex="-1"
    // @browser-issue Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054
    // IE9 has a problem replacing TBODY contents with innerHTML.
    // https://stackoverflow.com/a/8097055/515124
    // element.innerHTML = '<tr><td>cell</td></tr>';
    // invalid media file can trigger warning in console, data-uri to prevent HTTP request
    // IE9 may throw "Error: Not implemented"
    // https://jsbin.com/vafaba/3/edit?html,js,console,output
    // https://www.w3.org/TR/html5/infrastructure.html#rules-for-parsing-integers
    // NOTE: all browsers agree to allow trailing spaces as well
    // Edge 14 has a capitalization problem on SVG elements,
    // see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/9282058/
    // older Firefox and Internet Explorer don't support tabindex on SVG elements
    // @browser-issue Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054
    // an element matches the tabindex selector even if its value is invalid
    // IE11 parses tabindex="" as the value "-32768"
    // @browser-issue Trident https://connect.microsoft.com/IE/feedback/details/1072965
    // Edge 14 has a capitalization problem on SVG elements,
    // see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/9282058/
    // @browser-issue Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054
    // this is a shared utility file for focus-relevant.js and tabbable.js
    // separate testing of this file's functions is not necessary,
    // as they're implicitly tested by way of the consumers
    // https://www.w3.org/TR/1999/WD-css3-userint-19990916#user-modify
    // https://github.com/medialize/ally.js/issues/17
    // Internet Explorer advances scrollable containers and bodies to focusable
    // only if the scrollable container is <div> or <span> - this does *not*
    // happen for <section>, <article>, …
    // a ShadowDOM host receives focus when the focus moves to its content
    // input[type="hidden"] supports.cannot be focused
    // specifics filtered in is/focusable
    // specifics filtered in is/focusable
    // specifics filtered in is/focusable
    // object[usemap] is not focusable in any browser
    // object[type="image/svg+xml"] is not focusable in Internet Explorer
    // object[type="application/x-shockwave-flash"] is not focusable in Internet Explorer 9
    // browsing context containers
    // embed is considered focus-relevant but not focusable
    // see https://github.com/medialize/ally.js/issues/82
    // also see CSS property user-modify below
    // Gecko, Trident and Edge do not allow an image with an image map and tabindex to be focused,
    // it appears the tabindex is overruled so focus is still forwarded to the <map>
    // IE10-11 supports.can focus <table> and <td>
    // IE10-11 supports.can focus <fieldset>
    // <use> cannot be made focusable by adding a tabindex attribute anywhere but Blink and WebKit
    // <use> can only be made focusable in Blink and WebKit
    // Firefox 51 and 52 treat any natively tabbable SVG element with
    // tabindex="-1" as tabbable and everything else as inert
    // see https://bugzilla.mozilla.org/show_bug.cgi?id=1302340
    // Internet Explorer understands the focusable attribute introduced in SVG Tiny 1.2
    // Internet Explorer understands the focusable attribute introduced in SVG Tiny 1.2
    // https://www.w3.org/TR/html5/editing.html#sequential-focus-navigation-and-the-tabindex-attribute
    // IE10-11 considers the <img> in <a href><img ismap> focusable
    // https://github.com/medialize/ally.js/issues/20
    // https://github.com/medialize/ally.js/issues/21
    // Internet Explorer does will consider the scrollable area focusable
    // if the element is a <div> or a <span> and it is in fact scrollable,
    // regardless of the CSS overflow property
    // Firefox requires proper overflow setting, IE does not necessarily
    // https://developer.mozilla.org/docs/Web/CSS/overflow
    // elements with display:flex are focusable in IE10-11
    // scrollable bodies are focusable Internet Explorer
    // https://github.com/medialize/ally.js/issues/21
    // Children of focusable elements with display:flex are focusable in IE10-11
    // NOTE: elements marked as inert are not focusable,
    // but that property is not exposed to the DOM
    // https://www.w3.org/TR/html5/editing.html#inert
    // bind exceptions to an iterator callback
    // provide isFocusRelevant(context) as default iterator callback
    // attempt to use native or polyfilled Array#findIndex first
    // shortcut if the array is empty
    // otherwise loop over array
    // works on <object> and <iframe>
    // works on <object> and <iframe>
    // works on <object> and <iframe> that contain SVG
    // SecurityError: Failed to read the 'contentDocument' property from 'HTMLObjectElement'
    // also IE may throw member not found exception e.g. on <object type="image/png">
    // if there is no parent browsing context,
    // we're not going to get a frameElement either way
    // see https://developer.mozilla.org/docs/Web/API/Window/frameElement
    // does not work within <embed> anywhere, and not within in <object> in IE
    // https://www.w3.org/TR/html5/rendering.html#being-rendered
    // <area> is not rendered, but we *consider* it visible to simplfiy this function's usage
    // display:none is not visible (optimized away at layout)
    // https://github.com/jquery/jquery-ui/blob/master/ui/core.js#L109-L114
    // NOTE: a nested element can reverse visibility:hidden|collapse by explicitly setting visibility:visible
    // NOTE: visibility can be ["", "visible", "hidden", "collapse"]
    // there is no hidden element
    // there is no visible element (but a hidden element)
    // there is a hidden element and it's closer than the first visible element
    // there may be a hidden element, but the closest element is visible
    // "content children" of a closed details element are not visible
    // in Internet Explorer <audio> has a default display: none, where others have display: inline
    // but IE allows focusing <audio style="display:none">, but not <div display:none><audio>
    // this is irrelevant to other browsers, as the controls attribute is required to make <audio> focusable
    // elements within a browsing context are affected by the
    // browsing context host element's visibility and tabindex
    // bind exceptions to an iterator callback
    // provide isVisible(context) as default iterator callback
    // apparently getElementsByName() also considers id attribute in IE & opera
    // https://developer.mozilla.org/docs/Web/API/Document/getElementsByName
    // NOTE: image maps can also be applied to <object> with image content,
    // but no browser supports this at the moment
    // HTML5 specifies HTMLMapElement.images to be an HTMLCollection of all
    // <img> and <object> referencing the <map> element, but no browser implements this
    //   https://www.w3.org/TR/html5/embedded-content-0.html#the-map-element
    //   https://developer.mozilla.org/docs/Web/API/HTMLMapElement
    // the image must be valid and loaded for the map to take effect
    // https://developer.mozilla.org/docs/Web/HTML/Element/map
    // https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-usemap
    // https://github.com/jquery/jquery-ui/blob/master/ui/core.js#L88-L107
    // Blink and WebKit do not consider <area tabindex="-1" href="#void"> focusable
    // Firefox only allows fully loaded images to reference image maps
    // https://stereochro.me/ideas/detecting-broken-images-js
    // Firefox supports.can focus area elements even if they don't have an href attribute
    // Internet explorer supports.can focus area elements without href if either
    // the area element or the image element has a tabindex attribute
    // https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-usemap
    // https://www.w3.org/TR/html5/disabled-elements.html#concept-element-disabled
    // treat ally's element/disabled like the DOM native element.disabled
    // non-form elements do not support the disabled attribute
    // the element itself is disabled
    // a parental <fieldset> is disabld and inherits the state onto this element
    // a parental <form> is disabld and inherits the state onto this element
    // iframe[tabindex="-1"] and object[tabindex="-1"] inherit the
    // tabbable demotion onto elements of their browsing contexts
    // Firefox cannot focus, but tab to: label[tabindex=0]
    // SVG Elements were keyboard focusable but not script focusable before Firefox 51.
    // Firefox 51 added the focus management DOM API (.focus and .blur) to SVGElement,
    // see https://bugzilla.mozilla.org/show_bug.cgi?id=778654
    // any focusable child of <svg> cannot be focused, but tabbed to
    // bind exceptions to an iterator callback
    // provide isOnlyTabbable(context) as default iterator callback
    // embed is considered focus-relevant but not focusable
    // see https://github.com/medialize/ally.js/issues/82
    // ShadowDOM host elements *may* receive focus
    // even though they are not considered focuable
    // <label tabindex="0"> is only tabbable in Firefox, not script-focusable
    // there's no way to make an element focusable other than by adding a tabindex,
    // and focus behavior of the label element seems hard-wired to ignore tabindex
    // in some browsers (like Gecko, Blink and WebKit)
    // Internet Explorer understands the focusable attribute introduced in SVG Tiny 1.2
    // Gecko, Trident and Edge do not allow an image with an image map and tabindex to be focused,
    // it appears the tabindex is overruled so focus is still forwarded to the <map>
    // all <area>s are considered relevant,
    // but only the valid <area>s are focusable
    // some elements may be keyboard focusable, but not script focusable
    // elements that are not rendered, cannot be focused
    // WebKit and Blink can focus content in hidden <iframe> and <object>
    // Blink allows focusing the object element, even if it has visibility: hidden;
    // @browser-issue Blink https://code.google.com/p/chromium/issues/detail?id=586191
    // WebKit can not focus content in <object> if it doesn't have dimensions
    // bind exceptions to an iterator callback
    // provide isFocusRelevant(context) as default iterator callback
    // see https://developer.mozilla.org/docs/Web/API/NodeFilter
    // return ShadowRoot elements regardless of them being focusable,
    // so they can be walked recursively later
    // finds elements that could have been found by document.querySelectorAll()
    // IE requires a function, Browsers require {acceptNode: function}
    // see http://www.bennadel.com/blog/2607-finding-html-comment-nodes-in-the-dom-using-treewalker.htm
    // see https://developer.mozilla.org/docs/Web/API/Document/createTreeWalker
    // add context if requested and focusable
    // NOTE: this selector MUST *never* be used directly,
    // https://www.w3.org/TR/html5/editing.html#sequential-focus-navigation-and-the-tabindex-attribute
    // IE11 supports.can focus <table> and <td>
    // IE11 supports.can focus <fieldset>
    // Namespace problems of [xlink:href] explained in https://stackoverflow.com/a/23047888/515124
    // svg a[*|href] does not match in IE9, but since we're filtering
    // through is/focusable we can include all <a> from SVG
    // may behave as 'svg, svg *,' in chrome as *every* svg element with a focus event listener is focusable
    // navigational elements
    // validity determined by is/valid-area.js
    // validity determined by is/disabled.js
    // browsing context containers
    // interactive content
    // validity determined by is/valid-tabindex.js
    // editing hosts
    // where ShadowDOM is supported, we also want the shadowed focusable elements (via ">>>" or "/deep/")
    // the selector potentially matches more than really is focusable
    // add context if requested and focusable
    // Internet Explorer 11 considers fieldset, table, td focusable, but not tabbable
    // Internet Explorer 11 considers body to have [tabindex=0], but does not allow tabbing to it
    // External keyboard support worked fine in CHrome 42, but stopped working in Chrome 45.
    // The on-screen keyboard does not provide a way to focus the next input element (like iOS does).
    // That leaves us with no option to advance focus by keyboard, ergo nothing is tabbable (keyboard focusable).
    // iOS only does not consider anything from another browsing context keyboard focusable
    // iframe[tabindex="-1"] and object[tabindex="-1"] inherit the
    // tabbable demotion onto elements of their browsing contexts
    // Blink and WebKit consider elements in hidden browsing contexts focusable, but not tabbable
    // Webkit and Blink don't consider anything in <object> tabbable
    // Blink fixed that fixed in Chrome 54, Opera 41
    // Edge 14+ considers <a xlink:href="…" tabindex="-1"> keyboard focusable
    // if the element is in a nested browsing context
    // NOTE: Firefox 31 considers [contenteditable] to have [tabindex=-1], but allows tabbing to it
    // fixed in Firefox 40 the latest - https://bugzilla.mozilla.org/show_bug.cgi?id=1185657
    // tabbing can still be disabled by explicitly providing [tabindex="-1"]
    // iOS only considers a hand full of elements tabbable (keyboard focusable)
    // this holds true even with external keyboards
    // In Chrome and Safari 9 the <use> element is keyboard focusable even for tabindex="-1"
    // in Trident and Gecko SVGElement does not handle the tabIndex property properly
    // Firefox 51 and 52 treat any natively tabbable SVG element with
    // tabindex="-1" as tabbable and everything else as inert
    // see https://bugzilla.mozilla.org/show_bug.cgi?id=1302340
    // older Internet Explorers consider <svg> keyboard focusable
    // unless they have focsable="false", but then they wouldn't
    // be focusable and thus not even reach this filter
    // elements that have [focusable] are automatically keyboard focusable regardless of the attribute's value
    // elements that have [focusable] are automatically keyboard focusable regardless of the attribute's value
    // In Internet Explorer the <audio> element is focusable, but not tabbable, and tabIndex property is wrong
    // In Chrome <audio controls tabindex="-1"> remains keyboard focusable
    // In Internet Explorer and Edge the <video> element is focusable, but not tabbable, and tabIndex property is wrong
    // In Chrome and Firefox <video controls tabindex="-1"> remains keyboard focusable
    // In all Blink and WebKit based browsers <embed> and <object> are never keyboard focusable, even with tabindex="0" set
    // In Internet Explorer all iframes are only focusable
    // In WebKit, Blink and Gecko iframes may be tabbable depending on content.
    // Since we can't reliably investigate iframe documents because of the
    // SameOriginPolicy, we're declaring everything only focusable.
    // Firefox considers scrollable containers keyboard focusable,
    // even though their tabIndex property is -1
    // IE and Edge degrade <area> to script focusable, if the image
    // using the <map> has been given tabindex="-1"
    // prevent being swallowed by the overzealous isScrollableContainer() below
    // IE considers scrollable containers script focusable only,
    // even though their tabIndex property is 0
    // IE considers scrollable bodies script focusable only,
    // Children of focusable elements with display:flex are focusable in IE10-11,
    // even though their tabIndex property suggests otherwise
    // value of tabindex takes precedence
    // https://www.w3.org/WAI/PF/aria-practices/#focus_tabindex
    // bind exceptions to an iterator callback
    // provide isTabbable(context) as default iterator callback
    // sorts a list of elements according to their order in the DOM
    // find the first element that comes AFTER the target element
    // instead of mutating the elements list directly, remember position and map
    // to inject later, when we can do this more efficiently
    // element is not in target list
    // there is no successor in the tabsequence,
    // meaning the image must be the last element
    // allow the consumer to replace the injected element
    // we can't inject zero elements
    // remember the number of elements we have already injected
    // so we account for the caused index offset
    // make sure that we insert the elements in sequence,
    // otherwise the offset compensation won't work
    // array.splice has an annoying function signature :(
    // operate on a copy so we don't mutate the original array
    // make sure the elements we're injecting are provided in DOM order
    // find the offsets within the target array (list) at which to inject
    // each individual element (from elements)
    // actually inject the elements into the target array at the identified positions
    // the map is not defined within the context, so we
    // have to go find it elsewhere in the document
    // if there is no map, the img[usemap] wasn't doing anything anyway
    // remove all <area> elements from the elements list,
    // but put them the map for later retrieval
    // images - unless they are focusable themselves, likely not
    // part of the elements list, so we'll have to find them and
    // sort them into the elements list manually
    // remove all <area> elements from the elements list,
    // but put them the map for later retrieval
    // the context does not contain any <area>s so no need
    // to replace anything, just remove any maps
    // document context we're working with
    // callback that sorts an array of elements
    // reference to create unique IDs for each ShadowHost
    // reference map for child-ShadowHosts of a ShadowHost
    // reference map for child-ShadowHost of the document
    // reference map for ShadowHosts
    // reference map for tabbable elements of a ShadowHost
    // remember which hosts we have to sort within later
    // make the ShadowHost identifiable (see cleanup() for undo)
    // hosts may contain other hosts
    // remove those identifers we put on the ShadowHost to avoid using Map()
    // no shadowed content found, no need to continue
    // https://developer.mozilla.org/docs/Web/API/HTMLElement.tabIndex
    // elements with tabIndex "0" (including tabbableElements without tabIndex) should be navigated in the order they appear.
    // elements with a positive tabIndex:
    //   Elements that have identical tabIndexes should be navigated in the order they appear.
    //   Navigation proceeds from the lowest tabIndex to the highest tabIndex.
    // NOTE: sort implementation may be unstable and thus mess up DOM order,
    // that's why we build a map that's being sorted instead. If we were able to rely
    // on a stable sorting algorithm, sortTabindex() could be as simple as
    // elements.sort(function(a, b) { return a.tabIndex - b.tabIndex; });
    // at this time Chrome does not use a stable sorting algorithm
    // see http://blog.rodneyrehm.de/archives/14-Sorting-Were-Doing-It-Wrong.html#stability
    // NOTE: compareDocumentPosition seemed like more overhead than just sorting this with buckets
    // https://developer.mozilla.org/docs/Web/API/Node.compareDocumentPosition
    // in Trident and Gecko SVGElement does not know about the tabIndex property
    // extract elements that don't need sorting
    // create sortable bucket for dom-order-preservation of elements with the same tabIndex
    // maintain a list of unique tabIndexes
    // sort element into the proper bucket
    // element moved to sorting map, so not "normal" anymore
    // sort the tabindex ascending,
    // then resolve them to their appropriate buckets,
    // then flatten the array of arrays to an array
    // Some browsers sort <area> in DOM order, some place the <area>s
    // where the <img> referecing them would've been in DOM order.
    // https://github.com/medialize/ally.js/issues/5
    // sort tabindex localized to shadow dom
    // see https://github.com/medialize/ally.js/issues/6
    // if we include the context itself, it has to be the first
    // element of the sequence
    // codes mostly cloned from https://github.com/keithamus/jwerty/blob/master/jwerty.js
    // deliberately not exposing characters like <,.-#* because they vary *wildly*
    // across keyboard layouts and may cause various problems
    // (e.g. "*" is "Shift +" on a German Mac keyboard)
    // (e.g. "@" is "Alt L" on a German Mac keyboard)
    // Element Focus
    // Navigation
    // Action
    // Modifier
    // in firefox: 224
    // on mac (chrome): meta-left=91, meta-right=93
    // on win (IE11): meta-left=91, meta-right=92
    // Content Manipulation
    // the same logical key may be identified through different keyCodes
    // Function keys (112 - 137)
    // NOTE: not every keyboard knows F13+
    // Number keys (48-57, numpad 96-105)
    // NOTE: not every keyboard knows num-0+
    // Latin characters (65 - 90)
    // we've already covered the all-in operator
    // we want the modifier pressed
    // we don't care if the modifier is pressed
    // we do not want the modifier pressed
    // compensate for the modifier's operator
    // returns true on match
    // returns true on mismatch
    // Node.compareDocumentPosition is available since IE9
    // see https://developer.mozilla.org/docs/Web/API/Node.compareDocumentPosition
    // callback returns true when element is contained by parent or is the parent suited for use with Array.some()
    /*
  USAGE:
    var isChildOf = getParentComparator({parent: someNode});
    listOfElements.some(isChildOf)
*/
    // Bug 286933 - Key events in the autocomplete popup should be hidden from page scripts
    // @browser-issue Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=286933
    // ignore elements within the exempted sub-trees
    // Make sure the supports tests are run before intercepting the Tab key,
    // or IE10 and IE11 will fail to process the first Tab key event. Not
    // limiting this warm-up to IE because it may be a problem elsewhere, too.
    // Safari on OSX may require ALT+TAB to reach links,
    // see https://github.com/medialize/ally.js/issues/146
    // we're completely taking over the Tab key handling
    // wrap around first to last, last to first
    // find current position in tabsequence
    // redirect to first as we're not in our tabsequence
    // shift focus to previous/next element in the sequence
    //# sourceMappingURL=maintain--tab-focus.js.map
    //# sourceMappingURL=body-locker.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=Overlay.js.map
    //# sourceMappingURL=index.js.map
    //# sourceMappingURL=magic-identifier.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    // If link matcher is present but the link doesn't match, don't turn it into a link
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=index.js.map
    //# sourceMappingURL=use-open-in-editor.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=EditorLink.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    // Grab the lines at the end containing the files
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=Terminal.js.map
    //# sourceMappingURL=index.js.map
    //# sourceMappingURL=styles.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //nextjs.org/docs/messages/version-staleness",
    //# sourceMappingURL=VersionStalenessInfo.js.map
    //# sourceMappingURL=index.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=BuildError.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=CloseIcon.js.map
    /*#__PURE__*/
    // Unlock focus for browsers like Firefox, that break all user focus if the
    // currently focused item becomes disabled.
    // Always true, but we do this for TypeScript:
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=LeftRightDialogHeader.js.map
    //# sourceMappingURL=styles.js.map
    //# sourceMappingURL=index.js.map
    //# sourceMappingURL=styles.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=Toast.js.map
    //# sourceMappingURL=index.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // Strip leading spaces out of the code frame:
    // Find the minimum length of leading spaces after `|` in the code frame
    // When the minimum length of leading spaces is greater than 1, remove them
    // from the code frame to help the indentation looks better when there's a lot leading spaces.
    // TODO: make the caret absolute
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=CodeFrame.js.map
    //# sourceMappingURL=index.js.map
    // TODO: ability to expand resolved frames
    // TODO: render error or external indicator
    // Format method to strip out the webpack layer prefix.
    // e.g. (app-pages-browser)/./app/page.tsx -> ./app/page.tsx
    //, '');
    // Formatted file source could be empty. e.g. <anonymous> will be formatted to empty string,
    // we'll skip rendering the frame in this case.
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=CallStackFrame.js.map
    /*#__PURE__*/
    /* hide but text are still accessible in DOM */
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // if the default displayed ignored frames count is equal equal to the total frames count, hide the button
    /*#__PURE__*/
    //# sourceMappingURL=index.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=CollapseIcon.js.map
    // For text mismatch, mismatched text will take 2 rows, so we display 4 rows of component stack
    // React 19 unified mismatch
    // trim spaces after sign
    /*#__PURE__*/
    // If it's matched userland component or it's ... we will keep the component stack in diff
    /*#__PURE__*/
    /*#__PURE__*/
    // In general, if it's not collapsed, show the whole diff
    /*#__PURE__*/
    // [child index, parent index]
    // Reverse search for the child tag
    // Start searching parent tag from child tag above
    // When component is the server or client tag name, highlight it
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // Hydration mismatch: text or text-tag
    // hydration type is "text", represent [server content, client content]
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // hydration type is "text-in-tag", represent [parent tag, mismatch content]
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=component-stack-pseudo-html.js.map
    /*#__PURE__*/
    // This would be simpler with useActionState but we need to support React 18 here.
    // React 18 also doesn't have async transitions.
    // TODO: `dispatch` from `useActionState` is not reactive.
    // Remove from dependencies once https://github.com/facebook/react/pull/29665 is released.
    // Additional console.error to get the stack.
    // Assign default icon
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=index.js.map
    // Inline this helper to avoid widely used across the codebase,
    // as for this feature the Chrome detector doesn't need to be super accurate.
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //nextjs.org/docs/app/building-your-application/configuring/debugging#server-side-code",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=nodejs-inspector.js.map
    // To distinguish from React error.digest, we use a different symbol here to determine if the error is from console.error or unhandled promise rejection.
    //# sourceMappingURL=console-error.js.map
    //nextjs.org');
    // If the error is:
    // - hydration warning
    // - captured console error or unhandled rejection
    // skip displaying the error name
    // If it's replayed error, display the environment name
    /*#__PURE__*/
    /*#__PURE__*/
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    // Ensure errors are displayed in the order they occurred in:
    // Check for duplicate errors
    // We don't care if the desired error changed while we were resolving,
    // thus we're not tracking it using a ref. Once the work has been done,
    // we'll store it.
    // TODO: handle this, though an edge case
    // Reset component state when there are no errors to be displayed.
    // This should never happen, but lets handle it.
    // This component shouldn't be rendered with no errors, but if it is, let's
    // handle it gracefully by rendering nothing.
    // TODO: better loading state
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //www.w3.org/2000/svg",
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // remove the %s for stack
    // If there's still a %s at the end, remove it
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //nextjs.org/docs/messages/react-hydration-error"
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=Errors.js.map
    /*#__PURE__*/
    // accidentally excluded in some versions.
    // Explicit type is needed to avoid the generated `.d.ts` having a wide return type that could be specific to the `@types/react` version.
    // The component has to be unmounted or else it would continue to error
    // we have to render the html shell otherwise the shadow root will not be able to attach
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=ErrorBoundary.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=Base.js.map
    //# sourceMappingURL=styles.js.map
    //# sourceMappingURL=styles.js.map
    //# sourceMappingURL=styles.js.map
    /*#__PURE__*/
    //# sourceMappingURL=ComponentStyles.js.map
    /*#__PURE__*/
    /* the direction property is not reset by 'all' */
    /*!\n         * Bootstrap Reboot v4.4.1 (https://getbootstrap.com/)\n         * Copyright 2011-2019 The Bootstrap Authors\n         * Copyright 2011-2019 Twitter, Inc.\n         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n         * Forked from Normalize.css, licensed MIT (https://github.com/necolas/normalize.css/blob/master/LICENSE.md)\n         */
    /*#__PURE__*/
    //# sourceMappingURL=CssReset.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    // TODO: special handling
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=ReactDevOverlay.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    // A non-error was thrown, we don't have anything to show. :-(
    // Skip ModuleBuildError and ModuleNotFoundError, as it will be sent through onBuildError callback.
    // This is to avoid same error as different type showing up on client to cause flashing.
    // See https://github.com/facebook/react/blob/d50323eb845c5fde0d720cae888bf35dedd05506/packages/react-reconciler/src/ReactFiberErrorLogger.js#L78
    // A non-error was thrown, we don't have anything to show. :-(
    //# sourceMappingURL=client.js.map
    /* global location */
    // imports polyfill from `@next/polyfill-module` after build.
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // We need to replace the router state if:
    // - the page was (auto) exported and has a query string or search (hash)
    // - it was auto exported and is a dynamic route (to provide params)
    // - if it is a client-side skeleton (fallback render)
    // - if middleware matches the current page (may have rewrite params)
    // - if rewrites in next.config.js match (may have rewrite params)
    // update query on mount for exported pages
    // @ts-ignore
    // WARNING: `_h` is an internal option for handing Next.js
    // client-side hydration. Your app should _never_ use this property.
    // It may change at any time without notice.
    // Fallback pages must trigger the data fetch, so the transition is
    // not shallow.
    // Other pages (strictly updating query) happens shallowly, as data
    // requirements would already be present.
    // If we call scrollIntoView() in here without a setTimeout
    // it won't scroll properly.
    /*#__PURE__*/
    // This makes sure this specific lines are removed in production
    //eslint-disable-line
    // Initialize next/config with the environment configuration
    // make sure not to attempt stripping basePath for 404s
    // Defer page registration for another tick. This will increase the overall
    // latency in hydrating the page, but reduce the total blocking time.
    /*#__PURE__*/
    // Create a memoized value for next/navigation router context.
    /*#__PURE__*/
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // This method handles all runtime and debug errors.
    // 404 and 500 errors are special kind of errors
    // and they are still handle via the main render method.
    // In development runtime errors are caught by our overlay
    // In production we catch runtime errors using componentDidCatch which will trigger renderError
    // A Next.js rendering runtime error is always unrecoverable
    // FIXME: let's make this recoverable (error in GIP client-transition)
    // We need to render an empty <App> so that the `<ReactDevOverlay>` can
    // render itself.
    // TODO: Fix disabled eslint rule
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    // Dummy component that we render as a child of Root so that we can
    // toggle the correct styles before the page is rendered.
    // We use `useLayoutEffect` to guarantee the callback is executed
    // as soon as React flushes the update.
    // On initial render a hydrate should always happen
    // mark end of hydration
    // Old versions of Safari don't return `PerformanceMeasure`s from `performance.measure()`
    // mark end of render
    // mark start of hydrate/render
    // Unlike with createRoot, you don't need a separate root.render() call here
    // TODO: Remove shouldHydrate variable when React 18 is stable as it can depend on `reactRoot` existing
    // We use `useLayoutEffect` to guarantee the callbacks are executed
    // as soon as React flushes the update
    // lastAppProps has to be set before ReactDom.render to account for ReactDom throwing an error.
    // This function has a return type to ensure it doesn't start returning a
    // Promise. It should remain synchronous.
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // We catch runtime errors using componentDidCatch which will trigger renderError
    /*#__PURE__*/
    // if an error occurs in a server-side page (e.g. in getInitialProps),
    // skip re-rendering the error page client-side as data-fetching operations
    // will already have been done on the server and NEXT_DATA contains the correct
    // data for straight-forward hydration of the error page
    // renderingProps.Component might be undefined if there is a top/module-level error
    // bubble up cancelation errors
    // Ensure this error is displayed in the overlay in development
    // Combines timestamp with random number for unique ID
    // error, so we need to skip waiting for the entrypoint.
    // This catches errors like throwing in the top level of a module
    // Server-side runtime errors need to be re-thrown on the client-side so
    // that the overlay is rendered.
    // Generate a new error object. We `throw` it because some browsers
    // will set the `stack` when thrown, and we want to ensure ours is
    // not overridden when we re-throw it below.
    // In development, error the navigation API usage in runtime,
    // since it's not allowed to be used in pages router as it doesn't contain error boundary like app router.
    //# sourceMappingURL=index.js.map
    /**
MIT License

Copyright (c) 2015-present, Facebook, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
    /*#__PURE__*/
    // This file is based on https://github.com/facebook/create-react-app/blob/7b1a32be6ec9f99a6c9a3c66813f3ac09c4736b9/packages/react-dev-utils/formatWebpackMessages.js
    // It's been edited to remove chalk and CRA-specific logic
    // Cleans up webpack error messages.
    // TODO: Replace this once webpack 5 is stable
    // Strip Webpack-added headers off errors/warnings
    // https://github.com/webpack/webpack/blob/master/lib/ModuleError.js
    // Transform parsing error into syntax error
    // TODO: move this to our ESLint formatter?
    // Smoosh syntax errors (commonly found in CSS)
    // Clean up export errors
    // Remove leading newline
    // Cleans up verbose "module not found" messages for files and packages.
    // Add helpful message for users trying to use Sass for the first time
    // ./file.module.scss (<<loader info>>) => ./file.module.scss
    //nextjs.org/docs/messages/install-sass';
    // dispose of unhelpful stack trace
    // dispose of unhelpful stack trace following missing sass module
    // Internal stacks are generally useless so we strip them... with the
    // exception of stacks containing `webpack:` because they're normally
    // from user code generated by Webpack. For more information see
    // https://github.com/facebook/create-react-app/pull/1050
    // at ... ...:x:y
    // at <anonymous>
    // Remove duplicated newlines
    // Reassemble the message
    // Reorder errors to put the most relevant ones first.
    // Move the reactServerComponentsError to the top if it exists
    // If there are any syntax errors, show just them.
    //# sourceMappingURL=format-webpack-messages.js.map
    // TODO this won't capture changes to CSS since they don't result in a "merged" update
    //# sourceMappingURL=extract-modules-from-turbopack-message.js.map
    //# sourceMappingURL=runtime-error-handler.js.map
    // TODO: Remove use of `any` type. Fix no-use-before-define violations.
    /* eslint-disable @typescript-eslint/no-use-before-define */
    /**
 * MIT License
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
    // This file is a modified version of the Create React App HMR dev client that
    // can be found here:
    // https://github.com/facebook/create-react-app/blob/v3.4.1/packages/react-dev-utils/webpackHotDevClient.js
    /*#__PURE__*/
    /*#__PURE__*/
    // Remember some state related to hot module replacement.
    // Clean up outdated compile errors, if any.
    // Successful compilation.
    // Attempt to apply hot updates or reload.
    // Compilation with warnings (e.g. ESLint).
    // Print warnings to the console.
    // Attempt to apply hot updates or reload.
    // Compilation with errors (e.g. syntax error or missing modules).
    // "Massage" webpack messages.
    // Only show the first error.
    // Also log them to the console.
    // Do not attempt to reload now.
    // We will reload on next success instead.
    // Only trigger a pending state if we have updates to apply
    // (cf. onFastRefresh)
    // Whether the page (tab) was hidden at the time the event occurred.
    // This can impact the accuracy of the event's timing.
    // There is a newer version of the code available.
    // Update last known compilation hash.
    /** Handles messages from the sevrer for the Pages Router. */
    // Use turbopack message for analytics, (still need built for webpack)
    // Is undefined when it's a 'built' event
    // Is there a newer version of this code available?
    /* globals __webpack_hash__ */
    // __webpack_hash__ is the hash of the current compilation.
    // It's a global variable injected by Webpack.
    // Webpack disallows updates in other states.
    // @ts-expect-error TODO: module.hot exists but type needs to be added. Can't use `as any` here as webpack parses for `module.hot` calls.
    // @ts-expect-error TODO: module.hot exists but type needs to be added. Can't use `as any` here as webpack parses for `module.hot` calls.
    // @ts-expect-error TODO: module.hot exists but type needs to be added. Can't use `as any` here as webpack parses for `module.hot` calls.
    // Attempt to update code on the fly, fall back to a hard reload.
    // @ts-expect-error TODO: module.hot exists but type needs to be added. Can't use `as any` here as webpack parses for `module.hot` calls.
    // HotModuleReplacementPlugin is not in Webpack configuration.
    // window.location.reload();
    // Maybe we want to do something.
    // While we were updating, there was a new update! Do it again.
    // However, this time, don't trigger a pending refresh state.
    // https://webpack.js.org/api/hot-module-replacement/#check
    // @ts-expect-error TODO: module.hot exists but type needs to be added. Can't use `as any` here as webpack parses for `module.hot` calls.
    /* autoApply */
    // @ts-expect-error TODO: module.hot exists but type needs to be added. Can't use `as any` here as webpack parses for `module.hot` calls.
    //# sourceMappingURL=hot-reloader-client.js.map
    /*#__PURE__*/
    // if we're on an error/404 page, we can't reliably tell if the newly added/removed page
    // matches the current path. In that case, assume any added/removed entries should trigger a reload of the current page
    //# sourceMappingURL=hot-middleware-client.js.map
    /*#__PURE__*/
    // in AMP the router isn't initialized on the client and
    // client-transitions don't occur so ping initial page
    // when notFound: true is returned we should use the notFoundPage
    // as the Router.pathname will point to the 404 page but we want
    // to ping the source page that returned notFound: true instead
    //# sourceMappingURL=on-demand-entries-client.js.map
    /* eslint-disable @typescript-eslint/no-use-before-define */
    // Make sure container is fixed and on a high zIndex so it shows
    // Ensure container's position to be top or bottom (default)
    // Ensure container's position to be left or right (default)
    // If attachShadow is undefined then the browser does not support
    // the Shadow DOM, we need to prefix all the names so there
    // will be no conflicts
    // Container
    // CSS
    // State
    // Handle events
    // Wait for the fade out transition to complete
    // eslint-disable-next-line default-case
    //# sourceMappingURL=dev-build-watcher.js.map
    // This wrapper function is used to safely select the best available function
    // to schedule removal of the no-FOUC styles workaround. requestAnimationFrame
    // is the ideal choice, but when used in iframes, there are no guarantees that
    // the callback will actually be called, which could stall the promise returned
    // from displayContent.
    //
    // See: https://www.vector-logic.com/blog/posts/on-request-animation-frame-and-embedded-iframes
    //# sourceMappingURL=fouc.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    // This is used in `../server/dev/turbopack-utils.ts`.
    // On the error page we want to reload the page when a page was changed
    // Make sure to reload when the dev-overlay is showing for an
    // API route
    // TODO: Fix `__NEXT_PAGE` type
    // trigger hard reload when failing to refresh data
    // to show error overlay properly
    //# sourceMappingURL=page-bootstrap.js.map
    // TODO: Remove use of `any` type.
    /*#__PURE__*/
    // router is initialized later so it has to be live-binded
    // for the page loader
    //# sourceMappingURL=next-dev-turbopack.js.map
    // We need to call `updateHead` method whenever the `SideEffect` is trigger in all
    // life-cycles: mount, update, unmount. However, if there are multiple `SideEffect`s
    // being rendered, we only trigger the method from the last one.
    // This is ensured by keeping the last unflushed `updateHead` in the `_pendingUpdate`
    // singleton in the layout effect pass, and actually trigger it in the effect pass.
    //# sourceMappingURL=side-effect.js.map
    /*#__PURE__*/
    //# sourceMappingURL=amp-context.shared-runtime.js.map
    //# sourceMappingURL=amp-mode.js.map
    //# sourceMappingURL=warn-once.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // React children can be "string" or "number" in this case we ignore them for backwards compat
    // Adds support for React.Fragment
    /*
 returns a function for filtering head child elements
 which shouldn't be duplicated, like <title/>
 Also adds support for deduplicated `key` properties
*/
    // eslint-disable-next-line default-case
    /**
 *
 * @param headChildrenElements List of children of <Head>
 */
    // omit JSON-LD structured data snippets from the warning
    //nextjs.org/docs/messages/no-script-tags-in-head-component");
    //nextjs.org/docs/messages/no-stylesheets-in-head-component');
    /*#__PURE__*/
    /**
 * This component injects elements to `<head>` of your page.
 * To avoid duplicated `tags` in `<head>` you can use the `key` property, which will make sure every tag is only rendered once.
 */
    /*#__PURE__*/
    //# sourceMappingURL=head.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    // https://github.com/sindresorhus/modern-normalize/blob/main/modern-normalize.css#L38-L52
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /* CSS minified from
                body { margin: 0; color: #000; background: #fff; }
                .next-error-h1 {
                  border-right: 1px solid rgba(0, 0, 0, .3);
                }

                ${
                  withDarkMode
                    ? `@media (prefers-color-scheme: dark) {
                  body { color: #fff; background: #000; }
                  .next-error-h1 {
                    border-right: 1px solid rgba(255, 255, 255, .3);
                  }
                }`
                    : ''
                }
               */
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=_error.js.map
    // @ts-expect-error module.hot exists
    // @ts-expect-error module.hot exists
    //# sourceMappingURL=%5Broot%20of%20the%20server%5D__31723f._.js.map

File: ./frontend/.next/static/chunks/[root of the server]__2e1cf5._.js
  JavaScript Functions:
    - getSocketProtocol
    - addMessageListener
    - sendMessage
    - connectHMR
    - init
    - handleOnline
    - handleMessage
    - handleDisconnect
    - connect
    - component
    - sendJSON
    - resourceKey
    - subscribeToUpdates
    - handleSocketConnected
    - aggregateUpdates
    - applyAggregatedUpdates
    - mergeChunkListUpdates
    - mergeChunkListChunks
    - mergeChunkUpdates
    - mergeChunkListEcmascriptMergedUpdates
    - mergeEcmascriptChunkEntries
    - mergeEcmascriptChunksUpdates
    - mergeEcmascriptChunkUpdates
    - invariant
    - compareByList
    - emitIssues
    - handleIssues
    - sortIssues
    - setHooks
    - handleSocketMessage
    - finalizeUpdate
    - subscribeToChunkUpdate
    - subscribeToUpdate
    - triggerUpdate
  Comments:
    // Adapted from https://github.com/vercel/next.js/blob/canary/packages/next/src/client/dev/error-overlay/websocket.ts
    // TODO: add timeout again
    // let lastActivity = Date.now()
    // assetPrefix is a url
    // lastActivity = Date.now()
    // lastActivity = Date.now()
    // let timer: NodeJS.Timeout
    //${hostname}:${port}${assetPrefix ? `/${assetPrefix}` : ""}`;
    //${assetPrefix.split("://")[1]}`;
    /// <reference path="../../../shared/runtime-types.d.ts" />
    /// <reference path="../../runtime/base/dev-globals.d.ts" />
    /// <reference path="../../runtime/base/dev-protocol.d.ts" />
    /// <reference path="../../runtime/base/dev-extensions.ts" />
    // TODO(WEB-1465) Remove this backwards compat fallback once
    // vercel/next.js#54586 is merged.
    // TODO(WEB-1465) Remove this backwards compat fallback once
    // vercel/next.js#54586 is merged.
    // we aggregate all pending updates until the issues are resolved
    // Since `merged` is an array of updates, we need to merge them all into
    // one, consistent update.
    // Since there can only be `EcmascriptMergeUpdates` in the array, there is
    // no need to key on the `type` field.
    // These two completely cancel each other out.
    // We could eagerly return `updateB` here, but this would potentially be
    // incorrect if `updateA` has added modules.
    // Any other update combination is invalid.
    // aggregate updates
    // run single update
    // This is used by the Next.js integration test suite to notify it when HMR
    // updates have been completed.
    // TODO: Only run this in test environments (gate by `process.env.__NEXT_TEST_MODE`)
    // TODO(WEB-1465) Remove this backwards compat fallback once
    // vercel/next.js#54586 is merged.
    // This indicates that the resource which we subscribed to either does not exist or
    // has been deleted. In either case, we should clear all update callbacks, so if a
    // new subscription is created for the same resource, it will send a new "subscribe"
    // message to the server.
    // No need to send an "unsubscribe" message to the server, it will have already
    // dropped the update stream before sending the "notFound" message.
    //# sourceMappingURL=%5Broot%20of%20the%20server%5D__2e1cf5._.js.map

File: ./frontend/.next/static/chunks/node_modules_next_dist_ea69ac._.js
  JavaScript Functions:
    - SideEffect
    - emitChange
    - isInAmpMode
    - _export
    - defaultHead
    - onlyReactElement
    - for
    - unique
    - reduceComponents
    - Head
    - getImageBlurSvg
    - _export
    - isStaticRequire
    - isStaticImageData
    - isStaticImport
    - getInt
    - getWidths
    - generateImgAttrs
    - getImgProps
    - qualities
    - loader
    - isWindows
    - picomatch
    - expandRange
    - syntaxError
    - parse
    - globstar
    - eos
    - peek
    - advance
    - remaining
    - consume
    - append
    - negate
    - increment
    - decrement
    - push
    - extglobOpen
    - extglobClose
    - fastpaths
    - globstar
    - create
    - isObject
    - picomatch
    - arrayMatcher
    - isIgnored
    - matcher
    - test
    - matchBase
    - isMatch
    - parse
    - scan
    - compileRe
    - makeRe
    - toRegex
    - isPathSeparator
    - depth
    - scan
    - eos
    - peek
    - advance
    - isObject
    - hasRegexChars
    - isRegexChar
    - escapeRegex
    - toPosixSlashes
    - removeBackslashes
    - escapeLast
    - removePrefix
    - wrapOutput
    - basename
    - __nccwpck_require__
    - _export
    - matchLocalPattern
    - hasLocalMatch
    - _export
    - matchRemotePattern
    - hasRemoteMatch
    - defaultLoader
    - useMergedRef
    - cleanupA
    - cleanupB
    - applyRef
    - handleLoading
    - getDynamicProps
    - ownRef
    - ImagePreload
    - config
    - qualities
  Comments:
    // We need to call `updateHead` method whenever the `SideEffect` is trigger in all
    // life-cycles: mount, update, unmount. However, if there are multiple `SideEffect`s
    // being rendered, we only trigger the method from the last one.
    // This is ensured by keeping the last unflushed `updateHead` in the `_pendingUpdate`
    // singleton in the layout effect pass, and actually trigger it in the effect pass.
    //# sourceMappingURL=side-effect.js.map
    /*#__PURE__*/
    //# sourceMappingURL=amp-context.shared-runtime.js.map
    //# sourceMappingURL=amp-mode.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // React children can be "string" or "number" in this case we ignore them for backwards compat
    // Adds support for React.Fragment
    /*
 returns a function for filtering head child elements
 which shouldn't be duplicated, like <title/>
 Also adds support for deduplicated `key` properties
*/
    // eslint-disable-next-line default-case
    /**
 *
 * @param headChildrenElements List of children of <Head>
 */
    // omit JSON-LD structured data snippets from the warning
    //nextjs.org/docs/messages/no-script-tags-in-head-component");
    //nextjs.org/docs/messages/no-stylesheets-in-head-component');
    /*#__PURE__*/
    /**
 * This component injects elements to `<head>` of your page.
 * To avoid duplicated `tags` in `<head>` you can use the `key` property, which will make sure every tag is only rendered once.
 */
    /*#__PURE__*/
    //# sourceMappingURL=head.js.map
    /**
 * A shared function, used on both client and server, to generate a SVG blur placeholder.
 */
    //www.w3.org/2000/svg' " + viewBox + "%3E%3Cfilter id='b' color-interpolation-filters='sRGB'%3E%3CfeGaussianBlur stdDeviation='" + std + "'/%3E%3CfeColorMatrix values='1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 100 -1' result='s'/%3E%3CfeFlood x='0' y='0' width='100%25' height='100%25'/%3E%3CfeComposite operator='out' in='s'/%3E%3CfeComposite in2='SourceGraphic'/%3E%3CfeGaussianBlur stdDeviation='" + std + "'/%3E%3C/filter%3E%3Cimage width='100%25' height='100%25' x='0' y='0' preserveAspectRatio='" + preserveAspectRatio + "' style='filter: url(%23b);' href='" + blurDataURL + "'/%3E%3C/svg%3E";
    //# sourceMappingURL=image-blur-svg.js.map
    //# sourceMappingURL=image-config.js.map
    // Find all the "vw" percent sizes used in the sizes prop
    // > are actually 3x in the green color, but only 1.5x in the red and
    // > blue colors. Showing a 3x resolution image in the app vs a 2x
    // > resolution image will be visually the same, though the 3x image
    // > takes significantly more data. Even true 3x resolution screens are
    // > wasteful as the human eye cannot see that level of detail without
    // > something like a magnifying glass.
    // https://blog.twitter.com/engineering/en_us/topics/infrastructure/2019/capping-image-fidelity-on-ultra-high-resolution-devices.html
    /*, width * 3*/
    // It's intended to keep `src` the last attribute because React updates
    // attributes in order. If we keep `src` the first one, Safari will
    // immediately start to fetch `src`, before `sizes` and `srcSet` are even
    // updated by React. That causes multiple unnecessary requests if `srcSet`
    // and `sizes` are defined.
    // This bug cannot be reproduced in Chrome or Firefox.
    //nextjs.org/docs/messages/invalid-images-config');
    // Remove property so it's not spread on <img> element
    // This special value indicates that the user
    // didn't define a "loader" prop or "loader" config.
    //nextjs.org/docs/messages/next-image-missing-loader");
    // The user defined a "loader" prop or config.
    // Since the config object is internal only, we
    // must not pass it to the user-defined "loader".
    // https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/Data_URIs
    // Special case to make svg serve as-is to avoid proxying
    // through the built-in Image Optimization API.
    //nextjs.org/docs/messages/export-image-api");
    // React doesn't show the stack trace and there's
    // no `src` to help identify which image, so we
    // instead console.error(ref) during mount.
    // eslint-disable-next-line no-control-regex
    // eslint-disable-next-line no-control-regex
    // should match next-image-loader
    //nextjs.org/docs/messages/placeholder-blur-data-url');
    //nextjs.org/docs/messages/next-image-missing-loader-width");
    //nextjs.org/docs/messages/next-image-upgrade-to-13");
    // @ts-ignore - missing "LargestContentfulPaint" class with "element" prop
    // https://web.dev/lcp/#measure-lcp-in-javascript
    //nextjs.org/docs/api-reference/next/image#priority");
    // Log error but don't crash the app
    // assume `data:image/`
    // During `next dev`, we don't want to generate blur placeholders with webpack
    // because it can delay starting the dev server. Instead, `next-image-loader.js`
    // will inline a special url to lazily generate the blur placeholder at request time.
    //# sourceMappingURL=get-img-props.js.map
    /*#__PURE__*/
    //# sourceMappingURL=image-config-context.shared-runtime.js.map
    /*#__PURE__*/
    //# sourceMappingURL=router-context.shared-runtime.js.map
    /**": "**",
                    "**/
    /**": "**"
                },
                CHAR_0: 48,
                CHAR_9: 57,
                CHAR_UPPERCASE_A: 65,
                CHAR_LOWERCASE_A: 97,
                CHAR_UPPERCASE_Z: 90,
                CHAR_LOWERCASE_Z: 122,
                CHAR_LEFT_PARENTHESES: 40,
                CHAR_RIGHT_PARENTHESES: 41,
                CHAR_ASTERISK: 42,
                CHAR_AMPERSAND: 38,
                CHAR_AT: 64,
                CHAR_BACKWARD_SLASH: 92,
                CHAR_CARRIAGE_RETURN: 13,
                CHAR_CIRCUMFLEX_ACCENT: 94,
                CHAR_COLON: 58,
                CHAR_COMMA: 44,
                CHAR_DOT: 46,
                CHAR_DOUBLE_QUOTE: 34,
                CHAR_EQUAL: 61,
                CHAR_EXCLAMATION_MARK: 33,
                CHAR_FORM_FEED: 12,
                CHAR_FORWARD_SLASH: 47,
                CHAR_GRAVE_ACCENT: 96,
                CHAR_HASH: 35,
                CHAR_HYPHEN_MINUS: 45,
                CHAR_LEFT_ANGLE_BRACKET: 60,
                CHAR_LEFT_CURLY_BRACE: 123,
                CHAR_LEFT_SQUARE_BRACKET: 91,
                CHAR_LINE_FEED: 10,
                CHAR_NO_BREAK_SPACE: 160,
                CHAR_PERCENT: 37,
                CHAR_PLUS: 43,
                CHAR_QUESTION_MARK: 63,
                CHAR_RIGHT_ANGLE_BRACKET: 62,
                CHAR_RIGHT_CURLY_BRACE: 125,
                CHAR_RIGHT_SQUARE_BRACKET: 93,
                CHAR_SEMICOLON: 59,
                CHAR_SINGLE_QUOTE: 39,
                CHAR_SPACE: 32,
                CHAR_TAB: 9,
                CHAR_UNDERSCORE: 95,
                CHAR_VERTICAL_LINE: 124,
                CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
                extglobChars (t) {
                    return {
                        "!": {
                            type: "negate",
                            open: "(?:(?!(?:",
                            close: `))${t.STAR})`
                        },
                        "?": {
                            type: "qmark",
                            open: "(?:",
                            close: ")?"
                        },
                        "+": {
                            type: "plus",
                            open: "(?:",
                            close: ")+"
                        },
                        "*": {
                            type: "star",
                            open: "(?:",
                            close: ")*"
                        },
                        "@": {
                            type: "at",
                            open: "(?:",
                            close: ")"
                        }
                    };
                },
                globChars (t) {
                    return t === true ? C : b;
                }
            };
        },
        697: (t, e, u)=>{
            const n = u(154);
            const o = u(96);
            const { MAX_LENGTH: s, POSIX_REGEX_SOURCE: r, REGEX_NON_SPECIAL_CHARS: a, REGEX_SPECIAL_CHARS_BACKREF: i, REPLACEMENTS: c } = n;
            const expandRange = (t, e)=>{
                if (typeof e.expandRange === "function") {
                    return e.expandRange(...t, e);
                }
                t.sort();
                const u = `[${t.join("-")}]`;
                try {
                    new RegExp(u);
                } catch (e) {
                    return t.map((t)=>o.escapeRegex(t)).join("..");
                }
                return u;
            };
            const syntaxError = (t, e)=>`Missing ${t}: "${e}" - use "\\\\${e}" to match literal characters`;
            const parse = (t, e)=>{
                if (typeof t !== "string") {
                    throw new TypeError("Expected a string");
                }
                t = c[t] || t;
                const u = {
                    ...e
                };
                const p = typeof u.maxLength === "number" ? Math.min(s, u.maxLength) : s;
                let l = t.length;
                if (l > p) {
                    throw new SyntaxError(`Input length: ${l}, exceeds maximum allowed length: ${p}`);
                }
                const f = {
                    type: "bos",
                    value: "",
                    output: u.prepend || ""
                };
                const A = [
                    f
                ];
                const _ = u.capture ? "" : "?:";
                const R = n.globChars(u.windows);
                const E = n.extglobChars(R);
                const { DOT_LITERAL: h, PLUS_LITERAL: g, SLASH_LITERAL: b, ONE_CHAR: C, DOTS_SLASH: y, NO_DOT: $, NO_DOT_SLASH: x, NO_DOTS_SLASH: S, QMARK: H, QMARK_NO_DOT: v, STAR: d, START_ANCHOR: L } = R;
                const globstar = (t)=>`(${_}(?:(?!${L}${t.dot ? y : h}).)*?)`;
                const T = u.dot ? "" : $;
                const O = u.dot ? H : v;
                let k = u.bash === true ? globstar(u) : d;
                if (u.capture) {
                    k = `(${k})`;
                }
                if (typeof u.noext === "boolean") {
                    u.noextglob = u.noext;
                }
                const m = {
                    input: t,
                    index: -1,
                    start: 0,
                    dot: u.dot === true,
                    consumed: "",
                    output: "",
                    prefix: "",
                    backtrack: false,
                    negated: false,
                    brackets: 0,
                    braces: 0,
                    parens: 0,
                    quotes: 0,
                    globstar: false,
                    tokens: A
                };
                t = o.removePrefix(t, m);
                l = t.length;
                const w = [];
                const N = [];
                const I = [];
                let B = f;
                let G;
                const eos = ()=>m.index === l - 1;
                const D = m.peek = (e = 1)=>t[m.index + e];
                const M = m.advance = ()=>t[++m.index] || "";
                const remaining = ()=>t.slice(m.index + 1);
                const consume = (t = "", e = 0)=>{
                    m.consumed += t;
                    m.index += e;
                };
                const append = (t)=>{
                    m.output += t.output != null ? t.output : t.value;
                    consume(t.value);
                };
                const negate = ()=>{
                    let t = 1;
                    while(D() === "!" && (D(2) !== "(" || D(3) === "?")){
                        M();
                        m.start++;
                        t++;
                    }
                    if (t % 2 === 0) {
                        return false;
                    }
                    m.negated = true;
                    m.start++;
                    return true;
                };
                const increment = (t)=>{
                    m[t]++;
                    I.push(t);
                };
                const decrement = (t)=>{
                    m[t]--;
                    I.pop();
                };
                const push = (t)=>{
                    if (B.type === "globstar") {
                        const e = m.braces > 0 && (t.type === "comma" || t.type === "brace");
                        const u = t.extglob === true || w.length && (t.type === "pipe" || t.type === "paren");
                        if (t.type !== "slash" && t.type !== "paren" && !e && !u) {
                            m.output = m.output.slice(0, -B.output.length);
                            B.type = "star";
                            B.value = "*";
                            B.output = k;
                            m.output += B.output;
                        }
                    }
                    if (w.length && t.type !== "paren") {
                        w[w.length - 1].inner += t.value;
                    }
                    if (t.value || t.output) append(t);
                    if (B && B.type === "text" && t.type === "text") {
                        B.output = (B.output || B.value) + t.value;
                        B.value += t.value;
                        return;
                    }
                    t.prev = B;
                    A.push(t);
                    B = t;
                };
                const extglobOpen = (t, e)=>{
                    const n = {
                        ...E[e],
                        conditions: 1,
                        inner: ""
                    };
                    n.prev = B;
                    n.parens = m.parens;
                    n.output = m.output;
                    const o = (u.capture ? "(" : "") + n.open;
                    increment("parens");
                    push({
                        type: t,
                        value: e,
                        output: m.output ? "" : C
                    });
                    push({
                        type: "paren",
                        extglob: true,
                        value: M(),
                        output: o
                    });
                    w.push(n);
                };
                const extglobClose = (t)=>{
                    let n = t.close + (u.capture ? ")" : "");
                    let o;
                    if (t.type === "negate") {
                        let s = k;
                        if (t.inner && t.inner.length > 1 && t.inner.includes("/")) {
                            s = globstar(u);
                        }
                        if (s !== k || eos() || /^\)+$/.test(remaining())) {
                            n = t.close = `)$))${s}`;
                        }
                        if (t.inner.includes("*") && (o = remaining()) && /^\.[^\\/.]+$/.test(o)) {
                            const u = parse(o, {
                                ...e,
                                fastpaths: false
                            }).output;
                            n = t.close = `)${u})${s})`;
                        }
                        if (t.prev.type === "bos") {
                            m.negatedExtglob = true;
                        }
                    }
                    push({
                        type: "paren",
                        extglob: true,
                        value: G,
                        output: n
                    });
                    decrement("parens");
                };
                if (u.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(t)) {
                    let n = false;
                    let s = t.replace(i, (t, e, u, o, s, r)=>{
                        if (o === "\\") {
                            n = true;
                            return t;
                        }
                        if (o === "?") {
                            if (e) {
                                return e + o + (s ? H.repeat(s.length) : "");
                            }
                            if (r === 0) {
                                return O + (s ? H.repeat(s.length) : "");
                            }
                            return H.repeat(u.length);
                        }
                        if (o === ".") {
                            return h.repeat(u.length);
                        }
                        if (o === "*") {
                            if (e) {
                                return e + o + (s ? k : "");
                            }
                            return k;
                        }
                        return e ? t : `\\${t}`;
                    });
                    if (n === true) {
                        if (u.unescape === true) {
                            s = s.replace(/\\/g, "");
                        } else {
                            s = s.replace(/\\+/g, (t)=>t.length % 2 === 0 ? "\\\\" : t ? "\\" : "");
                        }
                    }
                    if (s === t && u.contains === true) {
                        m.output = t;
                        return m;
                    }
                    m.output = o.wrapOutput(s, m, e);
                    return m;
                }
                while(!eos()){
                    G = M();
                    if (G === "\0") {
                        continue;
                    }
                    if (G === "\\") {
                        const t = D();
                        if (t === "/" && u.bash !== true) {
                            continue;
                        }
                        if (t === "." || t === ";") {
                            continue;
                        }
                        if (!t) {
                            G += "\\";
                            push({
                                type: "text",
                                value: G
                            });
                            continue;
                        }
                        const e = /^\\+/.exec(remaining());
                        let n = 0;
                        if (e && e[0].length > 2) {
                            n = e[0].length;
                            m.index += n;
                            if (n % 2 !== 0) {
                                G += "\\";
                            }
                        }
                        if (u.unescape === true) {
                            G = M();
                        } else {
                            G += M();
                        }
                        if (m.brackets === 0) {
                            push({
                                type: "text",
                                value: G
                            });
                            continue;
                        }
                    }
                    if (m.brackets > 0 && (G !== "]" || B.value === "[" || B.value === "[^")) {
                        if (u.posix !== false && G === ":") {
                            const t = B.value.slice(1);
                            if (t.includes("[")) {
                                B.posix = true;
                                if (t.includes(":")) {
                                    const t = B.value.lastIndexOf("[");
                                    const e = B.value.slice(0, t);
                                    const u = B.value.slice(t + 2);
                                    const n = r[u];
                                    if (n) {
                                        B.value = e + n;
                                        m.backtrack = true;
                                        M();
                                        if (!f.output && A.indexOf(B) === 1) {
                                            f.output = C;
                                        }
                                        continue;
                                    }
                                }
                            }
                        }
                        if (G === "[" && D() !== ":" || G === "-" && D() === "]") {
                            G = `\\${G}`;
                        }
                        if (G === "]" && (B.value === "[" || B.value === "[^")) {
                            G = `\\${G}`;
                        }
                        if (u.posix === true && G === "!" && B.value === "[") {
                            G = "^";
                        }
                        B.value += G;
                        append({
                            value: G
                        });
                        continue;
                    }
                    if (m.quotes === 1 && G !== '"') {
                        G = o.escapeRegex(G);
                        B.value += G;
                        append({
                            value: G
                        });
                        continue;
                    }
                    if (G === '"') {
                        m.quotes = m.quotes === 1 ? 0 : 1;
                        if (u.keepQuotes === true) {
                            push({
                                type: "text",
                                value: G
                            });
                        }
                        continue;
                    }
                    if (G === "(") {
                        increment("parens");
                        push({
                            type: "paren",
                            value: G
                        });
                        continue;
                    }
                    if (G === ")") {
                        if (m.parens === 0 && u.strictBrackets === true) {
                            throw new SyntaxError(syntaxError("opening", "("));
                        }
                        const t = w[w.length - 1];
                        if (t && m.parens === t.parens + 1) {
                            extglobClose(w.pop());
                            continue;
                        }
                        push({
                            type: "paren",
                            value: G,
                            output: m.parens ? ")" : "\\)"
                        });
                        decrement("parens");
                        continue;
                    }
                    if (G === "[") {
                        if (u.nobracket === true || !remaining().includes("]")) {
                            if (u.nobracket !== true && u.strictBrackets === true) {
                                throw new SyntaxError(syntaxError("closing", "]"));
                            }
                            G = `\\${G}`;
                        } else {
                            increment("brackets");
                        }
                        push({
                            type: "bracket",
                            value: G
                        });
                        continue;
                    }
                    if (G === "]") {
                        if (u.nobracket === true || B && B.type === "bracket" && B.value.length === 1) {
                            push({
                                type: "text",
                                value: G,
                                output: `\\${G}`
                            });
                            continue;
                        }
                        if (m.brackets === 0) {
                            if (u.strictBrackets === true) {
                                throw new SyntaxError(syntaxError("opening", "["));
                            }
                            push({
                                type: "text",
                                value: G,
                                output: `\\${G}`
                            });
                            continue;
                        }
                        decrement("brackets");
                        const t = B.value.slice(1);
                        if (B.posix !== true && t[0] === "^" && !t.includes("/")) {
                            G = `/${G}`;
                        }
                        B.value += G;
                        append({
                            value: G
                        });
                        if (u.literalBrackets === false || o.hasRegexChars(t)) {
                            continue;
                        }
                        const e = o.escapeRegex(B.value);
                        m.output = m.output.slice(0, -B.value.length);
                        if (u.literalBrackets === true) {
                            m.output += e;
                            B.value = e;
                            continue;
                        }
                        B.value = `(${_}${e}|${B.value})`;
                        m.output += B.value;
                        continue;
                    }
                    if (G === "{" && u.nobrace !== true) {
                        increment("braces");
                        const t = {
                            type: "brace",
                            value: G,
                            output: "(",
                            outputIndex: m.output.length,
                            tokensIndex: m.tokens.length
                        };
                        N.push(t);
                        push(t);
                        continue;
                    }
                    if (G === "}") {
                        const t = N[N.length - 1];
                        if (u.nobrace === true || !t) {
                            push({
                                type: "text",
                                value: G,
                                output: G
                            });
                            continue;
                        }
                        let e = ")";
                        if (t.dots === true) {
                            const t = A.slice();
                            const n = [];
                            for(let e = t.length - 1; e >= 0; e--){
                                A.pop();
                                if (t[e].type === "brace") {
                                    break;
                                }
                                if (t[e].type !== "dots") {
                                    n.unshift(t[e].value);
                                }
                            }
                            e = expandRange(n, u);
                            m.backtrack = true;
                        }
                        if (t.comma !== true && t.dots !== true) {
                            const u = m.output.slice(0, t.outputIndex);
                            const n = m.tokens.slice(t.tokensIndex);
                            t.value = t.output = "\\{";
                            G = e = "\\}";
                            m.output = u;
                            for (const t of n){
                                m.output += t.output || t.value;
                            }
                        }
                        push({
                            type: "brace",
                            value: G,
                            output: e
                        });
                        decrement("braces");
                        N.pop();
                        continue;
                    }
                    if (G === "|") {
                        if (w.length > 0) {
                            w[w.length - 1].conditions++;
                        }
                        push({
                            type: "text",
                            value: G
                        });
                        continue;
                    }
                    if (G === ",") {
                        let t = G;
                        const e = N[N.length - 1];
                        if (e && I[I.length - 1] === "braces") {
                            e.comma = true;
                            t = "|";
                        }
                        push({
                            type: "comma",
                            value: G,
                            output: t
                        });
                        continue;
                    }
                    if (G === "/") {
                        if (B.type === "dot" && m.index === m.start + 1) {
                            m.start = m.index + 1;
                            m.consumed = "";
                            m.output = "";
                            A.pop();
                            B = f;
                            continue;
                        }
                        push({
                            type: "slash",
                            value: G,
                            output: b
                        });
                        continue;
                    }
                    if (G === ".") {
                        if (m.braces > 0 && B.type === "dot") {
                            if (B.value === ".") B.output = h;
                            const t = N[N.length - 1];
                            B.type = "dots";
                            B.output += G;
                            B.value += G;
                            t.dots = true;
                            continue;
                        }
                        if (m.braces + m.parens === 0 && B.type !== "bos" && B.type !== "slash") {
                            push({
                                type: "text",
                                value: G,
                                output: h
                            });
                            continue;
                        }
                        push({
                            type: "dot",
                            value: G,
                            output: h
                        });
                        continue;
                    }
                    if (G === "?") {
                        const t = B && B.value === "(";
                        if (!t && u.noextglob !== true && D() === "(" && D(2) !== "?") {
                            extglobOpen("qmark", G);
                            continue;
                        }
                        if (B && B.type === "paren") {
                            const t = D();
                            let e = G;
                            if (B.value === "(" && !/[!=<:]/.test(t) || t === "<" && !/<([!=]|\w+>)/.test(remaining())) {
                                e = `\\${G}`;
                            }
                            push({
                                type: "text",
                                value: G,
                                output: e
                            });
                            continue;
                        }
                        if (u.dot !== true && (B.type === "slash" || B.type === "bos")) {
                            push({
                                type: "qmark",
                                value: G,
                                output: v
                            });
                            continue;
                        }
                        push({
                            type: "qmark",
                            value: G,
                            output: H
                        });
                        continue;
                    }
                    if (G === "!") {
                        if (u.noextglob !== true && D() === "(") {
                            if (D(2) !== "?" || !/[!=<:]/.test(D(3))) {
                                extglobOpen("negate", G);
                                continue;
                            }
                        }
                        if (u.nonegate !== true && m.index === 0) {
                            negate();
                            continue;
                        }
                    }
                    if (G === "+") {
                        if (u.noextglob !== true && D() === "(" && D(2) !== "?") {
                            extglobOpen("plus", G);
                            continue;
                        }
                        if (B && B.value === "(" || u.regex === false) {
                            push({
                                type: "plus",
                                value: G,
                                output: g
                            });
                            continue;
                        }
                        if (B && (B.type === "bracket" || B.type === "paren" || B.type === "brace") || m.parens > 0) {
                            push({
                                type: "plus",
                                value: G
                            });
                            continue;
                        }
                        push({
                            type: "plus",
                            value: g
                        });
                        continue;
                    }
                    if (G === "@") {
                        if (u.noextglob !== true && D() === "(" && D(2) !== "?") {
                            push({
                                type: "at",
                                extglob: true,
                                value: G,
                                output: ""
                            });
                            continue;
                        }
                        push({
                            type: "text",
                            value: G
                        });
                        continue;
                    }
                    if (G !== "*") {
                        if (G === "$" || G === "^") {
                            G = `\\${G}`;
                        }
                        const t = a.exec(remaining());
                        if (t) {
                            G += t[0];
                            m.index += t[0].length;
                        }
                        push({
                            type: "text",
                            value: G
                        });
                        continue;
                    }
                    if (B && (B.type === "globstar" || B.star === true)) {
                        B.type = "star";
                        B.star = true;
                        B.value += G;
                        B.output = k;
                        m.backtrack = true;
                        m.globstar = true;
                        consume(G);
                        continue;
                    }
                    let e = remaining();
                    if (u.noextglob !== true && /^\([^?]/.test(e)) {
                        extglobOpen("star", G);
                        continue;
                    }
                    if (B.type === "star") {
                        if (u.noglobstar === true) {
                            consume(G);
                            continue;
                        }
                        const n = B.prev;
                        const o = n.prev;
                        const s = n.type === "slash" || n.type === "bos";
                        const r = o && (o.type === "star" || o.type === "globstar");
                        if (u.bash === true && (!s || e[0] && e[0] !== "/")) {
                            push({
                                type: "star",
                                value: G,
                                output: ""
                            });
                            continue;
                        }
                        const a = m.braces > 0 && (n.type === "comma" || n.type === "brace");
                        const i = w.length && (n.type === "pipe" || n.type === "paren");
                        if (!s && n.type !== "paren" && !a && !i) {
                            push({
                                type: "star",
                                value: G,
                                output: ""
                            });
                            continue;
                        }
                        while(e.slice(0, 3) === "/**"){
                            const u = t[m.index + 4];
                            if (u && u !== "/") {
                                break;
                            }
                            e = e.slice(3);
                            consume("/**", 3);
                        }
                        if (n.type === "bos" && eos()) {
                            B.type = "globstar";
                            B.value += G;
                            B.output = globstar(u);
                            m.output = B.output;
                            m.globstar = true;
                            consume(G);
                            continue;
                        }
                        if (n.type === "slash" && n.prev.type !== "bos" && !r && eos()) {
                            m.output = m.output.slice(0, -(n.output + B.output).length);
                            n.output = `(?:${n.output}`;
                            B.type = "globstar";
                            B.output = globstar(u) + (u.strictSlashes ? ")" : "|$)");
                            B.value += G;
                            m.globstar = true;
                            m.output += n.output + B.output;
                            consume(G);
                            continue;
                        }
                        if (n.type === "slash" && n.prev.type !== "bos" && e[0] === "/") {
                            const t = e[1] !== void 0 ? "|$" : "";
                            m.output = m.output.slice(0, -(n.output + B.output).length);
                            n.output = `(?:${n.output}`;
                            B.type = "globstar";
                            B.output = `${globstar(u)}${b}|${b}${t})`;
                            B.value += G;
                            m.output += n.output + B.output;
                            m.globstar = true;
                            consume(G + M());
                            push({
                                type: "slash",
                                value: "/",
                                output: ""
                            });
                            continue;
                        }
                        if (n.type === "bos" && e[0] === "/") {
                            B.type = "globstar";
                            B.value += G;
                            B.output = `(?:^|${b}|${globstar(u)}${b})`;
                            m.output = B.output;
                            m.globstar = true;
                            consume(G + M());
                            push({
                                type: "slash",
                                value: "/",
                                output: ""
                            });
                            continue;
                        }
                        m.output = m.output.slice(0, -B.output.length);
                        B.type = "globstar";
                        B.output = globstar(u);
                        B.value += G;
                        m.output += B.output;
                        m.globstar = true;
                        consume(G);
                        continue;
                    }
                    const n = {
                        type: "star",
                        value: G,
                        output: k
                    };
                    if (u.bash === true) {
                        n.output = ".*?";
                        if (B.type === "bos" || B.type === "slash") {
                            n.output = T + n.output;
                        }
                        push(n);
                        continue;
                    }
                    if (B && (B.type === "bracket" || B.type === "paren") && u.regex === true) {
                        n.output = G;
                        push(n);
                        continue;
                    }
                    if (m.index === m.start || B.type === "slash" || B.type === "dot") {
                        if (B.type === "dot") {
                            m.output += x;
                            B.output += x;
                        } else if (u.dot === true) {
                            m.output += S;
                            B.output += S;
                        } else {
                            m.output += T;
                            B.output += T;
                        }
                        if (D() !== "*") {
                            m.output += C;
                            B.output += C;
                        }
                    }
                    push(n);
                }
                while(m.brackets > 0){
                    if (u.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "]"));
                    m.output = o.escapeLast(m.output, "[");
                    decrement("brackets");
                }
                while(m.parens > 0){
                    if (u.strictBrackets === true) throw new SyntaxError(syntaxError("closing", ")"));
                    m.output = o.escapeLast(m.output, "(");
                    decrement("parens");
                }
                while(m.braces > 0){
                    if (u.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "}"));
                    m.output = o.escapeLast(m.output, "{");
                    decrement("braces");
                }
                if (u.strictSlashes !== true && (B.type === "star" || B.type === "bracket")) {
                    push({
                        type: "maybe_slash",
                        value: "",
                        output: `${b}?`
                    });
                }
                if (m.backtrack === true) {
                    m.output = "";
                    for (const t of m.tokens){
                        m.output += t.output != null ? t.output : t.value;
                        if (t.suffix) {
                            m.output += t.suffix;
                        }
                    }
                }
                return m;
            };
            parse.fastpaths = (t, e)=>{
                const u = {
                    ...e
                };
                const r = typeof u.maxLength === "number" ? Math.min(s, u.maxLength) : s;
                const a = t.length;
                if (a > r) {
                    throw new SyntaxError(`Input length: ${a}, exceeds maximum allowed length: ${r}`);
                }
                t = c[t] || t;
                const { DOT_LITERAL: i, SLASH_LITERAL: p, ONE_CHAR: l, DOTS_SLASH: f, NO_DOT: A, NO_DOTS: _, NO_DOTS_SLASH: R, STAR: E, START_ANCHOR: h } = n.globChars(u.windows);
                const g = u.dot ? _ : A;
                const b = u.dot ? R : A;
                const C = u.capture ? "" : "?:";
                const y = {
                    negated: false,
                    prefix: ""
                };
                let $ = u.bash === true ? ".*?" : E;
                if (u.capture) {
                    $ = `(${$})`;
                }
                const globstar = (t)=>{
                    if (t.noglobstar === true) return $;
                    return `(${C}(?:(?!${h}${t.dot ? f : i}).)*?)`;
                };
                const create = (t)=>{
                    switch(t){
                        case "*":
                            return `${g}${l}${$}`;
                        case ".*":
                            return `${i}${l}${$}`;
                        case "*.*":
                            return `${g}${$}${i}${l}${$}`;
                        case "*/
    /*":
                            return `(?:${g}${globstar(u)}${p})?${b}${l}${$}`;
                        case "**/
    // if the user didn't define "localPatterns", we allow all local images
    //n');
    //# sourceMappingURL=match-local-pattern.js.map
    // Should be the same as writeImagesManifest()
    //# sourceMappingURL=match-remote-pattern.js.map
    // these should always be provided but make sure they are
    //')) {
    //) must be changed to an absolute URL (http:// or https://)');
    // We use dynamic require because this should only error in development
    //nextjs.org/docs/messages/next-image-unconfigured-localpatterns");
    // or https://)');
    // We use dynamic require because this should only error in development
    //nextjs.org/docs/messages/next-image-unconfigured-host");
    //nextjs.org/docs/messages/next-image-unconfigured-qualities");
    // We use this to determine if the import is the default loader
    // or a custom loader defined by the user in next.config.js
    //# sourceMappingURL=image-loader.js.map
    //# sourceMappingURL=use-merged-ref.js.map
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    // This is replaced by webpack define plugin
    // See https://stackoverflow.com/q/39777833/266535 for why we use this ref
    // handler instead of the img's onLoad attribute.
    // Exit early in case of race condition:
    // - onload() is called
    // - decode() is called but incomplete
    // - unmount is called
    // - decode() completes
    // Since we don't have the SyntheticEvent here,
    // we must create one with the same shape.
    // See https://reactjs.org/docs/events.html
    //n').searchParams.get('url') || src;
    //nextjs.org/docs/api-reference/next/image#sizes');
    //nextjs.org/docs/api-reference/next/image#sizes');
    // In React 19.0.0 or newer, we must use camelCase
    // prop to avoid "Warning: Invalid DOM property".
    // See https://github.com/facebook/react/pull/25927
    // In React 18.2.0 or older, we must use lowercase prop
    // to avoid "Warning: Invalid DOM property".
    /*#__PURE__*/
    // If the image has an error before react hydrates, then the error is lost.
    // The workaround is to wait until the image is mounted which is after hydration,
    // then we set the src again to trigger the error handler (if there was an error).
    // eslint-disable-next-line no-self-assign
    /*#__PURE__*/
    // It's intended to keep `loading` before `src` because React updates
    // props in order which causes Safari/Firefox to not lazy load properly.
    // See https://github.com/facebook/react/issues/25883
    // It's intended to keep `src` the last attribute because React updates
    // attributes in order. If we keep `src` the first one, Safari will
    // immediately start to fetch `src`, before `sizes` and `srcSet` are even
    // updated by React. That causes multiple unnecessary requests if `srcSet`
    // and `sizes` are defined.
    // This bug cannot be reproduced in Chrome or Firefox.
    // if the real image fails to load, this will ensure "alt" is visible
    // If the real image fails to load, this will still remove the placeholder.
    // See https://github.com/facebook/react/pull/26940
    /*#__PURE__*/
    /*#__PURE__*/
    // Note how we omit the `href` attribute, as it would only be relevant
    // for browsers that do not support `imagesrcset`, and in those cases
    // it would cause the incorrect image to be preloaded.
    //
    // https://html.spec.whatwg.org/multipage/semantics.html#attr-link-imagesrcset
    /*#__PURE__*/
    // We're in the app directory if there is no pages router.
    /*#__PURE__*/
    /*#__PURE__*/
    /*#__PURE__*/
    //# sourceMappingURL=image-component.js.map
    //# sourceMappingURL=node_modules_next_dist_ea69ac._.js.map

File: ./frontend/.next/static/chunks/node_modules_next_dist_compiled_react-dom_1f56dc._.js
  JavaScript Functions:
    - noop
    - testStringCoercion
    - createPortal
    - getCrossOriginStringAs
    - getValueDescriptorExpectingObjectForWarning
    - getValueDescriptorExpectingEnumForWarning
    - resolveDispatcher
    - component
    - is
    - checkDCE
    - is
    - findHook
    - copyWithSetImpl
    - copyWithRename
    - copyWithRenameImpl
    - copyWithDeleteImpl
    - shouldSuspendImpl
    - shouldErrorImpl
    - createFiber
    - warnForMissingKey
    - warnInvalidHookAccess
    - warnInvalidContextAccess
    - components
    - body
    - noop
    - setToSortedString
    - scheduleRoot
    - scheduleRefresh
    - setRefreshHandler
    - isValidContainer
    - getIteratorFn
    - getComponentNameFromType
    - getComponentNameFromOwner
    - getComponentNameFromFiber
    - disabledLog
    - disableLogs
    - reenableLogs
    - describeBuiltInComponentFrame
    - describeNativeComponentFrame
    - describeFiber
    - getStackByFiberInDevAndProd
    - getCurrentFiberOwnerNameInDevOrNull
    - getCurrentFiberStackInDev
    - runWithFiberInDEV
    - getNearestMountedFiber
    - getSuspenseInstanceFromFiber
    - assertIsMounted
    - findCurrentFiberUsingSlowPath
    - findCurrentHostFiberImpl
    - createCursor
    - pop
    - push
    - requiredContext
    - pushHostContainer
    - popHostContainer
    - getHostContext
    - pushHostContext
    - popHostContext
    - typeName
    - willCoercionThrow
    - testStringCoercion
    - checkAttributeStringCoercion
    - checkCSSPropertyStringCoercion
    - checkFormFieldValueStringCoercion
    - injectInternals
    - onCommitRoot
    - setIsStrictModeForDevtools
    - injectProfilingHooks
    - markCommitStopped
    - markComponentRenderStarted
    - markComponentRenderStopped
    - markRenderStarted
    - markRenderStopped
    - markStateUpdateScheduled
    - clz32Fallback
    - getLabelForLane
    - getHighestPriorityLanes
    - getNextLanes
    - checkIfRootIsPrerendering
    - computeExpirationTime
    - claimNextTransitionLane
    - claimNextRetryLane
    - createLaneMap
    - markRootUpdated
    - markRootFinished
    - markSpawnedDeferredLane
    - markRootEntangled
    - addFiberToLanesMap
    - movePendingFibersToMemoized
    - lanesToEventPriority
    - resolveUpdatePriority
    - runWithPriority
    - detachDeletedInstance
    - getClosestInstanceFromNode
    - getInstanceFromNode
    - getNodeFromInstance
    - getResourcesFromRoot
    - markNodeAsHoistable
    - registerTwoPhaseEvent
    - registerDirectEvent
    - checkControlledValueProps
    - isAttributeNameSafe
    - getValueForAttributeOnCustomComponent
    - setValueForAttribute
    - setValueForKnownAttribute
    - setValueForNamespacedAttribute
    - getToStringValue
    - isCheckable
    - trackValueOnNode
    - track
    - updateValueIfChanged
    - getActiveElement
    - escapeSelectorAttributeValueInsideDoubleQuotes
    - validateInputProps
    - updateInput
    - initInput
    - setDefaultValue
    - validateOptionProps
    - getDeclarationErrorAddendum
    - updateOptions
    - validateSelectProps
    - validateTextareaProps
    - updateTextarea
    - initTextarea
    - findNotableNode
    - indentation
    - added
    - removed
    - describeFiberType
    - describeTextNode
    - describeTextDiff
    - objectName
    - describeValue
    - describePropValue
    - describeExpandedElement
    - describePropertiesDiff
    - describeElementDiff
    - describeSiblingFiber
    - describeNode
    - describeDiff
    - describeAncestors
    - updatedAncestorInfoDev
    - isTagValidWithParent
    - findInvalidAncestorForTag
    - findAncestor
    - validateDOMNesting
    - validateTextNesting
    - setTextContent
    - camelize
    - setValueForStyle
    - setValueForStyles
    - isCustomElement
    - getAttributeAlias
    - validateProperty
    - validateProperties
    - validateProperty
    - warnUnknownProperties
    - sanitizeURL
    - getEventTarget
    - restoreStateOfTarget
    - batchedUpdates
    - getListener
    - getData
    - getEventCharCode
    - functionThatReturnsTrue
    - functionThatReturnsFalse
    - createSyntheticEvent
    - SyntheticBaseEvent
    - modifierStateGetter
    - getEventModifierState
    - isFallbackCompositionEnd
    - getDataFromCustomEvent
    - getNativeBeforeInputChars
    - getFallbackBeforeInputChars
    - isTextInputElement
    - isEventSupported
    - createAndAccumulateChangeEvent
    - runEventInBatch
    - getInstIfValueChanged
    - getTargetInstForChangeEvent
    - stopWatchingForValueChange
    - handlePropertyChange
    - handleEventsForInputEventPolyfill
    - getTargetInstForInputEventPolyfill
    - getTargetInstForClickEvent
    - getTargetInstForInputOrChangeEvent
    - is
    - shallowEqual
    - getLeafNode
    - getNodeForCharacterOffset
    - containsNode
    - getActiveElementDeep
    - hasSelectionCapabilities
    - restoreSelection
    - constructSelectEvent
    - makePrefixMap
    - getVendorPrefixedEventName
    - registerSimpleEvent
    - finishQueueingConcurrentUpdates
    - enqueueUpdate
    - enqueueConcurrentHookUpdate
    - enqueueConcurrentRenderForLane
    - markUpdateLaneFromFiberToRoot
    - getRootForUpdatedFiber
    - resolveFunctionForHotReloading
    - resolveForwardRefForHotReloading
    - isCompatibleFamilyForHotReloading
    - markFailedErrorBoundaryForHotReloading
    - scheduleFibersWithFamiliesRecursively
    - pushNestedEffectDurations
    - popNestedEffectDurations
    - bubbleNestedEffectDurations
    - startProfilerTimer
    - stopProfilerTimerIfRunningAndRecordDuration
    - stopProfilerTimerIfRunningAndRecordIncompleteDuration
    - recordEffectDuration
    - startEffectTimer
    - transferActualDuration
    - createCapturedValueAtFiber
    - pushTreeFork
    - pushTreeId
    - pushMaterializedTreeId
    - popTreeContext
    - warnIfNotHydrating
    - buildHydrationDiffNode
    - warnNonHydratedInstance
    - throwOnHydrationMismatch
    - prepareToHydrateHostInstance
    - popToNextHostParent
    - popHydrationState
    - resetHydrationState
    - queueHydrationError
    - emitPendingHydrationWarnings
    - createThenableState
    - isThenableResolved
    - noop
    - trackUsedThenable
    - getSuspendedThenable
    - checkIfUseWrappedInAsyncCatch
    - createCache
    - retainCache
    - releaseCache
    - entangleAsyncAction
    - pingEngtangledActionScope
    - chainThenableValue
    - pushHiddenContext
    - reuseHiddenContextOnStack
    - popHiddenContext
    - peekCacheFromPool
    - pushTransition
    - getSuspendedCache
    - mountHookTypesDev
    - updateHookTypesDev
    - checkDepsAreArrayDev
    - warnOnUseFormStateInDev
    - throwInvalidHookError
    - component
    - areHookInputsEqual
    - renderWithHooks
    - finishRenderingHooks
    - renderWithHooksAgain
    - TransitionAwareHostComponent
    - checkDidRenderIdHook
    - bailoutHooks
    - resetHooksOnUnwind
    - mountWorkInProgressHook
    - updateWorkInProgressHook
    - useThenable
    - use
    - useMemoCache
    - basicStateReducer
    - mountReducer
    - updateReducer
    - updateReducerImpl
    - rerenderReducer
    - mountSyncExternalStore
    - updateSyncExternalStore
    - pushStoreConsistencyCheck
    - updateStoreInstance
    - subscribeToStore
    - checkIfSnapshotChanged
    - forceStoreRerender
    - mountStateImpl
    - mountState
    - mountOptimistic
    - updateOptimistic
    - updateOptimisticImpl
    - rerenderOptimistic
    - dispatchActionState
    - runActionStateAction
    - handleActionReturnValue
    - was
    - to
    - onActionSuccess
    - onActionError
    - notifyActionListeners
    - actionStateReducer
    - mountActionState
    - updateActionState
    - updateActionStateImpl
    - actionStateActionEffect
    - rerenderActionState
    - pushSimpleEffect
    - createEffectInstance
    - mountRef
    - mountEffectImpl
    - updateEffectImpl
    - mountEffect
    - mountLayoutEffect
    - imperativeHandleEffect
    - mountImperativeHandle
    - that
    - updateImperativeHandle
    - that
    - mountCallback
    - updateCallback
    - mountMemo
    - updateMemo
    - mountDeferredValue
    - updateDeferredValue
    - rerenderDeferredValue
    - mountDeferredValueImpl
    - updateDeferredValueImpl
    - startTransition
    - startHostTransition
    - ensureFormComponentIsStateful
    - requestFormReset
    - mountTransition
    - updateTransition
    - rerenderTransition
    - useHostTransitionStatus
    - mountId
    - mountRefresh
    - refreshCache
    - dispatchReducerAction
    - dispatchSetState
    - dispatchSetStateInternal
    - dispatchOptimisticSetState
    - isRenderPhaseUpdate
    - enqueueRenderPhaseUpdate
    - entangleTransitionUpdate
    - pushDebugInfo
    - validateFragmentProps
    - unwrapThenable
    - coerceRef
    - throwOnInvalidObjectType
    - warnOnFunctionType
    - rather
    - rather
    - warnOnSymbolType
    - createChildReconciler
    - deleteChild
    - deleteRemainingChildren
    - mapRemainingChildren
    - useFiber
    - placeChild
    - placeSingleChild
    - updateTextNode
    - updateElement
    - updatePortal
    - updateFragment
    - createChild
    - updateSlot
    - updateFromMap
    - warnOnInvalidKey
    - reconcileChildrenArray
    - reconcileChildrenIterator
    - reconcileChildFibersImpl
    - pushPrimaryTreeSuspenseHandler
    - pushOffscreenSuspenseHandler
    - reuseSuspenseHandlerOnStack
    - popSuspenseHandler
    - findFirstSuspended
    - warnOnInvalidCallback
    - applyDerivedStateFromProps
    - checkShouldComponentUpdate
    - callComponentWillReceiveProps
    - resolveClassComponentProps
    - defaultOnUncaughtError
    - defaultOnCaughtError
    - defaultOnRecoverableError
    - logUncaughtError
    - logCaughtError
    - createRootErrorUpdate
    - createClassErrorUpdate
    - initializeClassErrorUpdate
    - throwException
    - reconcileChildren
    - updateForwardRef
    - updateMemoComponent
    - updateSimpleMemoComponent
    - updateOffscreenComponent
    - deferHiddenOffscreenComponent
    - markRef
    - updateFunctionComponent
    - replayFunctionComponent
    - updateClassComponent
    - is
    - mountHostRootWithoutHydrating
    - validateFunctionComponentInDev
    - component
    - mountSuspenseOffscreenState
    - getRemainingWorkInPrimaryTree
    - updateSuspenseComponent
    - mountSuspensePrimaryChildren
    - mountWorkInProgressOffscreenFiber
    - retrySuspenseComponentWithoutHydrating
    - scheduleSuspenseWorkOnFiber
    - validateSuspenseListNestedChild
    - initSuspenseListRenderState
    - updateSuspenseListComponent
    - bailoutOnAlreadyFinishedWork
    - checkScheduledUpdateOrContext
    - attemptEarlyBailoutIfNoScheduledUpdate
    - beginWork
    - resetContextDependencies
    - pushProvider
    - popProvider
    - scheduleContextWorkOnParentPath
    - propagateContextChanges
    - propagateParentContextChanges
    - checkIfContextChanged
    - prepareToReadContext
    - readContext
    - components
    - body
    - readContextDuringReconciliation
    - readContextForConsumer
    - components
    - body
    - initializeUpdateQueue
    - cloneUpdateQueue
    - createUpdate
    - enqueueUpdate
    - entangleTransitions
    - enqueueCapturedUpdate
    - suspendIfUpdateReadFromEntangledAsyncAction
    - processUpdateQueue
    - callCallback
    - commitHiddenCallbacks
    - commitCallbacks
    - shouldProfile
    - commitHookLayoutEffects
    - commitHookLayoutUnmountEffects
    - commitHookEffectListMount
    - inside
    - fetchData
    - commitHookEffectListUnmount
    - commitHookPassiveMountEffects
    - commitHookPassiveUnmountEffects
    - commitClassCallbacks
    - callGetSnapshotBeforeUpdates
    - commitClassSnapshot
    - safelyCallComponentWillUnmount
    - commitAttachRef
    - or
    - safelyAttachRef
    - safelyDetachRef
    - commitProfiler
    - commitProfilerPostCommitImpl
    - commitHostMount
    - commitHostUpdate
    - isHostParent
    - getHostSibling
    - insertOrAppendPlacementNodeIntoContainer
    - insertOrAppendPlacementNode
    - commitPlacement
    - commitBeforeMutationEffects
    - commitLayoutEffectOnFiber
    - detachFiberAfterEffects
    - recursivelyTraverseDeletionEffects
    - commitDeletionEffectsOnFiber
    - commitSuspenseHydrationCallbacks
    - getRetryCache
    - attachSuspenseRetryListeners
    - commitMutationEffects
    - recursivelyTraverseMutationEffects
    - commitMutationEffectsOnFiber
    - commitReconciliationEffects
    - recursivelyResetForms
    - commitLayoutEffects
    - recursivelyTraverseLayoutEffects
    - disappearLayoutEffects
    - recursivelyTraverseDisappearLayoutEffects
    - reappearLayoutEffects
    - recursivelyTraverseReappearLayoutEffects
    - commitOffscreenPassiveMountEffects
    - commitCachePassiveMountEffect
    - recursivelyTraversePassiveMountEffects
    - commitPassiveMountOnFiber
    - recursivelyTraverseReconnectPassiveEffects
    - reconnectPassiveEffects
    - recursivelyTraverseAtomicPassiveEffects
    - recursivelyAccumulateSuspenseyCommit
    - accumulateSuspenseyCommitOnFiber
    - detachAlternateSiblings
    - recursivelyTraversePassiveUnmountEffects
    - commitPassiveUnmountOnFiber
    - recursivelyTraverseDisconnectPassiveEffects
    - disconnectPassiveEffect
    - commitPassiveUnmountEffectsInsideOfDeletedTree_begin
    - FiberNode
    - shouldConstruct
    - createWorkInProgress
    - resetWorkInProgress
    - createFiberFromTypeAndProps
    - createFiberFromElement
    - createFiberFromFragment
    - createFiberFromOffscreen
    - createFiberFromText
    - createFiberFromPortal
    - markUpdate
    - preloadResourceAndSuspendIfNeeded
    - scheduleRetryEffect
    - cutOffTailIfNeeded
    - bubbleProperties
    - completeWork
    - unwindWork
    - unwindInterruptedWork
    - onCommitRoot
    - isConcurrentActEnvironment
    - requestUpdateLane
    - requestDeferredLane
    - scheduleUpdateOnFiber
    - of
    - performWorkOnRoot
    - queueRecoverableErrors
    - commitRootWhenReady
    - isRenderConsistentWithExternalStores
    - markRootSuspended
    - flushSyncWork
    - resetWorkInProgressStack
    - prepareFreshStack
    - handleThrow
    - pushDispatcher
    - pushAsyncDispatcher
    - renderDidSuspendDelayIfPossible
    - renderRootSync
    - workLoopSync
    - renderRootConcurrent
    - workLoopConcurrent
    - performUnitOfWork
    - replaySuspendedUnitOfWork
    - replayBeginWork
    - throwAndUnwindWorkLoop
    - completeUnitOfWork
    - unwindUnitOfWork
    - commitRoot
    - commitRootImpl
    - makeErrorInfo
    - releaseRootPooledCache
    - flushPassiveEffects
    - captureCommitPhaseErrorOnRoot
    - captureCommitPhaseError
    - attachPingListener
    - pingSuspendedRoot
    - retryTimedOutBoundary
    - retryDehydratedSuspenseBoundary
    - resolveRetryWakeable
    - recursivelyTraverseAndDoubleInvokeEffectsInDEV
    - doubleInvokeEffectsOnFiber
    - commitDoubleInvokeEffectsInDEV
    - warnAboutUpdateOnNotYetMountedFiberInDEV
    - that
    - restorePendingUpdaters
    - scheduleCallback
    - warnIfUpdatesNotWrappedWithActDEV
    - ensureRootIsScheduled
    - flushSyncWorkAcrossRoots_impl
    - processRootScheduleInMicrotask
    - scheduleTaskForRootDuringMicrotask
    - performWorkOnRootViaSchedulerTask
    - performSyncWorkOnRoot
    - cancelCallback
    - scheduleImmediateTask
    - requestTransitionLane
    - coerceFormActionProp
    - createFormDataWithSubmitter
    - extractEvents
    - processDispatchQueue
    - listenToNonDelegatedEvent
    - listenToNativeEvent
    - listenToAllSupportedEvents
    - addTrappedEventListener
    - dispatchEventForPluginEventSystem
    - createDispatchListener
    - accumulateTwoPhaseListeners
    - getParent
    - accumulateEnterLeaveListenersForEvent
    - validatePropertiesInDevelopment
    - warnForPropDifference
    - warnForExtraAttributes
    - warnForInvalidEventListener
    - normalizeHTML
    - normalizeMarkupForTextOrAttribute
    - checkForUnmatchedText
    - noop
    - setProp
    - as
    - as
    - will
    - as
    - as
    - as
    - will
    - setPropOnCustomElement
    - setInitialProperties
    - updateProperties
    - getPropNameFromAttributeName
    - getStylesObjectFromElement
    - diffHydratedStyles
    - hydrateAttribute
    - hydrateBooleanAttribute
    - hydrateBooleanishAttribute
    - hydrateNumericAttribute
    - hydrateSanitizedAttribute
    - diffHydratedProperties
    - propNamesListJoin
    - getOwnerDocumentFromRootContainer
    - getOwnHostContext
    - getChildHostContextProd
    - shouldSetTextContent
    - shouldAttemptEagerTransition
    - handleErrorInNextTick
    - commitMount
    - commitUpdate
    - resetTextContent
    - commitTextUpdate
    - removeChild
    - removeChildFromContainer
    - clearSuspenseBoundary
    - hideInstance
    - hideTextInstance
    - unhideInstance
    - unhideTextInstance
    - clearContainerSparingly
    - canHydrateInstance
    - canHydrateTextInstance
    - isSuspenseInstanceFallback
    - registerSuspenseInstanceRetry
    - getNextHydratable
    - describeHydratableInstanceForDevWarnings
    - diffHydratedTextForDevWarnings
    - getNextHydratableInstanceAfterSuspenseInstance
    - getParentSuspenseInstance
    - commitHydratedContainer
    - commitHydratedSuspenseInstance
    - resolveSingletonInstance
    - acquireSingletonInstance
    - getHoistableRoot
    - preconnectAs
    - getResource
    - describeLinkForResourceErrorDEV
    - getStyleKey
    - getStylesheetSelectorFromKey
    - stylesheetPropsFromRawProps
    - preloadStylesheet
    - getScriptKey
    - getScriptSelectorFromKey
    - acquireResource
    - insertStylesheet
    - adoptPreloadPropsForStylesheet
    - adoptPreloadPropsForScript
    - getHydratableHoistableCache
    - mountHoistable
    - isHostHoistableType
    - preloadResource
    - noop
    - suspendResource
    - waitForCommitToBeReady
    - onUnsuspend
    - insertSuspendedStylesheets
    - insertStylesheetIntoRoot
    - bindToConsole
    - FiberRootNode
    - createFiberRoot
    - getContextForSubtree
    - updateContainerSync
    - updateContainerImpl
    - of
    - markRetryLaneImpl
    - markRetryLaneIfNotHydrated
    - attemptContinuousHydration
    - getCurrentFiberForDevTools
    - getLaneLabelMap
    - dispatchDiscreteEvent
    - dispatchContinuousEvent
    - dispatchEvent
    - findInstanceBlockingEvent
    - findInstanceBlockingTarget
    - getEventPriority
    - clearIfContinuousEvent
    - accumulateOrCreateContinuousQueuedReplayableEvent
    - queueIfContinuousEvent
    - attemptExplicitHydrationTarget
    - attemptReplayContinuousQueuedEvent
    - attemptReplayContinuousQueuedEventInMap
    - replayUnblockedEvents
    - scheduleCallbackIfUnblocked
    - scheduleReplayQueueIfNeeded
    - retryIfBlockedOn
    - unblock
    - ReactDOMRoot
    - ReactDOMHydrationRoot
    - warnIfReactDOMContainerInDEV
    - of
    - checkDCE
    - is
  Comments:
    /**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    //react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.");
    //reactjs.org/link/react-polyfills");
    //github.com/tc39/proposal-import-attributes)', encountered, href);
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    // Verify that the code above has been dead code eliminated (DCE'd).
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    /**
 * @license React
 * react-dom-client.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    /*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/
    //react.dev/link/rules-of-hooks");
    //react.dev/link/react-devtools"), !0;
    //react.dev/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type), didWarnCheckedDefaultChecked = !0);
    //react.dev/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type), didWarnValueDefaultValue$1 = !0);
    //react.dev/link/controlled-components"), didWarnValueDefaultValue = !0);
    //react.dev/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component"), didWarnValDefaultVal = !0);
    //react.dev/link/invalid-aria-props", props, type) : 1 < invalidProps.length && console.error("Invalid aria props %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props", props, type);
    //react.dev/link/attribute-behavior ", props, type) : 1 < unknownProps.length && console.error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://react.dev/link/attribute-behavior ", props, type);
    //react.dev/link/hydration-mismatch" + diff), fiber));
    //react.dev/link/hydration-mismatch", diffRoot));
    //react.dev/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
    //react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.");
    //react.dev/link/invalid-hook-call)");
    //react.dev/link/invalid-hook-call)");
    //react.dev/link/error-boundaries to learn more about error boundaries.");
    //react.dev/link/legacy-context)", componentName))));
    //react.dev/link/unsafe-component-lifecycles", _instance, newApiName, null !== state ? "\n  " + state : "", null !== lane ? "\n  " + lane : "", null !== foundWillUpdateName ? "\n  " + foundWillUpdateName : ""));
    //react.dev/link/legacy-context)", state));
    //react.dev/link/legacy-context)", state));
    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://react.dev/link/hooks-data-fetching" : " You returned: " + lastEffect;
    //react.dev/link/setstate-in-render", fiber, root, root));
    /* finish loading suspended data */
    /* assert on the output */
    //react.dev/link/wrap-tests-with-act");
    /* fire events that update state */
    /* assert on the output */
    //react.dev/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
    //react.dev/link/dangerously-set-inner-html for more information.");
    //react.dev/link/dangerously-set-inner-html for more information.");
    //react.dev/link/controlled-components"), didWarnUncontrolledToControlled = !0);
    //react.dev/link/controlled-components"), didWarnControlledToUncontrolled = !0);
    //www.w3.org/1998/Math/MathML", SVG_NAMESPACE = "http://www.w3.org/2000/svg", shorthandToLonghand = {
    //react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
    //react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n\nPlease update the following components: %s", sortedNames));
    //react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", sortedNames));
    //react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", sortedNames));
    //react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", sortedNames));
    //react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", sortedNames));
    //react.dev/link/legacy-context", sortedNames);
    //react.dev/link/warning-keys for more information.', currentComponentErrorInfo, childOwnerAppendix);
    //www.w3.org/1999/xlink", xmlNamespace = "http://www.w3.org/XML/1998/namespace", EXPECTED_FORM_ACTION_URL = "javascript:throw new Error('React form unexpectedly submitted.')", SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning", SUSPENSE_START_DATA = "$", SUSPENSE_END_DATA = "/$", SUSPENSE_PENDING_START_DATA = "$?", SUSPENSE_FALLBACK_START_DATA = "$!", FORM_STATE_IS_MATCHING = "F!", FORM_STATE_IS_NOT_MATCHING = "F", DOCUMENT_READY_STATE_COMPLETE = "complete", STYLE = "style", HostContextNamespaceNone = 0, HostContextNamespaceSvg = 1, HostContextNamespaceMath = 2, eventsEnabled = null, selectionInformation = null, warnedUnknownTags = {
    //react.dev/warnings/version-mismatch"));
    //react.dev/link/react-polyfills");
    //react.dev/link/react-devtools" + ("file:" === protocol ? "\nYou might need to use a local HTTP server (instead of file://): https://react.dev/link/react-devtools-faq" : ""), "font-weight:bold");
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    // Verify that the code above has been dead code eliminated (DCE'd).
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    //# sourceMappingURL=node_modules_next_dist_compiled_react-dom_1f56dc._.js.map

File: ./frontend/.next/static/chunks/pages/_error.js

File: ./frontend/.next/static/chunks/pages/_app.js

File: ./frontend/.next/build/chunks/postcss_config_mjs_transform_ts_89c7e7._.js

File: ./frontend/.next/build/chunks/[root of the server]__05f88b._.js
  JavaScript Functions:
    - toPath
    - or
    - transform
  Comments:
    /** @type {import('postcss-load-config').Config} */
    // @ts-ignore
    // @ts-ignore
    /* turbopackIgnore: true */
    //# sourceMappingURL=%5Broot%20of%20the%20server%5D__05f88b._.js.map

File: ./frontend/.next/build/chunks/node_modules_b5d1de._.js
  JavaScript Functions:
    - formatter
    - replaceClose
    - createColors
    - tokenizer
    - position
    - unclosed
    - endOfFile
    - nextToken
    - back
    - registerInput
    - getTokenType
    - terminalHighlight
    - aside
    - mark
    - highlight
    - mark
    - aside
    - highlight
    - capitalize
    - stringify
    - cloneNode
    - sourceOffset
    - cleanSource
    - markTreeDirty
    - registerParse
    - registerRule
    - registerAtRule
    - registerRoot
    - rebuild
    - registerLazyResult
    - registerProcessor
    - customAlphabet
    - nanoid
    - toVLQSigned
    - fromVLQSigned
    - base64VLQ_encode
    - base64VLQ_decode
    - for
    - getArg
    - urlParse
    - urlGenerate
    - lruMemoize
    - normalize
    - join
    - relative
    - identity
    - toSetString
    - fromSetString
    - isProtoString
    - compareByOriginalPositions
    - compareByOriginalPositionsNoSource
    - compareByGeneratedPositionsDeflated
    - compareByGeneratedPositionsDeflatedNoLine
    - strcmp
    - compareByGeneratedPositionsInflated
    - parseSourceMapInput
    - computeSourceURL
    - ArraySet
    - ArraySet_fromArray
    - ArraySet_size
    - ArraySet_add
    - ArraySet_has
    - ArraySet_indexOf
    - ArraySet_at
    - ArraySet_toArray
    - generatedPositionAfter
    - MappingList
    - MappingList_forEach
    - MappingList_add
    - MappingList_toArray
    - SourceMapGenerator
    - SourceMapGenerator_fromSourceMap
    - SourceMapGenerator_addMapping
    - SourceMapGenerator_setSourceContent
    - SourceMapGenerator_applySourceMap
    - SourceMapGenerator_validateMapping
    - SourceMapGenerator_serializeMappings
    - SourceMapGenerator_generateSourcesContent
    - SourceMapGenerator_toJSON
    - SourceMapGenerator_toString
    - recursiveSearch
    - terminates
    - which
    - search
    - than
    - SortTemplate
    - swap
    - randomIntInRange
    - doQuickSort
    - cloneSort
    - SourceMapConsumer
    - SourceMapConsumer_charIsMappingSeparator
    - SourceMapConsumer_parseMappings
    - that
    - SourceMapConsumer_eachMapping
    - SourceMapConsumer_allGeneratedPositionsFor
    - BasicSourceMapConsumer
    - to
    - SourceMapConsumer_fromSourceMap
    - Mapping
    - sortGenerated
    - SourceMapConsumer_parseMappings
    - SourceMapConsumer_findMapping
    - SourceMapConsumer_computeColumnSpans
    - SourceMapConsumer_originalPositionFor
    - BasicSourceMapConsumer_hasContentsOfAllSources
    - SourceMapConsumer_sourceContentFor
    - is
    - SourceMapConsumer_generatedPositionFor
    - IndexedSourceMapConsumer
    - IndexedSourceMapConsumer_originalPositionFor
    - IndexedSourceMapConsumer_hasContentsOfAllSources
    - IndexedSourceMapConsumer_sourceContentFor
    - IndexedSourceMapConsumer_generatedPositionFor
    - IndexedSourceMapConsumer_parseMappings
    - SourceNode
    - SourceNode_fromStringWithSourceMap
    - getNextLine
    - addMappingWithCode
    - SourceNode_add
    - SourceNode_prepend
    - is
    - SourceNode_walk
    - SourceNode_join
    - SourceNode_replaceRight
    - SourceNode_setSourceContent
    - is
    - SourceNode_walkSourceContents
    - SourceNode_toString
    - SourceNode_toStringWithSourceMap
    - fromBase64
    - registerLazyResult
    - registerProcessor
    - fromJSON
    - findLastWithPosition
    - parse
    - warnOnce
    - isPromise
    - getEvents
    - toStack
    - cleanMarks
    - add
    - registerPostcss
    - postcss
    - plugin
    - creator
    - comment
    - atRule
    - decl
    - rule
    - root
    - document
  Comments:
    /*' + left + node.text + right + '*/
    // Already had
    // Hack for first rule in CSS
    // `root` nodes in `document` should use only their own raws
    // Floating child without parent
    // Detect style by other nodes
    /* c8 ignore start */
    /* c8 ignore stop */
    // Not all custom syntaxes support `offset` in `source.start` and `source.end`
    /* c8 ignore next */
    /* c8 ignore next 3 */
    /* c8 ignore next */
    /* c8 ignore start */
    /* c8 ignore stop */
    // type needs to be passed to super, otherwise child roots won't be normalized correctly
    // This alphabet uses `A-Za-z0-9_-` symbols.
    // The order of characters is optimized for better gzip and brotli compression.
    // References to the same file (works both for gzip and brotli):
    // `'use`, `andom`, and `rict'`
    // References to the brotli default dictionary:
    // `-26T`, `1983`, `40px`, `75px`, `bush`, `jack`, `mind`, `very`, and `wolf`
    // A compact alternative for `for (var i = 0; i < step; i++)`.
    // `| 0` is more compact and faster than `Math.floor()`.
    // A compact alternative for `for (var i = 0; i < step; i++)`.
    // `| 0` is more compact and faster than `Math.floor()`.
    /* -*- Mode: js; js-indent-level: 2; -*- */
    /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
    /**
 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
 */
    /**
 * Decode a single base 64 character code digit to an integer. Returns -1 on
 * failure.
 */
    // 'A'
    // 'Z'
    // 'a'
    // 'z'
    // '0'
    // '9'
    // '+'
    // '/'
    // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
    // 26 - 51: abcdefghijklmnopqrstuvwxyz
    // 52 - 61: 0123456789
    // 62: +
    // 63: /
    // Invalid base64 digit.
    /* -*- Mode: js; js-indent-level: 2; -*- */
    /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
    // A single base 64 digit can contain 6 bits of data. For the base 64 variable
    // length quantities we use in the source map spec, the first bit is the sign,
    // the next four bits are the actual value, and the 6th bit is the
    // continuation bit. The continuation bit tells us whether there are more
    // digits in this value following this digit.
    //
    //   Continuation
    //   |    Sign
    //   |    |
    //   V    V
    //   101011
    // binary: 100000
    // binary: 011111
    // binary: 100000
    /**
 * Converts from a two-complement value to a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
 */
    /**
 * Converts to a two-complement value from a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
 */
    /**
 * Returns the base 64 VLQ encoded value.
 */
    // There are still more digits in this value, so we must make sure the
    // continuation bit is marked.
    /**
 * Decodes the next base 64 VLQ value from the given string and returns the
 * value and the rest of the string via the out parameter.
 */
    /* -*- Mode: js; js-indent-level: 2; -*- */
    /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
    /**
 * This is a helper function for getting values from parameter/options
 * objects.
 *
 * @param args The object we are extracting values from
 * @param name The name of the property we are getting.
 * @param defaultValue An optional value to return if the property is missing
 * from the object. If this is not specified and the property is missing, an
 * error will be thrown.
 */
    //';
    /**
 * Takes some function `f(input) -> result` and returns a memoized version of
 * `f`.
 *
 * We keep at most `MAX_CACHED_INPUTS` memoized results of `f` alive. The
 * memoization is a dumb-simple, linear least-recently-used cache.
 */
    /**
 * Normalizes a path, or the path portion of a URL:
 *
 * - Replaces consecutive slashes with one slash.
 * - Removes unnecessary '.' parts.
 * - Removes unnecessary '<dir>/..' parts.
 *
 * Based on code in the Node.js 'path' core module.
 *
 * @param aPath The path or url to normalize.
 */
    // Split the path into parts between `/` characters. This is much faster than
    // using `.split(/\/+/g)`.
    // The first part is blank if the path is absolute. Trying to go
    // above the root is a no-op. Therefore we can remove all '..' parts
    // directly after the root.
    /**
 * Joins two paths/URLs.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be joined with the root.
 *
 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
 *   first.
 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
 *   is updated with the result and aRoot is returned. Otherwise the result
 *   is returned.
 *   - If aPath is absolute, the result is aPath.
 *   - Otherwise the two paths are joined with a slash.
 * - Joining for example 'http://' and 'www.example.com' is also supported.
 */
    // `join(foo, '//www.example.org')`
    // `join('http://', 'www.example.com')`
    /**
 * Make a path relative to a URL or another path.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be made relative to aRoot.
 */
    // It is possible for the path to be above the root. In this case, simply
    // checking whether the root is a prefix of the path won't work. Instead, we
    // need to remove components from the root one by one, until either we find
    // a prefix that fits, or we run out of components to remove.
    // If the only part of the root that is left is the scheme (i.e. http://,
    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
    // have exhausted all components, so the path is not relative to the root.
    /*$/)) {
            return aPath;
        }
        ++level;
    }
    // Make sure we add a "../" for each component we removed from the root.
    return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
}
exports.relative = relative;
var supportsNullProto = function() {
    var obj = Object.create(null);
    return !('__proto__' in obj);
}();
function identity(s) {
    return s;
}
/**
 * Because behavior goes wacky when you set `__proto__` on objects, we
 * have to prefix all the strings in our set with an arbitrary character.
 *
 * See https://github.com/mozilla/source-map/pull/31 and
 * https://github.com/mozilla/source-map/issues/30
 *
 * @param String aStr
 */
    /* "__proto__".length */
    /* '_' */
    /* '_' */
    /* 'o' */
    /* 't' */
    /* 'o' */
    /* 'r' */
    /* 'p' */
    /* '_' */
    /* '_' */
    /* '$' */
    /**
 * Comparator between two mappings where the original positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same original source/line/column, but different generated
 * line and column the same. Useful when searching for a mapping with a
 * stubbed out mapping.
 */
    /**
 * Comparator between two mappings with deflated source and name indices where
 * the generated positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same generated line and column, but different
 * source/name/original line and column the same. Useful when searching for a
 * mapping with a stubbed out mapping.
 */
    // aStr2 !== null
    // aStr1 !== null
    /**
 * Comparator between two mappings with inflated source and name strings where
 * the generated positions are compared.
 */
    /**
 * Strip any JSON XSSI avoidance prefix from the string (as documented
 * in the source maps specification), and then parse the string as
 * JSON.
 */
    /**
 * Compute the URL of a source given the the source root, the source's
 * URL, and the source map's URL.
 */
    // This follows what Chrome does.
    // The spec says:
    //   Line 4: An optional source root, useful for relocating source
    //   files on a server or removing repeated values in the
    //   “sources” entry.  This value is prepended to the individual
    //   entries in the “source” field.
    // Historically, SourceMapConsumer did not take the sourceMapURL as
    // a parameter.  This mode is still somewhat supported, which is why
    // this code block is conditional.  However, it's preferable to pass
    // the source map URL to SourceMapConsumer, so that this function
    // can implement the source URL resolution algorithm as outlined in
    // the spec.  This block is basically the equivalent of:
    //    new URL(sourceURL, sourceMapURL).toString()
    // ... except it avoids using URL, which wasn't available in the
    // older releases of node still supported by this library.
    //
    // The spec says:
    //   If the sources are not absolute URLs after prepending of the
    //   “sourceRoot”, the sources are resolved relative to the
    //   SourceMap (like resolving script src in a html document).
    // Strip the last path component, but keep the "/".
    /* -*- Mode: js; js-indent-level: 2; -*- */
    /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
    /**
 * A data structure which is a combination of an array and a set. Adding a new
 * member is O(1), testing for membership is O(1), and finding the index of an
 * element is O(1). Removing elements from the set is not supported. Only
 * strings are supported for membership.
 */
    /**
 * Static method for creating ArraySet instances from an existing array.
 */
    /**
 * Return how many unique items are in this ArraySet. If duplicates have been
 * added, than those do not count towards the size.
 *
 * @returns Number
 */
    /**
 * Add the given string to this set.
 *
 * @param String aStr
 */
    /**
 * Is the given string a member of this set?
 *
 * @param String aStr
 */
    /**
 * What is the index of the given string in the array?
 *
 * @param String aStr
 */
    /**
 * What is the element at the given index?
 *
 * @param Number aIdx
 */
    /**
 * Returns the array representation of this set (which has the proper indices
 * indicated by indexOf). Note that this is a copy of the internal array used
 * for storing the members so that no one can mess with internal state.
 */
    /* -*- Mode: js; js-indent-level: 2; -*- */
    /*
 * Copyright 2014 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
    /**
 * Determine whether mappingB is after mappingA with respect to generated
 * position.
 */
    // Optimized for most common case
    /**
 * A data structure to provide a sorted view of accumulated mappings in a
 * performance conscious manner. It trades a neglibable overhead in general
 * case for a large speedup in case of mappings being added in order.
 */
    // Serves as infimum
    /**
 * Iterate through internal items. This method takes the same arguments that
 * `Array.prototype.forEach` takes.
 *
 * NOTE: The order of the mappings is NOT guaranteed.
 */
    /**
 * Add the given source mapping.
 *
 * @param Object aMapping
 */
    /**
 * Returns the flat, sorted array of mappings. The mappings are sorted by
 * generated position.
 *
 * WARNING: This method returns internal data without copying, for
 * performance. The return value must NOT be mutated, and should be treated as
 * an immutable borrow. If you want to take ownership, you must make your own
 * copy.
 */
    /* -*- Mode: js; js-indent-level: 2; -*- */
    /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
    /**
 * An instance of the SourceMapGenerator represents a source map which is
 * being built incrementally. You may pass an object with the following
 * properties:
 *
 *   - file: The filename of the generated source.
 *   - sourceRoot: A root for all relative URLs in this source map.
 */
    /**
 * Creates a new SourceMapGenerator based on a SourceMapConsumer
 *
 * @param aSourceMapConsumer The SourceMap.
 */
    /**
 * Add a single mapping from original source line and column to the generated
 * source's line and column for this source map being created. The mapping
 * object should have the following properties:
 *
 *   - generated: An object with the generated line and column positions.
 *   - original: An object with the original line and column positions.
 *   - source: The original source file (relative to the sourceRoot).
 *   - name: An optional original token name for this mapping.
 */
    /**
 * Set the source content for a source file.
 */
    // Add the source content to the _sourcesContents map.
    // Create a new _sourcesContents map if the property is null.
    // Remove the source file from the _sourcesContents map.
    // If the _sourcesContents map is empty, set the property to null.
    /**
 * Applies the mappings of a sub-source-map for a specific source file to the
 * source map being generated. Each mapping to the supplied source file is
 * rewritten using the supplied source map. Note: The resolution for the
 * resulting mappings is the minimium of this map and the supplied map.
 *
 * @param aSourceMapConsumer The source map to be applied.
 * @param aSourceFile Optional. The filename of the source file.
 *        If omitted, SourceMapConsumer's file property will be used.
 * @param aSourceMapPath Optional. The dirname of the path to the source map
 *        to be applied. If relative, it is relative to the SourceMapConsumer.
 *        This parameter is needed when the two source maps aren't in the same
 *        directory, and the source map to be applied contains relative source
 *        paths. If so, those relative source paths need to be rewritten
 *        relative to the SourceMapGenerator.
 */
    // If aSourceFile is omitted, we will use the file property of the SourceMap
    // Make "sourceFile" relative if an absolute Url is passed.
    // Applying the SourceMap can add and remove items from the sources and
    // the names array.
    // Find mappings for the "sourceFile"
    // Check if it can be mapped by the source map, then update the mapping.
    // Copy mapping
    // Copy sourcesContents of applied map.
    /**
 * A mapping can have one of the three levels of data:
 *
 *   1. Just the generated position.
 *   2. The Generated position, original position, and original source.
 *   3. Generated and original position, original source, as well as a name
 *      token.
 *
 * To maintain consistency, we validate that any new mapping being added falls
 * in to one of these categories.
 */
    // When aOriginal is truthy but has empty values for .line and .column,
    // it is most likely a programmer error. In this case we throw a very
    // specific error message to try to guide them the right way.
    // For example: https://github.com/Polymer/polymer-bundler/pull/519
    // Case 1.
    // Cases 2 and 3.
    /**
 * Serialize the accumulated mappings in to the stream of base 64 VLQs
 * specified by the source map format.
 */
    // lines are stored 0-based in SourceMap spec version 3
    /**
 * Externalize the source map.
 */
    /**
 * Render the source map being generated to a string.
 */
    /* -*- Mode: js; js-indent-level: 2; -*- */
    /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
    /**
 * Recursive implementation of binary search.
 *
 * @param aLow Indices here and lower do not contain the needle.
 * @param aHigh Indices here and higher do not contain the needle.
 * @param aNeedle The element being searched for.
 * @param aHaystack The non-empty array being searched.
 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 */
    // This function terminates when one of the following is true:
    //
    //   1. We find the exact element we are looking for.
    //
    //   2. We did not find the exact element, but we can return the index of
    //      the next-closest element.
    //
    //   3. We did not find the exact element, and there is no next-closest
    //      element than the one we are searching for, so we return -1.
    // Found the element we are looking for.
    // Our needle is greater than aHaystack[mid].
    // The element is in the upper half.
    // The exact needle element was not found in this haystack. Determine if
    // we are in termination case (3) or (2) and return the appropriate thing.
    // Our needle is less than aHaystack[mid].
    // The element is in the lower half.
    // we are in termination case (3) or (2) and return the appropriate thing.
    /**
 * This is an implementation of binary search which will always try and return
 * the index of the closest element if there is no exact hit. This is because
 * mappings between original and generated line/col pairs are single points,
 * and there is an implicit region between each of them, so a miss just means
 * that you aren't on the very start of a region.
 *
 * @param aNeedle The element you are looking for.
 * @param aHaystack The array that is being searched.
 * @param aCompare A function which takes the needle and an element in the
 *     array and returns -1, 0, or 1 depending on whether the needle is less
 *     than, equal to, or greater than the element, respectively.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
 */
    // We have found either the exact element, or the next-closest element than
    // the one we are searching for. However, there may be more than one such
    // element. Make sure we always return the smallest of these.
    /* -*- Mode: js; js-indent-level: 2; -*- */
    /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
    // It turns out that some (most?) JavaScript engines don't self-host
    // `Array.prototype.sort`. This makes sense because C++ will likely remain
    // faster than JS when doing raw CPU-intensive sorting. However, when using a
    // custom comparator function, calling back and forth between the VM's C++ and
    // JIT'd JS is rather slow *and* loses JIT type information, resulting in
    // worse generated code for the comparator function than would be optimal. In
    // fact, when sorting with a comparator, these costs outweigh the benefits of
    // sorting in C++. By using our own JS-implemented Quick Sort (below), we get
    // a ~3500ms mean speed-up in `bench/bench.html`.
    /**
 * Swap the elements indexed by `x` and `y` in the array `ary`.
 *
 * @param {Array} ary
 *        The array.
 * @param {Number} x
 *        The index of the first item.
 * @param {Number} y
 *        The index of the second item.
 */
    /**
 * Returns a random integer within the range `low .. high` inclusive.
 *
 * @param {Number} low
 *        The lower bound on the range.
 * @param {Number} high
 *        The upper bound on the range.
 */
    /**
 * The Quick Sort algorithm.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 * @param {Number} p
 *        Start index of the array
 * @param {Number} r
 *        End index of the array
 */
    // If our lower bound is less than our upper bound, we (1) partition the
    // array into two pieces and (2) recurse on each half. If it is not, this is
    // the empty array and our base case.
    // (1) Partitioning.
    //
    // The partitioning chooses a pivot between `p` and `r` and moves all
    // elements that are less than or equal to the pivot to the before it, and
    // all the elements that are greater than it after it. The effect is that
    // once partition is done, the pivot is in the exact place it will be when
    // the array is put in sorted order, and it will not need to be moved
    // again. This runs in O(n) time.
    // Always choose a random pivot so that an input array which is reverse
    // sorted does not cause O(n^2) running time.
    // Immediately after `j` is incremented in this loop, the following hold
    // true:
    //
    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
    //
    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
    // (2) Recurse on each half.
    /**
 * Sort the given array in-place with the given comparator function.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 */
    /* -*- Mode: js; js-indent-level: 2; -*- */
    /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
    /**
 * The version of the source mapping spec that we are consuming.
 */
    // `__generatedMappings` and `__originalMappings` are arrays that hold the
    // parsed mapping coordinates from the source map's "mappings" attribute. They
    // are lazily instantiated, accessed via the `_generatedMappings` and
    // `_originalMappings` getters respectively, and we only parse the mappings
    // and create these arrays once queried for a source location. We jump through
    // these hoops because there can be many thousands of mappings, and parsing
    // them is expensive, so we only want to do it if we must.
    //
    // Each object in the arrays is of the form:
    //
    //     {
    //       generatedLine: The line number in the generated code,
    //       generatedColumn: The column number in the generated code,
    //       source: The path to the original source file that generated this
    //               chunk of code,
    //       originalLine: The line number in the original source that
    //                     corresponds to this chunk of generated code,
    //       originalColumn: The column number in the original source that
    //                       corresponds to this chunk of generated code,
    //       name: The name of the original symbol which generated this chunk of
    //             code.
    //     }
    //
    // All properties except for `generatedLine` and `generatedColumn` can be
    // `null`.
    //
    // `_generatedMappings` is ordered by the generated positions.
    //
    // `_originalMappings` is ordered by the original positions.
    /**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
    /**
 * Iterate over each mapping between an original source/line/column and a
 * generated line/column in this source map.
 *
 * @param Function aCallback
 *        The function that is called with each mapping.
 * @param Object aContext
 *        Optional. If specified, this object will be the value of `this` every
 *        time that `aCallback` is called.
 * @param aOrder
 *        Either `SourceMapConsumer.GENERATED_ORDER` or
 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
 *        iterate over the mappings sorted by the generated file's line/column
 *        order or the original's source/line/column order, respectively. Defaults to
 *        `SourceMapConsumer.GENERATED_ORDER`.
 */
    /**
 * Returns all generated line and column information for the original source,
 * line, and column provided. If no column is provided, returns all mappings
 * corresponding to a either the line we are searching for or the next
 * closest line that has any mappings. Otherwise, returns all mappings
 * corresponding to the given line and either the column we are searching for
 * or the next closest column that has any offsets.
 *
 * The only argument is an object with the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number is 1-based.
 *   - column: Optional. the column number in the original source.
 *    The column number is 0-based.
 *
 * and an array of objects is returned, each with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *    line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *    The column number is 0-based.
 */
    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
    // returns the index of the closest mapping less than the needle. By
    // setting needle.originalColumn to 0, we thus find the last mapping for
    // the given line, provided such a mapping exists.
    // Iterate until either we run out of mappings, or we run into
    // a mapping for a different line than the one we found. Since
    // mappings are sorted, this is guaranteed to find all mappings for
    // the line we found.
    // Iterate until either we run out of mappings, or we run into
    // a mapping for a different line than the one we were searching for.
    // Since mappings are sorted, this is guaranteed to find all mappings for
    // the line we are searching for.
    /**
 * A BasicSourceMapConsumer instance represents a parsed source map which we can
 * query for information about the original file positions by giving it a file
 * position in the generated source.
 *
 * The first parameter is the raw source map (either as a JSON string, or
 * already parsed to an object). According to the spec, source maps have the
 * following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - sources: An array of URLs to the original source files.
 *   - names: An array of identifiers which can be referrenced by individual mappings.
 *   - sourceRoot: Optional. The URL root from which all sources are relative.
 *   - sourcesContent: Optional. An array of contents of the original source files.
 *   - mappings: A string of base64 VLQs which contain the actual mappings.
 *   - file: Optional. The generated file this source map is associated with.
 *
 * Here is an example source map, taken from the source map spec[0]:
 *
 *     {
 *       version : 3,
 *       file: "out.js",
 *       sourceRoot : "",
 *       sources: ["foo.js", "bar.js"],
 *       names: ["src", "maps", "are", "fun"],
 *       mappings: "AA,AB;;ABCDE;"
 *     }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
 */
    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
    // requires the array) to play nice here.
    // Once again, Sass deviates from the spec and supplies the version as a
    // string rather than a number, so we use loose equality checking here.
    // Some source maps produce relative source paths like "./foo.js" instead of
    // "foo.js".  Normalize these first so that future comparisons will succeed.
    // See bugzil.la/1090768.
    // Always ensure that absolute sources are internally stored relative to
    // the source root, if the source root is absolute. Not doing this would
    // be particularly problematic when the source root is a prefix of the
    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
    // Pass `true` below to allow duplicate names and sources. While source maps
    // are intended to be compressed and deduplicated, the TypeScript compiler
    // sometimes generates source maps with duplicates in them. See Github issue
    // #72 and bugzil.la/889492.
    /**
 * Utility function to find the index of a source.  Returns -1 if not
 * found.
 */
    // Maybe aSource is an absolute URL as returned by |sources|.  In
    // this case we can't simply undo the transform.
    /**
 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
 *
 * @param SourceMapGenerator aSourceMap
 *        The source map that will be consumed.
 * @param String aSourceMapURL
 *        The URL at which the source map can be found (optional)
 * @returns BasicSourceMapConsumer
 */
    // Because we are modifying the entries (by converting string sources and
    // names to indices into the sources and names ArraySets), we have to make
    // a copy of the entry or else bad things happen. Shared mutable state
    // strikes again! See github issue #191.
    /**
 * The version of the source mapping spec that we are consuming.
 */
    /**
 * The list of original sources.
 */
    /**
 * Provide the JIT with a nice shape / hidden class.
 */
    /**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
    // Generated column.
    // Original source.
    // Original line.
    // Lines are stored 0-based
    // Original column.
    // Original name.
    /**
 * Find the mapping that best matches the hypothetical "needle" mapping that
 * we are searching for in the given "haystack" of mappings.
 */
    // To return the position we are searching for, we must first find the
    // mapping for the given position and then return the opposite position it
    // points to. Because the mappings are sorted, we can use binary search to
    // find the best mapping.
    /**
 * Compute the last column for each generated mapping. The last column is
 * inclusive.
 */
    // Mappings do not contain a field for the last generated columnt. We
    // can come up with an optimistic estimate, however, by assuming that
    // mappings are contiguous (i.e. given two consecutive mappings, the
    // first mapping ends where the second one starts).
    // The last mapping for each line spans the entire line.
    /**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */
    /**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
    /**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
    // XXX: file:// URIs and absolute paths lead to unexpected behavior for
    // many users. We can help them out when they expect file:// URIs to
    // behave like it would if they were running a local HTTP server. See
    // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
    //, "");
    // This function is used recursively from
    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
    // don't want to throw if we can't find the source - we just want to
    // return null, so we provide a flag to exit gracefully.
    /**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */
    /**
 * An IndexedSourceMapConsumer instance represents a parsed source map which
 * we can query for information. It differs from BasicSourceMapConsumer in
 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
 * input.
 *
 * The first parameter is a raw source map (either as a JSON string, or already
 * parsed to an object). According to the spec for indexed source maps, they
 * have the following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - file: Optional. The generated file this source map is associated with.
 *   - sections: A list of section definitions.
 *
 * Each value under the "sections" field has two fields:
 *   - offset: The offset into the original specified at which this section
 *       begins to apply, defined as an object with a "line" and "column"
 *       field.
 *   - map: A source map definition. This source map could also be indexed,
 *       but doesn't have to be.
 *
 * Instead of the "map" field, it's also possible to have a "url" field
 * specifying a URL to retrieve a source map from, but that's currently
 * unsupported.
 *
 * Here's an example source map, taken from the source map spec[0], but
 * modified to omit a section which uses the "url" field.
 *
 *  {
 *    version : 3,
 *    file: "app.js",
 *    sections: [{
 *      offset: {line:100, column:10},
 *      map: {
 *        version : 3,
 *        file: "section.js",
 *        sources: ["foo.js", "bar.js"],
 *        names: ["src", "maps", "are", "fun"],
 *        mappings: "AAAA,E;;ABCDE;"
 *      }
 *    }],
 *  }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
 */
    // The url field will require support for asynchronicity.
    // See https://github.com/mozilla/source-map/issues/16
    // The offset fields are 0-based, but we use 1-based indices when
    // encoding/decoding from VLQ.
    /**
 * The version of the source mapping spec that we are consuming.
 */
    /**
 * The list of original sources.
 */
    /**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */
    // Find the section containing the generated position we're trying to map
    // to an original position.
    /**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
    /**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
    /**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based. 
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */
    // Only consider this section if the requested source is in the list of
    // sources of the consumer.
    /**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
    // The mappings coming from the consumer for the section have
    // generated positions relative to the start of the section, so we
    // need to offset them to be relative to the start of the concatenated
    // generated file.
    /* -*- Mode: js; js-indent-level: 2; -*- */
    /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
    // Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
    // operating systems these days (capturing the result).
    // Newline character code for charCodeAt() comparisons
    // Private symbol for identifying `SourceNode`s when multiple versions of
    // the source-map library are loaded. This MUST NOT CHANGE across
    // versions!
    /**
 * SourceNodes provide a way to abstract over interpolating/concatenating
 * snippets of generated JavaScript source code while maintaining the line and
 * column information associated with the original source code.
 *
 * @param aLine The original line number.
 * @param aColumn The original column number.
 * @param aSource The original source's filename.
 * @param aChunks Optional. An array of strings which are snippets of
 *        generated JS, or other SourceNodes.
 * @param aName The original identifier.
 */
    /**
 * Creates a SourceNode from generated code and a SourceMapConsumer.
 *
 * @param aGeneratedCode The generated code
 * @param aSourceMapConsumer The SourceMap for the generated code
 * @param aRelativePath Optional. The path that relative sources in the
 *        SourceMapConsumer should be relative to.
 */
    // The SourceNode we want to fill with the generated code
    // and the SourceMap
    // All even indices of this array are one line of the generated code,
    // while all odd indices are the newlines between two adjacent lines
    // (since `REGEX_NEWLINE` captures its match).
    // Processed fragments are accessed by calling `shiftNextLine`.
    // The last line of a file might not have a newline.
    // We need to remember the position of "remainingLines"
    // The generate SourceNodes we need a code range.
    // To extract it current and last mapping is used.
    // Here we store the last mapping.
    // We add the code from "lastMapping" to "mapping":
    // First check if there is a new line in between.
    // Associate first line with "lastMapping"
    // The remaining code is added without mapping
    // There is no new line in between.
    // Associate the code between "lastGeneratedColumn" and
    // "mapping.generatedColumn" with "lastMapping"
    // No more remaining code, continue
    // We add the generated code until the first mapping
    // to the SourceNode without any mapping.
    // Each line is added as separate string.
    // We have processed all mappings.
    // Associate the remaining code in the current line with "lastMapping"
    // and add the remaining lines without any mapping
    // Copy sourcesContent into SourceNode
    /**
 * Add a chunk of generated JS to this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
    /**
 * Add a chunk of generated JS to the beginning of this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
    /**
 * Walk over the tree of JS snippets in this node and its children. The
 * walking function is called once for each snippet of JS and is passed that
 * snippet and the its original associated source's line/column location.
 *
 * @param aFn The traversal function.
 */
    /**
 * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
 * each of `this.children`.
 *
 * @param aSep The separator.
 */
    /**
 * Call String.prototype.replace on the very right-most source snippet. Useful
 * for trimming whitespace from the end of a source node, etc.
 *
 * @param aPattern The pattern to replace.
 * @param aReplacement The thing to replace the pattern with.
 */
    /**
 * Set the source content for a source file. This will be added to the SourceMapGenerator
 * in the sourcesContent field.
 *
 * @param aSourceFile The filename of the source file
 * @param aSourceContent The content of the source file
 */
    /**
 * Walk over the tree of SourceNodes. The walking function is called for each
 * source file content and is passed the filename and source content.
 *
 * @param aFn The traversal function.
 */
    /**
 * Return the string representation of this source node. Walks over the tree
 * and concatenates all the various snippets together to one string.
 */
    /**
 * Returns the string representation of this source node along with a source
 * map.
 */
    // Mappings end at eol
    /*
 * Copyright 2009-2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE.txt or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
    // sourceMappingURLs from comments, strings, etc.
    // Locate the last sourceMappingURL to avoid pickin
    //.test(opts.from) || isAbsolute(opts.from)) {
    //.test(file)) {
    /* c8 ignore next 2 */
    /*# sourceMappingURL=' + content + ' */
    /* `<` */
    //.test(file)) return file;
    // If the token is a word, e.g. `!important`, `red` or any other valid property's value.
    // Then we need to return the colon after that word token. [3] is the "end" colon of that word.
    // And because we need it after that one we do +1 to get the next one.
    // Helpers
    // Hook for Safe Parser
    // Errors
    /* eslint-disable no-console */
    /* c8 ignore next 2 */
    // eslint-disable-next-line no-console
    /* c8 ignore next 3 */
    // eslint-disable-next-line no-console
    // eslint-disable-next-line no-console
    // eslint-disable-next-line no-console
    //evilmartians.com/chronicles/postcss-8-plugin-migration');
    /* c8 ignore next 7 */
    // eslint-disable-next-line no-console
    //www.w3ctech.com/topic/2226');
    //# sourceMappingURL=node_modules_b5d1de._.js.map

File: ./frontend/.next/build/chunks/[root of the server]__fd836e._.js
  JavaScript Functions:
    - parse
    - parseChrome
    - parseWinjs
    - parseGecko
    - parseJSC
    - parseNode
    - isError
    - getProperError
    - getObjectClassLabel
    - isPlainObject
    - structuredError
    - createIpc
    - pushPacket
    - send
    - sendReady
    - improveConsole
    - to
    - invariant
  Comments:
    // merged from next.js
    // https://github.com/vercel/next.js/blob/e657741b9908cf0044aaef959c0c4defb19ed6d8/packages/next/src/lib/is-error.ts
    // https://github.com/vercel/next.js/blob/e657741b9908cf0044aaef959c0c4defb19ed6d8/packages/next/src/shared/lib/is-plain-object.ts
    // Provide a better error message for cases where `throw undefined`
    // is called in development
    /**
   * this used to be previously:
   *
   * `return prototype === null || prototype === Object.prototype`
   *
   * but Edge Runtime expose Object from vm, being that kind of type-checking wrongly fail.
   *
   * It was changed to the current implementation since it's resilient to serialization.
   */
    // When the socket is closed, this process is no longer needed.
    // This might happen e. g. when parent process is killed or
    // node.js pool is garbage collected.
    // ignore and exit anyway
    // @ts-ignore
    // @ts-ignore
    // @ts-ignore
    /**
 * Utility function to ensure all variants of an enum are handled.
 */
    // Initialize module and send ready message
    // Queue handling
    // Communication handling
    // @ts-ignore
    //# sourceMappingURL=%5Broot%20of%20the%20server%5D__fd836e._.js.map

File: ./frontend/.next/build/chunks/[turbopack]_runtime.js
  JavaScript Functions:
    - defineProp
    - esm
    - esmExport
    - ensureDynamicExports
    - dynamicExport
    - exportValue
    - exportNamespace
    - createGetter
    - interopEsm
    - createNS
    - esmImport
    - require1
    - commonJsRequire
    - moduleContext
    - moduleContext
    - keys
    - resolve
    - getChunkPath
    - isPromise
    - isAsyncModuleExt
    - createPromise
    - resolveQueue
    - wrapDeps
    - asyncModule
    - handleAsyncDependencies
    - getResult
    - fnQueue
    - asyncResult
    - to
    - relativeURL
    - toJSON
    - to
    - invariant
    - to
    - requireStub
    - externalImport
    - externalRequire
    - resolve
    - resolveAbsolutePath
    - readWebAssemblyAsResponse
    - compileWebAssemblyFromPath
    - instantiateWebAssemblyFromPath
    - stringifySourceInfo
    - createResolvePathFromModule
    - resolvePathFromModule
    - loadChunk
    - loadChunkPath
    - loadChunkAsync
    - localRequire
    - loadWebAssembly
    - loadWebAssemblyModule
    - getWorkerBlobURL
    - instantiateModule
    - getOrInstantiateModuleFromParent
    - instantiateRuntimeModule
    - getOrInstantiateRuntimeModule
  Comments:
    /**
 * This file contains runtime types and functions that are shared between all
 * TurboPack ECMAScript runtimes.
 *
 * It will be prepended to the runtime code of each runtime.
 */
    /* eslint-disable @typescript-eslint/no-unused-vars */
    /// <reference path="./runtime-types.d.ts" />
    /**
 * Adds the getters to the exports object.
 */
    /**
 * Makes the module an ESM with exports
 */
    /**
 * Dynamically exports properties from an object
 */
    /**
 * @returns prototype of the object
 */
    /** Prototypes that are not expanded for exports */
    /**
 * @param raw
 * @param ns
 * @param allowExportDefault
 *   * `false`: will have the raw module as default export
 *   * `true`: will have the default property as default export
 */
    // this is not really correct
    // we should set the `default` getter if the imported module is a `.cjs file`
    // any ES module has to have `module.namespaceObject` defined.
    // only ESM can be an async module, so we don't need to worry about exports being a promise here.
    // Add a simple runtime require so that environments without one can still pass
    // `typeof require` CommonJS checks so that exports are correctly registered.
    // @ts-ignore
    /**
 * `require.context` and require/import expression runtime.
 */
    /**
 * Returns the path of a chunk defined by its data.
 */
    // everything below is adapted from webpack
    // https://github.com/webpack/webpack/blob/6be4065ade1e252c1d8dcba4af0f43e32af1bdc1/lib/runtime/AsyncModuleRuntimeModule.js#L13
    // Calling `esmExport` leads to this.
    /**
 * A pseudo "fake" URL object to resolve to its relative path.
 *
 * When UrlRewriteBehavior is set to relative, calls to the `new URL()` will construct url without base using this
 * runtime function to generate context-agnostic urls between different rendering context, i.e ssr / client to avoid
 * hydration mismatch.
 *
 * This is based on webpack's existing implementation:
 * https://github.com/webpack/webpack/blob/87660921808566ef3b8796f8df61bd79fc026108/lib/runtime/RelativeUrlRuntimeModule.js
 */
    /**
 * Utility function to ensure all variants of an enum are handled.
 */
    /**
 * A stub function to make `require` available but non-functional in ESM.
 */
    /* eslint-disable @typescript-eslint/no-unused-vars */
    /// <reference path="../shared/runtime-utils.ts" />
    /// A 'base' utilities to support runtime can have externals.
    /// Currently this is for node.js / edge runtime both.
    /// If a fn requires node.js specific behavior, it should be placed in `node-external-utils` instead.
    // TODO(alexkirsz) This can happen when a client-side module tries to load
    // an external module we don't provide a shim for (e.g. querystring, url).
    // For now, we fail semi-silently, but in the future this should be a
    // compilation error.
    // TODO(alexkirsz) This can happen when a client-side module tries to load
    // an external module we don't provide a shim for (e.g. querystring, url).
    // For now, we fail semi-silently, but in the future this should be a
    // compilation error.
    /* eslint-disable @typescript-eslint/no-unused-vars */
    // Compute the relative path to the `distDir`.
    // Compute the absolute path to the root, by stripping distDir from the absolute path to this file.
    /**
 * Returns an absolute path to the given module path.
 * Module path should be relative, either path to a file or a directory.
 *
 * This fn allows to calculate an absolute path for some global static values, such as
 * `__dirname` or `import.meta.url` that Turbopack will not embeds in compile time.
 * See ImportMetaBinding::code_generation for the usage.
 */
    /* eslint-disable @typescript-eslint/no-unused-vars */
    /// <reference path="../shared/runtime-utils.ts" />
    // @ts-ignore unfortunately there's a slight type mismatch with the stream.
    /* eslint-disable @typescript-eslint/no-unused-vars */
    /// <reference path="../shared/runtime-utils.ts" />
    /// <reference path="../shared-node/base-externals-utils.ts" />
    /// <reference path="../shared-node/node-externals-utils.ts" />
    /// <reference path="../shared-node/node-wasm-utils.ts" />
    /*#__PURE__*/
    /**
   * The module was instantiated because it was included in an evaluated chunk's
   * runtime.
   */
    /**
   * The module was instantiated because a parent module imported it.
   */
    /**
 * Returns an absolute path to the given module's id.
 */
    // We only support loading JS chunks in Node.js.
    // This branch can be hit when trying to load a CSS chunk.
    // We only support loading JS chunks in Node.js.
    // This branch can be hit when trying to load a CSS chunk.
    // TODO: Use vm.runInThisContext once our minimal supported Node.js version includes https://github.com/nodejs/node/pull/52153
    // eslint-disable-next-line no-eval -- Can't use vm.runInThisContext due to https://github.com/nodejs/node/issues/52102
    //# sourceURL=" + url.pathToFileURL(resolved))(module1, module1.exports, localRequire, path.dirname(resolved), resolved);
    // This can happen if modules incorrectly handle HMR disposes/updates,
    // e.g. when they keep a `setTimeout` around which still executes old code
    // and contains e.g. a `require("something")` call.
    // No need to add this module as a child of the parent module here, this
    // has already been taken care of in `getOrInstantiateModuleFromParent`.
    // NOTE(alexkirsz) This can fail when the module encounters a runtime error.
    // in case of a circular dependency: cjs1 -> esm2 -> cjs1
    /**
 * Retrieves a module from the cache, or instantiate it if it is not cached.
 */
    // @ts-ignore
    /**
 * Instantiates a runtime module.
 */
    /**
 * Retrieves a module from the cache, or instantiate it as a runtime module if it is not cached.
 */
    // @ts-ignore TypeScript doesn't separate this module space from the browser runtime

File: ./frontend/src/app/layout.js
  JavaScript Functions:
    - RootLayout

File: ./frontend/src/app/page.js
  JavaScript Functions:
    - Home

File: ./frontend/src/app/alltasks/page.js
  JavaScript Functions:
    - AllTasks
    - handleDragEnd
    - toggleExpand
    - renderTasks
  Comments:
    //127.0.0.1:5000/api/tasks")
    // ✅ Drag & Drop Handler
    // ✅ Expand/Collapse Nested Tasks
    // ✅ Render Tasks Recursively (Ensuring Nested Task Visibility)
    // ✅ Indent Child Tasks
    /* ✅ Expand/Collapse Toggle */
    /* ✅ Task Type Icon */
    /* ✅ Task Title */
    /* Open Link (Only Visible on Hover) */
    /* ✅ Task Type Badge */
    /* ✅ Status Dropdown */
    /* ✅ Delete Button */
    /* ✅ Render Nested Tasks (Only If Expanded) */
    /* ✅ Fixed Navigation Menu & Theme Toggle */
    //127.0.0.1:5000/dashboard" className="text-gray-300 hover:text-white">Overview</a>
    //127.0.0.1:5000/tasks/" className="text-gray-300 hover:text-white">All Tasks (Old)</a>
    //localhost:3000/alltasks" className="text-white font-bold">All Tasks (React)</a>
    /* ✅ "New Task" Button */
    /* ✅ Task List Background Fix */
    /* ✅ Header Row (Fixed Column Alignment) */

File: ./frontend/src/app/alltasks/[taskId]/page.js
  JavaScript Functions:
    - TaskDetails
    - fetchData
    - handleChange
  Comments:
    // ✅ Corrected import
    // ✅ Get taskId from URL
    // ✅ Extract taskId correctly
    //127.0.0.1:5000/api/tasks/${taskId}`);
    //127.0.0.1:5000/api/projects");
    //127.0.0.1:5000/api/contributors");
    //127.0.0.1:5000/api/tasks/${taskId}`, {
    /* ✅ Header */
    /* ✅ Task Form */
    /* ✅ Left Column */
    /* ✅ Right Column */
    /* ✅ Footer Buttons */

