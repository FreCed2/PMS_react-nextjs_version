import logging
import traceback
from builtins import any
from flask import Blueprint, render_template, request, flash, url_for, redirect, jsonify
from app.forms.forms import csrf
from app.extensions.db import db
from app.tasks.models import Task
from app.models import Project
from app.tasks.utils import TaskService
from app.models import Contributor



bp = Blueprint("tasks", __name__, template_folder="../templates/tasks")
logger = logging.getLogger(__name__)


@bp.route("/", methods=["GET"])
def list_tasks():
    """List tasks globally with filtering, optional hierarchical ordering, and pagination."""
    logger.info("Entering list_tasks route...")

    # Extract query parameters
    project_id = request.args.get("project_id", type=int)
    contributor_id = request.args.get("contributor_id", type=int)
    show_archived = request.args.get("show_archived", "false").lower() == "true"
    task_type = request.args.get("task_type", "all")
    completion_status = request.args.get("completion_status")
    hierarchical = request.args.get("hierarchical", "false").lower() == "true"
    page = request.args.get("page", 1, type=int)
    per_page = request.args.get("per_page", 500, type=int)
    
    filters = {
        "is_archived": False,
        "contributor_id": contributor_id,
        "task_type": task_type if task_type != "all" else None,
        "completion_status": completion_status,
        "project_id": project_id,
    }

    filters = {k: v for k, v in filters.items() if v is not None}
    logger.debug(f"Filters used: {filters}")

    try:
        if project_id:
            # Fetch all tasks for the project
            all_tasks = TaskService.fetch_all_tasks_as_dicts(filters)
            logger.debug(f"Tasks fetched: {all_tasks}")
            if not all_tasks:
                logger.error("ERROR: No tasks returned. The function fetch_all_tasks_as_dicts might be filtering everything out.")

            if hierarchical:
                # Build hierarchy for the tasks
                task_map = {task["id"]: task for task in all_tasks}
                top_level_tasks = [task for task in all_tasks if task["parent_id"] is None]

                for task in all_tasks:
                    if task.parent_id:
                        parent = task_map.get(task.parent_id)
                        if parent:
                            parent.children.append(task)

                # Serialize tasks for the hierarchical view
                tasks = [task.to_dict_with_children() for task in top_level_tasks]

                # Pagination metadata for hierarchical view (mocked)
                pagination = {
                    "page": 1,
                    "per_page": len(top_level_tasks),
                    "total": len(top_level_tasks),
                    "pages": 1,
                    "page_numbers": [1],
                }
            else:
                # Flatten tasks for non-hierarchical view
                tasks_flat = [task for task in all_tasks]
                start = (page - 1) * per_page
                end = start + per_page
                tasks = [task.to_dict() for task in tasks_flat[start:end]]

                # Pagination metadata for non-hierarchical view
                pagination = {
                    "page": page,
                    "per_page": per_page,
                    "total": len(tasks_flat),
                    "pages": (len(tasks_flat) + per_page - 1) // per_page,
                    "page_numbers": TaskService.generate_page_numbers(
                        current_page=page,
                        total_pages=(len(tasks_flat) + per_page - 1) // per_page
                    ),
                }
        else:
            # Default case when project_id is not provided
            tasks_query = TaskService.filter_tasks(filters=filters)
            pagination_obj = tasks_query.paginate(page=page, per_page=per_page, error_out=False)
            tasks = [task.to_dict() for task in pagination_obj.items]
            pagination = {
                "page": pagination_obj.page,
                "per_page": pagination_obj.per_page,
                "total": pagination_obj.total,
                "pages": pagination_obj.pages,
                "page_numbers": TaskService.generate_page_numbers(
                    current_page=pagination_obj.page,
                    total_pages=pagination_obj.pages
                ),
            }

        # Fetch additional data for the template
        task_types = ["all"] + [t[0] for t in db.session.query(Task.task_type).distinct()]
        projects = Project.query.options(db.lazyload(Project.contributors)).all()

        # Add logic for selected project and contributor for clarity in UI
        selected_project = Project.query.options(db.joinedload(Project.contributors)).get(project_id) if project_id else None
        selected_contributor = Contributor.query.get(contributor_id) if contributor_id else None
        
        logger.debug(f"Tasks passed to template: {tasks}")
        logger.debug(f"Task types: {task_types}")
        logger.debug(f"Projects: {projects}")
        logger.debug(f"Tasks response: {tasks}")  # Log tasks before rendering the template
        print("DEBUG: Tasks returned by fetch_all_tasks_as_dicts:", tasks)  # Debugging line
        if not tasks:
            logger.error("ERROR: No tasks to display after processing (pagination/hierarchy applied).")

        return render_template(
            "tasks/list.html",
            tasks=tasks,
            pagination=pagination,
            filters=filters,
            task_types=task_types,
            projects=projects,
            selected_project=selected_project,
            selected_contributor=selected_contributor,
        )
    except ValueError as ve:
        logger.error(f"ValueError in list_tasks: {str(ve)}")
        flash("A value error occurred while fetching tasks.", "danger")
    except db.exc.SQLAlchemyError as se:
        logger.error(f"SQLAlchemyError in list_tasks: {str(se)}")
        flash("A database error occurred while fetching tasks.", "danger")
    except Exception as e:
        logger.error(f"Unexpected error in list_tasks: {str(e)}")
        traceback.print_exc()
        flash("An unexpected error occurred while fetching tasks.", "danger")

        return render_template(
            "tasks/list.html",
            tasks=[],
            pagination={"page": 1, "per_page": per_page, "total": 0, "pages": 0},
            filters=filters,
            task_types=["all"],
            projects=[],
            selected_project=None,
            selected_contributor=None,
        )
    
    
@bp.route("/details/<int:task_id>", methods=["GET"])
def task_details(task_id):
    """Fetch and display details for a specific task."""
    logger.info("Entering task_details route...")
    try:
        # Fetch task and subtasks
        task_data = TaskService.fetch_task_with_logging(task_id)
        subtasks = Task.query.filter_by(parent_id=task_data.id).order_by(Task.sort_order).all()
        
        return render_template("tasks/details.html", task=task_data, subtasks=subtasks)
    except Exception as e:
        logger.error(f"Error fetching task details: {e}")
        flash("An error occurred while fetching task details.", "danger")
        return redirect(url_for("tasks.list_tasks"))
    

@bp.route("/task_row/<int:task_id>", methods=["GET"])
def get_task_row(task_id):
    """
    Return the HTML for a single task row or modal content.
    This endpoint is used to dynamically update the task table and modal.
    """
    logger.info(f"Fetching HTML for task ID {task_id}")
    try:
        # Fetch the task
        task = Task.query.get_or_404(task_id)

        # Check if the request specifies fetching the modal content
        row_only = request.args.get("row_only", "true").lower() == "true"

        if row_only:
            # Render the partial for the table row
            return render_template("tasks/partials/task_row.html", task=task)
        else:
            # Render the partial for the modal content
            return render_template("tasks/partials/task_modal_content.html", task=task)
    except Exception as e:
        logger.error(f"Error fetching task row for ID {task_id}: {e}", exc_info=True)
        return jsonify({"error": "Failed to fetch task row or modal content."}), 500
    
    
@bp.route('/api/projects/<int:project_id>/contributors', methods=['GET'])
def get_project_contributors(project_id):
    """Fetch contributors for a specific project."""
    project = Project.query.options(db.joinedload(Project.contributors)).get_or_404(project_id)
    contributors = [{"id": c.id, "name": c.name} for c in project.contributors]
    return jsonify(contributors)
    
@csrf.exempt
@bp.route('/<int:task_id>/assign_contributor', methods=['POST'])
def assign_contributor(task_id):
    """Assign a contributor to a task."""
    logger.info(f"Assigning contributor to task ID {task_id}")
    try:
        data = request.get_json()
        logger.info(f"Received data: {data}")  # Debugging

        contributor_id = data.get('contributor_id')
        
        # Convert contributor_id to an integer
        try:
            contributor_id = int(contributor_id)
        except (ValueError, TypeError):
            return jsonify({'error': 'Valid Contributor ID is required'}), 400
        
        logger.info(f"Contributor ID received: {contributor_id}")  # Debugging
        
        
        # Fetch the task
        task = Task.query.get(task_id)
        if not task:
            return jsonify({'error': f'Task with ID {task_id} not found.'}), 404

        # Fetch the contributor
        contributor = Contributor.query.get(contributor_id)
        if not contributor:
            return jsonify({'error': f'Contributor with ID {contributor_id} not found.'}), 404
        
        project = Project.query.options(db.joinedload(Project.contributors)).get(task.project_id)
        if not project:
            return jsonify({'error': f'Project for Task {task_id} not found.'}), 404

        # Assign contributor
        task.contributor_id = contributor_id
        try:
            db.session.commit()  # Commit changes
        except Exception as e:
            db.session.rollback()  # Rollback if commit fails
            logger.error(f"Error committing changes for task {task_id}: {e}")
            return jsonify({'error': 'Failed to assign contributor. Please try again later.'}), 500
        
        return jsonify({
            'success': True,
            'message': f'Contributor {contributor.name} assigned to Task {task.name}.',
            'contributor_name': contributor.name  # Include contributor name
        }), 200

    except Exception as e:
        logger.error(f"Error assigning contributor: {e}")
        db.session.rollback()
        return jsonify({'error': 'An error occurred while assigning the contributor.'}), 500

@bp.route("/archive/<int:task_id>", methods=["POST"])
def archive_task(task_id):
    """Archive a task and its subtasks."""
    logger.info(f"Attempting to archive task with ID {task_id}")
    try:
        task = TaskService.fetch_task_with_logging(task_id)
        if task.is_archived:
            flash(f"Task '{task.name}' is already archived.", "info")
            return redirect(url_for("tasks.list_tasks"))

        TaskService.archive_task(task)
        db.session.commit()
        flash(f"Task '{task.name}' and its subtasks archived successfully!", "success")
    except Exception as e:
        logger.error(f"Error while archiving task '{task_id}': {e}")
        db.session.rollback()
        flash(f"An error occurred: {e}", "danger")
    return redirect(url_for("tasks.list_tasks"))


@bp.route("/unarchive/<int:task_id>", methods=["POST"])
def unarchive_task(task_id):
    """Unarchive a task and its subtasks."""
    logger.info(f"Unarchiving task with ID {task_id}")
    try:
        task = TaskService.fetch_task_with_logging(task_id)
        if not task.is_archived:
            flash(f"Task '{task.name}' is not archived.", "info")
            return redirect(url_for("tasks.list_tasks"))

        task.is_archived = False
        db.session.commit()
        flash(f"Task '{task.name}' and its subtasks unarchived successfully!", "success")
    except Exception as e:
        logger.error(f"Error unarchiving task '{task_id}': {e}")
        db.session.rollback()
        flash(f"An error occurred: {e}", "danger")
    return redirect(url_for("tasks.list_tasks"))


@bp.route("/disconnect/<int:task_id>", methods=["POST"])
def disconnect_subtask(task_id):
    """Remove parent reference from a subtask."""
    logger.info(f"Disconnecting parent for task ID {task_id}")
    try:
        task = TaskService.fetch_task_with_logging(task_id)
        task.parent_id = None
        db.session.commit()
        flash(f"Task '{task.name}' has been disconnected from its parent task.", "success")
    except Exception as e:
        logger.error(f"Error disconnecting subtask '{task_id}': {e}")
        db.session.rollback()
        flash(f"An error occurred: {e}", "danger")
    return redirect(url_for("tasks.list_tasks"))


@bp.route("/available_tasks", methods=["GET"])
def available_tasks():
    """
    Fetch a list of available tasks, excluding the specified one,
    while enforcing valid parent-child hierarchy rules.
    """
    logger.info("Entering available_tasks route...")

    try:
        # Extract query parameters
        exclude_task_id = request.args.get("exclude_task_id", type=int)
        task_type = request.args.get("task_type", type=str)
        search_term = request.args.get("term", type=str, default="")
        project_id = request.args.get("project_id", type=int)
        limit = request.args.get("limit", 30, type=int)
        page = request.args.get("page", 1, type=int)

        # Log query parameters
        logger.debug(f"Query parameters: task_type={task_type}, exclude_task_id={exclude_task_id}, search_term={search_term}, project_id={project_id}, limit={limit}, page={page}")

        # Validate task_type
        if task_type not in ["Epic", "User Story", "Subtask"]:
            logger.error(f"Invalid task_type provided: {task_type}")
            return jsonify({"error": "Invalid task_type. Allowed values: 'Epic', 'User Story', 'Subtask'"}), 400

        # Validate exclude_task_id
        if exclude_task_id is not None and exclude_task_id <= 0:
            logger.error(f"Invalid exclude_task_id: {exclude_task_id}")
            return jsonify({"error": "Invalid exclude_task_id"}), 400

        # Base filters
        filters = {"is_archived": False}
        if project_id is not None:
            filters["project_id"] = project_id
        
        # Verify if exclude_task_id exists before proceeding
        if exclude_task_id:
            current_task = Task.query.get(exclude_task_id)
        if not current_task:
            logger.warning(f"Task with ID {exclude_task_id} does not exist. Continuing without it.")
            return jsonify({"error": f"Task with ID {exclude_task_id} does not exist."}), 400

        # Exclude specific task
        if exclude_task_id:
            filters["id__ne"] = exclude_task_id

        # Add task_type validation
        if task_type:
            filters["task_type"] = [task_type]  # Ensure it's a list for `.in_`

        # Debugging the filters
        logger.debug(f"Filters applied: {filters}")

        # Validate hierarchy for the task type
        try:
            valid_parent_types = TaskService.validate_hierarchy(task_type=task_type)
            if not valid_parent_types:
                logger.info(f"No valid parents found for task_type: {task_type}")
                return jsonify({"tasks": [], "has_more": False}), 200
            filters["task_type"] = valid_parent_types
        except ValueError as ve:
            logger.error(f"Hierarchy validation error for task_type {task_type}: {ve}")
            return jsonify({"error": str(ve)}), 400

        # Build the query with explicit field selection
        query = TaskService.filter_tasks(filters=filters, include_subtasks=False).with_entities(
            Task.id, Task.name, Task.task_type
        )

        # Apply search term if provided
        if search_term:
            query = query.filter(Task.name.ilike(f"%{search_term}%"))

        # Pagination logic
        offset = (page - 1) * limit
        tasks = query.limit(limit + 1).offset(offset).all()
        has_more = len(tasks) > limit
        tasks = tasks[:limit]

        # Serialize tasks
        task_list = [
            {
                "id": task.id,
                "name": task.name,
                "task_type": task.task_type,
                "is_parent": task.id == Task.query.get(exclude_task_id).parent_id if exclude_task_id else False,
            }
            for task in tasks
        ]

        # Ensure the current parent task is included in the response, if applicable
        if exclude_task_id:
            current_task = Task.query.get(exclude_task_id)
            if current_task and current_task.parent_id:
                parent_task = Task.query.get(current_task.parent_id)
                if parent_task and not any(task["id"] == parent_task.id for task in task_list):
                    task_list.append({
                        "id": parent_task.id,
                        "name": parent_task.name,
                        "task_type": parent_task.task_type,
                        "is_parent": True
                    })

        logger.debug(f"Tasks returned: {task_list}")
        return jsonify({"tasks": task_list, "has_more": has_more}), 200

    except Exception as e:
        logger.error(f"Error fetching available tasks: {str(e)}", exc_info=True)
        return jsonify({"error": "Failed to fetch tasks"}), 500


@bp.route("/assign_parent/<int:task_id>", methods=["POST"])
def assign_parent_task(task_id):
    """Assign a parent task to an existing task."""
    logger.info(f"Assigning parent task for task ID {task_id}")
    try:
        task = TaskService.fetch_task_with_logging(task_id)
        new_parent_id = request.form.get("parent_id", type=int)

        if new_parent_id == task_id:
            flash("A task cannot be assigned as its own parent.", "danger")
            return redirect(url_for("tasks.list_tasks"))

        new_parent = Task.query.get(new_parent_id)
        if not new_parent:
            flash("Parent task not found.", "danger")
            return redirect(url_for("tasks.list_tasks"))

        # Validate parent-child hierarchy
        TaskService.validate_hierarchy(task)

        # Assign the new parent
        task.parent_id = new_parent.id
        db.session.commit()
        flash(f"Task '{task.name}' is now a subtask of '{new_parent.name}'.", "success")

        # Return JSON for dynamic updates in the modal
        return jsonify({
            "success": True,
            "task_id": task.id,
            "parent_id": new_parent.id,
            "parent_name": new_parent.name,
        })
    except ValueError as ve:
        logger.error(f"Hierarchy validation failed: {ve}")
        return jsonify({"success": False, "error": str(ve)}), 400
    except Exception as e:
        logger.error(f"Error assigning parent task '{new_parent_id}': {e}")
        db.session.rollback()
        return jsonify({"success": False, "error": "An error occurred while assigning the parent task."}), 500


@bp.route("/subtasks/<int:task_id>", methods=['GET'])
def get_subtasks(task_id):
    """Fetch subtasks for a given task or check if subtasks exist."""
    
    logger.info("Entering get_subtasks route...")
    try:
        # Check if only a boolean flag is needed
        check_only = request.args.get('check_only', 'false').lower() == 'true'

        # Fetch subtasks
        subtasks_query = Task.query.filter_by(parent_id=task_id).order_by(Task.sort_order)
        if check_only:
            has_children = subtasks_query.count() > 0
            return jsonify({"has_children": has_children})

        # Return full list of subtasks
        subtasks = subtasks_query.all()
        return jsonify([
            {
                "id": subtask.id,
                "name": subtask.name,
                "task_type": subtask.task_type,
                "sort_order": subtask.sort_order,
                "completed": subtask.completed
            }
            for subtask in subtasks
        ])
    except Exception as e:
        logger.error(f"Error in get_subtasks: {str(e)}")
        return jsonify({"error": "An error occurred while fetching subtasks."}), 500


@bp.route("/assign_subtasks/<int:task_id>", methods=["POST"])
def assign_subtasks(task_id):
    """Assign multiple subtasks to a parent task."""
    
    logger.info("Entering assign_subtasks route...")
    traceback.print_stack() 
    
    parent_task = Task.query.get_or_404(task_id)
    subtask_ids = request.form.getlist("subtask_ids")
    for subtask_id in subtask_ids:
        subtask = Task.query.get(subtask_id)
        if subtask and subtask.project_id == parent_task.project_id:
            subtask.parent_id = parent_task.id
            db.session.add(subtask)
    try:
        db.session.commit()
        flash(f"Subtasks assigned to '{parent_task.name}'.", "success")
    except Exception as e:
        db.session.rollback()
        flash(f"Failed to assign subtasks: {e}", "danger")
    return redirect(url_for("tasks.task_details", task_id=task_id))

@bp.route("/reorder_subtasks", methods=["POST"])
def reorder_subtasks():
    """
    Reorder subtasks globally or reassign them to a different parent.

    Steps:
    - Parse and validate input from the frontend.
    - Update parent-child relationships and sort order in the database.
    - Commit changes and return a success response.
    - Handle errors gracefully and provide detailed logs for debugging.
    """
    logger.info("Entering reorder_subtasks route...")
    logger.info(f"Received payload for reordering tasks: {request.json}")

    try:
        # Step 1: Parse input
        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered
        ordered_tasks = request.json.get("ordered_tasks", [])

        logger.debug(f"Parsed parent_id: {parent_id}")
        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")

        # Step 2: Validate input
        if not isinstance(ordered_tasks, list) or not all(
            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task
            for task in ordered_tasks
        ):
            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")
            return jsonify({
                "error": "Invalid input format for 'ordered_tasks'. Each task must include 'id', 'sort_order', and 'parent_id'."
            }), 400

        # Step 3: Validate parent task (if applicable)
        if parent_id is not None:
            parent_task = Task.query.get(parent_id)
            if not parent_task:
                logger.error(f"Parent task with ID {parent_id} not found.")
                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400

        logger.info("Input validation passed. Proceeding with task updates...")

        # Step 4: Process updates for each subtask
        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation

        for task_data in ordered_tasks:
            subtask_id = task_data["id"]
            sort_order = task_data["sort_order"]
            new_parent_id = task_data["parent_id"]

            # Fetch the subtask from the database
            subtask = Task.query.get(subtask_id)
            if not subtask:
                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")
                continue

            # Log and update parent_id if it changes
            if new_parent_id is not None and new_parent_id != subtask.parent_id:
                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")
                subtask.parent_id = new_parent_id

            # Update sort order
            subtask.sort_order = sort_order
            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")

            # Add to the list of updated subtasks for validation
            updated_subtasks.append(subtask)

        # Step 5: Commit changes to the database
        try:
            db.session.commit()
            logger.info(f"Subtasks reordered successfully: {[task['id'] for task in ordered_tasks]}")
        except Exception as e:
            logger.error(f"Error committing changes to the database: {str(e)}")
            db.session.rollback()
            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500

        # Step 6: Post-commit validation
        for subtask in updated_subtasks:
            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")
            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")

        # Step 7: Return success response
        return jsonify({
            "success": True,
            "message": "Subtasks reordered successfully.",
            "updated_subtasks": [subtask.id for subtask in updated_subtasks]
        }), 200

    except Exception as e:
        # Step 8: Handle unexpected errors
        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)
        db.session.rollback()
        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500
    

@bp.route('/debug/csrf-token')
def debug_csrf_token():
    return render_template('base.html')  # Ensure the meta tag renders correctly


@bp.route("/batch_update/", methods=["POST"])
def batch_update_tasks():
    """Perform batch updates on tasks."""
    
    logger.info("Entering batch_update_tasks route...")
    traceback.print_stack() 
    
    task_ids = request.json.get("task_ids", [])
    action = request.json.get("action")
    if not task_ids or not action:
        return jsonify({"error": "Task IDs and action are required"}), 400
    try:
        tasks = Task.query.filter(Task.id.in_(task_ids)).all()
        for task in tasks:
            if action == "archive":
                task.is_archived = True
            elif action == "complete":
                task.completed = True
        db.session.commit()
        return jsonify({"success": True})
    except Exception as e:
        db.session.rollback()
        return jsonify({"error": str(e)}), 500

def build_hierarchy(task_id, tasks):
    logger.info("Entering task_hierarchy route...")
    task = TaskService.fetch_task_with_logging(task_id)
    traceback.print_stack() 

    return {
        "id": task.id,
        "name": task.name,
        "children": [build_hierarchy(t.id, tasks) for t in tasks if t.parent_id == task.id],
    }

@bp.route("/hierarchy/<int:project_id>", methods=["GET"])
def task_hierarchy(project_id):
    """Fetch the task hierarchy for a specific project."""
    
    tasks = Task.query.filter_by(project_id=project_id).all()
    task_map = {task.id: task for task in tasks}

    hierarchy = [build_hierarchy(task.id, tasks) for task in tasks if task.parent_id is None]
    logger.info(f"Task hierarchy for project {project_id} generated.")
    return jsonify(hierarchy)
    return jsonify(hierarchy)


@bp.route("/search/", methods=["GET"])
def search_tasks():
    """Search tasks by name."""
    logger.info("Entering search_tasks route...")
    traceback.print_stack() 
    
    query = request.args.get("q", "")
    if not query:
        return jsonify({"error": "Search query is required"}), 400

    tasks = Task.query.filter(Task.name.ilike(f"%{query}%")).all()
    logger.info(f"Search query: {query} - Found {len(tasks)} results.")
    return jsonify([{"id": task.id, "name": task.name} for task in tasks])
