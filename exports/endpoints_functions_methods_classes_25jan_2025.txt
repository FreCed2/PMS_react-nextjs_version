

File: ./app/__init__.py
  Endpoints:
    - ENV (Methods: get)
    - ENV (Methods: get)
    - SQLALCHEMY_RECORD_QUERIES (Methods: get)
  Functions:
    - create_app
      Docstring: Application factory function to initialize the Flask app.

File: ./app/tasks/models.py
  Functions:
    - __init__
    - validate_task_changes
      Docstring: Validates changes to 'parent_id' and 'task_type'.
Ensures hierarchy validity and checks for circular references.
    - _validate_hierarchy_change
      Docstring: Validates hierarchy changes based on task_type and parent_id.
This method avoids setting attributes and focuses only on validation.
    - check_circular_reference
      Docstring: Iteratively checks for circular references in the task hierarchy.
Prevents stack overflow on deep hierarchies.
    - _validate_no_circular_references
      Docstring: Validates that there are no circular references in the task hierarchy.

Args:
    new_parent_id (int): The new parent ID to validate.

Raises:
    ValueError: If a circular reference is detected.
    - to_dict
    - validate_hierarchy
    - save
      Docstring: Saves the task to the database after validation.

Raises:
    ValueError: If validation fails.
    - delete_with_children
      Docstring: Deletes the task and optionally its children if 'confirm' is True.
    - archive
      Docstring: Archives the task and its subtasks.
    - unarchive
      Docstring: Unarchives the task and its subtasks.
    - mark_completed
      Docstring: Marks the task as completed.
    - to_dict_with_children
      Docstring: Converts the Task instance into a dictionary, including its children.
Ensures that the hierarchy is serialized properly.
    - __repr__
  Classes:
    - Task
      - __init__
      - validate_task_changes
        Docstring: Validates changes to 'parent_id' and 'task_type'.
Ensures hierarchy validity and checks for circular references.
      - _validate_hierarchy_change
        Docstring: Validates hierarchy changes based on task_type and parent_id.
This method avoids setting attributes and focuses only on validation.
      - check_circular_reference
        Docstring: Iteratively checks for circular references in the task hierarchy.
Prevents stack overflow on deep hierarchies.
      - _validate_no_circular_references
        Docstring: Validates that there are no circular references in the task hierarchy.

Args:
    new_parent_id (int): The new parent ID to validate.

Raises:
    ValueError: If a circular reference is detected.
      - to_dict
      - validate_hierarchy
      - save
        Docstring: Saves the task to the database after validation.

Raises:
    ValueError: If validation fails.
      - delete_with_children
        Docstring: Deletes the task and optionally its children if 'confirm' is True.
      - archive
        Docstring: Archives the task and its subtasks.
      - unarchive
        Docstring: Unarchives the task and its subtasks.
      - mark_completed
        Docstring: Marks the task as completed.
      - to_dict_with_children
        Docstring: Converts the Task instance into a dictionary, including its children.
Ensures that the hierarchy is serialized properly.
      - __repr__


File: ./app/tasks/utils.py
  Endpoints:
    - parent_id (Methods: get)
  Functions:
    - filter_tasks
      Docstring: Dynamically filters tasks based on criteria provided in a dictionary, 
with optimized loading for related models.

Args:
    filters (dict): A dictionary of filtering criteria.
    page (int, optional): The page number for pagination.
    per_page (int, optional): The number of items per page.

Returns:
    Query or Pagination: A SQLAlchemy query object or paginated results.
    - debug_parent_child_relationships
      Docstring: Generates a debug map of parent-child relationships for all tasks.

Args:
    project_id (int, optional): Restrict to tasks from a specific project.

Returns:
    dict: A dictionary mapping parent IDs to their child task IDs.
    - validate_parent_child_relationships
      Docstring: Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.

Raises:
    ValueError: If invalid relationships are detected.
    - get_all_task_ids_with_parents
      Docstring: Returns a flat list of tasks with their parent IDs for debugging.

Returns:
    list: A list of tuples (task_id, parent_id).
    - calculate_total_story_points
      Docstring: Calculates the total story points for a project.
    - calculate_completed_story_points
      Docstring: Calculates the total completed story points for a project.
    - calculate_completion_percentage
      Docstring: Calculates the completion percentage of a project.
    - delete_project_and_tasks
      Docstring: Deletes a project and all its associated tasks.
    - contributor_has_assigned_tasks
      Docstring: Checks if a contributor has tasks assigned in a project.
    - fetch_task_with_logging
      Docstring: Fetch a task with detailed logging, including parent task information.
    - archive_task
      Docstring: Archive a task and all its subtasks, preventing infinite recursion.

Args:
    task (Task): The task to be archived.
    visited (set): A set of task IDs already processed (for recursion guard).
    - validate_hierarchy
      Docstring: Validates the hierarchy of a task or returns valid parent types.

Args:
    task (Task): The task instance to validate (optional).
    parent_id (int): The ID of the parent task to validate against (optional).
    task_type (str): The type of the task to determine valid parents (optional).

Returns:
    list: If no task and parent_id are provided, returns valid parent types for the task's type.

Raises:
    ValueError: If the hierarchy rules are violated during validation.
    - fetch_all_tasks
      Docstring: Fetches all tasks for a specific project, including project, contributor, and child task relationships.

Args:
    project_id (int): The ID of the project whose tasks need to be fetched.

Returns:
    list: A list of Task objects with their relationships loaded.
    - fetch_all_tasks_as_dicts
      Docstring: Fetches a list of tasks based on optional filters and serializes them into dictionaries.

Args:
    filters (dict, optional): A dictionary of filters to apply to the task query.

Returns:
    list[dict]: A list of serialized task dictionaries.
    - fetch_task_as_dict
      Docstring: Fetches a task by ID and returns it as a dictionary.

Args:
    task_id (int): The ID of the task to fetch.

Returns:
    dict: A dictionary representation of the task.

Raises:
    ValueError: If the task is not found.
    - to_dict
      Docstring: Converts the Task object into a dictionary for JSON responses.

Returns:
    dict: A dictionary representation of the Task object.
    - generate_page_numbers
      Docstring: Generates a list of page numbers for pagination, including ellipses.

Args:
    current_page (int): The current page number.
    total_pages (int): Total number of pages.
    left_edge (int): Number of pages to show at the left edge.
    right_edge (int): Number of pages to show at the right edge.
    left_current (int): Number of pages to show to the left of the current page.
    right_current (int): Number of pages to show to the right of the current page.

Returns:
    list: A list of page numbers or None for ellipses.
  Classes:
    - TaskService
      - filter_tasks
        Docstring: Dynamically filters tasks based on criteria provided in a dictionary, 
with optimized loading for related models.

Args:
    filters (dict): A dictionary of filtering criteria.
    page (int, optional): The page number for pagination.
    per_page (int, optional): The number of items per page.

Returns:
    Query or Pagination: A SQLAlchemy query object or paginated results.
      - debug_parent_child_relationships
        Docstring: Generates a debug map of parent-child relationships for all tasks.

Args:
    project_id (int, optional): Restrict to tasks from a specific project.

Returns:
    dict: A dictionary mapping parent IDs to their child task IDs.
      - validate_parent_child_relationships
        Docstring: Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.

Raises:
    ValueError: If invalid relationships are detected.
      - get_all_task_ids_with_parents
        Docstring: Returns a flat list of tasks with their parent IDs for debugging.

Returns:
    list: A list of tuples (task_id, parent_id).
      - calculate_total_story_points
        Docstring: Calculates the total story points for a project.
      - calculate_completed_story_points
        Docstring: Calculates the total completed story points for a project.
      - calculate_completion_percentage
        Docstring: Calculates the completion percentage of a project.
      - delete_project_and_tasks
        Docstring: Deletes a project and all its associated tasks.
      - contributor_has_assigned_tasks
        Docstring: Checks if a contributor has tasks assigned in a project.
      - fetch_task_with_logging
        Docstring: Fetch a task with detailed logging, including parent task information.
      - archive_task
        Docstring: Archive a task and all its subtasks, preventing infinite recursion.

Args:
    task (Task): The task to be archived.
    visited (set): A set of task IDs already processed (for recursion guard).
      - validate_hierarchy
        Docstring: Validates the hierarchy of a task or returns valid parent types.

Args:
    task (Task): The task instance to validate (optional).
    parent_id (int): The ID of the parent task to validate against (optional).
    task_type (str): The type of the task to determine valid parents (optional).

Returns:
    list: If no task and parent_id are provided, returns valid parent types for the task's type.

Raises:
    ValueError: If the hierarchy rules are violated during validation.
      - fetch_all_tasks
        Docstring: Fetches all tasks for a specific project, including project, contributor, and child task relationships.

Args:
    project_id (int): The ID of the project whose tasks need to be fetched.

Returns:
    list: A list of Task objects with their relationships loaded.
      - fetch_all_tasks_as_dicts
        Docstring: Fetches a list of tasks based on optional filters and serializes them into dictionaries.

Args:
    filters (dict, optional): A dictionary of filters to apply to the task query.

Returns:
    list[dict]: A list of serialized task dictionaries.
      - fetch_task_as_dict
        Docstring: Fetches a task by ID and returns it as a dictionary.

Args:
    task_id (int): The ID of the task to fetch.

Returns:
    dict: A dictionary representation of the task.

Raises:
    ValueError: If the task is not found.
      - to_dict
        Docstring: Converts the Task object into a dictionary for JSON responses.

Returns:
    dict: A dictionary representation of the Task object.
      - generate_page_numbers
        Docstring: Generates a list of page numbers for pagination, including ellipses.

Args:
    current_page (int): The current page number.
    total_pages (int): Total number of pages.
    left_edge (int): Number of pages to show at the left edge.
    right_edge (int): Number of pages to show at the right edge.
    left_current (int): Number of pages to show to the left of the current page.
    right_current (int): Number of pages to show to the right of the current page.

Returns:
    list: A list of page numbers or None for ellipses.

File: ./app/tasks/routes.py
  Endpoints:
    - / (Methods: route)
    - /details/<int:task_id> (Methods: route)
    - /task_row/<int:task_id> (Methods: route)
    - /api/projects/<int:project_id>/contributors (Methods: route)
    - /<int:task_id>/assign_contributor (Methods: route)
    - /archive/<int:task_id> (Methods: route)
    - /unarchive/<int:task_id> (Methods: route)
    - /disconnect/<int:task_id> (Methods: route)
    - /available_tasks (Methods: route)
    - /assign_parent/<int:task_id> (Methods: route)
    - /subtasks<int:task_id> (Methods: route)
    - /assign_subtasks/<int:task_id> (Methods: route)
    - /reorder_subtasks (Methods: route)
    - /debug/csrf-token (Methods: route)
    - /batch_update/ (Methods: route)
    - /hierarchy/<int:project_id> (Methods: route)
    - /search/ (Methods: route)
    - project_id (Methods: get)
    - contributor_id (Methods: get)
    - task_type (Methods: get)
    - completion_status (Methods: get)
    - page (Methods: get)
    - per_page (Methods: get)
    - task_ids (Methods: get)
    - action (Methods: get)
    - q (Methods: get)
    - contributor_id (Methods: get)
    - exclude_task_id (Methods: get)
    - task_type (Methods: get)
    - term (Methods: get)
    - project_id (Methods: get)
    - limit (Methods: get)
    - page (Methods: get)
    - parent_id (Methods: get)
    - parent_id (Methods: get)
    - ordered_tasks (Methods: get)
    - show_archived (Methods: get)
    - hierarchical (Methods: get)
    - row_only (Methods: get)
  Functions:
    - list_tasks
      Docstring: List tasks globally with filtering, optional hierarchical ordering, and pagination.
    - task_details
      Docstring: Fetch and display details for a specific task.
    - get_task_row
      Docstring: Return the HTML for a single task row or modal content.
This endpoint is used to dynamically update the task table and modal.
    - get_project_contributors
      Docstring: Fetch contributors for a specific project.
    - assign_contributor
      Docstring: Assign a contributor to a task.
    - archive_task
      Docstring: Archive a task and its subtasks.
    - unarchive_task
      Docstring: Unarchive a task and its subtasks.
    - disconnect_subtask
      Docstring: Remove parent reference from a subtask.
    - available_tasks
      Docstring: Fetch a list of available tasks, excluding the specified one,
while enforcing valid parent-child hierarchy rules.
    - assign_parent_task
      Docstring: Assign a parent task to an existing task.
    - get_subtasks
      Docstring: Fetch subtasks for a given task.
    - assign_subtasks
      Docstring: Assign multiple subtasks to a parent task.
    - reorder_subtasks
      Docstring: Reorder subtasks globally or reassign them to a different parent.

Steps:
- Parse and validate input from the frontend.
- Update parent-child relationships and sort order in the database.
- Commit changes and return a success response.
- Handle errors gracefully and provide detailed logs for debugging.
    - debug_csrf_token
    - batch_update_tasks
      Docstring: Perform batch updates on tasks.
    - build_hierarchy
    - task_hierarchy
      Docstring: Fetch the task hierarchy for a specific project.
    - search_tasks
      Docstring: Search tasks by name.



File: ./app/forms/forms.py
  Functions:
    - get_task_model
    - validate
      Docstring: Override the default validate method to include logging.
    - validate_parent_id
    - validate_new_parent_id
    - validate_parent_id
  Classes:
    - ProjectForm
    - AddContributorForm
      - validate
        Docstring: Override the default validate method to include logging.
    - ProgressEditForm
    - AddProgressForm
    - DeleteProjectForm
    - TaskForm
      - validate_parent_id
    - ArchiveTaskForm
    - FilterTasksForm
    - ReassignSubtaskForm
      - validate_new_parent_id
    - AssignSubtaskForm
      - validate_parent_id

File: ./app/charts/contributor_breakdown_chart.py
  Functions:
    - generate_contributor_breakdown_chart
    - format_autopct

File: ./app/charts/__init__.py

File: ./app/charts/burnup_chart.py
  Functions:
    - generate_burnup_chart

File: ./app/charts/project_breakdown_chart.py
  Functions:
    - generate_project_breakdown_chart
    - format_autopct

File: ./app/utils/logging_config.py
  Functions:
    - setup_logging
      Docstring: Configure logging for the application, including rotating file logs and
development/production environment adjustments.


File: ./app/utils/common_utils.py
  Functions:
    - log_interaction
      Docstring: Logs interaction details for debugging and sequence generation.
        :param caller: The calling entity or module.
        :param callee: The receiving entity or module.
        :param action: The action being logged.
        :param data: Optional data payload.
        :param result: Optional result of the action.
        :param error: Optional error message.
    - count_ongoing_projects
      Docstring: Count ongoing projects based on their story points completion.
    - count_completed_projects
      Docstring: Count completed projects where all story points are finished.
    - count_unstarted_projects
      Docstring: Count unstarted projects where no story points are completed.
    - count_all_projects
      Docstring: Count all projects in the database.
    - count_all_contributors
      Docstring: Count all contributors in the database.
    - count_assigned_contributors
      Docstring: Count contributors assigned to at least one project.
    - count_unassigned_contributors
      Docstring: Count contributors not assigned to any project.

File: ./app/models/models.py
  Functions:
    - contributors
      Docstring: Define the many-to-many relationship for contributors dynamically.
    - add_contributor
      Docstring: Add a contributor to the project.
    - remove_contributor
      Docstring: Remove a contributor from the project.
    - update_story_points
      Docstring: Recalculate the completed story points for the project.
    - total_story_points
      Docstring: Fetch the total story points for all tasks associated with this project.
    - completion_percentage
      Docstring: Calculate the completion percentage of the project based on story points.
    - __repr__
    - __repr__
  Classes:
    - Project
      Docstring: Represents a project entity.
      - contributors
        Docstring: Define the many-to-many relationship for contributors dynamically.
      - add_contributor
        Docstring: Add a contributor to the project.
      - remove_contributor
        Docstring: Remove a contributor from the project.
      - update_story_points
        Docstring: Recalculate the completed story points for the project.
      - total_story_points
        Docstring: Fetch the total story points for all tasks associated with this project.
      - completion_percentage
        Docstring: Calculate the completion percentage of the project based on story points.
      - __repr__
    - Contributor
      Docstring: Represents a contributor entity.
      - __repr__


File: ./app/static/js/tasks_table_interactions.js
  JavaScript Functions:
    - to
    - handleTaskOpenClick
    - initializeToggleStates
    - initializeRowLevels
    - initTableSorter
    - initToggleDetails
    - getHierarchyLevel
    - updateTaskParentMap
    - toggleChildRows
    - is
    - setupTooltips
    - is
    - setupThemeToggle
    - is
    - refreshTaskRow
    - is
    - setupDeleteTaskLogic
    - is
    - deleteTask

File sections:
  
    /* ======================== Document Initialization ======================== */
 
    /* ======================== Event Handlers ======================== */

    /* ======================== Initialization Functions ======================== */

    /* ======================== Utility Functions ======================== */

    /* ======================== Modal Management ======================== */
 
    /* ======================== Task Deletion Workflow ======================== */

    /*---------------------------------TaskManager---------------------------------*/
   
    /* ======================== Drag and Drop section ======================== */
    

File: ./app/static/js/filters.js
  
File: ./app/static/js/modals.js
  JavaScript Functions:
    - getModal
    - fetchTaskDetails
    - to
    - by
    - to
    - debounce
    - later
  
    /* ======================== Utility Functions ======================== */

    /* ======================== Dropdown Management ======================== */

    /* ======================== Modal Lifecycle Events ======================== */

    /* ======================== Modal Actions ======================== */


File: ./app/routes/api_routes.py
  Endpoints:
    - /calculate_completion_percentage/<int:project_id> (Methods: route)
    - /delete_project/<int:project_id> (Methods: route)
    - /tasks/<int:task_id> (Methods: route)
    - /tasks (Methods: route)
    - /tasks/delete/<int:task_id> (Methods: route)
    - description (Methods: get)
    - contributor_id (Methods: get)
    - completed (Methods: get)
    - sort_order (Methods: get)
    - id (Methods: get)
    - task_id (Methods: get)
    - story_points (Methods: get)
    - parent_id (Methods: get)
    - description (Methods: get)
    - contributor_id (Methods: get)
    - completed (Methods: get)
    - sort_order (Methods: get)
    - confirm_children (Methods: get)
    - name (Methods: get)
    - title (Methods: get)
  Functions:
    - calculate_completion_percentage_api
      Docstring: API endpoint to calculate the completion percentage of a project.
    - api_delete_project
      Docstring: API endpoint to delete a project and its related tasks.
    - get_task_details
      Docstring: Fetch task details by ID and return as JSON using the TaskService utility method.
    - validate_task_payload
      Docstring: Validates task payload for required fields and hierarchy rules.
    - save_task
      Docstring: API route to create a new task or update an existing one.
Handles validation, parent-child hierarchy rules, and database interactions.
    - update_task
      Docstring: Updates an existing task.
    - create_task
      Docstring: Creates a new task.
    - delete_task
      Docstring: API endpoint to delete a task. Optionally, delete its child tasks as well.
:param task_id: ID of the task to be deleted.
:return: JSON response with success or error message.

File: ./app/routes/page_routes.py
  Endpoints:
    - / (Methods: route)
    - /base (Methods: route)
    - /test-flash (Methods: route)
    - /dashboard (Methods: route)
    - /project/<project_name> (Methods: route)
    - /create_project (Methods: route)
    - /add_contributor/<project_name> (Methods: route)
    - /remove_contributor/<project_name> (Methods: route)
    - /delete_project/<int:project_id> (Methods: route)
    - contributor_name (Methods: get)
    - contributor_name (Methods: get)
  Functions:
    - index
      Docstring: Renders the homepage with project details and a form to add new projects.
    - base
      Docstring: Renders the base.html template.
    - test_flash
      Docstring: Adds a test flash message and redirects to the base page.
    - dashboard
      Docstring: Renders the dashboard page with project and contributor stats and charts.
    - project
      Docstring: Displays project details and allows interaction such as adding contributors or viewing charts.
    - create_project
      Docstring: Handles the creation of a new project.
    - add_contributor
      Docstring: Adds a contributor to a specified project. Logs all interactions for tracing and debugging.
    - remove_contributor
      Docstring: Removes a contributor from a specified project. Prevents removal if the contributor has assigned tasks.
Logs all interactions for tracing and debugging.

:param project_name: The name of the project from which the contributor will be removed.
    - delete_project
      Docstring: Deletes a project and all its tasks. Handles errors during deletion.

