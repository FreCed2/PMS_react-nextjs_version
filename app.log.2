2025-03-13 20:08:49,217 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:08:49,219 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:08:49,219 DEBUG: Query parameters: task_type=User Story, exclude_task_id=395, search_term=, project_id=None, limit=30, page=1
2025-03-13 20:08:49,220 DEBUG: Query parameters: task_type=User Story, exclude_task_id=395, search_term=, project_id=None, limit=30, page=1
2025-03-13 20:08:49,229 INFO: [cached since 8797s ago] {'pk_1': 7}
2025-03-13 20:08:49,229 INFO: [cached since 8797s ago] {'pk_1': 7}
2025-03-13 20:08:49,230 INFO: BEGIN (implicit)
2025-03-13 20:08:49,232 INFO: BEGIN (implicit)
2025-03-13 20:08:49,234 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:08:49,234 INFO: [cached since 8794s ago] {'pk_1': 395}
2025-03-13 20:08:49,233 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:08:49,237 INFO: [cached since 8794s ago] {'pk_1': 395}
2025-03-13 20:08:49,252 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:08:49,253 INFO: [cached since 8797s ago] {}
2025-03-13 20:08:49,252 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:08:49,253 INFO: [cached since 8797s ago] {}
2025-03-13 20:08:49,252 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 395, 'task_type': ['User Story']}
2025-03-13 20:08:49,253 INFO: Validating hierarchy for Task N/A
2025-03-13 20:08:49,253 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 395, 'task_type': ['User Story']}
2025-03-13 20:08:49,256 INFO: Validating hierarchy for Task N/A
2025-03-13 20:08:49,256 INFO: Determining valid parent types for task_type: User Story
2025-03-13 20:08:49,255 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:08:49,260 INFO: [cached since 8797s ago] {'param_1': 7}
2025-03-13 20:08:49,254 INFO: Determining valid parent types for task_type: User Story
2025-03-13 20:08:49,261 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 395, 'task_type': ['Epic']}
2025-03-13 20:08:49,259 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 395, 'task_type': ['Epic']}
2025-03-13 20:08:49,280 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:08:49,280 INFO: [cached since 8797s ago] {'param_1': 1}
2025-03-13 20:08:49,282 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-13 20:08:49,254 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:08:49,299 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-13 20:08:49,308 INFO: [cached since 8797s ago] {'param_1': 7}
2025-03-13 20:08:49,311 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:08:49,318 INFO: [cached since 8580s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-13 20:08:49,318 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-13 20:08:49,319 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:08:49,319 INFO: [cached since 8797s ago] {'param_1': 2}
2025-03-13 20:08:49,320 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-13 20:08:49,322 INFO: [cached since 8580s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-13 20:08:49,322 INFO: [cached since 8797s ago] {'param_1': 1}
2025-03-13 20:08:49,335 DEBUG: Tasks returned: [{'id': 430, 'name': 'No Epic', 'task_type': 'Epic', 'is_parent': False}, {'id': 393, 'name': 'List of ideas for new features, parameters to add', 'task_type': 'Epic', 'is_parent': False}, {'id': 327, 'name': '[UNIQUE feature] -\xa0Epic - AI-Powered PBI Refinement System', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 456, 'name': 'Search in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okr´s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notification system', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 459, 'name': '[RESEARCH] - Step 1: Mapping out what each file does', 'task_type': 'Epic', 'is_parent': False}, {'id': 432, 'name': 'Roadmap view', 'task_type': 'Epic', 'is_parent': False}, {'id': 392, 'name': 'UI / UX Improvements', 'task_type': 'Epic', 'is_parent': False}, {'id': 465, 'name': 'Building from Scratch vs.\xa0Replicating Each Feature', 'task_type': 'Epic', 'is_parent': False}, {'id': 424, 'name': '[ISSUES] - Current issues/bugs', 'task_type': 'Epic', 'is_parent': False}, {'id': 460, 'name': '[PLANNING] - Step 2: Architecture & Migration Planning', 'task_type': 'Epic', 'is_parent': False}, {'id': 462, 'name': '[MIGRATION] - high-level roadmap Step 1 - 7', 'task_type': 'Epic', 'is_parent': False}]
2025-03-13 20:08:49,340 INFO: ROLLBACK
2025-03-13 20:08:49,351 DEBUG: Tasks returned: [{'id': 430, 'name': 'No Epic', 'task_type': 'Epic', 'is_parent': False}, {'id': 393, 'name': 'List of ideas for new features, parameters to add', 'task_type': 'Epic', 'is_parent': False}, {'id': 327, 'name': '[UNIQUE feature] -\xa0Epic - AI-Powered PBI Refinement System', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 456, 'name': 'Search in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okr´s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notification system', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 459, 'name': '[RESEARCH] - Step 1: Mapping out what each file does', 'task_type': 'Epic', 'is_parent': False}, {'id': 432, 'name': 'Roadmap view', 'task_type': 'Epic', 'is_parent': False}, {'id': 392, 'name': 'UI / UX Improvements', 'task_type': 'Epic', 'is_parent': False}, {'id': 465, 'name': 'Building from Scratch vs.\xa0Replicating Each Feature', 'task_type': 'Epic', 'is_parent': False}, {'id': 424, 'name': '[ISSUES] - Current issues/bugs', 'task_type': 'Epic', 'is_parent': False}, {'id': 460, 'name': '[PLANNING] - Step 2: Architecture & Migration Planning', 'task_type': 'Epic', 'is_parent': False}, {'id': 462, 'name': '[MIGRATION] - high-level roadmap Step 1 - 7', 'task_type': 'Epic', 'is_parent': False}]
2025-03-13 20:08:49,351 INFO: 127.0.0.1 - - [13/Mar/2025 20:08:49] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=395&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:08:49,353 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:08:49,359 INFO: [cached since 8797s ago] {'param_1': 3}
2025-03-13 20:08:49,355 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:08:49,359 INFO: [cached since 8797s ago] {'param_1': 2}
2025-03-13 20:08:49,355 INFO: ROLLBACK
2025-03-13 20:08:49,365 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:08:49,365 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:08:49,366 INFO: 127.0.0.1 - - [13/Mar/2025 20:08:49] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=395&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:08:49,366 INFO: [cached since 8797s ago] {'param_1': 4}
2025-03-13 20:08:49,368 INFO: [cached since 8797s ago] {'param_1': 3}
2025-03-13 20:08:49,372 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:08:49,372 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:08:49,372 INFO: [cached since 8797s ago] {'param_1': 4}
2025-03-13 20:08:49,372 INFO: [cached since 8797s ago] {'param_1': 5}
2025-03-13 20:08:49,375 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:08:49,376 INFO: [cached since 8797s ago] {'param_1': 5}
2025-03-13 20:08:49,377 INFO: ROLLBACK
2025-03-13 20:08:49,379 INFO: ROLLBACK
2025-03-13 20:08:49,380 INFO: 127.0.0.1 - - [13/Mar/2025 20:08:49] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:08:49,380 INFO: 127.0.0.1 - - [13/Mar/2025 20:08:49] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:13:50,553 INFO: 127.0.0.1 - - [13/Mar/2025 20:13:50] "GET /socket.io/?EIO=4&transport=websocket&sid=Qm8RqZ-T2jqrUEppAAA4 HTTP/1.1" 200 -
2025-03-13 20:13:51,778 INFO: 127.0.0.1 - - [13/Mar/2025 20:13:51] "GET /socket.io/?EIO=4&transport=polling&t=q97km1of HTTP/1.1" 200 -
2025-03-13 20:13:51,878 INFO: 127.0.0.1 - - [13/Mar/2025 20:13:51] "POST /socket.io/?EIO=4&transport=polling&t=q97m3y9h&sid=-dFV7ombBEuXYHgYAAA6 HTTP/1.1" 200 -
2025-03-13 20:13:51,894 INFO: Entering list_tasks_json route...
2025-03-13 20:13:51,901 INFO: BEGIN (implicit)
2025-03-13 20:13:51,901 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 20:13:51,931 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 20:13:51,928 INFO: BEGIN (implicit)
2025-03-13 20:13:51,947 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 20:13:51,954 INFO: [cached since 9100s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 20:13:51,953 INFO: BEGIN (implicit)
2025-03-13 20:13:51,956 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 20:13:51,980 INFO: [cached since 9100s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 20:13:51,908 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:13:51,980 INFO: [cached since 9100s ago] {}
2025-03-13 20:13:51,963 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 20:13:51,984 INFO: ROLLBACK
2025-03-13 20:13:51,964 INFO: 127.0.0.1 - - [13/Mar/2025 20:13:51] "GET /socket.io/?EIO=4&transport=polling&t=q97m55iv&sid=-dFV7ombBEuXYHgYAAA6 HTTP/1.1" 200 -
2025-03-13 20:13:52,006 INFO: BEGIN (implicit)
2025-03-13 20:13:52,006 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 20:13:52,025 INFO: [cached since 9100s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 20:13:52,028 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 20:13:52,030 INFO: [cached since 9100s ago] {}
2025-03-13 20:13:52,028 INFO: 127.0.0.1 - - [13/Mar/2025 20:13:52] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 20:13:52,039 INFO: ROLLBACK
2025-03-13 20:13:52,029 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:13:52,057 INFO: [cached since 9100s ago] {'param_1': 1}
2025-03-13 20:13:52,057 INFO: 127.0.0.1 - - [13/Mar/2025 20:13:52] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 20:13:52,080 INFO: BEGIN (implicit)
2025-03-13 20:13:52,080 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:13:52,082 INFO: [cached since 9100s ago] {'pk_1': 19}
2025-03-13 20:13:52,095 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:13:52,095 INFO: [cached since 9100s ago] {'param_1': 2}
2025-03-13 20:13:52,096 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:13:52,097 INFO: [cached since 9100s ago] {}
2025-03-13 20:13:52,098 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:13:52,098 INFO: [cached since 9100s ago] {'param_1': 19}
2025-03-13 20:13:52,100 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:13:52,101 INFO: [cached since 9100s ago] {'param_1': 1}
2025-03-13 20:13:52,101 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:13:52,102 INFO: [cached since 9100s ago] {'param_1': 3}
2025-03-13 20:13:52,103 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:13:52,104 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:13:52,104 INFO: [cached since 9100s ago] {'param_1': 4}
2025-03-13 20:13:52,104 INFO: [cached since 9100s ago] {'param_1': 2}
2025-03-13 20:13:52,107 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:13:52,107 INFO: [cached since 9100s ago] {'param_1': 3}
2025-03-13 20:13:52,112 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:13:52,113 INFO: [cached since 9100s ago] {'param_1': 5}
2025-03-13 20:13:52,125 INFO: ROLLBACK
2025-03-13 20:13:52,126 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:13:52,127 INFO: [cached since 9100s ago] {'param_1': 4}
2025-03-13 20:13:52,127 INFO: 127.0.0.1 - - [13/Mar/2025 20:13:52] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 20:13:52,130 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:13:52,130 INFO: [cached since 9100s ago] {'param_1': 5}
2025-03-13 20:13:52,137 INFO: ROLLBACK
2025-03-13 20:13:52,144 INFO: 127.0.0.1 - - [13/Mar/2025 20:13:52] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:13:52,381 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 20:13:52,381 INFO: [cached since 9100s ago] {}
2025-03-13 20:13:52,385 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 20:13:52,385 INFO: [cached since 9100s ago] {}
2025-03-13 20:13:52,387 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 20:13:52,387 INFO: [cached since 9100s ago] {}
2025-03-13 20:13:52,393 INFO: ROLLBACK
2025-03-13 20:13:52,394 INFO: 127.0.0.1 - - [13/Mar/2025 20:13:52] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 20:13:55,582 INFO: Fetching task details for Task ID 395.
2025-03-13 20:13:55,583 INFO: Fetching task with ID 395.
2025-03-13 20:13:55,585 INFO: BEGIN (implicit)
2025-03-13 20:13:55,585 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:13:55,586 INFO: [cached since 9101s ago] {'pk_1': 395}
2025-03-13 20:13:55,593 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x109bfa990>, 'epic_priority': None, 'project_id': 7, 'id': 395, 'is_archived': False, 'contributor_id': 5, 'name': 'Side menu', 'completed': False, 'estimate_type': 'story_points', 'sort_order': 2, 'story_points': 0, 'completed_date': None, 'description': '<ul><li><p>Settings</p></li><li><p>Contributors</p></li><li><p>Company</p><ul><li><p>Goals</p><ul><li><p>OKR´s</p></li></ul></li><li><p>Sales</p></li><li><p>Financial (Rescricted access, (Super admin)</p></li><li><p>Market position</p></li><li><p>Market analysis</p></li><li><p>User metrics</p></li></ul></li><li><p>Projects</p></li><li><p></p></li></ul>', 'status': 'In Progress', 'time_estimate': None, 'parent_id': None, 'created_at': datetime.datetime(2025, 3, 5, 7, 43, 51, 220532), 'task_type': 'User Story', 'updated_at': datetime.datetime(2025, 3, 13, 13, 49, 27, 425658), 'priority': None}
2025-03-13 20:13:55,594 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:13:55,594 INFO: [cached since 9101s ago] {'pk_1': 7}
2025-03-13 20:13:55,595 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-13 20:13:55,595 INFO: [cached since 9101s ago] {'pk_1': 5}
2025-03-13 20:13:55,595 INFO: Task ID 395 fetched with parent ID: None
2025-03-13 20:13:55,595 INFO: Task with ID 395 fetched successfully.
2025-03-13 20:13:55,595 DEBUG: Fetched Task Data: {'id': 395, 'name': 'Side menu', 'description': '<ul><li><p>Settings</p></li><li><p>Contributors</p></li><li><p>Company</p><ul><li><p>Goals</p><ul><li><p>OKR´s</p></li></ul></li><li><p>Sales</p></li><li><p>Financial (Rescricted access, (Super admin)</p></li><li><p>Market position</p></li><li><p>Market analysis</p></li><li><p>User metrics</p></li></ul></li><li><p>Projects</p></li><li><p></p></li></ul>', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'estimate_type': 'story_points', 'estimate': 0, 'status': 'In Progress', 'sort_order': 2, 'created_at': '2025-03-05T07:43:51.220532', 'updated_at': '2025-03-13T13:49:27.425658', 'contributor_name': 'Fredrik Cederborg', 'parent': None}
2025-03-13 20:13:55,595 INFO: Task details fetched successfully for Task ID 395.
2025-03-13 20:13:55,597 INFO: ROLLBACK
2025-03-13 20:13:55,597 INFO: 127.0.0.1 - - [13/Mar/2025 20:13:55] "GET /api/tasks/395 HTTP/1.1" 200 -
2025-03-13 20:13:55,808 INFO: 127.0.0.1 - - [13/Mar/2025 20:13:55] "OPTIONS /tasks/available_tasks?task_type=User%20Story&exclude_task_id=395&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:13:55,824 INFO: BEGIN (implicit)
2025-03-13 20:13:55,827 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:13:55,828 INFO: [cached since 9104s ago] {'pk_1': 7}
2025-03-13 20:13:55,829 INFO: 127.0.0.1 - - [13/Mar/2025 20:13:55] "OPTIONS /tasks/available_tasks?task_type=User%20Story&exclude_task_id=395&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:13:55,832 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:13:55,834 INFO: [cached since 9104s ago] {}
2025-03-13 20:13:55,833 INFO: BEGIN (implicit)
2025-03-13 20:13:55,834 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:13:55,835 INFO: [cached since 9104s ago] {'pk_1': 7}
2025-03-13 20:13:55,835 INFO: Entering available_tasks route...
2025-03-13 20:13:55,836 INFO: Entering available_tasks route...
2025-03-13 20:13:55,837 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:13:55,842 INFO: [cached since 9104s ago] {}
2025-03-13 20:13:55,839 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:13:55,843 INFO: [cached since 9104s ago] {'param_1': 7}
2025-03-13 20:13:55,840 DEBUG: Query parameters: task_type=User Story, exclude_task_id=395, search_term=, project_id=None, limit=30, page=1
2025-03-13 20:13:55,842 DEBUG: Query parameters: task_type=User Story, exclude_task_id=395, search_term=, project_id=None, limit=30, page=1
2025-03-13 20:13:55,845 INFO: BEGIN (implicit)
2025-03-13 20:13:55,847 INFO: BEGIN (implicit)
2025-03-13 20:13:55,850 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:13:55,859 INFO: [cached since 9104s ago] {'param_1': 1}
2025-03-13 20:13:55,857 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:13:55,858 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:13:55,857 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:13:55,860 INFO: [cached since 9104s ago] {'param_1': 7}
2025-03-13 20:13:55,860 INFO: [cached since 9101s ago] {'pk_1': 395}
2025-03-13 20:13:55,860 INFO: [cached since 9101s ago] {'pk_1': 395}
2025-03-13 20:13:55,861 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:13:55,872 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:13:55,907 INFO: [cached since 9104s ago] {'param_1': 1}
2025-03-13 20:13:55,894 INFO: [cached since 9104s ago] {'param_1': 2}
2025-03-13 20:13:55,909 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 395, 'task_type': ['User Story']}
2025-03-13 20:13:55,928 INFO: Validating hierarchy for Task N/A
2025-03-13 20:13:55,929 INFO: Determining valid parent types for task_type: User Story
2025-03-13 20:13:55,915 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:13:55,909 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 395, 'task_type': ['User Story']}
2025-03-13 20:13:55,912 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:13:55,932 INFO: [cached since 9104s ago] {'param_1': 2}
2025-03-13 20:13:55,931 INFO: [cached since 9104s ago] {'param_1': 3}
2025-03-13 20:13:55,931 INFO: Validating hierarchy for Task N/A
2025-03-13 20:13:55,930 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 395, 'task_type': ['Epic']}
2025-03-13 20:13:55,937 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:13:55,944 INFO: [cached since 9104s ago] {'param_1': 3}
2025-03-13 20:13:55,952 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-13 20:13:55,937 INFO: Determining valid parent types for task_type: User Story
2025-03-13 20:13:55,937 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:13:55,954 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:13:55,956 INFO: [cached since 9104s ago] {'param_1': 4}
2025-03-13 20:13:55,955 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 395, 'task_type': ['Epic']}
2025-03-13 20:13:55,956 INFO: [cached since 9104s ago] {'param_1': 4}
2025-03-13 20:13:55,955 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-13 20:13:55,963 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:13:55,963 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-13 20:13:55,964 INFO: [cached since 8887s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-13 20:13:55,965 INFO: [cached since 9104s ago] {'param_1': 5}
2025-03-13 20:13:55,973 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-13 20:13:55,977 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:13:55,978 INFO: [cached since 8887s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-13 20:13:55,978 INFO: [cached since 9104s ago] {'param_1': 5}
2025-03-13 20:13:55,981 INFO: ROLLBACK
2025-03-13 20:13:55,983 DEBUG: Tasks returned: [{'id': 430, 'name': 'No Epic', 'task_type': 'Epic', 'is_parent': False}, {'id': 393, 'name': 'List of ideas for new features, parameters to add', 'task_type': 'Epic', 'is_parent': False}, {'id': 327, 'name': '[UNIQUE feature] -\xa0Epic - AI-Powered PBI Refinement System', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 456, 'name': 'Search in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okr´s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notification system', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 459, 'name': '[RESEARCH] - Step 1: Mapping out what each file does', 'task_type': 'Epic', 'is_parent': False}, {'id': 432, 'name': 'Roadmap view', 'task_type': 'Epic', 'is_parent': False}, {'id': 392, 'name': 'UI / UX Improvements', 'task_type': 'Epic', 'is_parent': False}, {'id': 465, 'name': 'Building from Scratch vs.\xa0Replicating Each Feature', 'task_type': 'Epic', 'is_parent': False}, {'id': 424, 'name': '[ISSUES] - Current issues/bugs', 'task_type': 'Epic', 'is_parent': False}, {'id': 460, 'name': '[PLANNING] - Step 2: Architecture & Migration Planning', 'task_type': 'Epic', 'is_parent': False}, {'id': 462, 'name': '[MIGRATION] - high-level roadmap Step 1 - 7', 'task_type': 'Epic', 'is_parent': False}]
2025-03-13 20:13:55,988 DEBUG: Tasks returned: [{'id': 430, 'name': 'No Epic', 'task_type': 'Epic', 'is_parent': False}, {'id': 393, 'name': 'List of ideas for new features, parameters to add', 'task_type': 'Epic', 'is_parent': False}, {'id': 327, 'name': '[UNIQUE feature] -\xa0Epic - AI-Powered PBI Refinement System', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 456, 'name': 'Search in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okr´s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notification system', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 459, 'name': '[RESEARCH] - Step 1: Mapping out what each file does', 'task_type': 'Epic', 'is_parent': False}, {'id': 432, 'name': 'Roadmap view', 'task_type': 'Epic', 'is_parent': False}, {'id': 392, 'name': 'UI / UX Improvements', 'task_type': 'Epic', 'is_parent': False}, {'id': 465, 'name': 'Building from Scratch vs.\xa0Replicating Each Feature', 'task_type': 'Epic', 'is_parent': False}, {'id': 424, 'name': '[ISSUES] - Current issues/bugs', 'task_type': 'Epic', 'is_parent': False}, {'id': 460, 'name': '[PLANNING] - Step 2: Architecture & Migration Planning', 'task_type': 'Epic', 'is_parent': False}, {'id': 462, 'name': '[MIGRATION] - high-level roadmap Step 1 - 7', 'task_type': 'Epic', 'is_parent': False}]
2025-03-13 20:13:55,988 INFO: 127.0.0.1 - - [13/Mar/2025 20:13:55] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:13:55,990 INFO: ROLLBACK
2025-03-13 20:13:55,989 INFO: ROLLBACK
2025-03-13 20:13:55,992 INFO: 127.0.0.1 - - [13/Mar/2025 20:13:55] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:13:55,993 INFO: 127.0.0.1 - - [13/Mar/2025 20:13:55] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=395&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:13:55,993 INFO: ROLLBACK
2025-03-13 20:13:56,008 INFO: 127.0.0.1 - - [13/Mar/2025 20:13:56] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=395&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:15:08,367 INFO: 127.0.0.1 - - [13/Mar/2025 20:15:08] "GET /socket.io/?EIO=4&transport=websocket&sid=-dFV7ombBEuXYHgYAAA6 HTTP/1.1" 200 -
2025-03-13 20:15:09,153 INFO: 127.0.0.1 - - [13/Mar/2025 20:15:09] "GET /socket.io/?EIO=4&transport=polling&t=qav8vck6 HTTP/1.1" 200 -
2025-03-13 20:15:09,185 INFO: BEGIN (implicit)
2025-03-13 20:15:09,188 INFO: BEGIN (implicit)
2025-03-13 20:15:09,189 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:15:09,197 INFO: [cached since 9177s ago] {}
2025-03-13 20:15:09,192 INFO: BEGIN (implicit)
2025-03-13 20:15:09,191 INFO: Entering list_tasks_json route...
2025-03-13 20:15:09,195 INFO: 127.0.0.1 - - [13/Mar/2025 20:15:09] "POST /socket.io/?EIO=4&transport=polling&t=qavav39l&sid=D6_5pqyG4MEX5c2CAAA8 HTTP/1.1" 200 -
2025-03-13 20:15:09,196 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 20:15:09,223 INFO: [cached since 9177s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 20:15:09,202 INFO: 127.0.0.1 - - [13/Mar/2025 20:15:09] "GET /socket.io/?EIO=4&transport=polling&t=qavaw2ww&sid=D6_5pqyG4MEX5c2CAAA8 HTTP/1.1" 200 -
2025-03-13 20:15:09,219 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:15:09,243 INFO: [cached since 9177s ago] {'param_1': 1}
2025-03-13 20:15:09,207 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 20:15:09,242 INFO: ROLLBACK
2025-03-13 20:15:09,222 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 20:15:09,249 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 20:15:09,253 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 20:15:09,245 INFO: [cached since 9177s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 20:15:09,256 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:15:09,305 INFO: [cached since 9177s ago] {'param_1': 2}
2025-03-13 20:15:09,374 INFO: BEGIN (implicit)
2025-03-13 20:15:09,390 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 20:15:09,432 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:15:09,527 INFO: [cached since 9177s ago] {'param_1': 3}
2025-03-13 20:15:09,571 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 20:15:09,571 INFO: [cached since 9177s ago] {}
2025-03-13 20:15:09,590 INFO: ROLLBACK
2025-03-13 20:15:09,591 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:15:09,592 INFO: [cached since 9177s ago] {'param_1': 4}
2025-03-13 20:15:09,592 INFO: 127.0.0.1 - - [13/Mar/2025 20:15:09] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 20:15:09,604 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:15:09,604 INFO: 127.0.0.1 - - [13/Mar/2025 20:15:09] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 20:15:09,446 INFO: [cached since 9177s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 20:15:09,604 INFO: [cached since 9177s ago] {'param_1': 5}
2025-03-13 20:15:09,615 INFO: ROLLBACK
2025-03-13 20:15:09,622 INFO: BEGIN (implicit)
2025-03-13 20:15:09,626 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:15:09,671 INFO: [cached since 9177s ago] {'pk_1': 19}
2025-03-13 20:15:09,652 INFO: 127.0.0.1 - - [13/Mar/2025 20:15:09] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 20:15:09,697 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:15:09,698 INFO: [cached since 9178s ago] {}
2025-03-13 20:15:09,716 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:15:09,716 INFO: [cached since 9177s ago] {'param_1': 19}
2025-03-13 20:15:09,729 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:15:09,729 INFO: [cached since 9178s ago] {'param_1': 1}
2025-03-13 20:15:09,732 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:15:09,733 INFO: [cached since 9178s ago] {'param_1': 2}
2025-03-13 20:15:09,736 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:15:09,737 INFO: [cached since 9178s ago] {'param_1': 3}
2025-03-13 20:15:09,738 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:15:09,738 INFO: [cached since 9178s ago] {'param_1': 4}
2025-03-13 20:15:09,739 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:15:09,739 INFO: [cached since 9178s ago] {'param_1': 5}
2025-03-13 20:15:09,741 INFO: ROLLBACK
2025-03-13 20:15:09,741 INFO: 127.0.0.1 - - [13/Mar/2025 20:15:09] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:15:09,825 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 20:15:09,825 INFO: [cached since 9177s ago] {}
2025-03-13 20:15:09,829 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 20:15:09,829 INFO: [cached since 9177s ago] {}
2025-03-13 20:15:09,830 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 20:15:09,830 INFO: [cached since 9177s ago] {}
2025-03-13 20:15:09,837 INFO: ROLLBACK
2025-03-13 20:15:09,838 INFO: 127.0.0.1 - - [13/Mar/2025 20:15:09] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 20:15:19,601 INFO: Fetching task details for Task ID 395.
2025-03-13 20:15:19,602 INFO: Fetching task with ID 395.
2025-03-13 20:15:19,611 INFO: BEGIN (implicit)
2025-03-13 20:15:19,617 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:15:19,618 INFO: [cached since 9185s ago] {'pk_1': 395}
2025-03-13 20:15:19,626 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x10e9a9a30>, 'epic_priority': None, 'project_id': 7, 'id': 395, 'is_archived': False, 'contributor_id': 5, 'name': 'Side menu', 'completed': False, 'estimate_type': 'story_points', 'sort_order': 2, 'story_points': 0, 'completed_date': None, 'description': '<ul><li><p>Settings</p></li><li><p>Contributors</p></li><li><p>Company</p><ul><li><p>Goals</p><ul><li><p>OKR´s</p></li></ul></li><li><p>Sales</p></li><li><p>Financial (Rescricted access, (Super admin)</p></li><li><p>Market position</p></li><li><p>Market analysis</p></li><li><p>User metrics</p></li></ul></li><li><p>Projects</p></li><li><p></p></li></ul>', 'status': 'In Progress', 'time_estimate': None, 'parent_id': None, 'created_at': datetime.datetime(2025, 3, 5, 7, 43, 51, 220532), 'task_type': 'User Story', 'updated_at': datetime.datetime(2025, 3, 13, 13, 49, 27, 425658), 'priority': None}
2025-03-13 20:15:19,630 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:15:19,630 INFO: [cached since 9185s ago] {'pk_1': 7}
2025-03-13 20:15:19,635 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-13 20:15:19,635 INFO: [cached since 9185s ago] {'pk_1': 5}
2025-03-13 20:15:19,636 INFO: Task ID 395 fetched with parent ID: None
2025-03-13 20:15:19,636 INFO: Task with ID 395 fetched successfully.
2025-03-13 20:15:19,636 DEBUG: Fetched Task Data: {'id': 395, 'name': 'Side menu', 'description': '<ul><li><p>Settings</p></li><li><p>Contributors</p></li><li><p>Company</p><ul><li><p>Goals</p><ul><li><p>OKR´s</p></li></ul></li><li><p>Sales</p></li><li><p>Financial (Rescricted access, (Super admin)</p></li><li><p>Market position</p></li><li><p>Market analysis</p></li><li><p>User metrics</p></li></ul></li><li><p>Projects</p></li><li><p></p></li></ul>', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'estimate_type': 'story_points', 'estimate': 0, 'status': 'In Progress', 'sort_order': 2, 'created_at': '2025-03-05T07:43:51.220532', 'updated_at': '2025-03-13T13:49:27.425658', 'contributor_name': 'Fredrik Cederborg', 'parent': None}
2025-03-13 20:15:19,636 INFO: Task details fetched successfully for Task ID 395.
2025-03-13 20:15:19,638 INFO: ROLLBACK
2025-03-13 20:15:19,640 INFO: 127.0.0.1 - - [13/Mar/2025 20:15:19] "GET /api/tasks/395 HTTP/1.1" 200 -
2025-03-13 20:15:19,845 INFO: 127.0.0.1 - - [13/Mar/2025 20:15:19] "OPTIONS /tasks/available_tasks?task_type=User%20Story&exclude_task_id=395&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:15:19,847 INFO: 127.0.0.1 - - [13/Mar/2025 20:15:19] "OPTIONS /tasks/available_tasks?task_type=User%20Story&exclude_task_id=395&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:15:19,850 INFO: BEGIN (implicit)
2025-03-13 20:15:19,854 INFO: BEGIN (implicit)
2025-03-13 20:15:19,855 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:15:19,859 INFO: Entering available_tasks route...
2025-03-13 20:15:19,900 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:15:19,902 INFO: [cached since 9188s ago] {'pk_1': 7}
2025-03-13 20:15:19,903 DEBUG: Query parameters: task_type=User Story, exclude_task_id=395, search_term=, project_id=None, limit=30, page=1
2025-03-13 20:15:19,904 INFO: Entering available_tasks route...
2025-03-13 20:15:19,905 INFO: [cached since 9188s ago] {'pk_1': 7}
2025-03-13 20:15:19,907 INFO: BEGIN (implicit)
2025-03-13 20:15:19,909 DEBUG: Query parameters: task_type=User Story, exclude_task_id=395, search_term=, project_id=None, limit=30, page=1
2025-03-13 20:15:19,910 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:15:19,920 INFO: [cached since 9185s ago] {'pk_1': 395}
2025-03-13 20:15:19,919 INFO: BEGIN (implicit)
2025-03-13 20:15:19,921 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:15:19,922 INFO: [cached since 9185s ago] {'pk_1': 395}
2025-03-13 20:15:19,937 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:15:19,937 INFO: [cached since 9188s ago] {}
2025-03-13 20:15:19,937 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 395, 'task_type': ['User Story']}
2025-03-13 20:15:19,938 INFO: Validating hierarchy for Task N/A
2025-03-13 20:15:19,938 INFO: Determining valid parent types for task_type: User Story
2025-03-13 20:15:19,941 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 395, 'task_type': ['Epic']}
2025-03-13 20:15:19,942 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:15:19,952 INFO: [cached since 9188s ago] {'param_1': 7}
2025-03-13 20:15:19,943 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 395, 'task_type': ['User Story']}
2025-03-13 20:15:19,958 INFO: Validating hierarchy for Task N/A
2025-03-13 20:15:19,957 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:15:19,958 INFO: Determining valid parent types for task_type: User Story
2025-03-13 20:15:19,960 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:15:19,960 INFO: [cached since 9188s ago] {}
2025-03-13 20:15:19,956 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-13 20:15:19,960 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 395, 'task_type': ['Epic']}
2025-03-13 20:15:19,960 INFO: [cached since 9188s ago] {'param_1': 1}
2025-03-13 20:15:19,962 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-13 20:15:19,969 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:15:19,969 INFO: [cached since 9188s ago] {'param_1': 7}
2025-03-13 20:15:19,969 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-13 20:15:19,969 INFO: [cached since 8971s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-13 20:15:19,970 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-13 20:15:19,978 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:15:19,980 INFO: [cached since 8971s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-13 20:15:19,992 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:15:20,004 DEBUG: Tasks returned: [{'id': 430, 'name': 'No Epic', 'task_type': 'Epic', 'is_parent': False}, {'id': 393, 'name': 'List of ideas for new features, parameters to add', 'task_type': 'Epic', 'is_parent': False}, {'id': 327, 'name': '[UNIQUE feature] -\xa0Epic - AI-Powered PBI Refinement System', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 456, 'name': 'Search in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okr´s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notification system', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 459, 'name': '[RESEARCH] - Step 1: Mapping out what each file does', 'task_type': 'Epic', 'is_parent': False}, {'id': 432, 'name': 'Roadmap view', 'task_type': 'Epic', 'is_parent': False}, {'id': 392, 'name': 'UI / UX Improvements', 'task_type': 'Epic', 'is_parent': False}, {'id': 465, 'name': 'Building from Scratch vs.\xa0Replicating Each Feature', 'task_type': 'Epic', 'is_parent': False}, {'id': 424, 'name': '[ISSUES] - Current issues/bugs', 'task_type': 'Epic', 'is_parent': False}, {'id': 460, 'name': '[PLANNING] - Step 2: Architecture & Migration Planning', 'task_type': 'Epic', 'is_parent': False}, {'id': 462, 'name': '[MIGRATION] - high-level roadmap Step 1 - 7', 'task_type': 'Epic', 'is_parent': False}]
2025-03-13 20:15:20,007 DEBUG: Tasks returned: [{'id': 430, 'name': 'No Epic', 'task_type': 'Epic', 'is_parent': False}, {'id': 393, 'name': 'List of ideas for new features, parameters to add', 'task_type': 'Epic', 'is_parent': False}, {'id': 327, 'name': '[UNIQUE feature] -\xa0Epic - AI-Powered PBI Refinement System', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 456, 'name': 'Search in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okr´s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notification system', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 459, 'name': '[RESEARCH] - Step 1: Mapping out what each file does', 'task_type': 'Epic', 'is_parent': False}, {'id': 432, 'name': 'Roadmap view', 'task_type': 'Epic', 'is_parent': False}, {'id': 392, 'name': 'UI / UX Improvements', 'task_type': 'Epic', 'is_parent': False}, {'id': 465, 'name': 'Building from Scratch vs.\xa0Replicating Each Feature', 'task_type': 'Epic', 'is_parent': False}, {'id': 424, 'name': '[ISSUES] - Current issues/bugs', 'task_type': 'Epic', 'is_parent': False}, {'id': 460, 'name': '[PLANNING] - Step 2: Architecture & Migration Planning', 'task_type': 'Epic', 'is_parent': False}, {'id': 462, 'name': '[MIGRATION] - high-level roadmap Step 1 - 7', 'task_type': 'Epic', 'is_parent': False}]
2025-03-13 20:15:20,007 INFO: [cached since 9188s ago] {'param_1': 2}
2025-03-13 20:15:20,012 INFO: ROLLBACK
2025-03-13 20:15:20,013 INFO: [cached since 9188s ago] {'param_1': 1}
2025-03-13 20:15:20,018 INFO: 127.0.0.1 - - [13/Mar/2025 20:15:20] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=395&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:15:20,135 INFO: ROLLBACK
2025-03-13 20:15:20,210 INFO: 127.0.0.1 - - [13/Mar/2025 20:15:20] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=395&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:15:20,216 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:15:20,220 INFO: [cached since 9188s ago] {'param_1': 3}
2025-03-13 20:15:20,225 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:15:20,253 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:15:20,254 INFO: [cached since 9188s ago] {'param_1': 2}
2025-03-13 20:15:20,256 INFO: [cached since 9188s ago] {'param_1': 4}
2025-03-13 20:15:20,291 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:15:20,292 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:15:20,292 INFO: [cached since 9188s ago] {'param_1': 5}
2025-03-13 20:15:20,292 INFO: [cached since 9188s ago] {'param_1': 3}
2025-03-13 20:15:20,296 INFO: ROLLBACK
2025-03-13 20:15:20,310 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:15:20,318 INFO: 127.0.0.1 - - [13/Mar/2025 20:15:20] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:15:20,322 INFO: [cached since 9188s ago] {'param_1': 4}
2025-03-13 20:15:20,338 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:15:20,338 INFO: [cached since 9188s ago] {'param_1': 5}
2025-03-13 20:15:20,355 INFO: ROLLBACK
2025-03-13 20:15:20,356 INFO: 127.0.0.1 - - [13/Mar/2025 20:15:20] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:17:42,351 INFO: 127.0.0.1 - - [13/Mar/2025 20:17:42] "GET /socket.io/?EIO=4&transport=websocket&sid=D6_5pqyG4MEX5c2CAAA8 HTTP/1.1" 200 -
2025-03-13 20:17:43,984 INFO: 127.0.0.1 - - [13/Mar/2025 20:17:43] "GET /socket.io/?EIO=4&transport=polling&t=qe6ll6cw HTTP/1.1" 200 -
2025-03-13 20:17:44,002 INFO: BEGIN (implicit)
2025-03-13 20:17:44,021 INFO: BEGIN (implicit)
2025-03-13 20:17:44,023 INFO: Entering list_tasks_json route...
2025-03-13 20:17:44,027 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:17:44,047 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 20:17:44,029 INFO: BEGIN (implicit)
2025-03-13 20:17:44,040 INFO: 127.0.0.1 - - [13/Mar/2025 20:17:44] "POST /socket.io/?EIO=4&transport=polling&t=qe6rr0sx&sid=8kPgP5xLpc7cJkEXAAA- HTTP/1.1" 200 -
2025-03-13 20:17:44,046 INFO: 127.0.0.1 - - [13/Mar/2025 20:17:44] "GET /socket.io/?EIO=4&transport=polling&t=qe6rszpn&sid=8kPgP5xLpc7cJkEXAAA- HTTP/1.1" 200 -
2025-03-13 20:17:44,048 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 20:17:44,049 INFO: [cached since 9332s ago] {}
2025-03-13 20:17:44,051 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 20:17:44,075 INFO: [cached since 9332s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 20:17:44,032 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 20:17:44,084 INFO: [cached since 9332s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 20:17:44,078 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:17:44,084 INFO: [cached since 9332s ago] {'param_1': 1}
2025-03-13 20:17:44,081 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 20:17:44,083 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 20:17:44,093 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:17:44,098 INFO: BEGIN (implicit)
2025-03-13 20:17:44,101 INFO: [cached since 9332s ago] {}
2025-03-13 20:17:44,117 INFO: ROLLBACK
2025-03-13 20:17:44,117 INFO: ROLLBACK
2025-03-13 20:17:44,121 INFO: [cached since 9332s ago] {'param_1': 2}
2025-03-13 20:17:44,127 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 20:17:44,128 INFO: 127.0.0.1 - - [13/Mar/2025 20:17:44] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 20:17:44,135 INFO: [cached since 9332s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 20:17:44,136 INFO: 127.0.0.1 - - [13/Mar/2025 20:17:44] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 20:17:44,140 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:17:44,142 INFO: [cached since 9332s ago] {'param_1': 3}
2025-03-13 20:17:44,173 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:17:44,173 INFO: [cached since 9332s ago] {'param_1': 4}
2025-03-13 20:17:44,174 INFO: BEGIN (implicit)
2025-03-13 20:17:44,175 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:17:44,175 INFO: [cached since 9332s ago] {'pk_1': 19}
2025-03-13 20:17:44,180 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:17:44,181 INFO: [cached since 9332s ago] {'param_1': 5}
2025-03-13 20:17:44,183 INFO: ROLLBACK
2025-03-13 20:17:44,186 INFO: 127.0.0.1 - - [13/Mar/2025 20:17:44] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 20:17:44,189 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:17:44,190 INFO: [cached since 9332s ago] {}
2025-03-13 20:17:44,203 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:17:44,204 INFO: [cached since 9332s ago] {'param_1': 19}
2025-03-13 20:17:44,205 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:17:44,205 INFO: [cached since 9332s ago] {'param_1': 1}
2025-03-13 20:17:44,207 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:17:44,207 INFO: [cached since 9332s ago] {'param_1': 2}
2025-03-13 20:17:44,215 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:17:44,216 INFO: [cached since 9332s ago] {'param_1': 3}
2025-03-13 20:17:44,221 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:17:44,221 INFO: [cached since 9332s ago] {'param_1': 4}
2025-03-13 20:17:44,232 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:17:44,232 INFO: [cached since 9332s ago] {'param_1': 5}
2025-03-13 20:17:44,234 INFO: ROLLBACK
2025-03-13 20:17:44,235 INFO: 127.0.0.1 - - [13/Mar/2025 20:17:44] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:17:44,411 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 20:17:44,411 INFO: [cached since 9332s ago] {}
2025-03-13 20:17:44,415 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 20:17:44,416 INFO: [cached since 9332s ago] {}
2025-03-13 20:17:44,417 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 20:17:44,417 INFO: [cached since 9332s ago] {}
2025-03-13 20:17:44,423 INFO: ROLLBACK
2025-03-13 20:17:44,423 INFO: 127.0.0.1 - - [13/Mar/2025 20:17:44] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 20:17:47,388 INFO: Fetching task details for Task ID 395.
2025-03-13 20:17:47,389 INFO: Fetching task with ID 395.
2025-03-13 20:17:47,398 INFO: BEGIN (implicit)
2025-03-13 20:17:47,399 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:17:47,399 INFO: [cached since 9332s ago] {'pk_1': 395}
2025-03-13 20:17:47,403 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x10e9a80b0>, 'epic_priority': None, 'project_id': 7, 'id': 395, 'is_archived': False, 'contributor_id': 5, 'name': 'Side menu', 'completed': False, 'estimate_type': 'story_points', 'sort_order': 2, 'story_points': 0, 'completed_date': None, 'description': '<ul><li><p>Settings</p></li><li><p>Contributors</p></li><li><p>Company</p><ul><li><p>Goals</p><ul><li><p>OKR´s</p></li></ul></li><li><p>Sales</p></li><li><p>Financial (Rescricted access, (Super admin)</p></li><li><p>Market position</p></li><li><p>Market analysis</p></li><li><p>User metrics</p></li></ul></li><li><p>Projects</p></li><li><p></p></li></ul>', 'status': 'In Progress', 'time_estimate': None, 'parent_id': None, 'created_at': datetime.datetime(2025, 3, 5, 7, 43, 51, 220532), 'task_type': 'User Story', 'updated_at': datetime.datetime(2025, 3, 13, 13, 49, 27, 425658), 'priority': None}
2025-03-13 20:17:47,404 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:17:47,405 INFO: [cached since 9332s ago] {'pk_1': 7}
2025-03-13 20:17:47,406 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-13 20:17:47,406 INFO: [cached since 9332s ago] {'pk_1': 5}
2025-03-13 20:17:47,406 INFO: Task ID 395 fetched with parent ID: None
2025-03-13 20:17:47,406 INFO: Task with ID 395 fetched successfully.
2025-03-13 20:17:47,406 DEBUG: Fetched Task Data: {'id': 395, 'name': 'Side menu', 'description': '<ul><li><p>Settings</p></li><li><p>Contributors</p></li><li><p>Company</p><ul><li><p>Goals</p><ul><li><p>OKR´s</p></li></ul></li><li><p>Sales</p></li><li><p>Financial (Rescricted access, (Super admin)</p></li><li><p>Market position</p></li><li><p>Market analysis</p></li><li><p>User metrics</p></li></ul></li><li><p>Projects</p></li><li><p></p></li></ul>', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'estimate_type': 'story_points', 'estimate': 0, 'status': 'In Progress', 'sort_order': 2, 'created_at': '2025-03-05T07:43:51.220532', 'updated_at': '2025-03-13T13:49:27.425658', 'contributor_name': 'Fredrik Cederborg', 'parent': None}
2025-03-13 20:17:47,406 INFO: Task details fetched successfully for Task ID 395.
2025-03-13 20:17:47,407 INFO: ROLLBACK
2025-03-13 20:17:47,407 INFO: 127.0.0.1 - - [13/Mar/2025 20:17:47] "GET /api/tasks/395 HTTP/1.1" 200 -
2025-03-13 20:17:47,612 INFO: 127.0.0.1 - - [13/Mar/2025 20:17:47] "OPTIONS /tasks/available_tasks?task_type=User%20Story&exclude_task_id=395&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:17:47,615 INFO: BEGIN (implicit)
2025-03-13 20:17:47,617 INFO: Entering available_tasks route...
2025-03-13 20:17:47,624 DEBUG: Query parameters: task_type=User Story, exclude_task_id=395, search_term=, project_id=None, limit=30, page=1
2025-03-13 20:17:47,621 INFO: 127.0.0.1 - - [13/Mar/2025 20:17:47] "OPTIONS /tasks/available_tasks?task_type=User%20Story&exclude_task_id=395&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:17:47,623 INFO: BEGIN (implicit)
2025-03-13 20:17:47,619 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:17:47,625 INFO: BEGIN (implicit)
2025-03-13 20:17:47,627 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:17:47,627 INFO: [cached since 9335s ago] {'pk_1': 7}
2025-03-13 20:17:47,627 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:17:47,630 INFO: [cached since 9333s ago] {'pk_1': 395}
2025-03-13 20:17:47,630 INFO: Entering available_tasks route...
2025-03-13 20:17:47,628 INFO: [cached since 9335s ago] {'pk_1': 7}
2025-03-13 20:17:47,631 DEBUG: Query parameters: task_type=User Story, exclude_task_id=395, search_term=, project_id=None, limit=30, page=1
2025-03-13 20:17:47,634 INFO: BEGIN (implicit)
2025-03-13 20:17:47,635 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:17:47,635 INFO: [cached since 9333s ago] {'pk_1': 395}
2025-03-13 20:17:47,636 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:17:47,637 INFO: [cached since 9335s ago] {}
2025-03-13 20:17:47,638 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:17:47,639 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 395, 'task_type': ['User Story']}
2025-03-13 20:17:47,639 INFO: [cached since 9335s ago] {}
2025-03-13 20:17:47,639 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 395, 'task_type': ['User Story']}
2025-03-13 20:17:47,640 INFO: Validating hierarchy for Task N/A
2025-03-13 20:17:47,641 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:17:47,641 INFO: Validating hierarchy for Task N/A
2025-03-13 20:17:47,641 INFO: Determining valid parent types for task_type: User Story
2025-03-13 20:17:47,642 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:17:47,642 INFO: [cached since 9335s ago] {'param_1': 7}
2025-03-13 20:17:47,642 INFO: Determining valid parent types for task_type: User Story
2025-03-13 20:17:47,643 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 395, 'task_type': ['Epic']}
2025-03-13 20:17:47,644 INFO: [cached since 9335s ago] {'param_1': 7}
2025-03-13 20:17:47,647 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 395, 'task_type': ['Epic']}
2025-03-13 20:17:47,665 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:17:47,688 INFO: [cached since 9336s ago] {'param_1': 1}
2025-03-13 20:17:47,702 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-13 20:17:47,711 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:17:47,754 INFO: [cached since 9336s ago] {'param_1': 1}
2025-03-13 20:17:47,754 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-13 20:17:47,765 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:17:47,747 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-13 20:17:47,773 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-13 20:17:47,773 INFO: [cached since 9336s ago] {'param_1': 2}
2025-03-13 20:17:47,774 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:17:47,774 INFO: [cached since 9336s ago] {'param_1': 2}
2025-03-13 20:17:47,774 INFO: [cached since 9119s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-13 20:17:47,776 INFO: [cached since 9119s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-13 20:17:47,777 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:17:47,779 INFO: [cached since 9336s ago] {'param_1': 3}
2025-03-13 20:17:47,783 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:17:47,785 INFO: [cached since 9336s ago] {'param_1': 3}
2025-03-13 20:17:47,784 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:17:47,804 INFO: [cached since 9336s ago] {'param_1': 4}
2025-03-13 20:17:47,798 DEBUG: Tasks returned: [{'id': 430, 'name': 'No Epic', 'task_type': 'Epic', 'is_parent': False}, {'id': 393, 'name': 'List of ideas for new features, parameters to add', 'task_type': 'Epic', 'is_parent': False}, {'id': 327, 'name': '[UNIQUE feature] -\xa0Epic - AI-Powered PBI Refinement System', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 456, 'name': 'Search in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okr´s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notification system', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 459, 'name': '[RESEARCH] - Step 1: Mapping out what each file does', 'task_type': 'Epic', 'is_parent': False}, {'id': 432, 'name': 'Roadmap view', 'task_type': 'Epic', 'is_parent': False}, {'id': 392, 'name': 'UI / UX Improvements', 'task_type': 'Epic', 'is_parent': False}, {'id': 465, 'name': 'Building from Scratch vs.\xa0Replicating Each Feature', 'task_type': 'Epic', 'is_parent': False}, {'id': 424, 'name': '[ISSUES] - Current issues/bugs', 'task_type': 'Epic', 'is_parent': False}, {'id': 460, 'name': '[PLANNING] - Step 2: Architecture & Migration Planning', 'task_type': 'Epic', 'is_parent': False}, {'id': 462, 'name': '[MIGRATION] - high-level roadmap Step 1 - 7', 'task_type': 'Epic', 'is_parent': False}]
2025-03-13 20:17:47,802 DEBUG: Tasks returned: [{'id': 430, 'name': 'No Epic', 'task_type': 'Epic', 'is_parent': False}, {'id': 393, 'name': 'List of ideas for new features, parameters to add', 'task_type': 'Epic', 'is_parent': False}, {'id': 327, 'name': '[UNIQUE feature] -\xa0Epic - AI-Powered PBI Refinement System', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 456, 'name': 'Search in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okr´s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notification system', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 459, 'name': '[RESEARCH] - Step 1: Mapping out what each file does', 'task_type': 'Epic', 'is_parent': False}, {'id': 432, 'name': 'Roadmap view', 'task_type': 'Epic', 'is_parent': False}, {'id': 392, 'name': 'UI / UX Improvements', 'task_type': 'Epic', 'is_parent': False}, {'id': 465, 'name': 'Building from Scratch vs.\xa0Replicating Each Feature', 'task_type': 'Epic', 'is_parent': False}, {'id': 424, 'name': '[ISSUES] - Current issues/bugs', 'task_type': 'Epic', 'is_parent': False}, {'id': 460, 'name': '[PLANNING] - Step 2: Architecture & Migration Planning', 'task_type': 'Epic', 'is_parent': False}, {'id': 462, 'name': '[MIGRATION] - high-level roadmap Step 1 - 7', 'task_type': 'Epic', 'is_parent': False}]
2025-03-13 20:17:47,816 INFO: ROLLBACK
2025-03-13 20:17:47,818 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:17:47,821 INFO: [cached since 9336s ago] {'param_1': 5}
2025-03-13 20:17:47,819 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:17:47,820 INFO: ROLLBACK
2025-03-13 20:17:47,821 INFO: 127.0.0.1 - - [13/Mar/2025 20:17:47] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=395&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:17:47,821 INFO: [cached since 9336s ago] {'param_1': 4}
2025-03-13 20:17:47,822 INFO: ROLLBACK
2025-03-13 20:17:47,822 INFO: 127.0.0.1 - - [13/Mar/2025 20:17:47] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=395&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:17:47,824 INFO: 127.0.0.1 - - [13/Mar/2025 20:17:47] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:17:47,826 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:17:47,831 INFO: [cached since 9336s ago] {'param_1': 5}
2025-03-13 20:17:47,833 INFO: ROLLBACK
2025-03-13 20:17:47,837 INFO: 127.0.0.1 - - [13/Mar/2025 20:17:47] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:21:04,511 INFO: 127.0.0.1 - - [13/Mar/2025 20:21:04] "GET /socket.io/?EIO=4&transport=websocket&sid=8kPgP5xLpc7cJkEXAAA- HTTP/1.1" 200 -
2025-03-13 20:21:05,277 INFO: 127.0.0.1 - - [13/Mar/2025 20:21:05] "GET /socket.io/?EIO=4&transport=polling&t=qii1v4eo HTTP/1.1" 200 -
2025-03-13 20:21:05,378 INFO: BEGIN (implicit)
2025-03-13 20:21:05,380 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:21:05,381 INFO: [cached since 9533s ago] {}
2025-03-13 20:21:05,388 INFO: 127.0.0.1 - - [13/Mar/2025 20:21:05] "POST /socket.io/?EIO=4&transport=polling&t=qii4b4sm&sid=BVtX8OhV7EaW8GArAABA HTTP/1.1" 200 -
2025-03-13 20:21:05,401 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:21:05,409 INFO: [cached since 9533s ago] {'param_1': 1}
2025-03-13 20:21:05,412 INFO: BEGIN (implicit)
2025-03-13 20:21:05,420 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 20:21:05,420 INFO: [cached since 9533s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 20:21:05,413 INFO: Entering list_tasks_json route...
2025-03-13 20:21:05,442 INFO: ROLLBACK
2025-03-13 20:21:05,444 INFO: 127.0.0.1 - - [13/Mar/2025 20:21:05] "GET /socket.io/?EIO=4&transport=polling&t=qii4dfhl&sid=BVtX8OhV7EaW8GArAABA HTTP/1.1" 200 -
2025-03-13 20:21:05,444 INFO: BEGIN (implicit)
2025-03-13 20:21:05,445 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:21:05,455 INFO: [cached since 9533s ago] {'param_1': 2}
2025-03-13 20:21:05,454 INFO: 127.0.0.1 - - [13/Mar/2025 20:21:05] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 20:21:05,446 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 20:21:05,455 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 20:21:05,461 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 20:21:05,468 INFO: BEGIN (implicit)
2025-03-13 20:21:05,469 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:21:05,482 INFO: [cached since 9533s ago] {'param_1': 3}
2025-03-13 20:21:05,470 INFO: [cached since 9533s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 20:21:05,482 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:21:05,481 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 20:21:05,483 INFO: [cached since 9533s ago] {'pk_1': 19}
2025-03-13 20:21:05,497 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:21:05,499 INFO: BEGIN (implicit)
2025-03-13 20:21:05,505 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 20:21:05,506 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:21:05,506 INFO: [cached since 9533s ago] {'param_1': 4}
2025-03-13 20:21:05,508 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 20:21:05,508 INFO: [cached since 9533s ago] {}
2025-03-13 20:21:05,508 INFO: [cached since 9533s ago] {}
2025-03-13 20:21:05,509 INFO: [cached since 9533s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 20:21:05,510 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:21:05,510 INFO: [cached since 9533s ago] {'param_1': 5}
2025-03-13 20:21:05,511 INFO: ROLLBACK
2025-03-13 20:21:05,514 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:21:05,514 INFO: [cached since 9533s ago] {'param_1': 19}
2025-03-13 20:21:05,514 INFO: ROLLBACK
2025-03-13 20:21:05,514 INFO: 127.0.0.1 - - [13/Mar/2025 20:21:05] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 20:21:05,516 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:21:05,534 INFO: [cached since 9533s ago] {'param_1': 1}
2025-03-13 20:21:05,517 INFO: 127.0.0.1 - - [13/Mar/2025 20:21:05] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 20:21:05,542 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:21:05,543 INFO: [cached since 9533s ago] {'param_1': 2}
2025-03-13 20:21:05,549 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:21:05,549 INFO: [cached since 9533s ago] {'param_1': 3}
2025-03-13 20:21:05,551 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:21:05,552 INFO: [cached since 9533s ago] {'param_1': 4}
2025-03-13 20:21:05,554 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:21:05,555 INFO: [cached since 9533s ago] {'param_1': 5}
2025-03-13 20:21:05,557 INFO: ROLLBACK
2025-03-13 20:21:05,558 INFO: 127.0.0.1 - - [13/Mar/2025 20:21:05] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:21:05,660 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 20:21:05,661 INFO: [cached since 9533s ago] {}
2025-03-13 20:21:05,664 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 20:21:05,664 INFO: [cached since 9533s ago] {}
2025-03-13 20:21:05,665 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 20:21:05,665 INFO: [cached since 9533s ago] {}
2025-03-13 20:21:05,670 INFO: ROLLBACK
2025-03-13 20:21:05,670 INFO: 127.0.0.1 - - [13/Mar/2025 20:21:05] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 20:21:22,791 INFO: Fetching task details for Task ID 327.
2025-03-13 20:21:22,792 INFO: Fetching task with ID 327.
2025-03-13 20:21:22,797 INFO: BEGIN (implicit)
2025-03-13 20:21:22,800 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:21:22,800 INFO: [cached since 9548s ago] {'pk_1': 327}
2025-03-13 20:21:22,811 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x10e9a9a90>, 'epic_priority': None, 'project_id': 6, 'id': 327, 'is_archived': False, 'contributor_id': 5, 'name': '[UNIQUE feature] -\xa0Epic - AI-Powered PBI Refinement System', 'completed': False, 'estimate_type': 'story_points', 'sort_order': 1, 'story_points': 42, 'completed_date': None, 'description': '<h2><strong>_italic text_Description:&nbsp;</strong></h2><p><em>As a user,</em></p><p><em>I want to refine feature requests into structured PBIs with AI assistance</em></p><p><em>so that I can quickly generate well-defined Epics, User Stories, and Subtasks.</em></p><hr><p></p><p>AI assists in refining raw feature requests into</p><p>structured plans, generating PRDs, Epics, User Stories, Acceptance Criteria, and Edge Cases. AI also provides intelligent estimations based on historical data and improves accuracy over time.</p><p><br><strong>📌 Final Order of Development</strong></p><p></p><p>1️⃣ <strong>AI API Integration &amp; Security (402)</strong></p><p>2️⃣ <strong>AI-Driven Questioning System (398)</strong></p><p>3️⃣ <strong>AI-Generated PBIs with Inline Editing (399)</strong></p><p>4️⃣ <strong>Full-Page AI-Powered PBI Refinement UI (397)</strong></p><p>5️⃣ <strong>AI-Generated Questions Based on Technical Docs (401)</strong></p><p>6️⃣ <strong>AI-Driven Story Point Estimation (400)</strong></p><p></p><p></p><p><strong>📌 Why This Order?</strong></p><p></p><p>✅ <strong>Security First:</strong> Ensures safe API interactions before sending user data.</p><p>✅ <strong>Logical Progression:</strong> AI refines PBIs → Generates tasks → Provides accurate estimates.</p><p>✅ <strong>Minimizing Rework:</strong> No need to <strong>rebuild</strong> AI logic after UI changes.</p><p>✅ <strong>Incremental Value:</strong> Each completed step <strong>adds value</strong> without requiring the full system to be finished.</p><hr><p>## AI driven creation of Epics, User stories and Subtasks.<br><br>I have, on several occasions when we have discussed a new feature and outlined a high level plan asked you to create epics, user stories and subtasks for the feature. <br><br>You are very good at this and it saves a lot of time compared to writing them manually. <br><br>However, we could create a process of this and include some steps were we go through some exercises that will help increase the quality of the output. <br>I´m thinking about:<br><br>1. Check PBI´s against the list of key learnings &amp; takeaways for future development<br><br>After every session we do a retrospective where we summarize the session. One section of the summary is a list of key learnings &amp; takeaways for future development. Those should be appended to a complete list of key takeaways for future development.<br><br>Every time we create epics, user stories and subtasks for a new feature we should check them against this checklist of key learnings &amp; takeaways for future development. We can then include reminder notes about this in the tasks they are relevant for. This way we will reduce repeating mistakes, be aware of technical considerations we have to adhere to etc..<br><br>2. Maybe use frameworks like user story mapping<br><br>3. Any other ideas for increasing quality. <br><br>## Estimation:<br><br>I have also asked you to estimate the complexity of the tasks using story points. <br><br>### We have used this framework for estimation:<br><br>We estimate tasks using **story points** with the **Fibonacci scale** (1, 2, 3, 5, 8, 13, etc.) That allows us to gauge the **complexity, effort, and uncertainty** associated with each task.<br><br>GPT (You) will assess every feature based on:<br><br>1. **Complexity**: How difficult the task is (e.g., architecture, database relationships, etc.).<br>2. **Effort**: How much time and effort will be required to code, test, and debug.<br>3. **Uncertainty**: Any unknowns or potential challenges (e.g., interacting with new parts of the system, external factors).<br><br>### **Benchmarking**:<br><br>To give context to these estimates:<br><br>- **1-2 Points**: Minor changes like renaming variables, small bug fixes.<br>- **3-5 Points**: Moderate tasks, involving some new logic, minor database changes, and testing.<br>- **8+ Points**: More complex tasks, like introducing new models, changing relationships in the database, or modifying core app logic with potential unknowns.<br><br>### Typical output for a user story:<br><br>🟢 User Story 1: Implement Parent Task Dropdown in Task Modal<br>As a user, I want to assign or change a parent task directly from the task modal, so that I can organize my tasks efficiently.<br><br>✅ Acceptance Criteria:<br><br>A dropdown appears in the task modal, listing all valid parent tasks.<br>Prevents selection of circular dependencies.<br>Updates the parent task dynamically upon selection.<br>Displays correct hierarchy after updates.<br>📌 Estimation: 5 Story Points<br><br>Complexity: Moderate – Needs task filtering, validation logic, and UI integration.<br>Effort: Moderate – Requires API calls, handling UI state, and testing.<br>Uncertainty: Low – We understand the task relationships well.<br><br><br>This is all a part of a larger idea about how to streamline and improve the quality of the entire product development lifecycle and development process.<br><br>## MVP version<br>I´ve been trying to figure out what would be the most valuable step to start building a feature for.<br><br>I think it is a feature that will allow you (AI) to submit these PBI´s into the backlog of my project management tool and then be able to read them back from the tool.<br><br>So the first draft of the feature would be to create a function that can take a PBI and submit it to the db of the project management tool.<br><br>## Version 2:<br>Next step would be to create a function that can read the PBIs from the db and return them as a list.<br><br>## Version 3<br>To take the whole process of refining a simple feature idea or request into more detailed and actionable PBI´s and integrate it into the project management tool.<br><br>### This would involve the following requirements:<br>- It needs to be a guided process, not just an inline chat.<br>- Both the user and the AI should follow the process.<br><br>To be further discussed....<br>I have a documented ideas in this notion file:<br><a target="_blank" rel="noopener noreferrer" href="https://www.notion.so/lacunamedia/Automating-task-creation-in-autoagile-191979257fc08007a001c3c2dc0a773f?pvs=4">https://www.notion.so/lacunamedia/Automating-task-creation-in-autoagile-191979257fc08007a001c3c2dc0a773f?pvs=4</a><br><br>## The development process:<br>Generating code for the feature based on the PBI´s.<br>The process of you (AI) and me coding together is a process of it´s own that we are working on a plan for optimizing. <br>See separate document: \'optimizing_our_development_process.md\' <br><br><br><br>How can we automate the whole process of:<br><br>1. Create Epics, User stories and subtasks from a refined feature request.<br>2. Script them into the database of autoagile<br>3. Allow AI to read the tasks<br><br><br>This is a great initiative that will systematize and automate the process of turning feature ideas into well-structured PBIs (Epics, User Stories, and Subtasks). Below is a structured approach to refining and implementing this system.<br><br>📌 Summary of the Planned Process<br>We are aiming to automate the workflow of refining a feature request into actionable PBIs and integrating them directly into the project management tool. The long-term vision is to ensure quality, consistency, and efficiency in product development.<br><br>🚀 Proposed Steps for Automating AI-Driven PBI Creation<br>1️⃣ Create Epics, User Stories &amp; Subtasks from a Refined Feature Request<br>🔹 Step 1: Validate PBIs Against "Key Learnings &amp; Takeaways"<br><br>After every session, we capture Key Learnings &amp; Takeaways for future development.<br>When generating new PBIs, we cross-check them against this checklist.<br>If relevant, reminder notes are added to tasks (e.g., “Avoid X issue seen in past development”).<br>✅ Benefit: Prevent repeated mistakes, ensure technical consistency.<br><br>🔹 Step 2: Use Frameworks to Improve PBI Quality<br><br>User Story Mapping: Break down the feature based on user journeys.<br>Impact Mapping: Understand the business &amp; user impact.<br>Jobs-to-Be-Done (JTBD): Define tasks based on what the user is trying to achieve.<br>BDD (Behavior-Driven Development) Scenarios: Define Acceptance Criteria in a structured format.<br>✅ Benefit: Increases clarity, prioritization, and alignment with user goals.<br><br>🔹 Step 3: Automate AI-Driven PBI Generation<br><br>AI takes a high-level feature request and breaks it down into Epics, User Stories, and Subtasks.<br>AI adds relevant acceptance criteria and ensures no conflicting dependencies.<br>User can review &amp; refine before submitting to the backlog.<br>✅ Benefit: Reduces manual effort, ensures consistency.<br><br>2️⃣ Submit PBIs to the AutoAgile Database<br>🔹 Step 4: Create API for AI to Submit PBIs<br><br>A POST API endpoint will allow AI to write PBIs into the project management system.<br>AI will assign metadata (e.g., priority, estimated effort, dependencies).<br>✅ Benefit: Ensures a structured backlog instead of scattered notes.<br><br>3️⃣ Allow AI to Read and Retrieve PBIs<br>🔹 Step 5: Create API to Fetch PBIs<br><br>A GET API endpoint will allow AI to retrieve PBIs from the database.<br>This enables PBI iteration, tracking, and refinement.<br>✅ Benefit: AI can refine &amp; adjust PBIs dynamically over time.<br><br>4️⃣ Version 3: Full AI-Driven PBI Refinement Process<br>🔹 Step 6: Create a Guided Process for PBI Refinement Instead of an inline chat, we build a structured UI to guide both the user and AI in refining PBIs.<br><br>Step 1: User provides initial feature request.<br>Step 2: AI asks clarifying questions (e.g., “Is this a new feature or an improvement?”).<br>Step 3: AI generates Epics, User Stories &amp; Subtasks.<br>Step 4: AI applies learnings from past development.<br>Step 5: User reviews &amp; refines before finalizing.<br>Step 6: PBIs are submitted to the backlog.<br>✅ Benefit: Ensures high-quality PBIs while keeping the user in control.<br><br>🛠️ Technical Implementation Plan<br>Phase 1 (MVP)<br>✔ Backend:<br><br>Create a POST /api/pbis endpoint to submit PBIs.<br>Store PBIs in the AutoAgile database.<br>✔ Frontend:<br><br>Simple form UI for submitting PBIs.<br>Allow users to review &amp; edit before submission.<br>✔ AI Integration:<br><br>AI generates PBIs using structured templates.<br>AI checks against the Key Learnings &amp; Takeaways.<br>Phase 2 (API Retrieval)<br>✔ Backend:<br><br>Create GET /api/pbis to fetch PBIs.<br>Support filtering by status, priority, and dependencies.<br>✔ Frontend:<br><br>Display PBIs in the backlog.<br>Allow users to edit, refine &amp; iterate on PBIs.<br>Phase 3 (Full AI-Driven Workflow)<br>✔ Backend:<br><br>Implement AI-powered iterative refinement.<br>Store AI-generated clarifying questions &amp; user responses.<br>✔ Frontend:<br><br>Guided multi-step process for refining PBIs.<br>Interactive user review step before final submission.<br>✔ AI Integration:<br><br>AI actively asks clarifying questions before generating PBIs.<br>AI learns from past PBIs and Key Learnings to improve over time.<br>📌 Key Benefits of This System<br>✅ Automates repetitive work → AI breaks down features into PBIs.<br>✅ Ensures higher quality PBIs → AI cross-checks with Key Learnings.<br>✅ Prevents dependency issues → AI validates task relationships.<br>✅ Creates a structured backlog → PBIs are stored systematically.<br>✅ Streamlines estimation → AI assigns story points based on complexity.<br>✅ Saves developer time → Faster iteration &amp; execution of product features.<br><br>📌 Next Steps<br>🚀 Would you like to start with Phase 1 (Submitting PBIs to the database)?<br>Or do you want to explore UI/UX ideas for the guided process first?<br><br>You said:<br>Does this require an integration to for example OpenAI´s API or is it possible to create an Action in a custom GPT and when triggering that action the PBI´s are submitted to the db? <br>ChatGPT said:<br>It does not necessarily require OpenAI’s API integration if we use Custom GPT Actions. Here’s how both approaches would work:<br><br>1️⃣ Using Custom GPT Actions (No API Integration Needed)<br>✅ How It Works<br>Instead of calling an external API, we can define an Action in a Custom GPT that directly interacts with the database.<br><br>Trigger the Action<br><br>You (the user) initiate a request:<br>"Generate PBIs for the new feature and submit them to the backlog."<br>AI Generates PBIs<br><br>Based on the feature description, the AI structures Epics, User Stories, and Subtasks.<br>AI assigns story points, dependencies, and priority.<br>AI Executes the Action<br><br>The Custom GPT Action runs, submitting the generated PBIs directly into the project management tool’s database.<br>Confirmation &amp; Review<br><br>The system can return a confirmation message:<br>"PBIs have been submitted. Would you like to refine them further?"<br>✅ What’s Needed to Implement This?<br>Define a Custom GPT Action<br><br>The Action should be configured to execute a database query.<br>Example: "INSERT INTO pbis (title, description, type, priority, estimated_points) VALUES (...) "<br>Grant Secure Database Access<br><br>Custom GPT must be allowed to execute database operations securely.<br>We need a secure connection with proper authentication.<br>Ensure Query Execution is Reliable<br><br>Add error handling to prevent duplicate or incorrect entries.<br>Test &amp; Verify Data Submission<br><br>Run test cases to confirm PBIs are structured correctly in the backlog.<br>🔥 Pros of Using Custom GPT Actions<br>✅ No External API Required → Runs fully within the GPT model’s environment.<br>✅ Faster Development → No need for external API setup.<br>✅ Tighter Integration with AI → AI can validate &amp; refine PBIs before submission.<br>✅ More Secure → Data never leaves the controlled environment.<br><br>2️⃣ Using OpenAI’s API for External Integration<br>If you prefer a fully programmatic approach, you can call OpenAI’s API from your backend and integrate it with your project management tool.<br><br>✅ How It Works<br>Your backend sends a request to OpenAI’s API, asking it to generate PBIs.<br>OpenAI’s API returns structured PBIs (Epics, User Stories, Subtasks).<br>Your system validates the PBIs before inserting them into the database.<br>Your frontend retrieves and displays the PBIs in the backlog.<br>🔥 Pros of OpenAI’s API Approach<br>✅ More Customization → You control prompts, data structure, and validation.<br>✅ Can Run in the Background → Ideal for scheduled task automation.<br>✅ Scales Better → Works well for large teams &amp; real-time AI interactions.<br><br>🔷 Which Approach Should You Use?<br>🔹 If you want a fast, no-setup solution, go with Custom GPT Actions.<br>🔹 If you need more control, background processing, or external API calls, use OpenAI’s API.<br><br>🚀 Would you like help setting up a Custom GPT Action for submitting PBIs?<br><br>You said:<br>There is a price difference, right?<br>ChatGPT said:<br>Yes, there is a price difference between using Custom GPT Actions and OpenAI’s API integration. Here’s the breakdown:<br><br>💰 Cost of Using Custom GPT Actions<br>✅ Free (if using within ChatGPT Pro)<br>✅ No additional API costs<br>✅ No per-token billing<br><br>Why?<br>Custom GPT Actions run within ChatGPT’s existing infrastructure. OpenAI doesn’t charge per request for actions, but you must be on a ChatGPT Pro plan ($20/month).<br><br>However, if the Action connects to an external database or service that has costs (e.g., AWS, Firebase, Supabase, etc.), you’ll still need to pay for that separately.<br><br>💰 Cost of Using OpenAI’s API<br>❌ Pay-per-use pricing<br>✅ Costs depend on model + token usage<br><br>Current API Pricing (as of 2024)<br>Model Input (per 1K tokens) Output (per 1K tokens)<br>GPT-4-turbo $0.01 $0.03<br>GPT-4 $0.03 $0.06<br>GPT-3.5-turbo $0.0015 $0.002<br>Estimated API Cost for PBI Generation<br>If generating 5-10 PBIs at a time, a request might use 500-1000 tokens.<br>Cost per request: $0.005 - $0.02 (GPT-4-turbo)<br>If you generate PBIs 100 times per day:<br>GPT-4-turbo: ~$0.50 - $2/day<br>GPT-4: ~$1.50 - $6/day<br>GPT-3.5-turbo: ~$0.15 - $0.40/day<br>Additional Costs<br>Database storage: If using Firebase, AWS, or another DB, there may be small storage costs.<br>API Requests: If your project management tool has an API, it may have rate limits or extra costs.<br>Which is Cheaper?<br>If you already use ChatGPT Pro → Custom GPT Actions = FREE<br>No additional API costs.<br>Ideal if you just need to generate &amp; submit PBIs without extra complexity.<br>If you need external processing → OpenAI API = Paid (but scalable)<br>More expensive, but fully customizable.<br>Better if you want background processing, bulk PBI creation, or integrations.<br>🚀 Best Recommendation?<br>If you’re cost-conscious and just need basic PBI creation &amp; submission, start with Custom GPT Actions (free).<br><br>If you later need scalability, automation, and background AI processing, you can move to OpenAI’s API.<br><br>Would you like help defining a Custom GPT Action for submitting PBIs? 🔥<br><br>You said:<br>I want to do both but start with the API integration because I think that is what will evolve into a valuable feature with the possibilities for controlling the process and integrating it into the UI of our project management app.<br>It would be great to have the GPT action a backup for keeping costs down.<br>ChatGPT said:<br>That sounds like a great strategy! 🎯<br>By starting with API integration, you can fully control the process, customize it to fit the UI of your project management app, and enable deeper automation.<br><br>Later, implementing a Custom GPT Action as a backup will allow on-demand PBI creation while keeping costs down for smaller use cases.<br><br>✅ Step-by-Step Plan for API Integration<br>We\'ll start by integrating OpenAI’s API to generate PBIs and store them in your project management tool’s database.<br><br>Phase 1: API-Based PBI Submission<br>1️⃣ Define API Endpoints<br><br>POST /api/pbis → Accepts AI-generated PBIs and stores them in the database.<br>GET /api/pbis → Retrieves PBIs from the backlog.<br>2️⃣ Implement AI-Powered PBI Generation<br><br>Use OpenAI’s API (GPT-4-turbo) to generate Epics, User Stories, and Subtasks.<br>Apply Key Learnings &amp; Takeaways from past development.<br>3️⃣ Store PBIs in the Project Management Tool<br><br>Save PBIs in the AutoAgile database.<br>Attach metadata like priority, dependencies, and estimation.<br>4️⃣ Expose PBIs in the UI<br><br>Display PBIs in the backlog inside your Next.js app.<br>Allow user review &amp; refinement before finalizing.<br>Phase 2: Backup Solution - Custom GPT Action<br>If API costs become high, allow users to manually trigger a GPT Action to generate PBIs without API calls.<br><br>1️⃣ Create a Custom GPT Action<br><br>Action: generate_pbIs(feature_description: str) → JSON<br>Returns structured PBIs to be manually entered into the backlog.<br>2️⃣ Integrate with Your UI<br><br>Offer an option like "Generate PBIs via GPT" in the UI.<br>If API usage is high, fallback to GPT Action instead of API calls.<br>🚀 Next Steps<br>Would you like to:<br>1️⃣ Start defining the OpenAI API integration (set up endpoints, API calls)?<br>2️⃣ Set up the Custom GPT Action as a backup?<br>3️⃣ Plan both in parallel and create a roadmap?<br><br>You said:<br>Not yet. First:<br>1. I want us to discuss how it would be inplemented in the UI and provide the optimal UX.<br>2. Could we benefit from drafting the architecture, sequence diagrams, user flows?<br>3. Before we start coding, I want you to create PBI´s for the project and estimate complexity.<br>4. Create psql commands for creating the PBI´s.<br><br>Lets go through these steps one by one.<br><br>ChatGPT said:<br>That’s a solid structured approach! 🚀<br>By focusing on UX, architecture, planning, and PBI creation before coding, we’ll ensure a smooth implementation with fewer rewrites.<br><br>📌 Step 1: UI &amp; UX Discussion<br>Before implementing API-based PBI generation, we need to design how users will interact with it inside the Project Management System (PMS).<br><br>🎯 Key UX Considerations<br><br>✅ Where Should PBI Creation Happen?<br><br>Inside the Backlog View? (Best for structured planning)<br>Inside a Feature Request modal? (Good for quick task creation)<br>As a standalone "AI Assistant" panel? (Best for guided AI interaction)<br><br>✅ What Input Does the AI Need?<br><br>- Free-text Feature Description (User types in an idea)<br><br>- Structured Input (e.g., dropdowns for project, priority, complexity)<br><br>- Existing Tasks as Context (AI refines based on project backlog)<br><br>If we would start the process by asking the user to select item(s) from the backlog or create a new PBI, then we could keep the original feature idea/request and have the entire history saved.<br><br>I think the process should run the following way:<br>1. The user selects an item from the backlog or creates a new one.<br>2. AI asks a series of questions to gather more information about the feature, the goals, what problem it will solve, the expected outcome, etc..<br>Also, I think the AI would benefit from having access to the project’s history, the project’s goals, the project’s vision, the technical documentation.<br>We have to discuss what questions the AI should ask and how the user should input the answers.<br><br>✅ How Should the Output Be Handled?<br>Yes - Inline Editing: User sees generated PBIs and edits them before submission.<br>No - One-Click Submit: AI submits PBIs automatically.<br>Yes - Step-by-Step Refinement: AI asks clarifying questions before finalizing.<br><br>✅ Should the User See a Live Preview?<br>Yes → A real-time preview of the PBIs as the AI generates them.<br>No → AI generates them first, then the user reviews before submission.<br><br>✅ How Will Users Trigger AI PBI Generation?<br>Yes - Button → "Generate PBIs from Feature Request"<br>Maybe - Shortcut Command → /generate_pbi &lt;feature&gt;<br>No - Automated Suggestion → When a new feature is created, AI offers to generate PBIs<br><br>Instead of 3: Automated Suggestion → When a new feature is created, AI offers to help with refining the feature request and informs the user about the possibility of generating PBIs and what the feature request should include to make it easier for the AI to generate relevant PBIs.<br><br><br>📌 Suggested UI Flows<br><br>## Option 1: AI-Powered Backlog View<br>💡 Best for Teams Who Plan in Sprints 1️⃣ User navigates to the Backlog View.<br>2️⃣ Clicks “+ AI Generate PBIs” → A modal opens.<br>3️⃣ User inputs a feature description and selects project, priority, estimation strategy.<br>4. AI asks clarifying questions about the feature.<br>5. AI generates Epics, User Stories, and Subtasks.<br>6. User reviews and edits before submitting.<br><br>✅ Pros<br><br>Integrated into existing planning workflow.<br>Structured &amp; controlled task creation.<br>❌ Cons<br><br>Requires users to be inside the backlog to use AI.<br><br>## Option 2: Feature Request Modal with AI Assistance<br>💡 Best for Users Adding New Ideas 1️⃣ User opens Feature Request modal.<br>2️⃣ Enters high-level feature description.<br>3️⃣ Clicks “Generate PBIs” → AI suggests tasks.<br>4️⃣ User reviews, edits, and approves.<br>5️⃣ PBIs are pushed to the backlog.<br><br>✅ Pros<br><br>Works naturally when defining new features.<br>Faster workflow for brainstorming ideas.<br>❌ Cons<br><br>Might lack full backlog context when generating PBIs.<br><br>## Option 3: Dedicated AI Assistant Panel<br>💡 Best for Advanced AI-Driven Planning 1️⃣ User opens an “AI Assistant” panel.<br>2️⃣ AI asks clarifying questions about the feature.<br>3️⃣ AI generates Epics, User Stories, and Subtasks dynamically.<br>4️⃣ User modifies or approves PBIs.<br>5️⃣ PBIs are automatically pushed to the backlog.<br><br>✅ Pros<br>More structured, guided PBI refinement.<br>AI helps users refine vague ideas into structured tasks.<br><br>❌ Cons<br>More complex UI to implement.<br><br>I´m leaning towards option 1 with the added step 4. AI asks clarifying questions about the feature.<br><br>🚀 What’s Next?<br>1️⃣ Which UI flow do you prefer (Backlog, Feature Request Modal, AI Assistant)?<br>2️⃣ Would you like wireframes/mockups before moving to architecture diagrams?<br><br>See my answers in the list above:<br><br>That’s a fantastic refinement of the process! The form-based approach for AI clarifying questions makes a lot of sense. It improves UX efficiency and keeps the process structured, ensuring users don\'t feel overwhelmed by an open-ended conversation.<br><br>📌 Finalized UI/UX Approach<br>✅ Option 1: AI-Powered Backlog View (with Clarifying Questions &amp; Form Input)<br>💡 Best for Teams Who Plan in Sprints 1️⃣ User selects an existing item from the backlog or creates a new feature request.<br>2️⃣ Clicks “+ AI Generate PBIs” → A modal opens.<br>3️⃣ User inputs a feature description and selects project, priority, estimation strategy.<br>4️⃣ AI presents clarifying questions in a form UI (instead of free-text chat).<br>5️⃣ User fills in answers in structured fields → This data is stored for future reference.<br>6️⃣ AI generates Epics, User Stories, and Subtasks dynamically.<br>7️⃣ User reviews and edits before submitting PBIs to the backlog.<br><br>🚀 Why This Works Best<br>✅ Keeps the original feature request history → Tracks context properly.<br>✅ AI doesn’t rely on unstructured responses → User inputs structured answers via the form.<br>✅ Faster, structured refinement process → Reduces ambiguity in AI-generated PBIs.<br>✅ Guided yet flexible → AI only asks for details when necessary (conditional logic in the form).<br>✅ More efficient user experience → No need to manually structure long text responses.<br><br>📌 Next Steps<br>1️⃣ Define the AI Clarifying Questions for the Form<br>We need to list the essential clarifying questions AI should ask. Some of these will be always required, and others will be conditional (depending on the feature type, project, etc.).<br><br>Example questions:<br><br>What problem does this feature solve? (Always required)<br>Who is the primary user? (Required for user-facing features)<br>What is the expected outcome? (Always required)<br>Are there existing related tasks or dependencies? (Optional)<br>Does this feature impact security or performance? (Conditional: Only if related to infrastructure)<br>Would you like me to draft a complete list of questions based on best practices?<br><br>2️⃣ Create Wireframes for the Modal<br>Since we’re using a form-based approach instead of a chat-like UI, we should create wireframes for:<br><br>The initial “AI Generate PBIs” modal<br>The form layout for clarifying questions<br>The final PBI preview screen<br>Do you want Figma wireframes or a quick text-based UI flow first?<br><br>3️⃣ Technical Considerations<br>Would you like the AI-generated clarifying questions to be:<br><br>Fixed (predefined in the UI)? → Simpler, but less flexible.<br>Dynamically generated (AI decides what to ask)? → More flexible, but requires more logic.<br>🚀 Let’s finalize these details so we can move into architecture and implementation!<br><br><br>You said:<br>1. draft a complete list of questions based on best practices + what you consider being valuable to be able to provide the best quality PBI´s.<br><br>2. I think it should be a separate full page instead of a modal. <br>On that page user should be able to select a PBI from a dropdown combobox with search functionality.<br>(We are using headless UI combobox for the parent task selector)<br>From each PBI, the user should be able to click a button to open that PBI on the AI refinement page.<br><br>If you can provide figma wireframes that would be fantastic.<br><br>3. Let´s start with the fixed questions, and then maybe add dynamically generated if needed.<br>ChatGPT said:<br>🚀 Step 1: Complete List of AI Clarifying Questions for High-Quality PBIs<br>The goal is to ensure AI-generated PBIs are highly structured, relevant, and actionable. Below is a best-practice-based question framework that balances user intent, technical feasibility, and product strategy.<br><br>🟢 General Questions (Always Required)<br>What problem does this feature solve? (User’s pain point, why it’s needed)<br>What is the expected outcome or benefit? (How success is measured)<br>Who is the primary user? (Developers, admins, end-users, etc.)<br>What should the AI avoid when generating PBIs? (Redundant features, conflicting solutions, etc.)<br>Does this relate to an existing Epic or User Story? (Ensures PBIs are linked to relevant work)<br>🟡 Questions Based on Feature Type<br>🔹 For UI/UX Features<br>What are the key UI components or interactions?<br>Should it follow an existing design system? (Yes/No - If yes, specify the system)<br>Are there any accessibility considerations? (WCAG, ARIA, keyboard navigation, etc.)<br>🔹 For Backend/API Features<br>Which services, endpoints, or database models will be impacted?<br>Are there security concerns (authentication, authorization, sensitive data)?<br>Does it require performance optimizations (caching, async processing, etc.)?<br>🔹 For Automation or AI-Powered Features<br>Should the system make automatic decisions, or require human approval?<br>What are the key inputs and outputs?<br>Are there ethical concerns with automation (bias, transparency, etc.)?<br>🔹 For Integrations<br>Which external service(s) will this integrate with?<br>Are there API rate limits or other constraints?<br>Should the system sync data in real-time or on a schedule?<br>🔹 For Performance-Related Features<br>What is the current bottleneck? (DB queries, large payloads, front-end rendering, etc.)<br>What’s the performance expectation? (e.g., Reduce response time from 500ms → 100ms)<br>🟠 Workflow &amp; Dependencies<br>Are there any preconditions before this can be implemented? (Feature flags, migrations, etc.)<br>Does it require collaboration across teams? (Design, DevOps, Security, etc.)<br>Are there known risks or potential blockers? (Legacy code dependencies, technical debt, etc.)<br>🟣 Estimation &amp; Prioritization<br>What is the priority level? (Critical, High, Medium, Low)<br>What’s the estimated impact? (Revenue, user retention, operational efficiency)<br>Are there any deadlines or time-sensitive constraints? (Launch dates, dependencies, etc.)<br>💡 Expected AI Output<br>Using these questions, AI should generate:<br><br>✅ Epics (High-level objectives)<br>✅ User Stories (Breaking down the work for users)<br>✅ Subtasks (Actionable development steps)<br>This structured input ensures AI can create high-quality, actionable PBIs instead of vague tasks.<br><br>🚀 Step 2: Wireframes - Full Page UI for AI Refinement<br>I’ll create Figma wireframes showcasing the full-page AI refinement process with:<br><br>Dropdown Combobox (Headless UI) to select an existing PBI.<br>AI-Powered Refinement Page (Clarifying Questions + PBI Generation).<br>Buttons to Open &amp; Edit PBIs in the System.<br>🔹 Let me generate the wireframes and share them with you shortly. 🚀<br><br>🚀 Step 3: Fixed Questions First, Dynamic Later<br>✅ We’ll start with fixed questions (predefined in the UI) to keep the process structured. ✅ If we later need more intelligent, adaptive AI prompts, we can introduce dynamic question generation.<br><br>🎯 Next Steps<br>1️⃣ I\'ll generate and share the Figma wireframes.<br>2️⃣ Once we have UI approval, we’ll define the API &amp; database structure.<br>3️⃣ Then, we move to implementation 🚀.<br><br>Let me work on the wireframes now! 🎨📌<br><br>You said:<br>A lot of the questions in step 1 could be answered by giving the AI access to technical doccumentation. <br>If the AI doesn´t find the answer there, then the question should be asked. <br>ChatGPT said:<br>That’s a fantastic approach! 🚀 By leveraging technical documentation, we can reduce user input fatigue and ensure AI-generated PBIs are as accurate as possible.<br><br>🔹 Refining the AI Questioning Process<br>Instead of blindly asking all 25+ questions, we will implement a smart, two-step process:<br><br>Step 1: Auto-Extract Answers from Technical Documentation<br>📌 Before asking the user anything, AI will try to find the answer from:<br><br>Project’s API Documentation (Endpoints, models, authentication, rate limits).<br>Database Schema (Relationships, constraints, existing data models).<br>Project’s Vision &amp; Goals (Product strategy, company objectives).<br>Past User Stories &amp; Epics (Ensuring consistency with previous PBIs).<br>Best Practices &amp; Key Learnings (Mistakes to avoid, past development issues).<br>Step 2: Ask Only the Unanswered Questions<br>📌 If AI can’t find an answer, it will only ask the missing information.<br><br>For example:<br><br>If API docs specify affected endpoints, AI skips “Which endpoints will be impacted?”<br>If the database schema reveals relationships, AI skips “What data models are involved?”<br>If a past User Story addressed similar issues, AI suggests improvements instead of asking from scratch.<br>🔹 UX Implementation: Full-Page AI Refinement Flow<br>✅ Step 1: User selects or creates a PBI.<br>✅ Step 2: AI scans project documentation for answers.<br>✅ Step 3: AI generates PBIs, showing:<br><br>🔹 Pre-filled answers from documentation.<br>🔹 Questions only for missing details.<br>✅ Step 4: User reviews &amp; refines before submitting.<br>This ensures: 🚀 Less manual input → AI handles most of the work.<br>🚀 More accurate PBIs → AI cross-checks against existing docs.<br>🚀 Faster process → Users answer only what AI can’t infer.<br><br>🔹 What’s Next?<br>1️⃣ Figma Wireframes – I’ll create the UX flow for AI refinement.<br>2️⃣ Technical Documentation Strategy – We define:<br><br>📌 Where &amp; how AI should access project documentation.<br>📌 Which docs are needed for different PBI types.<br>3️⃣ Implementation Plan – Define how AI extracts, processes &amp; asks questions.<br>Would you like me to proceed with wireframes first or technical documentation strategy first? 🚀<br><br>You said:<br>AI Estimation is the next thing we should include, so don´t bother asking the user for that.<br>ChatGPT said:<br>Got it! 🚀 AI will automatically estimate Story Points instead of asking the user.<br><br>🔹 How AI Will Estimate Story Points<br>Instead of manually entering estimates, AI will calculate complexity, effort, and uncertainty based on:<br><br>1️⃣ Complexity Analysis<br><br>Database impact → Does it involve schema changes? Complex relationships?<br>API impact → Are new endpoints needed? Major refactoring required?<br>Frontend impact → Is it a UI change or deep business logic?<br>Security concerns → Are there authentication/authorization risks?<br>2️⃣ Effort Calculation<br><br>Lines of code (LOC) prediction → Based on past PBIs of similar scope.<br>Number of components affected → More files = higher effort.<br>Testing needs → How much unit &amp; integration testing is required?<br>3️⃣ Uncertainty Rating<br><br>Does the AI find enough documentation?<br>Does this feature require new technology?<br>Does the feature involve high unknowns (e.g., 3rd party integrations)?<br>📌 Estimation Output (Fibonacci Scale) AI will output a story point estimate (1, 2, 3, 5, 8, 13...) with reasoning:<br><br>🟢 Low Complexity → 1-3 Points<br>🟡 Moderate Complexity → 5-8 Points<br>🔴 High Complexity &amp; Unknowns → 13+ Points<br>🔹 Next Steps<br>1️⃣ Figma Wireframes (Integrate AI estimation in UI).<br>2️⃣ Define Estimation Algorithm (How AI calculates effort).<br>3️⃣ Implement AI Estimation API (Story Point prediction).<br><br>Where should AI show the estimated Story Points?<br><br>Inside the PBI form? (User sees it before submission).<br>Only in the backlog? (After PBI is saved).<br>Let me know, and I’ll include it in the wireframes! 🚀<br><br>You said:<br>I want the AI estimation included in the task description and currently all tasks have a field for estimation where user can enter story points, instead of adding another field for AI estimate I´m thinking we could indicate if estimation is set by AI or if it is human edited. What do you think?<br>ChatGPT said:<br>That’s a great approach! It keeps the UI clean while still allowing users to see whether the estimate was AI-generated or manually adjusted.<br><br>🔹 How to Implement AI Estimation in the Task Description<br>1️⃣ Story Points Field Behavior:<br><br>AI auto-generates an initial estimate when a PBI is created.<br>The user can edit the estimate manually if they disagree.<br>If the user changes the AI estimate, we mark it as human-edited.<br>2️⃣ Indicating AI vs. Human Estimates:<br><br>AI-generated estimate → Display a small "AI" badge next to the number.<br>User-edited estimate → Display a "User Edited" label (or remove the AI badge).<br>3️⃣ Example UI Representations:<br><br>AI Estimate: Story Points: 5 (AI)<br>User-Edited: Story Points: 8 (User Edited)<br>🔹 Backend &amp; Database Changes<br>Keep the existing story_points field.<br><br>Add a new field: is_ai_estimate (true/false)<br><br>true → AI-generated<br>false → Manually overridden<br>When AI sets the estimate, is_ai_estimate = true.<br><br>If a user changes the estimate, set is_ai_estimate = false.<br><br>🔹 User Flow<br>1️⃣ AI suggests an estimate when the PBI is created.<br>2️⃣ User can keep it or edit it.<br>3️⃣ If edited, it switches from AI to user-edited.<br>4️⃣ The UI reflects whether the estimate is AI-generated or manually adjusted.<br><br>🔹 Advantages of This Approach<br>✅ Minimal UI clutter – No extra fields.<br>✅ Users stay in control – AI assists but doesn’t dictate.<br>✅ Clear distinction between AI-generated &amp; human-set values.<br>✅ Easy implementation – Just an extra is_ai_estimate field.<br><br>Next Steps<br>🔹 Update PBI Creation Flow to auto-assign AI estimates.<br>🔹 Modify UI to display AI/User-edited status.<br>🔹 Ensure API updates is_ai_estimate correctly.<br><br>Would you like this logic to be included in the Figma wireframes? 🚀<br><br>You said:<br>Yes<br>ChatGPT said:<br>Great! I’ll now create Figma wireframes incorporating the AI Estimation Flow into the Task Refinement Page.<br><br>📌 Wireframe Features<br>🔹 Full-Page AI Refinement UI (instead of a modal)<br>🔹 Dropdown Combobox for Selecting a PBI (Headless UI)<br>🔹 Structured Form-Based AI Q&amp;A for refinement<br>🔹 Story Points Section:<br><br>Shows AI-estimated points with an "AI" badge<br>Allows manual override (switching to "User Edited")<br>I’ll generate the wireframes now! 🚀 Stay tuned. 🎨<br><br><br>Here is the wireframe for the AI-powered task refinement page! 🎨<br><br>Key Features in the Wireframe:<br>✅ Full-page layout for refining PBIs<br>✅ Dropdown combobox with search functionality to select a PBI<br>✅ AI-driven structured form where AI asks questions and users respond<br>✅ Story Points Estimation section:<br><br>Shows AI-generated values with an "AI" badge<br>Allows manual override, switching to a "User Edited" label<br>Would you like any modifications before we move forward with implementation? 🚀<br><br>You said:<br>Can you provide a text based UI description instead?<br>I just need the different components of the page that is needed and then I can do layout and design myself.<br>ChatGPT said:<br>AI-Powered Task Refinement Page - UI Structure<br>This page provides a structured interface for refining PBIs with AI assistance. Below is a breakdown of all the key UI components that should be included.<br><br>📌 Main Components<br>1️⃣ Page Header (Fixed at the Top)<br>Title: "AI-Powered Task Refinement"<br>Back Button: Returns to the backlog view<br>Help Icon: Opens a tooltip explaining how AI refinement works<br>2️⃣ Task Selection Section<br>Label: "Select a PBI to refine"<br>Dropdown Combobox (Headless UI)<br>Allows searching and selecting an existing PBI<br>Displays title &amp; ID of each task<br>Optional: Show the task type (Epic, User Story, Subtask)<br>Button: "Open Task in AI Refinement"<br>3️⃣ AI-Assisted Refinement Form (Dynamic Based on Task)<br>Section Title: "Refinement Questions"<br>Questions Panel<br>AI provides structured questions based on the selected task<br>Questions should be grouped by categories (e.g., Goals, Technical Details, Dependencies)<br>Each question has:<br>A text input (for short answers) or a textarea (for detailed explanations)<br>Pre-filled values if available from technical documentation<br>AI-generated suggestions (editable)<br>Toggle: "Show AI Recommendations"<br>Expands a section with AI-generated recommendations for this task<br>4️⃣ AI Estimation &amp; Task Metadata<br>Label: "Estimation &amp; Task Metadata"<br>Story Points Field:<br>Displays the AI-estimated story points (default)<br>Allows manual override with a "User Edited" indicator<br>Additional Metadata:<br>Task Priority (Low, Medium, High)<br>Dependencies (Auto-detected &amp; user-editable)<br>Related Epics / Stories<br>5️⃣ Actions &amp; Submission<br>Primary Button: "Submit to Backlog"<br>Secondary Button: "Save Draft" (to store refinement progress without submitting)<br>AI Chat History Panel (Optional): Displays past AI interactions for reference<br>💡 Notes &amp; Considerations<br>Form should autosave periodically to prevent data loss<br>If the user switches tasks, ask for confirmation before discarding unsaved changes<br>AI should fetch relevant project documentation before asking unnecessary questions<br>Would you like to adjust any sections or add more details? 🚀<br><br>You said:<br>Some suggested changes:<br>1. It should be possible to add a parent task including all subtasks, in case the user has already worked on creating epic, user stories and subtasks. That way AI gets the whole feature description and can start over.<br>2. We alreadu use autosave with debounced and we also use websockets for real time updates.<br>3. We need a simple settings page where user can choose AI provider (OpenAI to start with) and input API credentials:<br>ChatGPT said:<br>Great suggestions! Here’s the updated UI structure incorporating your changes:<br><br>📌 AI-Powered Task Refinement Page - Updated UI Structure<br>This page enables users to refine PBIs with AI assistance, while ensuring flexibility for existing task hierarchies, real-time updates, and AI provider settings.<br><br>1️⃣ Page Header (Fixed at the Top)<br>Title: "AI-Powered Task Refinement"<br>Back Button: Returns to the backlog view<br>Help Icon: Opens a tooltip explaining how AI refinement works<br>2️⃣ Task Selection Section<br>Label: "Select a PBI or Parent Task to Refine"<br>Dropdown Combobox (Headless UI)<br>Searchable dropdown to select an individual task (PBI, User Story, or Subtask)<br>Checkbox: "Include all subtasks" (if a parent task is selected)<br>Optional: Show task type (Epic, User Story, Subtask)<br>Button: "Open in AI Refinement"<br>✅ New Feature: If a parent task is selected with "Include all subtasks," the AI receives the full feature breakdown instead of an isolated task.<br><br>3️⃣ AI-Assisted Refinement Form<br>Section Title: "AI-Powered Refinement Questions"<br>Questions Panel<br>AI generates structured questions based on the selected task(s)<br>Grouped Categories:<br>Feature Goals &amp; Outcomes<br>Technical Requirements<br>Dependencies &amp; Risks<br>Acceptance Criteria<br>Each question has:<br>A text input (for short answers) or a textarea (for detailed explanations)<br>Pre-filled values if available from technical documentation<br>AI-generated suggestions (editable)<br>Toggle: "Show AI Recommendations"<br>Expands a section with AI-generated recommendations for this task<br>✅ New Feature: If the user selects a parent task with subtasks, AI dynamically adjusts questions to consider the full hierarchy.<br><br>4️⃣ AI Estimation &amp; Task Metadata<br>Label: "Estimation &amp; Task Metadata"<br>Story Points Field:<br>AI-generated story points (default)<br>Allows manual override with a "User Edited" indicator<br>Additional Metadata:<br>Task Priority (Low, Medium, High)<br>Dependencies (Auto-detected &amp; user-editable)<br>Related Epics / Stories<br>✅ New Feature: Parent-child relationships are preserved, meaning AI-generated metadata accounts for linked tasks.<br><br>5️⃣ Real-Time Updates &amp; Autosave<br>WebSocket-Enabled: Any changes made instantly update other users in real-time<br>Debounced Autosave: Saves progress periodically to prevent data loss<br>Undo/Redo: Simple history tracking for user changes<br>✅ New Feature: Uses existing WebSocket + debounced autosave setup for seamless real-time updates.<br><br>6️⃣ Actions &amp; Submission<br>Primary Button: "Submit to Backlog"<br>Secondary Button: "Save Draft" (stores refinement progress without submitting)<br>AI Chat History Panel (Optional): Displays past AI interactions for reference<br>7️⃣ AI Provider Settings Page<br>Page Title: "AI Integration Settings"<br>Dropdown: "Select AI Provider" (Starting with OpenAI)<br>Future support for multiple providers (Anthropic, Azure, Local AI, etc.)<br>API Key Input Field<br>Test Connection Button (Validates API credentials)<br>Save Settings Button<br>✅ New Feature: Centralized AI provider settings so users can configure API credentials before using AI-powered refinement.<br><br>Final Thoughts<br>✅ Supports full feature refinement (Epics + Subtasks)<br>✅ Uses real-time WebSocket updates + autosave (no lost work)<br>✅ Gives users control over AI-generated estimations<br>✅ Modular AI provider integration for future flexibility<br><br>🚀 Would you like any additional refinements before we move forward?<br><br>You said:<br>How do we give AI permission to write in the database?<br>ChatGPT said:<br>Granting AI Permission to Write to the Database<br>For AI to write to the database, we need a secure and controlled mechanism to ensure data integrity, security, and prevent unauthorized access.<br><br>1️⃣ Recommended Approach: Secure API Endpoint<br>Instead of allowing AI direct access to the database, we expose a controlled API that the AI can interact with.<br><br>✅ Steps to Implement<br>Create an API Endpoint (e.g., /api/pbis)<br><br>Accepts AI-generated Epics, User Stories, Subtasks<br>Validates input before saving to DB<br>Use API Authentication<br><br>API Key or OAuth2 Token: AI must authenticate before sending requests.<br>Store AI credentials securely in environment variables.<br>Define Access Controls<br><br>Restrict AI to specific actions (e.g., insert PBIs, update fields)<br>Role-Based Access Control (RBAC): AI should have a limited DB role (e.g., ai_writer).<br>Validate AI-Generated Data<br><br>Enforce schema validation (e.g., JSON Schema)<br>Apply business rules (e.g., prevent circular dependencies)<br>Use an AI Service Account<br><br>AI interacts as a designated system user (not a superuser)<br>Logs all AI interactions for auditability<br>2️⃣ Backend Implementation<br>📌 Create the API Route (/api/pbis)<br>python<br>Copy<br>Edit<br>from flask import Blueprint, request, jsonify<br>from models import db, PBI<br>from auth_middleware import verify_ai_auth<br><br>bp = Blueprint("ai_pbi_api", __name__)<br><br>@bp.route("/api/pbis", methods=["POST"])<br>@verify_ai_auth # ✅ Require AI authentication<br>def create_pbi():<br>"""Handles AI-generated PBI creation"""<br><br>data = request.json<br>if not data:<br>return jsonify({"error": "No data provided"}), 400<br><br># ✅ Validate input structure<br>required_fields = ["title", "description", "task_type", "priority"]<br>if not all(field in data for field in required_fields):<br>return jsonify({"error": "Missing required fields"}), 400<br><br># ✅ Insert into database<br>new_pbi = PBI(<br>title=data["title"],<br>description=data["description"],<br>task_type=data["task_type"],<br>priority=data.get("priority", "Medium"),<br>estimated_points=data.get("estimated_points", None), # AI estimate<br>created_by="AI", # Track source<br>)<br><br>db.session.add(new_pbi)<br>db.session.commit()<br><br>return jsonify({"message": "PBI created successfully", "id": new_pbi.id}), 201<br>3️⃣ AI Authentication &amp; Security<br>📌 Use API Keys to Restrict Access<br>Middleware for AI Authentication (auth_middleware.py):<br><br>python<br>Copy<br>Edit<br>from flask import request, jsonify<br>import os<br><br>VALID_AI_API_KEY = os.getenv("AI_API_KEY")<br><br>def verify_ai_auth(func):<br>"""Middleware to verify AI authentication"""<br>def wrapper(*args, **kwargs):<br>api_key = request.headers.get("X-API-Key")<br>if api_key != VALID_AI_API_KEY:<br>return jsonify({"error": "Unauthorized AI access"}), 403<br>return func(*args, **kwargs)<br>return wrapper<br>✅ AI must send a valid API key in the request headers:<br><br>json<br>Copy<br>Edit<br>{<br>"title": "Implement AI Task Refinement",<br>"description": "Break down AI task refinement into structured PBIs",<br>"task_type": "Epic",<br>"priority": "High",<br>"estimated_points": 8<br>}<br>🛡 Security Best Practices<br><br>Rotate API Keys regularly<br>Use role-based permissions<br>Log all AI interactions for debugging &amp; auditing<br>Limit AI’s scope to only modifying PBIs (not users, projects, etc.)<br>4️⃣ PostgreSQL Database Role for AI<br>Instead of granting full DB access, create a limited-access AI role:<br><br>sql<br>Copy<br>Edit<br>-- Create a restricted AI role<br>CREATE ROLE ai_writer WITH LOGIN PASSWORD \'securepassword\';<br><br>-- Grant permission to insert PBIs but not delete them<br>GRANT INSERT, UPDATE ON pbis TO ai_writer;<br>5️⃣ WebSocket Integration (Optional)<br>If using real-time updates, AI should broadcast new PBIs:<br><br>python<br>Copy<br>Edit<br>from flask_socketio import emit<br><br>@bp.route("/api/pbis", methods=["POST"])<br>@verify_ai_auth<br>def create_pbi():<br>...<br>db.session.commit()<br><br># 🔥 Notify frontend in real-time<br>emit("pbi_created", {"id": new_pbi.id, "title": new_pbi.title}, broadcast=True)<br><br>return jsonify({"message": "PBI created successfully", "id": new_pbi.id}), 201<br>🚀 Final Summary<br>✅ API Gateway: AI writes via /api/pbis<br>✅ Secure Authentication: AI must provide an API key<br>✅ Database Role: AI is limited to inserting/updating PBIs only<br>✅ Schema Validation: Ensures AI submits valid data<br>✅ Real-Time Updates: WebSocket notifications for new PBIs<br>🎯 Next Steps<br>Would you like:<br><br>To implement a similar API for retrieving PBIs? (GET /api/pbis)<br>AI role to have limited UPDATE access for task refinements?<br>A test script to verify AI authentication &amp; data submission?<br>You said:<br>I´m saving you questions for later.<br><br>For now let´s get back on track:<br><br>Can you rewrite the entire plan based on what we have agreed on so far and then move on to step 2.<br><br>1. [COMPLETED] I want us to discuss how it would be inplemented in the UI and provide the optimal UX.<br>2. Could we benefit from drafting the architecture, sequence diagrams, user flows?<br>3. Before we start coding, I want you to create PBI´s for the project and estimate complexity.<br>4. Create psql commands for creating the PBI´s.<br><br>Lets go through these steps one by one.<br>ChatGPT said:<br>AI-Powered PBI Generation &amp; Integration Plan<br>Overview<br>We are developing an AI-powered system that automates the generation and refinement of Epics, User Stories, and Subtasks in our Project Management System (PMS). The system will allow users to refine feature ideas through a structured, guided AI interaction and directly submit PBIs (Product Backlog Items) into the backlog.<br><br>✅ Phase 1: UI/UX Implementation Plan (Completed)<br>We have defined the best user experience (UX) strategy and identified how users will interact with the AI-driven PBI refinement system.<br><br>🔹 UI/UX Key Decisions<br>Where PBI Creation Happens<br><br>Inside the Backlog View → AI-assisted refinement happens within the backlog planning workflow.<br>Standalone Full-Page PBI Refinement View → Instead of a modal, we will use a full-page AI refinement interface.<br>How the User Provides Input<br><br>Users select an existing PBI from a searchable combobox (Headless UI)<br>Users can also add a parent task, including all its subtasks, ensuring AI gets full context.<br>How AI Refines PBIs<br><br>AI asks structured, best-practice questions<br>AI accesses technical documentation before asking questions, avoiding redundant prompts.<br>Inline Editing: AI suggests PBIs, and the user can edit before finalizing.<br>Step-by-Step Refinement: AI refines tasks dynamically based on user responses.<br>How Users Trigger AI PBI Generation<br><br>Button: "Generate PBIs from Feature Request"<br>AI Guidance: AI offers to help refine a new feature request when a user creates a new PBI.<br>Shortcut Command: /generate_pbi &lt;feature&gt;<br>How AI Estimation Works<br><br>AI assigns story points based on complexity<br>The estimation field tracks whether it was set by AI or manually edited by the user.<br>Users can override AI estimates manually.<br>🔹 Finalized UI Components for PBI Refinement Page<br>📌 PBI Refinement Page (Full-Screen UI)<br>🔍 Searchable Dropdown (Combobox)<br><br>Users search &amp; select a PBI from the backlog.<br>Users can add a parent task + subtasks for AI to analyze.<br>📜 AI Question Form<br><br>AI asks structured questions to refine the feature request.<br>AI auto-fills answers when possible (from project history/docs).<br>User fills in missing details manually.<br>📝 AI-Generated PBIs Section<br><br>AI dynamically generates Epics, User Stories, and Subtasks.<br>PBIs appear in real-time as AI refines them.<br>Users can edit PBIs inline before submission.<br>📊 AI Story Point Estimation<br><br>AI auto-assigns story points based on complexity.<br>Indicator shows if estimation was set by AI or edited by the user.<br>🔄 Autosave &amp; WebSockets<br><br>Debounced auto-save ensures changes are not lost.<br>WebSockets enable real-time updates across team members.<br>🛠 Settings Page<br><br>AI Provider Selection: OpenAI (default)<br>API Key Input: Secure credentials storage for AI integration.<br>🚀 Phase 2: Architecture, Sequence Diagrams &amp; User Flows<br>Why Do We Need This?<br>Before coding, we should draft architectural diagrams to:<br><br>Visualize the AI’s role in the PMS system.<br>Map the user flow from input to AI-generated PBIs.<br>Ensure database integration is structured correctly.<br>Avoid unnecessary rewrites by planning dependencies.<br>📌 Key Architectural Components<br>1️⃣ Frontend UI<br><br>Next.js React App<br>Full-page AI refinement view<br>Headless UI Combobox for PBI selection<br>Real-time UI updates via WebSockets<br>2️⃣ AI Processing<br><br>AI fetches context from technical documentation &amp; backlog<br>AI generates PBIs dynamically using structured rules<br>AI assigns story points automatically<br>AI questions the user only when necessary (context-aware questioning)<br>3️⃣ Backend API<br><br>/api/pbis → AI submits PBIs<br>/api/pbis/:id → Retrieve PBIs for AI refinement<br>Authentication middleware (API keys for AI)<br>WebSockets for real-time updates<br>4️⃣ Database Schema Changes<br><br>Track whether AI or user set story points<br>Store AI-generated questions &amp; answers for auditing<br>Link PBIs to their refined feature requests<br>📌 Next Steps<br>1️⃣ Create High-Level Architecture Diagram<br>How the UI, AI processing, and backend interact<br>Illustrate AI refinement flow &amp; database interactions<br>2️⃣ Define Sequence Diagrams<br>User selects a feature request → AI processes it → PBIs are generated<br>AI refines questions dynamically based on available data<br>3️⃣ Map User Flows<br>Step-by-step process from selecting a PBI to AI refinement &amp; submission<br>Flowchart of AI interaction (when to ask, when to auto-fill answers)<br>Would you like me to generate initial architecture &amp; sequence diagrams now? 🚀<br><br>You said:<br>Yes, I would like that but you also need to know waht I use for backend, right?<br>Python / flask and postgreSQL. <br>ChatGPT said:<br>Yes, knowing that your backend is built with Python / Flask and PostgreSQL is crucial for designing the architecture and sequence diagrams effectively.<br><br>I will now generate the following:<br><br>1️⃣ High-Level Architecture Diagram → How the UI, AI processing, and backend interact.<br>2️⃣ Sequence Diagram → How a PBI is refined by AI and submitted to the database.<br>3️⃣ User Flow Diagram → How users interact with AI-driven PBI refinement.<br><br>Since we are using Flask for the backend, I will ensure that the API endpoints and WebSocket handling align with Flask’s best practices. I’ll also consider PostgreSQL schema changes to store AI-generated PBIs effectively.<br><br>I will now generate these diagrams. Stay tuned! 🎨🚀<br><br><br>Analysis errored<br>python<br>Always show details<br><br>Copy<br>import matplotlib.pyplot as plt<br>import matplotlib.patches as mpatches<br><br>def draw_architecture_diagram():<br>fig, ax = plt.subplots(figsize=(10, 6))<br><br># Title<br>ax.set_title("High-Level Architecture: AI-Driven PBI Refinement", fontsize=14, fontweight="bold")<br><br># Components<br>components = {<br>"Frontend (Next.js)": (0.2, 0.8),<br>"AI Processing (GPT-4 API)": (0.5, 0.8),<br>"Backend API (Flask)": (0.8, 0.8),<br>"PostgreSQL Database": (0.8, 0.5),<br>"WebSockets (Real-time Updates)": (0.5, 0.5)<br>}<br><br># Draw components<br>for label, (x, y) in components.items():<br>ax.add_patch(mpatches.FancyBboxPatch((x-0.1, y-0.05), 0.2, 0.1, boxstyle="round,pad=0.1", <br>facecolor="lightblue", edgecolor="black"))<br>ax.text(x, y, label, ha="center", va="center", fontsize=10, fontweight="bold")<br><br># Arrows<br>arrows = [<br>((0.2, 0.8), (0.5, 0.8)), # Frontend → AI Processing<br>((0.5, 0.8), (0.8, 0.8)), # AI Processing → Backend API<br>((0.8, 0.8), (0.8, 0.5)), # Backend API → PostgreSQL<br>((0.8, 0.5), (0.8, 0.8)), # PostgreSQL → Backend API<br>((0.8, 0.8), (0.5, 0.5)), # Backend API → WebSockets<br>((0.5, 0.5), (0.2, 0.8)) # WebSockets → Frontend<br>]<br><br>for start, end in arrows:<br>ax.annotate("", xy=end, xytext=start, arrowprops=dict(arrowstyle="-&gt;", lw=2))<br><br># Hide axes<br>ax.set_xticks([])<br>ax.set_yticks([])<br>ax.set_frame_on(False)<br><br># Show diagram<br>plt.show()<br><br># Draw the architecture diagram<br>draw_architecture_diagram()<br>I encountered an issue generating the architecture diagram. Let me try again. \u200b\u200b<br><br><br>Analysis errored<br>python<br>Always show details<br><br>Copy<br>import matplotlib.pyplot as plt<br>import matplotlib.patches as mpatches<br><br>def draw_architecture_diagram():<br>fig, ax = plt.subplots(figsize=(10, 6))<br><br># Title<br>ax.set_title("High-Level Architecture: AI-Driven PBI Refinement", fontsize=14, fontweight="bold")<br><br># Components<br>components = {<br>"Frontend (Next.js)": (0.2, 0.8),<br>"AI Processing (GPT-4 API)": (0.5, 0.8),<br>"Backend API (Flask)": (0.8, 0.8),<br>"PostgreSQL Database": (0.8, 0.5),<br>"WebSockets (Real-time Updates)": (0.5, 0.5)<br>}<br><br># Draw components<br>for label, (x, y) in components.items():<br>ax.add_patch(mpatches.FancyBboxPatch((x-0.1, y-0.05), 0.2, 0.1, boxstyle="round,pad=0.1", <br>facecolor="lightblue", edgecolor="black"))<br>ax.text(x, y, label, ha="center", va="center", fontsize=10, fontweight="bold")<br><br># Arrows<br>arrows = [<br>((0.2, 0.8), (0.5, 0.8)), # Frontend → AI Processing<br>((0.5, 0.8), (0.8, 0.8)), # AI Processing → Backend API<br>((0.8, 0.8), (0.8, 0.5)), # Backend API → PostgreSQL<br>((0.8, 0.5), (0.8, 0.8)), # PostgreSQL → Backend API<br>((0.8, 0.8), (0.5, 0.5)), # Backend API → WebSockets<br>((0.5, 0.5), (0.2, 0.8)) # WebSockets → Frontend<br>]<br><br>for start, end in arrows:<br>ax.annotate("", xy=end, xytext=start, arrowprops=dict(arrowstyle="-&gt;", lw=2))<br><br># Hide axes<br>ax.set_xticks([])<br>ax.set_yticks([])<br>ax.set_frame_on(False)<br><br># Show diagram<br>plt.show()<br><br># Draw the architecture diagram<br>draw_architecture_diagram()<br>I encountered an issue generating the architecture diagram. Instead, I\'ll describe it textually:<br><br>High-Level Architecture for AI-Driven PBI Refinement<br>This architecture integrates Next.js (Frontend), Flask (Backend API), PostgreSQL (Database), GPT-4 API, and WebSockets for real-time updates.<br><br>Components &amp; Flow:<br>Frontend (Next.js)<br><br>User selects a feature request from the backlog.<br>Inputs details and triggers AI-powered PBI generation.<br>Displays AI-generated Epics, User Stories, and Subtasks.<br>Supports real-time updates via WebSockets.<br>AI Processing (GPT-4 API)<br><br>Receives feature descriptions and additional context.<br>Generates structured PBIs based on predefined rules and user input.<br>Returns the refined tasks to the backend.<br>Backend API (Flask)<br><br>Routes API requests between frontend and AI service.<br>Validates and processes AI-generated PBIs.<br>Stores tasks in PostgreSQL.<br>Emits WebSocket events for real-time updates.<br>PostgreSQL Database<br><br>Stores all Epics, User Stories, and Subtasks.<br>Keeps track of AI-generated vs. user-edited PBIs.<br>Supports search and retrieval.<br>WebSockets (Flask-SocketIO)<br><br>Sends real-time updates when PBIs are refined or modified.<br>Ensures users see immediate changes.<br>Next, I will draft sequence diagrams and user flows for how the AI-powered PBI refinement process works. Stay tuned! 🚀 \u200b\u200b<br><br>You said:<br>Please continue<br>ChatGPT said:<br>Step 2: Drafting Architecture, Sequence Diagrams, and User Flows<br>1️⃣ Sequence Diagram: AI-Driven PBI Refinement Process<br>Actors:<br>User: Interacts with the UI to refine and submit PBIs.<br>Frontend (Next.js): Sends user input to the backend and displays results.<br>Backend (Flask API): Processes requests and interacts with AI &amp; DB.<br>AI Service (GPT-4 API): Generates PBIs based on input.<br>PostgreSQL Database: Stores PBIs and project data.<br>🛠️ Step-by-Step Process (Refinement Flow)<br>1. User selects a PBI to refine<br>Opens the AI Refinement Page.<br>Selects an existing Feature Request from a searchable dropdown.<br>(Optional) Adds a parent task to include all subtasks.<br>2. AI Queries Additional Context<br>AI first searches project documentation (if available).<br>If AI finds missing information, it generates a set of questions.<br>User answers questions in a structured form UI.<br>AI refines its understanding.<br>3. AI Generates PBIs<br>AI generates:<br>Epics<br>User Stories<br>Subtasks<br>Assigns Story Points (AI estimation).<br>Saves metadata (dependencies, priorities, assignments).<br>4. User Reviews &amp; Modifies<br>The user can:<br>Edit task descriptions (inline).<br>Adjust AI estimations (AI tag remains visible).<br>Remove irrelevant PBIs.<br>5. PBIs are Auto-Saved &amp; Updated<br>Changes are debounced &amp; saved automatically.<br>WebSockets broadcast changes in real time to all users.<br>6. PBIs are Submitted to Backlog<br>When satisfied, the user confirms submission.<br>The system:<br>Inserts PBIs into PostgreSQL.<br>Marks them as ready for execution.<br>2️⃣ User Flow: AI-Powered Task Refinement<br>🟢 User selects a feature request → 🟡 AI refines using project data → 🟠 User answers missing details → 🔵 AI generates structured PBIs → 🟣 User reviews &amp; submits<br><br>3️⃣ Key Backend API Endpoints<br>These will be implemented in Flask.<br><br>Endpoint Method Description<br>/api/pbis POST Submit AI-generated PBIs to the backlog<br>/api/pbis/refine POST AI generates/refines PBIs<br>/api/pbis/questions GET AI fetches clarification questions if required<br>/api/pbis/{pbi_id} PATCH Updates a PBI after user edits<br>/api/pbis/{pbi_id}/submit POST Confirms PBI submission<br>4️⃣ Database Schema Updates (PostgreSQL)<br>To support AI-powered task refinement, we add new fields:<br><br>sql<br>Copy<br>Edit<br>ALTER TABLE tasks ADD COLUMN ai_generated BOOLEAN DEFAULT FALSE;<br>ALTER TABLE tasks ADD COLUMN refinement_status TEXT DEFAULT \'Pending\';<br>ALTER TABLE tasks ADD COLUMN estimation_source TEXT DEFAULT \'User\';<br>5️⃣ Next Steps<br>✔️ Architecture, API endpoints, and database updates are drafted.<br>➡️ Next: Move to Step 3 (Creating PBIs &amp; Estimating Complexity). 🚀<br><br>Let me know if you want any modifications before proceeding!<br><br>You said:<br>Where should we store the documentation?<br>Where in the UI should the user upload the documentation?<br>Is it possible to get the documentation automatically from an integration?<br>Like GitHub, VScode?<br>Provided that the documentation exist there.<br>Add a simple settings page where user can input API key and credentials.<br>ChatGPT said:<br>📌 Storing &amp; Managing Documentation for AI-Powered PBI Refinement<br>To ensure AI can access relevant project documentation for refining PBIs, we need a structured way to store, retrieve, and update documentation. Below is the plan:<br><br>1️⃣ Where Should We Store Documentation?<br>Option 1: PostgreSQL (Best for Structured Documentation)<br>Store documentation as text in a dedicated table.<br>Allows version control and easy retrieval.<br>Can be indexed for faster AI retrieval.<br>Table: project_documentation<br>sql<br>Copy<br>Edit<br>CREATE TABLE project_documentation (<br>id SERIAL PRIMARY KEY,<br>project_id INT REFERENCES projects(id) ON DELETE CASCADE,<br>title TEXT NOT NULL,<br>content TEXT NOT NULL,<br>source TEXT DEFAULT \'Manual Upload\',<br>uploaded_by INT REFERENCES users(id),<br>created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP<br>);<br>✅ Pros:<br><br>AI can efficiently search and extract relevant details.<br>Allows tagging &amp; filtering by source (e.g., GitHub, VS Code, Manual Upload).<br>Option 2: External File Storage (Best for Large Documents)<br>Store Markdown, TXT, or PDF files in an S3 bucket (AWS, Firebase, etc.).<br>Only metadata is stored in PostgreSQL.<br>AI retrieves and processes the files when needed.<br>Table: documentation_files<br>sql<br>Copy<br>Edit<br>CREATE TABLE documentation_files (<br>id SERIAL PRIMARY KEY,<br>project_id INT REFERENCES projects(id) ON DELETE CASCADE,<br>file_url TEXT NOT NULL,<br>file_type TEXT NOT NULL CHECK (file_type IN (\'md\', \'txt\', \'pdf\')),<br>uploaded_by INT REFERENCES users(id),<br>created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP<br>);<br>✅ Pros:<br><br>Supports larger documents that may not fit in PostgreSQL.<br>Allows manual file uploads and auto-fetching from integrations.<br>2️⃣ Where in the UI Should the User Upload Documentation?<br>📂 Dedicated "Documentation Management" Page (Settings)<br>Location: Inside Settings &gt; Documentation.<br>Features:<br>Upload Markdown, TXT, PDF files.<br>View &amp; Edit existing documentation.<br>Connect integrations (GitHub, VS Code, Notion, etc.).<br>Configure AI access permissions for each document.<br>3️⃣ Automatic Documentation Retrieval<br>✅ Can We Integrate with GitHub, VS Code, or Notion?<br>Yes! We can fetch project documentation automatically from these sources:<br><br>Integration Method Use Case<br>GitHub Fetch .md files via API Pull documentation from repos<br>VS Code Read local .md files Sync local project docs<br>Notion API connection Import structured docs<br>Google Drive API connection Fetch shared project docs<br>📡 Example: GitHub API Integration<br>Fetch .md documentation from a GitHub repo:<br><br>python<br>Copy<br>Edit<br>import requests<br><br>GITHUB_TOKEN = "your_personal_token"<br>REPO_OWNER = "your_username"<br>REPO_NAME = "your_project"<br><br>url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/docs"<br>headers = {"Authorization": f"token {GITHUB_TOKEN}"}<br><br>response = requests.get(url, headers=headers)<br>files = response.json()<br><br>for file in files:<br>if file["name"].endswith(".md"):<br>doc_content = requests.get(file["download_url"]).text<br>print("Fetched Documentation:", doc_content)<br>✅ Pros:<br><br>Automatically syncs up-to-date documentation from GitHub.<br>AI can use repo docs before asking the user for details.<br>4️⃣ Simple Settings Page for AI API &amp; Integrations<br>📌 Location: Settings &gt; AI &amp; Integrations<br><br>✅ User Can:<br><br>Enter OpenAI API Key.<br>Connect GitHub Repo (OAuth or Token).<br>Enable Auto-Fetch from VS Code, Notion, Google Drive.<br>Set AI Access Rules (e.g., Allow AI to modify docs?).<br>🔧 Database Table: integration_settings<br>sql<br>Copy<br>Edit<br>CREATE TABLE integration_settings (<br>id SERIAL PRIMARY KEY,<br>user_id INT REFERENCES users(id),<br>integration_name TEXT NOT NULL,<br>api_key TEXT NOT NULL,<br>is_enabled BOOLEAN DEFAULT TRUE,<br>created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP<br>);<br>🚀 Next Steps<br>✅ Implement API endpoints for documentation storage &amp; retrieval.<br>✅ Build a simple settings page to manage AI API &amp; integrations.<br>✅ Set up GitHub/VS Code sync for fetching docs automatically.<br><br>Would you like mockups or wireframes for the settings page? 📐I´m still in planning mode, so let´s continue.<br><br><br>## AI driven creation of Epics, User stories and Subtasks.<br><br>I have, on several occasions when we have discussed a new feature and outlined a high level plan asked you to create epics, user stories and subtasks for the feature. <br><br>You are very good at this and it saves a lot of time compared to writing them manually. <br><br>However, we could create a process of this and include some steps were we go through some exercises that will help increase the quality of the output. <br>I´m thinking about:<br><br>1. Check PBI´s against the list of key learnings &amp; takeaways for future development<br><br>After every session we do a retrospective where we summarize the session. One section of the summary is a list of key learnings &amp; takeaways for future development. Those should be appended to a complete list of key takeaways for future development.<br><br>Every time we create epics, user stories and subtasks for a new feature we should check them against this checklist of key learnings &amp; takeaways for future development. We can then include reminder notes about this in the tasks they are relevant for. This way we will reduce repeating mistakes, be aware of technical considerations we have to adhere to etc..<br><br>2. Maybe use frameworks like user story mapping<br><br>3. Any other ideas for increasing quality. <br><br>## Estimation:<br><br>I have also asked you to estimate the complexity of the tasks using story points. <br><br>### We have used this framework for estimation:<br><br>We estimate tasks using **story points** with the **Fibonacci scale** (1, 2, 3, 5, 8, 13, etc.) That allows us to gauge the **complexity, effort, and uncertainty** associated with each task.<br><br>GPT (You) will assess every feature based on:<br><br>1. **Complexity**: How difficult the task is (e.g., architecture, database relationships, etc.).<br>2. **Effort**: How much time and effort will be required to code, test, and debug.<br>3. **Uncertainty**: Any unknowns or potential challenges (e.g., interacting with new parts of the system, external factors).<br><br>### **Benchmarking**:<br><br>To give context to these estimates:<br><br>- **1-2 Points**: Minor changes like renaming variables, small bug fixes.<br>- **3-5 Points**: Moderate tasks, involving some new logic, minor database changes, and testing.<br>- **8+ Points**: More complex tasks, like introducing new models, changing relationships in the database, or modifying core app logic with potential unknowns.<br><br>### Typical output for a user story:<br><br>🟢 User Story 1: Implement Parent Task Dropdown in Task Modal<br>As a user, I want to assign or change a parent task directly from the task modal, so that I can organize my tasks efficiently.<br><br>✅ Acceptance Criteria:<br><br>A dropdown appears in the task modal, listing all valid parent tasks.<br>Prevents selection of circular dependencies.<br>Updates the parent task dynamically upon selection.<br>Displays correct hierarchy after updates.<br>📌 Estimation: 5 Story Points<br><br>Complexity: Moderate – Needs task filtering, validation logic, and UI integration.<br>Effort: Moderate – Requires API calls, handling UI state, and testing.<br>Uncertainty: Low – We understand the task relationships well.<br><br><br>This is all a part of a larger idea about how to streamline and improve the quality of the entire product development lifecycle and development process.<br><br>## MVP version<br>I´ve been trying to figure out what would be the most valuable step to start building a feature for.<br><br>I think it is a feature that will allow you (AI) to submit these PBI´s into the backlog of my project management tool and then be able to read them back from the tool.<br><br>So the first draft of the feature would be to create a function that can take a PBI and submit it to the db of the project management tool.<br><br>## Version 2:<br>Next step would be to create a function that can read the PBIs from the db and return them as a list.<br><br>## Version 3<br>To take the whole process of refining a simple feature idea or request into more detailed and actionable PBI´s and integrate it into the project management tool.<br><br>### This would involve the following requirements:<br>- It needs to be a guided process, not just an inline chat.<br>- Both the user and the AI should follow the process.<br><br>To be further discussed....<br>I have a documented ideas in this notion file:<br><a target="_blank" rel="noopener noreferrer" href="https://www.notion.so/lacunamedia/Automating-task-creation-in-autoagile-191979257fc08007a001c3c2dc0a773f?pvs=4">https://www.notion.so/lacunamedia/Automating-task-creation-in-autoagile-191979257fc08007a001c3c2dc0a773f?pvs=4</a><br><br>## The development process:<br>Generating code for the feature based on the PBI´s.<br>The process of you (AI) and me coding together is a process of it´s own that we are working on a plan for optimizing. <br>See separate document: \'optimizing_our_development_process.md\' <br><br><br><br>How can we automate the whole process of:<br><br>1. Create Epics, User stories and subtasks from a refined feature request.<br>2. Script them into the database of autoagile<br>3. Allow AI to read the tasks<br><br><br>This is a great initiative that will systematize and automate the process of turning feature ideas into well-structured PBIs (Epics, User Stories, and Subtasks). Below is a structured approach to refining and implementing this system.<br><br>📌 Summary of the Planned Process<br>We are aiming to automate the workflow of refining a feature request into actionable PBIs and integrating them directly into the project management tool. The long-term vision is to ensure quality, consistency, and efficiency in product development.<br><br>🚀 Proposed Steps for Automating AI-Driven PBI Creation<br>1️⃣ Create Epics, User Stories &amp; Subtasks from a Refined Feature Request<br>🔹 Step 1: Validate PBIs Against "Key Learnings &amp; Takeaways"<br><br>After every session, we capture Key Learnings &amp; Takeaways for future development.<br>When generating new PBIs, we cross-check them against this checklist.<br>If relevant, reminder notes are added to tasks (e.g., “Avoid X issue seen in past development”).<br>✅ Benefit: Prevent repeated mistakes, ensure technical consistency.<br><br>🔹 Step 2: Use Frameworks to Improve PBI Quality<br><br>User Story Mapping: Break down the feature based on user journeys.<br>Impact Mapping: Understand the business &amp; user impact.<br>Jobs-to-Be-Done (JTBD): Define tasks based on what the user is trying to achieve.<br>BDD (Behavior-Driven Development) Scenarios: Define Acceptance Criteria in a structured format.<br>✅ Benefit: Increases clarity, prioritization, and alignment with user goals.<br><br>🔹 Step 3: Automate AI-Driven PBI Generation<br><br>AI takes a high-level feature request and breaks it down into Epics, User Stories, and Subtasks.<br>AI adds relevant acceptance criteria and ensures no conflicting dependencies.<br>User can review &amp; refine before submitting to the backlog.<br>✅ Benefit: Reduces manual effort, ensures consistency.<br><br>2️⃣ Submit PBIs to the AutoAgile Database<br>🔹 Step 4: Create API for AI to Submit PBIs<br><br>A POST API endpoint will allow AI to write PBIs into the project management system.<br>AI will assign metadata (e.g., priority, estimated effort, dependencies).<br>✅ Benefit: Ensures a structured backlog instead of scattered notes.<br><br>3️⃣ Allow AI to Read and Retrieve PBIs<br>🔹 Step 5: Create API to Fetch PBIs<br><br>A GET API endpoint will allow AI to retrieve PBIs from the database.<br>This enables PBI iteration, tracking, and refinement.<br>✅ Benefit: AI can refine &amp; adjust PBIs dynamically over time.<br><br>4️⃣ Version 3: Full AI-Driven PBI Refinement Process<br>🔹 Step 6: Create a Guided Process for PBI Refinement Instead of an inline chat, we build a structured UI to guide both the user and AI in refining PBIs.<br><br>Step 1: User provides initial feature request.<br>Step 2: AI asks clarifying questions (e.g., “Is this a new feature or an improvement?”).<br>Step 3: AI generates Epics, User Stories &amp; Subtasks.<br>Step 4: AI applies learnings from past development.<br>Step 5: User reviews &amp; refines before finalizing.<br>Step 6: PBIs are submitted to the backlog.<br>✅ Benefit: Ensures high-quality PBIs while keeping the user in control.<br><br>🛠️ Technical Implementation Plan<br>Phase 1 (MVP)<br>✔ Backend:<br><br>Create a POST /api/pbis endpoint to submit PBIs.<br>Store PBIs in the AutoAgile database.<br>✔ Frontend:<br><br>Simple form UI for submitting PBIs.<br>Allow users to review &amp; edit before submission.<br>✔ AI Integration:<br><br>AI generates PBIs using structured templates.<br>AI checks against the Key Learnings &amp; Takeaways.<br>Phase 2 (API Retrieval)<br>✔ Backend:<br><br>Create GET /api/pbis to fetch PBIs.<br>Support filtering by status, priority, and dependencies.<br>✔ Frontend:<br><br>Display PBIs in the backlog.<br>Allow users to edit, refine &amp; iterate on PBIs.<br>Phase 3 (Full AI-Driven Workflow)<br>✔ Backend:<br><br>Implement AI-powered iterative refinement.<br>Store AI-generated clarifying questions &amp; user responses.<br>✔ Frontend:<br><br>Guided multi-step process for refining PBIs.<br>Interactive user review step before final submission.<br>✔ AI Integration:<br><br>AI actively asks clarifying questions before generating PBIs.<br>AI learns from past PBIs and Key Learnings to improve over time.<br>📌 Key Benefits of This System<br>✅ Automates repetitive work → AI breaks down features into PBIs.<br>✅ Ensures higher quality PBIs → AI cross-checks with Key Learnings.<br>✅ Prevents dependency issues → AI validates task relationships.<br>✅ Creates a structured backlog → PBIs are stored systematically.<br>✅ Streamlines estimation → AI assigns story points based on complexity.<br>✅ Saves developer time → Faster iteration &amp; execution of product features.<br><br>📌 Next Steps<br>🚀 Would you like to start with Phase 1 (Submitting PBIs to the database)?<br>Or do you want to explore UI/UX ideas for the guided process first?<br><br>You said:<br>Does this require an integration to for example OpenAI´s API or is it possible to create an Action in a custom GPT and when triggering that action the PBI´s are submitted to the db? <br>ChatGPT said:<br>It does not necessarily require OpenAI’s API integration if we use Custom GPT Actions. Here’s how both approaches would work:<br><br>1️⃣ Using Custom GPT Actions (No API Integration Needed)<br>✅ How It Works<br>Instead of calling an external API, we can define an Action in a Custom GPT that directly interacts with the database.<br><br>Trigger the Action<br><br>You (the user) initiate a request:<br>"Generate PBIs for the new feature and submit them to the backlog."<br>AI Generates PBIs<br><br>Based on the feature description, the AI structures Epics, User Stories, and Subtasks.<br>AI assigns story points, dependencies, and priority.<br>AI Executes the Action<br><br>The Custom GPT Action runs, submitting the generated PBIs directly into the project management tool’s database.<br>Confirmation &amp; Review<br><br>The system can return a confirmation message:<br>"PBIs have been submitted. Would you like to refine them further?"<br>✅ What’s Needed to Implement This?<br>Define a Custom GPT Action<br><br>The Action should be configured to execute a database query.<br>Example: "INSERT INTO pbis (title, description, type, priority, estimated_points) VALUES (...) "<br>Grant Secure Database Access<br><br>Custom GPT must be allowed to execute database operations securely.<br>We need a secure connection with proper authentication.<br>Ensure Query Execution is Reliable<br><br>Add error handling to prevent duplicate or incorrect entries.<br>Test &amp; Verify Data Submission<br><br>Run test cases to confirm PBIs are structured correctly in the backlog.<br>🔥 Pros of Using Custom GPT Actions<br>✅ No External API Required → Runs fully within the GPT model’s environment.<br>✅ Faster Development → No need for external API setup.<br>✅ Tighter Integration with AI → AI can validate &amp; refine PBIs before submission.<br>✅ More Secure → Data never leaves the controlled environment.<br><br>2️⃣ Using OpenAI’s API for External Integration<br>If you prefer a fully programmatic approach, you can call OpenAI’s API from your backend and integrate it with your project management tool.<br><br>✅ How It Works<br>Your backend sends a request to OpenAI’s API, asking it to generate PBIs.<br>OpenAI’s API returns structured PBIs (Epics, User Stories, Subtasks).<br>Your system validates the PBIs before inserting them into the database.<br>Your frontend retrieves and displays the PBIs in the backlog.<br>🔥 Pros of OpenAI’s API Approach<br>✅ More Customization → You control prompts, data structure, and validation.<br>✅ Can Run in the Background → Ideal for scheduled task automation.<br>✅ Scales Better → Works well for large teams &amp; real-time AI interactions.<br><br>🔷 Which Approach Should You Use?<br>🔹 If you want a fast, no-setup solution, go with Custom GPT Actions.<br>🔹 If you need more control, background processing, or external API calls, use OpenAI’s API.<br><br>🚀 Would you like help setting up a Custom GPT Action for submitting PBIs?<br><br>You said:<br>There is a price difference, right?<br>ChatGPT said:<br>Yes, there is a price difference between using Custom GPT Actions and OpenAI’s API integration. Here’s the breakdown:<br><br>💰 Cost of Using Custom GPT Actions<br>✅ Free (if using within ChatGPT Pro)<br>✅ No additional API costs<br>✅ No per-token billing<br><br>Why?<br>Custom GPT Actions run within ChatGPT’s existing infrastructure. OpenAI doesn’t charge per request for actions, but you must be on a ChatGPT Pro plan ($20/month).<br><br>However, if the Action connects to an external database or service that has costs (e.g., AWS, Firebase, Supabase, etc.), you’ll still need to pay for that separately.<br><br>💰 Cost of Using OpenAI’s API<br>❌ Pay-per-use pricing<br>✅ Costs depend on model + token usage<br><br>Current API Pricing (as of 2024)<br>Model Input (per 1K tokens) Output (per 1K tokens)<br>GPT-4-turbo $0.01 $0.03<br>GPT-4 $0.03 $0.06<br>GPT-3.5-turbo $0.0015 $0.002<br>Estimated API Cost for PBI Generation<br>If generating 5-10 PBIs at a time, a request might use 500-1000 tokens.<br>Cost per request: $0.005 - $0.02 (GPT-4-turbo)<br>If you generate PBIs 100 times per day:<br>GPT-4-turbo: ~$0.50 - $2/day<br>GPT-4: ~$1.50 - $6/day<br>GPT-3.5-turbo: ~$0.15 - $0.40/day<br>Additional Costs<br>Database storage: If using Firebase, AWS, or another DB, there may be small storage costs.<br>API Requests: If your project management tool has an API, it may have rate limits or extra costs.<br>Which is Cheaper?<br>If you already use ChatGPT Pro → Custom GPT Actions = FREE<br>No additional API costs.<br>Ideal if you just need to generate &amp; submit PBIs without extra complexity.<br>If you need external processing → OpenAI API = Paid (but scalable)<br>More expensive, but fully customizable.<br>Better if you want background processing, bulk PBI creation, or integrations.<br>🚀 Best Recommendation?<br>If you’re cost-conscious and just need basic PBI creation &amp; submission, start with Custom GPT Actions (free).<br><br>If you later need scalability, automation, and background AI processing, you can move to OpenAI’s API.<br><br>Would you like help defining a Custom GPT Action for submitting PBIs? 🔥<br><br>You said:<br>I want to do both but start with the API integration because I think that is what will evolve into a valuable feature with the possibilities for controlling the process and integrating it into the UI of our project management app.<br>It would be great to have the GPT action a backup for keeping costs down.<br>ChatGPT said:<br>That sounds like a great strategy! 🎯<br>By starting with API integration, you can fully control the process, customize it to fit the UI of your project management app, and enable deeper automation.<br><br>Later, implementing a Custom GPT Action as a backup will allow on-demand PBI creation while keeping costs down for smaller use cases.<br><br>✅ Step-by-Step Plan for API Integration<br>We\'ll start by integrating OpenAI’s API to generate PBIs and store them in your project management tool’s database.<br><br>Phase 1: API-Based PBI Submission<br>1️⃣ Define API Endpoints<br><br>POST /api/pbis → Accepts AI-generated PBIs and stores them in the database.<br>GET /api/pbis → Retrieves PBIs from the backlog.<br>2️⃣ Implement AI-Powered PBI Generation<br><br>Use OpenAI’s API (GPT-4-turbo) to generate Epics, User Stories, and Subtasks.<br>Apply Key Learnings &amp; Takeaways from past development.<br>3️⃣ Store PBIs in the Project Management Tool<br><br>Save PBIs in the AutoAgile database.<br>Attach metadata like priority, dependencies, and estimation.<br>4️⃣ Expose PBIs in the UI<br><br>Display PBIs in the backlog inside your Next.js app.<br>Allow user review &amp; refinement before finalizing.<br>Phase 2: Backup Solution - Custom GPT Action<br>If API costs become high, allow users to manually trigger a GPT Action to generate PBIs without API calls.<br><br>1️⃣ Create a Custom GPT Action<br><br>Action: generate_pbIs(feature_description: str) → JSON<br>Returns structured PBIs to be manually entered into the backlog.<br>2️⃣ Integrate with Your UI<br><br>Offer an option like "Generate PBIs via GPT" in the UI.<br>If API usage is high, fallback to GPT Action instead of API calls.<br>🚀 Next Steps<br>Would you like to:<br>1️⃣ Start defining the OpenAI API integration (set up endpoints, API calls)?<br>2️⃣ Set up the Custom GPT Action as a backup?<br>3️⃣ Plan both in parallel and create a roadmap?<br><br>You said:<br>Not yet. First:<br>1. I want us to discuss how it would be inplemented in the UI and provide the optimal UX.<br>2. Could we benefit from drafting the architecture, sequence diagrams, user flows?<br>3. Before we start coding, I want you to create PBI´s for the project and estimate complexity.<br>4. Create psql commands for creating the PBI´s.<br><br>Lets go through these steps one by one.<br><br>ChatGPT said:<br>That’s a solid structured approach! 🚀<br>By focusing on UX, architecture, planning, and PBI creation before coding, we’ll ensure a smooth implementation with fewer rewrites.<br><br>📌 Step 1: UI &amp; UX Discussion<br>Before implementing API-based PBI generation, we need to design how users will interact with it inside the Project Management System (PMS).<br><br>🎯 Key UX Considerations<br><br>✅ Where Should PBI Creation Happen?<br><br>Inside the Backlog View? (Best for structured planning)<br>Inside a Feature Request modal? (Good for quick task creation)<br>As a standalone "AI Assistant" panel? (Best for guided AI interaction)<br><br>✅ What Input Does the AI Need?<br><br>- Free-text Feature Description (User types in an idea)<br><br>- Structured Input (e.g., dropdowns for project, priority, complexity)<br><br>- Existing Tasks as Context (AI refines based on project backlog)<br><br>If we would start the process by asking the user to select item(s) from the backlog or create a new PBI, then we could keep the original feature idea/request and have the entire history saved.<br><br>I think the process should run the following way:<br>1. The user selects an item from the backlog or creates a new one.<br>2. AI asks a series of questions to gather more information about the feature, the goals, what problem it will solve, the expected outcome, etc..<br>Also, I think the AI would benefit from having access to the project’s history, the project’s goals, the project’s vision, the technical documentation.<br>We have to discuss what questions the AI should ask and how the user should input the answers.<br><br>✅ How Should the Output Be Handled?<br>Yes - Inline Editing: User sees generated PBIs and edits them before submission.<br>No - One-Click Submit: AI submits PBIs automatically.<br>Yes - Step-by-Step Refinement: AI asks clarifying questions before finalizing.<br><br>✅ Should the User See a Live Preview?<br>Yes → A real-time preview of the PBIs as the AI generates them.<br>No → AI generates them first, then the user reviews before submission.<br><br>✅ How Will Users Trigger AI PBI Generation?<br>Yes - Button → "Generate PBIs from Feature Request"<br>Maybe - Shortcut Command → /generate_pbi &lt;feature&gt;<br>No - Automated Suggestion → When a new feature is created, AI offers to generate PBIs<br><br>Instead of 3: Automated Suggestion → When a new feature is created, AI offers to help with refining the feature request and informs the user about the possibility of generating PBIs and what the feature request should include to make it easier for the AI to generate relevant PBIs.<br><br><br>📌 Suggested UI Flows<br><br>## Option 1: AI-Powered Backlog View<br>💡 Best for Teams Who Plan in Sprints 1️⃣ User navigates to the Backlog View.<br>2️⃣ Clicks “+ AI Generate PBIs” → A modal opens.<br>3️⃣ User inputs a feature description and selects project, priority, estimation strategy.<br>4. AI asks clarifying questions about the feature.<br>5. AI generates Epics, User Stories, and Subtasks.<br>6. User reviews and edits before submitting.<br><br>✅ Pros<br><br>Integrated into existing planning workflow.<br>Structured &amp; controlled task creation.<br>❌ Cons<br><br>Requires users to be inside the backlog to use AI.<br><br>## Option 2: Feature Request Modal with AI Assistance<br>💡 Best for Users Adding New Ideas 1️⃣ User opens Feature Request modal.<br>2️⃣ Enters high-level feature description.<br>3️⃣ Clicks “Generate PBIs” → AI suggests tasks.<br>4️⃣ User reviews, edits, and approves.<br>5️⃣ PBIs are pushed to the backlog.<br><br>✅ Pros<br><br>Works naturally when defining new features.<br>Faster workflow for brainstorming ideas.<br>❌ Cons<br><br>Might lack full backlog context when generating PBIs.<br><br>## Option 3: Dedicated AI Assistant Panel<br>💡 Best for Advanced AI-Driven Planning 1️⃣ User opens an “AI Assistant” panel.<br>2️⃣ AI asks clarifying questions about the feature.<br>3️⃣ AI generates Epics, User Stories, and Subtasks dynamically.<br>4️⃣ User modifies or approves PBIs.<br>5️⃣ PBIs are automatically pushed to the backlog.<br><br>✅ Pros<br>More structured, guided PBI refinement.<br>AI helps users refine vague ideas into structured tasks.<br><br>❌ Cons<br>More complex UI to implement.<br><br>I´m leaning towards option 1 with the added step 4. AI asks clarifying questions about the feature.<br><br>🚀 What’s Next?<br>1️⃣ Which UI flow do you prefer (Backlog, Feature Request Modal, AI Assistant)?<br>2️⃣ Would you like wireframes/mockups before moving to architecture diagrams?<br><br>See my answers in the list above:<br><br>That’s a fantastic refinement of the process! The form-based approach for AI clarifying questions makes a lot of sense. It improves UX efficiency and keeps the process structured, ensuring users don\'t feel overwhelmed by an open-ended conversation.<br><br>📌 Finalized UI/UX Approach<br>✅ Option 1: AI-Powered Backlog View (with Clarifying Questions &amp; Form Input)<br>💡 Best for Teams Who Plan in Sprints 1️⃣ User selects an existing item from the backlog or creates a new feature request.<br>2️⃣ Clicks “+ AI Generate PBIs” → A modal opens.<br>3️⃣ User inputs a feature description and selects project, priority, estimation strategy.<br>4️⃣ AI presents clarifying questions in a form UI (instead of free-text chat).<br>5️⃣ User fills in answers in structured fields → This data is stored for future reference.<br>6️⃣ AI generates Epics, User Stories, and Subtasks dynamically.<br>7️⃣ User reviews and edits before submitting PBIs to the backlog.<br><br>🚀 Why This Works Best<br>✅ Keeps the original feature request history → Tracks context properly.<br>✅ AI doesn’t rely on unstructured responses → User inputs structured answers via the form.<br>✅ Faster, structured refinement process → Reduces ambiguity in AI-generated PBIs.<br>✅ Guided yet flexible → AI only asks for details when necessary (conditional logic in the form).<br>✅ More efficient user experience → No need to manually structure long text responses.<br><br>📌 Next Steps<br>1️⃣ Define the AI Clarifying Questions for the Form<br>We need to list the essential clarifying questions AI should ask. Some of these will be always required, and others will be conditional (depending on the feature type, project, etc.).<br><br>Example questions:<br><br>What problem does this feature solve? (Always required)<br>Who is the primary user? (Required for user-facing features)<br>What is the expected outcome? (Always required)<br>Are there existing related tasks or dependencies? (Optional)<br>Does this feature impact security or performance? (Conditional: Only if related to infrastructure)<br>Would you like me to draft a complete list of questions based on best practices?<br><br>2️⃣ Create Wireframes for the Modal<br>Since we’re using a form-based approach instead of a chat-like UI, we should create wireframes for:<br><br>The initial “AI Generate PBIs” modal<br>The form layout for clarifying questions<br>The final PBI preview screen<br>Do you want Figma wireframes or a quick text-based UI flow first?<br><br>3️⃣ Technical Considerations<br>Would you like the AI-generated clarifying questions to be:<br><br>Fixed (predefined in the UI)? → Simpler, but less flexible.<br>Dynamically generated (AI decides what to ask)? → More flexible, but requires more logic.<br>🚀 Let’s finalize these details so we can move into architecture and implementation!<br><br><br>You said:<br>1. draft a complete list of questions based on best practices + what you consider being valuable to be able to provide the best quality PBI´s.<br><br>2. I think it should be a separate full page instead of a modal. <br>On that page user should be able to select a PBI from a dropdown combobox with search functionality.<br>(We are using headless UI combobox for the parent task selector)<br>From each PBI, the user should be able to click a button to open that PBI on the AI refinement page.<br><br>If you can provide figma wireframes that would be fantastic.<br><br>3. Let´s start with the fixed questions, and then maybe add dynamically generated if needed.<br>ChatGPT said:<br>🚀 Step 1: Complete List of AI Clarifying Questions for High-Quality PBIs<br>The goal is to ensure AI-generated PBIs are highly structured, relevant, and actionable. Below is a best-practice-based question framework that balances user intent, technical feasibility, and product strategy.<br><br>🟢 General Questions (Always Required)<br>What problem does this feature solve? (User’s pain point, why it’s needed)<br>What is the expected outcome or benefit? (How success is measured)<br>Who is the primary user? (Developers, admins, end-users, etc.)<br>What should the AI avoid when generating PBIs? (Redundant features, conflicting solutions, etc.)<br>Does this relate to an existing Epic or User Story? (Ensures PBIs are linked to relevant work)<br>🟡 Questions Based on Feature Type<br>🔹 For UI/UX Features<br>What are the key UI components or interactions?<br>Should it follow an existing design system? (Yes/No - If yes, specify the system)<br>Are there any accessibility considerations? (WCAG, ARIA, keyboard navigation, etc.)<br>🔹 For Backend/API Features<br>Which services, endpoints, or database models will be impacted?<br>Are there security concerns (authentication, authorization, sensitive data)?<br>Does it require performance optimizations (caching, async processing, etc.)?<br>🔹 For Automation or AI-Powered Features<br>Should the system make automatic decisions, or require human approval?<br>What are the key inputs and outputs?<br>Are there ethical concerns with automation (bias, transparency, etc.)?<br>🔹 For Integrations<br>Which external service(s) will this integrate with?<br>Are there API rate limits or other constraints?<br>Should the system sync data in real-time or on a schedule?<br>🔹 For Performance-Related Features<br>What is the current bottleneck? (DB queries, large payloads, front-end rendering, etc.)<br>What’s the performance expectation? (e.g., Reduce response time from 500ms → 100ms)<br>🟠 Workflow &amp; Dependencies<br>Are there any preconditions before this can be implemented? (Feature flags, migrations, etc.)<br>Does it require collaboration across teams? (Design, DevOps, Security, etc.)<br>Are there known risks or potential blockers? (Legacy code dependencies, technical debt, etc.)<br>🟣 Estimation &amp; Prioritization<br>What is the priority level? (Critical, High, Medium, Low)<br>What’s the estimated impact? (Revenue, user retention, operational efficiency)<br>Are there any deadlines or time-sensitive constraints? (Launch dates, dependencies, etc.)<br>💡 Expected AI Output<br>Using these questions, AI should generate:<br><br>✅ Epics (High-level objectives)<br>✅ User Stories (Breaking down the work for users)<br>✅ Subtasks (Actionable development steps)<br>This structured input ensures AI can create high-quality, actionable PBIs instead of vague tasks.<br><br>🚀 Step 2: Wireframes - Full Page UI for AI Refinement<br>I’ll create Figma wireframes showcasing the full-page AI refinement process with:<br><br>Dropdown Combobox (Headless UI) to select an existing PBI.<br>AI-Powered Refinement Page (Clarifying Questions + PBI Generation).<br>Buttons to Open &amp; Edit PBIs in the System.<br>🔹 Let me generate the wireframes and share them with you shortly. 🚀<br><br>🚀 Step 3: Fixed Questions First, Dynamic Later<br>✅ We’ll start with fixed questions (predefined in the UI) to keep the process structured. ✅ If we later need more intelligent, adaptive AI prompts, we can introduce dynamic question generation.<br><br>🎯 Next Steps<br>1️⃣ I\'ll generate and share the Figma wireframes.<br>2️⃣ Once we have UI approval, we’ll define the API &amp; database structure.<br>3️⃣ Then, we move to implementation 🚀.<br><br>Let me work on the wireframes now! 🎨📌<br><br>You said:<br>A lot of the questions in step 1 could be answered by giving the AI access to technical doccumentation. <br>If the AI doesn´t find the answer there, then the question should be asked. <br>ChatGPT said:<br>That’s a fantastic approach! 🚀 By leveraging technical documentation, we can reduce user input fatigue and ensure AI-generated PBIs are as accurate as possible.<br><br>🔹 Refining the AI Questioning Process<br>Instead of blindly asking all 25+ questions, we will implement a smart, two-step process:<br><br>Step 1: Auto-Extract Answers from Technical Documentation<br>📌 Before asking the user anything, AI will try to find the answer from:<br><br>Project’s API Documentation (Endpoints, models, authentication, rate limits).<br>Database Schema (Relationships, constraints, existing data models).<br>Project’s Vision &amp; Goals (Product strategy, company objectives).<br>Past User Stories &amp; Epics (Ensuring consistency with previous PBIs).<br>Best Practices &amp; Key Learnings (Mistakes to avoid, past development issues).<br>Step 2: Ask Only the Unanswered Questions<br>📌 If AI can’t find an answer, it will only ask the missing information.<br><br>For example:<br><br>If API docs specify affected endpoints, AI skips “Which endpoints will be impacted?”<br>If the database schema reveals relationships, AI skips “What data models are involved?”<br>If a past User Story addressed similar issues, AI suggests improvements instead of asking from scratch.<br>🔹 UX Implementation: Full-Page AI Refinement Flow<br>✅ Step 1: User selects or creates a PBI.<br>✅ Step 2: AI scans project documentation for answers.<br>✅ Step 3: AI generates PBIs, showing:<br><br>🔹 Pre-filled answers from documentation.<br>🔹 Questions only for missing details.<br>✅ Step 4: User reviews &amp; refines before submitting.<br>This ensures: 🚀 Less manual input → AI handles most of the work.<br>🚀 More accurate PBIs → AI cross-checks against existing docs.<br>🚀 Faster process → Users answer only what AI can’t infer.<br><br>🔹 What’s Next?<br>1️⃣ Figma Wireframes – I’ll create the UX flow for AI refinement.<br>2️⃣ Technical Documentation Strategy – We define:<br><br>📌 Where &amp; how AI should access project documentation.<br>📌 Which docs are needed for different PBI types.<br>3️⃣ Implementation Plan – Define how AI extracts, processes &amp; asks questions.<br>Would you like me to proceed with wireframes first or technical documentation strategy first? 🚀<br><br>You said:<br>AI Estimation is the next thing we should include, so don´t bother asking the user for that.<br>ChatGPT said:<br>Got it! 🚀 AI will automatically estimate Story Points instead of asking the user.<br><br>🔹 How AI Will Estimate Story Points<br>Instead of manually entering estimates, AI will calculate complexity, effort, and uncertainty based on:<br><br>1️⃣ Complexity Analysis<br><br>Database impact → Does it involve schema changes? Complex relationships?<br>API impact → Are new endpoints needed? Major refactoring required?<br>Frontend impact → Is it a UI change or deep business logic?<br>Security concerns → Are there authentication/authorization risks?<br>2️⃣ Effort Calculation<br><br>Lines of code (LOC) prediction → Based on past PBIs of similar scope.<br>Number of components affected → More files = higher effort.<br>Testing needs → How much unit &amp; integration testing is required?<br>3️⃣ Uncertainty Rating<br><br>Does the AI find enough documentation?<br>Does this feature require new technology?<br>Does the feature involve high unknowns (e.g., 3rd party integrations)?<br>📌 Estimation Output (Fibonacci Scale) AI will output a story point estimate (1, 2, 3, 5, 8, 13...) with reasoning:<br><br>🟢 Low Complexity → 1-3 Points<br>🟡 Moderate Complexity → 5-8 Points<br>🔴 High Complexity &amp; Unknowns → 13+ Points<br>🔹 Next Steps<br>1️⃣ Figma Wireframes (Integrate AI estimation in UI).<br>2️⃣ Define Estimation Algorithm (How AI calculates effort).<br>3️⃣ Implement AI Estimation API (Story Point prediction).<br><br>Where should AI show the estimated Story Points?<br><br>Inside the PBI form? (User sees it before submission).<br>Only in the backlog? (After PBI is saved).<br>Let me know, and I’ll include it in the wireframes! 🚀<br><br>You said:<br>I want the AI estimation included in the task description and currently all tasks have a field for estimation where user can enter story points, instead of adding another field for AI estimate I´m thinking we could indicate if estimation is set by AI or if it is human edited. What do you think?<br>ChatGPT said:<br>That’s a great approach! It keeps the UI clean while still allowing users to see whether the estimate was AI-generated or manually adjusted.<br><br>🔹 How to Implement AI Estimation in the Task Description<br>1️⃣ Story Points Field Behavior:<br><br>AI auto-generates an initial estimate when a PBI is created.<br>The user can edit the estimate manually if they disagree.<br>If the user changes the AI estimate, we mark it as human-edited.<br>2️⃣ Indicating AI vs. Human Estimates:<br><br>AI-generated estimate → Display a small "AI" badge next to the number.<br>User-edited estimate → Display a "User Edited" label (or remove the AI badge).<br>3️⃣ Example UI Representations:<br><br>AI Estimate: Story Points: 5 (AI)<br>User-Edited: Story Points: 8 (User Edited)<br>🔹 Backend &amp; Database Changes<br>Keep the existing story_points field.<br><br>Add a new field: is_ai_estimate (true/false)<br><br>true → AI-generated<br>false → Manually overridden<br>When AI sets the estimate, is_ai_estimate = true.<br><br>If a user changes the estimate, set is_ai_estimate = false.<br><br>🔹 User Flow<br>1️⃣ AI suggests an estimate when the PBI is created.<br>2️⃣ User can keep it or edit it.<br>3️⃣ If edited, it switches from AI to user-edited.<br>4️⃣ The UI reflects whether the estimate is AI-generated or manually adjusted.<br><br>🔹 Advantages of This Approach<br>✅ Minimal UI clutter – No extra fields.<br>✅ Users stay in control – AI assists but doesn’t dictate.<br>✅ Clear distinction between AI-generated &amp; human-set values.<br>✅ Easy implementation – Just an extra is_ai_estimate field.<br><br>Next Steps<br>🔹 Update PBI Creation Flow to auto-assign AI estimates.<br>🔹 Modify UI to display AI/User-edited status.<br>🔹 Ensure API updates is_ai_estimate correctly.<br><br>Would you like this logic to be included in the Figma wireframes? 🚀<br><br>You said:<br>Yes<br>ChatGPT said:<br>Great! I’ll now create Figma wireframes incorporating the AI Estimation Flow into the Task Refinement Page.<br><br>📌 Wireframe Features<br>🔹 Full-Page AI Refinement UI (instead of a modal)<br>🔹 Dropdown Combobox for Selecting a PBI (Headless UI)<br>🔹 Structured Form-Based AI Q&amp;A for refinement<br>🔹 Story Points Section:<br><br>Shows AI-estimated points with an "AI" badge<br>Allows manual override (switching to "User Edited")<br>I’ll generate the wireframes now! 🚀 Stay tuned. 🎨<br><br><br>Here is the wireframe for the AI-powered task refinement page! 🎨<br><br>Key Features in the Wireframe:<br>✅ Full-page layout for refining PBIs<br>✅ Dropdown combobox with search functionality to select a PBI<br>✅ AI-driven structured form where AI asks questions and users respond<br>✅ Story Points Estimation section:<br><br>Shows AI-generated values with an "AI" badge<br>Allows manual override, switching to a "User Edited" label<br>Would you like any modifications before we move forward with implementation? 🚀<br><br>You said:<br>Can you provide a text based UI description instead?<br>I just need the different components of the page that is needed and then I can do layout and design myself.<br>ChatGPT said:<br>AI-Powered Task Refinement Page - UI Structure<br>This page provides a structured interface for refining PBIs with AI assistance. Below is a breakdown of all the key UI components that should be included.<br><br>📌 Main Components<br>1️⃣ Page Header (Fixed at the Top)<br>Title: "AI-Powered Task Refinement"<br>Back Button: Returns to the backlog view<br>Help Icon: Opens a tooltip explaining how AI refinement works<br>2️⃣ Task Selection Section<br>Label: "Select a PBI to refine"<br>Dropdown Combobox (Headless UI)<br>Allows searching and selecting an existing PBI<br>Displays title &amp; ID of each task<br>Optional: Show the task type (Epic, User Story, Subtask)<br>Button: "Open Task in AI Refinement"<br>3️⃣ AI-Assisted Refinement Form (Dynamic Based on Task)<br>Section Title: "Refinement Questions"<br>Questions Panel<br>AI provides structured questions based on the selected task<br>Questions should be grouped by categories (e.g., Goals, Technical Details, Dependencies)<br>Each question has:<br>A text input (for short answers) or a textarea (for detailed explanations)<br>Pre-filled values if available from technical documentation<br>AI-generated suggestions (editable)<br>Toggle: "Show AI Recommendations"<br>Expands a section with AI-generated recommendations for this task<br>4️⃣ AI Estimation &amp; Task Metadata<br>Label: "Estimation &amp; Task Metadata"<br>Story Points Field:<br>Displays the AI-estimated story points (default)<br>Allows manual override with a "User Edited" indicator<br>Additional Metadata:<br>Task Priority (Low, Medium, High)<br>Dependencies (Auto-detected &amp; user-editable)<br>Related Epics / Stories<br>5️⃣ Actions &amp; Submission<br>Primary Button: "Submit to Backlog"<br>Secondary Button: "Save Draft" (to store refinement progress without submitting)<br>AI Chat History Panel (Optional): Displays past AI interactions for reference<br>💡 Notes &amp; Considerations<br>Form should autosave periodically to prevent data loss<br>If the user switches tasks, ask for confirmation before discarding unsaved changes<br>AI should fetch relevant project documentation before asking unnecessary questions<br>Would you like to adjust any sections or add more details? 🚀<br><br>You said:<br>Some suggested changes:<br>1. It should be possible to add a parent task including all subtasks, in case the user has already worked on creating epic, user stories and subtasks. That way AI gets the whole feature description and can start over.<br>2. We alreadu use autosave with debounced and we also use websockets for real time updates.<br>3. We need a simple settings page where user can choose AI provider (OpenAI to start with) and input API credentials:<br>ChatGPT said:<br>Great suggestions! Here’s the updated UI structure incorporating your changes:<br><br>📌 AI-Powered Task Refinement Page - Updated UI Structure<br>This page enables users to refine PBIs with AI assistance, while ensuring flexibility for existing task hierarchies, real-time updates, and AI provider settings.<br><br>1️⃣ Page Header (Fixed at the Top)<br>Title: "AI-Powered Task Refinement"<br>Back Button: Returns to the backlog view<br>Help Icon: Opens a tooltip explaining how AI refinement works<br>2️⃣ Task Selection Section<br>Label: "Select a PBI or Parent Task to Refine"<br>Dropdown Combobox (Headless UI)<br>Searchable dropdown to select an individual task (PBI, User Story, or Subtask)<br>Checkbox: "Include all subtasks" (if a parent task is selected)<br>Optional: Show task type (Epic, User Story, Subtask)<br>Button: "Open in AI Refinement"<br>✅ New Feature: If a parent task is selected with "Include all subtasks," the AI receives the full feature breakdown instead of an isolated task.<br><br>3️⃣ AI-Assisted Refinement Form<br>Section Title: "AI-Powered Refinement Questions"<br>Questions Panel<br>AI generates structured questions based on the selected task(s)<br>Grouped Categories:<br>Feature Goals &amp; Outcomes<br>Technical Requirements<br>Dependencies &amp; Risks<br>Acceptance Criteria<br>Each question has:<br>A text input (for short answers) or a textarea (for detailed explanations)<br>Pre-filled values if available from technical documentation<br>AI-generated suggestions (editable)<br>Toggle: "Show AI Recommendations"<br>Expands a section with AI-generated recommendations for this task<br>✅ New Feature: If the user selects a parent task with subtasks, AI dynamically adjusts questions to consider the full hierarchy.<br><br>4️⃣ AI Estimation &amp; Task Metadata<br>Label: "Estimation &amp; Task Metadata"<br>Story Points Field:<br>AI-generated story points (default)<br>Allows manual override with a "User Edited" indicator<br>Additional Metadata:<br>Task Priority (Low, Medium, High)<br>Dependencies (Auto-detected &amp; user-editable)<br>Related Epics / Stories<br>✅ New Feature: Parent-child relationships are preserved, meaning AI-generated metadata accounts for linked tasks.<br><br>5️⃣ Real-Time Updates &amp; Autosave<br>WebSocket-Enabled: Any changes made instantly update other users in real-time<br>Debounced Autosave: Saves progress periodically to prevent data loss<br>Undo/Redo: Simple history tracking for user changes<br>✅ New Feature: Uses existing WebSocket + debounced autosave setup for seamless real-time updates.<br><br>6️⃣ Actions &amp; Submission<br>Primary Button: "Submit to Backlog"<br>Secondary Button: "Save Draft" (stores refinement progress without submitting)<br>AI Chat History Panel (Optional): Displays past AI interactions for reference<br>7️⃣ AI Provider Settings Page<br>Page Title: "AI Integration Settings"<br>Dropdown: "Select AI Provider" (Starting with OpenAI)<br>Future support for multiple providers (Anthropic, Azure, Local AI, etc.)<br>API Key Input Field<br>Test Connection Button (Validates API credentials)<br>Save Settings Button<br>✅ New Feature: Centralized AI provider settings so users can configure API credentials before using AI-powered refinement.<br><br>Final Thoughts<br>✅ Supports full feature refinement (Epics + Subtasks)<br>✅ Uses real-time WebSocket updates + autosave (no lost work)<br>✅ Gives users control over AI-generated estimations<br>✅ Modular AI provider integration for future flexibility<br><br>🚀 Would you like any additional refinements before we move forward?<br><br>You said:<br>How do we give AI permission to write in the database?<br>ChatGPT said:<br>Granting AI Permission to Write to the Database<br>For AI to write to the database, we need a secure and controlled mechanism to ensure data integrity, security, and prevent unauthorized access.<br><br>1️⃣ Recommended Approach: Secure API Endpoint<br>Instead of allowing AI direct access to the database, we expose a controlled API that the AI can interact with.<br><br>✅ Steps to Implement<br>Create an API Endpoint (e.g., /api/pbis)<br><br>Accepts AI-generated Epics, User Stories, Subtasks<br>Validates input before saving to DB<br>Use API Authentication<br><br>API Key or OAuth2 Token: AI must authenticate before sending requests.<br>Store AI credentials securely in environment variables.<br>Define Access Controls<br><br>Restrict AI to specific actions (e.g., insert PBIs, update fields)<br>Role-Based Access Control (RBAC): AI should have a limited DB role (e.g., ai_writer).<br>Validate AI-Generated Data<br><br>Enforce schema validation (e.g., JSON Schema)<br>Apply business rules (e.g., prevent circular dependencies)<br>Use an AI Service Account<br><br>AI interacts as a designated system user (not a superuser)<br>Logs all AI interactions for auditability<br>2️⃣ Backend Implementation<br>📌 Create the API Route (/api/pbis)<br>python<br>Copy<br>Edit<br>from flask import Blueprint, request, jsonify<br>from models import db, PBI<br>from auth_middleware import verify_ai_auth<br><br>bp = Blueprint("ai_pbi_api", __name__)<br><br>@bp.route("/api/pbis", methods=["POST"])<br>@verify_ai_auth # ✅ Require AI authentication<br>def create_pbi():<br>"""Handles AI-generated PBI creation"""<br><br>data = request.json<br>if not data:<br>return jsonify({"error": "No data provided"}), 400<br><br># ✅ Validate input structure<br>required_fields = ["title", "description", "task_type", "priority"]<br>if not all(field in data for field in required_fields):<br>return jsonify({"error": "Missing required fields"}), 400<br><br># ✅ Insert into database<br>new_pbi = PBI(<br>title=data["title"],<br>description=data["description"],<br>task_type=data["task_type"],<br>priority=data.get("priority", "Medium"),<br>estimated_points=data.get("estimated_points", None), # AI estimate<br>created_by="AI", # Track source<br>)<br><br>db.session.add(new_pbi)<br>db.session.commit()<br><br>return jsonify({"message": "PBI created successfully", "id": new_pbi.id}), 201<br>3️⃣ AI Authentication &amp; Security<br>📌 Use API Keys to Restrict Access<br>Middleware for AI Authentication (auth_middleware.py):<br><br>python<br>Copy<br>Edit<br>from flask import request, jsonify<br>import os<br><br>VALID_AI_API_KEY = os.getenv("AI_API_KEY")<br><br>def verify_ai_auth(func):<br>"""Middleware to verify AI authentication"""<br>def wrapper(*args, **kwargs):<br>api_key = request.headers.get("X-API-Key")<br>if api_key != VALID_AI_API_KEY:<br>return jsonify({"error": "Unauthorized AI access"}), 403<br>return func(*args, **kwargs)<br>return wrapper<br>✅ AI must send a valid API key in the request headers:<br><br>json<br>Copy<br>Edit<br>{<br>"title": "Implement AI Task Refinement",<br>"description": "Break down AI task refinement into structured PBIs",<br>"task_type": "Epic",<br>"priority": "High",<br>"estimated_points": 8<br>}<br>🛡 Security Best Practices<br><br>Rotate API Keys regularly<br>Use role-based permissions<br>Log all AI interactions for debugging &amp; auditing<br>Limit AI’s scope to only modifying PBIs (not users, projects, etc.)<br>4️⃣ PostgreSQL Database Role for AI<br>Instead of granting full DB access, create a limited-access AI role:<br><br>sql<br>Copy<br>Edit<br>-- Create a restricted AI role<br>CREATE ROLE ai_writer WITH LOGIN PASSWORD \'securepassword\';<br><br>-- Grant permission to insert PBIs but not delete them<br>GRANT INSERT, UPDATE ON pbis TO ai_writer;<br>5️⃣ WebSocket Integration (Optional)<br>If using real-time updates, AI should broadcast new PBIs:<br><br>python<br>Copy<br>Edit<br>from flask_socketio import emit<br><br>@bp.route("/api/pbis", methods=["POST"])<br>@verify_ai_auth<br>def create_pbi():<br>...<br>db.session.commit()<br><br># 🔥 Notify frontend in real-time<br>emit("pbi_created", {"id": new_pbi.id, "title": new_pbi.title}, broadcast=True)<br><br>return jsonify({"message": "PBI created successfully", "id": new_pbi.id}), 201<br>🚀 Final Summary<br>✅ API Gateway: AI writes via /api/pbis<br>✅ Secure Authentication: AI must provide an API key<br>✅ Database Role: AI is limited to inserting/updating PBIs only<br>✅ Schema Validation: Ensures AI submits valid data<br>✅ Real-Time Updates: WebSocket notifications for new PBIs<br>🎯 Next Steps<br>Would you like:<br><br>To implement a similar API for retrieving PBIs? (GET /api/pbis)<br>AI role to have limited UPDATE access for task refinements?<br>A test script to verify AI authentication &amp; data submission?<br>You said:<br>I´m saving you questions for later.<br><br>For now let´s get back on track:<br><br>Can you rewrite the entire plan based on what we have agreed on so far and then move on to step 2.<br><br>1. [COMPLETED] I want us to discuss how it would be inplemented in the UI and provide the optimal UX.<br>2. Could we benefit from drafting the architecture, sequence diagrams, user flows?<br>3. Before we start coding, I want you to create PBI´s for the project and estimate complexity.<br>4. Create psql commands for creating the PBI´s.<br><br>Lets go through these steps one by one.<br>ChatGPT said:<br>AI-Powered PBI Generation &amp; Integration Plan<br>Overview<br>We are developing an AI-powered system that automates the generation and refinement of Epics, User Stories, and Subtasks in our Project Management System (PMS). The system will allow users to refine feature ideas through a structured, guided AI interaction and directly submit PBIs (Product Backlog Items) into the backlog.<br><br>✅ Phase 1: UI/UX Implementation Plan (Completed)<br>We have defined the best user experience (UX) strategy and identified how users will interact with the AI-driven PBI refinement system.<br><br>🔹 UI/UX Key Decisions<br>Where PBI Creation Happens<br><br>Inside the Backlog View → AI-assisted refinement happens within the backlog planning workflow.<br>Standalone Full-Page PBI Refinement View → Instead of a modal, we will use a full-page AI refinement interface.<br>How the User Provides Input<br><br>Users select an existing PBI from a searchable combobox (Headless UI)<br>Users can also add a parent task, including all its subtasks, ensuring AI gets full context.<br>How AI Refines PBIs<br><br>AI asks structured, best-practice questions<br>AI accesses technical documentation before asking questions, avoiding redundant prompts.<br>Inline Editing: AI suggests PBIs, and the user can edit before finalizing.<br>Step-by-Step Refinement: AI refines tasks dynamically based on user responses.<br>How Users Trigger AI PBI Generation<br><br>Button: "Generate PBIs from Feature Request"<br>AI Guidance: AI offers to help refine a new feature request when a user creates a new PBI.<br>Shortcut Command: /generate_pbi &lt;feature&gt;<br>How AI Estimation Works<br><br>AI assigns story points based on complexity<br>The estimation field tracks whether it was set by AI or manually edited by the user.<br>Users can override AI estimates manually.<br>🔹 Finalized UI Components for PBI Refinement Page<br>📌 PBI Refinement Page (Full-Screen UI)<br>🔍 Searchable Dropdown (Combobox)<br><br>Users search &amp; select a PBI from the backlog.<br>Users can add a parent task + subtasks for AI to analyze.<br>📜 AI Question Form<br><br>AI asks structured questions to refine the feature request.<br>AI auto-fills answers when possible (from project history/docs).<br>User fills in missing details manually.<br>📝 AI-Generated PBIs Section<br><br>AI dynamically generates Epics, User Stories, and Subtasks.<br>PBIs appear in real-time as AI refines them.<br>Users can edit PBIs inline before submission.<br>📊 AI Story Point Estimation<br><br>AI auto-assigns story points based on complexity.<br>Indicator shows if estimation was set by AI or edited by the user.<br>🔄 Autosave &amp; WebSockets<br><br>Debounced auto-save ensures changes are not lost.<br>WebSockets enable real-time updates across team members.<br>🛠 Settings Page<br><br>AI Provider Selection: OpenAI (default)<br>API Key Input: Secure credentials storage for AI integration.<br>🚀 Phase 2: Architecture, Sequence Diagrams &amp; User Flows<br>Why Do We Need This?<br>Before coding, we should draft architectural diagrams to:<br><br>Visualize the AI’s role in the PMS system.<br>Map the user flow from input to AI-generated PBIs.<br>Ensure database integration is structured correctly.<br>Avoid unnecessary rewrites by planning dependencies.<br>📌 Key Architectural Components<br>1️⃣ Frontend UI<br><br>Next.js React App<br>Full-page AI refinement view<br>Headless UI Combobox for PBI selection<br>Real-time UI updates via WebSockets<br>2️⃣ AI Processing<br><br>AI fetches context from technical documentation &amp; backlog<br>AI generates PBIs dynamically using structured rules<br>AI assigns story points automatically<br>AI questions the user only when necessary (context-aware questioning)<br>3️⃣ Backend API<br><br>/api/pbis → AI submits PBIs<br>/api/pbis/:id → Retrieve PBIs for AI refinement<br>Authentication middleware (API keys for AI)<br>WebSockets for real-time updates<br>4️⃣ Database Schema Changes<br><br>Track whether AI or user set story points<br>Store AI-generated questions &amp; answers for auditing<br>Link PBIs to their refined feature requests<br>📌 Next Steps<br>1️⃣ Create High-Level Architecture Diagram<br>How the UI, AI processing, and backend interact<br>Illustrate AI refinement flow &amp; database interactions<br>2️⃣ Define Sequence Diagrams<br>User selects a feature request → AI processes it → PBIs are generated<br>AI refines questions dynamically based on available data<br>3️⃣ Map User Flows<br>Step-by-step process from selecting a PBI to AI refinement &amp; submission<br>Flowchart of AI interaction (when to ask, when to auto-fill answers)<br>Would you like me to generate initial architecture &amp; sequence diagrams now? 🚀<br><br>You said:<br>Yes, I would like that but you also need to know waht I use for backend, right?<br>Python / flask and postgreSQL. <br>ChatGPT said:<br>Yes, knowing that your backend is built with Python / Flask and PostgreSQL is crucial for designing the architecture and sequence diagrams effectively.<br><br>I will now generate the following:<br><br>1️⃣ High-Level Architecture Diagram → How the UI, AI processing, and backend interact.<br>2️⃣ Sequence Diagram → How a PBI is refined by AI and submitted to the database.<br>3️⃣ User Flow Diagram → How users interact with AI-driven PBI refinement.<br><br>Since we are using Flask for the backend, I will ensure that the API endpoints and WebSocket handling align with Flask’s best practices. I’ll also consider PostgreSQL schema changes to store AI-generated PBIs effectively.<br><br>I will now generate these diagrams. Stay tuned! 🎨🚀<br><br><br>Analysis errored<br>python<br>Always show details<br><br>Copy<br>import matplotlib.pyplot as plt<br>import matplotlib.patches as mpatches<br><br>def draw_architecture_diagram():<br>fig, ax = plt.subplots(figsize=(10, 6))<br><br># Title<br>ax.set_title("High-Level Architecture: AI-Driven PBI Refinement", fontsize=14, fontweight="bold")<br><br># Components<br>components = {<br>"Frontend (Next.js)": (0.2, 0.8),<br>"AI Processing (GPT-4 API)": (0.5, 0.8),<br>"Backend API (Flask)": (0.8, 0.8),<br>"PostgreSQL Database": (0.8, 0.5),<br>"WebSockets (Real-time Updates)": (0.5, 0.5)<br>}<br><br># Draw components<br>for label, (x, y) in components.items():<br>ax.add_patch(mpatches.FancyBboxPatch((x-0.1, y-0.05), 0.2, 0.1, boxstyle="round,pad=0.1", <br>facecolor="lightblue", edgecolor="black"))<br>ax.text(x, y, label, ha="center", va="center", fontsize=10, fontweight="bold")<br><br># Arrows<br>arrows = [<br>((0.2, 0.8), (0.5, 0.8)), # Frontend → AI Processing<br>((0.5, 0.8), (0.8, 0.8)), # AI Processing → Backend API<br>((0.8, 0.8), (0.8, 0.5)), # Backend API → PostgreSQL<br>((0.8, 0.5), (0.8, 0.8)), # PostgreSQL → Backend API<br>((0.8, 0.8), (0.5, 0.5)), # Backend API → WebSockets<br>((0.5, 0.5), (0.2, 0.8)) # WebSockets → Frontend<br>]<br><br>for start, end in arrows:<br>ax.annotate("", xy=end, xytext=start, arrowprops=dict(arrowstyle="-&gt;", lw=2))<br><br># Hide axes<br>ax.set_xticks([])<br>ax.set_yticks([])<br>ax.set_frame_on(False)<br><br># Show diagram<br>plt.show()<br><br># Draw the architecture diagram<br>draw_architecture_diagram()<br>I encountered an issue generating the architecture diagram. Let me try again. \u200b\u200b<br><br><br>Analysis errored<br>python<br>Always show details<br><br>Copy<br>import matplotlib.pyplot as plt<br>import matplotlib.patches as mpatches<br><br>def draw_architecture_diagram():<br>fig, ax = plt.subplots(figsize=(10, 6))<br><br># Title<br>ax.set_title("High-Level Architecture: AI-Driven PBI Refinement", fontsize=14, fontweight="bold")<br><br># Components<br>components = {<br>"Frontend (Next.js)": (0.2, 0.8),<br>"AI Processing (GPT-4 API)": (0.5, 0.8),<br>"Backend API (Flask)": (0.8, 0.8),<br>"PostgreSQL Database": (0.8, 0.5),<br>"WebSockets (Real-time Updates)": (0.5, 0.5)<br>}<br><br># Draw components<br>for label, (x, y) in components.items():<br>ax.add_patch(mpatches.FancyBboxPatch((x-0.1, y-0.05), 0.2, 0.1, boxstyle="round,pad=0.1", <br>facecolor="lightblue", edgecolor="black"))<br>ax.text(x, y, label, ha="center", va="center", fontsize=10, fontweight="bold")<br><br># Arrows<br>arrows = [<br>((0.2, 0.8), (0.5, 0.8)), # Frontend → AI Processing<br>((0.5, 0.8), (0.8, 0.8)), # AI Processing → Backend API<br>((0.8, 0.8), (0.8, 0.5)), # Backend API → PostgreSQL<br>((0.8, 0.5), (0.8, 0.8)), # PostgreSQL → Backend API<br>((0.8, 0.8), (0.5, 0.5)), # Backend API → WebSockets<br>((0.5, 0.5), (0.2, 0.8)) # WebSockets → Frontend<br>]<br><br>for start, end in arrows:<br>ax.annotate("", xy=end, xytext=start, arrowprops=dict(arrowstyle="-&gt;", lw=2))<br><br># Hide axes<br>ax.set_xticks([])<br>ax.set_yticks([])<br>ax.set_frame_on(False)<br><br># Show diagram<br>plt.show()<br><br># Draw the architecture diagram<br>draw_architecture_diagram()<br>I encountered an issue generating the architecture diagram. Instead, I\'ll describe it textually:<br><br>High-Level Architecture for AI-Driven PBI Refinement<br>This architecture integrates Next.js (Frontend), Flask (Backend API), PostgreSQL (Database), GPT-4 API, and WebSockets for real-time updates.<br><br>Components &amp; Flow:<br>Frontend (Next.js)<br><br>User selects a feature request from the backlog.<br>Inputs details and triggers AI-powered PBI generation.<br>Displays AI-generated Epics, User Stories, and Subtasks.<br>Supports real-time updates via WebSockets.<br>AI Processing (GPT-4 API)<br><br>Receives feature descriptions and additional context.<br>Generates structured PBIs based on predefined rules and user input.<br>Returns the refined tasks to the backend.<br>Backend API (Flask)<br><br>Routes API requests between frontend and AI service.<br>Validates and processes AI-generated PBIs.<br>Stores tasks in PostgreSQL.<br>Emits WebSocket events for real-time updates.<br>PostgreSQL Database<br><br>Stores all Epics, User Stories, and Subtasks.<br>Keeps track of AI-generated vs. user-edited PBIs.<br>Supports search and retrieval.<br>WebSockets (Flask-SocketIO)<br><br>Sends real-time updates when PBIs are refined or modified.<br>Ensures users see immediate changes.<br>Next, I will draft sequence diagrams and user flows for how the AI-powered PBI refinement process works. Stay tuned! 🚀 \u200b\u200b<br><br>You said:<br>Please continue<br>ChatGPT said:<br>Step 2: Drafting Architecture, Sequence Diagrams, and User Flows<br>1️⃣ Sequence Diagram: AI-Driven PBI Refinement Process<br>Actors:<br>User: Interacts with the UI to refine and submit PBIs.<br>Frontend (Next.js): Sends user input to the backend and displays results.<br>Backend (Flask API): Processes requests and interacts with AI &amp; DB.<br>AI Service (GPT-4 API): Generates PBIs based on input.<br>PostgreSQL Database: Stores PBIs and project data.<br>🛠️ Step-by-Step Process (Refinement Flow)<br>1. User selects a PBI to refine<br>Opens the AI Refinement Page.<br>Selects an existing Feature Request from a searchable dropdown.<br>(Optional) Adds a parent task to include all subtasks.<br>2. AI Queries Additional Context<br>AI first searches project documentation (if available).<br>If AI finds missing information, it generates a set of questions.<br>User answers questions in a structured form UI.<br>AI refines its understanding.<br>3. AI Generates PBIs<br>AI generates:<br>Epics<br>User Stories<br>Subtasks<br>Assigns Story Points (AI estimation).<br>Saves metadata (dependencies, priorities, assignments).<br>4. User Reviews &amp; Modifies<br>The user can:<br>Edit task descriptions (inline).<br>Adjust AI estimations (AI tag remains visible).<br>Remove irrelevant PBIs.<br>5. PBIs are Auto-Saved &amp; Updated<br>Changes are debounced &amp; saved automatically.<br>WebSockets broadcast changes in real time to all users.<br>6. PBIs are Submitted to Backlog<br>When satisfied, the user confirms submission.<br>The system:<br>Inserts PBIs into PostgreSQL.<br>Marks them as ready for execution.<br>2️⃣ User Flow: AI-Powered Task Refinement<br>🟢 User selects a feature request → 🟡 AI refines using project data → 🟠 User answers missing details → 🔵 AI generates structured PBIs → 🟣 User reviews &amp; submits<br><br>3️⃣ Key Backend API Endpoints<br>These will be implemented in Flask.<br><br>Endpoint Method Description<br>/api/pbis POST Submit AI-generated PBIs to the backlog<br>/api/pbis/refine POST AI generates/refines PBIs<br>/api/pbis/questions GET AI fetches clarification questions if required<br>/api/pbis/{pbi_id} PATCH Updates a PBI after user edits<br>/api/pbis/{pbi_id}/submit POST Confirms PBI submission<br>4️⃣ Database Schema Updates (PostgreSQL)<br>To support AI-powered task refinement, we add new fields:<br><br>sql<br>Copy<br>Edit<br>ALTER TABLE tasks ADD COLUMN ai_generated BOOLEAN DEFAULT FALSE;<br>ALTER TABLE tasks ADD COLUMN refinement_status TEXT DEFAULT \'Pending\';<br>ALTER TABLE tasks ADD COLUMN estimation_source TEXT DEFAULT \'User\';<br>5️⃣ Next Steps<br>✔️ Architecture, API endpoints, and database updates are drafted.<br>➡️ Next: Move to Step 3 (Creating PBIs &amp; Estimating Complexity). 🚀<br><br>Let me know if you want any modifications before proceeding!<br><br>You said:<br>Where should we store the documentation?<br>Where in the UI should the user upload the documentation?<br>Is it possible to get the documentation automatically from an integration?<br>Like GitHub, VScode?<br>Provided that the documentation exist there.<br>Add a simple settings page where user can input API key and credentials.<br>ChatGPT said:<br>📌 Storing &amp; Managing Documentation for AI-Powered PBI Refinement<br>To ensure AI can access relevant project documentation for refining PBIs, we need a structured way to store, retrieve, and update documentation. Below is the plan:<br><br>1️⃣ Where Should We Store Documentation?<br>Option 1: PostgreSQL (Best for Structured Documentation)<br>Store documentation as text in a dedicated table.<br>Allows version control and easy retrieval.<br>Can be indexed for faster AI retrieval.<br>Table: project_documentation<br>sql<br>Copy<br>Edit<br>CREATE TABLE project_documentation (<br>id SERIAL PRIMARY KEY,<br>project_id INT REFERENCES projects(id) ON DELETE CASCADE,<br>title TEXT NOT NULL,<br>content TEXT NOT NULL,<br>source TEXT DEFAULT \'Manual Upload\',<br>uploaded_by INT REFERENCES users(id),<br>created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP<br>);<br>✅ Pros:<br><br>AI can efficiently search and extract relevant details.<br>Allows tagging &amp; filtering by source (e.g., GitHub, VS Code, Manual Upload).<br>Option 2: External File Storage (Best for Large Documents)<br>Store Markdown, TXT, or PDF files in an S3 bucket (AWS, Firebase, etc.).<br>Only metadata is stored in PostgreSQL.<br>AI retrieves and processes the files when needed.<br>Table: documentation_files<br>sql<br>Copy<br>Edit<br>CREATE TABLE documentation_files (<br>id SERIAL PRIMARY KEY,<br>project_id INT REFERENCES projects(id) ON DELETE CASCADE,<br>file_url TEXT NOT NULL,<br>file_type TEXT NOT NULL CHECK (file_type IN (\'md\', \'txt\', \'pdf\')),<br>uploaded_by INT REFERENCES users(id),<br>created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP<br>);<br>✅ Pros:<br><br>Supports larger documents that may not fit in PostgreSQL.<br>Allows manual file uploads and auto-fetching from integrations.<br>2️⃣ Where in the UI Should the User Upload Documentation?<br>📂 Dedicated "Documentation Management" Page (Settings)<br>Location: Inside Settings &gt; Documentation.<br>Features:<br>Upload Markdown, TXT, PDF files.<br>View &amp; Edit existing documentation.<br>Connect integrations (GitHub, VS Code, Notion, etc.).<br>Configure AI access permissions for each document.<br>3️⃣ Automatic Documentation Retrieval<br>✅ Can We Integrate with GitHub, VS Code, or Notion?<br>Yes! We can fetch project documentation automatically from these sources:<br><br>Integration Method Use Case<br>GitHub Fetch .md files via API Pull documentation from repos<br>VS Code Read local .md files Sync local project docs<br>Notion API connection Import structured docs<br>Google Drive API connection Fetch shared project docs<br>📡 Example: GitHub API Integration<br>Fetch .md documentation from a GitHub repo:<br><br>python<br>Copy<br>Edit<br>import requests<br><br>GITHUB_TOKEN = "your_personal_token"<br>REPO_OWNER = "your_username"<br>REPO_NAME = "your_project"<br><br>url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/docs"<br>headers = {"Authorization": f"token {GITHUB_TOKEN}"}<br><br>response = requests.get(url, headers=headers)<br>files = response.json()<br><br>for file in files:<br>if file["name"].endswith(".md"):<br>doc_content = requests.get(file["download_url"]).text<br>print("Fetched Documentation:", doc_content)<br>✅ Pros:<br><br>Automatically syncs up-to-date documentation from GitHub.<br>AI can use repo docs before asking the user for details.<br>4️⃣ Simple Settings Page for AI API &amp; Integrations<br>📌 Location: Settings &gt; AI &amp; Integrations<br><br>✅ User Can:<br><br>Enter OpenAI API Key.<br>Connect GitHub Repo (OAuth or Token).<br>Enable Auto-Fetch from VS Code, Notion, Google Drive.<br>Set AI Access Rules (e.g., Allow AI to modify docs?).<br>🔧 Database Table: integration_settings<br>sql<br>Copy<br>Edit<br>CREATE TABLE integration_settings (<br>id SERIAL PRIMARY KEY,<br>user_id INT REFERENCES users(id),<br>integration_name TEXT NOT NULL,<br>api_key TEXT NOT NULL,<br>is_enabled BOOLEAN DEFAULT TRUE,<br>created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP<br>);<br>🚀 Next Steps<br>✅ Implement API endpoints for documentation storage &amp; retrieval.<br>✅ Build a simple settings page to manage AI API &amp; integrations.<br>✅ Set up GitHub/VS Code sync for fetching docs automatically.<br><br>Would you like mockups or wireframes for the settings page? 📐</p><p></p>', 'status': 'Not Started', 'time_estimate': None, 'parent_id': None, 'created_at': datetime.datetime(2025, 2, 27, 23, 2, 31, 274292), 'task_type': 'Epic', 'updated_at': datetime.datetime(2025, 3, 13, 18, 26, 24, 778328), 'priority': None}
2025-03-13 20:21:22,849 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:21:22,850 INFO: [cached since 9548s ago] {'pk_1': 6}
2025-03-13 20:21:22,851 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-13 20:21:22,851 INFO: [cached since 9548s ago] {'pk_1': 5}
2025-03-13 20:21:22,869 INFO: Task ID 327 fetched with parent ID: None
2025-03-13 20:21:22,869 INFO: Task with ID 327 fetched successfully.
2025-03-13 20:21:22,870 DEBUG: Fetched Task Data: {'id': 327, 'name': '[UNIQUE feature] -\xa0Epic - AI-Powered PBI Refinement System', 'description': '<h2><strong>_italic text_Description:&nbsp;</strong></h2><p><em>As a user,</em></p><p><em>I want to refine feature requests into structured PBIs with AI assistance</em></p><p><em>so that I can quickly generate well-defined Epics, User Stories, and Subtasks.</em></p><hr><p></p><p>AI assists in refining raw feature requests into</p><p>structured plans, generating PRDs, Epics, User Stories, Acceptance Criteria, and Edge Cases. AI also provides intelligent estimations based on historical data and improves accuracy over time.</p><p><br><strong>📌 Final Order of Development</strong></p><p></p><p>1️⃣ <strong>AI API Integration &amp; Security (402)</strong></p><p>2️⃣ <strong>AI-Driven Questioning System (398)</strong></p><p>3️⃣ <strong>AI-Generated PBIs with Inline Editing (399)</strong></p><p>4️⃣ <strong>Full-Page AI-Powered PBI Refinement UI (397)</strong></p><p>5️⃣ <strong>AI-Generated Questions Based on Technical Docs (401)</strong></p><p>6️⃣ <strong>AI-Driven Story Point Estimation (400)</strong></p><p></p><p></p><p><strong>📌 Why This Order?</strong></p><p></p><p>✅ <strong>Security First:</strong> Ensures safe API interactions before sending user data.</p><p>✅ <strong>Logical Progression:</strong> AI refines PBIs → Generates tasks → Provides accurate estimates.</p><p>✅ <strong>Minimizing Rework:</strong> No need to <strong>rebuild</strong> AI logic after UI changes.</p><p>✅ <strong>Incremental Value:</strong> Each completed step <strong>adds value</strong> without requiring the full system to be finished.</p><hr><p>## AI driven creation of Epics, User stories and Subtasks.<br><br>I have, on several occasions when we have discussed a new feature and outlined a high level plan asked you to create epics, user stories and subtasks for the feature. <br><br>You are very good at this and it saves a lot of time compared to writing them manually. <br><br>However, we could create a process of this and include some steps were we go through some exercises that will help increase the quality of the output. <br>I´m thinking about:<br><br>1. Check PBI´s against the list of key learnings &amp; takeaways for future development<br><br>After every session we do a retrospective where we summarize the session. One section of the summary is a list of key learnings &amp; takeaways for future development. Those should be appended to a complete list of key takeaways for future development.<br><br>Every time we create epics, user stories and subtasks for a new feature we should check them against this checklist of key learnings &amp; takeaways for future development. We can then include reminder notes about this in the tasks they are relevant for. This way we will reduce repeating mistakes, be aware of technical considerations we have to adhere to etc..<br><br>2. Maybe use frameworks like user story mapping<br><br>3. Any other ideas for increasing quality. <br><br>## Estimation:<br><br>I have also asked you to estimate the complexity of the tasks using story points. <br><br>### We have used this framework for estimation:<br><br>We estimate tasks using **story points** with the **Fibonacci scale** (1, 2, 3, 5, 8, 13, etc.) That allows us to gauge the **complexity, effort, and uncertainty** associated with each task.<br><br>GPT (You) will assess every feature based on:<br><br>1. **Complexity**: How difficult the task is (e.g., architecture, database relationships, etc.).<br>2. **Effort**: How much time and effort will be required to code, test, and debug.<br>3. **Uncertainty**: Any unknowns or potential challenges (e.g., interacting with new parts of the system, external factors).<br><br>### **Benchmarking**:<br><br>To give context to these estimates:<br><br>- **1-2 Points**: Minor changes like renaming variables, small bug fixes.<br>- **3-5 Points**: Moderate tasks, involving some new logic, minor database changes, and testing.<br>- **8+ Points**: More complex tasks, like introducing new models, changing relationships in the database, or modifying core app logic with potential unknowns.<br><br>### Typical output for a user story:<br><br>🟢 User Story 1: Implement Parent Task Dropdown in Task Modal<br>As a user, I want to assign or change a parent task directly from the task modal, so that I can organize my tasks efficiently.<br><br>✅ Acceptance Criteria:<br><br>A dropdown appears in the task modal, listing all valid parent tasks.<br>Prevents selection of circular dependencies.<br>Updates the parent task dynamically upon selection.<br>Displays correct hierarchy after updates.<br>📌 Estimation: 5 Story Points<br><br>Complexity: Moderate – Needs task filtering, validation logic, and UI integration.<br>Effort: Moderate – Requires API calls, handling UI state, and testing.<br>Uncertainty: Low – We understand the task relationships well.<br><br><br>This is all a part of a larger idea about how to streamline and improve the quality of the entire product development lifecycle and development process.<br><br>## MVP version<br>I´ve been trying to figure out what would be the most valuable step to start building a feature for.<br><br>I think it is a feature that will allow you (AI) to submit these PBI´s into the backlog of my project management tool and then be able to read them back from the tool.<br><br>So the first draft of the feature would be to create a function that can take a PBI and submit it to the db of the project management tool.<br><br>## Version 2:<br>Next step would be to create a function that can read the PBIs from the db and return them as a list.<br><br>## Version 3<br>To take the whole process of refining a simple feature idea or request into more detailed and actionable PBI´s and integrate it into the project management tool.<br><br>### This would involve the following requirements:<br>- It needs to be a guided process, not just an inline chat.<br>- Both the user and the AI should follow the process.<br><br>To be further discussed....<br>I have a documented ideas in this notion file:<br><a target="_blank" rel="noopener noreferrer" href="https://www.notion.so/lacunamedia/Automating-task-creation-in-autoagile-191979257fc08007a001c3c2dc0a773f?pvs=4">https://www.notion.so/lacunamedia/Automating-task-creation-in-autoagile-191979257fc08007a001c3c2dc0a773f?pvs=4</a><br><br>## The development process:<br>Generating code for the feature based on the PBI´s.<br>The process of you (AI) and me coding together is a process of it´s own that we are working on a plan for optimizing. <br>See separate document: \'optimizing_our_development_process.md\' <br><br><br><br>How can we automate the whole process of:<br><br>1. Create Epics, User stories and subtasks from a refined feature request.<br>2. Script them into the database of autoagile<br>3. Allow AI to read the tasks<br><br><br>This is a great initiative that will systematize and automate the process of turning feature ideas into well-structured PBIs (Epics, User Stories, and Subtasks). Below is a structured approach to refining and implementing this system.<br><br>📌 Summary of the Planned Process<br>We are aiming to automate the workflow of refining a feature request into actionable PBIs and integrating them directly into the project management tool. The long-term vision is to ensure quality, consistency, and efficiency in product development.<br><br>🚀 Proposed Steps for Automating AI-Driven PBI Creation<br>1️⃣ Create Epics, User Stories &amp; Subtasks from a Refined Feature Request<br>🔹 Step 1: Validate PBIs Against "Key Learnings &amp; Takeaways"<br><br>After every session, we capture Key Learnings &amp; Takeaways for future development.<br>When generating new PBIs, we cross-check them against this checklist.<br>If relevant, reminder notes are added to tasks (e.g., “Avoid X issue seen in past development”).<br>✅ Benefit: Prevent repeated mistakes, ensure technical consistency.<br><br>🔹 Step 2: Use Frameworks to Improve PBI Quality<br><br>User Story Mapping: Break down the feature based on user journeys.<br>Impact Mapping: Understand the business &amp; user impact.<br>Jobs-to-Be-Done (JTBD): Define tasks based on what the user is trying to achieve.<br>BDD (Behavior-Driven Development) Scenarios: Define Acceptance Criteria in a structured format.<br>✅ Benefit: Increases clarity, prioritization, and alignment with user goals.<br><br>🔹 Step 3: Automate AI-Driven PBI Generation<br><br>AI takes a high-level feature request and breaks it down into Epics, User Stories, and Subtasks.<br>AI adds relevant acceptance criteria and ensures no conflicting dependencies.<br>User can review &amp; refine before submitting to the backlog.<br>✅ Benefit: Reduces manual effort, ensures consistency.<br><br>2️⃣ Submit PBIs to the AutoAgile Database<br>🔹 Step 4: Create API for AI to Submit PBIs<br><br>A POST API endpoint will allow AI to write PBIs into the project management system.<br>AI will assign metadata (e.g., priority, estimated effort, dependencies).<br>✅ Benefit: Ensures a structured backlog instead of scattered notes.<br><br>3️⃣ Allow AI to Read and Retrieve PBIs<br>🔹 Step 5: Create API to Fetch PBIs<br><br>A GET API endpoint will allow AI to retrieve PBIs from the database.<br>This enables PBI iteration, tracking, and refinement.<br>✅ Benefit: AI can refine &amp; adjust PBIs dynamically over time.<br><br>4️⃣ Version 3: Full AI-Driven PBI Refinement Process<br>🔹 Step 6: Create a Guided Process for PBI Refinement Instead of an inline chat, we build a structured UI to guide both the user and AI in refining PBIs.<br><br>Step 1: User provides initial feature request.<br>Step 2: AI asks clarifying questions (e.g., “Is this a new feature or an improvement?”).<br>Step 3: AI generates Epics, User Stories &amp; Subtasks.<br>Step 4: AI applies learnings from past development.<br>Step 5: User reviews &amp; refines before finalizing.<br>Step 6: PBIs are submitted to the backlog.<br>✅ Benefit: Ensures high-quality PBIs while keeping the user in control.<br><br>🛠️ Technical Implementation Plan<br>Phase 1 (MVP)<br>✔ Backend:<br><br>Create a POST /api/pbis endpoint to submit PBIs.<br>Store PBIs in the AutoAgile database.<br>✔ Frontend:<br><br>Simple form UI for submitting PBIs.<br>Allow users to review &amp; edit before submission.<br>✔ AI Integration:<br><br>AI generates PBIs using structured templates.<br>AI checks against the Key Learnings &amp; Takeaways.<br>Phase 2 (API Retrieval)<br>✔ Backend:<br><br>Create GET /api/pbis to fetch PBIs.<br>Support filtering by status, priority, and dependencies.<br>✔ Frontend:<br><br>Display PBIs in the backlog.<br>Allow users to edit, refine &amp; iterate on PBIs.<br>Phase 3 (Full AI-Driven Workflow)<br>✔ Backend:<br><br>Implement AI-powered iterative refinement.<br>Store AI-generated clarifying questions &amp; user responses.<br>✔ Frontend:<br><br>Guided multi-step process for refining PBIs.<br>Interactive user review step before final submission.<br>✔ AI Integration:<br><br>AI actively asks clarifying questions before generating PBIs.<br>AI learns from past PBIs and Key Learnings to improve over time.<br>📌 Key Benefits of This System<br>✅ Automates repetitive work → AI breaks down features into PBIs.<br>✅ Ensures higher quality PBIs → AI cross-checks with Key Learnings.<br>✅ Prevents dependency issues → AI validates task relationships.<br>✅ Creates a structured backlog → PBIs are stored systematically.<br>✅ Streamlines estimation → AI assigns story points based on complexity.<br>✅ Saves developer time → Faster iteration &amp; execution of product features.<br><br>📌 Next Steps<br>🚀 Would you like to start with Phase 1 (Submitting PBIs to the database)?<br>Or do you want to explore UI/UX ideas for the guided process first?<br><br>You said:<br>Does this require an integration to for example OpenAI´s API or is it possible to create an Action in a custom GPT and when triggering that action the PBI´s are submitted to the db? <br>ChatGPT said:<br>It does not necessarily require OpenAI’s API integration if we use Custom GPT Actions. Here’s how both approaches would work:<br><br>1️⃣ Using Custom GPT Actions (No API Integration Needed)<br>✅ How It Works<br>Instead of calling an external API, we can define an Action in a Custom GPT that directly interacts with the database.<br><br>Trigger the Action<br><br>You (the user) initiate a request:<br>"Generate PBIs for the new feature and submit them to the backlog."<br>AI Generates PBIs<br><br>Based on the feature description, the AI structures Epics, User Stories, and Subtasks.<br>AI assigns story points, dependencies, and priority.<br>AI Executes the Action<br><br>The Custom GPT Action runs, submitting the generated PBIs directly into the project management tool’s database.<br>Confirmation &amp; Review<br><br>The system can return a confirmation message:<br>"PBIs have been submitted. Would you like to refine them further?"<br>✅ What’s Needed to Implement This?<br>Define a Custom GPT Action<br><br>The Action should be configured to execute a database query.<br>Example: "INSERT INTO pbis (title, description, type, priority, estimated_points) VALUES (...) "<br>Grant Secure Database Access<br><br>Custom GPT must be allowed to execute database operations securely.<br>We need a secure connection with proper authentication.<br>Ensure Query Execution is Reliable<br><br>Add error handling to prevent duplicate or incorrect entries.<br>Test &amp; Verify Data Submission<br><br>Run test cases to confirm PBIs are structured correctly in the backlog.<br>🔥 Pros of Using Custom GPT Actions<br>✅ No External API Required → Runs fully within the GPT model’s environment.<br>✅ Faster Development → No need for external API setup.<br>✅ Tighter Integration with AI → AI can validate &amp; refine PBIs before submission.<br>✅ More Secure → Data never leaves the controlled environment.<br><br>2️⃣ Using OpenAI’s API for External Integration<br>If you prefer a fully programmatic approach, you can call OpenAI’s API from your backend and integrate it with your project management tool.<br><br>✅ How It Works<br>Your backend sends a request to OpenAI’s API, asking it to generate PBIs.<br>OpenAI’s API returns structured PBIs (Epics, User Stories, Subtasks).<br>Your system validates the PBIs before inserting them into the database.<br>Your frontend retrieves and displays the PBIs in the backlog.<br>🔥 Pros of OpenAI’s API Approach<br>✅ More Customization → You control prompts, data structure, and validation.<br>✅ Can Run in the Background → Ideal for scheduled task automation.<br>✅ Scales Better → Works well for large teams &amp; real-time AI interactions.<br><br>🔷 Which Approach Should You Use?<br>🔹 If you want a fast, no-setup solution, go with Custom GPT Actions.<br>🔹 If you need more control, background processing, or external API calls, use OpenAI’s API.<br><br>🚀 Would you like help setting up a Custom GPT Action for submitting PBIs?<br><br>You said:<br>There is a price difference, right?<br>ChatGPT said:<br>Yes, there is a price difference between using Custom GPT Actions and OpenAI’s API integration. Here’s the breakdown:<br><br>💰 Cost of Using Custom GPT Actions<br>✅ Free (if using within ChatGPT Pro)<br>✅ No additional API costs<br>✅ No per-token billing<br><br>Why?<br>Custom GPT Actions run within ChatGPT’s existing infrastructure. OpenAI doesn’t charge per request for actions, but you must be on a ChatGPT Pro plan ($20/month).<br><br>However, if the Action connects to an external database or service that has costs (e.g., AWS, Firebase, Supabase, etc.), you’ll still need to pay for that separately.<br><br>💰 Cost of Using OpenAI’s API<br>❌ Pay-per-use pricing<br>✅ Costs depend on model + token usage<br><br>Current API Pricing (as of 2024)<br>Model Input (per 1K tokens) Output (per 1K tokens)<br>GPT-4-turbo $0.01 $0.03<br>GPT-4 $0.03 $0.06<br>GPT-3.5-turbo $0.0015 $0.002<br>Estimated API Cost for PBI Generation<br>If generating 5-10 PBIs at a time, a request might use 500-1000 tokens.<br>Cost per request: $0.005 - $0.02 (GPT-4-turbo)<br>If you generate PBIs 100 times per day:<br>GPT-4-turbo: ~$0.50 - $2/day<br>GPT-4: ~$1.50 - $6/day<br>GPT-3.5-turbo: ~$0.15 - $0.40/day<br>Additional Costs<br>Database storage: If using Firebase, AWS, or another DB, there may be small storage costs.<br>API Requests: If your project management tool has an API, it may have rate limits or extra costs.<br>Which is Cheaper?<br>If you already use ChatGPT Pro → Custom GPT Actions = FREE<br>No additional API costs.<br>Ideal if you just need to generate &amp; submit PBIs without extra complexity.<br>If you need external processing → OpenAI API = Paid (but scalable)<br>More expensive, but fully customizable.<br>Better if you want background processing, bulk PBI creation, or integrations.<br>🚀 Best Recommendation?<br>If you’re cost-conscious and just need basic PBI creation &amp; submission, start with Custom GPT Actions (free).<br><br>If you later need scalability, automation, and background AI processing, you can move to OpenAI’s API.<br><br>Would you like help defining a Custom GPT Action for submitting PBIs? 🔥<br><br>You said:<br>I want to do both but start with the API integration because I think that is what will evolve into a valuable feature with the possibilities for controlling the process and integrating it into the UI of our project management app.<br>It would be great to have the GPT action a backup for keeping costs down.<br>ChatGPT said:<br>That sounds like a great strategy! 🎯<br>By starting with API integration, you can fully control the process, customize it to fit the UI of your project management app, and enable deeper automation.<br><br>Later, implementing a Custom GPT Action as a backup will allow on-demand PBI creation while keeping costs down for smaller use cases.<br><br>✅ Step-by-Step Plan for API Integration<br>We\'ll start by integrating OpenAI’s API to generate PBIs and store them in your project management tool’s database.<br><br>Phase 1: API-Based PBI Submission<br>1️⃣ Define API Endpoints<br><br>POST /api/pbis → Accepts AI-generated PBIs and stores them in the database.<br>GET /api/pbis → Retrieves PBIs from the backlog.<br>2️⃣ Implement AI-Powered PBI Generation<br><br>Use OpenAI’s API (GPT-4-turbo) to generate Epics, User Stories, and Subtasks.<br>Apply Key Learnings &amp; Takeaways from past development.<br>3️⃣ Store PBIs in the Project Management Tool<br><br>Save PBIs in the AutoAgile database.<br>Attach metadata like priority, dependencies, and estimation.<br>4️⃣ Expose PBIs in the UI<br><br>Display PBIs in the backlog inside your Next.js app.<br>Allow user review &amp; refinement before finalizing.<br>Phase 2: Backup Solution - Custom GPT Action<br>If API costs become high, allow users to manually trigger a GPT Action to generate PBIs without API calls.<br><br>1️⃣ Create a Custom GPT Action<br><br>Action: generate_pbIs(feature_description: str) → JSON<br>Returns structured PBIs to be manually entered into the backlog.<br>2️⃣ Integrate with Your UI<br><br>Offer an option like "Generate PBIs via GPT" in the UI.<br>If API usage is high, fallback to GPT Action instead of API calls.<br>🚀 Next Steps<br>Would you like to:<br>1️⃣ Start defining the OpenAI API integration (set up endpoints, API calls)?<br>2️⃣ Set up the Custom GPT Action as a backup?<br>3️⃣ Plan both in parallel and create a roadmap?<br><br>You said:<br>Not yet. First:<br>1. I want us to discuss how it would be inplemented in the UI and provide the optimal UX.<br>2. Could we benefit from drafting the architecture, sequence diagrams, user flows?<br>3. Before we start coding, I want you to create PBI´s for the project and estimate complexity.<br>4. Create psql commands for creating the PBI´s.<br><br>Lets go through these steps one by one.<br><br>ChatGPT said:<br>That’s a solid structured approach! 🚀<br>By focusing on UX, architecture, planning, and PBI creation before coding, we’ll ensure a smooth implementation with fewer rewrites.<br><br>📌 Step 1: UI &amp; UX Discussion<br>Before implementing API-based PBI generation, we need to design how users will interact with it inside the Project Management System (PMS).<br><br>🎯 Key UX Considerations<br><br>✅ Where Should PBI Creation Happen?<br><br>Inside the Backlog View? (Best for structured planning)<br>Inside a Feature Request modal? (Good for quick task creation)<br>As a standalone "AI Assistant" panel? (Best for guided AI interaction)<br><br>✅ What Input Does the AI Need?<br><br>- Free-text Feature Description (User types in an idea)<br><br>- Structured Input (e.g., dropdowns for project, priority, complexity)<br><br>- Existing Tasks as Context (AI refines based on project backlog)<br><br>If we would start the process by asking the user to select item(s) from the backlog or create a new PBI, then we could keep the original feature idea/request and have the entire history saved.<br><br>I think the process should run the following way:<br>1. The user selects an item from the backlog or creates a new one.<br>2. AI asks a series of questions to gather more information about the feature, the goals, what problem it will solve, the expected outcome, etc..<br>Also, I think the AI would benefit from having access to the project’s history, the project’s goals, the project’s vision, the technical documentation.<br>We have to discuss what questions the AI should ask and how the user should input the answers.<br><br>✅ How Should the Output Be Handled?<br>Yes - Inline Editing: User sees generated PBIs and edits them before submission.<br>No - One-Click Submit: AI submits PBIs automatically.<br>Yes - Step-by-Step Refinement: AI asks clarifying questions before finalizing.<br><br>✅ Should the User See a Live Preview?<br>Yes → A real-time preview of the PBIs as the AI generates them.<br>No → AI generates them first, then the user reviews before submission.<br><br>✅ How Will Users Trigger AI PBI Generation?<br>Yes - Button → "Generate PBIs from Feature Request"<br>Maybe - Shortcut Command → /generate_pbi &lt;feature&gt;<br>No - Automated Suggestion → When a new feature is created, AI offers to generate PBIs<br><br>Instead of 3: Automated Suggestion → When a new feature is created, AI offers to help with refining the feature request and informs the user about the possibility of generating PBIs and what the feature request should include to make it easier for the AI to generate relevant PBIs.<br><br><br>📌 Suggested UI Flows<br><br>## Option 1: AI-Powered Backlog View<br>💡 Best for Teams Who Plan in Sprints 1️⃣ User navigates to the Backlog View.<br>2️⃣ Clicks “+ AI Generate PBIs” → A modal opens.<br>3️⃣ User inputs a feature description and selects project, priority, estimation strategy.<br>4. AI asks clarifying questions about the feature.<br>5. AI generates Epics, User Stories, and Subtasks.<br>6. User reviews and edits before submitting.<br><br>✅ Pros<br><br>Integrated into existing planning workflow.<br>Structured &amp; controlled task creation.<br>❌ Cons<br><br>Requires users to be inside the backlog to use AI.<br><br>## Option 2: Feature Request Modal with AI Assistance<br>💡 Best for Users Adding New Ideas 1️⃣ User opens Feature Request modal.<br>2️⃣ Enters high-level feature description.<br>3️⃣ Clicks “Generate PBIs” → AI suggests tasks.<br>4️⃣ User reviews, edits, and approves.<br>5️⃣ PBIs are pushed to the backlog.<br><br>✅ Pros<br><br>Works naturally when defining new features.<br>Faster workflow for brainstorming ideas.<br>❌ Cons<br><br>Might lack full backlog context when generating PBIs.<br><br>## Option 3: Dedicated AI Assistant Panel<br>💡 Best for Advanced AI-Driven Planning 1️⃣ User opens an “AI Assistant” panel.<br>2️⃣ AI asks clarifying questions about the feature.<br>3️⃣ AI generates Epics, User Stories, and Subtasks dynamically.<br>4️⃣ User modifies or approves PBIs.<br>5️⃣ PBIs are automatically pushed to the backlog.<br><br>✅ Pros<br>More structured, guided PBI refinement.<br>AI helps users refine vague ideas into structured tasks.<br><br>❌ Cons<br>More complex UI to implement.<br><br>I´m leaning towards option 1 with the added step 4. AI asks clarifying questions about the feature.<br><br>🚀 What’s Next?<br>1️⃣ Which UI flow do you prefer (Backlog, Feature Request Modal, AI Assistant)?<br>2️⃣ Would you like wireframes/mockups before moving to architecture diagrams?<br><br>See my answers in the list above:<br><br>That’s a fantastic refinement of the process! The form-based approach for AI clarifying questions makes a lot of sense. It improves UX efficiency and keeps the process structured, ensuring users don\'t feel overwhelmed by an open-ended conversation.<br><br>📌 Finalized UI/UX Approach<br>✅ Option 1: AI-Powered Backlog View (with Clarifying Questions &amp; Form Input)<br>💡 Best for Teams Who Plan in Sprints 1️⃣ User selects an existing item from the backlog or creates a new feature request.<br>2️⃣ Clicks “+ AI Generate PBIs” → A modal opens.<br>3️⃣ User inputs a feature description and selects project, priority, estimation strategy.<br>4️⃣ AI presents clarifying questions in a form UI (instead of free-text chat).<br>5️⃣ User fills in answers in structured fields → This data is stored for future reference.<br>6️⃣ AI generates Epics, User Stories, and Subtasks dynamically.<br>7️⃣ User reviews and edits before submitting PBIs to the backlog.<br><br>🚀 Why This Works Best<br>✅ Keeps the original feature request history → Tracks context properly.<br>✅ AI doesn’t rely on unstructured responses → User inputs structured answers via the form.<br>✅ Faster, structured refinement process → Reduces ambiguity in AI-generated PBIs.<br>✅ Guided yet flexible → AI only asks for details when necessary (conditional logic in the form).<br>✅ More efficient user experience → No need to manually structure long text responses.<br><br>📌 Next Steps<br>1️⃣ Define the AI Clarifying Questions for the Form<br>We need to list the essential clarifying questions AI should ask. Some of these will be always required, and others will be conditional (depending on the feature type, project, etc.).<br><br>Example questions:<br><br>What problem does this feature solve? (Always required)<br>Who is the primary user? (Required for user-facing features)<br>What is the expected outcome? (Always required)<br>Are there existing related tasks or dependencies? (Optional)<br>Does this feature impact security or performance? (Conditional: Only if related to infrastructure)<br>Would you like me to draft a complete list of questions based on best practices?<br><br>2️⃣ Create Wireframes for the Modal<br>Since we’re using a form-based approach instead of a chat-like UI, we should create wireframes for:<br><br>The initial “AI Generate PBIs” modal<br>The form layout for clarifying questions<br>The final PBI preview screen<br>Do you want Figma wireframes or a quick text-based UI flow first?<br><br>3️⃣ Technical Considerations<br>Would you like the AI-generated clarifying questions to be:<br><br>Fixed (predefined in the UI)? → Simpler, but less flexible.<br>Dynamically generated (AI decides what to ask)? → More flexible, but requires more logic.<br>🚀 Let’s finalize these details so we can move into architecture and implementation!<br><br><br>You said:<br>1. draft a complete list of questions based on best practices + what you consider being valuable to be able to provide the best quality PBI´s.<br><br>2. I think it should be a separate full page instead of a modal. <br>On that page user should be able to select a PBI from a dropdown combobox with search functionality.<br>(We are using headless UI combobox for the parent task selector)<br>From each PBI, the user should be able to click a button to open that PBI on the AI refinement page.<br><br>If you can provide figma wireframes that would be fantastic.<br><br>3. Let´s start with the fixed questions, and then maybe add dynamically generated if needed.<br>ChatGPT said:<br>🚀 Step 1: Complete List of AI Clarifying Questions for High-Quality PBIs<br>The goal is to ensure AI-generated PBIs are highly structured, relevant, and actionable. Below is a best-practice-based question framework that balances user intent, technical feasibility, and product strategy.<br><br>🟢 General Questions (Always Required)<br>What problem does this feature solve? (User’s pain point, why it’s needed)<br>What is the expected outcome or benefit? (How success is measured)<br>Who is the primary user? (Developers, admins, end-users, etc.)<br>What should the AI avoid when generating PBIs? (Redundant features, conflicting solutions, etc.)<br>Does this relate to an existing Epic or User Story? (Ensures PBIs are linked to relevant work)<br>🟡 Questions Based on Feature Type<br>🔹 For UI/UX Features<br>What are the key UI components or interactions?<br>Should it follow an existing design system? (Yes/No - If yes, specify the system)<br>Are there any accessibility considerations? (WCAG, ARIA, keyboard navigation, etc.)<br>🔹 For Backend/API Features<br>Which services, endpoints, or database models will be impacted?<br>Are there security concerns (authentication, authorization, sensitive data)?<br>Does it require performance optimizations (caching, async processing, etc.)?<br>🔹 For Automation or AI-Powered Features<br>Should the system make automatic decisions, or require human approval?<br>What are the key inputs and outputs?<br>Are there ethical concerns with automation (bias, transparency, etc.)?<br>🔹 For Integrations<br>Which external service(s) will this integrate with?<br>Are there API rate limits or other constraints?<br>Should the system sync data in real-time or on a schedule?<br>🔹 For Performance-Related Features<br>What is the current bottleneck? (DB queries, large payloads, front-end rendering, etc.)<br>What’s the performance expectation? (e.g., Reduce response time from 500ms → 100ms)<br>🟠 Workflow &amp; Dependencies<br>Are there any preconditions before this can be implemented? (Feature flags, migrations, etc.)<br>Does it require collaboration across teams? (Design, DevOps, Security, etc.)<br>Are there known risks or potential blockers? (Legacy code dependencies, technical debt, etc.)<br>🟣 Estimation &amp; Prioritization<br>What is the priority level? (Critical, High, Medium, Low)<br>What’s the estimated impact? (Revenue, user retention, operational efficiency)<br>Are there any deadlines or time-sensitive constraints? (Launch dates, dependencies, etc.)<br>💡 Expected AI Output<br>Using these questions, AI should generate:<br><br>✅ Epics (High-level objectives)<br>✅ User Stories (Breaking down the work for users)<br>✅ Subtasks (Actionable development steps)<br>This structured input ensures AI can create high-quality, actionable PBIs instead of vague tasks.<br><br>🚀 Step 2: Wireframes - Full Page UI for AI Refinement<br>I’ll create Figma wireframes showcasing the full-page AI refinement process with:<br><br>Dropdown Combobox (Headless UI) to select an existing PBI.<br>AI-Powered Refinement Page (Clarifying Questions + PBI Generation).<br>Buttons to Open &amp; Edit PBIs in the System.<br>🔹 Let me generate the wireframes and share them with you shortly. 🚀<br><br>🚀 Step 3: Fixed Questions First, Dynamic Later<br>✅ We’ll start with fixed questions (predefined in the UI) to keep the process structured. ✅ If we later need more intelligent, adaptive AI prompts, we can introduce dynamic question generation.<br><br>🎯 Next Steps<br>1️⃣ I\'ll generate and share the Figma wireframes.<br>2️⃣ Once we have UI approval, we’ll define the API &amp; database structure.<br>3️⃣ Then, we move to implementation 🚀.<br><br>Let me work on the wireframes now! 🎨📌<br><br>You said:<br>A lot of the questions in step 1 could be answered by giving the AI access to technical doccumentation. <br>If the AI doesn´t find the answer there, then the question should be asked. <br>ChatGPT said:<br>That’s a fantastic approach! 🚀 By leveraging technical documentation, we can reduce user input fatigue and ensure AI-generated PBIs are as accurate as possible.<br><br>🔹 Refining the AI Questioning Process<br>Instead of blindly asking all 25+ questions, we will implement a smart, two-step process:<br><br>Step 1: Auto-Extract Answers from Technical Documentation<br>📌 Before asking the user anything, AI will try to find the answer from:<br><br>Project’s API Documentation (Endpoints, models, authentication, rate limits).<br>Database Schema (Relationships, constraints, existing data models).<br>Project’s Vision &amp; Goals (Product strategy, company objectives).<br>Past User Stories &amp; Epics (Ensuring consistency with previous PBIs).<br>Best Practices &amp; Key Learnings (Mistakes to avoid, past development issues).<br>Step 2: Ask Only the Unanswered Questions<br>📌 If AI can’t find an answer, it will only ask the missing information.<br><br>For example:<br><br>If API docs specify affected endpoints, AI skips “Which endpoints will be impacted?”<br>If the database schema reveals relationships, AI skips “What data models are involved?”<br>If a past User Story addressed similar issues, AI suggests improvements instead of asking from scratch.<br>🔹 UX Implementation: Full-Page AI Refinement Flow<br>✅ Step 1: User selects or creates a PBI.<br>✅ Step 2: AI scans project documentation for answers.<br>✅ Step 3: AI generates PBIs, showing:<br><br>🔹 Pre-filled answers from documentation.<br>🔹 Questions only for missing details.<br>✅ Step 4: User reviews &amp; refines before submitting.<br>This ensures: 🚀 Less manual input → AI handles most of the work.<br>🚀 More accurate PBIs → AI cross-checks against existing docs.<br>🚀 Faster process → Users answer only what AI can’t infer.<br><br>🔹 What’s Next?<br>1️⃣ Figma Wireframes – I’ll create the UX flow for AI refinement.<br>2️⃣ Technical Documentation Strategy – We define:<br><br>📌 Where &amp; how AI should access project documentation.<br>📌 Which docs are needed for different PBI types.<br>3️⃣ Implementation Plan – Define how AI extracts, processes &amp; asks questions.<br>Would you like me to proceed with wireframes first or technical documentation strategy first? 🚀<br><br>You said:<br>AI Estimation is the next thing we should include, so don´t bother asking the user for that.<br>ChatGPT said:<br>Got it! 🚀 AI will automatically estimate Story Points instead of asking the user.<br><br>🔹 How AI Will Estimate Story Points<br>Instead of manually entering estimates, AI will calculate complexity, effort, and uncertainty based on:<br><br>1️⃣ Complexity Analysis<br><br>Database impact → Does it involve schema changes? Complex relationships?<br>API impact → Are new endpoints needed? Major refactoring required?<br>Frontend impact → Is it a UI change or deep business logic?<br>Security concerns → Are there authentication/authorization risks?<br>2️⃣ Effort Calculation<br><br>Lines of code (LOC) prediction → Based on past PBIs of similar scope.<br>Number of components affected → More files = higher effort.<br>Testing needs → How much unit &amp; integration testing is required?<br>3️⃣ Uncertainty Rating<br><br>Does the AI find enough documentation?<br>Does this feature require new technology?<br>Does the feature involve high unknowns (e.g., 3rd party integrations)?<br>📌 Estimation Output (Fibonacci Scale) AI will output a story point estimate (1, 2, 3, 5, 8, 13...) with reasoning:<br><br>🟢 Low Complexity → 1-3 Points<br>🟡 Moderate Complexity → 5-8 Points<br>🔴 High Complexity &amp; Unknowns → 13+ Points<br>🔹 Next Steps<br>1️⃣ Figma Wireframes (Integrate AI estimation in UI).<br>2️⃣ Define Estimation Algorithm (How AI calculates effort).<br>3️⃣ Implement AI Estimation API (Story Point prediction).<br><br>Where should AI show the estimated Story Points?<br><br>Inside the PBI form? (User sees it before submission).<br>Only in the backlog? (After PBI is saved).<br>Let me know, and I’ll include it in the wireframes! 🚀<br><br>You said:<br>I want the AI estimation included in the task description and currently all tasks have a field for estimation where user can enter story points, instead of adding another field for AI estimate I´m thinking we could indicate if estimation is set by AI or if it is human edited. What do you think?<br>ChatGPT said:<br>That’s a great approach! It keeps the UI clean while still allowing users to see whether the estimate was AI-generated or manually adjusted.<br><br>🔹 How to Implement AI Estimation in the Task Description<br>1️⃣ Story Points Field Behavior:<br><br>AI auto-generates an initial estimate when a PBI is created.<br>The user can edit the estimate manually if they disagree.<br>If the user changes the AI estimate, we mark it as human-edited.<br>2️⃣ Indicating AI vs. Human Estimates:<br><br>AI-generated estimate → Display a small "AI" badge next to the number.<br>User-edited estimate → Display a "User Edited" label (or remove the AI badge).<br>3️⃣ Example UI Representations:<br><br>AI Estimate: Story Points: 5 (AI)<br>User-Edited: Story Points: 8 (User Edited)<br>🔹 Backend &amp; Database Changes<br>Keep the existing story_points field.<br><br>Add a new field: is_ai_estimate (true/false)<br><br>true → AI-generated<br>false → Manually overridden<br>When AI sets the estimate, is_ai_estimate = true.<br><br>If a user changes the estimate, set is_ai_estimate = false.<br><br>🔹 User Flow<br>1️⃣ AI suggests an estimate when the PBI is created.<br>2️⃣ User can keep it or edit it.<br>3️⃣ If edited, it switches from AI to user-edited.<br>4️⃣ The UI reflects whether the estimate is AI-generated or manually adjusted.<br><br>🔹 Advantages of This Approach<br>✅ Minimal UI clutter – No extra fields.<br>✅ Users stay in control – AI assists but doesn’t dictate.<br>✅ Clear distinction between AI-generated &amp; human-set values.<br>✅ Easy implementation – Just an extra is_ai_estimate field.<br><br>Next Steps<br>🔹 Update PBI Creation Flow to auto-assign AI estimates.<br>🔹 Modify UI to display AI/User-edited status.<br>🔹 Ensure API updates is_ai_estimate correctly.<br><br>Would you like this logic to be included in the Figma wireframes? 🚀<br><br>You said:<br>Yes<br>ChatGPT said:<br>Great! I’ll now create Figma wireframes incorporating the AI Estimation Flow into the Task Refinement Page.<br><br>📌 Wireframe Features<br>🔹 Full-Page AI Refinement UI (instead of a modal)<br>🔹 Dropdown Combobox for Selecting a PBI (Headless UI)<br>🔹 Structured Form-Based AI Q&amp;A for refinement<br>🔹 Story Points Section:<br><br>Shows AI-estimated points with an "AI" badge<br>Allows manual override (switching to "User Edited")<br>I’ll generate the wireframes now! 🚀 Stay tuned. 🎨<br><br><br>Here is the wireframe for the AI-powered task refinement page! 🎨<br><br>Key Features in the Wireframe:<br>✅ Full-page layout for refining PBIs<br>✅ Dropdown combobox with search functionality to select a PBI<br>✅ AI-driven structured form where AI asks questions and users respond<br>✅ Story Points Estimation section:<br><br>Shows AI-generated values with an "AI" badge<br>Allows manual override, switching to a "User Edited" label<br>Would you like any modifications before we move forward with implementation? 🚀<br><br>You said:<br>Can you provide a text based UI description instead?<br>I just need the different components of the page that is needed and then I can do layout and design myself.<br>ChatGPT said:<br>AI-Powered Task Refinement Page - UI Structure<br>This page provides a structured interface for refining PBIs with AI assistance. Below is a breakdown of all the key UI components that should be included.<br><br>📌 Main Components<br>1️⃣ Page Header (Fixed at the Top)<br>Title: "AI-Powered Task Refinement"<br>Back Button: Returns to the backlog view<br>Help Icon: Opens a tooltip explaining how AI refinement works<br>2️⃣ Task Selection Section<br>Label: "Select a PBI to refine"<br>Dropdown Combobox (Headless UI)<br>Allows searching and selecting an existing PBI<br>Displays title &amp; ID of each task<br>Optional: Show the task type (Epic, User Story, Subtask)<br>Button: "Open Task in AI Refinement"<br>3️⃣ AI-Assisted Refinement Form (Dynamic Based on Task)<br>Section Title: "Refinement Questions"<br>Questions Panel<br>AI provides structured questions based on the selected task<br>Questions should be grouped by categories (e.g., Goals, Technical Details, Dependencies)<br>Each question has:<br>A text input (for short answers) or a textarea (for detailed explanations)<br>Pre-filled values if available from technical documentation<br>AI-generated suggestions (editable)<br>Toggle: "Show AI Recommendations"<br>Expands a section with AI-generated recommendations for this task<br>4️⃣ AI Estimation &amp; Task Metadata<br>Label: "Estimation &amp; Task Metadata"<br>Story Points Field:<br>Displays the AI-estimated story points (default)<br>Allows manual override with a "User Edited" indicator<br>Additional Metadata:<br>Task Priority (Low, Medium, High)<br>Dependencies (Auto-detected &amp; user-editable)<br>Related Epics / Stories<br>5️⃣ Actions &amp; Submission<br>Primary Button: "Submit to Backlog"<br>Secondary Button: "Save Draft" (to store refinement progress without submitting)<br>AI Chat History Panel (Optional): Displays past AI interactions for reference<br>💡 Notes &amp; Considerations<br>Form should autosave periodically to prevent data loss<br>If the user switches tasks, ask for confirmation before discarding unsaved changes<br>AI should fetch relevant project documentation before asking unnecessary questions<br>Would you like to adjust any sections or add more details? 🚀<br><br>You said:<br>Some suggested changes:<br>1. It should be possible to add a parent task including all subtasks, in case the user has already worked on creating epic, user stories and subtasks. That way AI gets the whole feature description and can start over.<br>2. We alreadu use autosave with debounced and we also use websockets for real time updates.<br>3. We need a simple settings page where user can choose AI provider (OpenAI to start with) and input API credentials:<br>ChatGPT said:<br>Great suggestions! Here’s the updated UI structure incorporating your changes:<br><br>📌 AI-Powered Task Refinement Page - Updated UI Structure<br>This page enables users to refine PBIs with AI assistance, while ensuring flexibility for existing task hierarchies, real-time updates, and AI provider settings.<br><br>1️⃣ Page Header (Fixed at the Top)<br>Title: "AI-Powered Task Refinement"<br>Back Button: Returns to the backlog view<br>Help Icon: Opens a tooltip explaining how AI refinement works<br>2️⃣ Task Selection Section<br>Label: "Select a PBI or Parent Task to Refine"<br>Dropdown Combobox (Headless UI)<br>Searchable dropdown to select an individual task (PBI, User Story, or Subtask)<br>Checkbox: "Include all subtasks" (if a parent task is selected)<br>Optional: Show task type (Epic, User Story, Subtask)<br>Button: "Open in AI Refinement"<br>✅ New Feature: If a parent task is selected with "Include all subtasks," the AI receives the full feature breakdown instead of an isolated task.<br><br>3️⃣ AI-Assisted Refinement Form<br>Section Title: "AI-Powered Refinement Questions"<br>Questions Panel<br>AI generates structured questions based on the selected task(s)<br>Grouped Categories:<br>Feature Goals &amp; Outcomes<br>Technical Requirements<br>Dependencies &amp; Risks<br>Acceptance Criteria<br>Each question has:<br>A text input (for short answers) or a textarea (for detailed explanations)<br>Pre-filled values if available from technical documentation<br>AI-generated suggestions (editable)<br>Toggle: "Show AI Recommendations"<br>Expands a section with AI-generated recommendations for this task<br>✅ New Feature: If the user selects a parent task with subtasks, AI dynamically adjusts questions to consider the full hierarchy.<br><br>4️⃣ AI Estimation &amp; Task Metadata<br>Label: "Estimation &amp; Task Metadata"<br>Story Points Field:<br>AI-generated story points (default)<br>Allows manual override with a "User Edited" indicator<br>Additional Metadata:<br>Task Priority (Low, Medium, High)<br>Dependencies (Auto-detected &amp; user-editable)<br>Related Epics / Stories<br>✅ New Feature: Parent-child relationships are preserved, meaning AI-generated metadata accounts for linked tasks.<br><br>5️⃣ Real-Time Updates &amp; Autosave<br>WebSocket-Enabled: Any changes made instantly update other users in real-time<br>Debounced Autosave: Saves progress periodically to prevent data loss<br>Undo/Redo: Simple history tracking for user changes<br>✅ New Feature: Uses existing WebSocket + debounced autosave setup for seamless real-time updates.<br><br>6️⃣ Actions &amp; Submission<br>Primary Button: "Submit to Backlog"<br>Secondary Button: "Save Draft" (stores refinement progress without submitting)<br>AI Chat History Panel (Optional): Displays past AI interactions for reference<br>7️⃣ AI Provider Settings Page<br>Page Title: "AI Integration Settings"<br>Dropdown: "Select AI Provider" (Starting with OpenAI)<br>Future support for multiple providers (Anthropic, Azure, Local AI, etc.)<br>API Key Input Field<br>Test Connection Button (Validates API credentials)<br>Save Settings Button<br>✅ New Feature: Centralized AI provider settings so users can configure API credentials before using AI-powered refinement.<br><br>Final Thoughts<br>✅ Supports full feature refinement (Epics + Subtasks)<br>✅ Uses real-time WebSocket updates + autosave (no lost work)<br>✅ Gives users control over AI-generated estimations<br>✅ Modular AI provider integration for future flexibility<br><br>🚀 Would you like any additional refinements before we move forward?<br><br>You said:<br>How do we give AI permission to write in the database?<br>ChatGPT said:<br>Granting AI Permission to Write to the Database<br>For AI to write to the database, we need a secure and controlled mechanism to ensure data integrity, security, and prevent unauthorized access.<br><br>1️⃣ Recommended Approach: Secure API Endpoint<br>Instead of allowing AI direct access to the database, we expose a controlled API that the AI can interact with.<br><br>✅ Steps to Implement<br>Create an API Endpoint (e.g., /api/pbis)<br><br>Accepts AI-generated Epics, User Stories, Subtasks<br>Validates input before saving to DB<br>Use API Authentication<br><br>API Key or OAuth2 Token: AI must authenticate before sending requests.<br>Store AI credentials securely in environment variables.<br>Define Access Controls<br><br>Restrict AI to specific actions (e.g., insert PBIs, update fields)<br>Role-Based Access Control (RBAC): AI should have a limited DB role (e.g., ai_writer).<br>Validate AI-Generated Data<br><br>Enforce schema validation (e.g., JSON Schema)<br>Apply business rules (e.g., prevent circular dependencies)<br>Use an AI Service Account<br><br>AI interacts as a designated system user (not a superuser)<br>Logs all AI interactions for auditability<br>2️⃣ Backend Implementation<br>📌 Create the API Route (/api/pbis)<br>python<br>Copy<br>Edit<br>from flask import Blueprint, request, jsonify<br>from models import db, PBI<br>from auth_middleware import verify_ai_auth<br><br>bp = Blueprint("ai_pbi_api", __name__)<br><br>@bp.route("/api/pbis", methods=["POST"])<br>@verify_ai_auth # ✅ Require AI authentication<br>def create_pbi():<br>"""Handles AI-generated PBI creation"""<br><br>data = request.json<br>if not data:<br>return jsonify({"error": "No data provided"}), 400<br><br># ✅ Validate input structure<br>required_fields = ["title", "description", "task_type", "priority"]<br>if not all(field in data for field in required_fields):<br>return jsonify({"error": "Missing required fields"}), 400<br><br># ✅ Insert into database<br>new_pbi = PBI(<br>title=data["title"],<br>description=data["description"],<br>task_type=data["task_type"],<br>priority=data.get("priority", "Medium"),<br>estimated_points=data.get("estimated_points", None), # AI estimate<br>created_by="AI", # Track source<br>)<br><br>db.session.add(new_pbi)<br>db.session.commit()<br><br>return jsonify({"message": "PBI created successfully", "id": new_pbi.id}), 201<br>3️⃣ AI Authentication &amp; Security<br>📌 Use API Keys to Restrict Access<br>Middleware for AI Authentication (auth_middleware.py):<br><br>python<br>Copy<br>Edit<br>from flask import request, jsonify<br>import os<br><br>VALID_AI_API_KEY = os.getenv("AI_API_KEY")<br><br>def verify_ai_auth(func):<br>"""Middleware to verify AI authentication"""<br>def wrapper(*args, **kwargs):<br>api_key = request.headers.get("X-API-Key")<br>if api_key != VALID_AI_API_KEY:<br>return jsonify({"error": "Unauthorized AI access"}), 403<br>return func(*args, **kwargs)<br>return wrapper<br>✅ AI must send a valid API key in the request headers:<br><br>json<br>Copy<br>Edit<br>{<br>"title": "Implement AI Task Refinement",<br>"description": "Break down AI task refinement into structured PBIs",<br>"task_type": "Epic",<br>"priority": "High",<br>"estimated_points": 8<br>}<br>🛡 Security Best Practices<br><br>Rotate API Keys regularly<br>Use role-based permissions<br>Log all AI interactions for debugging &amp; auditing<br>Limit AI’s scope to only modifying PBIs (not users, projects, etc.)<br>4️⃣ PostgreSQL Database Role for AI<br>Instead of granting full DB access, create a limited-access AI role:<br><br>sql<br>Copy<br>Edit<br>-- Create a restricted AI role<br>CREATE ROLE ai_writer WITH LOGIN PASSWORD \'securepassword\';<br><br>-- Grant permission to insert PBIs but not delete them<br>GRANT INSERT, UPDATE ON pbis TO ai_writer;<br>5️⃣ WebSocket Integration (Optional)<br>If using real-time updates, AI should broadcast new PBIs:<br><br>python<br>Copy<br>Edit<br>from flask_socketio import emit<br><br>@bp.route("/api/pbis", methods=["POST"])<br>@verify_ai_auth<br>def create_pbi():<br>...<br>db.session.commit()<br><br># 🔥 Notify frontend in real-time<br>emit("pbi_created", {"id": new_pbi.id, "title": new_pbi.title}, broadcast=True)<br><br>return jsonify({"message": "PBI created successfully", "id": new_pbi.id}), 201<br>🚀 Final Summary<br>✅ API Gateway: AI writes via /api/pbis<br>✅ Secure Authentication: AI must provide an API key<br>✅ Database Role: AI is limited to inserting/updating PBIs only<br>✅ Schema Validation: Ensures AI submits valid data<br>✅ Real-Time Updates: WebSocket notifications for new PBIs<br>🎯 Next Steps<br>Would you like:<br><br>To implement a similar API for retrieving PBIs? (GET /api/pbis)<br>AI role to have limited UPDATE access for task refinements?<br>A test script to verify AI authentication &amp; data submission?<br>You said:<br>I´m saving you questions for later.<br><br>For now let´s get back on track:<br><br>Can you rewrite the entire plan based on what we have agreed on so far and then move on to step 2.<br><br>1. [COMPLETED] I want us to discuss how it would be inplemented in the UI and provide the optimal UX.<br>2. Could we benefit from drafting the architecture, sequence diagrams, user flows?<br>3. Before we start coding, I want you to create PBI´s for the project and estimate complexity.<br>4. Create psql commands for creating the PBI´s.<br><br>Lets go through these steps one by one.<br>ChatGPT said:<br>AI-Powered PBI Generation &amp; Integration Plan<br>Overview<br>We are developing an AI-powered system that automates the generation and refinement of Epics, User Stories, and Subtasks in our Project Management System (PMS). The system will allow users to refine feature ideas through a structured, guided AI interaction and directly submit PBIs (Product Backlog Items) into the backlog.<br><br>✅ Phase 1: UI/UX Implementation Plan (Completed)<br>We have defined the best user experience (UX) strategy and identified how users will interact with the AI-driven PBI refinement system.<br><br>🔹 UI/UX Key Decisions<br>Where PBI Creation Happens<br><br>Inside the Backlog View → AI-assisted refinement happens within the backlog planning workflow.<br>Standalone Full-Page PBI Refinement View → Instead of a modal, we will use a full-page AI refinement interface.<br>How the User Provides Input<br><br>Users select an existing PBI from a searchable combobox (Headless UI)<br>Users can also add a parent task, including all its subtasks, ensuring AI gets full context.<br>How AI Refines PBIs<br><br>AI asks structured, best-practice questions<br>AI accesses technical documentation before asking questions, avoiding redundant prompts.<br>Inline Editing: AI suggests PBIs, and the user can edit before finalizing.<br>Step-by-Step Refinement: AI refines tasks dynamically based on user responses.<br>How Users Trigger AI PBI Generation<br><br>Button: "Generate PBIs from Feature Request"<br>AI Guidance: AI offers to help refine a new feature request when a user creates a new PBI.<br>Shortcut Command: /generate_pbi &lt;feature&gt;<br>How AI Estimation Works<br><br>AI assigns story points based on complexity<br>The estimation field tracks whether it was set by AI or manually edited by the user.<br>Users can override AI estimates manually.<br>🔹 Finalized UI Components for PBI Refinement Page<br>📌 PBI Refinement Page (Full-Screen UI)<br>🔍 Searchable Dropdown (Combobox)<br><br>Users search &amp; select a PBI from the backlog.<br>Users can add a parent task + subtasks for AI to analyze.<br>📜 AI Question Form<br><br>AI asks structured questions to refine the feature request.<br>AI auto-fills answers when possible (from project history/docs).<br>User fills in missing details manually.<br>📝 AI-Generated PBIs Section<br><br>AI dynamically generates Epics, User Stories, and Subtasks.<br>PBIs appear in real-time as AI refines them.<br>Users can edit PBIs inline before submission.<br>📊 AI Story Point Estimation<br><br>AI auto-assigns story points based on complexity.<br>Indicator shows if estimation was set by AI or edited by the user.<br>🔄 Autosave &amp; WebSockets<br><br>Debounced auto-save ensures changes are not lost.<br>WebSockets enable real-time updates across team members.<br>🛠 Settings Page<br><br>AI Provider Selection: OpenAI (default)<br>API Key Input: Secure credentials storage for AI integration.<br>🚀 Phase 2: Architecture, Sequence Diagrams &amp; User Flows<br>Why Do We Need This?<br>Before coding, we should draft architectural diagrams to:<br><br>Visualize the AI’s role in the PMS system.<br>Map the user flow from input to AI-generated PBIs.<br>Ensure database integration is structured correctly.<br>Avoid unnecessary rewrites by planning dependencies.<br>📌 Key Architectural Components<br>1️⃣ Frontend UI<br><br>Next.js React App<br>Full-page AI refinement view<br>Headless UI Combobox for PBI selection<br>Real-time UI updates via WebSockets<br>2️⃣ AI Processing<br><br>AI fetches context from technical documentation &amp; backlog<br>AI generates PBIs dynamically using structured rules<br>AI assigns story points automatically<br>AI questions the user only when necessary (context-aware questioning)<br>3️⃣ Backend API<br><br>/api/pbis → AI submits PBIs<br>/api/pbis/:id → Retrieve PBIs for AI refinement<br>Authentication middleware (API keys for AI)<br>WebSockets for real-time updates<br>4️⃣ Database Schema Changes<br><br>Track whether AI or user set story points<br>Store AI-generated questions &amp; answers for auditing<br>Link PBIs to their refined feature requests<br>📌 Next Steps<br>1️⃣ Create High-Level Architecture Diagram<br>How the UI, AI processing, and backend interact<br>Illustrate AI refinement flow &amp; database interactions<br>2️⃣ Define Sequence Diagrams<br>User selects a feature request → AI processes it → PBIs are generated<br>AI refines questions dynamically based on available data<br>3️⃣ Map User Flows<br>Step-by-step process from selecting a PBI to AI refinement &amp; submission<br>Flowchart of AI interaction (when to ask, when to auto-fill answers)<br>Would you like me to generate initial architecture &amp; sequence diagrams now? 🚀<br><br>You said:<br>Yes, I would like that but you also need to know waht I use for backend, right?<br>Python / flask and postgreSQL. <br>ChatGPT said:<br>Yes, knowing that your backend is built with Python / Flask and PostgreSQL is crucial for designing the architecture and sequence diagrams effectively.<br><br>I will now generate the following:<br><br>1️⃣ High-Level Architecture Diagram → How the UI, AI processing, and backend interact.<br>2️⃣ Sequence Diagram → How a PBI is refined by AI and submitted to the database.<br>3️⃣ User Flow Diagram → How users interact with AI-driven PBI refinement.<br><br>Since we are using Flask for the backend, I will ensure that the API endpoints and WebSocket handling align with Flask’s best practices. I’ll also consider PostgreSQL schema changes to store AI-generated PBIs effectively.<br><br>I will now generate these diagrams. Stay tuned! 🎨🚀<br><br><br>Analysis errored<br>python<br>Always show details<br><br>Copy<br>import matplotlib.pyplot as plt<br>import matplotlib.patches as mpatches<br><br>def draw_architecture_diagram():<br>fig, ax = plt.subplots(figsize=(10, 6))<br><br># Title<br>ax.set_title("High-Level Architecture: AI-Driven PBI Refinement", fontsize=14, fontweight="bold")<br><br># Components<br>components = {<br>"Frontend (Next.js)": (0.2, 0.8),<br>"AI Processing (GPT-4 API)": (0.5, 0.8),<br>"Backend API (Flask)": (0.8, 0.8),<br>"PostgreSQL Database": (0.8, 0.5),<br>"WebSockets (Real-time Updates)": (0.5, 0.5)<br>}<br><br># Draw components<br>for label, (x, y) in components.items():<br>ax.add_patch(mpatches.FancyBboxPatch((x-0.1, y-0.05), 0.2, 0.1, boxstyle="round,pad=0.1", <br>facecolor="lightblue", edgecolor="black"))<br>ax.text(x, y, label, ha="center", va="center", fontsize=10, fontweight="bold")<br><br># Arrows<br>arrows = [<br>((0.2, 0.8), (0.5, 0.8)), # Frontend → AI Processing<br>((0.5, 0.8), (0.8, 0.8)), # AI Processing → Backend API<br>((0.8, 0.8), (0.8, 0.5)), # Backend API → PostgreSQL<br>((0.8, 0.5), (0.8, 0.8)), # PostgreSQL → Backend API<br>((0.8, 0.8), (0.5, 0.5)), # Backend API → WebSockets<br>((0.5, 0.5), (0.2, 0.8)) # WebSockets → Frontend<br>]<br><br>for start, end in arrows:<br>ax.annotate("", xy=end, xytext=start, arrowprops=dict(arrowstyle="-&gt;", lw=2))<br><br># Hide axes<br>ax.set_xticks([])<br>ax.set_yticks([])<br>ax.set_frame_on(False)<br><br># Show diagram<br>plt.show()<br><br># Draw the architecture diagram<br>draw_architecture_diagram()<br>I encountered an issue generating the architecture diagram. Let me try again. \u200b\u200b<br><br><br>Analysis errored<br>python<br>Always show details<br><br>Copy<br>import matplotlib.pyplot as plt<br>import matplotlib.patches as mpatches<br><br>def draw_architecture_diagram():<br>fig, ax = plt.subplots(figsize=(10, 6))<br><br># Title<br>ax.set_title("High-Level Architecture: AI-Driven PBI Refinement", fontsize=14, fontweight="bold")<br><br># Components<br>components = {<br>"Frontend (Next.js)": (0.2, 0.8),<br>"AI Processing (GPT-4 API)": (0.5, 0.8),<br>"Backend API (Flask)": (0.8, 0.8),<br>"PostgreSQL Database": (0.8, 0.5),<br>"WebSockets (Real-time Updates)": (0.5, 0.5)<br>}<br><br># Draw components<br>for label, (x, y) in components.items():<br>ax.add_patch(mpatches.FancyBboxPatch((x-0.1, y-0.05), 0.2, 0.1, boxstyle="round,pad=0.1", <br>facecolor="lightblue", edgecolor="black"))<br>ax.text(x, y, label, ha="center", va="center", fontsize=10, fontweight="bold")<br><br># Arrows<br>arrows = [<br>((0.2, 0.8), (0.5, 0.8)), # Frontend → AI Processing<br>((0.5, 0.8), (0.8, 0.8)), # AI Processing → Backend API<br>((0.8, 0.8), (0.8, 0.5)), # Backend API → PostgreSQL<br>((0.8, 0.5), (0.8, 0.8)), # PostgreSQL → Backend API<br>((0.8, 0.8), (0.5, 0.5)), # Backend API → WebSockets<br>((0.5, 0.5), (0.2, 0.8)) # WebSockets → Frontend<br>]<br><br>for start, end in arrows:<br>ax.annotate("", xy=end, xytext=start, arrowprops=dict(arrowstyle="-&gt;", lw=2))<br><br># Hide axes<br>ax.set_xticks([])<br>ax.set_yticks([])<br>ax.set_frame_on(False)<br><br># Show diagram<br>plt.show()<br><br># Draw the architecture diagram<br>draw_architecture_diagram()<br>I encountered an issue generating the architecture diagram. Instead, I\'ll describe it textually:<br><br>High-Level Architecture for AI-Driven PBI Refinement<br>This architecture integrates Next.js (Frontend), Flask (Backend API), PostgreSQL (Database), GPT-4 API, and WebSockets for real-time updates.<br><br>Components &amp; Flow:<br>Frontend (Next.js)<br><br>User selects a feature request from the backlog.<br>Inputs details and triggers AI-powered PBI generation.<br>Displays AI-generated Epics, User Stories, and Subtasks.<br>Supports real-time updates via WebSockets.<br>AI Processing (GPT-4 API)<br><br>Receives feature descriptions and additional context.<br>Generates structured PBIs based on predefined rules and user input.<br>Returns the refined tasks to the backend.<br>Backend API (Flask)<br><br>Routes API requests between frontend and AI service.<br>Validates and processes AI-generated PBIs.<br>Stores tasks in PostgreSQL.<br>Emits WebSocket events for real-time updates.<br>PostgreSQL Database<br><br>Stores all Epics, User Stories, and Subtasks.<br>Keeps track of AI-generated vs. user-edited PBIs.<br>Supports search and retrieval.<br>WebSockets (Flask-SocketIO)<br><br>Sends real-time updates when PBIs are refined or modified.<br>Ensures users see immediate changes.<br>Next, I will draft sequence diagrams and user flows for how the AI-powered PBI refinement process works. Stay tuned! 🚀 \u200b\u200b<br><br>You said:<br>Please continue<br>ChatGPT said:<br>Step 2: Drafting Architecture, Sequence Diagrams, and User Flows<br>1️⃣ Sequence Diagram: AI-Driven PBI Refinement Process<br>Actors:<br>User: Interacts with the UI to refine and submit PBIs.<br>Frontend (Next.js): Sends user input to the backend and displays results.<br>Backend (Flask API): Processes requests and interacts with AI &amp; DB.<br>AI Service (GPT-4 API): Generates PBIs based on input.<br>PostgreSQL Database: Stores PBIs and project data.<br>🛠️ Step-by-Step Process (Refinement Flow)<br>1. User selects a PBI to refine<br>Opens the AI Refinement Page.<br>Selects an existing Feature Request from a searchable dropdown.<br>(Optional) Adds a parent task to include all subtasks.<br>2. AI Queries Additional Context<br>AI first searches project documentation (if available).<br>If AI finds missing information, it generates a set of questions.<br>User answers questions in a structured form UI.<br>AI refines its understanding.<br>3. AI Generates PBIs<br>AI generates:<br>Epics<br>User Stories<br>Subtasks<br>Assigns Story Points (AI estimation).<br>Saves metadata (dependencies, priorities, assignments).<br>4. User Reviews &amp; Modifies<br>The user can:<br>Edit task descriptions (inline).<br>Adjust AI estimations (AI tag remains visible).<br>Remove irrelevant PBIs.<br>5. PBIs are Auto-Saved &amp; Updated<br>Changes are debounced &amp; saved automatically.<br>WebSockets broadcast changes in real time to all users.<br>6. PBIs are Submitted to Backlog<br>When satisfied, the user confirms submission.<br>The system:<br>Inserts PBIs into PostgreSQL.<br>Marks them as ready for execution.<br>2️⃣ User Flow: AI-Powered Task Refinement<br>🟢 User selects a feature request → 🟡 AI refines using project data → 🟠 User answers missing details → 🔵 AI generates structured PBIs → 🟣 User reviews &amp; submits<br><br>3️⃣ Key Backend API Endpoints<br>These will be implemented in Flask.<br><br>Endpoint Method Description<br>/api/pbis POST Submit AI-generated PBIs to the backlog<br>/api/pbis/refine POST AI generates/refines PBIs<br>/api/pbis/questions GET AI fetches clarification questions if required<br>/api/pbis/{pbi_id} PATCH Updates a PBI after user edits<br>/api/pbis/{pbi_id}/submit POST Confirms PBI submission<br>4️⃣ Database Schema Updates (PostgreSQL)<br>To support AI-powered task refinement, we add new fields:<br><br>sql<br>Copy<br>Edit<br>ALTER TABLE tasks ADD COLUMN ai_generated BOOLEAN DEFAULT FALSE;<br>ALTER TABLE tasks ADD COLUMN refinement_status TEXT DEFAULT \'Pending\';<br>ALTER TABLE tasks ADD COLUMN estimation_source TEXT DEFAULT \'User\';<br>5️⃣ Next Steps<br>✔️ Architecture, API endpoints, and database updates are drafted.<br>➡️ Next: Move to Step 3 (Creating PBIs &amp; Estimating Complexity). 🚀<br><br>Let me know if you want any modifications before proceeding!<br><br>You said:<br>Where should we store the documentation?<br>Where in the UI should the user upload the documentation?<br>Is it possible to get the documentation automatically from an integration?<br>Like GitHub, VScode?<br>Provided that the documentation exist there.<br>Add a simple settings page where user can input API key and credentials.<br>ChatGPT said:<br>📌 Storing &amp; Managing Documentation for AI-Powered PBI Refinement<br>To ensure AI can access relevant project documentation for refining PBIs, we need a structured way to store, retrieve, and update documentation. Below is the plan:<br><br>1️⃣ Where Should We Store Documentation?<br>Option 1: PostgreSQL (Best for Structured Documentation)<br>Store documentation as text in a dedicated table.<br>Allows version control and easy retrieval.<br>Can be indexed for faster AI retrieval.<br>Table: project_documentation<br>sql<br>Copy<br>Edit<br>CREATE TABLE project_documentation (<br>id SERIAL PRIMARY KEY,<br>project_id INT REFERENCES projects(id) ON DELETE CASCADE,<br>title TEXT NOT NULL,<br>content TEXT NOT NULL,<br>source TEXT DEFAULT \'Manual Upload\',<br>uploaded_by INT REFERENCES users(id),<br>created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP<br>);<br>✅ Pros:<br><br>AI can efficiently search and extract relevant details.<br>Allows tagging &amp; filtering by source (e.g., GitHub, VS Code, Manual Upload).<br>Option 2: External File Storage (Best for Large Documents)<br>Store Markdown, TXT, or PDF files in an S3 bucket (AWS, Firebase, etc.).<br>Only metadata is stored in PostgreSQL.<br>AI retrieves and processes the files when needed.<br>Table: documentation_files<br>sql<br>Copy<br>Edit<br>CREATE TABLE documentation_files (<br>id SERIAL PRIMARY KEY,<br>project_id INT REFERENCES projects(id) ON DELETE CASCADE,<br>file_url TEXT NOT NULL,<br>file_type TEXT NOT NULL CHECK (file_type IN (\'md\', \'txt\', \'pdf\')),<br>uploaded_by INT REFERENCES users(id),<br>created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP<br>);<br>✅ Pros:<br><br>Supports larger documents that may not fit in PostgreSQL.<br>Allows manual file uploads and auto-fetching from integrations.<br>2️⃣ Where in the UI Should the User Upload Documentation?<br>📂 Dedicated "Documentation Management" Page (Settings)<br>Location: Inside Settings &gt; Documentation.<br>Features:<br>Upload Markdown, TXT, PDF files.<br>View &amp; Edit existing documentation.<br>Connect integrations (GitHub, VS Code, Notion, etc.).<br>Configure AI access permissions for each document.<br>3️⃣ Automatic Documentation Retrieval<br>✅ Can We Integrate with GitHub, VS Code, or Notion?<br>Yes! We can fetch project documentation automatically from these sources:<br><br>Integration Method Use Case<br>GitHub Fetch .md files via API Pull documentation from repos<br>VS Code Read local .md files Sync local project docs<br>Notion API connection Import structured docs<br>Google Drive API connection Fetch shared project docs<br>📡 Example: GitHub API Integration<br>Fetch .md documentation from a GitHub repo:<br><br>python<br>Copy<br>Edit<br>import requests<br><br>GITHUB_TOKEN = "your_personal_token"<br>REPO_OWNER = "your_username"<br>REPO_NAME = "your_project"<br><br>url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/docs"<br>headers = {"Authorization": f"token {GITHUB_TOKEN}"}<br><br>response = requests.get(url, headers=headers)<br>files = response.json()<br><br>for file in files:<br>if file["name"].endswith(".md"):<br>doc_content = requests.get(file["download_url"]).text<br>print("Fetched Documentation:", doc_content)<br>✅ Pros:<br><br>Automatically syncs up-to-date documentation from GitHub.<br>AI can use repo docs before asking the user for details.<br>4️⃣ Simple Settings Page for AI API &amp; Integrations<br>📌 Location: Settings &gt; AI &amp; Integrations<br><br>✅ User Can:<br><br>Enter OpenAI API Key.<br>Connect GitHub Repo (OAuth or Token).<br>Enable Auto-Fetch from VS Code, Notion, Google Drive.<br>Set AI Access Rules (e.g., Allow AI to modify docs?).<br>🔧 Database Table: integration_settings<br>sql<br>Copy<br>Edit<br>CREATE TABLE integration_settings (<br>id SERIAL PRIMARY KEY,<br>user_id INT REFERENCES users(id),<br>integration_name TEXT NOT NULL,<br>api_key TEXT NOT NULL,<br>is_enabled BOOLEAN DEFAULT TRUE,<br>created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP<br>);<br>🚀 Next Steps<br>✅ Implement API endpoints for documentation storage &amp; retrieval.<br>✅ Build a simple settings page to manage AI API &amp; integrations.<br>✅ Set up GitHub/VS Code sync for fetching docs automatically.<br><br>Would you like mockups or wireframes for the settings page? 📐I´m still in planning mode, so let´s continue.<br><br><br>## AI driven creation of Epics, User stories and Subtasks.<br><br>I have, on several occasions when we have discussed a new feature and outlined a high level plan asked you to create epics, user stories and subtasks for the feature. <br><br>You are very good at this and it saves a lot of time compared to writing them manually. <br><br>However, we could create a process of this and include some steps were we go through some exercises that will help increase the quality of the output. <br>I´m thinking about:<br><br>1. Check PBI´s against the list of key learnings &amp; takeaways for future development<br><br>After every session we do a retrospective where we summarize the session. One section of the summary is a list of key learnings &amp; takeaways for future development. Those should be appended to a complete list of key takeaways for future development.<br><br>Every time we create epics, user stories and subtasks for a new feature we should check them against this checklist of key learnings &amp; takeaways for future development. We can then include reminder notes about this in the tasks they are relevant for. This way we will reduce repeating mistakes, be aware of technical considerations we have to adhere to etc..<br><br>2. Maybe use frameworks like user story mapping<br><br>3. Any other ideas for increasing quality. <br><br>## Estimation:<br><br>I have also asked you to estimate the complexity of the tasks using story points. <br><br>### We have used this framework for estimation:<br><br>We estimate tasks using **story points** with the **Fibonacci scale** (1, 2, 3, 5, 8, 13, etc.) That allows us to gauge the **complexity, effort, and uncertainty** associated with each task.<br><br>GPT (You) will assess every feature based on:<br><br>1. **Complexity**: How difficult the task is (e.g., architecture, database relationships, etc.).<br>2. **Effort**: How much time and effort will be required to code, test, and debug.<br>3. **Uncertainty**: Any unknowns or potential challenges (e.g., interacting with new parts of the system, external factors).<br><br>### **Benchmarking**:<br><br>To give context to these estimates:<br><br>- **1-2 Points**: Minor changes like renaming variables, small bug fixes.<br>- **3-5 Points**: Moderate tasks, involving some new logic, minor database changes, and testing.<br>- **8+ Points**: More complex tasks, like introducing new models, changing relationships in the database, or modifying core app logic with potential unknowns.<br><br>### Typical output for a user story:<br><br>🟢 User Story 1: Implement Parent Task Dropdown in Task Modal<br>As a user, I want to assign or change a parent task directly from the task modal, so that I can organize my tasks efficiently.<br><br>✅ Acceptance Criteria:<br><br>A dropdown appears in the task modal, listing all valid parent tasks.<br>Prevents selection of circular dependencies.<br>Updates the parent task dynamically upon selection.<br>Displays correct hierarchy after updates.<br>📌 Estimation: 5 Story Points<br><br>Complexity: Moderate – Needs task filtering, validation logic, and UI integration.<br>Effort: Moderate – Requires API calls, handling UI state, and testing.<br>Uncertainty: Low – We understand the task relationships well.<br><br><br>This is all a part of a larger idea about how to streamline and improve the quality of the entire product development lifecycle and development process.<br><br>## MVP version<br>I´ve been trying to figure out what would be the most valuable step to start building a feature for.<br><br>I think it is a feature that will allow you (AI) to submit these PBI´s into the backlog of my project management tool and then be able to read them back from the tool.<br><br>So the first draft of the feature would be to create a function that can take a PBI and submit it to the db of the project management tool.<br><br>## Version 2:<br>Next step would be to create a function that can read the PBIs from the db and return them as a list.<br><br>## Version 3<br>To take the whole process of refining a simple feature idea or request into more detailed and actionable PBI´s and integrate it into the project management tool.<br><br>### This would involve the following requirements:<br>- It needs to be a guided process, not just an inline chat.<br>- Both the user and the AI should follow the process.<br><br>To be further discussed....<br>I have a documented ideas in this notion file:<br><a target="_blank" rel="noopener noreferrer" href="https://www.notion.so/lacunamedia/Automating-task-creation-in-autoagile-191979257fc08007a001c3c2dc0a773f?pvs=4">https://www.notion.so/lacunamedia/Automating-task-creation-in-autoagile-191979257fc08007a001c3c2dc0a773f?pvs=4</a><br><br>## The development process:<br>Generating code for the feature based on the PBI´s.<br>The process of you (AI) and me coding together is a process of it´s own that we are working on a plan for optimizing. <br>See separate document: \'optimizing_our_development_process.md\' <br><br><br><br>How can we automate the whole process of:<br><br>1. Create Epics, User stories and subtasks from a refined feature request.<br>2. Script them into the database of autoagile<br>3. Allow AI to read the tasks<br><br><br>This is a great initiative that will systematize and automate the process of turning feature ideas into well-structured PBIs (Epics, User Stories, and Subtasks). Below is a structured approach to refining and implementing this system.<br><br>📌 Summary of the Planned Process<br>We are aiming to automate the workflow of refining a feature request into actionable PBIs and integrating them directly into the project management tool. The long-term vision is to ensure quality, consistency, and efficiency in product development.<br><br>🚀 Proposed Steps for Automating AI-Driven PBI Creation<br>1️⃣ Create Epics, User Stories &amp; Subtasks from a Refined Feature Request<br>🔹 Step 1: Validate PBIs Against "Key Learnings &amp; Takeaways"<br><br>After every session, we capture Key Learnings &amp; Takeaways for future development.<br>When generating new PBIs, we cross-check them against this checklist.<br>If relevant, reminder notes are added to tasks (e.g., “Avoid X issue seen in past development”).<br>✅ Benefit: Prevent repeated mistakes, ensure technical consistency.<br><br>🔹 Step 2: Use Frameworks to Improve PBI Quality<br><br>User Story Mapping: Break down the feature based on user journeys.<br>Impact Mapping: Understand the business &amp; user impact.<br>Jobs-to-Be-Done (JTBD): Define tasks based on what the user is trying to achieve.<br>BDD (Behavior-Driven Development) Scenarios: Define Acceptance Criteria in a structured format.<br>✅ Benefit: Increases clarity, prioritization, and alignment with user goals.<br><br>🔹 Step 3: Automate AI-Driven PBI Generation<br><br>AI takes a high-level feature request and breaks it down into Epics, User Stories, and Subtasks.<br>AI adds relevant acceptance criteria and ensures no conflicting dependencies.<br>User can review &amp; refine before submitting to the backlog.<br>✅ Benefit: Reduces manual effort, ensures consistency.<br><br>2️⃣ Submit PBIs to the AutoAgile Database<br>🔹 Step 4: Create API for AI to Submit PBIs<br><br>A POST API endpoint will allow AI to write PBIs into the project management system.<br>AI will assign metadata (e.g., priority, estimated effort, dependencies).<br>✅ Benefit: Ensures a structured backlog instead of scattered notes.<br><br>3️⃣ Allow AI to Read and Retrieve PBIs<br>🔹 Step 5: Create API to Fetch PBIs<br><br>A GET API endpoint will allow AI to retrieve PBIs from the database.<br>This enables PBI iteration, tracking, and refinement.<br>✅ Benefit: AI can refine &amp; adjust PBIs dynamically over time.<br><br>4️⃣ Version 3: Full AI-Driven PBI Refinement Process<br>🔹 Step 6: Create a Guided Process for PBI Refinement Instead of an inline chat, we build a structured UI to guide both the user and AI in refining PBIs.<br><br>Step 1: User provides initial feature request.<br>Step 2: AI asks clarifying questions (e.g., “Is this a new feature or an improvement?”).<br>Step 3: AI generates Epics, User Stories &amp; Subtasks.<br>Step 4: AI applies learnings from past development.<br>Step 5: User reviews &amp; refines before finalizing.<br>Step 6: PBIs are submitted to the backlog.<br>✅ Benefit: Ensures high-quality PBIs while keeping the user in control.<br><br>🛠️ Technical Implementation Plan<br>Phase 1 (MVP)<br>✔ Backend:<br><br>Create a POST /api/pbis endpoint to submit PBIs.<br>Store PBIs in the AutoAgile database.<br>✔ Frontend:<br><br>Simple form UI for submitting PBIs.<br>Allow users to review &amp; edit before submission.<br>✔ AI Integration:<br><br>AI generates PBIs using structured templates.<br>AI checks against the Key Learnings &amp; Takeaways.<br>Phase 2 (API Retrieval)<br>✔ Backend:<br><br>Create GET /api/pbis to fetch PBIs.<br>Support filtering by status, priority, and dependencies.<br>✔ Frontend:<br><br>Display PBIs in the backlog.<br>Allow users to edit, refine &amp; iterate on PBIs.<br>Phase 3 (Full AI-Driven Workflow)<br>✔ Backend:<br><br>Implement AI-powered iterative refinement.<br>Store AI-generated clarifying questions &amp; user responses.<br>✔ Frontend:<br><br>Guided multi-step process for refining PBIs.<br>Interactive user review step before final submission.<br>✔ AI Integration:<br><br>AI actively asks clarifying questions before generating PBIs.<br>AI learns from past PBIs and Key Learnings to improve over time.<br>📌 Key Benefits of This System<br>✅ Automates repetitive work → AI breaks down features into PBIs.<br>✅ Ensures higher quality PBIs → AI cross-checks with Key Learnings.<br>✅ Prevents dependency issues → AI validates task relationships.<br>✅ Creates a structured backlog → PBIs are stored systematically.<br>✅ Streamlines estimation → AI assigns story points based on complexity.<br>✅ Saves developer time → Faster iteration &amp; execution of product features.<br><br>📌 Next Steps<br>🚀 Would you like to start with Phase 1 (Submitting PBIs to the database)?<br>Or do you want to explore UI/UX ideas for the guided process first?<br><br>You said:<br>Does this require an integration to for example OpenAI´s API or is it possible to create an Action in a custom GPT and when triggering that action the PBI´s are submitted to the db? <br>ChatGPT said:<br>It does not necessarily require OpenAI’s API integration if we use Custom GPT Actions. Here’s how both approaches would work:<br><br>1️⃣ Using Custom GPT Actions (No API Integration Needed)<br>✅ How It Works<br>Instead of calling an external API, we can define an Action in a Custom GPT that directly interacts with the database.<br><br>Trigger the Action<br><br>You (the user) initiate a request:<br>"Generate PBIs for the new feature and submit them to the backlog."<br>AI Generates PBIs<br><br>Based on the feature description, the AI structures Epics, User Stories, and Subtasks.<br>AI assigns story points, dependencies, and priority.<br>AI Executes the Action<br><br>The Custom GPT Action runs, submitting the generated PBIs directly into the project management tool’s database.<br>Confirmation &amp; Review<br><br>The system can return a confirmation message:<br>"PBIs have been submitted. Would you like to refine them further?"<br>✅ What’s Needed to Implement This?<br>Define a Custom GPT Action<br><br>The Action should be configured to execute a database query.<br>Example: "INSERT INTO pbis (title, description, type, priority, estimated_points) VALUES (...) "<br>Grant Secure Database Access<br><br>Custom GPT must be allowed to execute database operations securely.<br>We need a secure connection with proper authentication.<br>Ensure Query Execution is Reliable<br><br>Add error handling to prevent duplicate or incorrect entries.<br>Test &amp; Verify Data Submission<br><br>Run test cases to confirm PBIs are structured correctly in the backlog.<br>🔥 Pros of Using Custom GPT Actions<br>✅ No External API Required → Runs fully within the GPT model’s environment.<br>✅ Faster Development → No need for external API setup.<br>✅ Tighter Integration with AI → AI can validate &amp; refine PBIs before submission.<br>✅ More Secure → Data never leaves the controlled environment.<br><br>2️⃣ Using OpenAI’s API for External Integration<br>If you prefer a fully programmatic approach, you can call OpenAI’s API from your backend and integrate it with your project management tool.<br><br>✅ How It Works<br>Your backend sends a request to OpenAI’s API, asking it to generate PBIs.<br>OpenAI’s API returns structured PBIs (Epics, User Stories, Subtasks).<br>Your system validates the PBIs before inserting them into the database.<br>Your frontend retrieves and displays the PBIs in the backlog.<br>🔥 Pros of OpenAI’s API Approach<br>✅ More Customization → You control prompts, data structure, and validation.<br>✅ Can Run in the Background → Ideal for scheduled task automation.<br>✅ Scales Better → Works well for large teams &amp; real-time AI interactions.<br><br>🔷 Which Approach Should You Use?<br>🔹 If you want a fast, no-setup solution, go with Custom GPT Actions.<br>🔹 If you need more control, background processing, or external API calls, use OpenAI’s API.<br><br>🚀 Would you like help setting up a Custom GPT Action for submitting PBIs?<br><br>You said:<br>There is a price difference, right?<br>ChatGPT said:<br>Yes, there is a price difference between using Custom GPT Actions and OpenAI’s API integration. Here’s the breakdown:<br><br>💰 Cost of Using Custom GPT Actions<br>✅ Free (if using within ChatGPT Pro)<br>✅ No additional API costs<br>✅ No per-token billing<br><br>Why?<br>Custom GPT Actions run within ChatGPT’s existing infrastructure. OpenAI doesn’t charge per request for actions, but you must be on a ChatGPT Pro plan ($20/month).<br><br>However, if the Action connects to an external database or service that has costs (e.g., AWS, Firebase, Supabase, etc.), you’ll still need to pay for that separately.<br><br>💰 Cost of Using OpenAI’s API<br>❌ Pay-per-use pricing<br>✅ Costs depend on model + token usage<br><br>Current API Pricing (as of 2024)<br>Model Input (per 1K tokens) Output (per 1K tokens)<br>GPT-4-turbo $0.01 $0.03<br>GPT-4 $0.03 $0.06<br>GPT-3.5-turbo $0.0015 $0.002<br>Estimated API Cost for PBI Generation<br>If generating 5-10 PBIs at a time, a request might use 500-1000 tokens.<br>Cost per request: $0.005 - $0.02 (GPT-4-turbo)<br>If you generate PBIs 100 times per day:<br>GPT-4-turbo: ~$0.50 - $2/day<br>GPT-4: ~$1.50 - $6/day<br>GPT-3.5-turbo: ~$0.15 - $0.40/day<br>Additional Costs<br>Database storage: If using Firebase, AWS, or another DB, there may be small storage costs.<br>API Requests: If your project management tool has an API, it may have rate limits or extra costs.<br>Which is Cheaper?<br>If you already use ChatGPT Pro → Custom GPT Actions = FREE<br>No additional API costs.<br>Ideal if you just need to generate &amp; submit PBIs without extra complexity.<br>If you need external processing → OpenAI API = Paid (but scalable)<br>More expensive, but fully customizable.<br>Better if you want background processing, bulk PBI creation, or integrations.<br>🚀 Best Recommendation?<br>If you’re cost-conscious and just need basic PBI creation &amp; submission, start with Custom GPT Actions (free).<br><br>If you later need scalability, automation, and background AI processing, you can move to OpenAI’s API.<br><br>Would you like help defining a Custom GPT Action for submitting PBIs? 🔥<br><br>You said:<br>I want to do both but start with the API integration because I think that is what will evolve into a valuable feature with the possibilities for controlling the process and integrating it into the UI of our project management app.<br>It would be great to have the GPT action a backup for keeping costs down.<br>ChatGPT said:<br>That sounds like a great strategy! 🎯<br>By starting with API integration, you can fully control the process, customize it to fit the UI of your project management app, and enable deeper automation.<br><br>Later, implementing a Custom GPT Action as a backup will allow on-demand PBI creation while keeping costs down for smaller use cases.<br><br>✅ Step-by-Step Plan for API Integration<br>We\'ll start by integrating OpenAI’s API to generate PBIs and store them in your project management tool’s database.<br><br>Phase 1: API-Based PBI Submission<br>1️⃣ Define API Endpoints<br><br>POST /api/pbis → Accepts AI-generated PBIs and stores them in the database.<br>GET /api/pbis → Retrieves PBIs from the backlog.<br>2️⃣ Implement AI-Powered PBI Generation<br><br>Use OpenAI’s API (GPT-4-turbo) to generate Epics, User Stories, and Subtasks.<br>Apply Key Learnings &amp; Takeaways from past development.<br>3️⃣ Store PBIs in the Project Management Tool<br><br>Save PBIs in the AutoAgile database.<br>Attach metadata like priority, dependencies, and estimation.<br>4️⃣ Expose PBIs in the UI<br><br>Display PBIs in the backlog inside your Next.js app.<br>Allow user review &amp; refinement before finalizing.<br>Phase 2: Backup Solution - Custom GPT Action<br>If API costs become high, allow users to manually trigger a GPT Action to generate PBIs without API calls.<br><br>1️⃣ Create a Custom GPT Action<br><br>Action: generate_pbIs(feature_description: str) → JSON<br>Returns structured PBIs to be manually entered into the backlog.<br>2️⃣ Integrate with Your UI<br><br>Offer an option like "Generate PBIs via GPT" in the UI.<br>If API usage is high, fallback to GPT Action instead of API calls.<br>🚀 Next Steps<br>Would you like to:<br>1️⃣ Start defining the OpenAI API integration (set up endpoints, API calls)?<br>2️⃣ Set up the Custom GPT Action as a backup?<br>3️⃣ Plan both in parallel and create a roadmap?<br><br>You said:<br>Not yet. First:<br>1. I want us to discuss how it would be inplemented in the UI and provide the optimal UX.<br>2. Could we benefit from drafting the architecture, sequence diagrams, user flows?<br>3. Before we start coding, I want you to create PBI´s for the project and estimate complexity.<br>4. Create psql commands for creating the PBI´s.<br><br>Lets go through these steps one by one.<br><br>ChatGPT said:<br>That’s a solid structured approach! 🚀<br>By focusing on UX, architecture, planning, and PBI creation before coding, we’ll ensure a smooth implementation with fewer rewrites.<br><br>📌 Step 1: UI &amp; UX Discussion<br>Before implementing API-based PBI generation, we need to design how users will interact with it inside the Project Management System (PMS).<br><br>🎯 Key UX Considerations<br><br>✅ Where Should PBI Creation Happen?<br><br>Inside the Backlog View? (Best for structured planning)<br>Inside a Feature Request modal? (Good for quick task creation)<br>As a standalone "AI Assistant" panel? (Best for guided AI interaction)<br><br>✅ What Input Does the AI Need?<br><br>- Free-text Feature Description (User types in an idea)<br><br>- Structured Input (e.g., dropdowns for project, priority, complexity)<br><br>- Existing Tasks as Context (AI refines based on project backlog)<br><br>If we would start the process by asking the user to select item(s) from the backlog or create a new PBI, then we could keep the original feature idea/request and have the entire history saved.<br><br>I think the process should run the following way:<br>1. The user selects an item from the backlog or creates a new one.<br>2. AI asks a series of questions to gather more information about the feature, the goals, what problem it will solve, the expected outcome, etc..<br>Also, I think the AI would benefit from having access to the project’s history, the project’s goals, the project’s vision, the technical documentation.<br>We have to discuss what questions the AI should ask and how the user should input the answers.<br><br>✅ How Should the Output Be Handled?<br>Yes - Inline Editing: User sees generated PBIs and edits them before submission.<br>No - One-Click Submit: AI submits PBIs automatically.<br>Yes - Step-by-Step Refinement: AI asks clarifying questions before finalizing.<br><br>✅ Should the User See a Live Preview?<br>Yes → A real-time preview of the PBIs as the AI generates them.<br>No → AI generates them first, then the user reviews before submission.<br><br>✅ How Will Users Trigger AI PBI Generation?<br>Yes - Button → "Generate PBIs from Feature Request"<br>Maybe - Shortcut Command → /generate_pbi &lt;feature&gt;<br>No - Automated Suggestion → When a new feature is created, AI offers to generate PBIs<br><br>Instead of 3: Automated Suggestion → When a new feature is created, AI offers to help with refining the feature request and informs the user about the possibility of generating PBIs and what the feature request should include to make it easier for the AI to generate relevant PBIs.<br><br><br>📌 Suggested UI Flows<br><br>## Option 1: AI-Powered Backlog View<br>💡 Best for Teams Who Plan in Sprints 1️⃣ User navigates to the Backlog View.<br>2️⃣ Clicks “+ AI Generate PBIs” → A modal opens.<br>3️⃣ User inputs a feature description and selects project, priority, estimation strategy.<br>4. AI asks clarifying questions about the feature.<br>5. AI generates Epics, User Stories, and Subtasks.<br>6. User reviews and edits before submitting.<br><br>✅ Pros<br><br>Integrated into existing planning workflow.<br>Structured &amp; controlled task creation.<br>❌ Cons<br><br>Requires users to be inside the backlog to use AI.<br><br>## Option 2: Feature Request Modal with AI Assistance<br>💡 Best for Users Adding New Ideas 1️⃣ User opens Feature Request modal.<br>2️⃣ Enters high-level feature description.<br>3️⃣ Clicks “Generate PBIs” → AI suggests tasks.<br>4️⃣ User reviews, edits, and approves.<br>5️⃣ PBIs are pushed to the backlog.<br><br>✅ Pros<br><br>Works naturally when defining new features.<br>Faster workflow for brainstorming ideas.<br>❌ Cons<br><br>Might lack full backlog context when generating PBIs.<br><br>## Option 3: Dedicated AI Assistant Panel<br>💡 Best for Advanced AI-Driven Planning 1️⃣ User opens an “AI Assistant” panel.<br>2️⃣ AI asks clarifying questions about the feature.<br>3️⃣ AI generates Epics, User Stories, and Subtasks dynamically.<br>4️⃣ User modifies or approves PBIs.<br>5️⃣ PBIs are automatically pushed to the backlog.<br><br>✅ Pros<br>More structured, guided PBI refinement.<br>AI helps users refine vague ideas into structured tasks.<br><br>❌ Cons<br>More complex UI to implement.<br><br>I´m leaning towards option 1 with the added step 4. AI asks clarifying questions about the feature.<br><br>🚀 What’s Next?<br>1️⃣ Which UI flow do you prefer (Backlog, Feature Request Modal, AI Assistant)?<br>2️⃣ Would you like wireframes/mockups before moving to architecture diagrams?<br><br>See my answers in the list above:<br><br>That’s a fantastic refinement of the process! The form-based approach for AI clarifying questions makes a lot of sense. It improves UX efficiency and keeps the process structured, ensuring users don\'t feel overwhelmed by an open-ended conversation.<br><br>📌 Finalized UI/UX Approach<br>✅ Option 1: AI-Powered Backlog View (with Clarifying Questions &amp; Form Input)<br>💡 Best for Teams Who Plan in Sprints 1️⃣ User selects an existing item from the backlog or creates a new feature request.<br>2️⃣ Clicks “+ AI Generate PBIs” → A modal opens.<br>3️⃣ User inputs a feature description and selects project, priority, estimation strategy.<br>4️⃣ AI presents clarifying questions in a form UI (instead of free-text chat).<br>5️⃣ User fills in answers in structured fields → This data is stored for future reference.<br>6️⃣ AI generates Epics, User Stories, and Subtasks dynamically.<br>7️⃣ User reviews and edits before submitting PBIs to the backlog.<br><br>🚀 Why This Works Best<br>✅ Keeps the original feature request history → Tracks context properly.<br>✅ AI doesn’t rely on unstructured responses → User inputs structured answers via the form.<br>✅ Faster, structured refinement process → Reduces ambiguity in AI-generated PBIs.<br>✅ Guided yet flexible → AI only asks for details when necessary (conditional logic in the form).<br>✅ More efficient user experience → No need to manually structure long text responses.<br><br>📌 Next Steps<br>1️⃣ Define the AI Clarifying Questions for the Form<br>We need to list the essential clarifying questions AI should ask. Some of these will be always required, and others will be conditional (depending on the feature type, project, etc.).<br><br>Example questions:<br><br>What problem does this feature solve? (Always required)<br>Who is the primary user? (Required for user-facing features)<br>What is the expected outcome? (Always required)<br>Are there existing related tasks or dependencies? (Optional)<br>Does this feature impact security or performance? (Conditional: Only if related to infrastructure)<br>Would you like me to draft a complete list of questions based on best practices?<br><br>2️⃣ Create Wireframes for the Modal<br>Since we’re using a form-based approach instead of a chat-like UI, we should create wireframes for:<br><br>The initial “AI Generate PBIs” modal<br>The form layout for clarifying questions<br>The final PBI preview screen<br>Do you want Figma wireframes or a quick text-based UI flow first?<br><br>3️⃣ Technical Considerations<br>Would you like the AI-generated clarifying questions to be:<br><br>Fixed (predefined in the UI)? → Simpler, but less flexible.<br>Dynamically generated (AI decides what to ask)? → More flexible, but requires more logic.<br>🚀 Let’s finalize these details so we can move into architecture and implementation!<br><br><br>You said:<br>1. draft a complete list of questions based on best practices + what you consider being valuable to be able to provide the best quality PBI´s.<br><br>2. I think it should be a separate full page instead of a modal. <br>On that page user should be able to select a PBI from a dropdown combobox with search functionality.<br>(We are using headless UI combobox for the parent task selector)<br>From each PBI, the user should be able to click a button to open that PBI on the AI refinement page.<br><br>If you can provide figma wireframes that would be fantastic.<br><br>3. Let´s start with the fixed questions, and then maybe add dynamically generated if needed.<br>ChatGPT said:<br>🚀 Step 1: Complete List of AI Clarifying Questions for High-Quality PBIs<br>The goal is to ensure AI-generated PBIs are highly structured, relevant, and actionable. Below is a best-practice-based question framework that balances user intent, technical feasibility, and product strategy.<br><br>🟢 General Questions (Always Required)<br>What problem does this feature solve? (User’s pain point, why it’s needed)<br>What is the expected outcome or benefit? (How success is measured)<br>Who is the primary user? (Developers, admins, end-users, etc.)<br>What should the AI avoid when generating PBIs? (Redundant features, conflicting solutions, etc.)<br>Does this relate to an existing Epic or User Story? (Ensures PBIs are linked to relevant work)<br>🟡 Questions Based on Feature Type<br>🔹 For UI/UX Features<br>What are the key UI components or interactions?<br>Should it follow an existing design system? (Yes/No - If yes, specify the system)<br>Are there any accessibility considerations? (WCAG, ARIA, keyboard navigation, etc.)<br>🔹 For Backend/API Features<br>Which services, endpoints, or database models will be impacted?<br>Are there security concerns (authentication, authorization, sensitive data)?<br>Does it require performance optimizations (caching, async processing, etc.)?<br>🔹 For Automation or AI-Powered Features<br>Should the system make automatic decisions, or require human approval?<br>What are the key inputs and outputs?<br>Are there ethical concerns with automation (bias, transparency, etc.)?<br>🔹 For Integrations<br>Which external service(s) will this integrate with?<br>Are there API rate limits or other constraints?<br>Should the system sync data in real-time or on a schedule?<br>🔹 For Performance-Related Features<br>What is the current bottleneck? (DB queries, large payloads, front-end rendering, etc.)<br>What’s the performance expectation? (e.g., Reduce response time from 500ms → 100ms)<br>🟠 Workflow &amp; Dependencies<br>Are there any preconditions before this can be implemented? (Feature flags, migrations, etc.)<br>Does it require collaboration across teams? (Design, DevOps, Security, etc.)<br>Are there known risks or potential blockers? (Legacy code dependencies, technical debt, etc.)<br>🟣 Estimation &amp; Prioritization<br>What is the priority level? (Critical, High, Medium, Low)<br>What’s the estimated impact? (Revenue, user retention, operational efficiency)<br>Are there any deadlines or time-sensitive constraints? (Launch dates, dependencies, etc.)<br>💡 Expected AI Output<br>Using these questions, AI should generate:<br><br>✅ Epics (High-level objectives)<br>✅ User Stories (Breaking down the work for users)<br>✅ Subtasks (Actionable development steps)<br>This structured input ensures AI can create high-quality, actionable PBIs instead of vague tasks.<br><br>🚀 Step 2: Wireframes - Full Page UI for AI Refinement<br>I’ll create Figma wireframes showcasing the full-page AI refinement process with:<br><br>Dropdown Combobox (Headless UI) to select an existing PBI.<br>AI-Powered Refinement Page (Clarifying Questions + PBI Generation).<br>Buttons to Open &amp; Edit PBIs in the System.<br>🔹 Let me generate the wireframes and share them with you shortly. 🚀<br><br>🚀 Step 3: Fixed Questions First, Dynamic Later<br>✅ We’ll start with fixed questions (predefined in the UI) to keep the process structured. ✅ If we later need more intelligent, adaptive AI prompts, we can introduce dynamic question generation.<br><br>🎯 Next Steps<br>1️⃣ I\'ll generate and share the Figma wireframes.<br>2️⃣ Once we have UI approval, we’ll define the API &amp; database structure.<br>3️⃣ Then, we move to implementation 🚀.<br><br>Let me work on the wireframes now! 🎨📌<br><br>You said:<br>A lot of the questions in step 1 could be answered by giving the AI access to technical doccumentation. <br>If the AI doesn´t find the answer there, then the question should be asked. <br>ChatGPT said:<br>That’s a fantastic approach! 🚀 By leveraging technical documentation, we can reduce user input fatigue and ensure AI-generated PBIs are as accurate as possible.<br><br>🔹 Refining the AI Questioning Process<br>Instead of blindly asking all 25+ questions, we will implement a smart, two-step process:<br><br>Step 1: Auto-Extract Answers from Technical Documentation<br>📌 Before asking the user anything, AI will try to find the answer from:<br><br>Project’s API Documentation (Endpoints, models, authentication, rate limits).<br>Database Schema (Relationships, constraints, existing data models).<br>Project’s Vision &amp; Goals (Product strategy, company objectives).<br>Past User Stories &amp; Epics (Ensuring consistency with previous PBIs).<br>Best Practices &amp; Key Learnings (Mistakes to avoid, past development issues).<br>Step 2: Ask Only the Unanswered Questions<br>📌 If AI can’t find an answer, it will only ask the missing information.<br><br>For example:<br><br>If API docs specify affected endpoints, AI skips “Which endpoints will be impacted?”<br>If the database schema reveals relationships, AI skips “What data models are involved?”<br>If a past User Story addressed similar issues, AI suggests improvements instead of asking from scratch.<br>🔹 UX Implementation: Full-Page AI Refinement Flow<br>✅ Step 1: User selects or creates a PBI.<br>✅ Step 2: AI scans project documentation for answers.<br>✅ Step 3: AI generates PBIs, showing:<br><br>🔹 Pre-filled answers from documentation.<br>🔹 Questions only for missing details.<br>✅ Step 4: User reviews &amp; refines before submitting.<br>This ensures: 🚀 Less manual input → AI handles most of the work.<br>🚀 More accurate PBIs → AI cross-checks against existing docs.<br>🚀 Faster process → Users answer only what AI can’t infer.<br><br>🔹 What’s Next?<br>1️⃣ Figma Wireframes – I’ll create the UX flow for AI refinement.<br>2️⃣ Technical Documentation Strategy – We define:<br><br>📌 Where &amp; how AI should access project documentation.<br>📌 Which docs are needed for different PBI types.<br>3️⃣ Implementation Plan – Define how AI extracts, processes &amp; asks questions.<br>Would you like me to proceed with wireframes first or technical documentation strategy first? 🚀<br><br>You said:<br>AI Estimation is the next thing we should include, so don´t bother asking the user for that.<br>ChatGPT said:<br>Got it! 🚀 AI will automatically estimate Story Points instead of asking the user.<br><br>🔹 How AI Will Estimate Story Points<br>Instead of manually entering estimates, AI will calculate complexity, effort, and uncertainty based on:<br><br>1️⃣ Complexity Analysis<br><br>Database impact → Does it involve schema changes? Complex relationships?<br>API impact → Are new endpoints needed? Major refactoring required?<br>Frontend impact → Is it a UI change or deep business logic?<br>Security concerns → Are there authentication/authorization risks?<br>2️⃣ Effort Calculation<br><br>Lines of code (LOC) prediction → Based on past PBIs of similar scope.<br>Number of components affected → More files = higher effort.<br>Testing needs → How much unit &amp; integration testing is required?<br>3️⃣ Uncertainty Rating<br><br>Does the AI find enough documentation?<br>Does this feature require new technology?<br>Does the feature involve high unknowns (e.g., 3rd party integrations)?<br>📌 Estimation Output (Fibonacci Scale) AI will output a story point estimate (1, 2, 3, 5, 8, 13...) with reasoning:<br><br>🟢 Low Complexity → 1-3 Points<br>🟡 Moderate Complexity → 5-8 Points<br>🔴 High Complexity &amp; Unknowns → 13+ Points<br>🔹 Next Steps<br>1️⃣ Figma Wireframes (Integrate AI estimation in UI).<br>2️⃣ Define Estimation Algorithm (How AI calculates effort).<br>3️⃣ Implement AI Estimation API (Story Point prediction).<br><br>Where should AI show the estimated Story Points?<br><br>Inside the PBI form? (User sees it before submission).<br>Only in the backlog? (After PBI is saved).<br>Let me know, and I’ll include it in the wireframes! 🚀<br><br>You said:<br>I want the AI estimation included in the task description and currently all tasks have a field for estimation where user can enter story points, instead of adding another field for AI estimate I´m thinking we could indicate if estimation is set by AI or if it is human edited. What do you think?<br>ChatGPT said:<br>That’s a great approach! It keeps the UI clean while still allowing users to see whether the estimate was AI-generated or manually adjusted.<br><br>🔹 How to Implement AI Estimation in the Task Description<br>1️⃣ Story Points Field Behavior:<br><br>AI auto-generates an initial estimate when a PBI is created.<br>The user can edit the estimate manually if they disagree.<br>If the user changes the AI estimate, we mark it as human-edited.<br>2️⃣ Indicating AI vs. Human Estimates:<br><br>AI-generated estimate → Display a small "AI" badge next to the number.<br>User-edited estimate → Display a "User Edited" label (or remove the AI badge).<br>3️⃣ Example UI Representations:<br><br>AI Estimate: Story Points: 5 (AI)<br>User-Edited: Story Points: 8 (User Edited)<br>🔹 Backend &amp; Database Changes<br>Keep the existing story_points field.<br><br>Add a new field: is_ai_estimate (true/false)<br><br>true → AI-generated<br>false → Manually overridden<br>When AI sets the estimate, is_ai_estimate = true.<br><br>If a user changes the estimate, set is_ai_estimate = false.<br><br>🔹 User Flow<br>1️⃣ AI suggests an estimate when the PBI is created.<br>2️⃣ User can keep it or edit it.<br>3️⃣ If edited, it switches from AI to user-edited.<br>4️⃣ The UI reflects whether the estimate is AI-generated or manually adjusted.<br><br>🔹 Advantages of This Approach<br>✅ Minimal UI clutter – No extra fields.<br>✅ Users stay in control – AI assists but doesn’t dictate.<br>✅ Clear distinction between AI-generated &amp; human-set values.<br>✅ Easy implementation – Just an extra is_ai_estimate field.<br><br>Next Steps<br>🔹 Update PBI Creation Flow to auto-assign AI estimates.<br>🔹 Modify UI to display AI/User-edited status.<br>🔹 Ensure API updates is_ai_estimate correctly.<br><br>Would you like this logic to be included in the Figma wireframes? 🚀<br><br>You said:<br>Yes<br>ChatGPT said:<br>Great! I’ll now create Figma wireframes incorporating the AI Estimation Flow into the Task Refinement Page.<br><br>📌 Wireframe Features<br>🔹 Full-Page AI Refinement UI (instead of a modal)<br>🔹 Dropdown Combobox for Selecting a PBI (Headless UI)<br>🔹 Structured Form-Based AI Q&amp;A for refinement<br>🔹 Story Points Section:<br><br>Shows AI-estimated points with an "AI" badge<br>Allows manual override (switching to "User Edited")<br>I’ll generate the wireframes now! 🚀 Stay tuned. 🎨<br><br><br>Here is the wireframe for the AI-powered task refinement page! 🎨<br><br>Key Features in the Wireframe:<br>✅ Full-page layout for refining PBIs<br>✅ Dropdown combobox with search functionality to select a PBI<br>✅ AI-driven structured form where AI asks questions and users respond<br>✅ Story Points Estimation section:<br><br>Shows AI-generated values with an "AI" badge<br>Allows manual override, switching to a "User Edited" label<br>Would you like any modifications before we move forward with implementation? 🚀<br><br>You said:<br>Can you provide a text based UI description instead?<br>I just need the different components of the page that is needed and then I can do layout and design myself.<br>ChatGPT said:<br>AI-Powered Task Refinement Page - UI Structure<br>This page provides a structured interface for refining PBIs with AI assistance. Below is a breakdown of all the key UI components that should be included.<br><br>📌 Main Components<br>1️⃣ Page Header (Fixed at the Top)<br>Title: "AI-Powered Task Refinement"<br>Back Button: Returns to the backlog view<br>Help Icon: Opens a tooltip explaining how AI refinement works<br>2️⃣ Task Selection Section<br>Label: "Select a PBI to refine"<br>Dropdown Combobox (Headless UI)<br>Allows searching and selecting an existing PBI<br>Displays title &amp; ID of each task<br>Optional: Show the task type (Epic, User Story, Subtask)<br>Button: "Open Task in AI Refinement"<br>3️⃣ AI-Assisted Refinement Form (Dynamic Based on Task)<br>Section Title: "Refinement Questions"<br>Questions Panel<br>AI provides structured questions based on the selected task<br>Questions should be grouped by categories (e.g., Goals, Technical Details, Dependencies)<br>Each question has:<br>A text input (for short answers) or a textarea (for detailed explanations)<br>Pre-filled values if available from technical documentation<br>AI-generated suggestions (editable)<br>Toggle: "Show AI Recommendations"<br>Expands a section with AI-generated recommendations for this task<br>4️⃣ AI Estimation &amp; Task Metadata<br>Label: "Estimation &amp; Task Metadata"<br>Story Points Field:<br>Displays the AI-estimated story points (default)<br>Allows manual override with a "User Edited" indicator<br>Additional Metadata:<br>Task Priority (Low, Medium, High)<br>Dependencies (Auto-detected &amp; user-editable)<br>Related Epics / Stories<br>5️⃣ Actions &amp; Submission<br>Primary Button: "Submit to Backlog"<br>Secondary Button: "Save Draft" (to store refinement progress without submitting)<br>AI Chat History Panel (Optional): Displays past AI interactions for reference<br>💡 Notes &amp; Considerations<br>Form should autosave periodically to prevent data loss<br>If the user switches tasks, ask for confirmation before discarding unsaved changes<br>AI should fetch relevant project documentation before asking unnecessary questions<br>Would you like to adjust any sections or add more details? 🚀<br><br>You said:<br>Some suggested changes:<br>1. It should be possible to add a parent task including all subtasks, in case the user has already worked on creating epic, user stories and subtasks. That way AI gets the whole feature description and can start over.<br>2. We alreadu use autosave with debounced and we also use websockets for real time updates.<br>3. We need a simple settings page where user can choose AI provider (OpenAI to start with) and input API credentials:<br>ChatGPT said:<br>Great suggestions! Here’s the updated UI structure incorporating your changes:<br><br>📌 AI-Powered Task Refinement Page - Updated UI Structure<br>This page enables users to refine PBIs with AI assistance, while ensuring flexibility for existing task hierarchies, real-time updates, and AI provider settings.<br><br>1️⃣ Page Header (Fixed at the Top)<br>Title: "AI-Powered Task Refinement"<br>Back Button: Returns to the backlog view<br>Help Icon: Opens a tooltip explaining how AI refinement works<br>2️⃣ Task Selection Section<br>Label: "Select a PBI or Parent Task to Refine"<br>Dropdown Combobox (Headless UI)<br>Searchable dropdown to select an individual task (PBI, User Story, or Subtask)<br>Checkbox: "Include all subtasks" (if a parent task is selected)<br>Optional: Show task type (Epic, User Story, Subtask)<br>Button: "Open in AI Refinement"<br>✅ New Feature: If a parent task is selected with "Include all subtasks," the AI receives the full feature breakdown instead of an isolated task.<br><br>3️⃣ AI-Assisted Refinement Form<br>Section Title: "AI-Powered Refinement Questions"<br>Questions Panel<br>AI generates structured questions based on the selected task(s)<br>Grouped Categories:<br>Feature Goals &amp; Outcomes<br>Technical Requirements<br>Dependencies &amp; Risks<br>Acceptance Criteria<br>Each question has:<br>A text input (for short answers) or a textarea (for detailed explanations)<br>Pre-filled values if available from technical documentation<br>AI-generated suggestions (editable)<br>Toggle: "Show AI Recommendations"<br>Expands a section with AI-generated recommendations for this task<br>✅ New Feature: If the user selects a parent task with subtasks, AI dynamically adjusts questions to consider the full hierarchy.<br><br>4️⃣ AI Estimation &amp; Task Metadata<br>Label: "Estimation &amp; Task Metadata"<br>Story Points Field:<br>AI-generated story points (default)<br>Allows manual override with a "User Edited" indicator<br>Additional Metadata:<br>Task Priority (Low, Medium, High)<br>Dependencies (Auto-detected &amp; user-editable)<br>Related Epics / Stories<br>✅ New Feature: Parent-child relationships are preserved, meaning AI-generated metadata accounts for linked tasks.<br><br>5️⃣ Real-Time Updates &amp; Autosave<br>WebSocket-Enabled: Any changes made instantly update other users in real-time<br>Debounced Autosave: Saves progress periodically to prevent data loss<br>Undo/Redo: Simple history tracking for user changes<br>✅ New Feature: Uses existing WebSocket + debounced autosave setup for seamless real-time updates.<br><br>6️⃣ Actions &amp; Submission<br>Primary Button: "Submit to Backlog"<br>Secondary Button: "Save Draft" (stores refinement progress without submitting)<br>AI Chat History Panel (Optional): Displays past AI interactions for reference<br>7️⃣ AI Provider Settings Page<br>Page Title: "AI Integration Settings"<br>Dropdown: "Select AI Provider" (Starting with OpenAI)<br>Future support for multiple providers (Anthropic, Azure, Local AI, etc.)<br>API Key Input Field<br>Test Connection Button (Validates API credentials)<br>Save Settings Button<br>✅ New Feature: Centralized AI provider settings so users can configure API credentials before using AI-powered refinement.<br><br>Final Thoughts<br>✅ Supports full feature refinement (Epics + Subtasks)<br>✅ Uses real-time WebSocket updates + autosave (no lost work)<br>✅ Gives users control over AI-generated estimations<br>✅ Modular AI provider integration for future flexibility<br><br>🚀 Would you like any additional refinements before we move forward?<br><br>You said:<br>How do we give AI permission to write in the database?<br>ChatGPT said:<br>Granting AI Permission to Write to the Database<br>For AI to write to the database, we need a secure and controlled mechanism to ensure data integrity, security, and prevent unauthorized access.<br><br>1️⃣ Recommended Approach: Secure API Endpoint<br>Instead of allowing AI direct access to the database, we expose a controlled API that the AI can interact with.<br><br>✅ Steps to Implement<br>Create an API Endpoint (e.g., /api/pbis)<br><br>Accepts AI-generated Epics, User Stories, Subtasks<br>Validates input before saving to DB<br>Use API Authentication<br><br>API Key or OAuth2 Token: AI must authenticate before sending requests.<br>Store AI credentials securely in environment variables.<br>Define Access Controls<br><br>Restrict AI to specific actions (e.g., insert PBIs, update fields)<br>Role-Based Access Control (RBAC): AI should have a limited DB role (e.g., ai_writer).<br>Validate AI-Generated Data<br><br>Enforce schema validation (e.g., JSON Schema)<br>Apply business rules (e.g., prevent circular dependencies)<br>Use an AI Service Account<br><br>AI interacts as a designated system user (not a superuser)<br>Logs all AI interactions for auditability<br>2️⃣ Backend Implementation<br>📌 Create the API Route (/api/pbis)<br>python<br>Copy<br>Edit<br>from flask import Blueprint, request, jsonify<br>from models import db, PBI<br>from auth_middleware import verify_ai_auth<br><br>bp = Blueprint("ai_pbi_api", __name__)<br><br>@bp.route("/api/pbis", methods=["POST"])<br>@verify_ai_auth # ✅ Require AI authentication<br>def create_pbi():<br>"""Handles AI-generated PBI creation"""<br><br>data = request.json<br>if not data:<br>return jsonify({"error": "No data provided"}), 400<br><br># ✅ Validate input structure<br>required_fields = ["title", "description", "task_type", "priority"]<br>if not all(field in data for field in required_fields):<br>return jsonify({"error": "Missing required fields"}), 400<br><br># ✅ Insert into database<br>new_pbi = PBI(<br>title=data["title"],<br>description=data["description"],<br>task_type=data["task_type"],<br>priority=data.get("priority", "Medium"),<br>estimated_points=data.get("estimated_points", None), # AI estimate<br>created_by="AI", # Track source<br>)<br><br>db.session.add(new_pbi)<br>db.session.commit()<br><br>return jsonify({"message": "PBI created successfully", "id": new_pbi.id}), 201<br>3️⃣ AI Authentication &amp; Security<br>📌 Use API Keys to Restrict Access<br>Middleware for AI Authentication (auth_middleware.py):<br><br>python<br>Copy<br>Edit<br>from flask import request, jsonify<br>import os<br><br>VALID_AI_API_KEY = os.getenv("AI_API_KEY")<br><br>def verify_ai_auth(func):<br>"""Middleware to verify AI authentication"""<br>def wrapper(*args, **kwargs):<br>api_key = request.headers.get("X-API-Key")<br>if api_key != VALID_AI_API_KEY:<br>return jsonify({"error": "Unauthorized AI access"}), 403<br>return func(*args, **kwargs)<br>return wrapper<br>✅ AI must send a valid API key in the request headers:<br><br>json<br>Copy<br>Edit<br>{<br>"title": "Implement AI Task Refinement",<br>"description": "Break down AI task refinement into structured PBIs",<br>"task_type": "Epic",<br>"priority": "High",<br>"estimated_points": 8<br>}<br>🛡 Security Best Practices<br><br>Rotate API Keys regularly<br>Use role-based permissions<br>Log all AI interactions for debugging &amp; auditing<br>Limit AI’s scope to only modifying PBIs (not users, projects, etc.)<br>4️⃣ PostgreSQL Database Role for AI<br>Instead of granting full DB access, create a limited-access AI role:<br><br>sql<br>Copy<br>Edit<br>-- Create a restricted AI role<br>CREATE ROLE ai_writer WITH LOGIN PASSWORD \'securepassword\';<br><br>-- Grant permission to insert PBIs but not delete them<br>GRANT INSERT, UPDATE ON pbis TO ai_writer;<br>5️⃣ WebSocket Integration (Optional)<br>If using real-time updates, AI should broadcast new PBIs:<br><br>python<br>Copy<br>Edit<br>from flask_socketio import emit<br><br>@bp.route("/api/pbis", methods=["POST"])<br>@verify_ai_auth<br>def create_pbi():<br>...<br>db.session.commit()<br><br># 🔥 Notify frontend in real-time<br>emit("pbi_created", {"id": new_pbi.id, "title": new_pbi.title}, broadcast=True)<br><br>return jsonify({"message": "PBI created successfully", "id": new_pbi.id}), 201<br>🚀 Final Summary<br>✅ API Gateway: AI writes via /api/pbis<br>✅ Secure Authentication: AI must provide an API key<br>✅ Database Role: AI is limited to inserting/updating PBIs only<br>✅ Schema Validation: Ensures AI submits valid data<br>✅ Real-Time Updates: WebSocket notifications for new PBIs<br>🎯 Next Steps<br>Would you like:<br><br>To implement a similar API for retrieving PBIs? (GET /api/pbis)<br>AI role to have limited UPDATE access for task refinements?<br>A test script to verify AI authentication &amp; data submission?<br>You said:<br>I´m saving you questions for later.<br><br>For now let´s get back on track:<br><br>Can you rewrite the entire plan based on what we have agreed on so far and then move on to step 2.<br><br>1. [COMPLETED] I want us to discuss how it would be inplemented in the UI and provide the optimal UX.<br>2. Could we benefit from drafting the architecture, sequence diagrams, user flows?<br>3. Before we start coding, I want you to create PBI´s for the project and estimate complexity.<br>4. Create psql commands for creating the PBI´s.<br><br>Lets go through these steps one by one.<br>ChatGPT said:<br>AI-Powered PBI Generation &amp; Integration Plan<br>Overview<br>We are developing an AI-powered system that automates the generation and refinement of Epics, User Stories, and Subtasks in our Project Management System (PMS). The system will allow users to refine feature ideas through a structured, guided AI interaction and directly submit PBIs (Product Backlog Items) into the backlog.<br><br>✅ Phase 1: UI/UX Implementation Plan (Completed)<br>We have defined the best user experience (UX) strategy and identified how users will interact with the AI-driven PBI refinement system.<br><br>🔹 UI/UX Key Decisions<br>Where PBI Creation Happens<br><br>Inside the Backlog View → AI-assisted refinement happens within the backlog planning workflow.<br>Standalone Full-Page PBI Refinement View → Instead of a modal, we will use a full-page AI refinement interface.<br>How the User Provides Input<br><br>Users select an existing PBI from a searchable combobox (Headless UI)<br>Users can also add a parent task, including all its subtasks, ensuring AI gets full context.<br>How AI Refines PBIs<br><br>AI asks structured, best-practice questions<br>AI accesses technical documentation before asking questions, avoiding redundant prompts.<br>Inline Editing: AI suggests PBIs, and the user can edit before finalizing.<br>Step-by-Step Refinement: AI refines tasks dynamically based on user responses.<br>How Users Trigger AI PBI Generation<br><br>Button: "Generate PBIs from Feature Request"<br>AI Guidance: AI offers to help refine a new feature request when a user creates a new PBI.<br>Shortcut Command: /generate_pbi &lt;feature&gt;<br>How AI Estimation Works<br><br>AI assigns story points based on complexity<br>The estimation field tracks whether it was set by AI or manually edited by the user.<br>Users can override AI estimates manually.<br>🔹 Finalized UI Components for PBI Refinement Page<br>📌 PBI Refinement Page (Full-Screen UI)<br>🔍 Searchable Dropdown (Combobox)<br><br>Users search &amp; select a PBI from the backlog.<br>Users can add a parent task + subtasks for AI to analyze.<br>📜 AI Question Form<br><br>AI asks structured questions to refine the feature request.<br>AI auto-fills answers when possible (from project history/docs).<br>User fills in missing details manually.<br>📝 AI-Generated PBIs Section<br><br>AI dynamically generates Epics, User Stories, and Subtasks.<br>PBIs appear in real-time as AI refines them.<br>Users can edit PBIs inline before submission.<br>📊 AI Story Point Estimation<br><br>AI auto-assigns story points based on complexity.<br>Indicator shows if estimation was set by AI or edited by the user.<br>🔄 Autosave &amp; WebSockets<br><br>Debounced auto-save ensures changes are not lost.<br>WebSockets enable real-time updates across team members.<br>🛠 Settings Page<br><br>AI Provider Selection: OpenAI (default)<br>API Key Input: Secure credentials storage for AI integration.<br>🚀 Phase 2: Architecture, Sequence Diagrams &amp; User Flows<br>Why Do We Need This?<br>Before coding, we should draft architectural diagrams to:<br><br>Visualize the AI’s role in the PMS system.<br>Map the user flow from input to AI-generated PBIs.<br>Ensure database integration is structured correctly.<br>Avoid unnecessary rewrites by planning dependencies.<br>📌 Key Architectural Components<br>1️⃣ Frontend UI<br><br>Next.js React App<br>Full-page AI refinement view<br>Headless UI Combobox for PBI selection<br>Real-time UI updates via WebSockets<br>2️⃣ AI Processing<br><br>AI fetches context from technical documentation &amp; backlog<br>AI generates PBIs dynamically using structured rules<br>AI assigns story points automatically<br>AI questions the user only when necessary (context-aware questioning)<br>3️⃣ Backend API<br><br>/api/pbis → AI submits PBIs<br>/api/pbis/:id → Retrieve PBIs for AI refinement<br>Authentication middleware (API keys for AI)<br>WebSockets for real-time updates<br>4️⃣ Database Schema Changes<br><br>Track whether AI or user set story points<br>Store AI-generated questions &amp; answers for auditing<br>Link PBIs to their refined feature requests<br>📌 Next Steps<br>1️⃣ Create High-Level Architecture Diagram<br>How the UI, AI processing, and backend interact<br>Illustrate AI refinement flow &amp; database interactions<br>2️⃣ Define Sequence Diagrams<br>User selects a feature request → AI processes it → PBIs are generated<br>AI refines questions dynamically based on available data<br>3️⃣ Map User Flows<br>Step-by-step process from selecting a PBI to AI refinement &amp; submission<br>Flowchart of AI interaction (when to ask, when to auto-fill answers)<br>Would you like me to generate initial architecture &amp; sequence diagrams now? 🚀<br><br>You said:<br>Yes, I would like that but you also need to know waht I use for backend, right?<br>Python / flask and postgreSQL. <br>ChatGPT said:<br>Yes, knowing that your backend is built with Python / Flask and PostgreSQL is crucial for designing the architecture and sequence diagrams effectively.<br><br>I will now generate the following:<br><br>1️⃣ High-Level Architecture Diagram → How the UI, AI processing, and backend interact.<br>2️⃣ Sequence Diagram → How a PBI is refined by AI and submitted to the database.<br>3️⃣ User Flow Diagram → How users interact with AI-driven PBI refinement.<br><br>Since we are using Flask for the backend, I will ensure that the API endpoints and WebSocket handling align with Flask’s best practices. I’ll also consider PostgreSQL schema changes to store AI-generated PBIs effectively.<br><br>I will now generate these diagrams. Stay tuned! 🎨🚀<br><br><br>Analysis errored<br>python<br>Always show details<br><br>Copy<br>import matplotlib.pyplot as plt<br>import matplotlib.patches as mpatches<br><br>def draw_architecture_diagram():<br>fig, ax = plt.subplots(figsize=(10, 6))<br><br># Title<br>ax.set_title("High-Level Architecture: AI-Driven PBI Refinement", fontsize=14, fontweight="bold")<br><br># Components<br>components = {<br>"Frontend (Next.js)": (0.2, 0.8),<br>"AI Processing (GPT-4 API)": (0.5, 0.8),<br>"Backend API (Flask)": (0.8, 0.8),<br>"PostgreSQL Database": (0.8, 0.5),<br>"WebSockets (Real-time Updates)": (0.5, 0.5)<br>}<br><br># Draw components<br>for label, (x, y) in components.items():<br>ax.add_patch(mpatches.FancyBboxPatch((x-0.1, y-0.05), 0.2, 0.1, boxstyle="round,pad=0.1", <br>facecolor="lightblue", edgecolor="black"))<br>ax.text(x, y, label, ha="center", va="center", fontsize=10, fontweight="bold")<br><br># Arrows<br>arrows = [<br>((0.2, 0.8), (0.5, 0.8)), # Frontend → AI Processing<br>((0.5, 0.8), (0.8, 0.8)), # AI Processing → Backend API<br>((0.8, 0.8), (0.8, 0.5)), # Backend API → PostgreSQL<br>((0.8, 0.5), (0.8, 0.8)), # PostgreSQL → Backend API<br>((0.8, 0.8), (0.5, 0.5)), # Backend API → WebSockets<br>((0.5, 0.5), (0.2, 0.8)) # WebSockets → Frontend<br>]<br><br>for start, end in arrows:<br>ax.annotate("", xy=end, xytext=start, arrowprops=dict(arrowstyle="-&gt;", lw=2))<br><br># Hide axes<br>ax.set_xticks([])<br>ax.set_yticks([])<br>ax.set_frame_on(False)<br><br># Show diagram<br>plt.show()<br><br># Draw the architecture diagram<br>draw_architecture_diagram()<br>I encountered an issue generating the architecture diagram. Let me try again. \u200b\u200b<br><br><br>Analysis errored<br>python<br>Always show details<br><br>Copy<br>import matplotlib.pyplot as plt<br>import matplotlib.patches as mpatches<br><br>def draw_architecture_diagram():<br>fig, ax = plt.subplots(figsize=(10, 6))<br><br># Title<br>ax.set_title("High-Level Architecture: AI-Driven PBI Refinement", fontsize=14, fontweight="bold")<br><br># Components<br>components = {<br>"Frontend (Next.js)": (0.2, 0.8),<br>"AI Processing (GPT-4 API)": (0.5, 0.8),<br>"Backend API (Flask)": (0.8, 0.8),<br>"PostgreSQL Database": (0.8, 0.5),<br>"WebSockets (Real-time Updates)": (0.5, 0.5)<br>}<br><br># Draw components<br>for label, (x, y) in components.items():<br>ax.add_patch(mpatches.FancyBboxPatch((x-0.1, y-0.05), 0.2, 0.1, boxstyle="round,pad=0.1", <br>facecolor="lightblue", edgecolor="black"))<br>ax.text(x, y, label, ha="center", va="center", fontsize=10, fontweight="bold")<br><br># Arrows<br>arrows = [<br>((0.2, 0.8), (0.5, 0.8)), # Frontend → AI Processing<br>((0.5, 0.8), (0.8, 0.8)), # AI Processing → Backend API<br>((0.8, 0.8), (0.8, 0.5)), # Backend API → PostgreSQL<br>((0.8, 0.5), (0.8, 0.8)), # PostgreSQL → Backend API<br>((0.8, 0.8), (0.5, 0.5)), # Backend API → WebSockets<br>((0.5, 0.5), (0.2, 0.8)) # WebSockets → Frontend<br>]<br><br>for start, end in arrows:<br>ax.annotate("", xy=end, xytext=start, arrowprops=dict(arrowstyle="-&gt;", lw=2))<br><br># Hide axes<br>ax.set_xticks([])<br>ax.set_yticks([])<br>ax.set_frame_on(False)<br><br># Show diagram<br>plt.show()<br><br># Draw the architecture diagram<br>draw_architecture_diagram()<br>I encountered an issue generating the architecture diagram. Instead, I\'ll describe it textually:<br><br>High-Level Architecture for AI-Driven PBI Refinement<br>This architecture integrates Next.js (Frontend), Flask (Backend API), PostgreSQL (Database), GPT-4 API, and WebSockets for real-time updates.<br><br>Components &amp; Flow:<br>Frontend (Next.js)<br><br>User selects a feature request from the backlog.<br>Inputs details and triggers AI-powered PBI generation.<br>Displays AI-generated Epics, User Stories, and Subtasks.<br>Supports real-time updates via WebSockets.<br>AI Processing (GPT-4 API)<br><br>Receives feature descriptions and additional context.<br>Generates structured PBIs based on predefined rules and user input.<br>Returns the refined tasks to the backend.<br>Backend API (Flask)<br><br>Routes API requests between frontend and AI service.<br>Validates and processes AI-generated PBIs.<br>Stores tasks in PostgreSQL.<br>Emits WebSocket events for real-time updates.<br>PostgreSQL Database<br><br>Stores all Epics, User Stories, and Subtasks.<br>Keeps track of AI-generated vs. user-edited PBIs.<br>Supports search and retrieval.<br>WebSockets (Flask-SocketIO)<br><br>Sends real-time updates when PBIs are refined or modified.<br>Ensures users see immediate changes.<br>Next, I will draft sequence diagrams and user flows for how the AI-powered PBI refinement process works. Stay tuned! 🚀 \u200b\u200b<br><br>You said:<br>Please continue<br>ChatGPT said:<br>Step 2: Drafting Architecture, Sequence Diagrams, and User Flows<br>1️⃣ Sequence Diagram: AI-Driven PBI Refinement Process<br>Actors:<br>User: Interacts with the UI to refine and submit PBIs.<br>Frontend (Next.js): Sends user input to the backend and displays results.<br>Backend (Flask API): Processes requests and interacts with AI &amp; DB.<br>AI Service (GPT-4 API): Generates PBIs based on input.<br>PostgreSQL Database: Stores PBIs and project data.<br>🛠️ Step-by-Step Process (Refinement Flow)<br>1. User selects a PBI to refine<br>Opens the AI Refinement Page.<br>Selects an existing Feature Request from a searchable dropdown.<br>(Optional) Adds a parent task to include all subtasks.<br>2. AI Queries Additional Context<br>AI first searches project documentation (if available).<br>If AI finds missing information, it generates a set of questions.<br>User answers questions in a structured form UI.<br>AI refines its understanding.<br>3. AI Generates PBIs<br>AI generates:<br>Epics<br>User Stories<br>Subtasks<br>Assigns Story Points (AI estimation).<br>Saves metadata (dependencies, priorities, assignments).<br>4. User Reviews &amp; Modifies<br>The user can:<br>Edit task descriptions (inline).<br>Adjust AI estimations (AI tag remains visible).<br>Remove irrelevant PBIs.<br>5. PBIs are Auto-Saved &amp; Updated<br>Changes are debounced &amp; saved automatically.<br>WebSockets broadcast changes in real time to all users.<br>6. PBIs are Submitted to Backlog<br>When satisfied, the user confirms submission.<br>The system:<br>Inserts PBIs into PostgreSQL.<br>Marks them as ready for execution.<br>2️⃣ User Flow: AI-Powered Task Refinement<br>🟢 User selects a feature request → 🟡 AI refines using project data → 🟠 User answers missing details → 🔵 AI generates structured PBIs → 🟣 User reviews &amp; submits<br><br>3️⃣ Key Backend API Endpoints<br>These will be implemented in Flask.<br><br>Endpoint Method Description<br>/api/pbis POST Submit AI-generated PBIs to the backlog<br>/api/pbis/refine POST AI generates/refines PBIs<br>/api/pbis/questions GET AI fetches clarification questions if required<br>/api/pbis/{pbi_id} PATCH Updates a PBI after user edits<br>/api/pbis/{pbi_id}/submit POST Confirms PBI submission<br>4️⃣ Database Schema Updates (PostgreSQL)<br>To support AI-powered task refinement, we add new fields:<br><br>sql<br>Copy<br>Edit<br>ALTER TABLE tasks ADD COLUMN ai_generated BOOLEAN DEFAULT FALSE;<br>ALTER TABLE tasks ADD COLUMN refinement_status TEXT DEFAULT \'Pending\';<br>ALTER TABLE tasks ADD COLUMN estimation_source TEXT DEFAULT \'User\';<br>5️⃣ Next Steps<br>✔️ Architecture, API endpoints, and database updates are drafted.<br>➡️ Next: Move to Step 3 (Creating PBIs &amp; Estimating Complexity). 🚀<br><br>Let me know if you want any modifications before proceeding!<br><br>You said:<br>Where should we store the documentation?<br>Where in the UI should the user upload the documentation?<br>Is it possible to get the documentation automatically from an integration?<br>Like GitHub, VScode?<br>Provided that the documentation exist there.<br>Add a simple settings page where user can input API key and credentials.<br>ChatGPT said:<br>📌 Storing &amp; Managing Documentation for AI-Powered PBI Refinement<br>To ensure AI can access relevant project documentation for refining PBIs, we need a structured way to store, retrieve, and update documentation. Below is the plan:<br><br>1️⃣ Where Should We Store Documentation?<br>Option 1: PostgreSQL (Best for Structured Documentation)<br>Store documentation as text in a dedicated table.<br>Allows version control and easy retrieval.<br>Can be indexed for faster AI retrieval.<br>Table: project_documentation<br>sql<br>Copy<br>Edit<br>CREATE TABLE project_documentation (<br>id SERIAL PRIMARY KEY,<br>project_id INT REFERENCES projects(id) ON DELETE CASCADE,<br>title TEXT NOT NULL,<br>content TEXT NOT NULL,<br>source TEXT DEFAULT \'Manual Upload\',<br>uploaded_by INT REFERENCES users(id),<br>created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP<br>);<br>✅ Pros:<br><br>AI can efficiently search and extract relevant details.<br>Allows tagging &amp; filtering by source (e.g., GitHub, VS Code, Manual Upload).<br>Option 2: External File Storage (Best for Large Documents)<br>Store Markdown, TXT, or PDF files in an S3 bucket (AWS, Firebase, etc.).<br>Only metadata is stored in PostgreSQL.<br>AI retrieves and processes the files when needed.<br>Table: documentation_files<br>sql<br>Copy<br>Edit<br>CREATE TABLE documentation_files (<br>id SERIAL PRIMARY KEY,<br>project_id INT REFERENCES projects(id) ON DELETE CASCADE,<br>file_url TEXT NOT NULL,<br>file_type TEXT NOT NULL CHECK (file_type IN (\'md\', \'txt\', \'pdf\')),<br>uploaded_by INT REFERENCES users(id),<br>created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP<br>);<br>✅ Pros:<br><br>Supports larger documents that may not fit in PostgreSQL.<br>Allows manual file uploads and auto-fetching from integrations.<br>2️⃣ Where in the UI Should the User Upload Documentation?<br>📂 Dedicated "Documentation Management" Page (Settings)<br>Location: Inside Settings &gt; Documentation.<br>Features:<br>Upload Markdown, TXT, PDF files.<br>View &amp; Edit existing documentation.<br>Connect integrations (GitHub, VS Code, Notion, etc.).<br>Configure AI access permissions for each document.<br>3️⃣ Automatic Documentation Retrieval<br>✅ Can We Integrate with GitHub, VS Code, or Notion?<br>Yes! We can fetch project documentation automatically from these sources:<br><br>Integration Method Use Case<br>GitHub Fetch .md files via API Pull documentation from repos<br>VS Code Read local .md files Sync local project docs<br>Notion API connection Import structured docs<br>Google Drive API connection Fetch shared project docs<br>📡 Example: GitHub API Integration<br>Fetch .md documentation from a GitHub repo:<br><br>python<br>Copy<br>Edit<br>import requests<br><br>GITHUB_TOKEN = "your_personal_token"<br>REPO_OWNER = "your_username"<br>REPO_NAME = "your_project"<br><br>url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/docs"<br>headers = {"Authorization": f"token {GITHUB_TOKEN}"}<br><br>response = requests.get(url, headers=headers)<br>files = response.json()<br><br>for file in files:<br>if file["name"].endswith(".md"):<br>doc_content = requests.get(file["download_url"]).text<br>print("Fetched Documentation:", doc_content)<br>✅ Pros:<br><br>Automatically syncs up-to-date documentation from GitHub.<br>AI can use repo docs before asking the user for details.<br>4️⃣ Simple Settings Page for AI API &amp; Integrations<br>📌 Location: Settings &gt; AI &amp; Integrations<br><br>✅ User Can:<br><br>Enter OpenAI API Key.<br>Connect GitHub Repo (OAuth or Token).<br>Enable Auto-Fetch from VS Code, Notion, Google Drive.<br>Set AI Access Rules (e.g., Allow AI to modify docs?).<br>🔧 Database Table: integration_settings<br>sql<br>Copy<br>Edit<br>CREATE TABLE integration_settings (<br>id SERIAL PRIMARY KEY,<br>user_id INT REFERENCES users(id),<br>integration_name TEXT NOT NULL,<br>api_key TEXT NOT NULL,<br>is_enabled BOOLEAN DEFAULT TRUE,<br>created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP<br>);<br>🚀 Next Steps<br>✅ Implement API endpoints for documentation storage &amp; retrieval.<br>✅ Build a simple settings page to manage AI API &amp; integrations.<br>✅ Set up GitHub/VS Code sync for fetching docs automatically.<br><br>Would you like mockups or wireframes for the settings page? 📐</p><p></p>', 'task_type': 'Epic', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'estimate_type': 'story_points', 'estimate': 42, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-27T23:02:31.274292', 'updated_at': '2025-03-13T18:26:24.778328', 'contributor_name': 'Fredrik Cederborg', 'parent': None}
2025-03-13 20:21:22,895 INFO: Task details fetched successfully for Task ID 327.
2025-03-13 20:21:22,897 INFO: ROLLBACK
2025-03-13 20:21:22,898 INFO: 127.0.0.1 - - [13/Mar/2025 20:21:22] "GET /api/tasks/327 HTTP/1.1" 200 -
2025-03-13 20:21:23,170 INFO: 127.0.0.1 - - [13/Mar/2025 20:21:23] "OPTIONS /tasks/available_tasks?task_type=Epic&exclude_task_id=327&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:21:23,185 INFO: BEGIN (implicit)
2025-03-13 20:21:23,187 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:21:23,189 INFO: BEGIN (implicit)
2025-03-13 20:21:23,191 INFO: 127.0.0.1 - - [13/Mar/2025 20:21:23] "OPTIONS /tasks/available_tasks?task_type=Epic&exclude_task_id=327&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:21:23,192 INFO: [cached since 9551s ago] {'pk_1': 6}
2025-03-13 20:21:23,193 INFO: Entering available_tasks route...
2025-03-13 20:21:23,193 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:21:23,195 INFO: [cached since 9551s ago] {'pk_1': 6}
2025-03-13 20:21:23,195 DEBUG: Query parameters: task_type=Epic, exclude_task_id=327, search_term=, project_id=None, limit=30, page=1
2025-03-13 20:21:23,196 INFO: BEGIN (implicit)
2025-03-13 20:21:23,197 INFO: Entering available_tasks route...
2025-03-13 20:21:23,199 DEBUG: Query parameters: task_type=Epic, exclude_task_id=327, search_term=, project_id=None, limit=30, page=1
2025-03-13 20:21:23,197 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:21:23,200 INFO: BEGIN (implicit)
2025-03-13 20:21:23,200 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:21:23,201 INFO: [cached since 9551s ago] {}
2025-03-13 20:21:23,198 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:21:23,201 INFO: [cached since 9551s ago] {}
2025-03-13 20:21:23,201 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:21:23,202 INFO: [cached since 9548s ago] {'pk_1': 327}
2025-03-13 20:21:23,200 INFO: [cached since 9548s ago] {'pk_1': 327}
2025-03-13 20:21:23,209 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:21:23,209 INFO: [cached since 9551s ago] {'param_1': 6}
2025-03-13 20:21:23,211 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:21:23,211 INFO: [cached since 9551s ago] {'param_1': 6}
2025-03-13 20:21:23,213 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:21:23,214 INFO: [cached since 9551s ago] {'param_1': 1}
2025-03-13 20:21:23,214 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 327, 'task_type': ['Epic']}
2025-03-13 20:21:23,214 INFO: Validating hierarchy for Task N/A
2025-03-13 20:21:23,214 INFO: Determining valid parent types for task_type: Epic
2025-03-13 20:21:23,215 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:21:23,215 INFO: No valid parents found for task_type: Epic
2025-03-13 20:21:23,215 INFO: [cached since 9551s ago] {'param_1': 1}
2025-03-13 20:21:23,216 INFO: ROLLBACK
2025-03-13 20:21:23,216 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:21:23,217 INFO: [cached since 9551s ago] {'param_1': 2}
2025-03-13 20:21:23,217 INFO: 127.0.0.1 - - [13/Mar/2025 20:21:23] "GET /tasks/available_tasks?task_type=Epic&exclude_task_id=327&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:21:23,221 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:21:23,221 INFO: [cached since 9551s ago] {'param_1': 3}
2025-03-13 20:21:23,223 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:21:23,226 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:21:23,226 INFO: [cached since 9551s ago] {'param_1': 2}
2025-03-13 20:21:23,227 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 327, 'task_type': ['Epic']}
2025-03-13 20:21:23,228 INFO: [cached since 9551s ago] {'param_1': 4}
2025-03-13 20:21:23,228 INFO: Validating hierarchy for Task N/A
2025-03-13 20:21:23,228 INFO: Determining valid parent types for task_type: Epic
2025-03-13 20:21:23,228 INFO: No valid parents found for task_type: Epic
2025-03-13 20:21:23,229 INFO: ROLLBACK
2025-03-13 20:21:23,230 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:21:23,234 INFO: [cached since 9551s ago] {'param_1': 5}
2025-03-13 20:21:23,234 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:21:23,234 INFO: [cached since 9551s ago] {'param_1': 3}
2025-03-13 20:21:23,235 INFO: 127.0.0.1 - - [13/Mar/2025 20:21:23] "GET /tasks/available_tasks?task_type=Epic&exclude_task_id=327&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:21:23,236 INFO: ROLLBACK
2025-03-13 20:21:23,236 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:21:23,237 INFO: [cached since 9551s ago] {'param_1': 4}
2025-03-13 20:21:23,237 INFO: 127.0.0.1 - - [13/Mar/2025 20:21:23] "GET /api/projects/6/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:21:23,263 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:21:23,263 INFO: [cached since 9551s ago] {'param_1': 5}
2025-03-13 20:21:23,319 INFO: ROLLBACK
2025-03-13 20:21:23,328 INFO: 127.0.0.1 - - [13/Mar/2025 20:21:23] "GET /api/projects/6/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:22:53,796 INFO: 127.0.0.1 - - [13/Mar/2025 20:22:53] "GET /socket.io/?EIO=4&transport=websocket&sid=BVtX8OhV7EaW8GArAABA HTTP/1.1" 200 -
2025-03-13 20:22:54,697 INFO: 127.0.0.1 - - [13/Mar/2025 20:22:54] "GET /socket.io/?EIO=4&transport=polling&t=qkugzff9 HTTP/1.1" 200 -
2025-03-13 20:22:54,747 INFO: BEGIN (implicit)
2025-03-13 20:22:54,748 INFO: BEGIN (implicit)
2025-03-13 20:22:54,749 INFO: Entering list_tasks_json route...
2025-03-13 20:22:54,750 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:22:54,751 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 20:22:54,756 INFO: [cached since 9643s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 20:22:54,753 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 20:22:54,753 INFO: [cached since 9643s ago] {}
2025-03-13 20:22:54,755 INFO: 127.0.0.1 - - [13/Mar/2025 20:22:54] "POST /socket.io/?EIO=4&transport=polling&t=qkuiir03&sid=jrO57nOyRitCRnhlAABC HTTP/1.1" 200 -
2025-03-13 20:22:54,752 INFO: BEGIN (implicit)
2025-03-13 20:22:54,773 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 20:22:54,962 INFO: ROLLBACK
2025-03-13 20:22:54,985 INFO: 127.0.0.1 - - [13/Mar/2025 20:22:54] "GET /socket.io/?EIO=4&transport=polling&t=qkuik9st&sid=jrO57nOyRitCRnhlAABC HTTP/1.1" 200 -
2025-03-13 20:22:54,992 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 20:22:55,023 INFO: [cached since 9643s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 20:22:55,013 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:22:55,017 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 20:22:55,025 INFO: [cached since 9643s ago] {'param_1': 1}
2025-03-13 20:22:55,021 INFO: 127.0.0.1 - - [13/Mar/2025 20:22:55] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 20:22:55,044 INFO: BEGIN (implicit)
2025-03-13 20:22:55,094 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 20:22:55,057 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 20:22:55,097 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:22:55,116 INFO: [cached since 9643s ago] {'param_1': 2}
2025-03-13 20:22:55,109 INFO: [cached since 9643s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 20:22:55,110 INFO: [cached since 9643s ago] {}
2025-03-13 20:22:55,124 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:22:55,129 INFO: [cached since 9643s ago] {'param_1': 3}
2025-03-13 20:22:55,115 INFO: BEGIN (implicit)
2025-03-13 20:22:55,131 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:22:55,131 INFO: [cached since 9643s ago] {'pk_1': 19}
2025-03-13 20:22:55,145 INFO: ROLLBACK
2025-03-13 20:22:55,149 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:22:55,149 INFO: [cached since 9643s ago] {'param_1': 4}
2025-03-13 20:22:55,152 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:22:55,152 INFO: [cached since 9643s ago] {}
2025-03-13 20:22:55,152 INFO: 127.0.0.1 - - [13/Mar/2025 20:22:55] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 20:22:55,161 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:22:55,162 INFO: [cached since 9643s ago] {'param_1': 5}
2025-03-13 20:22:55,163 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:22:55,163 INFO: [cached since 9643s ago] {'param_1': 19}
2025-03-13 20:22:55,164 INFO: ROLLBACK
2025-03-13 20:22:55,164 INFO: 127.0.0.1 - - [13/Mar/2025 20:22:55] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 20:22:55,175 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:22:55,175 INFO: [cached since 9643s ago] {'param_1': 1}
2025-03-13 20:22:55,184 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:22:55,184 INFO: [cached since 9643s ago] {'param_1': 2}
2025-03-13 20:22:55,196 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:22:55,199 INFO: [cached since 9643s ago] {'param_1': 3}
2025-03-13 20:22:55,209 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:22:55,213 INFO: [cached since 9643s ago] {'param_1': 4}
2025-03-13 20:22:55,228 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:22:55,228 INFO: [cached since 9643s ago] {'param_1': 5}
2025-03-13 20:22:55,231 INFO: ROLLBACK
2025-03-13 20:22:55,233 INFO: 127.0.0.1 - - [13/Mar/2025 20:22:55] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:22:55,467 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 20:22:55,468 INFO: [cached since 9643s ago] {}
2025-03-13 20:22:55,495 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 20:22:55,495 INFO: [cached since 9643s ago] {}
2025-03-13 20:22:55,517 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 20:22:55,517 INFO: [cached since 9643s ago] {}
2025-03-13 20:22:55,549 INFO: ROLLBACK
2025-03-13 20:22:55,553 INFO: 127.0.0.1 - - [13/Mar/2025 20:22:55] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 20:23:03,067 INFO: Fetching task details for Task ID 395.
2025-03-13 20:23:03,069 INFO: Fetching task with ID 395.
2025-03-13 20:23:03,087 INFO: BEGIN (implicit)
2025-03-13 20:23:03,088 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:23:03,089 INFO: [cached since 9648s ago] {'pk_1': 395}
2025-03-13 20:23:03,093 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x10e9a80b0>, 'epic_priority': None, 'project_id': 7, 'id': 395, 'is_archived': False, 'contributor_id': 5, 'name': 'Side menu', 'completed': False, 'estimate_type': 'story_points', 'sort_order': 2, 'story_points': 0, 'completed_date': None, 'description': '<ul><li><p>Settings</p></li><li><p>Contributors</p></li><li><p>Company</p><ul><li><p>Goals</p><ul><li><p>OKR´s</p></li></ul></li><li><p>Sales</p></li><li><p>Financial (Rescricted access, (Super admin)</p></li><li><p>Market position</p></li><li><p>Market analysis</p></li><li><p>User metrics</p></li></ul></li><li><p>Projects</p></li><li><p></p></li></ul>', 'status': 'In Progress', 'time_estimate': None, 'parent_id': None, 'created_at': datetime.datetime(2025, 3, 5, 7, 43, 51, 220532), 'task_type': 'User Story', 'updated_at': datetime.datetime(2025, 3, 13, 13, 49, 27, 425658), 'priority': None}
2025-03-13 20:23:03,094 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:23:03,095 INFO: [cached since 9648s ago] {'pk_1': 7}
2025-03-13 20:23:03,097 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-13 20:23:03,097 INFO: [cached since 9648s ago] {'pk_1': 5}
2025-03-13 20:23:03,097 INFO: Task ID 395 fetched with parent ID: None
2025-03-13 20:23:03,097 INFO: Task with ID 395 fetched successfully.
2025-03-13 20:23:03,098 DEBUG: Fetched Task Data: {'id': 395, 'name': 'Side menu', 'description': '<ul><li><p>Settings</p></li><li><p>Contributors</p></li><li><p>Company</p><ul><li><p>Goals</p><ul><li><p>OKR´s</p></li></ul></li><li><p>Sales</p></li><li><p>Financial (Rescricted access, (Super admin)</p></li><li><p>Market position</p></li><li><p>Market analysis</p></li><li><p>User metrics</p></li></ul></li><li><p>Projects</p></li><li><p></p></li></ul>', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'estimate_type': 'story_points', 'estimate': 0, 'status': 'In Progress', 'sort_order': 2, 'created_at': '2025-03-05T07:43:51.220532', 'updated_at': '2025-03-13T13:49:27.425658', 'contributor_name': 'Fredrik Cederborg', 'parent': None}
2025-03-13 20:23:03,098 INFO: Task details fetched successfully for Task ID 395.
2025-03-13 20:23:03,099 INFO: ROLLBACK
2025-03-13 20:23:03,100 INFO: 127.0.0.1 - - [13/Mar/2025 20:23:03] "GET /api/tasks/395 HTTP/1.1" 200 -
2025-03-13 20:23:03,327 INFO: 127.0.0.1 - - [13/Mar/2025 20:23:03] "OPTIONS /tasks/available_tasks?task_type=User%20Story&exclude_task_id=395&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:23:03,334 INFO: BEGIN (implicit)
2025-03-13 20:23:03,335 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:23:03,338 INFO: 127.0.0.1 - - [13/Mar/2025 20:23:03] "OPTIONS /tasks/available_tasks?task_type=User%20Story&exclude_task_id=395&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:23:03,339 INFO: [cached since 9651s ago] {'pk_1': 7}
2025-03-13 20:23:03,341 INFO: BEGIN (implicit)
2025-03-13 20:23:03,355 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:23:03,359 INFO: Entering available_tasks route...
2025-03-13 20:23:03,361 INFO: Entering available_tasks route...
2025-03-13 20:23:03,361 INFO: [cached since 9651s ago] {'pk_1': 7}
2025-03-13 20:23:03,362 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:23:03,362 DEBUG: Query parameters: task_type=User Story, exclude_task_id=395, search_term=, project_id=None, limit=30, page=1
2025-03-13 20:23:03,362 DEBUG: Query parameters: task_type=User Story, exclude_task_id=395, search_term=, project_id=None, limit=30, page=1
2025-03-13 20:23:03,362 INFO: [cached since 9651s ago] {}
2025-03-13 20:23:03,363 INFO: BEGIN (implicit)
2025-03-13 20:23:03,364 INFO: BEGIN (implicit)
2025-03-13 20:23:03,364 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:23:03,364 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:23:03,365 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:23:03,367 INFO: [cached since 9651s ago] {}
2025-03-13 20:23:03,367 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:23:03,367 INFO: [cached since 9648s ago] {'pk_1': 395}
2025-03-13 20:23:03,365 INFO: [cached since 9648s ago] {'pk_1': 395}
2025-03-13 20:23:03,368 INFO: [cached since 9651s ago] {'param_1': 7}
2025-03-13 20:23:03,372 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:23:03,372 INFO: [cached since 9651s ago] {'param_1': 7}
2025-03-13 20:23:03,377 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:23:03,379 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:23:03,379 INFO: [cached since 9651s ago] {'param_1': 1}
2025-03-13 20:23:03,379 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 395, 'task_type': ['User Story']}
2025-03-13 20:23:03,381 INFO: Validating hierarchy for Task N/A
2025-03-13 20:23:03,381 INFO: Determining valid parent types for task_type: User Story
2025-03-13 20:23:03,381 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 395, 'task_type': ['Epic']}
2025-03-13 20:23:03,380 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 395, 'task_type': ['User Story']}
2025-03-13 20:23:03,398 INFO: Validating hierarchy for Task N/A
2025-03-13 20:23:03,391 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-13 20:23:03,394 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:23:03,380 INFO: [cached since 9651s ago] {'param_1': 1}
2025-03-13 20:23:03,548 INFO: [cached since 9651s ago] {'param_1': 2}
2025-03-13 20:23:03,413 INFO: Determining valid parent types for task_type: User Story
2025-03-13 20:23:03,550 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-13 20:23:03,553 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 395, 'task_type': ['Epic']}
2025-03-13 20:23:03,553 INFO: [cached since 9434s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-13 20:23:03,554 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:23:03,554 INFO: [cached since 9651s ago] {'param_1': 3}
2025-03-13 20:23:03,567 DEBUG: Tasks returned: [{'id': 430, 'name': 'No Epic', 'task_type': 'Epic', 'is_parent': False}, {'id': 393, 'name': 'List of ideas for new features, parameters to add', 'task_type': 'Epic', 'is_parent': False}, {'id': 327, 'name': '[UNIQUE feature] -\xa0Epic - AI-Powered PBI Refinement System', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 456, 'name': 'Search in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okr´s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notification system', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 459, 'name': '[RESEARCH] - Step 1: Mapping out what each file does', 'task_type': 'Epic', 'is_parent': False}, {'id': 432, 'name': 'Roadmap view', 'task_type': 'Epic', 'is_parent': False}, {'id': 392, 'name': 'UI / UX Improvements', 'task_type': 'Epic', 'is_parent': False}, {'id': 465, 'name': 'Building from Scratch vs.\xa0Replicating Each Feature', 'task_type': 'Epic', 'is_parent': False}, {'id': 424, 'name': '[ISSUES] - Current issues/bugs', 'task_type': 'Epic', 'is_parent': False}, {'id': 460, 'name': '[PLANNING] - Step 2: Architecture & Migration Planning', 'task_type': 'Epic', 'is_parent': False}, {'id': 462, 'name': '[MIGRATION] - high-level roadmap Step 1 - 7', 'task_type': 'Epic', 'is_parent': False}]
2025-03-13 20:23:03,568 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:23:03,575 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-13 20:23:03,579 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:23:03,595 INFO: ROLLBACK
2025-03-13 20:23:03,595 INFO: [cached since 9651s ago] {'param_1': 4}
2025-03-13 20:23:03,597 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-13 20:23:03,597 INFO: [cached since 9651s ago] {'param_1': 2}
2025-03-13 20:23:03,598 INFO: [cached since 9434s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-13 20:23:03,614 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:23:03,614 INFO: [cached since 9651s ago] {'param_1': 5}
2025-03-13 20:23:03,620 DEBUG: Tasks returned: [{'id': 430, 'name': 'No Epic', 'task_type': 'Epic', 'is_parent': False}, {'id': 393, 'name': 'List of ideas for new features, parameters to add', 'task_type': 'Epic', 'is_parent': False}, {'id': 327, 'name': '[UNIQUE feature] -\xa0Epic - AI-Powered PBI Refinement System', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 456, 'name': 'Search in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okr´s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notification system', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 459, 'name': '[RESEARCH] - Step 1: Mapping out what each file does', 'task_type': 'Epic', 'is_parent': False}, {'id': 432, 'name': 'Roadmap view', 'task_type': 'Epic', 'is_parent': False}, {'id': 392, 'name': 'UI / UX Improvements', 'task_type': 'Epic', 'is_parent': False}, {'id': 465, 'name': 'Building from Scratch vs.\xa0Replicating Each Feature', 'task_type': 'Epic', 'is_parent': False}, {'id': 424, 'name': '[ISSUES] - Current issues/bugs', 'task_type': 'Epic', 'is_parent': False}, {'id': 460, 'name': '[PLANNING] - Step 2: Architecture & Migration Planning', 'task_type': 'Epic', 'is_parent': False}, {'id': 462, 'name': '[MIGRATION] - high-level roadmap Step 1 - 7', 'task_type': 'Epic', 'is_parent': False}]
2025-03-13 20:23:03,622 INFO: ROLLBACK
2025-03-13 20:23:03,623 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:23:03,624 INFO: 127.0.0.1 - - [13/Mar/2025 20:23:03] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=395&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:23:03,624 INFO: ROLLBACK
2025-03-13 20:23:03,625 INFO: [cached since 9651s ago] {'param_1': 3}
2025-03-13 20:23:03,625 INFO: 127.0.0.1 - - [13/Mar/2025 20:23:03] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:23:03,628 INFO: 127.0.0.1 - - [13/Mar/2025 20:23:03] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=395&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:23:03,639 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:23:03,640 INFO: [cached since 9651s ago] {'param_1': 4}
2025-03-13 20:23:03,642 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:23:03,642 INFO: [cached since 9651s ago] {'param_1': 5}
2025-03-13 20:23:03,645 INFO: ROLLBACK
2025-03-13 20:23:03,646 INFO: 127.0.0.1 - - [13/Mar/2025 20:23:03] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:25:01,493 INFO: 127.0.0.1 - - [13/Mar/2025 20:25:01] "GET /socket.io/?EIO=4&transport=websocket&sid=jrO57nOyRitCRnhlAABC HTTP/1.1" 200 -
2025-03-13 20:25:02,804 INFO: 127.0.0.1 - - [13/Mar/2025 20:25:02] "GET /socket.io/?EIO=4&transport=polling&t=qnlbatvt HTTP/1.1" 200 -
2025-03-13 20:25:02,891 INFO: BEGIN (implicit)
2025-03-13 20:25:02,894 INFO: BEGIN (implicit)
2025-03-13 20:25:02,900 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 20:25:02,901 INFO: Entering list_tasks_json route...
2025-03-13 20:25:02,922 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 20:25:02,906 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:25:02,926 INFO: [cached since 9771s ago] {}
2025-03-13 20:25:02,908 INFO: [cached since 9771s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 20:25:02,925 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 20:25:02,917 INFO: BEGIN (implicit)
2025-03-13 20:25:02,921 INFO: 127.0.0.1 - - [13/Mar/2025 20:25:02] "POST /socket.io/?EIO=4&transport=polling&t=qnle81et&sid=-GaGB0RvJGlwgkziAABE HTTP/1.1" 200 -
2025-03-13 20:25:02,944 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:25:02,983 INFO: [cached since 9771s ago] {'param_1': 1}
2025-03-13 20:25:02,964 INFO: ROLLBACK
2025-03-13 20:25:02,967 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 20:25:02,981 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 20:25:02,945 INFO: 127.0.0.1 - - [13/Mar/2025 20:25:02] "GET /socket.io/?EIO=4&transport=polling&t=qnleat6u&sid=-GaGB0RvJGlwgkziAABE HTTP/1.1" 200 -
2025-03-13 20:25:02,987 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:25:02,990 INFO: BEGIN (implicit)
2025-03-13 20:25:03,006 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 20:25:03,001 INFO: 127.0.0.1 - - [13/Mar/2025 20:25:03] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 20:25:03,004 INFO: [cached since 9771s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 20:25:03,021 INFO: [cached since 9771s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 20:25:03,026 INFO: [cached since 9771s ago] {'param_1': 2}
2025-03-13 20:25:03,044 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:25:03,047 INFO: [cached since 9771s ago] {'param_1': 3}
2025-03-13 20:25:03,046 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 20:25:03,048 INFO: [cached since 9771s ago] {}
2025-03-13 20:25:03,044 INFO: BEGIN (implicit)
2025-03-13 20:25:03,051 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:25:03,051 INFO: [cached since 9771s ago] {'pk_1': 19}
2025-03-13 20:25:03,053 INFO: ROLLBACK
2025-03-13 20:25:03,056 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:25:03,056 INFO: [cached since 9771s ago] {'param_1': 4}
2025-03-13 20:25:03,063 INFO: 127.0.0.1 - - [13/Mar/2025 20:25:03] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 20:25:03,070 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:25:03,072 INFO: [cached since 9771s ago] {'param_1': 5}
2025-03-13 20:25:03,105 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:25:03,105 INFO: [cached since 9771s ago] {}
2025-03-13 20:25:03,124 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:25:03,124 INFO: [cached since 9771s ago] {'param_1': 19}
2025-03-13 20:25:03,144 INFO: ROLLBACK
2025-03-13 20:25:03,157 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:25:03,157 INFO: [cached since 9771s ago] {'param_1': 1}
2025-03-13 20:25:03,158 INFO: 127.0.0.1 - - [13/Mar/2025 20:25:03] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 20:25:03,162 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:25:03,163 INFO: [cached since 9771s ago] {'param_1': 2}
2025-03-13 20:25:03,167 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:25:03,168 INFO: [cached since 9771s ago] {'param_1': 3}
2025-03-13 20:25:03,187 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:25:03,187 INFO: [cached since 9771s ago] {'param_1': 4}
2025-03-13 20:25:03,189 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:25:03,190 INFO: [cached since 9771s ago] {'param_1': 5}
2025-03-13 20:25:03,195 INFO: ROLLBACK
2025-03-13 20:25:03,203 INFO: 127.0.0.1 - - [13/Mar/2025 20:25:03] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:25:03,403 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 20:25:03,403 INFO: [cached since 9771s ago] {}
2025-03-13 20:25:03,406 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 20:25:03,406 INFO: [cached since 9771s ago] {}
2025-03-13 20:25:03,407 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 20:25:03,408 INFO: [cached since 9771s ago] {}
2025-03-13 20:25:03,416 INFO: ROLLBACK
2025-03-13 20:25:03,417 INFO: 127.0.0.1 - - [13/Mar/2025 20:25:03] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 20:25:14,818 INFO: Fetching task details for Task ID 430.
2025-03-13 20:25:14,819 INFO: Fetching task with ID 430.
2025-03-13 20:25:14,829 INFO: BEGIN (implicit)
2025-03-13 20:25:14,832 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:25:14,832 INFO: [cached since 9780s ago] {'pk_1': 430}
2025-03-13 20:25:14,841 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x10e9a8110>, 'epic_priority': None, 'project_id': 7, 'id': 430, 'is_archived': False, 'contributor_id': 5, 'name': 'No Epic', 'completed': False, 'estimate_type': 'story_points', 'sort_order': 0, 'story_points': 0, 'completed_date': None, 'description': '<p>`console.log(\'Hello, World!\')``console.log(\'Hello, World!\')`**bold text**&gt; This is a quoteTest contentTest contentCurrently we have Tiptap editor installed, but after doing some research it turns out it can get really expensive when scaling up if we want to use the extensions that we need.<br><br>Here´s a list of must have features.</p><ul><li><p>Drag handle</p></li><li><p>Toggles</p></li><li><p>Drop cursor</p></li><li><p>Code block</p></li><li><p></p></li></ul><p></p><p>What editor is notions editor built upon?</p><p>ChatGPT said:</p><p>Notion\'s editor is built upon <strong>ProseMirror</strong>, which is a highly extensible and customizable framework for building rich-text editors.</p><h3><strong>How Notion Uses ProseMirror</strong></h3><ol><li><p><strong>Block-Based Editing</strong> - Notion\'s document model is built around a block-based structure, which ProseMirror supports well.</p></li><li><p><strong>Collaborative Editing</strong> - Notion enhances ProseMirror with <strong>Operational Transforms (OT)</strong> or <strong>Conflict-Free Replicated Data Types (CRDTs)</strong> for real-time multi-user collaboration.</p></li><li><p><strong>Custom Extensions</strong> - Notion extends ProseMirror to support embedded content, database-like properties, and advanced block manipulation.</p></li><li><p><strong>Rich Formatting</strong> - ProseMirror provides the foundation for text styles, lists, code blocks, and interactive widgets.</p></li></ol><h3><strong>Alternatives to ProseMirror</strong></h3><p>Notion could have used:</p><ul><li><p><strong>Tiptap</strong> (a framework built on ProseMirror, similar to what you\'re using)</p></li><li><p><strong>Slate.js</strong> (another powerful rich-text editor framework)</p></li><li><p><strong>Lexical</strong> (Meta/Facebook\'s modern take on rich-text editing)</p></li></ul><p>Since you\'re working with <strong>Tiptap (which is based on ProseMirror)</strong>, you are already using something similar to Notion’s approach! 🚀</p><p>You said:</p><p>Is Lexical free?</p><p>ChatGPT said:</p><p>Yes, <strong>Lexical</strong> is completely <strong>free</strong> and <strong>open-source</strong>! 🚀</p><h3><strong>License &amp; Cost</strong></h3><ul><li><p><strong>Lexical</strong> is released under the <strong>MIT license</strong>, which means you can use, modify, and distribute it freely for both <strong>personal</strong> and <strong>commercial</strong> projects <strong>without restrictions</strong>.</p></li><li><p>You don’t need to pay for it, and it has no hidden fees or licensing issues.</p></li></ul><h3><strong>Where to Get Lexical?</strong></h3><ul><li><p><strong>GitHub</strong>: <a target="_blank" rel="noopener noreferrer" href="https://github.com/facebook/lexical">https://github.com/facebook/lexical</a></p></li><li><p><strong>Official Website</strong>: <a target="_blank" rel="noopener noreferrer" href="https://lexical.dev/">https://lexical.dev/</a></p></li></ul><h3><strong>Why Use Lexical?</strong></h3><ul><li><p><strong>Ultra-lightweight &amp; fast</strong> ⚡</p></li><li><p><strong>Better performance than ProseMirror or Slate.js</strong></p></li><li><p><strong>Modular and Extensible</strong></p></li><li><p><strong>Supports collaborative editing</strong></p></li><li><p><strong>Backed by Meta (Facebook)</strong></p></li></ul><p>If you\'re looking for a <strong>modern</strong>, <strong>efficient</strong>, and <strong>free</strong> alternative to ProseMirror/Tiptap, <strong>Lexical is a great choice!</strong> 🚀</p><p>You said:</p><p>If I understand it correctly TipTap can get quite expensive when scaling</p><p>ChatGPT said:</p><p>Yes, you’re right! <strong>Tiptap can become expensive at scale</strong>, depending on your use case. Here’s why:</p><h3><strong>1️⃣ The Core Tiptap Editor is Free</strong></h3><ul><li><p><strong>Tiptap itself is open-source</strong> and free to use under the MIT license.</p></li><li><p>It’s built on <strong>ProseMirror</strong>, which is also open-source.</p></li><li><p>You can self-host and use it without paying a cent.</p></li></ul><h3><strong>2️⃣ The Cost Comes from Tiptap Collaboration &amp; Cloud Services</strong></h3><p>Tiptap offers <strong>paid services</strong> that can get expensive as your usage scales:</p><ol><li><p><strong>Tiptap Collaboration Server (Hocuspocus)</strong></p><ul><li><p>Used for <strong>real-time collaboration</strong> (like Google Docs-style editing).</p></li><li><p>Free for self-hosting, <strong>but</strong>:</p><ul><li><p>You need to manage the infrastructure yourself.</p></li><li><p>If you use their hosted version, costs scale with users.</p></li></ul></li></ul></li><li><p><strong>Tiptap AI (Paid)</strong></p><ul><li><p>If you integrate AI-powered features (like text completion, summarization), you’ll pay usage-based fees.</p></li></ul></li><li><p><strong>Tiptap Cloud (Paid)</strong></p><ul><li><p>Managed hosting for Tiptap-related services.</p></li><li><p>Pricing varies based on API calls and storage.</p></li></ul></li></ol><h3><strong>3️⃣ Hidden Scaling Costs</strong></h3><ul><li><p><strong>Hosting a ProseMirror-based editor like Tiptap requires a powerful backend</strong> for real-time editing &amp; syncing.</p></li><li><p><strong>If you handle large concurrent users, database read/writes &amp; WebSocket connections increase infrastructure costs.</strong></p></li><li><p><strong>Custom extensions</strong> (if you develop them in-house) require engineering time &amp; maintenance.</p></li></ul><h3><strong>Alternatives That May Scale Better</strong></h3><ul><li><p><strong>Lexical (by Meta)</strong> 🆓 – Lighter &amp; built for performance.</p></li><li><p><strong>Slate.js</strong> 🆓 – Fully customizable but less feature-rich.</p></li><li><p><strong>Quill.js</strong> 🆓 – Great for simple use cases.</p></li></ul><h3><strong>Final Verdict</strong></h3><p>If you’re just using <strong>basic rich text editing</strong>, Tiptap is free and great. 🚀<br>But if you need <strong>real-time collaboration or AI features</strong>, it can get <strong>expensive</strong> as you scale.</p><p>Would you like recommendations on how to <strong>reduce scaling costs</strong> with Tiptap?</p><p>You said:</p><p>Yes</p><p>ChatGPT said:</p><h3><strong>How to Reduce Scaling Costs with Tiptap 🚀</strong></h3><p>If you\'re using Tiptap (or considering it) and want to <strong>keep costs low while scaling</strong>, here’s how you can do it.</p><hr><h2><strong>1️⃣ Self-Host Instead of Using Tiptap Cloud</strong></h2><p>Tiptap provides <strong>Tiptap Cloud</strong> as a hosted service, but this can get expensive at scale. Instead:</p><ul><li><p><strong>Self-host</strong> the key components instead of paying for managed services.</p></li><li><p>You’ll need to set up:</p><ul><li><p><strong>Tiptap Core</strong> (Free, MIT license)</p></li><li><p><strong>ProseMirror</strong> (Tiptap is built on it, also free)</p></li><li><p><strong>Hocuspocus (Collaboration Server)</strong> – Instead of paying Tiptap for real-time editing, host it yourself on <strong>a cheap VPS like DigitalOcean or AWS Lightsail</strong>.</p></li></ul></li></ul><p>📌 <strong>Guide</strong>: Self-hosting Hocuspocus</p><p><strong>💰 Potential Savings</strong>: No per-user fees, just hosting costs.</p><hr><h2><strong>2️⃣ Optimize WebSocket &amp; Real-Time Editing Costs</strong></h2><p>Real-time collaboration (like Google Docs-style editing) <strong>increases server load</strong> due to WebSocket connections.</p><ul><li><p><strong>Host Hocuspocus on a scalable infrastructure</strong> (Kubernetes, AWS ECS).</p></li><li><p><strong>Use Redis or PostgreSQL for persistence</strong> instead of in-memory storage.</p></li><li><p><strong>Limit real-time sync to active users only</strong> (disconnect inactive users).</p></li></ul><p><strong>💰 Potential Savings</strong>: Lower WebSocket usage = less server load.</p><hr><h2><strong>3️⃣ Avoid Tiptap AI (Use Open-Source AI)</strong></h2><p>Tiptap offers <strong>AI-powered suggestions, summarization, and completions</strong>, but they charge based on API usage. Instead:</p><ul><li><p><strong>Use open-source LLMs like GPT-4-All, Mistral, or Ollama</strong> instead of Tiptap AI.</p></li><li><p><strong>Host AI models yourself</strong> with Hugging Face models or OpenAI API proxies.</p></li></ul><p><strong>💰 Potential Savings</strong>: No per-token AI fees.</p><hr><h2><strong>4️⃣ Optimize Frontend Performance</strong></h2><p>Tiptap loads many dependencies, which <strong>increase bundle size</strong>. Reduce costs by:</p><ul><li><p><strong>Lazy-loading extensions</strong> (only load features users need).</p></li><li><p><strong>Tree-shaking unused dependencies</strong>.</p></li><li><p><strong>Using a CDN</strong> to serve assets (reduces direct server load).</p></li></ul><p><strong>💰 Potential Savings</strong>: Lower hosting and bandwidth costs.</p><hr><h2><strong>5️⃣ Alternative Open-Source Editors (If You Outgrow Tiptap)</strong></h2><p>If Tiptap costs <strong>too much</strong>, you can consider:</p><ul><li><p><strong>Lexical (by Meta)</strong> – Free, ultra-lightweight, great for scaling.</p></li><li><p><strong>Slate.js</strong> – Flexible and customizable.</p></li><li><p><strong>Quill.js</strong> – Good for simpler use cases.</p></li></ul><hr><h3><strong>📌 Final Takeaway</strong></h3><p>If you’re using <strong>Tiptap for rich text only</strong>, it’s free.<br>But if you <strong>need real-time collaboration, AI, or cloud services</strong>, follow these tips to <strong>reduce costs</strong> and <strong>scale efficiently</strong>.</p><p>Would you like help setting up <strong>self-hosted Hocuspocus</strong> or <strong>AI alternatives</strong>? 🚀</p>', 'status': 'Not Started', 'time_estimate': None, 'parent_id': None, 'created_at': datetime.datetime(2025, 3, 5, 17, 10, 57, 543053), 'task_type': 'Epic', 'updated_at': datetime.datetime(2025, 3, 13, 12, 46, 58, 641501), 'priority': None}
2025-03-13 20:25:14,843 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:25:14,843 INFO: [cached since 9780s ago] {'pk_1': 7}
2025-03-13 20:25:14,844 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-13 20:25:14,845 INFO: [cached since 9780s ago] {'pk_1': 5}
2025-03-13 20:25:14,849 INFO: Task ID 430 fetched with parent ID: None
2025-03-13 20:25:14,850 INFO: Task with ID 430 fetched successfully.
2025-03-13 20:25:14,850 DEBUG: Fetched Task Data: {'id': 430, 'name': 'No Epic', 'description': '<p>`console.log(\'Hello, World!\')``console.log(\'Hello, World!\')`**bold text**&gt; This is a quoteTest contentTest contentCurrently we have Tiptap editor installed, but after doing some research it turns out it can get really expensive when scaling up if we want to use the extensions that we need.<br><br>Here´s a list of must have features.</p><ul><li><p>Drag handle</p></li><li><p>Toggles</p></li><li><p>Drop cursor</p></li><li><p>Code block</p></li><li><p></p></li></ul><p></p><p>What editor is notions editor built upon?</p><p>ChatGPT said:</p><p>Notion\'s editor is built upon <strong>ProseMirror</strong>, which is a highly extensible and customizable framework for building rich-text editors.</p><h3><strong>How Notion Uses ProseMirror</strong></h3><ol><li><p><strong>Block-Based Editing</strong> - Notion\'s document model is built around a block-based structure, which ProseMirror supports well.</p></li><li><p><strong>Collaborative Editing</strong> - Notion enhances ProseMirror with <strong>Operational Transforms (OT)</strong> or <strong>Conflict-Free Replicated Data Types (CRDTs)</strong> for real-time multi-user collaboration.</p></li><li><p><strong>Custom Extensions</strong> - Notion extends ProseMirror to support embedded content, database-like properties, and advanced block manipulation.</p></li><li><p><strong>Rich Formatting</strong> - ProseMirror provides the foundation for text styles, lists, code blocks, and interactive widgets.</p></li></ol><h3><strong>Alternatives to ProseMirror</strong></h3><p>Notion could have used:</p><ul><li><p><strong>Tiptap</strong> (a framework built on ProseMirror, similar to what you\'re using)</p></li><li><p><strong>Slate.js</strong> (another powerful rich-text editor framework)</p></li><li><p><strong>Lexical</strong> (Meta/Facebook\'s modern take on rich-text editing)</p></li></ul><p>Since you\'re working with <strong>Tiptap (which is based on ProseMirror)</strong>, you are already using something similar to Notion’s approach! 🚀</p><p>You said:</p><p>Is Lexical free?</p><p>ChatGPT said:</p><p>Yes, <strong>Lexical</strong> is completely <strong>free</strong> and <strong>open-source</strong>! 🚀</p><h3><strong>License &amp; Cost</strong></h3><ul><li><p><strong>Lexical</strong> is released under the <strong>MIT license</strong>, which means you can use, modify, and distribute it freely for both <strong>personal</strong> and <strong>commercial</strong> projects <strong>without restrictions</strong>.</p></li><li><p>You don’t need to pay for it, and it has no hidden fees or licensing issues.</p></li></ul><h3><strong>Where to Get Lexical?</strong></h3><ul><li><p><strong>GitHub</strong>: <a target="_blank" rel="noopener noreferrer" href="https://github.com/facebook/lexical">https://github.com/facebook/lexical</a></p></li><li><p><strong>Official Website</strong>: <a target="_blank" rel="noopener noreferrer" href="https://lexical.dev/">https://lexical.dev/</a></p></li></ul><h3><strong>Why Use Lexical?</strong></h3><ul><li><p><strong>Ultra-lightweight &amp; fast</strong> ⚡</p></li><li><p><strong>Better performance than ProseMirror or Slate.js</strong></p></li><li><p><strong>Modular and Extensible</strong></p></li><li><p><strong>Supports collaborative editing</strong></p></li><li><p><strong>Backed by Meta (Facebook)</strong></p></li></ul><p>If you\'re looking for a <strong>modern</strong>, <strong>efficient</strong>, and <strong>free</strong> alternative to ProseMirror/Tiptap, <strong>Lexical is a great choice!</strong> 🚀</p><p>You said:</p><p>If I understand it correctly TipTap can get quite expensive when scaling</p><p>ChatGPT said:</p><p>Yes, you’re right! <strong>Tiptap can become expensive at scale</strong>, depending on your use case. Here’s why:</p><h3><strong>1️⃣ The Core Tiptap Editor is Free</strong></h3><ul><li><p><strong>Tiptap itself is open-source</strong> and free to use under the MIT license.</p></li><li><p>It’s built on <strong>ProseMirror</strong>, which is also open-source.</p></li><li><p>You can self-host and use it without paying a cent.</p></li></ul><h3><strong>2️⃣ The Cost Comes from Tiptap Collaboration &amp; Cloud Services</strong></h3><p>Tiptap offers <strong>paid services</strong> that can get expensive as your usage scales:</p><ol><li><p><strong>Tiptap Collaboration Server (Hocuspocus)</strong></p><ul><li><p>Used for <strong>real-time collaboration</strong> (like Google Docs-style editing).</p></li><li><p>Free for self-hosting, <strong>but</strong>:</p><ul><li><p>You need to manage the infrastructure yourself.</p></li><li><p>If you use their hosted version, costs scale with users.</p></li></ul></li></ul></li><li><p><strong>Tiptap AI (Paid)</strong></p><ul><li><p>If you integrate AI-powered features (like text completion, summarization), you’ll pay usage-based fees.</p></li></ul></li><li><p><strong>Tiptap Cloud (Paid)</strong></p><ul><li><p>Managed hosting for Tiptap-related services.</p></li><li><p>Pricing varies based on API calls and storage.</p></li></ul></li></ol><h3><strong>3️⃣ Hidden Scaling Costs</strong></h3><ul><li><p><strong>Hosting a ProseMirror-based editor like Tiptap requires a powerful backend</strong> for real-time editing &amp; syncing.</p></li><li><p><strong>If you handle large concurrent users, database read/writes &amp; WebSocket connections increase infrastructure costs.</strong></p></li><li><p><strong>Custom extensions</strong> (if you develop them in-house) require engineering time &amp; maintenance.</p></li></ul><h3><strong>Alternatives That May Scale Better</strong></h3><ul><li><p><strong>Lexical (by Meta)</strong> 🆓 – Lighter &amp; built for performance.</p></li><li><p><strong>Slate.js</strong> 🆓 – Fully customizable but less feature-rich.</p></li><li><p><strong>Quill.js</strong> 🆓 – Great for simple use cases.</p></li></ul><h3><strong>Final Verdict</strong></h3><p>If you’re just using <strong>basic rich text editing</strong>, Tiptap is free and great. 🚀<br>But if you need <strong>real-time collaboration or AI features</strong>, it can get <strong>expensive</strong> as you scale.</p><p>Would you like recommendations on how to <strong>reduce scaling costs</strong> with Tiptap?</p><p>You said:</p><p>Yes</p><p>ChatGPT said:</p><h3><strong>How to Reduce Scaling Costs with Tiptap 🚀</strong></h3><p>If you\'re using Tiptap (or considering it) and want to <strong>keep costs low while scaling</strong>, here’s how you can do it.</p><hr><h2><strong>1️⃣ Self-Host Instead of Using Tiptap Cloud</strong></h2><p>Tiptap provides <strong>Tiptap Cloud</strong> as a hosted service, but this can get expensive at scale. Instead:</p><ul><li><p><strong>Self-host</strong> the key components instead of paying for managed services.</p></li><li><p>You’ll need to set up:</p><ul><li><p><strong>Tiptap Core</strong> (Free, MIT license)</p></li><li><p><strong>ProseMirror</strong> (Tiptap is built on it, also free)</p></li><li><p><strong>Hocuspocus (Collaboration Server)</strong> – Instead of paying Tiptap for real-time editing, host it yourself on <strong>a cheap VPS like DigitalOcean or AWS Lightsail</strong>.</p></li></ul></li></ul><p>📌 <strong>Guide</strong>: Self-hosting Hocuspocus</p><p><strong>💰 Potential Savings</strong>: No per-user fees, just hosting costs.</p><hr><h2><strong>2️⃣ Optimize WebSocket &amp; Real-Time Editing Costs</strong></h2><p>Real-time collaboration (like Google Docs-style editing) <strong>increases server load</strong> due to WebSocket connections.</p><ul><li><p><strong>Host Hocuspocus on a scalable infrastructure</strong> (Kubernetes, AWS ECS).</p></li><li><p><strong>Use Redis or PostgreSQL for persistence</strong> instead of in-memory storage.</p></li><li><p><strong>Limit real-time sync to active users only</strong> (disconnect inactive users).</p></li></ul><p><strong>💰 Potential Savings</strong>: Lower WebSocket usage = less server load.</p><hr><h2><strong>3️⃣ Avoid Tiptap AI (Use Open-Source AI)</strong></h2><p>Tiptap offers <strong>AI-powered suggestions, summarization, and completions</strong>, but they charge based on API usage. Instead:</p><ul><li><p><strong>Use open-source LLMs like GPT-4-All, Mistral, or Ollama</strong> instead of Tiptap AI.</p></li><li><p><strong>Host AI models yourself</strong> with Hugging Face models or OpenAI API proxies.</p></li></ul><p><strong>💰 Potential Savings</strong>: No per-token AI fees.</p><hr><h2><strong>4️⃣ Optimize Frontend Performance</strong></h2><p>Tiptap loads many dependencies, which <strong>increase bundle size</strong>. Reduce costs by:</p><ul><li><p><strong>Lazy-loading extensions</strong> (only load features users need).</p></li><li><p><strong>Tree-shaking unused dependencies</strong>.</p></li><li><p><strong>Using a CDN</strong> to serve assets (reduces direct server load).</p></li></ul><p><strong>💰 Potential Savings</strong>: Lower hosting and bandwidth costs.</p><hr><h2><strong>5️⃣ Alternative Open-Source Editors (If You Outgrow Tiptap)</strong></h2><p>If Tiptap costs <strong>too much</strong>, you can consider:</p><ul><li><p><strong>Lexical (by Meta)</strong> – Free, ultra-lightweight, great for scaling.</p></li><li><p><strong>Slate.js</strong> – Flexible and customizable.</p></li><li><p><strong>Quill.js</strong> – Good for simpler use cases.</p></li></ul><hr><h3><strong>📌 Final Takeaway</strong></h3><p>If you’re using <strong>Tiptap for rich text only</strong>, it’s free.<br>But if you <strong>need real-time collaboration, AI, or cloud services</strong>, follow these tips to <strong>reduce costs</strong> and <strong>scale efficiently</strong>.</p><p>Would you like help setting up <strong>self-hosted Hocuspocus</strong> or <strong>AI alternatives</strong>? 🚀</p>', 'task_type': 'Epic', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'estimate_type': 'story_points', 'estimate': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-03-05T17:10:57.543053', 'updated_at': '2025-03-13T12:46:58.641501', 'contributor_name': 'Fredrik Cederborg', 'parent': None}
2025-03-13 20:25:14,850 INFO: Task details fetched successfully for Task ID 430.
2025-03-13 20:25:14,851 INFO: ROLLBACK
2025-03-13 20:25:14,852 INFO: 127.0.0.1 - - [13/Mar/2025 20:25:14] "GET /api/tasks/430 HTTP/1.1" 200 -
2025-03-13 20:25:15,079 INFO: 127.0.0.1 - - [13/Mar/2025 20:25:15] "OPTIONS /tasks/available_tasks?task_type=Epic&exclude_task_id=430&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:25:15,086 INFO: BEGIN (implicit)
2025-03-13 20:25:15,087 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:25:15,088 INFO: 127.0.0.1 - - [13/Mar/2025 20:25:15] "OPTIONS /tasks/available_tasks?task_type=Epic&exclude_task_id=430&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:25:15,090 INFO: BEGIN (implicit)
2025-03-13 20:25:15,093 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:25:15,094 INFO: [cached since 9783s ago] {'pk_1': 7}
2025-03-13 20:25:15,091 INFO: Entering available_tasks route...
2025-03-13 20:25:15,104 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:25:15,091 INFO: [cached since 9783s ago] {'pk_1': 7}
2025-03-13 20:25:15,104 DEBUG: Query parameters: task_type=Epic, exclude_task_id=430, search_term=, project_id=None, limit=30, page=1
2025-03-13 20:25:15,105 INFO: [cached since 9783s ago] {}
2025-03-13 20:25:15,105 INFO: Entering available_tasks route...
2025-03-13 20:25:15,106 INFO: BEGIN (implicit)
2025-03-13 20:25:15,108 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:25:15,109 INFO: [cached since 9783s ago] {}
2025-03-13 20:25:15,109 DEBUG: Query parameters: task_type=Epic, exclude_task_id=430, search_term=, project_id=None, limit=30, page=1
2025-03-13 20:25:15,109 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:25:15,109 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:25:15,110 INFO: BEGIN (implicit)
2025-03-13 20:25:15,112 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:25:15,113 INFO: [cached since 9783s ago] {'param_1': 7}
2025-03-13 20:25:15,113 INFO: [cached since 9780s ago] {'pk_1': 430}
2025-03-13 20:25:15,113 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:25:15,113 INFO: [cached since 9783s ago] {'param_1': 7}
2025-03-13 20:25:15,116 INFO: [cached since 9780s ago] {'pk_1': 430}
2025-03-13 20:25:15,119 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:25:15,119 INFO: [cached since 9783s ago] {'param_1': 1}
2025-03-13 20:25:15,123 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:25:15,124 INFO: [cached since 9783s ago] {'param_1': 1}
2025-03-13 20:25:15,125 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:25:15,126 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:25:15,126 INFO: [cached since 9783s ago] {'param_1': 2}
2025-03-13 20:25:15,126 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 430, 'task_type': ['Epic']}
2025-03-13 20:25:15,126 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 430, 'task_type': ['Epic']}
2025-03-13 20:25:15,127 INFO: Validating hierarchy for Task N/A
2025-03-13 20:25:15,127 INFO: [cached since 9783s ago] {'param_1': 2}
2025-03-13 20:25:15,127 INFO: Determining valid parent types for task_type: Epic
2025-03-13 20:25:15,127 INFO: No valid parents found for task_type: Epic
2025-03-13 20:25:15,127 INFO: Validating hierarchy for Task N/A
2025-03-13 20:25:15,128 INFO: ROLLBACK
2025-03-13 20:25:15,128 INFO: Determining valid parent types for task_type: Epic
2025-03-13 20:25:15,128 INFO: No valid parents found for task_type: Epic
2025-03-13 20:25:15,128 INFO: ROLLBACK
2025-03-13 20:25:15,129 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:25:15,130 INFO: 127.0.0.1 - - [13/Mar/2025 20:25:15] "GET /tasks/available_tasks?task_type=Epic&exclude_task_id=430&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:25:15,131 INFO: 127.0.0.1 - - [13/Mar/2025 20:25:15] "GET /tasks/available_tasks?task_type=Epic&exclude_task_id=430&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:25:15,133 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:25:15,133 INFO: [cached since 9783s ago] {'param_1': 3}
2025-03-13 20:25:15,136 INFO: [cached since 9783s ago] {'param_1': 3}
2025-03-13 20:25:15,140 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:25:15,141 INFO: [cached since 9783s ago] {'param_1': 4}
2025-03-13 20:25:15,142 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:25:15,142 INFO: [cached since 9783s ago] {'param_1': 4}
2025-03-13 20:25:15,143 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:25:15,145 INFO: [cached since 9783s ago] {'param_1': 5}
2025-03-13 20:25:15,144 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:25:15,145 INFO: [cached since 9783s ago] {'param_1': 5}
2025-03-13 20:25:15,147 INFO: ROLLBACK
2025-03-13 20:25:15,149 INFO: ROLLBACK
2025-03-13 20:25:15,150 INFO: 127.0.0.1 - - [13/Mar/2025 20:25:15] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:25:15,150 INFO: 127.0.0.1 - - [13/Mar/2025 20:25:15] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:26:28,350 INFO: 127.0.0.1 - - [13/Mar/2025 20:26:28] "GET /socket.io/?EIO=4&transport=websocket&sid=-GaGB0RvJGlwgkziAABE HTTP/1.1" 200 -
2025-03-13 20:26:31,561 INFO: BEGIN (implicit)
2025-03-13 20:26:31,591 INFO: BEGIN (implicit)
2025-03-13 20:26:31,602 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 20:26:31,605 INFO: [cached since 9859s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 20:26:31,602 INFO: BEGIN (implicit)
2025-03-13 20:26:31,607 INFO: Entering list_tasks_json route...
2025-03-13 20:26:31,621 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 20:26:31,604 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 20:26:31,659 INFO: [cached since 9860s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 20:26:31,609 INFO: 127.0.0.1 - - [13/Mar/2025 20:26:31] "GET /socket.io/?EIO=4&transport=polling&t=qphh57rc HTTP/1.1" 200 -
2025-03-13 20:26:31,658 INFO: ROLLBACK
2025-03-13 20:26:31,659 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 20:26:31,621 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:26:31,662 INFO: 127.0.0.1 - - [13/Mar/2025 20:26:31] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 20:26:31,674 INFO: 127.0.0.1 - - [13/Mar/2025 20:26:31] "POST /socket.io/?EIO=4&transport=polling&t=qphwvgse&sid=xGKodwXed8UwhBwfAABG HTTP/1.1" 200 -
2025-03-13 20:26:31,687 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 20:26:31,688 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 20:26:31,688 INFO: [cached since 9860s ago] {}
2025-03-13 20:26:31,690 INFO: 127.0.0.1 - - [13/Mar/2025 20:26:31] "GET /socket.io/?EIO=4&transport=polling&t=qphwvr45&sid=xGKodwXed8UwhBwfAABG HTTP/1.1" 200 -
2025-03-13 20:26:31,709 INFO: BEGIN (implicit)
2025-03-13 20:26:31,713 INFO: [cached since 9860s ago] {}
2025-03-13 20:26:31,720 INFO: BEGIN (implicit)
2025-03-13 20:26:31,727 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:26:31,734 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 20:26:31,740 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:26:31,738 INFO: [cached since 9860s ago] {'pk_1': 19}
2025-03-13 20:26:31,740 INFO: ROLLBACK
2025-03-13 20:26:31,745 INFO: [cached since 9860s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 20:26:31,745 INFO: [cached since 9860s ago] {'param_1': 1}
2025-03-13 20:26:31,747 INFO: 127.0.0.1 - - [13/Mar/2025 20:26:31] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 20:26:31,764 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:26:31,764 INFO: [cached since 9860s ago] {'param_1': 2}
2025-03-13 20:26:31,765 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:26:31,765 INFO: [cached since 9860s ago] {}
2025-03-13 20:26:31,766 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:26:31,766 INFO: [cached since 9860s ago] {'param_1': 3}
2025-03-13 20:26:31,767 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:26:31,768 INFO: [cached since 9860s ago] {'param_1': 19}
2025-03-13 20:26:31,770 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:26:31,770 INFO: [cached since 9860s ago] {'param_1': 4}
2025-03-13 20:26:31,778 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:26:31,778 INFO: [cached since 9860s ago] {'param_1': 1}
2025-03-13 20:26:31,787 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:26:31,788 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:26:31,788 INFO: [cached since 9860s ago] {'param_1': 5}
2025-03-13 20:26:31,788 INFO: [cached since 9860s ago] {'param_1': 2}
2025-03-13 20:26:31,790 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:26:31,790 INFO: [cached since 9860s ago] {'param_1': 3}
2025-03-13 20:26:31,792 INFO: ROLLBACK
2025-03-13 20:26:31,794 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:26:31,795 INFO: [cached since 9860s ago] {'param_1': 4}
2025-03-13 20:26:31,795 INFO: 127.0.0.1 - - [13/Mar/2025 20:26:31] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 20:26:31,799 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:26:31,800 INFO: [cached since 9860s ago] {'param_1': 5}
2025-03-13 20:26:31,802 INFO: ROLLBACK
2025-03-13 20:26:31,803 INFO: 127.0.0.1 - - [13/Mar/2025 20:26:31] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:26:31,920 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 20:26:31,920 INFO: [cached since 9860s ago] {}
2025-03-13 20:26:31,922 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 20:26:31,922 INFO: [cached since 9860s ago] {}
2025-03-13 20:26:31,922 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 20:26:31,922 INFO: [cached since 9860s ago] {}
2025-03-13 20:26:31,931 INFO: ROLLBACK
2025-03-13 20:26:31,932 INFO: 127.0.0.1 - - [13/Mar/2025 20:26:31] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 20:26:36,258 INFO: Fetching task details for Task ID 272.
2025-03-13 20:26:36,260 INFO: Fetching task with ID 272.
2025-03-13 20:26:36,263 INFO: BEGIN (implicit)
2025-03-13 20:26:36,264 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:26:36,264 INFO: [cached since 9861s ago] {'pk_1': 272}
2025-03-13 20:26:36,267 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x109e2fe30>, 'epic_priority': None, 'project_id': 7, 'id': 272, 'is_archived': False, 'contributor_id': 5, 'name': 'Implement a markdown text editor like notion', 'completed': False, 'estimate_type': 'story_points', 'sort_order': 2, 'story_points': 0, 'completed_date': None, 'description': '<p>Write your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p>', 'status': 'In Progress', 'time_estimate': None, 'parent_id': None, 'created_at': datetime.datetime(2025, 2, 10, 0, 28, 18, 300231), 'task_type': 'Epic', 'updated_at': datetime.datetime(2025, 3, 5, 16, 4, 29, 771061), 'priority': 'Medium'}
2025-03-13 20:26:36,268 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:26:36,268 INFO: [cached since 9861s ago] {'pk_1': 7}
2025-03-13 20:26:36,268 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-13 20:26:36,268 INFO: [cached since 9861s ago] {'pk_1': 5}
2025-03-13 20:26:36,269 INFO: Task ID 272 fetched with parent ID: None
2025-03-13 20:26:36,269 INFO: Task with ID 272 fetched successfully.
2025-03-13 20:26:36,269 DEBUG: Fetched Task Data: {'id': 272, 'name': 'Implement a markdown text editor like notion', 'description': '<p>Write your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p>', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'estimate_type': 'story_points', 'estimate': 0, 'status': 'In Progress', 'sort_order': 2, 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-03-05T16:04:29.771061', 'contributor_name': 'Fredrik Cederborg', 'parent': None}
2025-03-13 20:26:36,269 INFO: Task details fetched successfully for Task ID 272.
2025-03-13 20:26:36,270 INFO: ROLLBACK
2025-03-13 20:26:36,270 INFO: 127.0.0.1 - - [13/Mar/2025 20:26:36] "GET /api/tasks/272 HTTP/1.1" 200 -
2025-03-13 20:26:36,469 INFO: 127.0.0.1 - - [13/Mar/2025 20:26:36] "OPTIONS /tasks/available_tasks?task_type=Epic&exclude_task_id=272&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:26:36,479 INFO: BEGIN (implicit)
2025-03-13 20:26:36,480 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:26:36,481 INFO: [cached since 9864s ago] {'pk_1': 7}
2025-03-13 20:26:36,485 INFO: 127.0.0.1 - - [13/Mar/2025 20:26:36] "OPTIONS /tasks/available_tasks?task_type=Epic&exclude_task_id=272&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:26:36,495 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:26:36,500 INFO: [cached since 9864s ago] {}
2025-03-13 20:26:36,506 INFO: BEGIN (implicit)
2025-03-13 20:26:36,507 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:26:36,507 INFO: [cached since 9864s ago] {'pk_1': 7}
2025-03-13 20:26:36,509 INFO: Entering available_tasks route...
2025-03-13 20:26:36,514 DEBUG: Query parameters: task_type=Epic, exclude_task_id=272, search_term=, project_id=None, limit=30, page=1
2025-03-13 20:26:36,518 INFO: BEGIN (implicit)
2025-03-13 20:26:36,518 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:26:36,519 INFO: [cached since 9862s ago] {'pk_1': 272}
2025-03-13 20:26:36,519 INFO: Entering available_tasks route...
2025-03-13 20:26:36,524 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:26:36,526 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:26:36,527 DEBUG: Query parameters: task_type=Epic, exclude_task_id=272, search_term=, project_id=None, limit=30, page=1
2025-03-13 20:26:36,527 INFO: BEGIN (implicit)
2025-03-13 20:26:36,527 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:26:36,527 INFO: [cached since 9862s ago] {'pk_1': 272}
2025-03-13 20:26:36,528 INFO: [cached since 9864s ago] {'param_1': 7}
2025-03-13 20:26:36,528 INFO: [cached since 9864s ago] {}
2025-03-13 20:26:36,594 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:26:36,596 INFO: [cached since 9864s ago] {'param_1': 1}
2025-03-13 20:26:36,597 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 272, 'task_type': ['Epic']}
2025-03-13 20:26:36,597 INFO: Validating hierarchy for Task N/A
2025-03-13 20:26:36,597 INFO: Determining valid parent types for task_type: Epic
2025-03-13 20:26:36,597 INFO: No valid parents found for task_type: Epic
2025-03-13 20:26:36,594 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 272, 'task_type': ['Epic']}
2025-03-13 20:26:36,602 INFO: ROLLBACK
2025-03-13 20:26:36,594 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:26:36,604 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:26:36,604 INFO: Validating hierarchy for Task N/A
2025-03-13 20:26:36,606 INFO: Determining valid parent types for task_type: Epic
2025-03-13 20:26:36,606 INFO: 127.0.0.1 - - [13/Mar/2025 20:26:36] "GET /tasks/available_tasks?task_type=Epic&exclude_task_id=272&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:26:36,606 INFO: [cached since 9864s ago] {'param_1': 2}
2025-03-13 20:26:36,605 INFO: [cached since 9864s ago] {'param_1': 7}
2025-03-13 20:26:36,606 INFO: No valid parents found for task_type: Epic
2025-03-13 20:26:36,607 INFO: ROLLBACK
2025-03-13 20:26:36,609 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:26:36,610 INFO: 127.0.0.1 - - [13/Mar/2025 20:26:36] "GET /tasks/available_tasks?task_type=Epic&exclude_task_id=272&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:26:36,612 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:26:36,612 INFO: [cached since 9864s ago] {'param_1': 1}
2025-03-13 20:26:36,612 INFO: [cached since 9864s ago] {'param_1': 3}
2025-03-13 20:26:36,620 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:26:36,620 INFO: [cached since 9864s ago] {'param_1': 2}
2025-03-13 20:26:36,622 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:26:36,622 INFO: [cached since 9864s ago] {'param_1': 4}
2025-03-13 20:26:36,624 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:26:36,625 INFO: [cached since 9864s ago] {'param_1': 3}
2025-03-13 20:26:36,628 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:26:36,628 INFO: [cached since 9864s ago] {'param_1': 5}
2025-03-13 20:26:36,639 INFO: ROLLBACK
2025-03-13 20:26:36,640 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:26:36,641 INFO: [cached since 9864s ago] {'param_1': 4}
2025-03-13 20:26:36,641 INFO: 127.0.0.1 - - [13/Mar/2025 20:26:36] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:26:36,644 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:26:36,646 INFO: [cached since 9864s ago] {'param_1': 5}
2025-03-13 20:26:36,651 INFO: ROLLBACK
2025-03-13 20:26:36,652 INFO: 127.0.0.1 - - [13/Mar/2025 20:26:36] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:27:01,015 INFO: 127.0.0.1 - - [13/Mar/2025 20:27:01] "GET /socket.io/?EIO=4&transport=websocket&sid=xGKodwXed8UwhBwfAABG HTTP/1.1" 200 -
2025-03-13 20:27:01,574 INFO: 127.0.0.1 - - [13/Mar/2025 20:27:01] "GET /socket.io/?EIO=4&transport=polling&t=qq4zcknd HTTP/1.1" 200 -
2025-03-13 20:27:01,739 INFO: BEGIN (implicit)
2025-03-13 20:27:01,766 INFO: Entering list_tasks_json route...
2025-03-13 20:27:01,769 INFO: BEGIN (implicit)
2025-03-13 20:27:01,770 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:27:01,771 INFO: 127.0.0.1 - - [13/Mar/2025 20:27:01] "POST /socket.io/?EIO=4&transport=polling&t=qq50ke0q&sid=_2wsGagy-iQ0YsnBAABI HTTP/1.1" 200 -
2025-03-13 20:27:01,772 INFO: BEGIN (implicit)
2025-03-13 20:27:01,780 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 20:27:01,772 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 20:27:01,776 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 20:27:01,777 INFO: [cached since 9890s ago] {}
2025-03-13 20:27:01,780 INFO: [cached since 9890s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 20:27:01,775 INFO: 127.0.0.1 - - [13/Mar/2025 20:27:01] "GET /socket.io/?EIO=4&transport=polling&t=qq50l43x&sid=_2wsGagy-iQ0YsnBAABI HTTP/1.1" 200 -
2025-03-13 20:27:01,785 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 20:27:01,786 INFO: [cached since 9890s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 20:27:01,802 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:27:01,814 INFO: [cached since 9890s ago] {'param_1': 1}
2025-03-13 20:27:01,808 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 20:27:01,811 INFO: ROLLBACK
2025-03-13 20:27:01,819 INFO: BEGIN (implicit)
2025-03-13 20:27:01,820 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 20:27:01,822 INFO: 127.0.0.1 - - [13/Mar/2025 20:27:01] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 20:27:01,823 INFO: [cached since 9890s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 20:27:01,826 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:27:01,831 INFO: [cached since 9890s ago] {'param_1': 2}
2025-03-13 20:27:01,832 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 20:27:01,835 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:27:01,835 INFO: [cached since 9890s ago] {}
2025-03-13 20:27:01,836 INFO: [cached since 9890s ago] {'param_1': 3}
2025-03-13 20:27:01,837 INFO: ROLLBACK
2025-03-13 20:27:01,845 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:27:01,846 INFO: 127.0.0.1 - - [13/Mar/2025 20:27:01] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 20:27:01,846 INFO: [cached since 9890s ago] {'param_1': 4}
2025-03-13 20:27:01,865 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:27:01,865 INFO: [cached since 9890s ago] {'param_1': 5}
2025-03-13 20:27:01,876 INFO: BEGIN (implicit)
2025-03-13 20:27:01,878 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:27:01,882 INFO: ROLLBACK
2025-03-13 20:27:01,882 INFO: [cached since 9890s ago] {'pk_1': 19}
2025-03-13 20:27:01,884 INFO: 127.0.0.1 - - [13/Mar/2025 20:27:01] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 20:27:01,900 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:27:01,900 INFO: [cached since 9890s ago] {}
2025-03-13 20:27:01,901 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:27:01,901 INFO: [cached since 9890s ago] {'param_1': 19}
2025-03-13 20:27:01,906 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:27:01,906 INFO: [cached since 9890s ago] {'param_1': 1}
2025-03-13 20:27:01,909 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:27:01,909 INFO: [cached since 9890s ago] {'param_1': 2}
2025-03-13 20:27:01,915 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:27:01,915 INFO: [cached since 9890s ago] {'param_1': 3}
2025-03-13 20:27:01,918 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:27:01,918 INFO: [cached since 9890s ago] {'param_1': 4}
2025-03-13 20:27:01,921 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:27:01,922 INFO: [cached since 9890s ago] {'param_1': 5}
2025-03-13 20:27:01,938 INFO: ROLLBACK
2025-03-13 20:27:01,941 INFO: 127.0.0.1 - - [13/Mar/2025 20:27:01] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:27:02,042 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 20:27:02,042 INFO: [cached since 9890s ago] {}
2025-03-13 20:27:02,050 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 20:27:02,050 INFO: [cached since 9890s ago] {}
2025-03-13 20:27:02,051 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 20:27:02,052 INFO: [cached since 9890s ago] {}
2025-03-13 20:27:02,058 INFO: ROLLBACK
2025-03-13 20:27:02,059 INFO: 127.0.0.1 - - [13/Mar/2025 20:27:02] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 20:27:05,263 INFO: Fetching task details for Task ID 395.
2025-03-13 20:27:05,271 INFO: Fetching task with ID 395.
2025-03-13 20:27:05,275 INFO: BEGIN (implicit)
2025-03-13 20:27:05,276 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:27:05,277 INFO: [cached since 9890s ago] {'pk_1': 395}
2025-03-13 20:27:05,281 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x109e2dd90>, 'epic_priority': None, 'project_id': 7, 'id': 395, 'is_archived': False, 'contributor_id': 5, 'name': 'Side menu', 'completed': False, 'estimate_type': 'story_points', 'sort_order': 2, 'story_points': 0, 'completed_date': None, 'description': '<ul><li><p>Settings</p></li><li><p>Contributors</p></li><li><p>Company</p><ul><li><p>Goals</p><ul><li><p>OKR´s</p></li></ul></li><li><p>Sales</p></li><li><p>Financial (Rescricted access, (Super admin)</p></li><li><p>Market position</p></li><li><p>Market analysis</p></li><li><p>User metrics</p></li></ul></li><li><p>Projects</p></li><li><p></p></li></ul>', 'status': 'In Progress', 'time_estimate': None, 'parent_id': None, 'created_at': datetime.datetime(2025, 3, 5, 7, 43, 51, 220532), 'task_type': 'User Story', 'updated_at': datetime.datetime(2025, 3, 13, 13, 49, 27, 425658), 'priority': None}
2025-03-13 20:27:05,282 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:27:05,282 INFO: [cached since 9890s ago] {'pk_1': 7}
2025-03-13 20:27:05,286 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-13 20:27:05,287 INFO: [cached since 9890s ago] {'pk_1': 5}
2025-03-13 20:27:05,291 INFO: Task ID 395 fetched with parent ID: None
2025-03-13 20:27:05,292 INFO: Task with ID 395 fetched successfully.
2025-03-13 20:27:05,293 DEBUG: Fetched Task Data: {'id': 395, 'name': 'Side menu', 'description': '<ul><li><p>Settings</p></li><li><p>Contributors</p></li><li><p>Company</p><ul><li><p>Goals</p><ul><li><p>OKR´s</p></li></ul></li><li><p>Sales</p></li><li><p>Financial (Rescricted access, (Super admin)</p></li><li><p>Market position</p></li><li><p>Market analysis</p></li><li><p>User metrics</p></li></ul></li><li><p>Projects</p></li><li><p></p></li></ul>', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'estimate_type': 'story_points', 'estimate': 0, 'status': 'In Progress', 'sort_order': 2, 'created_at': '2025-03-05T07:43:51.220532', 'updated_at': '2025-03-13T13:49:27.425658', 'contributor_name': 'Fredrik Cederborg', 'parent': None}
2025-03-13 20:27:05,294 INFO: Task details fetched successfully for Task ID 395.
2025-03-13 20:27:05,296 INFO: ROLLBACK
2025-03-13 20:27:05,297 INFO: 127.0.0.1 - - [13/Mar/2025 20:27:05] "GET /api/tasks/395 HTTP/1.1" 200 -
2025-03-13 20:27:05,508 INFO: 127.0.0.1 - - [13/Mar/2025 20:27:05] "OPTIONS /tasks/available_tasks?task_type=User%20Story&exclude_task_id=395&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:27:05,527 INFO: 127.0.0.1 - - [13/Mar/2025 20:27:05] "OPTIONS /tasks/available_tasks?task_type=User%20Story&exclude_task_id=395&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:27:05,522 INFO: BEGIN (implicit)
2025-03-13 20:27:05,532 INFO: BEGIN (implicit)
2025-03-13 20:27:05,535 INFO: Entering available_tasks route...
2025-03-13 20:27:05,536 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:27:05,540 INFO: [cached since 9893s ago] {'pk_1': 7}
2025-03-13 20:27:05,537 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:27:05,539 DEBUG: Query parameters: task_type=User Story, exclude_task_id=395, search_term=, project_id=None, limit=30, page=1
2025-03-13 20:27:05,537 INFO: Entering available_tasks route...
2025-03-13 20:27:05,547 DEBUG: Query parameters: task_type=User Story, exclude_task_id=395, search_term=, project_id=None, limit=30, page=1
2025-03-13 20:27:05,547 INFO: BEGIN (implicit)
2025-03-13 20:27:05,542 INFO: [cached since 9893s ago] {'pk_1': 7}
2025-03-13 20:27:05,548 INFO: BEGIN (implicit)
2025-03-13 20:27:05,548 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:27:05,549 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:27:05,550 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:27:05,551 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:27:05,551 INFO: [cached since 9893s ago] {}
2025-03-13 20:27:05,551 INFO: [cached since 9891s ago] {'pk_1': 395}
2025-03-13 20:27:05,551 INFO: [cached since 9893s ago] {}
2025-03-13 20:27:05,551 INFO: [cached since 9891s ago] {'pk_1': 395}
2025-03-13 20:27:05,553 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:27:05,554 INFO: [cached since 9893s ago] {'param_1': 7}
2025-03-13 20:27:05,555 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:27:05,557 INFO: [cached since 9893s ago] {'param_1': 7}
2025-03-13 20:27:05,556 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 395, 'task_type': ['User Story']}
2025-03-13 20:27:05,557 INFO: Validating hierarchy for Task N/A
2025-03-13 20:27:05,557 INFO: Determining valid parent types for task_type: User Story
2025-03-13 20:27:05,559 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 395, 'task_type': ['User Story']}
2025-03-13 20:27:05,563 INFO: Validating hierarchy for Task N/A
2025-03-13 20:27:05,563 INFO: Determining valid parent types for task_type: User Story
2025-03-13 20:27:05,560 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:27:05,564 INFO: [cached since 9893s ago] {'param_1': 1}
2025-03-13 20:27:05,562 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:27:05,564 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 395, 'task_type': ['Epic']}
2025-03-13 20:27:05,566 INFO: [cached since 9893s ago] {'param_1': 1}
2025-03-13 20:27:05,563 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 395, 'task_type': ['Epic']}
2025-03-13 20:27:05,586 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:27:05,595 INFO: [cached since 9893s ago] {'param_1': 2}
2025-03-13 20:27:05,595 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-13 20:27:05,601 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-13 20:27:05,601 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:27:05,603 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-13 20:27:05,606 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:27:05,612 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-13 20:27:05,612 INFO: [cached since 9893s ago] {'param_1': 2}
2025-03-13 20:27:05,613 INFO: [cached since 9677s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-13 20:27:05,613 INFO: [cached since 9893s ago] {'param_1': 3}
2025-03-13 20:27:05,613 INFO: [cached since 9677s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-13 20:27:05,617 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:27:05,638 INFO: [cached since 9893s ago] {'param_1': 4}
2025-03-13 20:27:05,618 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:27:05,683 DEBUG: Tasks returned: [{'id': 430, 'name': 'No Epic', 'task_type': 'Epic', 'is_parent': False}, {'id': 393, 'name': 'List of ideas for new features, parameters to add', 'task_type': 'Epic', 'is_parent': False}, {'id': 327, 'name': '[UNIQUE feature] -\xa0Epic - AI-Powered PBI Refinement System', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 456, 'name': 'Search in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okr´s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notification system', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 459, 'name': '[RESEARCH] - Step 1: Mapping out what each file does', 'task_type': 'Epic', 'is_parent': False}, {'id': 432, 'name': 'Roadmap view', 'task_type': 'Epic', 'is_parent': False}, {'id': 392, 'name': 'UI / UX Improvements', 'task_type': 'Epic', 'is_parent': False}, {'id': 465, 'name': 'Building from Scratch vs.\xa0Replicating Each Feature', 'task_type': 'Epic', 'is_parent': False}, {'id': 424, 'name': '[ISSUES] - Current issues/bugs', 'task_type': 'Epic', 'is_parent': False}, {'id': 460, 'name': '[PLANNING] - Step 2: Architecture & Migration Planning', 'task_type': 'Epic', 'is_parent': False}, {'id': 462, 'name': '[MIGRATION] - high-level roadmap Step 1 - 7', 'task_type': 'Epic', 'is_parent': False}]
2025-03-13 20:27:05,702 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:27:05,710 DEBUG: Tasks returned: [{'id': 430, 'name': 'No Epic', 'task_type': 'Epic', 'is_parent': False}, {'id': 393, 'name': 'List of ideas for new features, parameters to add', 'task_type': 'Epic', 'is_parent': False}, {'id': 327, 'name': '[UNIQUE feature] -\xa0Epic - AI-Powered PBI Refinement System', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 456, 'name': 'Search in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okr´s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notification system', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 459, 'name': '[RESEARCH] - Step 1: Mapping out what each file does', 'task_type': 'Epic', 'is_parent': False}, {'id': 432, 'name': 'Roadmap view', 'task_type': 'Epic', 'is_parent': False}, {'id': 392, 'name': 'UI / UX Improvements', 'task_type': 'Epic', 'is_parent': False}, {'id': 465, 'name': 'Building from Scratch vs.\xa0Replicating Each Feature', 'task_type': 'Epic', 'is_parent': False}, {'id': 424, 'name': '[ISSUES] - Current issues/bugs', 'task_type': 'Epic', 'is_parent': False}, {'id': 460, 'name': '[PLANNING] - Step 2: Architecture & Migration Planning', 'task_type': 'Epic', 'is_parent': False}, {'id': 462, 'name': '[MIGRATION] - high-level roadmap Step 1 - 7', 'task_type': 'Epic', 'is_parent': False}]
2025-03-13 20:27:05,711 INFO: [cached since 9894s ago] {'param_1': 3}
2025-03-13 20:27:05,742 INFO: ROLLBACK
2025-03-13 20:27:05,747 INFO: [cached since 9894s ago] {'param_1': 5}
2025-03-13 20:27:05,760 INFO: ROLLBACK
2025-03-13 20:27:05,770 INFO: 127.0.0.1 - - [13/Mar/2025 20:27:05] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=395&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:27:05,770 INFO: 127.0.0.1 - - [13/Mar/2025 20:27:05] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=395&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:27:05,772 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:27:05,776 INFO: [cached since 9894s ago] {'param_1': 4}
2025-03-13 20:27:05,773 INFO: ROLLBACK
2025-03-13 20:27:05,805 INFO: 127.0.0.1 - - [13/Mar/2025 20:27:05] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:27:05,822 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:27:05,822 INFO: [cached since 9894s ago] {'param_1': 5}
2025-03-13 20:27:05,826 INFO: ROLLBACK
2025-03-13 20:27:05,827 INFO: 127.0.0.1 - - [13/Mar/2025 20:27:05] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:29:13,982 INFO: 127.0.0.1 - - [13/Mar/2025 20:29:13] "GET /socket.io/?EIO=4&transport=websocket&sid=_2wsGagy-iQ0YsnBAABI HTTP/1.1" 200 -
2025-03-13 20:29:15,868 INFO: Entering list_tasks_json route...
2025-03-13 20:29:15,881 INFO: BEGIN (implicit)
2025-03-13 20:29:15,885 INFO: 127.0.0.1 - - [13/Mar/2025 20:29:15] "GET /socket.io/?EIO=4&transport=polling&t=qt0jj00j HTTP/1.1" 200 -
2025-03-13 20:29:15,887 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 20:29:15,887 INFO: BEGIN (implicit)
2025-03-13 20:29:15,893 INFO: BEGIN (implicit)
2025-03-13 20:29:15,905 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 20:29:15,905 INFO: [cached since 1.002e+04s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 20:29:15,899 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 20:29:15,903 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 20:29:15,909 INFO: [cached since 1.002e+04s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 20:29:15,918 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 20:29:15,966 INFO: [cached since 1.002e+04s ago] {}
2025-03-13 20:29:15,968 INFO: ROLLBACK
2025-03-13 20:29:15,956 INFO: ROLLBACK
2025-03-13 20:29:15,923 INFO: 127.0.0.1 - - [13/Mar/2025 20:29:15] "POST /socket.io/?EIO=4&transport=polling&t=qt0n2ctf&sid=RPW0cwlHxNLK9bs2AABK HTTP/1.1" 200 -
2025-03-13 20:29:15,904 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:29:15,970 INFO: [cached since 1.002e+04s ago] {}
2025-03-13 20:29:15,961 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 20:29:15,965 INFO: 127.0.0.1 - - [13/Mar/2025 20:29:15] "GET /socket.io/?EIO=4&transport=polling&t=qt0n5gsf&sid=RPW0cwlHxNLK9bs2AABK HTTP/1.1" 200 -
2025-03-13 20:29:15,976 INFO: 127.0.0.1 - - [13/Mar/2025 20:29:15] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 20:29:15,980 INFO: BEGIN (implicit)
2025-03-13 20:29:15,982 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 20:29:15,987 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:29:15,988 INFO: [cached since 1.002e+04s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 20:29:15,989 INFO: 127.0.0.1 - - [13/Mar/2025 20:29:15] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 20:29:15,989 INFO: [cached since 1.002e+04s ago] {'param_1': 1}
2025-03-13 20:29:16,015 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:29:16,016 INFO: [cached since 1.002e+04s ago] {'param_1': 2}
2025-03-13 20:29:16,021 INFO: BEGIN (implicit)
2025-03-13 20:29:16,022 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:29:16,031 INFO: [cached since 1.002e+04s ago] {'pk_1': 19}
2025-03-13 20:29:16,029 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:29:16,032 INFO: [cached since 1.002e+04s ago] {'param_1': 3}
2025-03-13 20:29:16,039 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:29:16,039 INFO: [cached since 1.002e+04s ago] {'param_1': 4}
2025-03-13 20:29:16,039 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:29:16,039 INFO: [cached since 1.002e+04s ago] {}
2025-03-13 20:29:16,055 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:29:16,055 INFO: [cached since 1.002e+04s ago] {'param_1': 19}
2025-03-13 20:29:16,062 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:29:16,064 INFO: [cached since 1.002e+04s ago] {'param_1': 5}
2025-03-13 20:29:16,064 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:29:16,065 INFO: [cached since 1.002e+04s ago] {'param_1': 1}
2025-03-13 20:29:16,066 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:29:16,067 INFO: ROLLBACK
2025-03-13 20:29:16,067 INFO: [cached since 1.002e+04s ago] {'param_1': 2}
2025-03-13 20:29:16,067 INFO: 127.0.0.1 - - [13/Mar/2025 20:29:16] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 20:29:16,070 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:29:16,071 INFO: [cached since 1.002e+04s ago] {'param_1': 3}
2025-03-13 20:29:16,075 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:29:16,075 INFO: [cached since 1.002e+04s ago] {'param_1': 4}
2025-03-13 20:29:16,078 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:29:16,079 INFO: [cached since 1.002e+04s ago] {'param_1': 5}
2025-03-13 20:29:16,081 INFO: ROLLBACK
2025-03-13 20:29:16,081 INFO: 127.0.0.1 - - [13/Mar/2025 20:29:16] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:29:16,414 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 20:29:16,415 INFO: [cached since 1.002e+04s ago] {}
2025-03-13 20:29:16,417 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 20:29:16,417 INFO: [cached since 1.002e+04s ago] {}
2025-03-13 20:29:16,418 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 20:29:16,418 INFO: [cached since 1.002e+04s ago] {}
2025-03-13 20:29:16,432 INFO: ROLLBACK
2025-03-13 20:29:16,432 INFO: 127.0.0.1 - - [13/Mar/2025 20:29:16] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 20:31:28,729 INFO: 127.0.0.1 - - [13/Mar/2025 20:31:28] "GET /socket.io/?EIO=4&transport=websocket&sid=RPW0cwlHxNLK9bs2AABK HTTP/1.1" 200 -
2025-03-13 20:31:31,315 INFO: 127.0.0.1 - - [13/Mar/2025 20:31:31] "GET /socket.io/?EIO=4&transport=polling&t=qvx2y7et HTTP/1.1" 200 -
2025-03-13 20:31:31,415 INFO: Entering list_tasks_json route...
2025-03-13 20:31:31,415 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 20:31:31,448 INFO: BEGIN (implicit)
2025-03-13 20:31:31,464 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 20:31:31,474 INFO: BEGIN (implicit)
2025-03-13 20:31:31,504 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 20:31:31,504 INFO: [cached since 1.016e+04s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 20:31:31,474 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:31:31,537 INFO: ROLLBACK
2025-03-13 20:31:31,543 INFO: BEGIN (implicit)
2025-03-13 20:31:31,580 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 20:31:31,580 INFO: [cached since 1.016e+04s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 20:31:31,548 INFO: 127.0.0.1 - - [13/Mar/2025 20:31:31] "POST /socket.io/?EIO=4&transport=polling&t=qvx5oqca&sid=Fb4eIsR50nka02ZmAABM HTTP/1.1" 200 -
2025-03-13 20:31:31,548 INFO: [cached since 1.016e+04s ago] {}
2025-03-13 20:31:31,579 INFO: 127.0.0.1 - - [13/Mar/2025 20:31:31] "GET /socket.io/?EIO=4&transport=polling&t=qvx5psms&sid=Fb4eIsR50nka02ZmAABM HTTP/1.1" 200 -
2025-03-13 20:31:31,579 INFO: 127.0.0.1 - - [13/Mar/2025 20:31:31] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 20:31:31,601 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 20:31:31,606 INFO: BEGIN (implicit)
2025-03-13 20:31:31,606 INFO: [cached since 1.016e+04s ago] {}
2025-03-13 20:31:31,544 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 20:31:31,613 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:31:31,615 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:31:31,617 INFO: [cached since 1.016e+04s ago] {'pk_1': 19}
2025-03-13 20:31:31,616 INFO: [cached since 1.016e+04s ago] {'param_1': 1}
2025-03-13 20:31:31,617 INFO: ROLLBACK
2025-03-13 20:31:31,616 INFO: BEGIN (implicit)
2025-03-13 20:31:31,619 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 20:31:31,620 INFO: 127.0.0.1 - - [13/Mar/2025 20:31:31] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 20:31:31,621 INFO: [cached since 1.016e+04s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 20:31:31,622 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:31:31,622 INFO: [cached since 1.016e+04s ago] {'param_1': 2}
2025-03-13 20:31:31,650 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:31:31,650 INFO: [cached since 1.016e+04s ago] {'param_1': 3}
2025-03-13 20:31:31,653 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:31:31,653 INFO: [cached since 1.016e+04s ago] {}
2025-03-13 20:31:31,664 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:31:31,665 INFO: [cached since 1.016e+04s ago] {'param_1': 4}
2025-03-13 20:31:31,668 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:31:31,673 INFO: [cached since 1.016e+04s ago] {'param_1': 19}
2025-03-13 20:31:31,675 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:31:31,675 INFO: [cached since 1.016e+04s ago] {'param_1': 5}
2025-03-13 20:31:31,681 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:31:31,683 INFO: ROLLBACK
2025-03-13 20:31:31,683 INFO: [cached since 1.016e+04s ago] {'param_1': 1}
2025-03-13 20:31:31,728 INFO: 127.0.0.1 - - [13/Mar/2025 20:31:31] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 20:31:31,764 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:31:31,765 INFO: [cached since 1.016e+04s ago] {'param_1': 2}
2025-03-13 20:31:31,766 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:31:31,766 INFO: [cached since 1.016e+04s ago] {'param_1': 3}
2025-03-13 20:31:31,768 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:31:31,768 INFO: [cached since 1.016e+04s ago] {'param_1': 4}
2025-03-13 20:31:31,769 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:31:31,770 INFO: [cached since 1.016e+04s ago] {'param_1': 5}
2025-03-13 20:31:31,777 INFO: ROLLBACK
2025-03-13 20:31:31,800 INFO: 127.0.0.1 - - [13/Mar/2025 20:31:31] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:31:32,049 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 20:31:32,049 INFO: [cached since 1.016e+04s ago] {}
2025-03-13 20:31:32,052 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 20:31:32,052 INFO: [cached since 1.016e+04s ago] {}
2025-03-13 20:31:32,053 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 20:31:32,053 INFO: [cached since 1.016e+04s ago] {}
2025-03-13 20:31:32,061 INFO: ROLLBACK
2025-03-13 20:31:32,061 INFO: 127.0.0.1 - - [13/Mar/2025 20:31:32] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 20:31:34,400 INFO: Fetching task details for Task ID 395.
2025-03-13 20:31:34,409 INFO: Fetching task with ID 395.
2025-03-13 20:31:34,419 INFO: BEGIN (implicit)
2025-03-13 20:31:34,421 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:31:34,421 INFO: [cached since 1.016e+04s ago] {'pk_1': 395}
2025-03-13 20:31:34,424 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x109d5f950>, 'epic_priority': None, 'project_id': 7, 'id': 395, 'is_archived': False, 'contributor_id': 5, 'name': 'Side menu', 'completed': False, 'estimate_type': 'story_points', 'sort_order': 2, 'story_points': 0, 'completed_date': None, 'description': '<ul><li><p>Settings</p></li><li><p>Contributors</p></li><li><p>Company</p><ul><li><p>Goals</p><ul><li><p>OKR´s</p></li></ul></li><li><p>Sales</p></li><li><p>Financial (Rescricted access, (Super admin)</p></li><li><p>Market position</p></li><li><p>Market analysis</p></li><li><p>User metrics</p></li></ul></li><li><p>Projects</p></li><li><p></p></li></ul>', 'status': 'In Progress', 'time_estimate': None, 'parent_id': None, 'created_at': datetime.datetime(2025, 3, 5, 7, 43, 51, 220532), 'task_type': 'User Story', 'updated_at': datetime.datetime(2025, 3, 13, 13, 49, 27, 425658), 'priority': None}
2025-03-13 20:31:34,425 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:31:34,425 INFO: [cached since 1.016e+04s ago] {'pk_1': 7}
2025-03-13 20:31:34,427 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-13 20:31:34,427 INFO: [cached since 1.016e+04s ago] {'pk_1': 5}
2025-03-13 20:31:34,427 INFO: Task ID 395 fetched with parent ID: None
2025-03-13 20:31:34,427 INFO: Task with ID 395 fetched successfully.
2025-03-13 20:31:34,427 DEBUG: Fetched Task Data: {'id': 395, 'name': 'Side menu', 'description': '<ul><li><p>Settings</p></li><li><p>Contributors</p></li><li><p>Company</p><ul><li><p>Goals</p><ul><li><p>OKR´s</p></li></ul></li><li><p>Sales</p></li><li><p>Financial (Rescricted access, (Super admin)</p></li><li><p>Market position</p></li><li><p>Market analysis</p></li><li><p>User metrics</p></li></ul></li><li><p>Projects</p></li><li><p></p></li></ul>', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'estimate_type': 'story_points', 'estimate': 0, 'status': 'In Progress', 'sort_order': 2, 'created_at': '2025-03-05T07:43:51.220532', 'updated_at': '2025-03-13T13:49:27.425658', 'contributor_name': 'Fredrik Cederborg', 'parent': None}
2025-03-13 20:31:34,427 INFO: Task details fetched successfully for Task ID 395.
2025-03-13 20:31:34,428 INFO: ROLLBACK
2025-03-13 20:31:34,428 INFO: 127.0.0.1 - - [13/Mar/2025 20:31:34] "GET /api/tasks/395 HTTP/1.1" 200 -
2025-03-13 20:31:34,641 INFO: 127.0.0.1 - - [13/Mar/2025 20:31:34] "OPTIONS /tasks/available_tasks?task_type=User%20Story&exclude_task_id=395&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:31:34,643 INFO: BEGIN (implicit)
2025-03-13 20:31:34,647 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:31:34,652 INFO: [cached since 1.016e+04s ago] {'pk_1': 7}
2025-03-13 20:31:34,656 INFO: BEGIN (implicit)
2025-03-13 20:31:34,657 INFO: 127.0.0.1 - - [13/Mar/2025 20:31:34] "OPTIONS /tasks/available_tasks?task_type=User%20Story&exclude_task_id=395&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:31:34,659 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:31:34,660 INFO: Entering available_tasks route...
2025-03-13 20:31:34,661 INFO: [cached since 1.016e+04s ago] {'pk_1': 7}
2025-03-13 20:31:34,663 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:31:34,667 INFO: [cached since 1.016e+04s ago] {}
2025-03-13 20:31:34,666 DEBUG: Query parameters: task_type=User Story, exclude_task_id=395, search_term=, project_id=None, limit=30, page=1
2025-03-13 20:31:34,668 INFO: BEGIN (implicit)
2025-03-13 20:31:34,665 INFO: Entering available_tasks route...
2025-03-13 20:31:34,669 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:31:34,670 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:31:34,671 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:31:34,671 DEBUG: Query parameters: task_type=User Story, exclude_task_id=395, search_term=, project_id=None, limit=30, page=1
2025-03-13 20:31:34,671 INFO: [cached since 1.016e+04s ago] {'param_1': 7}
2025-03-13 20:31:34,671 INFO: [cached since 1.016e+04s ago] {'pk_1': 395}
2025-03-13 20:31:34,671 INFO: [cached since 1.016e+04s ago] {}
2025-03-13 20:31:34,673 INFO: BEGIN (implicit)
2025-03-13 20:31:34,674 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:31:34,675 INFO: [cached since 1.016e+04s ago] {'pk_1': 395}
2025-03-13 20:31:34,677 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:31:34,678 INFO: [cached since 1.016e+04s ago] {'param_1': 7}
2025-03-13 20:31:34,684 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:31:34,686 INFO: [cached since 1.016e+04s ago] {'param_1': 1}
2025-03-13 20:31:34,703 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 395, 'task_type': ['User Story']}
2025-03-13 20:31:34,704 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 395, 'task_type': ['User Story']}
2025-03-13 20:31:34,709 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:31:34,729 INFO: [cached since 1.016e+04s ago] {'param_1': 2}
2025-03-13 20:31:34,711 INFO: Validating hierarchy for Task N/A
2025-03-13 20:31:34,742 INFO: Determining valid parent types for task_type: User Story
2025-03-13 20:31:34,711 INFO: Validating hierarchy for Task N/A
2025-03-13 20:31:34,748 INFO: Determining valid parent types for task_type: User Story
2025-03-13 20:31:34,710 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:31:34,749 INFO: [cached since 1.016e+04s ago] {'param_1': 1}
2025-03-13 20:31:34,748 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 395, 'task_type': ['Epic']}
2025-03-13 20:31:34,748 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 395, 'task_type': ['Epic']}
2025-03-13 20:31:34,759 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:31:34,793 INFO: [cached since 1.016e+04s ago] {'param_1': 2}
2025-03-13 20:31:34,791 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-13 20:31:34,792 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-13 20:31:34,785 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:31:34,795 INFO: [cached since 1.016e+04s ago] {'param_1': 3}
2025-03-13 20:31:34,794 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-13 20:31:34,795 INFO: [cached since 9946s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-13 20:31:34,795 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:31:34,795 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-13 20:31:34,797 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:31:34,798 INFO: [cached since 1.016e+04s ago] {'param_1': 4}
2025-03-13 20:31:34,799 INFO: [cached since 9946s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-13 20:31:34,799 INFO: [cached since 1.016e+04s ago] {'param_1': 3}
2025-03-13 20:31:34,802 DEBUG: Tasks returned: [{'id': 430, 'name': 'No Epic', 'task_type': 'Epic', 'is_parent': False}, {'id': 393, 'name': 'List of ideas for new features, parameters to add', 'task_type': 'Epic', 'is_parent': False}, {'id': 327, 'name': '[UNIQUE feature] -\xa0Epic - AI-Powered PBI Refinement System', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 456, 'name': 'Search in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okr´s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notification system', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 459, 'name': '[RESEARCH] - Step 1: Mapping out what each file does', 'task_type': 'Epic', 'is_parent': False}, {'id': 432, 'name': 'Roadmap view', 'task_type': 'Epic', 'is_parent': False}, {'id': 392, 'name': 'UI / UX Improvements', 'task_type': 'Epic', 'is_parent': False}, {'id': 465, 'name': 'Building from Scratch vs.\xa0Replicating Each Feature', 'task_type': 'Epic', 'is_parent': False}, {'id': 424, 'name': '[ISSUES] - Current issues/bugs', 'task_type': 'Epic', 'is_parent': False}, {'id': 460, 'name': '[PLANNING] - Step 2: Architecture & Migration Planning', 'task_type': 'Epic', 'is_parent': False}, {'id': 462, 'name': '[MIGRATION] - high-level roadmap Step 1 - 7', 'task_type': 'Epic', 'is_parent': False}]
2025-03-13 20:31:34,804 INFO: ROLLBACK
2025-03-13 20:31:34,806 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:31:34,808 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:31:34,809 INFO: 127.0.0.1 - - [13/Mar/2025 20:31:34] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=395&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:31:34,811 DEBUG: Tasks returned: [{'id': 430, 'name': 'No Epic', 'task_type': 'Epic', 'is_parent': False}, {'id': 393, 'name': 'List of ideas for new features, parameters to add', 'task_type': 'Epic', 'is_parent': False}, {'id': 327, 'name': '[UNIQUE feature] -\xa0Epic - AI-Powered PBI Refinement System', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 456, 'name': 'Search in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okr´s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notification system', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 459, 'name': '[RESEARCH] - Step 1: Mapping out what each file does', 'task_type': 'Epic', 'is_parent': False}, {'id': 432, 'name': 'Roadmap view', 'task_type': 'Epic', 'is_parent': False}, {'id': 392, 'name': 'UI / UX Improvements', 'task_type': 'Epic', 'is_parent': False}, {'id': 465, 'name': 'Building from Scratch vs.\xa0Replicating Each Feature', 'task_type': 'Epic', 'is_parent': False}, {'id': 424, 'name': '[ISSUES] - Current issues/bugs', 'task_type': 'Epic', 'is_parent': False}, {'id': 460, 'name': '[PLANNING] - Step 2: Architecture & Migration Planning', 'task_type': 'Epic', 'is_parent': False}, {'id': 462, 'name': '[MIGRATION] - high-level roadmap Step 1 - 7', 'task_type': 'Epic', 'is_parent': False}]
2025-03-13 20:31:34,811 INFO: [cached since 1.016e+04s ago] {'param_1': 5}
2025-03-13 20:31:34,811 INFO: [cached since 1.016e+04s ago] {'param_1': 4}
2025-03-13 20:31:34,813 INFO: ROLLBACK
2025-03-13 20:31:34,866 INFO: ROLLBACK
2025-03-13 20:31:34,867 INFO: 127.0.0.1 - - [13/Mar/2025 20:31:34] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=395&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:31:35,036 INFO: 127.0.0.1 - - [13/Mar/2025 20:31:35] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:31:35,085 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:31:35,085 INFO: [cached since 1.016e+04s ago] {'param_1': 5}
2025-03-13 20:31:35,126 INFO: ROLLBACK
2025-03-13 20:31:35,161 INFO: 127.0.0.1 - - [13/Mar/2025 20:31:35] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:32:06,566 INFO: 127.0.0.1 - - [13/Mar/2025 20:32:06] "OPTIONS /api/tasks/395 HTTP/1.1" 200 -
2025-03-13 20:32:06,588 INFO: BEGIN (implicit)
2025-03-13 20:32:06,596 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:32:06,597 INFO: [cached since 1.019e+04s ago] {'pk_1': 395}
2025-03-13 20:32:06,603 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-13 20:32:06,603 INFO: [cached since 2812s ago] {'description': "<ul><li><p>`console.log('Hello, World!')`Settings</p></li><li><p>Contributors</p></li><li><p>Company</p><ul><li><p>Goals</p><ul><li><p>OKR´s</p></li> ... (86 characters truncated) ... /li><li><p>Market position</p></li><li><p>Market analysis</p></li><li><p>User metrics</p></li></ul></li><li><p>Projects</p></li><li><p></p></li></ul>", 'updated_at': datetime.datetime(2025, 3, 13, 19, 32, 6, 601160), 'task_id': 395}
2025-03-13 20:32:06,612 INFO: COMMIT
2025-03-13 20:32:06,616 INFO: Task ID 395 updated successfully. Updated fields: ['description']
2025-03-13 20:32:06,618 INFO: BEGIN (implicit)
2025-03-13 20:32:06,620 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:32:06,620 INFO: [cached since 2812s ago] {'pk_1': 395}
2025-03-13 20:32:06,625 INFO: ROLLBACK
2025-03-13 20:32:06,627 INFO: 127.0.0.1 - - [13/Mar/2025 20:32:06] "PATCH /api/tasks/395 HTTP/1.1" 200 -
2025-03-13 20:32:06,690 INFO: BEGIN (implicit)
2025-03-13 20:32:06,691 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:32:06,691 INFO: [cached since 1.019e+04s ago] {'pk_1': 7}
2025-03-13 20:32:06,695 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:32:06,696 INFO: [cached since 1.019e+04s ago] {}
2025-03-13 20:32:06,702 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:32:06,710 INFO: [cached since 1.019e+04s ago] {'param_1': 7}
2025-03-13 20:32:06,718 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:32:06,720 INFO: [cached since 1.019e+04s ago] {'param_1': 1}
2025-03-13 20:32:06,725 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:32:06,725 INFO: [cached since 1.019e+04s ago] {'param_1': 2}
2025-03-13 20:32:06,727 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:32:06,728 INFO: [cached since 1.019e+04s ago] {'param_1': 3}
2025-03-13 20:32:06,731 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:32:06,731 INFO: [cached since 1.019e+04s ago] {'param_1': 4}
2025-03-13 20:32:06,734 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:32:06,735 INFO: [cached since 1.019e+04s ago] {'param_1': 5}
2025-03-13 20:32:06,736 INFO: ROLLBACK
2025-03-13 20:32:06,737 INFO: 127.0.0.1 - - [13/Mar/2025 20:32:06] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:32:06,814 INFO: BEGIN (implicit)
2025-03-13 20:32:06,831 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:32:06,831 INFO: [cached since 1.019e+04s ago] {'pk_1': 7}
2025-03-13 20:32:06,863 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:32:06,863 INFO: [cached since 1.019e+04s ago] {}
2025-03-13 20:32:06,866 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:32:06,866 INFO: [cached since 1.019e+04s ago] {'param_1': 7}
2025-03-13 20:32:06,868 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:32:06,868 INFO: [cached since 1.019e+04s ago] {'param_1': 1}
2025-03-13 20:32:06,869 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:32:06,869 INFO: [cached since 1.019e+04s ago] {'param_1': 2}
2025-03-13 20:32:06,871 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:32:06,872 INFO: [cached since 1.019e+04s ago] {'param_1': 3}
2025-03-13 20:32:06,890 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:32:06,890 INFO: [cached since 1.019e+04s ago] {'param_1': 4}
2025-03-13 20:32:06,921 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:32:06,921 INFO: [cached since 1.019e+04s ago] {'param_1': 5}
2025-03-13 20:32:06,924 INFO: ROLLBACK
2025-03-13 20:32:06,926 INFO: 127.0.0.1 - - [13/Mar/2025 20:32:06] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:32:50,273 INFO: 127.0.0.1 - - [13/Mar/2025 20:32:50] "GET /socket.io/?EIO=4&transport=websocket&sid=Fb4eIsR50nka02ZmAABM HTTP/1.1" 200 -
2025-03-13 20:32:50,820 INFO: 127.0.0.1 - - [13/Mar/2025 20:32:50] "GET /socket.io/?EIO=4&transport=polling&t=qxmgl0pc HTTP/1.1" 200 -
2025-03-13 20:32:50,924 INFO: BEGIN (implicit)
2025-03-13 20:32:50,924 INFO: BEGIN (implicit)
2025-03-13 20:32:50,926 INFO: 127.0.0.1 - - [13/Mar/2025 20:32:50] "POST /socket.io/?EIO=4&transport=polling&t=qxmigx8g&sid=y47vIJlA87vi6-g4AABO HTTP/1.1" 200 -
2025-03-13 20:32:50,928 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:32:50,932 INFO: Entering list_tasks_json route...
2025-03-13 20:32:50,944 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 20:32:50,933 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 20:32:50,979 INFO: [cached since 1.024e+04s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 20:32:50,951 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 20:32:50,937 INFO: [cached since 1.024e+04s ago] {}
2025-03-13 20:32:50,980 INFO: 127.0.0.1 - - [13/Mar/2025 20:32:50] "GET /socket.io/?EIO=4&transport=polling&t=qxmii941&sid=y47vIJlA87vi6-g4AABO HTTP/1.1" 200 -
2025-03-13 20:32:50,979 INFO: BEGIN (implicit)
2025-03-13 20:32:51,009 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 20:32:51,009 INFO: [cached since 1.024e+04s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 20:32:50,997 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 20:32:51,016 INFO: ROLLBACK
2025-03-13 20:32:51,018 INFO: BEGIN (implicit)
2025-03-13 20:32:51,019 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 20:32:51,027 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:32:51,028 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 20:32:51,029 INFO: [cached since 1.024e+04s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 20:32:51,029 INFO: [cached since 1.024e+04s ago] {'param_1': 1}
2025-03-13 20:32:51,029 INFO: [cached since 1.024e+04s ago] {}
2025-03-13 20:32:51,031 INFO: 127.0.0.1 - - [13/Mar/2025 20:32:51] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 20:32:51,048 INFO: ROLLBACK
2025-03-13 20:32:51,051 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:32:51,051 INFO: [cached since 1.024e+04s ago] {'param_1': 2}
2025-03-13 20:32:51,053 INFO: BEGIN (implicit)
2025-03-13 20:32:51,054 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:32:51,054 INFO: [cached since 1.024e+04s ago] {'pk_1': 19}
2025-03-13 20:32:51,055 INFO: 127.0.0.1 - - [13/Mar/2025 20:32:51] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 20:32:51,058 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:32:51,058 INFO: [cached since 1.024e+04s ago] {'param_1': 3}
2025-03-13 20:32:51,062 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:32:51,062 INFO: [cached since 1.024e+04s ago] {}
2025-03-13 20:32:51,065 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:32:51,066 INFO: [cached since 1.024e+04s ago] {'param_1': 4}
2025-03-13 20:32:51,071 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:32:51,071 INFO: [cached since 1.024e+04s ago] {'param_1': 19}
2025-03-13 20:32:51,075 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:32:51,077 INFO: [cached since 1.024e+04s ago] {'param_1': 1}
2025-03-13 20:32:51,076 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:32:51,078 INFO: [cached since 1.024e+04s ago] {'param_1': 5}
2025-03-13 20:32:51,093 INFO: ROLLBACK
2025-03-13 20:32:51,094 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:32:51,094 INFO: 127.0.0.1 - - [13/Mar/2025 20:32:51] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 20:32:51,095 INFO: [cached since 1.024e+04s ago] {'param_1': 2}
2025-03-13 20:32:51,099 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:32:51,099 INFO: [cached since 1.024e+04s ago] {'param_1': 3}
2025-03-13 20:32:51,102 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:32:51,102 INFO: [cached since 1.024e+04s ago] {'param_1': 4}
2025-03-13 20:32:51,107 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:32:51,107 INFO: [cached since 1.024e+04s ago] {'param_1': 5}
2025-03-13 20:32:51,109 INFO: ROLLBACK
2025-03-13 20:32:51,109 INFO: 127.0.0.1 - - [13/Mar/2025 20:32:51] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:32:51,292 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 20:32:51,293 INFO: [cached since 1.024e+04s ago] {}
2025-03-13 20:32:51,298 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 20:32:51,298 INFO: [cached since 1.024e+04s ago] {}
2025-03-13 20:32:51,299 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 20:32:51,299 INFO: [cached since 1.024e+04s ago] {}
2025-03-13 20:32:51,310 INFO: ROLLBACK
2025-03-13 20:32:51,310 INFO: 127.0.0.1 - - [13/Mar/2025 20:32:51] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 20:32:55,165 INFO: Fetching task details for Task ID 430.
2025-03-13 20:32:55,173 INFO: Fetching task with ID 430.
2025-03-13 20:32:55,189 INFO: BEGIN (implicit)
2025-03-13 20:32:55,190 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:32:55,190 INFO: [cached since 1.024e+04s ago] {'pk_1': 430}
2025-03-13 20:32:55,194 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x109e2cb90>, 'epic_priority': None, 'project_id': 7, 'id': 430, 'is_archived': False, 'contributor_id': 5, 'name': 'No Epic', 'completed': False, 'estimate_type': 'story_points', 'sort_order': 0, 'story_points': 0, 'completed_date': None, 'description': '<p>`console.log(\'Hello, World!\')``console.log(\'Hello, World!\')`**bold text**&gt; This is a quoteTest contentTest contentCurrently we have Tiptap editor installed, but after doing some research it turns out it can get really expensive when scaling up if we want to use the extensions that we need.<br><br>Here´s a list of must have features.</p><ul><li><p>Drag handle</p></li><li><p>Toggles</p></li><li><p>Drop cursor</p></li><li><p>Code block</p></li><li><p></p></li></ul><p></p><p>What editor is notions editor built upon?</p><p>ChatGPT said:</p><p>Notion\'s editor is built upon <strong>ProseMirror</strong>, which is a highly extensible and customizable framework for building rich-text editors.</p><h3><strong>How Notion Uses ProseMirror</strong></h3><ol><li><p><strong>Block-Based Editing</strong> - Notion\'s document model is built around a block-based structure, which ProseMirror supports well.</p></li><li><p><strong>Collaborative Editing</strong> - Notion enhances ProseMirror with <strong>Operational Transforms (OT)</strong> or <strong>Conflict-Free Replicated Data Types (CRDTs)</strong> for real-time multi-user collaboration.</p></li><li><p><strong>Custom Extensions</strong> - Notion extends ProseMirror to support embedded content, database-like properties, and advanced block manipulation.</p></li><li><p><strong>Rich Formatting</strong> - ProseMirror provides the foundation for text styles, lists, code blocks, and interactive widgets.</p></li></ol><h3><strong>Alternatives to ProseMirror</strong></h3><p>Notion could have used:</p><ul><li><p><strong>Tiptap</strong> (a framework built on ProseMirror, similar to what you\'re using)</p></li><li><p><strong>Slate.js</strong> (another powerful rich-text editor framework)</p></li><li><p><strong>Lexical</strong> (Meta/Facebook\'s modern take on rich-text editing)</p></li></ul><p>Since you\'re working with <strong>Tiptap (which is based on ProseMirror)</strong>, you are already using something similar to Notion’s approach! 🚀</p><p>You said:</p><p>Is Lexical free?</p><p>ChatGPT said:</p><p>Yes, <strong>Lexical</strong> is completely <strong>free</strong> and <strong>open-source</strong>! 🚀</p><h3><strong>License &amp; Cost</strong></h3><ul><li><p><strong>Lexical</strong> is released under the <strong>MIT license</strong>, which means you can use, modify, and distribute it freely for both <strong>personal</strong> and <strong>commercial</strong> projects <strong>without restrictions</strong>.</p></li><li><p>You don’t need to pay for it, and it has no hidden fees or licensing issues.</p></li></ul><h3><strong>Where to Get Lexical?</strong></h3><ul><li><p><strong>GitHub</strong>: <a target="_blank" rel="noopener noreferrer" href="https://github.com/facebook/lexical">https://github.com/facebook/lexical</a></p></li><li><p><strong>Official Website</strong>: <a target="_blank" rel="noopener noreferrer" href="https://lexical.dev/">https://lexical.dev/</a></p></li></ul><h3><strong>Why Use Lexical?</strong></h3><ul><li><p><strong>Ultra-lightweight &amp; fast</strong> ⚡</p></li><li><p><strong>Better performance than ProseMirror or Slate.js</strong></p></li><li><p><strong>Modular and Extensible</strong></p></li><li><p><strong>Supports collaborative editing</strong></p></li><li><p><strong>Backed by Meta (Facebook)</strong></p></li></ul><p>If you\'re looking for a <strong>modern</strong>, <strong>efficient</strong>, and <strong>free</strong> alternative to ProseMirror/Tiptap, <strong>Lexical is a great choice!</strong> 🚀</p><p>You said:</p><p>If I understand it correctly TipTap can get quite expensive when scaling</p><p>ChatGPT said:</p><p>Yes, you’re right! <strong>Tiptap can become expensive at scale</strong>, depending on your use case. Here’s why:</p><h3><strong>1️⃣ The Core Tiptap Editor is Free</strong></h3><ul><li><p><strong>Tiptap itself is open-source</strong> and free to use under the MIT license.</p></li><li><p>It’s built on <strong>ProseMirror</strong>, which is also open-source.</p></li><li><p>You can self-host and use it without paying a cent.</p></li></ul><h3><strong>2️⃣ The Cost Comes from Tiptap Collaboration &amp; Cloud Services</strong></h3><p>Tiptap offers <strong>paid services</strong> that can get expensive as your usage scales:</p><ol><li><p><strong>Tiptap Collaboration Server (Hocuspocus)</strong></p><ul><li><p>Used for <strong>real-time collaboration</strong> (like Google Docs-style editing).</p></li><li><p>Free for self-hosting, <strong>but</strong>:</p><ul><li><p>You need to manage the infrastructure yourself.</p></li><li><p>If you use their hosted version, costs scale with users.</p></li></ul></li></ul></li><li><p><strong>Tiptap AI (Paid)</strong></p><ul><li><p>If you integrate AI-powered features (like text completion, summarization), you’ll pay usage-based fees.</p></li></ul></li><li><p><strong>Tiptap Cloud (Paid)</strong></p><ul><li><p>Managed hosting for Tiptap-related services.</p></li><li><p>Pricing varies based on API calls and storage.</p></li></ul></li></ol><h3><strong>3️⃣ Hidden Scaling Costs</strong></h3><ul><li><p><strong>Hosting a ProseMirror-based editor like Tiptap requires a powerful backend</strong> for real-time editing &amp; syncing.</p></li><li><p><strong>If you handle large concurrent users, database read/writes &amp; WebSocket connections increase infrastructure costs.</strong></p></li><li><p><strong>Custom extensions</strong> (if you develop them in-house) require engineering time &amp; maintenance.</p></li></ul><h3><strong>Alternatives That May Scale Better</strong></h3><ul><li><p><strong>Lexical (by Meta)</strong> 🆓 – Lighter &amp; built for performance.</p></li><li><p><strong>Slate.js</strong> 🆓 – Fully customizable but less feature-rich.</p></li><li><p><strong>Quill.js</strong> 🆓 – Great for simple use cases.</p></li></ul><h3><strong>Final Verdict</strong></h3><p>If you’re just using <strong>basic rich text editing</strong>, Tiptap is free and great. 🚀<br>But if you need <strong>real-time collaboration or AI features</strong>, it can get <strong>expensive</strong> as you scale.</p><p>Would you like recommendations on how to <strong>reduce scaling costs</strong> with Tiptap?</p><p>You said:</p><p>Yes</p><p>ChatGPT said:</p><h3><strong>How to Reduce Scaling Costs with Tiptap 🚀</strong></h3><p>If you\'re using Tiptap (or considering it) and want to <strong>keep costs low while scaling</strong>, here’s how you can do it.</p><hr><h2><strong>1️⃣ Self-Host Instead of Using Tiptap Cloud</strong></h2><p>Tiptap provides <strong>Tiptap Cloud</strong> as a hosted service, but this can get expensive at scale. Instead:</p><ul><li><p><strong>Self-host</strong> the key components instead of paying for managed services.</p></li><li><p>You’ll need to set up:</p><ul><li><p><strong>Tiptap Core</strong> (Free, MIT license)</p></li><li><p><strong>ProseMirror</strong> (Tiptap is built on it, also free)</p></li><li><p><strong>Hocuspocus (Collaboration Server)</strong> – Instead of paying Tiptap for real-time editing, host it yourself on <strong>a cheap VPS like DigitalOcean or AWS Lightsail</strong>.</p></li></ul></li></ul><p>📌 <strong>Guide</strong>: Self-hosting Hocuspocus</p><p><strong>💰 Potential Savings</strong>: No per-user fees, just hosting costs.</p><hr><h2><strong>2️⃣ Optimize WebSocket &amp; Real-Time Editing Costs</strong></h2><p>Real-time collaboration (like Google Docs-style editing) <strong>increases server load</strong> due to WebSocket connections.</p><ul><li><p><strong>Host Hocuspocus on a scalable infrastructure</strong> (Kubernetes, AWS ECS).</p></li><li><p><strong>Use Redis or PostgreSQL for persistence</strong> instead of in-memory storage.</p></li><li><p><strong>Limit real-time sync to active users only</strong> (disconnect inactive users).</p></li></ul><p><strong>💰 Potential Savings</strong>: Lower WebSocket usage = less server load.</p><hr><h2><strong>3️⃣ Avoid Tiptap AI (Use Open-Source AI)</strong></h2><p>Tiptap offers <strong>AI-powered suggestions, summarization, and completions</strong>, but they charge based on API usage. Instead:</p><ul><li><p><strong>Use open-source LLMs like GPT-4-All, Mistral, or Ollama</strong> instead of Tiptap AI.</p></li><li><p><strong>Host AI models yourself</strong> with Hugging Face models or OpenAI API proxies.</p></li></ul><p><strong>💰 Potential Savings</strong>: No per-token AI fees.</p><hr><h2><strong>4️⃣ Optimize Frontend Performance</strong></h2><p>Tiptap loads many dependencies, which <strong>increase bundle size</strong>. Reduce costs by:</p><ul><li><p><strong>Lazy-loading extensions</strong> (only load features users need).</p></li><li><p><strong>Tree-shaking unused dependencies</strong>.</p></li><li><p><strong>Using a CDN</strong> to serve assets (reduces direct server load).</p></li></ul><p><strong>💰 Potential Savings</strong>: Lower hosting and bandwidth costs.</p><hr><h2><strong>5️⃣ Alternative Open-Source Editors (If You Outgrow Tiptap)</strong></h2><p>If Tiptap costs <strong>too much</strong>, you can consider:</p><ul><li><p><strong>Lexical (by Meta)</strong> – Free, ultra-lightweight, great for scaling.</p></li><li><p><strong>Slate.js</strong> – Flexible and customizable.</p></li><li><p><strong>Quill.js</strong> – Good for simpler use cases.</p></li></ul><hr><h3><strong>📌 Final Takeaway</strong></h3><p>If you’re using <strong>Tiptap for rich text only</strong>, it’s free.<br>But if you <strong>need real-time collaboration, AI, or cloud services</strong>, follow these tips to <strong>reduce costs</strong> and <strong>scale efficiently</strong>.</p><p>Would you like help setting up <strong>self-hosted Hocuspocus</strong> or <strong>AI alternatives</strong>? 🚀</p>', 'status': 'Not Started', 'time_estimate': None, 'parent_id': None, 'created_at': datetime.datetime(2025, 3, 5, 17, 10, 57, 543053), 'task_type': 'Epic', 'updated_at': datetime.datetime(2025, 3, 13, 12, 46, 58, 641501), 'priority': None}
2025-03-13 20:32:55,196 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:32:55,197 INFO: [cached since 1.024e+04s ago] {'pk_1': 7}
2025-03-13 20:32:55,198 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-13 20:32:55,198 INFO: [cached since 1.024e+04s ago] {'pk_1': 5}
2025-03-13 20:32:55,199 INFO: Task ID 430 fetched with parent ID: None
2025-03-13 20:32:55,199 INFO: Task with ID 430 fetched successfully.
2025-03-13 20:32:55,199 DEBUG: Fetched Task Data: {'id': 430, 'name': 'No Epic', 'description': '<p>`console.log(\'Hello, World!\')``console.log(\'Hello, World!\')`**bold text**&gt; This is a quoteTest contentTest contentCurrently we have Tiptap editor installed, but after doing some research it turns out it can get really expensive when scaling up if we want to use the extensions that we need.<br><br>Here´s a list of must have features.</p><ul><li><p>Drag handle</p></li><li><p>Toggles</p></li><li><p>Drop cursor</p></li><li><p>Code block</p></li><li><p></p></li></ul><p></p><p>What editor is notions editor built upon?</p><p>ChatGPT said:</p><p>Notion\'s editor is built upon <strong>ProseMirror</strong>, which is a highly extensible and customizable framework for building rich-text editors.</p><h3><strong>How Notion Uses ProseMirror</strong></h3><ol><li><p><strong>Block-Based Editing</strong> - Notion\'s document model is built around a block-based structure, which ProseMirror supports well.</p></li><li><p><strong>Collaborative Editing</strong> - Notion enhances ProseMirror with <strong>Operational Transforms (OT)</strong> or <strong>Conflict-Free Replicated Data Types (CRDTs)</strong> for real-time multi-user collaboration.</p></li><li><p><strong>Custom Extensions</strong> - Notion extends ProseMirror to support embedded content, database-like properties, and advanced block manipulation.</p></li><li><p><strong>Rich Formatting</strong> - ProseMirror provides the foundation for text styles, lists, code blocks, and interactive widgets.</p></li></ol><h3><strong>Alternatives to ProseMirror</strong></h3><p>Notion could have used:</p><ul><li><p><strong>Tiptap</strong> (a framework built on ProseMirror, similar to what you\'re using)</p></li><li><p><strong>Slate.js</strong> (another powerful rich-text editor framework)</p></li><li><p><strong>Lexical</strong> (Meta/Facebook\'s modern take on rich-text editing)</p></li></ul><p>Since you\'re working with <strong>Tiptap (which is based on ProseMirror)</strong>, you are already using something similar to Notion’s approach! 🚀</p><p>You said:</p><p>Is Lexical free?</p><p>ChatGPT said:</p><p>Yes, <strong>Lexical</strong> is completely <strong>free</strong> and <strong>open-source</strong>! 🚀</p><h3><strong>License &amp; Cost</strong></h3><ul><li><p><strong>Lexical</strong> is released under the <strong>MIT license</strong>, which means you can use, modify, and distribute it freely for both <strong>personal</strong> and <strong>commercial</strong> projects <strong>without restrictions</strong>.</p></li><li><p>You don’t need to pay for it, and it has no hidden fees or licensing issues.</p></li></ul><h3><strong>Where to Get Lexical?</strong></h3><ul><li><p><strong>GitHub</strong>: <a target="_blank" rel="noopener noreferrer" href="https://github.com/facebook/lexical">https://github.com/facebook/lexical</a></p></li><li><p><strong>Official Website</strong>: <a target="_blank" rel="noopener noreferrer" href="https://lexical.dev/">https://lexical.dev/</a></p></li></ul><h3><strong>Why Use Lexical?</strong></h3><ul><li><p><strong>Ultra-lightweight &amp; fast</strong> ⚡</p></li><li><p><strong>Better performance than ProseMirror or Slate.js</strong></p></li><li><p><strong>Modular and Extensible</strong></p></li><li><p><strong>Supports collaborative editing</strong></p></li><li><p><strong>Backed by Meta (Facebook)</strong></p></li></ul><p>If you\'re looking for a <strong>modern</strong>, <strong>efficient</strong>, and <strong>free</strong> alternative to ProseMirror/Tiptap, <strong>Lexical is a great choice!</strong> 🚀</p><p>You said:</p><p>If I understand it correctly TipTap can get quite expensive when scaling</p><p>ChatGPT said:</p><p>Yes, you’re right! <strong>Tiptap can become expensive at scale</strong>, depending on your use case. Here’s why:</p><h3><strong>1️⃣ The Core Tiptap Editor is Free</strong></h3><ul><li><p><strong>Tiptap itself is open-source</strong> and free to use under the MIT license.</p></li><li><p>It’s built on <strong>ProseMirror</strong>, which is also open-source.</p></li><li><p>You can self-host and use it without paying a cent.</p></li></ul><h3><strong>2️⃣ The Cost Comes from Tiptap Collaboration &amp; Cloud Services</strong></h3><p>Tiptap offers <strong>paid services</strong> that can get expensive as your usage scales:</p><ol><li><p><strong>Tiptap Collaboration Server (Hocuspocus)</strong></p><ul><li><p>Used for <strong>real-time collaboration</strong> (like Google Docs-style editing).</p></li><li><p>Free for self-hosting, <strong>but</strong>:</p><ul><li><p>You need to manage the infrastructure yourself.</p></li><li><p>If you use their hosted version, costs scale with users.</p></li></ul></li></ul></li><li><p><strong>Tiptap AI (Paid)</strong></p><ul><li><p>If you integrate AI-powered features (like text completion, summarization), you’ll pay usage-based fees.</p></li></ul></li><li><p><strong>Tiptap Cloud (Paid)</strong></p><ul><li><p>Managed hosting for Tiptap-related services.</p></li><li><p>Pricing varies based on API calls and storage.</p></li></ul></li></ol><h3><strong>3️⃣ Hidden Scaling Costs</strong></h3><ul><li><p><strong>Hosting a ProseMirror-based editor like Tiptap requires a powerful backend</strong> for real-time editing &amp; syncing.</p></li><li><p><strong>If you handle large concurrent users, database read/writes &amp; WebSocket connections increase infrastructure costs.</strong></p></li><li><p><strong>Custom extensions</strong> (if you develop them in-house) require engineering time &amp; maintenance.</p></li></ul><h3><strong>Alternatives That May Scale Better</strong></h3><ul><li><p><strong>Lexical (by Meta)</strong> 🆓 – Lighter &amp; built for performance.</p></li><li><p><strong>Slate.js</strong> 🆓 – Fully customizable but less feature-rich.</p></li><li><p><strong>Quill.js</strong> 🆓 – Great for simple use cases.</p></li></ul><h3><strong>Final Verdict</strong></h3><p>If you’re just using <strong>basic rich text editing</strong>, Tiptap is free and great. 🚀<br>But if you need <strong>real-time collaboration or AI features</strong>, it can get <strong>expensive</strong> as you scale.</p><p>Would you like recommendations on how to <strong>reduce scaling costs</strong> with Tiptap?</p><p>You said:</p><p>Yes</p><p>ChatGPT said:</p><h3><strong>How to Reduce Scaling Costs with Tiptap 🚀</strong></h3><p>If you\'re using Tiptap (or considering it) and want to <strong>keep costs low while scaling</strong>, here’s how you can do it.</p><hr><h2><strong>1️⃣ Self-Host Instead of Using Tiptap Cloud</strong></h2><p>Tiptap provides <strong>Tiptap Cloud</strong> as a hosted service, but this can get expensive at scale. Instead:</p><ul><li><p><strong>Self-host</strong> the key components instead of paying for managed services.</p></li><li><p>You’ll need to set up:</p><ul><li><p><strong>Tiptap Core</strong> (Free, MIT license)</p></li><li><p><strong>ProseMirror</strong> (Tiptap is built on it, also free)</p></li><li><p><strong>Hocuspocus (Collaboration Server)</strong> – Instead of paying Tiptap for real-time editing, host it yourself on <strong>a cheap VPS like DigitalOcean or AWS Lightsail</strong>.</p></li></ul></li></ul><p>📌 <strong>Guide</strong>: Self-hosting Hocuspocus</p><p><strong>💰 Potential Savings</strong>: No per-user fees, just hosting costs.</p><hr><h2><strong>2️⃣ Optimize WebSocket &amp; Real-Time Editing Costs</strong></h2><p>Real-time collaboration (like Google Docs-style editing) <strong>increases server load</strong> due to WebSocket connections.</p><ul><li><p><strong>Host Hocuspocus on a scalable infrastructure</strong> (Kubernetes, AWS ECS).</p></li><li><p><strong>Use Redis or PostgreSQL for persistence</strong> instead of in-memory storage.</p></li><li><p><strong>Limit real-time sync to active users only</strong> (disconnect inactive users).</p></li></ul><p><strong>💰 Potential Savings</strong>: Lower WebSocket usage = less server load.</p><hr><h2><strong>3️⃣ Avoid Tiptap AI (Use Open-Source AI)</strong></h2><p>Tiptap offers <strong>AI-powered suggestions, summarization, and completions</strong>, but they charge based on API usage. Instead:</p><ul><li><p><strong>Use open-source LLMs like GPT-4-All, Mistral, or Ollama</strong> instead of Tiptap AI.</p></li><li><p><strong>Host AI models yourself</strong> with Hugging Face models or OpenAI API proxies.</p></li></ul><p><strong>💰 Potential Savings</strong>: No per-token AI fees.</p><hr><h2><strong>4️⃣ Optimize Frontend Performance</strong></h2><p>Tiptap loads many dependencies, which <strong>increase bundle size</strong>. Reduce costs by:</p><ul><li><p><strong>Lazy-loading extensions</strong> (only load features users need).</p></li><li><p><strong>Tree-shaking unused dependencies</strong>.</p></li><li><p><strong>Using a CDN</strong> to serve assets (reduces direct server load).</p></li></ul><p><strong>💰 Potential Savings</strong>: Lower hosting and bandwidth costs.</p><hr><h2><strong>5️⃣ Alternative Open-Source Editors (If You Outgrow Tiptap)</strong></h2><p>If Tiptap costs <strong>too much</strong>, you can consider:</p><ul><li><p><strong>Lexical (by Meta)</strong> – Free, ultra-lightweight, great for scaling.</p></li><li><p><strong>Slate.js</strong> – Flexible and customizable.</p></li><li><p><strong>Quill.js</strong> – Good for simpler use cases.</p></li></ul><hr><h3><strong>📌 Final Takeaway</strong></h3><p>If you’re using <strong>Tiptap for rich text only</strong>, it’s free.<br>But if you <strong>need real-time collaboration, AI, or cloud services</strong>, follow these tips to <strong>reduce costs</strong> and <strong>scale efficiently</strong>.</p><p>Would you like help setting up <strong>self-hosted Hocuspocus</strong> or <strong>AI alternatives</strong>? 🚀</p>', 'task_type': 'Epic', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'estimate_type': 'story_points', 'estimate': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-03-05T17:10:57.543053', 'updated_at': '2025-03-13T12:46:58.641501', 'contributor_name': 'Fredrik Cederborg', 'parent': None}
2025-03-13 20:32:55,209 INFO: Task details fetched successfully for Task ID 430.
2025-03-13 20:32:55,240 INFO: ROLLBACK
2025-03-13 20:32:55,241 INFO: 127.0.0.1 - - [13/Mar/2025 20:32:55] "GET /api/tasks/430 HTTP/1.1" 200 -
2025-03-13 20:32:55,474 INFO: 127.0.0.1 - - [13/Mar/2025 20:32:55] "OPTIONS /tasks/available_tasks?task_type=Epic&exclude_task_id=430&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:32:55,480 INFO: BEGIN (implicit)
2025-03-13 20:32:55,489 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:32:55,494 INFO: [cached since 1.024e+04s ago] {'pk_1': 7}
2025-03-13 20:32:55,493 INFO: 127.0.0.1 - - [13/Mar/2025 20:32:55] "OPTIONS /tasks/available_tasks?task_type=Epic&exclude_task_id=430&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:32:55,500 INFO: BEGIN (implicit)
2025-03-13 20:32:55,501 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:32:55,501 INFO: [cached since 1.024e+04s ago] {'pk_1': 7}
2025-03-13 20:32:55,503 INFO: Entering available_tasks route...
2025-03-13 20:32:55,504 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:32:55,507 INFO: [cached since 1.024e+04s ago] {}
2025-03-13 20:32:55,506 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:32:55,508 INFO: [cached since 1.024e+04s ago] {}
2025-03-13 20:32:55,505 DEBUG: Query parameters: task_type=Epic, exclude_task_id=430, search_term=, project_id=None, limit=30, page=1
2025-03-13 20:32:55,507 INFO: Entering available_tasks route...
2025-03-13 20:32:55,508 INFO: BEGIN (implicit)
2025-03-13 20:32:55,509 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:32:55,510 DEBUG: Query parameters: task_type=Epic, exclude_task_id=430, search_term=, project_id=None, limit=30, page=1
2025-03-13 20:32:55,510 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:32:55,510 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:32:55,511 INFO: [cached since 1.024e+04s ago] {'param_1': 7}
2025-03-13 20:32:55,511 INFO: BEGIN (implicit)
2025-03-13 20:32:55,511 INFO: [cached since 1.024e+04s ago] {'pk_1': 430}
2025-03-13 20:32:55,510 INFO: [cached since 1.024e+04s ago] {'param_1': 7}
2025-03-13 20:32:55,512 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:32:55,515 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:32:55,517 INFO: [cached since 1.024e+04s ago] {'param_1': 1}
2025-03-13 20:32:55,516 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:32:55,517 INFO: [cached since 1.024e+04s ago] {'param_1': 1}
2025-03-13 20:32:55,517 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 430, 'task_type': ['Epic']}
2025-03-13 20:32:55,515 INFO: [cached since 1.024e+04s ago] {'pk_1': 430}
2025-03-13 20:32:55,517 INFO: Validating hierarchy for Task N/A
2025-03-13 20:32:55,518 INFO: Determining valid parent types for task_type: Epic
2025-03-13 20:32:55,518 INFO: No valid parents found for task_type: Epic
2025-03-13 20:32:55,518 INFO: ROLLBACK
2025-03-13 20:32:55,522 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:32:55,523 INFO: [cached since 1.024e+04s ago] {'param_1': 2}
2025-03-13 20:32:55,523 INFO: 127.0.0.1 - - [13/Mar/2025 20:32:55] "GET /tasks/available_tasks?task_type=Epic&exclude_task_id=430&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:32:55,523 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:32:55,524 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 430, 'task_type': ['Epic']}
2025-03-13 20:32:55,524 INFO: [cached since 1.024e+04s ago] {'param_1': 2}
2025-03-13 20:32:55,525 INFO: Validating hierarchy for Task N/A
2025-03-13 20:32:55,526 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:32:55,527 INFO: Determining valid parent types for task_type: Epic
2025-03-13 20:32:55,527 INFO: [cached since 1.024e+04s ago] {'param_1': 3}
2025-03-13 20:32:55,527 INFO: No valid parents found for task_type: Epic
2025-03-13 20:32:55,527 INFO: ROLLBACK
2025-03-13 20:32:55,528 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:32:55,529 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:32:55,529 INFO: 127.0.0.1 - - [13/Mar/2025 20:32:55] "GET /tasks/available_tasks?task_type=Epic&exclude_task_id=430&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:32:55,530 INFO: [cached since 1.024e+04s ago] {'param_1': 3}
2025-03-13 20:32:55,530 INFO: [cached since 1.024e+04s ago] {'param_1': 4}
2025-03-13 20:32:55,536 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:32:55,537 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:32:55,538 INFO: [cached since 1.024e+04s ago] {'param_1': 5}
2025-03-13 20:32:55,537 INFO: [cached since 1.024e+04s ago] {'param_1': 4}
2025-03-13 20:32:55,539 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:32:55,539 INFO: ROLLBACK
2025-03-13 20:32:55,540 INFO: [cached since 1.024e+04s ago] {'param_1': 5}
2025-03-13 20:32:55,540 INFO: 127.0.0.1 - - [13/Mar/2025 20:32:55] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:32:55,541 INFO: ROLLBACK
2025-03-13 20:32:55,542 INFO: 127.0.0.1 - - [13/Mar/2025 20:32:55] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:34:59,584 INFO: 127.0.0.1 - - [13/Mar/2025 20:34:59] "GET /socket.io/?EIO=4&transport=websocket&sid=y47vIJlA87vi6-g4AABO HTTP/1.1" 200 -
2025-03-13 20:35:01,335 INFO: 127.0.0.1 - - [13/Mar/2025 20:35:01] "GET /socket.io/?EIO=4&transport=polling&t=r0f1ti7p HTTP/1.1" 200 -
2025-03-13 20:35:01,348 INFO: BEGIN (implicit)
2025-03-13 20:35:01,352 INFO: Entering list_tasks_json route...
2025-03-13 20:35:01,356 INFO: BEGIN (implicit)
2025-03-13 20:35:01,385 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 20:35:01,385 INFO: [cached since 1.037e+04s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 20:35:01,378 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 20:35:01,384 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 20:35:01,387 INFO: [cached since 1.037e+04s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 20:35:01,387 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 20:35:01,389 INFO: 127.0.0.1 - - [13/Mar/2025 20:35:01] "POST /socket.io/?EIO=4&transport=polling&t=r0f7372j&sid=alHajInnRiZZRxeBAABQ HTTP/1.1" 200 -
2025-03-13 20:35:01,446 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 20:35:01,452 INFO: [cached since 1.037e+04s ago] {}
2025-03-13 20:35:01,449 INFO: ROLLBACK
2025-03-13 20:35:01,452 INFO: 127.0.0.1 - - [13/Mar/2025 20:35:01] "GET /socket.io/?EIO=4&transport=polling&t=r0f75vap&sid=alHajInnRiZZRxeBAABQ HTTP/1.1" 200 -
2025-03-13 20:35:01,466 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 20:35:01,452 INFO: BEGIN (implicit)
2025-03-13 20:35:01,475 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:35:01,475 INFO: [cached since 1.037e+04s ago] {}
2025-03-13 20:35:01,467 INFO: ROLLBACK
2025-03-13 20:35:01,473 INFO: 127.0.0.1 - - [13/Mar/2025 20:35:01] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 20:35:01,474 INFO: BEGIN (implicit)
2025-03-13 20:35:01,482 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 20:35:01,483 INFO: 127.0.0.1 - - [13/Mar/2025 20:35:01] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 20:35:01,492 INFO: [cached since 1.037e+04s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 20:35:01,504 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:35:01,506 INFO: [cached since 1.037e+04s ago] {'param_1': 1}
2025-03-13 20:35:01,518 INFO: BEGIN (implicit)
2025-03-13 20:35:01,518 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:35:01,518 INFO: [cached since 1.037e+04s ago] {'pk_1': 19}
2025-03-13 20:35:01,520 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:35:01,520 INFO: [cached since 1.037e+04s ago] {'param_1': 2}
2025-03-13 20:35:01,569 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:35:01,569 INFO: [cached since 1.037e+04s ago] {'param_1': 3}
2025-03-13 20:35:01,692 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:35:01,692 INFO: [cached since 1.037e+04s ago] {}
2025-03-13 20:35:01,695 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:35:01,695 INFO: [cached since 1.037e+04s ago] {'param_1': 4}
2025-03-13 20:35:01,701 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:35:01,703 INFO: [cached since 1.037e+04s ago] {'param_1': 19}
2025-03-13 20:35:01,708 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:35:01,708 INFO: [cached since 1.037e+04s ago] {'param_1': 5}
2025-03-13 20:35:01,714 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:35:01,716 INFO: ROLLBACK
2025-03-13 20:35:01,716 INFO: [cached since 1.037e+04s ago] {'param_1': 1}
2025-03-13 20:35:01,719 INFO: 127.0.0.1 - - [13/Mar/2025 20:35:01] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 20:35:01,790 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:35:01,791 INFO: [cached since 1.037e+04s ago] {'param_1': 2}
2025-03-13 20:35:01,806 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:35:01,807 INFO: [cached since 1.037e+04s ago] {'param_1': 3}
2025-03-13 20:35:01,810 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:35:01,810 INFO: [cached since 1.037e+04s ago] {'param_1': 4}
2025-03-13 20:35:01,812 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:35:01,812 INFO: [cached since 1.037e+04s ago] {'param_1': 5}
2025-03-13 20:35:01,814 INFO: ROLLBACK
2025-03-13 20:35:01,815 INFO: 127.0.0.1 - - [13/Mar/2025 20:35:01] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:35:02,153 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 20:35:02,153 INFO: [cached since 1.037e+04s ago] {}
2025-03-13 20:35:02,156 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 20:35:02,156 INFO: [cached since 1.037e+04s ago] {}
2025-03-13 20:35:02,159 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 20:35:02,159 INFO: [cached since 1.037e+04s ago] {}
2025-03-13 20:35:02,173 INFO: ROLLBACK
2025-03-13 20:35:02,173 INFO: 127.0.0.1 - - [13/Mar/2025 20:35:02] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 20:35:11,148 INFO: Fetching task details for Task ID 430.
2025-03-13 20:35:11,149 INFO: Fetching task with ID 430.
2025-03-13 20:35:11,151 INFO: BEGIN (implicit)
2025-03-13 20:35:11,152 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:35:11,152 INFO: [cached since 1.038e+04s ago] {'pk_1': 430}
2025-03-13 20:35:11,158 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x109e2ca70>, 'epic_priority': None, 'project_id': 7, 'id': 430, 'is_archived': False, 'contributor_id': 5, 'name': 'No Epic', 'completed': False, 'estimate_type': 'story_points', 'sort_order': 0, 'story_points': 0, 'completed_date': None, 'description': '<p>`console.log(\'Hello, World!\')``console.log(\'Hello, World!\')`**bold text**&gt; This is a quoteTest contentTest contentCurrently we have Tiptap editor installed, but after doing some research it turns out it can get really expensive when scaling up if we want to use the extensions that we need.<br><br>Here´s a list of must have features.</p><ul><li><p>Drag handle</p></li><li><p>Toggles</p></li><li><p>Drop cursor</p></li><li><p>Code block</p></li><li><p></p></li></ul><p></p><p>What editor is notions editor built upon?</p><p>ChatGPT said:</p><p>Notion\'s editor is built upon <strong>ProseMirror</strong>, which is a highly extensible and customizable framework for building rich-text editors.</p><h3><strong>How Notion Uses ProseMirror</strong></h3><ol><li><p><strong>Block-Based Editing</strong> - Notion\'s document model is built around a block-based structure, which ProseMirror supports well.</p></li><li><p><strong>Collaborative Editing</strong> - Notion enhances ProseMirror with <strong>Operational Transforms (OT)</strong> or <strong>Conflict-Free Replicated Data Types (CRDTs)</strong> for real-time multi-user collaboration.</p></li><li><p><strong>Custom Extensions</strong> - Notion extends ProseMirror to support embedded content, database-like properties, and advanced block manipulation.</p></li><li><p><strong>Rich Formatting</strong> - ProseMirror provides the foundation for text styles, lists, code blocks, and interactive widgets.</p></li></ol><h3><strong>Alternatives to ProseMirror</strong></h3><p>Notion could have used:</p><ul><li><p><strong>Tiptap</strong> (a framework built on ProseMirror, similar to what you\'re using)</p></li><li><p><strong>Slate.js</strong> (another powerful rich-text editor framework)</p></li><li><p><strong>Lexical</strong> (Meta/Facebook\'s modern take on rich-text editing)</p></li></ul><p>Since you\'re working with <strong>Tiptap (which is based on ProseMirror)</strong>, you are already using something similar to Notion’s approach! 🚀</p><p>You said:</p><p>Is Lexical free?</p><p>ChatGPT said:</p><p>Yes, <strong>Lexical</strong> is completely <strong>free</strong> and <strong>open-source</strong>! 🚀</p><h3><strong>License &amp; Cost</strong></h3><ul><li><p><strong>Lexical</strong> is released under the <strong>MIT license</strong>, which means you can use, modify, and distribute it freely for both <strong>personal</strong> and <strong>commercial</strong> projects <strong>without restrictions</strong>.</p></li><li><p>You don’t need to pay for it, and it has no hidden fees or licensing issues.</p></li></ul><h3><strong>Where to Get Lexical?</strong></h3><ul><li><p><strong>GitHub</strong>: <a target="_blank" rel="noopener noreferrer" href="https://github.com/facebook/lexical">https://github.com/facebook/lexical</a></p></li><li><p><strong>Official Website</strong>: <a target="_blank" rel="noopener noreferrer" href="https://lexical.dev/">https://lexical.dev/</a></p></li></ul><h3><strong>Why Use Lexical?</strong></h3><ul><li><p><strong>Ultra-lightweight &amp; fast</strong> ⚡</p></li><li><p><strong>Better performance than ProseMirror or Slate.js</strong></p></li><li><p><strong>Modular and Extensible</strong></p></li><li><p><strong>Supports collaborative editing</strong></p></li><li><p><strong>Backed by Meta (Facebook)</strong></p></li></ul><p>If you\'re looking for a <strong>modern</strong>, <strong>efficient</strong>, and <strong>free</strong> alternative to ProseMirror/Tiptap, <strong>Lexical is a great choice!</strong> 🚀</p><p>You said:</p><p>If I understand it correctly TipTap can get quite expensive when scaling</p><p>ChatGPT said:</p><p>Yes, you’re right! <strong>Tiptap can become expensive at scale</strong>, depending on your use case. Here’s why:</p><h3><strong>1️⃣ The Core Tiptap Editor is Free</strong></h3><ul><li><p><strong>Tiptap itself is open-source</strong> and free to use under the MIT license.</p></li><li><p>It’s built on <strong>ProseMirror</strong>, which is also open-source.</p></li><li><p>You can self-host and use it without paying a cent.</p></li></ul><h3><strong>2️⃣ The Cost Comes from Tiptap Collaboration &amp; Cloud Services</strong></h3><p>Tiptap offers <strong>paid services</strong> that can get expensive as your usage scales:</p><ol><li><p><strong>Tiptap Collaboration Server (Hocuspocus)</strong></p><ul><li><p>Used for <strong>real-time collaboration</strong> (like Google Docs-style editing).</p></li><li><p>Free for self-hosting, <strong>but</strong>:</p><ul><li><p>You need to manage the infrastructure yourself.</p></li><li><p>If you use their hosted version, costs scale with users.</p></li></ul></li></ul></li><li><p><strong>Tiptap AI (Paid)</strong></p><ul><li><p>If you integrate AI-powered features (like text completion, summarization), you’ll pay usage-based fees.</p></li></ul></li><li><p><strong>Tiptap Cloud (Paid)</strong></p><ul><li><p>Managed hosting for Tiptap-related services.</p></li><li><p>Pricing varies based on API calls and storage.</p></li></ul></li></ol><h3><strong>3️⃣ Hidden Scaling Costs</strong></h3><ul><li><p><strong>Hosting a ProseMirror-based editor like Tiptap requires a powerful backend</strong> for real-time editing &amp; syncing.</p></li><li><p><strong>If you handle large concurrent users, database read/writes &amp; WebSocket connections increase infrastructure costs.</strong></p></li><li><p><strong>Custom extensions</strong> (if you develop them in-house) require engineering time &amp; maintenance.</p></li></ul><h3><strong>Alternatives That May Scale Better</strong></h3><ul><li><p><strong>Lexical (by Meta)</strong> 🆓 – Lighter &amp; built for performance.</p></li><li><p><strong>Slate.js</strong> 🆓 – Fully customizable but less feature-rich.</p></li><li><p><strong>Quill.js</strong> 🆓 – Great for simple use cases.</p></li></ul><h3><strong>Final Verdict</strong></h3><p>If you’re just using <strong>basic rich text editing</strong>, Tiptap is free and great. 🚀<br>But if you need <strong>real-time collaboration or AI features</strong>, it can get <strong>expensive</strong> as you scale.</p><p>Would you like recommendations on how to <strong>reduce scaling costs</strong> with Tiptap?</p><p>You said:</p><p>Yes</p><p>ChatGPT said:</p><h3><strong>How to Reduce Scaling Costs with Tiptap 🚀</strong></h3><p>If you\'re using Tiptap (or considering it) and want to <strong>keep costs low while scaling</strong>, here’s how you can do it.</p><hr><h2><strong>1️⃣ Self-Host Instead of Using Tiptap Cloud</strong></h2><p>Tiptap provides <strong>Tiptap Cloud</strong> as a hosted service, but this can get expensive at scale. Instead:</p><ul><li><p><strong>Self-host</strong> the key components instead of paying for managed services.</p></li><li><p>You’ll need to set up:</p><ul><li><p><strong>Tiptap Core</strong> (Free, MIT license)</p></li><li><p><strong>ProseMirror</strong> (Tiptap is built on it, also free)</p></li><li><p><strong>Hocuspocus (Collaboration Server)</strong> – Instead of paying Tiptap for real-time editing, host it yourself on <strong>a cheap VPS like DigitalOcean or AWS Lightsail</strong>.</p></li></ul></li></ul><p>📌 <strong>Guide</strong>: Self-hosting Hocuspocus</p><p><strong>💰 Potential Savings</strong>: No per-user fees, just hosting costs.</p><hr><h2><strong>2️⃣ Optimize WebSocket &amp; Real-Time Editing Costs</strong></h2><p>Real-time collaboration (like Google Docs-style editing) <strong>increases server load</strong> due to WebSocket connections.</p><ul><li><p><strong>Host Hocuspocus on a scalable infrastructure</strong> (Kubernetes, AWS ECS).</p></li><li><p><strong>Use Redis or PostgreSQL for persistence</strong> instead of in-memory storage.</p></li><li><p><strong>Limit real-time sync to active users only</strong> (disconnect inactive users).</p></li></ul><p><strong>💰 Potential Savings</strong>: Lower WebSocket usage = less server load.</p><hr><h2><strong>3️⃣ Avoid Tiptap AI (Use Open-Source AI)</strong></h2><p>Tiptap offers <strong>AI-powered suggestions, summarization, and completions</strong>, but they charge based on API usage. Instead:</p><ul><li><p><strong>Use open-source LLMs like GPT-4-All, Mistral, or Ollama</strong> instead of Tiptap AI.</p></li><li><p><strong>Host AI models yourself</strong> with Hugging Face models or OpenAI API proxies.</p></li></ul><p><strong>💰 Potential Savings</strong>: No per-token AI fees.</p><hr><h2><strong>4️⃣ Optimize Frontend Performance</strong></h2><p>Tiptap loads many dependencies, which <strong>increase bundle size</strong>. Reduce costs by:</p><ul><li><p><strong>Lazy-loading extensions</strong> (only load features users need).</p></li><li><p><strong>Tree-shaking unused dependencies</strong>.</p></li><li><p><strong>Using a CDN</strong> to serve assets (reduces direct server load).</p></li></ul><p><strong>💰 Potential Savings</strong>: Lower hosting and bandwidth costs.</p><hr><h2><strong>5️⃣ Alternative Open-Source Editors (If You Outgrow Tiptap)</strong></h2><p>If Tiptap costs <strong>too much</strong>, you can consider:</p><ul><li><p><strong>Lexical (by Meta)</strong> – Free, ultra-lightweight, great for scaling.</p></li><li><p><strong>Slate.js</strong> – Flexible and customizable.</p></li><li><p><strong>Quill.js</strong> – Good for simpler use cases.</p></li></ul><hr><h3><strong>📌 Final Takeaway</strong></h3><p>If you’re using <strong>Tiptap for rich text only</strong>, it’s free.<br>But if you <strong>need real-time collaboration, AI, or cloud services</strong>, follow these tips to <strong>reduce costs</strong> and <strong>scale efficiently</strong>.</p><p>Would you like help setting up <strong>self-hosted Hocuspocus</strong> or <strong>AI alternatives</strong>? 🚀</p>', 'status': 'Not Started', 'time_estimate': None, 'parent_id': None, 'created_at': datetime.datetime(2025, 3, 5, 17, 10, 57, 543053), 'task_type': 'Epic', 'updated_at': datetime.datetime(2025, 3, 13, 12, 46, 58, 641501), 'priority': None}
2025-03-13 20:35:11,160 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:35:11,165 INFO: [cached since 1.038e+04s ago] {'pk_1': 7}
2025-03-13 20:35:11,167 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-13 20:35:11,167 INFO: [cached since 1.038e+04s ago] {'pk_1': 5}
2025-03-13 20:35:11,168 INFO: Task ID 430 fetched with parent ID: None
2025-03-13 20:35:11,168 INFO: Task with ID 430 fetched successfully.
2025-03-13 20:35:11,168 DEBUG: Fetched Task Data: {'id': 430, 'name': 'No Epic', 'description': '<p>`console.log(\'Hello, World!\')``console.log(\'Hello, World!\')`**bold text**&gt; This is a quoteTest contentTest contentCurrently we have Tiptap editor installed, but after doing some research it turns out it can get really expensive when scaling up if we want to use the extensions that we need.<br><br>Here´s a list of must have features.</p><ul><li><p>Drag handle</p></li><li><p>Toggles</p></li><li><p>Drop cursor</p></li><li><p>Code block</p></li><li><p></p></li></ul><p></p><p>What editor is notions editor built upon?</p><p>ChatGPT said:</p><p>Notion\'s editor is built upon <strong>ProseMirror</strong>, which is a highly extensible and customizable framework for building rich-text editors.</p><h3><strong>How Notion Uses ProseMirror</strong></h3><ol><li><p><strong>Block-Based Editing</strong> - Notion\'s document model is built around a block-based structure, which ProseMirror supports well.</p></li><li><p><strong>Collaborative Editing</strong> - Notion enhances ProseMirror with <strong>Operational Transforms (OT)</strong> or <strong>Conflict-Free Replicated Data Types (CRDTs)</strong> for real-time multi-user collaboration.</p></li><li><p><strong>Custom Extensions</strong> - Notion extends ProseMirror to support embedded content, database-like properties, and advanced block manipulation.</p></li><li><p><strong>Rich Formatting</strong> - ProseMirror provides the foundation for text styles, lists, code blocks, and interactive widgets.</p></li></ol><h3><strong>Alternatives to ProseMirror</strong></h3><p>Notion could have used:</p><ul><li><p><strong>Tiptap</strong> (a framework built on ProseMirror, similar to what you\'re using)</p></li><li><p><strong>Slate.js</strong> (another powerful rich-text editor framework)</p></li><li><p><strong>Lexical</strong> (Meta/Facebook\'s modern take on rich-text editing)</p></li></ul><p>Since you\'re working with <strong>Tiptap (which is based on ProseMirror)</strong>, you are already using something similar to Notion’s approach! 🚀</p><p>You said:</p><p>Is Lexical free?</p><p>ChatGPT said:</p><p>Yes, <strong>Lexical</strong> is completely <strong>free</strong> and <strong>open-source</strong>! 🚀</p><h3><strong>License &amp; Cost</strong></h3><ul><li><p><strong>Lexical</strong> is released under the <strong>MIT license</strong>, which means you can use, modify, and distribute it freely for both <strong>personal</strong> and <strong>commercial</strong> projects <strong>without restrictions</strong>.</p></li><li><p>You don’t need to pay for it, and it has no hidden fees or licensing issues.</p></li></ul><h3><strong>Where to Get Lexical?</strong></h3><ul><li><p><strong>GitHub</strong>: <a target="_blank" rel="noopener noreferrer" href="https://github.com/facebook/lexical">https://github.com/facebook/lexical</a></p></li><li><p><strong>Official Website</strong>: <a target="_blank" rel="noopener noreferrer" href="https://lexical.dev/">https://lexical.dev/</a></p></li></ul><h3><strong>Why Use Lexical?</strong></h3><ul><li><p><strong>Ultra-lightweight &amp; fast</strong> ⚡</p></li><li><p><strong>Better performance than ProseMirror or Slate.js</strong></p></li><li><p><strong>Modular and Extensible</strong></p></li><li><p><strong>Supports collaborative editing</strong></p></li><li><p><strong>Backed by Meta (Facebook)</strong></p></li></ul><p>If you\'re looking for a <strong>modern</strong>, <strong>efficient</strong>, and <strong>free</strong> alternative to ProseMirror/Tiptap, <strong>Lexical is a great choice!</strong> 🚀</p><p>You said:</p><p>If I understand it correctly TipTap can get quite expensive when scaling</p><p>ChatGPT said:</p><p>Yes, you’re right! <strong>Tiptap can become expensive at scale</strong>, depending on your use case. Here’s why:</p><h3><strong>1️⃣ The Core Tiptap Editor is Free</strong></h3><ul><li><p><strong>Tiptap itself is open-source</strong> and free to use under the MIT license.</p></li><li><p>It’s built on <strong>ProseMirror</strong>, which is also open-source.</p></li><li><p>You can self-host and use it without paying a cent.</p></li></ul><h3><strong>2️⃣ The Cost Comes from Tiptap Collaboration &amp; Cloud Services</strong></h3><p>Tiptap offers <strong>paid services</strong> that can get expensive as your usage scales:</p><ol><li><p><strong>Tiptap Collaboration Server (Hocuspocus)</strong></p><ul><li><p>Used for <strong>real-time collaboration</strong> (like Google Docs-style editing).</p></li><li><p>Free for self-hosting, <strong>but</strong>:</p><ul><li><p>You need to manage the infrastructure yourself.</p></li><li><p>If you use their hosted version, costs scale with users.</p></li></ul></li></ul></li><li><p><strong>Tiptap AI (Paid)</strong></p><ul><li><p>If you integrate AI-powered features (like text completion, summarization), you’ll pay usage-based fees.</p></li></ul></li><li><p><strong>Tiptap Cloud (Paid)</strong></p><ul><li><p>Managed hosting for Tiptap-related services.</p></li><li><p>Pricing varies based on API calls and storage.</p></li></ul></li></ol><h3><strong>3️⃣ Hidden Scaling Costs</strong></h3><ul><li><p><strong>Hosting a ProseMirror-based editor like Tiptap requires a powerful backend</strong> for real-time editing &amp; syncing.</p></li><li><p><strong>If you handle large concurrent users, database read/writes &amp; WebSocket connections increase infrastructure costs.</strong></p></li><li><p><strong>Custom extensions</strong> (if you develop them in-house) require engineering time &amp; maintenance.</p></li></ul><h3><strong>Alternatives That May Scale Better</strong></h3><ul><li><p><strong>Lexical (by Meta)</strong> 🆓 – Lighter &amp; built for performance.</p></li><li><p><strong>Slate.js</strong> 🆓 – Fully customizable but less feature-rich.</p></li><li><p><strong>Quill.js</strong> 🆓 – Great for simple use cases.</p></li></ul><h3><strong>Final Verdict</strong></h3><p>If you’re just using <strong>basic rich text editing</strong>, Tiptap is free and great. 🚀<br>But if you need <strong>real-time collaboration or AI features</strong>, it can get <strong>expensive</strong> as you scale.</p><p>Would you like recommendations on how to <strong>reduce scaling costs</strong> with Tiptap?</p><p>You said:</p><p>Yes</p><p>ChatGPT said:</p><h3><strong>How to Reduce Scaling Costs with Tiptap 🚀</strong></h3><p>If you\'re using Tiptap (or considering it) and want to <strong>keep costs low while scaling</strong>, here’s how you can do it.</p><hr><h2><strong>1️⃣ Self-Host Instead of Using Tiptap Cloud</strong></h2><p>Tiptap provides <strong>Tiptap Cloud</strong> as a hosted service, but this can get expensive at scale. Instead:</p><ul><li><p><strong>Self-host</strong> the key components instead of paying for managed services.</p></li><li><p>You’ll need to set up:</p><ul><li><p><strong>Tiptap Core</strong> (Free, MIT license)</p></li><li><p><strong>ProseMirror</strong> (Tiptap is built on it, also free)</p></li><li><p><strong>Hocuspocus (Collaboration Server)</strong> – Instead of paying Tiptap for real-time editing, host it yourself on <strong>a cheap VPS like DigitalOcean or AWS Lightsail</strong>.</p></li></ul></li></ul><p>📌 <strong>Guide</strong>: Self-hosting Hocuspocus</p><p><strong>💰 Potential Savings</strong>: No per-user fees, just hosting costs.</p><hr><h2><strong>2️⃣ Optimize WebSocket &amp; Real-Time Editing Costs</strong></h2><p>Real-time collaboration (like Google Docs-style editing) <strong>increases server load</strong> due to WebSocket connections.</p><ul><li><p><strong>Host Hocuspocus on a scalable infrastructure</strong> (Kubernetes, AWS ECS).</p></li><li><p><strong>Use Redis or PostgreSQL for persistence</strong> instead of in-memory storage.</p></li><li><p><strong>Limit real-time sync to active users only</strong> (disconnect inactive users).</p></li></ul><p><strong>💰 Potential Savings</strong>: Lower WebSocket usage = less server load.</p><hr><h2><strong>3️⃣ Avoid Tiptap AI (Use Open-Source AI)</strong></h2><p>Tiptap offers <strong>AI-powered suggestions, summarization, and completions</strong>, but they charge based on API usage. Instead:</p><ul><li><p><strong>Use open-source LLMs like GPT-4-All, Mistral, or Ollama</strong> instead of Tiptap AI.</p></li><li><p><strong>Host AI models yourself</strong> with Hugging Face models or OpenAI API proxies.</p></li></ul><p><strong>💰 Potential Savings</strong>: No per-token AI fees.</p><hr><h2><strong>4️⃣ Optimize Frontend Performance</strong></h2><p>Tiptap loads many dependencies, which <strong>increase bundle size</strong>. Reduce costs by:</p><ul><li><p><strong>Lazy-loading extensions</strong> (only load features users need).</p></li><li><p><strong>Tree-shaking unused dependencies</strong>.</p></li><li><p><strong>Using a CDN</strong> to serve assets (reduces direct server load).</p></li></ul><p><strong>💰 Potential Savings</strong>: Lower hosting and bandwidth costs.</p><hr><h2><strong>5️⃣ Alternative Open-Source Editors (If You Outgrow Tiptap)</strong></h2><p>If Tiptap costs <strong>too much</strong>, you can consider:</p><ul><li><p><strong>Lexical (by Meta)</strong> – Free, ultra-lightweight, great for scaling.</p></li><li><p><strong>Slate.js</strong> – Flexible and customizable.</p></li><li><p><strong>Quill.js</strong> – Good for simpler use cases.</p></li></ul><hr><h3><strong>📌 Final Takeaway</strong></h3><p>If you’re using <strong>Tiptap for rich text only</strong>, it’s free.<br>But if you <strong>need real-time collaboration, AI, or cloud services</strong>, follow these tips to <strong>reduce costs</strong> and <strong>scale efficiently</strong>.</p><p>Would you like help setting up <strong>self-hosted Hocuspocus</strong> or <strong>AI alternatives</strong>? 🚀</p>', 'task_type': 'Epic', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'estimate_type': 'story_points', 'estimate': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-03-05T17:10:57.543053', 'updated_at': '2025-03-13T12:46:58.641501', 'contributor_name': 'Fredrik Cederborg', 'parent': None}
2025-03-13 20:35:11,169 INFO: Task details fetched successfully for Task ID 430.
2025-03-13 20:35:11,170 INFO: ROLLBACK
2025-03-13 20:35:11,171 INFO: 127.0.0.1 - - [13/Mar/2025 20:35:11] "GET /api/tasks/430 HTTP/1.1" 200 -
2025-03-13 20:35:11,388 INFO: 127.0.0.1 - - [13/Mar/2025 20:35:11] "OPTIONS /tasks/available_tasks?task_type=Epic&exclude_task_id=430&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:35:11,391 INFO: BEGIN (implicit)
2025-03-13 20:35:11,395 INFO: 127.0.0.1 - - [13/Mar/2025 20:35:11] "OPTIONS /tasks/available_tasks?task_type=Epic&exclude_task_id=430&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:35:11,397 INFO: BEGIN (implicit)
2025-03-13 20:35:11,401 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:35:11,403 INFO: Entering available_tasks route...
2025-03-13 20:35:11,404 INFO: Entering available_tasks route...
2025-03-13 20:35:11,405 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:35:11,405 INFO: [cached since 1.038e+04s ago] {'pk_1': 7}
2025-03-13 20:35:11,405 INFO: [cached since 1.038e+04s ago] {'pk_1': 7}
2025-03-13 20:35:11,405 DEBUG: Query parameters: task_type=Epic, exclude_task_id=430, search_term=, project_id=None, limit=30, page=1
2025-03-13 20:35:11,405 DEBUG: Query parameters: task_type=Epic, exclude_task_id=430, search_term=, project_id=None, limit=30, page=1
2025-03-13 20:35:11,409 INFO: BEGIN (implicit)
2025-03-13 20:35:11,424 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:35:11,426 INFO: [cached since 1.038e+04s ago] {}
2025-03-13 20:35:11,427 INFO: BEGIN (implicit)
2025-03-13 20:35:11,427 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:35:11,427 INFO: [cached since 1.038e+04s ago] {'pk_1': 430}
2025-03-13 20:35:11,428 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:35:11,425 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:35:11,429 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:35:11,429 INFO: [cached since 1.038e+04s ago] {}
2025-03-13 20:35:11,429 INFO: [cached since 1.038e+04s ago] {'pk_1': 430}
2025-03-13 20:35:11,432 INFO: [cached since 1.038e+04s ago] {'param_1': 7}
2025-03-13 20:35:11,433 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 430, 'task_type': ['Epic']}
2025-03-13 20:35:11,436 INFO: Validating hierarchy for Task N/A
2025-03-13 20:35:11,436 INFO: Determining valid parent types for task_type: Epic
2025-03-13 20:35:11,436 INFO: No valid parents found for task_type: Epic
2025-03-13 20:35:11,437 INFO: ROLLBACK
2025-03-13 20:35:11,435 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:35:11,437 INFO: [cached since 1.038e+04s ago] {'param_1': 7}
2025-03-13 20:35:11,438 INFO: 127.0.0.1 - - [13/Mar/2025 20:35:11] "GET /tasks/available_tasks?task_type=Epic&exclude_task_id=430&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:35:11,445 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:35:11,450 INFO: [cached since 1.038e+04s ago] {'param_1': 1}
2025-03-13 20:35:11,452 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 430, 'task_type': ['Epic']}
2025-03-13 20:35:11,452 INFO: Validating hierarchy for Task N/A
2025-03-13 20:35:11,452 INFO: Determining valid parent types for task_type: Epic
2025-03-13 20:35:11,452 INFO: No valid parents found for task_type: Epic
2025-03-13 20:35:11,453 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:35:11,453 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:35:11,455 INFO: [cached since 1.038e+04s ago] {'param_1': 2}
2025-03-13 20:35:11,454 INFO: ROLLBACK
2025-03-13 20:35:11,454 INFO: [cached since 1.038e+04s ago] {'param_1': 1}
2025-03-13 20:35:11,455 INFO: 127.0.0.1 - - [13/Mar/2025 20:35:11] "GET /tasks/available_tasks?task_type=Epic&exclude_task_id=430&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:35:11,457 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:35:11,460 INFO: [cached since 1.038e+04s ago] {'param_1': 3}
2025-03-13 20:35:11,459 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:35:11,460 INFO: [cached since 1.038e+04s ago] {'param_1': 2}
2025-03-13 20:35:11,463 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:35:11,463 INFO: [cached since 1.038e+04s ago] {'param_1': 4}
2025-03-13 20:35:11,465 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:35:11,471 INFO: [cached since 1.038e+04s ago] {'param_1': 3}
2025-03-13 20:35:11,511 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:35:11,511 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:35:11,516 INFO: [cached since 1.038e+04s ago] {'param_1': 4}
2025-03-13 20:35:11,511 INFO: [cached since 1.038e+04s ago] {'param_1': 5}
2025-03-13 20:35:11,518 INFO: ROLLBACK
2025-03-13 20:35:11,519 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:35:11,520 INFO: 127.0.0.1 - - [13/Mar/2025 20:35:11] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:35:11,520 INFO: [cached since 1.038e+04s ago] {'param_1': 5}
2025-03-13 20:35:11,526 INFO: ROLLBACK
2025-03-13 20:35:11,527 INFO: 127.0.0.1 - - [13/Mar/2025 20:35:11] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:36:20,717 INFO: 127.0.0.1 - - [13/Mar/2025 20:36:20] "GET /socket.io/?EIO=4&transport=websocket&sid=alHajInnRiZZRxeBAABQ HTTP/1.1" 200 -
2025-03-13 20:36:22,314 INFO: 127.0.0.1 - - [13/Mar/2025 20:36:22] "GET /socket.io/?EIO=4&transport=polling&t=r25nhnya HTTP/1.1" 200 -
2025-03-13 20:36:22,428 INFO: BEGIN (implicit)
2025-03-13 20:36:22,576 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:36:22,590 INFO: [cached since 1.045e+04s ago] {}
2025-03-13 20:36:22,596 INFO: 127.0.0.1 - - [13/Mar/2025 20:36:22] "POST /socket.io/?EIO=4&transport=polling&t=r25p4ef9&sid=u6M_5bnhS_LeV7OBAABS HTTP/1.1" 200 -
2025-03-13 20:36:22,609 INFO: Entering list_tasks_json route...
2025-03-13 20:36:22,609 DEBUG: Filters used in API: {'is_archived': False}
2025-03-13 20:36:22,609 DEBUG: Applying filters: {'is_archived': False}
2025-03-13 20:36:22,623 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-13 20:36:22,624 INFO: BEGIN (implicit)
2025-03-13 20:36:22,625 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:36:22,668 INFO: [cached since 1.045e+04s ago] {'param_1': 1}
2025-03-13 20:36:22,626 INFO: BEGIN (implicit)
2025-03-13 20:36:22,634 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 20:36:22,669 INFO: 127.0.0.1 - - [13/Mar/2025 20:36:22] "GET /socket.io/?EIO=4&transport=polling&t=r25p6riv&sid=u6M_5bnhS_LeV7OBAABS HTTP/1.1" 200 -
2025-03-13 20:36:22,633 INFO: BEGIN (implicit)
2025-03-13 20:36:22,724 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-13 20:36:22,682 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-13 20:36:22,702 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:36:22,743 INFO: [cached since 1.045e+04s ago] {'param_1': 700, 'param_2': 0}
2025-03-13 20:36:22,685 INFO: [cached since 1.045e+04s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 20:36:22,743 INFO: [cached since 1.045e+04s ago] {'param_1': 2}
2025-03-13 20:36:22,724 INFO: [cached since 1.045e+04s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-13 20:36:22,858 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:36:22,891 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 20:36:22,944 INFO: [cached since 1.045e+04s ago] {'param_1': 3}
2025-03-13 20:36:23,003 INFO: [cached since 1.045e+04s ago] {}
2025-03-13 20:36:23,032 INFO: ROLLBACK
2025-03-13 20:36:23,041 INFO: ROLLBACK
2025-03-13 20:36:23,042 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:36:23,097 INFO: [cached since 1.045e+04s ago] {'param_1': 4}
2025-03-13 20:36:23,050 INFO: 127.0.0.1 - - [13/Mar/2025 20:36:23] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-13 20:36:23,112 INFO: 127.0.0.1 - - [13/Mar/2025 20:36:23] "GET /api/projects HTTP/1.1" 200 -
2025-03-13 20:36:23,117 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:36:23,142 INFO: [cached since 1.045e+04s ago] {'param_1': 5}
2025-03-13 20:36:23,133 INFO: BEGIN (implicit)
2025-03-13 20:36:23,154 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:36:23,154 INFO: [cached since 1.045e+04s ago] {'pk_1': 19}
2025-03-13 20:36:23,157 INFO: ROLLBACK
2025-03-13 20:36:23,163 INFO: 127.0.0.1 - - [13/Mar/2025 20:36:23] "GET /api/contributors HTTP/1.1" 200 -
2025-03-13 20:36:23,163 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:36:23,164 INFO: [cached since 1.045e+04s ago] {}
2025-03-13 20:36:23,169 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:36:23,176 INFO: [cached since 1.045e+04s ago] {'param_1': 19}
2025-03-13 20:36:23,197 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:36:23,201 INFO: [cached since 1.045e+04s ago] {'param_1': 1}
2025-03-13 20:36:23,339 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:36:23,339 INFO: [cached since 1.045e+04s ago] {'param_1': 2}
2025-03-13 20:36:23,475 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:36:23,478 INFO: [cached since 1.045e+04s ago] {'param_1': 3}
2025-03-13 20:36:23,537 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:36:23,537 INFO: [cached since 1.045e+04s ago] {'param_1': 4}
2025-03-13 20:36:23,549 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:36:23,557 INFO: [cached since 1.045e+04s ago] {'param_1': 5}
2025-03-13 20:36:23,565 INFO: ROLLBACK
2025-03-13 20:36:23,583 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-13 20:36:23,583 INFO: [cached since 1.045e+04s ago] {}
2025-03-13 20:36:23,583 INFO: 127.0.0.1 - - [13/Mar/2025 20:36:23] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:36:23,589 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-13 20:36:23,590 INFO: [cached since 1.045e+04s ago] {}
2025-03-13 20:36:23,591 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-13 20:36:23,591 INFO: [cached since 1.045e+04s ago] {}
2025-03-13 20:36:23,600 INFO: ROLLBACK
2025-03-13 20:36:23,600 INFO: 127.0.0.1 - - [13/Mar/2025 20:36:23] "GET /api/tasks HTTP/1.1" 200 -
2025-03-13 20:36:31,720 INFO: Fetching task details for Task ID 272.
2025-03-13 20:36:31,721 INFO: Fetching task with ID 272.
2025-03-13 20:36:31,734 INFO: BEGIN (implicit)
2025-03-13 20:36:31,738 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:36:31,739 INFO: [cached since 1.046e+04s ago] {'pk_1': 272}
2025-03-13 20:36:31,752 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x109d78c50>, 'epic_priority': None, 'project_id': 7, 'id': 272, 'is_archived': False, 'contributor_id': 5, 'name': 'Implement a markdown text editor like notion', 'completed': False, 'estimate_type': 'story_points', 'sort_order': 2, 'story_points': 0, 'completed_date': None, 'description': '<p>Write your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p>', 'status': 'In Progress', 'time_estimate': None, 'parent_id': None, 'created_at': datetime.datetime(2025, 2, 10, 0, 28, 18, 300231), 'task_type': 'Epic', 'updated_at': datetime.datetime(2025, 3, 5, 16, 4, 29, 771061), 'priority': 'Medium'}
2025-03-13 20:36:31,754 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:36:31,755 INFO: [cached since 1.046e+04s ago] {'pk_1': 7}
2025-03-13 20:36:31,756 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-13 20:36:31,756 INFO: [cached since 1.046e+04s ago] {'pk_1': 5}
2025-03-13 20:36:31,758 INFO: Task ID 272 fetched with parent ID: None
2025-03-13 20:36:31,758 INFO: Task with ID 272 fetched successfully.
2025-03-13 20:36:31,759 DEBUG: Fetched Task Data: {'id': 272, 'name': 'Implement a markdown text editor like notion', 'description': '<p>Write your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p>', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'estimate_type': 'story_points', 'estimate': 0, 'status': 'In Progress', 'sort_order': 2, 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-03-05T16:04:29.771061', 'contributor_name': 'Fredrik Cederborg', 'parent': None}
2025-03-13 20:36:31,759 INFO: Task details fetched successfully for Task ID 272.
2025-03-13 20:36:31,760 INFO: ROLLBACK
2025-03-13 20:36:31,760 INFO: 127.0.0.1 - - [13/Mar/2025 20:36:31] "GET /api/tasks/272 HTTP/1.1" 200 -
2025-03-13 20:36:31,980 INFO: 127.0.0.1 - - [13/Mar/2025 20:36:31] "OPTIONS /tasks/available_tasks?task_type=Epic&exclude_task_id=272&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:36:31,983 INFO: BEGIN (implicit)
2025-03-13 20:36:31,985 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:36:31,985 INFO: [cached since 1.046e+04s ago] {'pk_1': 7}
2025-03-13 20:36:31,990 INFO: 127.0.0.1 - - [13/Mar/2025 20:36:31] "OPTIONS /tasks/available_tasks?task_type=Epic&exclude_task_id=272&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:36:32,004 INFO: BEGIN (implicit)
2025-03-13 20:36:32,005 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:36:32,006 INFO: [cached since 1.046e+04s ago] {'pk_1': 7}
2025-03-13 20:36:32,009 INFO: Entering available_tasks route...
2025-03-13 20:36:32,013 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:36:32,015 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:36:32,020 DEBUG: Query parameters: task_type=Epic, exclude_task_id=272, search_term=, project_id=None, limit=30, page=1
2025-03-13 20:36:32,022 INFO: Entering available_tasks route...
2025-03-13 20:36:32,025 DEBUG: Query parameters: task_type=Epic, exclude_task_id=272, search_term=, project_id=None, limit=30, page=1
2025-03-13 20:36:32,022 INFO: [cached since 1.046e+04s ago] {}
2025-03-13 20:36:32,024 INFO: BEGIN (implicit)
2025-03-13 20:36:32,025 INFO: BEGIN (implicit)
2025-03-13 20:36:32,033 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:36:32,033 INFO: [cached since 1.046e+04s ago] {'pk_1': 272}
2025-03-13 20:36:32,023 INFO: [cached since 1.046e+04s ago] {}
2025-03-13 20:36:32,027 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:36:32,033 INFO: [cached since 1.046e+04s ago] {'pk_1': 272}
2025-03-13 20:36:32,032 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:36:32,033 INFO: [cached since 1.046e+04s ago] {'param_1': 7}
2025-03-13 20:36:32,036 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:36:32,038 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 272, 'task_type': ['Epic']}
2025-03-13 20:36:32,043 INFO: [cached since 1.046e+04s ago] {'param_1': 7}
2025-03-13 20:36:32,039 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 272, 'task_type': ['Epic']}
2025-03-13 20:36:32,043 INFO: Validating hierarchy for Task N/A
2025-03-13 20:36:32,044 INFO: Determining valid parent types for task_type: Epic
2025-03-13 20:36:32,044 INFO: No valid parents found for task_type: Epic
2025-03-13 20:36:32,044 INFO: ROLLBACK
2025-03-13 20:36:32,044 INFO: Validating hierarchy for Task N/A
2025-03-13 20:36:32,045 INFO: Determining valid parent types for task_type: Epic
2025-03-13 20:36:32,045 INFO: No valid parents found for task_type: Epic
2025-03-13 20:36:32,042 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:36:32,046 INFO: ROLLBACK
2025-03-13 20:36:32,046 INFO: 127.0.0.1 - - [13/Mar/2025 20:36:32] "GET /tasks/available_tasks?task_type=Epic&exclude_task_id=272&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:36:32,048 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:36:32,053 INFO: [cached since 1.046e+04s ago] {'param_1': 1}
2025-03-13 20:36:32,107 INFO: 127.0.0.1 - - [13/Mar/2025 20:36:32] "GET /tasks/available_tasks?task_type=Epic&exclude_task_id=272&page=1&limit=30 HTTP/1.1" 200 -
2025-03-13 20:36:32,108 INFO: [cached since 1.046e+04s ago] {'param_1': 1}
2025-03-13 20:36:32,174 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:36:32,174 INFO: [cached since 1.046e+04s ago] {'param_1': 2}
2025-03-13 20:36:32,215 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:36:32,242 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:36:32,273 INFO: [cached since 1.046e+04s ago] {'param_1': 2}
2025-03-13 20:36:32,281 INFO: [cached since 1.046e+04s ago] {'param_1': 3}
2025-03-13 20:36:32,314 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:36:32,315 INFO: [cached since 1.046e+04s ago] {'param_1': 4}
2025-03-13 20:36:32,324 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:36:32,324 INFO: [cached since 1.046e+04s ago] {'param_1': 3}
2025-03-13 20:36:32,325 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:36:32,331 INFO: [cached since 1.046e+04s ago] {'param_1': 5}
2025-03-13 20:36:32,350 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:36:32,384 INFO: [cached since 1.046e+04s ago] {'param_1': 4}
2025-03-13 20:36:32,385 INFO: ROLLBACK
2025-03-13 20:36:32,386 INFO: 127.0.0.1 - - [13/Mar/2025 20:36:32] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:36:32,443 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:36:32,449 INFO: [cached since 1.046e+04s ago] {'param_1': 5}
2025-03-13 20:36:32,466 INFO: ROLLBACK
2025-03-13 20:36:32,468 INFO: 127.0.0.1 - - [13/Mar/2025 20:36:32] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:40:45,305 INFO: 127.0.0.1 - - [13/Mar/2025 20:40:45] "OPTIONS /api/tasks/272 HTTP/1.1" 200 -
2025-03-13 20:40:45,312 INFO: BEGIN (implicit)
2025-03-13 20:40:45,314 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:40:45,314 INFO: [cached since 1.071e+04s ago] {'pk_1': 272}
2025-03-13 20:40:45,320 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-13 20:40:45,321 INFO: [cached since 3331s ago] {'description': '<p>**bold text**Write your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p>', 'updated_at': datetime.datetime(2025, 3, 13, 19, 40, 45, 318922), 'task_id': 272}
2025-03-13 20:40:45,323 INFO: COMMIT
2025-03-13 20:40:45,325 INFO: Task ID 272 updated successfully. Updated fields: ['description']
2025-03-13 20:40:45,326 INFO: BEGIN (implicit)
2025-03-13 20:40:45,326 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:40:45,326 INFO: [cached since 3331s ago] {'pk_1': 272}
2025-03-13 20:40:45,330 INFO: ROLLBACK
2025-03-13 20:40:45,331 INFO: 127.0.0.1 - - [13/Mar/2025 20:40:45] "PATCH /api/tasks/272 HTTP/1.1" 200 -
2025-03-13 20:40:45,386 INFO: BEGIN (implicit)
2025-03-13 20:40:45,387 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:40:45,387 INFO: [cached since 1.071e+04s ago] {'pk_1': 7}
2025-03-13 20:40:45,390 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:40:45,390 INFO: [cached since 1.071e+04s ago] {}
2025-03-13 20:40:45,391 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:40:45,391 INFO: [cached since 1.071e+04s ago] {'param_1': 7}
2025-03-13 20:40:45,392 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:45,392 INFO: [cached since 1.071e+04s ago] {'param_1': 1}
2025-03-13 20:40:45,394 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:45,395 INFO: [cached since 1.071e+04s ago] {'param_1': 2}
2025-03-13 20:40:45,399 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:45,399 INFO: [cached since 1.071e+04s ago] {'param_1': 3}
2025-03-13 20:40:45,401 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:45,401 INFO: [cached since 1.071e+04s ago] {'param_1': 4}
2025-03-13 20:40:45,403 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:45,403 INFO: [cached since 1.071e+04s ago] {'param_1': 5}
2025-03-13 20:40:45,408 INFO: ROLLBACK
2025-03-13 20:40:45,408 INFO: 127.0.0.1 - - [13/Mar/2025 20:40:45] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:40:45,456 INFO: BEGIN (implicit)
2025-03-13 20:40:45,457 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:40:45,457 INFO: [cached since 1.071e+04s ago] {'pk_1': 7}
2025-03-13 20:40:45,459 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:40:45,459 INFO: [cached since 1.071e+04s ago] {}
2025-03-13 20:40:45,460 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:40:45,461 INFO: [cached since 1.071e+04s ago] {'param_1': 7}
2025-03-13 20:40:45,462 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:45,463 INFO: [cached since 1.071e+04s ago] {'param_1': 1}
2025-03-13 20:40:45,465 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:45,465 INFO: [cached since 1.071e+04s ago] {'param_1': 2}
2025-03-13 20:40:45,466 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:45,467 INFO: [cached since 1.071e+04s ago] {'param_1': 3}
2025-03-13 20:40:45,468 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:45,468 INFO: [cached since 1.071e+04s ago] {'param_1': 4}
2025-03-13 20:40:45,471 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:45,471 INFO: [cached since 1.071e+04s ago] {'param_1': 5}
2025-03-13 20:40:45,473 INFO: ROLLBACK
2025-03-13 20:40:45,473 INFO: 127.0.0.1 - - [13/Mar/2025 20:40:45] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:40:48,844 INFO: BEGIN (implicit)
2025-03-13 20:40:48,844 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:40:48,845 INFO: [cached since 1.071e+04s ago] {'pk_1': 272}
2025-03-13 20:40:48,848 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-13 20:40:48,849 INFO: [cached since 3334s ago] {'description': "<p>**bold text**`console.log('Hello, World!')`Write your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p>", 'updated_at': datetime.datetime(2025, 3, 13, 19, 40, 48, 847741), 'task_id': 272}
2025-03-13 20:40:48,854 INFO: COMMIT
2025-03-13 20:40:48,855 INFO: Task ID 272 updated successfully. Updated fields: ['description']
2025-03-13 20:40:48,856 INFO: BEGIN (implicit)
2025-03-13 20:40:48,856 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:40:48,856 INFO: [cached since 3334s ago] {'pk_1': 272}
2025-03-13 20:40:48,859 INFO: ROLLBACK
2025-03-13 20:40:48,859 INFO: 127.0.0.1 - - [13/Mar/2025 20:40:48] "PATCH /api/tasks/272 HTTP/1.1" 200 -
2025-03-13 20:40:48,908 INFO: BEGIN (implicit)
2025-03-13 20:40:48,908 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:40:48,908 INFO: [cached since 1.072e+04s ago] {'pk_1': 7}
2025-03-13 20:40:48,910 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:40:48,910 INFO: [cached since 1.072e+04s ago] {}
2025-03-13 20:40:48,911 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:40:48,911 INFO: [cached since 1.072e+04s ago] {'param_1': 7}
2025-03-13 20:40:48,912 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:48,912 INFO: [cached since 1.072e+04s ago] {'param_1': 1}
2025-03-13 20:40:48,913 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:48,914 INFO: [cached since 1.072e+04s ago] {'param_1': 2}
2025-03-13 20:40:48,915 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:48,915 INFO: [cached since 1.072e+04s ago] {'param_1': 3}
2025-03-13 20:40:48,917 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:48,917 INFO: [cached since 1.072e+04s ago] {'param_1': 4}
2025-03-13 20:40:48,919 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:48,919 INFO: [cached since 1.072e+04s ago] {'param_1': 5}
2025-03-13 20:40:48,921 INFO: ROLLBACK
2025-03-13 20:40:48,922 INFO: 127.0.0.1 - - [13/Mar/2025 20:40:48] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:40:48,978 INFO: BEGIN (implicit)
2025-03-13 20:40:48,978 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:40:48,979 INFO: [cached since 1.072e+04s ago] {'pk_1': 7}
2025-03-13 20:40:48,980 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:40:48,980 INFO: [cached since 1.072e+04s ago] {}
2025-03-13 20:40:48,981 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:40:48,981 INFO: [cached since 1.072e+04s ago] {'param_1': 7}
2025-03-13 20:40:48,983 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:48,984 INFO: [cached since 1.072e+04s ago] {'param_1': 1}
2025-03-13 20:40:48,985 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:48,985 INFO: [cached since 1.072e+04s ago] {'param_1': 2}
2025-03-13 20:40:48,987 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:48,987 INFO: [cached since 1.072e+04s ago] {'param_1': 3}
2025-03-13 20:40:48,989 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:48,989 INFO: [cached since 1.072e+04s ago] {'param_1': 4}
2025-03-13 20:40:48,991 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:48,991 INFO: [cached since 1.072e+04s ago] {'param_1': 5}
2025-03-13 20:40:48,993 INFO: ROLLBACK
2025-03-13 20:40:48,993 INFO: 127.0.0.1 - - [13/Mar/2025 20:40:48] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:40:51,591 INFO: 127.0.0.1 - - [13/Mar/2025 20:40:51] "OPTIONS /api/tasks/272 HTTP/1.1" 200 -
2025-03-13 20:40:51,594 INFO: BEGIN (implicit)
2025-03-13 20:40:51,594 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:40:51,594 INFO: [cached since 1.072e+04s ago] {'pk_1': 272}
2025-03-13 20:40:51,596 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-13 20:40:51,597 INFO: [cached since 3337s ago] {'description': "<p>**bold text**`console.log('Hello, World!')`&gt; This is a quoteWrite your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p>", 'updated_at': datetime.datetime(2025, 3, 13, 19, 40, 51, 596253), 'task_id': 272}
2025-03-13 20:40:51,603 INFO: COMMIT
2025-03-13 20:40:51,605 INFO: Task ID 272 updated successfully. Updated fields: ['description']
2025-03-13 20:40:51,605 INFO: BEGIN (implicit)
2025-03-13 20:40:51,606 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:40:51,606 INFO: [cached since 3337s ago] {'pk_1': 272}
2025-03-13 20:40:51,608 INFO: ROLLBACK
2025-03-13 20:40:51,608 INFO: 127.0.0.1 - - [13/Mar/2025 20:40:51] "PATCH /api/tasks/272 HTTP/1.1" 200 -
2025-03-13 20:40:51,654 INFO: BEGIN (implicit)
2025-03-13 20:40:51,655 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:40:51,655 INFO: [cached since 1.072e+04s ago] {'pk_1': 7}
2025-03-13 20:40:51,657 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:40:51,657 INFO: [cached since 1.072e+04s ago] {}
2025-03-13 20:40:51,658 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:40:51,658 INFO: [cached since 1.072e+04s ago] {'param_1': 7}
2025-03-13 20:40:51,659 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:51,659 INFO: [cached since 1.072e+04s ago] {'param_1': 1}
2025-03-13 20:40:51,661 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:51,661 INFO: [cached since 1.072e+04s ago] {'param_1': 2}
2025-03-13 20:40:51,663 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:51,663 INFO: [cached since 1.072e+04s ago] {'param_1': 3}
2025-03-13 20:40:51,665 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:51,665 INFO: [cached since 1.072e+04s ago] {'param_1': 4}
2025-03-13 20:40:51,666 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:51,667 INFO: [cached since 1.072e+04s ago] {'param_1': 5}
2025-03-13 20:40:51,668 INFO: ROLLBACK
2025-03-13 20:40:51,669 INFO: 127.0.0.1 - - [13/Mar/2025 20:40:51] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:40:51,727 INFO: BEGIN (implicit)
2025-03-13 20:40:51,728 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:40:51,728 INFO: [cached since 1.072e+04s ago] {'pk_1': 7}
2025-03-13 20:40:51,729 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:40:51,730 INFO: [cached since 1.072e+04s ago] {}
2025-03-13 20:40:51,731 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:40:51,732 INFO: [cached since 1.072e+04s ago] {'param_1': 7}
2025-03-13 20:40:51,733 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:51,733 INFO: [cached since 1.072e+04s ago] {'param_1': 1}
2025-03-13 20:40:51,734 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:51,735 INFO: [cached since 1.072e+04s ago] {'param_1': 2}
2025-03-13 20:40:51,736 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:51,736 INFO: [cached since 1.072e+04s ago] {'param_1': 3}
2025-03-13 20:40:51,738 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:51,738 INFO: [cached since 1.072e+04s ago] {'param_1': 4}
2025-03-13 20:40:51,741 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:51,741 INFO: [cached since 1.072e+04s ago] {'param_1': 5}
2025-03-13 20:40:51,742 INFO: ROLLBACK
2025-03-13 20:40:51,743 INFO: 127.0.0.1 - - [13/Mar/2025 20:40:51] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:40:53,092 INFO: BEGIN (implicit)
2025-03-13 20:40:53,092 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:40:53,093 INFO: [cached since 1.072e+04s ago] {'pk_1': 272}
2025-03-13 20:40:53,095 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-13 20:40:53,095 INFO: [cached since 3338s ago] {'description': "<p>**bold text**`console.log('Hello, World!')`&gt; This is a quote&gt; This is a quoteWrite your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p>", 'updated_at': datetime.datetime(2025, 3, 13, 19, 40, 53, 94626), 'task_id': 272}
2025-03-13 20:40:53,100 INFO: COMMIT
2025-03-13 20:40:53,101 INFO: Task ID 272 updated successfully. Updated fields: ['description']
2025-03-13 20:40:53,101 INFO: BEGIN (implicit)
2025-03-13 20:40:53,102 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:40:53,102 INFO: [cached since 3338s ago] {'pk_1': 272}
2025-03-13 20:40:53,103 INFO: ROLLBACK
2025-03-13 20:40:53,104 INFO: 127.0.0.1 - - [13/Mar/2025 20:40:53] "PATCH /api/tasks/272 HTTP/1.1" 200 -
2025-03-13 20:40:53,149 INFO: BEGIN (implicit)
2025-03-13 20:40:53,150 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:40:53,150 INFO: [cached since 1.072e+04s ago] {'pk_1': 7}
2025-03-13 20:40:53,151 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:40:53,152 INFO: [cached since 1.072e+04s ago] {}
2025-03-13 20:40:53,153 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:40:53,153 INFO: [cached since 1.072e+04s ago] {'param_1': 7}
2025-03-13 20:40:53,155 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:53,155 INFO: [cached since 1.072e+04s ago] {'param_1': 1}
2025-03-13 20:40:53,157 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:53,157 INFO: [cached since 1.072e+04s ago] {'param_1': 2}
2025-03-13 20:40:53,159 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:53,159 INFO: [cached since 1.072e+04s ago] {'param_1': 3}
2025-03-13 20:40:53,160 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:53,161 INFO: [cached since 1.072e+04s ago] {'param_1': 4}
2025-03-13 20:40:53,163 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:53,163 INFO: [cached since 1.072e+04s ago] {'param_1': 5}
2025-03-13 20:40:53,165 INFO: ROLLBACK
2025-03-13 20:40:53,165 INFO: 127.0.0.1 - - [13/Mar/2025 20:40:53] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:40:53,218 INFO: BEGIN (implicit)
2025-03-13 20:40:53,218 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:40:53,219 INFO: [cached since 1.072e+04s ago] {'pk_1': 7}
2025-03-13 20:40:53,221 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:40:53,221 INFO: [cached since 1.072e+04s ago] {}
2025-03-13 20:40:53,222 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:40:53,222 INFO: [cached since 1.072e+04s ago] {'param_1': 7}
2025-03-13 20:40:53,223 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:53,223 INFO: [cached since 1.072e+04s ago] {'param_1': 1}
2025-03-13 20:40:53,225 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:53,225 INFO: [cached since 1.072e+04s ago] {'param_1': 2}
2025-03-13 20:40:53,226 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:53,226 INFO: [cached since 1.072e+04s ago] {'param_1': 3}
2025-03-13 20:40:53,227 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:53,227 INFO: [cached since 1.072e+04s ago] {'param_1': 4}
2025-03-13 20:40:53,229 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:53,229 INFO: [cached since 1.072e+04s ago] {'param_1': 5}
2025-03-13 20:40:53,232 INFO: ROLLBACK
2025-03-13 20:40:53,232 INFO: 127.0.0.1 - - [13/Mar/2025 20:40:53] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:40:55,011 INFO: BEGIN (implicit)
2025-03-13 20:40:55,011 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:40:55,012 INFO: [cached since 1.072e+04s ago] {'pk_1': 272}
2025-03-13 20:40:55,014 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-13 20:40:55,015 INFO: [cached since 3340s ago] {'description': "<p>**bold text**`console.log('Hello, World!')`&gt; This is a quote&gt; This is a quote&gt; This is a quoteWrite your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p>", 'updated_at': datetime.datetime(2025, 3, 13, 19, 40, 55, 13572), 'task_id': 272}
2025-03-13 20:40:55,020 INFO: COMMIT
2025-03-13 20:40:55,021 INFO: Task ID 272 updated successfully. Updated fields: ['description']
2025-03-13 20:40:55,022 INFO: BEGIN (implicit)
2025-03-13 20:40:55,022 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:40:55,023 INFO: [cached since 3340s ago] {'pk_1': 272}
2025-03-13 20:40:55,025 INFO: ROLLBACK
2025-03-13 20:40:55,025 INFO: 127.0.0.1 - - [13/Mar/2025 20:40:55] "PATCH /api/tasks/272 HTTP/1.1" 200 -
2025-03-13 20:40:55,069 INFO: BEGIN (implicit)
2025-03-13 20:40:55,070 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:40:55,070 INFO: [cached since 1.072e+04s ago] {'pk_1': 7}
2025-03-13 20:40:55,072 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:40:55,072 INFO: [cached since 1.072e+04s ago] {}
2025-03-13 20:40:55,073 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:40:55,073 INFO: [cached since 1.072e+04s ago] {'param_1': 7}
2025-03-13 20:40:55,074 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:55,074 INFO: [cached since 1.072e+04s ago] {'param_1': 1}
2025-03-13 20:40:55,075 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:55,076 INFO: [cached since 1.072e+04s ago] {'param_1': 2}
2025-03-13 20:40:55,077 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:55,077 INFO: [cached since 1.072e+04s ago] {'param_1': 3}
2025-03-13 20:40:55,078 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:55,079 INFO: [cached since 1.072e+04s ago] {'param_1': 4}
2025-03-13 20:40:55,081 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:55,081 INFO: [cached since 1.072e+04s ago] {'param_1': 5}
2025-03-13 20:40:55,083 INFO: ROLLBACK
2025-03-13 20:40:55,084 INFO: 127.0.0.1 - - [13/Mar/2025 20:40:55] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:40:55,133 INFO: BEGIN (implicit)
2025-03-13 20:40:55,134 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:40:55,134 INFO: [cached since 1.072e+04s ago] {'pk_1': 7}
2025-03-13 20:40:55,135 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:40:55,135 INFO: [cached since 1.072e+04s ago] {}
2025-03-13 20:40:55,137 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:40:55,137 INFO: [cached since 1.072e+04s ago] {'param_1': 7}
2025-03-13 20:40:55,139 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:55,139 INFO: [cached since 1.072e+04s ago] {'param_1': 1}
2025-03-13 20:40:55,140 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:55,140 INFO: [cached since 1.072e+04s ago] {'param_1': 2}
2025-03-13 20:40:55,141 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:55,142 INFO: [cached since 1.072e+04s ago] {'param_1': 3}
2025-03-13 20:40:55,143 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:55,143 INFO: [cached since 1.072e+04s ago] {'param_1': 4}
2025-03-13 20:40:55,144 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:55,144 INFO: [cached since 1.072e+04s ago] {'param_1': 5}
2025-03-13 20:40:55,147 INFO: ROLLBACK
2025-03-13 20:40:55,147 INFO: 127.0.0.1 - - [13/Mar/2025 20:40:55] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:40:58,491 INFO: 127.0.0.1 - - [13/Mar/2025 20:40:58] "OPTIONS /api/tasks/272 HTTP/1.1" 200 -
2025-03-13 20:40:58,494 INFO: BEGIN (implicit)
2025-03-13 20:40:58,495 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:40:58,495 INFO: [cached since 1.072e+04s ago] {'pk_1': 272}
2025-03-13 20:40:58,497 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-13 20:40:58,497 INFO: [cached since 3344s ago] {'description': "<p>**bold text**`console.log('Hello, World!')`&gt; This is a quote&gt; This is a quote&gt; This is a quoteIt is unclear to me exactly what to remove  ... (37 characters truncated) ...  use a diff to show me exactly what to remove, add and where in the code.Write your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p>", 'updated_at': datetime.datetime(2025, 3, 13, 19, 40, 58, 496793), 'task_id': 272}
2025-03-13 20:40:58,505 INFO: COMMIT
2025-03-13 20:40:58,506 INFO: Task ID 272 updated successfully. Updated fields: ['description']
2025-03-13 20:40:58,507 INFO: BEGIN (implicit)
2025-03-13 20:40:58,507 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:40:58,507 INFO: [cached since 3344s ago] {'pk_1': 272}
2025-03-13 20:40:58,509 INFO: ROLLBACK
2025-03-13 20:40:58,509 INFO: 127.0.0.1 - - [13/Mar/2025 20:40:58] "PATCH /api/tasks/272 HTTP/1.1" 200 -
2025-03-13 20:40:58,555 INFO: BEGIN (implicit)
2025-03-13 20:40:58,556 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:40:58,556 INFO: [cached since 1.073e+04s ago] {'pk_1': 7}
2025-03-13 20:40:58,557 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:40:58,557 INFO: [cached since 1.073e+04s ago] {}
2025-03-13 20:40:58,558 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:40:58,558 INFO: [cached since 1.073e+04s ago] {'param_1': 7}
2025-03-13 20:40:58,559 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:58,559 INFO: [cached since 1.073e+04s ago] {'param_1': 1}
2025-03-13 20:40:58,559 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:58,559 INFO: [cached since 1.073e+04s ago] {'param_1': 2}
2025-03-13 20:40:58,560 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:58,560 INFO: [cached since 1.073e+04s ago] {'param_1': 3}
2025-03-13 20:40:58,561 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:58,561 INFO: [cached since 1.073e+04s ago] {'param_1': 4}
2025-03-13 20:40:58,563 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:58,564 INFO: [cached since 1.073e+04s ago] {'param_1': 5}
2025-03-13 20:40:58,566 INFO: ROLLBACK
2025-03-13 20:40:58,567 INFO: 127.0.0.1 - - [13/Mar/2025 20:40:58] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:40:58,621 INFO: BEGIN (implicit)
2025-03-13 20:40:58,622 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:40:58,622 INFO: [cached since 1.073e+04s ago] {'pk_1': 7}
2025-03-13 20:40:58,623 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:40:58,623 INFO: [cached since 1.073e+04s ago] {}
2025-03-13 20:40:58,624 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:40:58,624 INFO: [cached since 1.073e+04s ago] {'param_1': 7}
2025-03-13 20:40:58,625 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:58,626 INFO: [cached since 1.073e+04s ago] {'param_1': 1}
2025-03-13 20:40:58,627 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:58,628 INFO: [cached since 1.073e+04s ago] {'param_1': 2}
2025-03-13 20:40:58,630 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:58,630 INFO: [cached since 1.073e+04s ago] {'param_1': 3}
2025-03-13 20:40:58,631 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:58,632 INFO: [cached since 1.073e+04s ago] {'param_1': 4}
2025-03-13 20:40:58,633 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:40:58,633 INFO: [cached since 1.073e+04s ago] {'param_1': 5}
2025-03-13 20:40:58,634 INFO: ROLLBACK
2025-03-13 20:40:58,634 INFO: 127.0.0.1 - - [13/Mar/2025 20:40:58] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:41:02,491 INFO: BEGIN (implicit)
2025-03-13 20:41:02,493 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:41:02,493 INFO: [cached since 1.073e+04s ago] {'pk_1': 272}
2025-03-13 20:41:02,496 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-13 20:41:02,496 INFO: [cached since 3348s ago] {'description': "<p>**bold text**`console.log('Hello, World!')`&gt; This is a quote&gt; This is a quote&gt; This is a quoteIt is unclear to me exactly what to remove  ... (190 characters truncated) ...  use a diff to show me exactly what to remove, add and where in the code.Write your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p>", 'updated_at': datetime.datetime(2025, 3, 13, 19, 41, 2, 495483), 'task_id': 272}
2025-03-13 20:41:02,507 INFO: COMMIT
2025-03-13 20:41:02,508 INFO: Task ID 272 updated successfully. Updated fields: ['description']
2025-03-13 20:41:02,509 INFO: BEGIN (implicit)
2025-03-13 20:41:02,509 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:41:02,509 INFO: [cached since 3348s ago] {'pk_1': 272}
2025-03-13 20:41:02,511 INFO: ROLLBACK
2025-03-13 20:41:02,511 INFO: 127.0.0.1 - - [13/Mar/2025 20:41:02] "PATCH /api/tasks/272 HTTP/1.1" 200 -
2025-03-13 20:41:02,549 INFO: BEGIN (implicit)
2025-03-13 20:41:02,550 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:41:02,550 INFO: [cached since 1.073e+04s ago] {'pk_1': 7}
2025-03-13 20:41:02,551 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:41:02,552 INFO: [cached since 1.073e+04s ago] {}
2025-03-13 20:41:02,553 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:41:02,553 INFO: [cached since 1.073e+04s ago] {'param_1': 7}
2025-03-13 20:41:02,554 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:02,555 INFO: [cached since 1.073e+04s ago] {'param_1': 1}
2025-03-13 20:41:02,556 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:02,556 INFO: [cached since 1.073e+04s ago] {'param_1': 2}
2025-03-13 20:41:02,558 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:02,558 INFO: [cached since 1.073e+04s ago] {'param_1': 3}
2025-03-13 20:41:02,559 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:02,559 INFO: [cached since 1.073e+04s ago] {'param_1': 4}
2025-03-13 20:41:02,561 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:02,561 INFO: [cached since 1.073e+04s ago] {'param_1': 5}
2025-03-13 20:41:02,563 INFO: ROLLBACK
2025-03-13 20:41:02,564 INFO: 127.0.0.1 - - [13/Mar/2025 20:41:02] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:41:02,612 INFO: BEGIN (implicit)
2025-03-13 20:41:02,612 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:41:02,613 INFO: [cached since 1.073e+04s ago] {'pk_1': 7}
2025-03-13 20:41:02,614 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:41:02,614 INFO: [cached since 1.073e+04s ago] {}
2025-03-13 20:41:02,615 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:41:02,615 INFO: [cached since 1.073e+04s ago] {'param_1': 7}
2025-03-13 20:41:02,617 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:02,617 INFO: [cached since 1.073e+04s ago] {'param_1': 1}
2025-03-13 20:41:02,618 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:02,618 INFO: [cached since 1.073e+04s ago] {'param_1': 2}
2025-03-13 20:41:02,620 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:02,620 INFO: [cached since 1.073e+04s ago] {'param_1': 3}
2025-03-13 20:41:02,622 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:02,622 INFO: [cached since 1.073e+04s ago] {'param_1': 4}
2025-03-13 20:41:02,623 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:02,623 INFO: [cached since 1.073e+04s ago] {'param_1': 5}
2025-03-13 20:41:02,625 INFO: ROLLBACK
2025-03-13 20:41:02,625 INFO: 127.0.0.1 - - [13/Mar/2025 20:41:02] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:41:12,611 INFO: 127.0.0.1 - - [13/Mar/2025 20:41:12] "OPTIONS /api/tasks/272 HTTP/1.1" 200 -
2025-03-13 20:41:12,615 INFO: BEGIN (implicit)
2025-03-13 20:41:12,616 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:41:12,616 INFO: [cached since 1.074e+04s ago] {'pk_1': 272}
2025-03-13 20:41:12,618 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-13 20:41:12,619 INFO: [cached since 3358s ago] {'description': "<p>**bold text**`console.log('Hello, World!')`&gt; This is a quote&gt; This is a quote&gt; This is a quoteIt is unclear to me exactly what to remove  ... (343 characters truncated) ...  use a diff to show me exactly what to remove, add and where in the code.Write your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p>", 'updated_at': datetime.datetime(2025, 3, 13, 19, 41, 12, 617689), 'task_id': 272}
2025-03-13 20:41:12,621 INFO: COMMIT
2025-03-13 20:41:12,622 INFO: Task ID 272 updated successfully. Updated fields: ['description']
2025-03-13 20:41:12,623 INFO: BEGIN (implicit)
2025-03-13 20:41:12,624 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:41:12,624 INFO: [cached since 3358s ago] {'pk_1': 272}
2025-03-13 20:41:12,626 INFO: ROLLBACK
2025-03-13 20:41:12,627 INFO: 127.0.0.1 - - [13/Mar/2025 20:41:12] "PATCH /api/tasks/272 HTTP/1.1" 200 -
2025-03-13 20:41:12,681 INFO: BEGIN (implicit)
2025-03-13 20:41:12,682 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:41:12,682 INFO: [cached since 1.074e+04s ago] {'pk_1': 7}
2025-03-13 20:41:12,683 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:41:12,683 INFO: [cached since 1.074e+04s ago] {}
2025-03-13 20:41:12,684 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:41:12,684 INFO: [cached since 1.074e+04s ago] {'param_1': 7}
2025-03-13 20:41:12,686 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:12,686 INFO: [cached since 1.074e+04s ago] {'param_1': 1}
2025-03-13 20:41:12,688 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:12,688 INFO: [cached since 1.074e+04s ago] {'param_1': 2}
2025-03-13 20:41:12,689 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:12,689 INFO: [cached since 1.074e+04s ago] {'param_1': 3}
2025-03-13 20:41:12,690 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:12,691 INFO: [cached since 1.074e+04s ago] {'param_1': 4}
2025-03-13 20:41:12,692 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:12,692 INFO: [cached since 1.074e+04s ago] {'param_1': 5}
2025-03-13 20:41:12,694 INFO: ROLLBACK
2025-03-13 20:41:12,695 INFO: 127.0.0.1 - - [13/Mar/2025 20:41:12] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:41:12,755 INFO: BEGIN (implicit)
2025-03-13 20:41:12,756 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:41:12,756 INFO: [cached since 1.074e+04s ago] {'pk_1': 7}
2025-03-13 20:41:12,757 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:41:12,757 INFO: [cached since 1.074e+04s ago] {}
2025-03-13 20:41:12,758 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:41:12,758 INFO: [cached since 1.074e+04s ago] {'param_1': 7}
2025-03-13 20:41:12,759 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:12,759 INFO: [cached since 1.074e+04s ago] {'param_1': 1}
2025-03-13 20:41:12,760 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:12,761 INFO: [cached since 1.074e+04s ago] {'param_1': 2}
2025-03-13 20:41:12,763 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:12,763 INFO: [cached since 1.074e+04s ago] {'param_1': 3}
2025-03-13 20:41:12,764 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:12,764 INFO: [cached since 1.074e+04s ago] {'param_1': 4}
2025-03-13 20:41:12,766 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:12,766 INFO: [cached since 1.074e+04s ago] {'param_1': 5}
2025-03-13 20:41:12,767 INFO: ROLLBACK
2025-03-13 20:41:12,768 INFO: 127.0.0.1 - - [13/Mar/2025 20:41:12] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:41:14,939 INFO: BEGIN (implicit)
2025-03-13 20:41:14,940 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:41:14,940 INFO: [cached since 1.074e+04s ago] {'pk_1': 272}
2025-03-13 20:41:14,942 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-13 20:41:14,942 INFO: [cached since 3360s ago] {'description': "<p>**bold text**`console.log('Hello, World!')`&gt; This is a quote&gt; This is a quote&gt; This is a quoteIt is unclear to me exactly what to remove  ... (496 characters truncated) ...  use a diff to show me exactly what to remove, add and where in the code.Write your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p>", 'updated_at': datetime.datetime(2025, 3, 13, 19, 41, 14, 941530), 'task_id': 272}
2025-03-13 20:41:14,944 INFO: COMMIT
2025-03-13 20:41:14,945 INFO: Task ID 272 updated successfully. Updated fields: ['description']
2025-03-13 20:41:14,946 INFO: BEGIN (implicit)
2025-03-13 20:41:14,947 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:41:14,947 INFO: [cached since 3360s ago] {'pk_1': 272}
2025-03-13 20:41:14,949 INFO: ROLLBACK
2025-03-13 20:41:14,950 INFO: 127.0.0.1 - - [13/Mar/2025 20:41:14] "PATCH /api/tasks/272 HTTP/1.1" 200 -
2025-03-13 20:41:15,004 INFO: BEGIN (implicit)
2025-03-13 20:41:15,005 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:41:15,005 INFO: [cached since 1.074e+04s ago] {'pk_1': 7}
2025-03-13 20:41:15,006 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:41:15,006 INFO: [cached since 1.074e+04s ago] {}
2025-03-13 20:41:15,007 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:41:15,007 INFO: [cached since 1.074e+04s ago] {'param_1': 7}
2025-03-13 20:41:15,007 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:15,008 INFO: [cached since 1.074e+04s ago] {'param_1': 1}
2025-03-13 20:41:15,008 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:15,008 INFO: [cached since 1.074e+04s ago] {'param_1': 2}
2025-03-13 20:41:15,009 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:15,009 INFO: [cached since 1.074e+04s ago] {'param_1': 3}
2025-03-13 20:41:15,010 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:15,010 INFO: [cached since 1.074e+04s ago] {'param_1': 4}
2025-03-13 20:41:15,011 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:15,011 INFO: [cached since 1.074e+04s ago] {'param_1': 5}
2025-03-13 20:41:15,014 INFO: ROLLBACK
2025-03-13 20:41:15,014 INFO: 127.0.0.1 - - [13/Mar/2025 20:41:15] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:41:15,066 INFO: BEGIN (implicit)
2025-03-13 20:41:15,066 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:41:15,066 INFO: [cached since 1.074e+04s ago] {'pk_1': 7}
2025-03-13 20:41:15,067 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:41:15,067 INFO: [cached since 1.074e+04s ago] {}
2025-03-13 20:41:15,068 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:41:15,068 INFO: [cached since 1.074e+04s ago] {'param_1': 7}
2025-03-13 20:41:15,069 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:15,070 INFO: [cached since 1.074e+04s ago] {'param_1': 1}
2025-03-13 20:41:15,070 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:15,070 INFO: [cached since 1.074e+04s ago] {'param_1': 2}
2025-03-13 20:41:15,071 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:15,071 INFO: [cached since 1.074e+04s ago] {'param_1': 3}
2025-03-13 20:41:15,073 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:15,073 INFO: [cached since 1.074e+04s ago] {'param_1': 4}
2025-03-13 20:41:15,074 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:15,074 INFO: [cached since 1.074e+04s ago] {'param_1': 5}
2025-03-13 20:41:15,075 INFO: ROLLBACK
2025-03-13 20:41:15,075 INFO: 127.0.0.1 - - [13/Mar/2025 20:41:15] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:41:23,647 INFO: 127.0.0.1 - - [13/Mar/2025 20:41:23] "OPTIONS /api/tasks/272 HTTP/1.1" 200 -
2025-03-13 20:41:23,652 INFO: BEGIN (implicit)
2025-03-13 20:41:23,653 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:41:23,653 INFO: [cached since 1.075e+04s ago] {'pk_1': 272}
2025-03-13 20:41:23,656 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-13 20:41:23,657 INFO: [cached since 3369s ago] {'description': '<p></p><p></p><p></p><p></p><p></p><p></p><p></p>', 'updated_at': datetime.datetime(2025, 3, 13, 19, 41, 23, 656028), 'task_id': 272}
2025-03-13 20:41:23,658 INFO: COMMIT
2025-03-13 20:41:23,660 INFO: Task ID 272 updated successfully. Updated fields: ['description']
2025-03-13 20:41:23,660 INFO: BEGIN (implicit)
2025-03-13 20:41:23,661 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-13 20:41:23,661 INFO: [cached since 3369s ago] {'pk_1': 272}
2025-03-13 20:41:23,664 INFO: ROLLBACK
2025-03-13 20:41:23,666 INFO: 127.0.0.1 - - [13/Mar/2025 20:41:23] "PATCH /api/tasks/272 HTTP/1.1" 200 -
2025-03-13 20:41:23,714 INFO: BEGIN (implicit)
2025-03-13 20:41:23,715 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:41:23,715 INFO: [cached since 1.075e+04s ago] {'pk_1': 7}
2025-03-13 20:41:23,716 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:41:23,716 INFO: [cached since 1.075e+04s ago] {}
2025-03-13 20:41:23,717 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:41:23,717 INFO: [cached since 1.075e+04s ago] {'param_1': 7}
2025-03-13 20:41:23,719 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:23,719 INFO: [cached since 1.075e+04s ago] {'param_1': 1}
2025-03-13 20:41:23,720 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:23,720 INFO: [cached since 1.075e+04s ago] {'param_1': 2}
2025-03-13 20:41:23,722 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:23,723 INFO: [cached since 1.075e+04s ago] {'param_1': 3}
2025-03-13 20:41:23,724 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:23,724 INFO: [cached since 1.075e+04s ago] {'param_1': 4}
2025-03-13 20:41:23,725 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:23,725 INFO: [cached since 1.075e+04s ago] {'param_1': 5}
2025-03-13 20:41:23,727 INFO: ROLLBACK
2025-03-13 20:41:23,728 INFO: 127.0.0.1 - - [13/Mar/2025 20:41:23] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-13 20:41:23,785 INFO: BEGIN (implicit)
2025-03-13 20:41:23,785 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-13 20:41:23,786 INFO: [cached since 1.075e+04s ago] {'pk_1': 7}
2025-03-13 20:41:23,787 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-13 20:41:23,788 INFO: [cached since 1.075e+04s ago] {}
2025-03-13 20:41:23,788 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-13 20:41:23,788 INFO: [cached since 1.075e+04s ago] {'param_1': 7}
2025-03-13 20:41:23,789 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:23,789 INFO: [cached since 1.075e+04s ago] {'param_1': 1}
2025-03-13 20:41:23,791 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:23,791 INFO: [cached since 1.075e+04s ago] {'param_1': 2}
2025-03-13 20:41:23,792 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:23,792 INFO: [cached since 1.075e+04s ago] {'param_1': 3}
2025-03-13 20:41:23,793 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:23,794 INFO: [cached since 1.075e+04s ago] {'param_1': 4}
2025-03-13 20:41:23,796 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-13 20:41:23,796 INFO: [cached since 1.075e+04s ago] {'param_1': 5}
2025-03-13 20:41:23,798 INFO: ROLLBACK
2025-03-13 20:41:23,799 INFO: 127.0.0.1 - - [13/Mar/2025 20:41:23] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-14 00:06:47,128 INFO: Application started in development mode
2025-03-14 00:06:47,129 DEBUG: This is a debug message from the api_routes module
2025-03-14 00:06:47,639 DEBUG: This is a debug message from the page_routes module
2025-03-14 00:06:47,646 INFO: Blueprints registered successfully
2025-03-14 00:06:47,976 INFO: [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2025-03-14 00:06:47,976 INFO: [33mPress CTRL+C to quit[0m
2025-03-14 00:06:47,976 INFO:  * Restarting with stat
2025-03-14 00:06:48,275 INFO: Application started in development mode
2025-03-14 00:06:48,275 DEBUG: This is a debug message from the api_routes module
2025-03-14 00:06:48,582 DEBUG: This is a debug message from the page_routes module
2025-03-14 00:06:48,589 INFO: Blueprints registered successfully
2025-03-14 00:06:48,602 WARNING:  * Debugger is active!
2025-03-14 00:06:48,612 INFO:  * Debugger PIN: 937-958-492
2025-03-14 00:06:49,720 INFO: 127.0.0.1 - - [14/Mar/2025 00:06:49] "GET /socket.io/?EIO=4&transport=polling&t=ykt10uh6 HTTP/1.1" 200 -
2025-03-14 00:06:49,733 INFO: 127.0.0.1 - - [14/Mar/2025 00:06:49] "POST /socket.io/?EIO=4&transport=polling&t=ykt1am88&sid=04pYveI0ScTm7Oi6AAAA HTTP/1.1" 200 -
2025-03-14 00:06:49,736 INFO: 127.0.0.1 - - [14/Mar/2025 00:06:49] "GET /socket.io/?EIO=4&transport=polling&t=ykt1fnfy&sid=04pYveI0ScTm7Oi6AAAA HTTP/1.1" 200 -
2025-03-14 00:06:49,743 INFO: 127.0.0.1 - - [14/Mar/2025 00:06:49] "GET /socket.io/?EIO=4&transport=polling&t=ykt1pyj3&sid=04pYveI0ScTm7Oi6AAAA HTTP/1.1" 200 -
2025-03-14 00:07:18,795 INFO: 127.0.0.1 - - [14/Mar/2025 00:07:18] "GET /socket.io/?EIO=4&transport=websocket&sid=04pYveI0ScTm7Oi6AAAA HTTP/1.1" 200 -
2025-03-14 00:07:19,281 INFO: 127.0.0.1 - - [14/Mar/2025 00:07:19] "GET /socket.io/?EIO=4&transport=polling&t=ylfu6fs4 HTTP/1.1" 200 -
2025-03-14 00:07:19,290 INFO: 127.0.0.1 - - [14/Mar/2025 00:07:19] "POST /socket.io/?EIO=4&transport=polling&t=ylfugybc&sid=upVPuPZSMvMoCR2iAAAC HTTP/1.1" 200 -
2025-03-14 00:07:19,291 INFO: 127.0.0.1 - - [14/Mar/2025 00:07:19] "GET /socket.io/?EIO=4&transport=polling&t=ylfugwdl&sid=upVPuPZSMvMoCR2iAAAC HTTP/1.1" 200 -
2025-03-14 00:07:19,342 INFO: Entering list_tasks_json route...
2025-03-14 00:07:19,395 INFO: 127.0.0.1 - - [14/Mar/2025 00:07:19] "GET /socket.io/?EIO=4&transport=polling&t=ylfwapgp&sid=upVPuPZSMvMoCR2iAAAC HTTP/1.1" 200 -
2025-03-14 00:07:19,395 DEBUG: Filters used in API: {'is_archived': False}
2025-03-14 00:07:19,396 DEBUG: Applying filters: {'is_archived': False}
2025-03-14 00:07:19,405 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-14 00:07:20,017 INFO: select pg_catalog.version()
2025-03-14 00:07:20,017 INFO: [raw sql] {}
2025-03-14 00:07:20,022 INFO: select current_schema()
2025-03-14 00:07:20,022 INFO: [raw sql] {}
2025-03-14 00:07:20,024 INFO: show standard_conforming_strings
2025-03-14 00:07:20,024 INFO: [raw sql] {}
2025-03-14 00:07:20,025 INFO: BEGIN (implicit)
2025-03-14 00:07:20,025 INFO: BEGIN (implicit)
2025-03-14 00:07:20,026 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-14 00:07:20,027 INFO: BEGIN (implicit)
2025-03-14 00:07:20,027 INFO: BEGIN (implicit)
2025-03-14 00:07:20,028 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-14 00:07:20,034 INFO: [generated in 0.00536s] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-14 00:07:20,029 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-14 00:07:20,033 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_estimate_type AS anon_1_task_estimate_type, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_time_estimate AS anon_1_task_time_estimate, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.estimate_type AS task_1_estimate_type, task_1.story_points AS task_1_story_points, task_1.time_estimate AS task_1_time_estimate, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.estimate_type AS task_estimate_type, task.story_points AS task_story_points, task.time_estimate AS task_time_estimate, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-14 00:07:20,029 INFO: [generated in 0.00216s] {}
2025-03-14 00:07:20,034 INFO: [cached since 0.005837s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-14 00:07:20,034 INFO: [generated in 0.00113s] {'param_1': 700, 'param_2': 0}
2025-03-14 00:07:20,114 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-14 00:07:20,114 INFO: [generated in 0.00043s] {}
2025-03-14 00:07:20,137 INFO: ROLLBACK
2025-03-14 00:07:20,139 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-14 00:07:20,144 INFO: [generated in 0.00510s] {'param_1': 1}
2025-03-14 00:07:20,144 INFO: 127.0.0.1 - - [14/Mar/2025 00:07:20] "GET /api/projects/miscellaneous HTTP/1.1" 200 -
2025-03-14 00:07:20,141 INFO: ROLLBACK
2025-03-14 00:07:20,147 INFO: 127.0.0.1 - - [14/Mar/2025 00:07:20] "GET /api/projects HTTP/1.1" 200 -
2025-03-14 00:07:20,158 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-14 00:07:20,158 INFO: BEGIN (implicit)
2025-03-14 00:07:20,159 INFO: [cached since 0.01935s ago] {'param_1': 2}
2025-03-14 00:07:20,160 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-14 00:07:20,161 INFO: [generated in 0.00107s] {'pk_1': 19}
