2025-02-23 20:35:16,098 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 20:35:16,104 INFO: [cached since 2.142e+04s ago] {'pk_1': 285}
2025-02-23 20:35:16,113 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x109e219d0>, 'task_type': 'Epic', 'project_id': 6, 'priority': 'Medium', 'story_points': 0, 'epic_priority': None, 'contributor_id': 5, 'completed_date': None, 'id': 285, 'is_archived': False, 'name': 'add text truncation to project names in task list', 'completed': False, 'sort_order': 0, 'created_at': datetime.datetime(2025, 2, 10, 8, 45, 47, 27805), 'description': 'kkkkkkkjjjjj\nlkajdlökjsdfölkjsdfölkjdf', 'status': 'Not Started', 'updated_at': datetime.datetime(2025, 2, 23, 10, 52, 54, 49019), 'parent_id': None}
2025-02-23 20:35:16,114 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-23 20:35:16,114 INFO: [cached since 2.142e+04s ago] {'pk_1': 6}
2025-02-23 20:35:16,116 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-23 20:35:16,116 INFO: [cached since 70.93s ago] {'pk_1': 5}
2025-02-23 20:35:16,117 INFO: Task ID 285 fetched with parent ID: None
2025-02-23 20:35:16,117 INFO: Task with ID 285 fetched successfully.
2025-02-23 20:35:16,117 DEBUG: Fetched Task Data: {'id': 285, 'name': 'add text truncation to project names in task list', 'description': 'kkkkkkkjjjjj\nlkajdlökjsdfölkjsdfölkjdf', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-23T10:52:54.049019', 'contributor_name': 'Fredrik Cederborg', 'parent': None}
2025-02-23 20:35:16,117 INFO: Task details fetched successfully for Task ID 285.
2025-02-23 20:35:16,118 INFO: ROLLBACK
2025-02-23 20:35:16,118 INFO: 127.0.0.1 - - [23/Feb/2025 20:35:16] "GET /api/tasks/285 HTTP/1.1" 200 -
2025-02-23 20:45:53,086 INFO: 127.0.0.1 - - [23/Feb/2025 20:45:53] "OPTIONS /api/tasks/285 HTTP/1.1" 200 -
2025-02-23 20:45:53,103 INFO: BEGIN (implicit)
2025-02-23 20:45:53,108 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 20:45:53,108 INFO: [cached since 2.206e+04s ago] {'pk_1': 285}
2025-02-23 20:45:53,121 DEBUG: Received update payload for Task ID 285: {'status': 'In Progress'}
2025-02-23 20:45:53,122 DEBUG: Updated status for Task ID 285 to: In Progress
2025-02-23 20:45:53,125 INFO: UPDATE task SET status=%(status)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-02-23 20:45:53,125 INFO: [generated in 0.00043s] {'status': 'In Progress', 'updated_at': datetime.datetime(2025, 2, 23, 19, 45, 53, 122984), 'task_id': 285}
2025-02-23 20:45:53,136 INFO: COMMIT
2025-02-23 20:45:53,139 INFO: Task ID 285 updated successfully. Updated fields: ['status']
2025-02-23 20:45:53,139 INFO: BEGIN (implicit)
2025-02-23 20:45:53,139 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 20:45:53,139 INFO: [cached since 2.206e+04s ago] {'pk_1': 285}
2025-02-23 20:45:53,143 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-23 20:45:53,143 INFO: [cached since 708s ago] {'pk_1': 5}
2025-02-23 20:45:53,146 INFO: UPDATE task SET updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-02-23 20:45:53,148 INFO: [cached since 2.206e+04s ago] {'updated_at': datetime.datetime(2025, 2, 23, 19, 45, 53, 146352), 'task_id': 285}
2025-02-23 20:45:53,155 INFO: COMMIT
2025-02-23 20:45:53,156 INFO: Task ID 285 updated successfully. Updated fields: ['status']
2025-02-23 20:45:53,157 INFO: BEGIN (implicit)
2025-02-23 20:45:53,157 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 20:45:53,157 INFO: [cached since 2.206e+04s ago] {'pk_1': 285}
2025-02-23 20:45:53,161 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-23 20:45:53,162 INFO: [cached since 708s ago] {'pk_1': 5}
2025-02-23 20:45:53,166 INFO: ROLLBACK
2025-02-23 20:45:53,169 INFO: 127.0.0.1 - - [23/Feb/2025 20:45:53] "PATCH /api/tasks/285 HTTP/1.1" 200 -
2025-02-23 20:45:56,138 INFO: BEGIN (implicit)
2025-02-23 20:45:56,139 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 20:45:56,139 INFO: [cached since 2.206e+04s ago] {'pk_1': 285}
2025-02-23 20:45:56,142 DEBUG: Received update payload for Task ID 285: {'status': 'Blocked'}
2025-02-23 20:45:56,142 INFO: Task ID 285 - No changes detected, skipping database commit.
2025-02-23 20:45:56,143 INFO: Task ID 285 - No changes detected, skipping database commit.
2025-02-23 20:45:56,143 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-23 20:45:56,143 INFO: [cached since 711s ago] {'pk_1': 5}
2025-02-23 20:45:56,147 INFO: ROLLBACK
2025-02-23 20:45:56,148 INFO: 127.0.0.1 - - [23/Feb/2025 20:45:56] "PATCH /api/tasks/285 HTTP/1.1" 200 -
2025-02-23 20:45:58,480 INFO: 127.0.0.1 - - [23/Feb/2025 20:45:58] "OPTIONS /api/tasks/285 HTTP/1.1" 200 -
2025-02-23 20:45:58,486 INFO: BEGIN (implicit)
2025-02-23 20:45:58,488 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 20:45:58,489 INFO: [cached since 2.207e+04s ago] {'pk_1': 285}
2025-02-23 20:45:58,493 DEBUG: Received update payload for Task ID 285: {'status': 'Completed'}
2025-02-23 20:45:58,493 DEBUG: Updated status for Task ID 285 to: Completed
2025-02-23 20:45:58,497 INFO: UPDATE task SET completed=%(completed)s, status=%(status)s, updated_at=%(updated_at)s, completed_date=%(completed_date)s WHERE task.id = %(task_id)s
2025-02-23 20:45:58,497 INFO: [generated in 0.00046s] {'completed': True, 'status': 'Completed', 'updated_at': datetime.datetime(2025, 2, 23, 19, 45, 58, 493971), 'completed_date': datetime.datetime(2025, 2, 23, 19, 45, 58, 493577), 'task_id': 285}
2025-02-23 20:45:58,499 INFO: COMMIT
2025-02-23 20:45:58,500 INFO: Task ID 285 updated successfully. Updated fields: ['status']
2025-02-23 20:45:58,500 INFO: BEGIN (implicit)
2025-02-23 20:45:58,500 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 20:45:58,500 INFO: [cached since 2.207e+04s ago] {'pk_1': 285}
2025-02-23 20:45:58,502 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-23 20:45:58,502 INFO: [cached since 713.3s ago] {'pk_1': 5}
2025-02-23 20:45:58,508 INFO: UPDATE task SET updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-02-23 20:45:58,513 INFO: [cached since 2.207e+04s ago] {'updated_at': datetime.datetime(2025, 2, 23, 19, 45, 58, 508585), 'task_id': 285}
2025-02-23 20:45:58,516 INFO: COMMIT
2025-02-23 20:45:58,517 INFO: Task ID 285 updated successfully. Updated fields: ['status']
2025-02-23 20:45:58,517 INFO: BEGIN (implicit)
2025-02-23 20:45:58,517 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 20:45:58,518 INFO: [cached since 2.207e+04s ago] {'pk_1': 285}
2025-02-23 20:45:58,519 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-23 20:45:58,519 INFO: [cached since 713.4s ago] {'pk_1': 5}
2025-02-23 20:45:58,520 INFO: ROLLBACK
2025-02-23 20:45:58,520 INFO: 127.0.0.1 - - [23/Feb/2025 20:45:58] "PATCH /api/tasks/285 HTTP/1.1" 200 -
2025-02-23 20:46:05,164 INFO: 127.0.0.1 - - [23/Feb/2025 20:46:05] "OPTIONS /api/tasks/285 HTTP/1.1" 200 -
2025-02-23 20:46:05,258 INFO: BEGIN (implicit)
2025-02-23 20:46:05,259 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 20:46:05,259 INFO: [cached since 2.207e+04s ago] {'pk_1': 285}
2025-02-23 20:46:05,263 DEBUG: Received update payload for Task ID 285: {'status': 'Not Started'}
2025-02-23 20:46:05,264 DEBUG: Updated status for Task ID 285 to: Not Started
2025-02-23 20:46:05,264 INFO: UPDATE task SET completed=%(completed)s, status=%(status)s, updated_at=%(updated_at)s, completed_date=%(completed_date)s WHERE task.id = %(task_id)s
2025-02-23 20:46:05,265 INFO: [cached since 6.768s ago] {'completed': False, 'status': 'Not Started', 'updated_at': datetime.datetime(2025, 2, 23, 19, 46, 5, 264178), 'completed_date': None, 'task_id': 285}
2025-02-23 20:46:05,277 INFO: COMMIT
2025-02-23 20:46:05,283 INFO: Task ID 285 updated successfully. Updated fields: ['status']
2025-02-23 20:46:05,291 INFO: BEGIN (implicit)
2025-02-23 20:46:05,297 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 20:46:05,299 INFO: [cached since 2.207e+04s ago] {'pk_1': 285}
2025-02-23 20:46:05,302 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-23 20:46:05,302 INFO: [cached since 720.1s ago] {'pk_1': 5}
2025-02-23 20:46:05,303 INFO: UPDATE task SET updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-02-23 20:46:05,308 INFO: [cached since 2.207e+04s ago] {'updated_at': datetime.datetime(2025, 2, 23, 19, 46, 5, 303235), 'task_id': 285}
2025-02-23 20:46:05,313 INFO: COMMIT
2025-02-23 20:46:05,314 INFO: Task ID 285 updated successfully. Updated fields: ['status']
2025-02-23 20:46:05,326 INFO: BEGIN (implicit)
2025-02-23 20:46:05,327 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 20:46:05,327 INFO: [cached since 2.207e+04s ago] {'pk_1': 285}
2025-02-23 20:46:05,345 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-23 20:46:05,346 INFO: [cached since 720.2s ago] {'pk_1': 5}
2025-02-23 20:46:05,351 INFO: ROLLBACK
2025-02-23 20:46:05,356 INFO: 127.0.0.1 - - [23/Feb/2025 20:46:05] "PATCH /api/tasks/285 HTTP/1.1" 200 -
2025-02-23 20:47:03,096 INFO: 127.0.0.1 - - [23/Feb/2025 20:47:03] "OPTIONS /api/tasks/285 HTTP/1.1" 200 -
2025-02-23 20:47:03,146 INFO: BEGIN (implicit)
2025-02-23 20:47:03,147 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 20:47:03,147 INFO: [cached since 2.213e+04s ago] {'pk_1': 285}
2025-02-23 20:47:03,156 DEBUG: Received update payload for Task ID 285: {'status': 'In Progress'}
2025-02-23 20:47:03,156 DEBUG: Updated status for Task ID 285 to: In Progress
2025-02-23 20:47:03,157 INFO: UPDATE task SET status=%(status)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-02-23 20:47:03,157 INFO: [cached since 70.03s ago] {'status': 'In Progress', 'updated_at': datetime.datetime(2025, 2, 23, 19, 47, 3, 156670), 'task_id': 285}
2025-02-23 20:47:03,160 INFO: COMMIT
2025-02-23 20:47:03,161 INFO: Task ID 285 updated successfully. Updated fields: ['status']
2025-02-23 20:47:03,162 INFO: BEGIN (implicit)
2025-02-23 20:47:03,162 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 20:47:03,162 INFO: [cached since 2.213e+04s ago] {'pk_1': 285}
2025-02-23 20:47:03,165 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-23 20:47:03,165 INFO: [cached since 778s ago] {'pk_1': 5}
2025-02-23 20:47:03,166 INFO: UPDATE task SET updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-02-23 20:47:03,168 INFO: [cached since 2.213e+04s ago] {'updated_at': datetime.datetime(2025, 2, 23, 19, 47, 3, 166158), 'task_id': 285}
2025-02-23 20:47:03,173 INFO: COMMIT
2025-02-23 20:47:03,175 INFO: Task ID 285 updated successfully. Updated fields: ['status']
2025-02-23 20:47:03,175 INFO: BEGIN (implicit)
2025-02-23 20:47:03,175 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 20:47:03,176 INFO: [cached since 2.213e+04s ago] {'pk_1': 285}
2025-02-23 20:47:03,178 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-23 20:47:03,178 INFO: [cached since 778s ago] {'pk_1': 5}
2025-02-23 20:47:03,179 INFO: ROLLBACK
2025-02-23 20:47:03,179 INFO: 127.0.0.1 - - [23/Feb/2025 20:47:03] "PATCH /api/tasks/285 HTTP/1.1" 200 -
2025-02-23 20:47:17,575 INFO: 127.0.0.1 - - [23/Feb/2025 20:47:17] "OPTIONS /api/tasks/285 HTTP/1.1" 200 -
2025-02-23 20:47:17,587 INFO: BEGIN (implicit)
2025-02-23 20:47:17,588 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 20:47:17,588 INFO: [cached since 2.214e+04s ago] {'pk_1': 285}
2025-02-23 20:47:17,595 DEBUG: Received update payload for Task ID 285: {'status': 'Blocked'}
2025-02-23 20:47:17,595 INFO: Task ID 285 - No changes detected, skipping database commit.
2025-02-23 20:47:17,595 INFO: Task ID 285 - No changes detected, skipping database commit.
2025-02-23 20:47:17,598 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-23 20:47:17,599 INFO: [cached since 792.4s ago] {'pk_1': 5}
2025-02-23 20:47:17,601 INFO: ROLLBACK
2025-02-23 20:47:17,603 INFO: 127.0.0.1 - - [23/Feb/2025 20:47:17] "PATCH /api/tasks/285 HTTP/1.1" 200 -
2025-02-23 20:47:24,107 INFO: 127.0.0.1 - - [23/Feb/2025 20:47:24] "OPTIONS /api/tasks/285 HTTP/1.1" 200 -
2025-02-23 20:47:24,112 INFO: BEGIN (implicit)
2025-02-23 20:47:24,112 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 20:47:24,113 INFO: [cached since 2.215e+04s ago] {'pk_1': 285}
2025-02-23 20:47:24,117 DEBUG: Received update payload for Task ID 285: {'status': 'Completed'}
2025-02-23 20:47:24,118 DEBUG: Updated status for Task ID 285 to: Completed
2025-02-23 20:47:24,121 INFO: UPDATE task SET completed=%(completed)s, status=%(status)s, updated_at=%(updated_at)s, completed_date=%(completed_date)s WHERE task.id = %(task_id)s
2025-02-23 20:47:24,121 INFO: [cached since 85.63s ago] {'completed': True, 'status': 'Completed', 'updated_at': datetime.datetime(2025, 2, 23, 19, 47, 24, 119115), 'completed_date': datetime.datetime(2025, 2, 23, 19, 47, 24, 118835), 'task_id': 285}
2025-02-23 20:47:24,124 INFO: COMMIT
2025-02-23 20:47:24,125 INFO: Task ID 285 updated successfully. Updated fields: ['status']
2025-02-23 20:47:24,127 INFO: BEGIN (implicit)
2025-02-23 20:47:24,131 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 20:47:24,133 INFO: [cached since 2.215e+04s ago] {'pk_1': 285}
2025-02-23 20:47:24,140 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-23 20:47:24,142 INFO: [cached since 799s ago] {'pk_1': 5}
2025-02-23 20:47:24,145 INFO: UPDATE task SET updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-02-23 20:47:24,146 INFO: [cached since 2.215e+04s ago] {'updated_at': datetime.datetime(2025, 2, 23, 19, 47, 24, 144673), 'task_id': 285}
2025-02-23 20:47:24,152 INFO: COMMIT
2025-02-23 20:47:24,155 INFO: Task ID 285 updated successfully. Updated fields: ['status']
2025-02-23 20:47:24,156 INFO: BEGIN (implicit)
2025-02-23 20:47:24,158 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 20:47:24,159 INFO: [cached since 2.215e+04s ago] {'pk_1': 285}
2025-02-23 20:47:24,164 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-23 20:47:24,165 INFO: [cached since 799s ago] {'pk_1': 5}
2025-02-23 20:47:24,168 INFO: ROLLBACK
2025-02-23 20:47:24,169 INFO: 127.0.0.1 - - [23/Feb/2025 20:47:24] "PATCH /api/tasks/285 HTTP/1.1" 200 -
2025-02-23 20:48:30,935 INFO: 127.0.0.1 - - [23/Feb/2025 20:48:30] "OPTIONS /api/tasks/285 HTTP/1.1" 200 -
2025-02-23 20:48:30,960 INFO: BEGIN (implicit)
2025-02-23 20:48:30,962 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 20:48:30,962 INFO: [cached since 2.222e+04s ago] {'pk_1': 285}
2025-02-23 20:48:30,968 DEBUG: Received update payload for Task ID 285: {'status': 'Blocked'}
2025-02-23 20:48:30,968 INFO: Task ID 285 - No changes detected, skipping database commit.
2025-02-23 20:48:30,968 INFO: Task ID 285 - No changes detected, skipping database commit.
2025-02-23 20:48:30,972 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-23 20:48:30,972 INFO: [cached since 865.8s ago] {'pk_1': 5}
2025-02-23 20:48:30,975 INFO: ROLLBACK
2025-02-23 20:48:30,976 INFO: 127.0.0.1 - - [23/Feb/2025 20:48:30] "PATCH /api/tasks/285 HTTP/1.1" 200 -
2025-02-23 20:49:07,979 INFO: 127.0.0.1 - - [23/Feb/2025 20:49:07] "OPTIONS /api/tasks/285 HTTP/1.1" 200 -
2025-02-23 20:49:07,991 INFO: BEGIN (implicit)
2025-02-23 20:49:07,993 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 20:49:07,994 INFO: [cached since 2.225e+04s ago] {'pk_1': 285}
2025-02-23 20:49:07,998 DEBUG: Received update payload for Task ID 285: {'status': 'In Progress'}
2025-02-23 20:49:07,999 DEBUG: Updated status for Task ID 285 to: In Progress
2025-02-23 20:49:07,999 INFO: UPDATE task SET completed=%(completed)s, status=%(status)s, updated_at=%(updated_at)s, completed_date=%(completed_date)s WHERE task.id = %(task_id)s
2025-02-23 20:49:08,000 INFO: [cached since 189.5s ago] {'completed': False, 'status': 'In Progress', 'updated_at': datetime.datetime(2025, 2, 23, 19, 49, 7, 999117), 'completed_date': None, 'task_id': 285}
2025-02-23 20:49:08,006 INFO: COMMIT
2025-02-23 20:49:08,009 INFO: Task ID 285 updated successfully. Updated fields: ['status']
2025-02-23 20:49:08,012 INFO: BEGIN (implicit)
2025-02-23 20:49:08,014 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 20:49:08,015 INFO: [cached since 2.225e+04s ago] {'pk_1': 285}
2025-02-23 20:49:08,018 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-23 20:49:08,018 INFO: [cached since 902.9s ago] {'pk_1': 5}
2025-02-23 20:49:08,021 INFO: UPDATE task SET updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-02-23 20:49:08,023 INFO: [cached since 2.225e+04s ago] {'updated_at': datetime.datetime(2025, 2, 23, 19, 49, 8, 20674), 'task_id': 285}
2025-02-23 20:49:08,027 INFO: COMMIT
2025-02-23 20:49:08,032 INFO: Task ID 285 updated successfully. Updated fields: ['status']
2025-02-23 20:49:08,033 INFO: BEGIN (implicit)
2025-02-23 20:49:08,033 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 20:49:08,033 INFO: [cached since 2.225e+04s ago] {'pk_1': 285}
2025-02-23 20:49:08,039 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-23 20:49:08,040 INFO: [cached since 902.9s ago] {'pk_1': 5}
2025-02-23 20:49:08,041 INFO: ROLLBACK
2025-02-23 20:49:08,042 INFO: 127.0.0.1 - - [23/Feb/2025 20:49:08] "PATCH /api/tasks/285 HTTP/1.1" 200 -
2025-02-23 20:50:03,147 INFO: 127.0.0.1 - - [23/Feb/2025 20:50:03] "OPTIONS /api/tasks/285 HTTP/1.1" 200 -
2025-02-23 20:50:03,162 INFO: BEGIN (implicit)
2025-02-23 20:50:03,167 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 20:50:03,168 INFO: [cached since 2.231e+04s ago] {'pk_1': 285}
2025-02-23 20:50:03,179 DEBUG: Received update payload for Task ID 285: {'status': 'Not Started'}
2025-02-23 20:50:03,179 DEBUG: Updated status for Task ID 285 to: Not Started
2025-02-23 20:50:03,180 INFO: UPDATE task SET status=%(status)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-02-23 20:50:03,181 INFO: [cached since 250.1s ago] {'status': 'Not Started', 'updated_at': datetime.datetime(2025, 2, 23, 19, 50, 3, 179805), 'task_id': 285}
2025-02-23 20:50:03,188 INFO: COMMIT
2025-02-23 20:50:03,189 INFO: Task ID 285 updated successfully. Updated fields: ['status']
2025-02-23 20:50:03,189 INFO: BEGIN (implicit)
2025-02-23 20:50:03,189 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 20:50:03,189 INFO: [cached since 2.231e+04s ago] {'pk_1': 285}
2025-02-23 20:50:03,191 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-23 20:50:03,191 INFO: [cached since 958s ago] {'pk_1': 5}
2025-02-23 20:50:03,193 INFO: UPDATE task SET updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-02-23 20:50:03,202 INFO: [cached since 2.231e+04s ago] {'updated_at': datetime.datetime(2025, 2, 23, 19, 50, 3, 193034), 'task_id': 285}
2025-02-23 20:50:03,205 INFO: COMMIT
2025-02-23 20:50:03,206 INFO: Task ID 285 updated successfully. Updated fields: ['status']
2025-02-23 20:50:03,209 INFO: BEGIN (implicit)
2025-02-23 20:50:03,211 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 20:50:03,211 INFO: [cached since 2.231e+04s ago] {'pk_1': 285}
2025-02-23 20:50:03,218 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-23 20:50:03,219 INFO: [cached since 958.1s ago] {'pk_1': 5}
2025-02-23 20:50:03,222 INFO: ROLLBACK
2025-02-23 20:50:03,223 INFO: 127.0.0.1 - - [23/Feb/2025 20:50:03] "PATCH /api/tasks/285 HTTP/1.1" 200 -
2025-02-23 20:51:05,995 INFO: BEGIN (implicit)
2025-02-23 20:51:05,997 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-23 20:51:05,997 INFO: [cached since 2.239e+04s ago] {'pk_1': 7}
2025-02-23 20:51:06,015 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 20:51:06,016 INFO: [cached since 2.239e+04s ago] {}
2025-02-23 20:51:06,019 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-23 20:51:06,019 INFO: [cached since 2.239e+04s ago] {'param_1': 7}
2025-02-23 20:51:06,026 INFO: ROLLBACK
2025-02-23 20:51:06,027 INFO: 127.0.0.1 - - [23/Feb/2025 20:51:06] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-02-23 20:51:06,030 INFO: 127.0.0.1 - - [23/Feb/2025 20:51:06] "OPTIONS /api/tasks/284 HTTP/1.1" 200 -
2025-02-23 20:51:06,033 INFO: BEGIN (implicit)
2025-02-23 20:51:06,033 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 20:51:06,033 INFO: [cached since 2.237e+04s ago] {'pk_1': 284}
2025-02-23 20:51:06,035 DEBUG: Received update payload for Task ID 284: {'contributor_id': '4'}
2025-02-23 20:51:06,035 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-23 20:51:06,035 INFO: [cached since 2.237e+04s ago] {'pk_1': 4}
2025-02-23 20:51:06,037 INFO: UPDATE task SET contributor_id=%(contributor_id)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-02-23 20:51:06,037 INFO: [cached since 2.237e+04s ago] {'contributor_id': 4, 'updated_at': datetime.datetime(2025, 2, 23, 19, 51, 6, 37053, tzinfo=datetime.timezone.utc), 'task_id': 284}
2025-02-23 20:51:06,045 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-23 20:51:06,045 INFO: [cached since 2.237e+04s ago] {'pk_1': 7}
2025-02-23 20:51:06,046 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-23 20:51:06,046 INFO: [cached since 2.239e+04s ago] {'param_1': 7}
2025-02-23 20:51:06,047 INFO: INSERT INTO project_contributor (project_id, contributor_id) VALUES (%(project_id)s, %(contributor_id)s)
2025-02-23 20:51:06,048 INFO: [cached since 2.171e+04s ago] {'project_id': 7, 'contributor_id': 4}
2025-02-23 20:51:06,049 INFO: COMMIT
2025-02-23 20:51:06,050 INFO: BEGIN (implicit)
2025-02-23 20:51:06,051 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-23 20:51:06,051 INFO: [cached since 2.237e+04s ago] {'pk_1': 4}
2025-02-23 20:51:06,053 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 20:51:06,053 INFO: [cached since 2.237e+04s ago] {'pk_1': 284}
2025-02-23 20:51:06,055 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-23 20:51:06,055 INFO: [cached since 2.237e+04s ago] {'pk_1': 7}
2025-02-23 20:51:06,055 INFO: ✅ Contributor 4 added to Project 7
2025-02-23 20:51:06,058 INFO: UPDATE task SET updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-02-23 20:51:06,058 INFO: [cached since 2.237e+04s ago] {'updated_at': datetime.datetime(2025, 2, 23, 19, 51, 6, 57729), 'task_id': 284}
2025-02-23 20:51:06,112 INFO: COMMIT
2025-02-23 20:51:06,113 INFO: Task ID 284 updated successfully. Updated fields: ['contributor_id']
2025-02-23 20:51:06,115 INFO: BEGIN (implicit)
2025-02-23 20:51:06,116 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 20:51:06,116 INFO: [cached since 2.237e+04s ago] {'pk_1': 284}
2025-02-23 20:51:06,122 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-23 20:51:06,130 INFO: [cached since 2.237e+04s ago] {'pk_1': 4}
2025-02-23 20:51:06,137 INFO: UPDATE task SET updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-02-23 20:51:06,143 INFO: [cached since 2.237e+04s ago] {'updated_at': datetime.datetime(2025, 2, 23, 19, 51, 6, 136664), 'task_id': 284}
2025-02-23 20:51:06,151 INFO: COMMIT
2025-02-23 20:51:06,151 INFO: Task ID 284 updated successfully. Updated fields: ['contributor_id']
2025-02-23 20:51:06,151 INFO: BEGIN (implicit)
2025-02-23 20:51:06,152 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 20:51:06,152 INFO: [cached since 2.237e+04s ago] {'pk_1': 284}
2025-02-23 20:51:06,153 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-23 20:51:06,153 INFO: [cached since 2.237e+04s ago] {'pk_1': 4}
2025-02-23 20:51:06,153 INFO: ROLLBACK
2025-02-23 20:51:06,153 INFO: 127.0.0.1 - - [23/Feb/2025 20:51:06] "PATCH /api/tasks/284 HTTP/1.1" 200 -
2025-02-23 20:51:17,437 INFO: 127.0.0.1 - - [23/Feb/2025 20:51:17] "GET /socket.io/?EIO=4&transport=polling&t=1o0c28tt HTTP/1.1" 200 -
2025-02-23 20:51:17,447 INFO: 127.0.0.1 - - [23/Feb/2025 20:51:17] "POST /socket.io/?EIO=4&transport=polling&t=1o0civ29&sid=HcUtglwWvMkDZh4_AAE0 HTTP/1.1" 200 -
2025-02-23 20:51:17,481 INFO: 127.0.0.1 - - [23/Feb/2025 20:51:17] "GET /socket.io/?EIO=4&transport=polling&t=1o0cjgk3&sid=HcUtglwWvMkDZh4_AAE0 HTTP/1.1" 200 -
2025-02-23 20:51:17,482 INFO: 127.0.0.1 - - [23/Feb/2025 20:51:17] "GET /socket.io/?EIO=4&transport=websocket&sid=FWmxA_cFmuITCy0JAAEy HTTP/1.1" 200 -
2025-02-23 20:51:17,528 INFO: 127.0.0.1 - - [23/Feb/2025 20:51:17] "GET /socket.io/?EIO=4&transport=polling&t=1o0esuu7&sid=HcUtglwWvMkDZh4_AAE0 HTTP/1.1" 200 -
2025-02-23 20:51:17,811 INFO: 127.0.0.1 - - [23/Feb/2025 20:51:17] "GET /socket.io/?EIO=4&transport=polling&t=1o0mkqa1 HTTP/1.1" 200 -
2025-02-23 20:51:17,827 INFO: 127.0.0.1 - - [23/Feb/2025 20:51:17] "POST /socket.io/?EIO=4&transport=polling&t=1o0n46vq&sid=jEbsNFhBhVpD-1QJAAE2 HTTP/1.1" 200 -
2025-02-23 20:51:17,831 INFO: 127.0.0.1 - - [23/Feb/2025 20:51:17] "GET /socket.io/?EIO=4&transport=polling&t=1o0n4cst&sid=jEbsNFhBhVpD-1QJAAE2 HTTP/1.1" 200 -
2025-02-23 20:51:17,883 INFO: BEGIN (implicit)
2025-02-23 20:51:17,892 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 20:51:17,893 INFO: [cached since 2.241e+04s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 20:51:17,893 INFO: BEGIN (implicit)
2025-02-23 20:51:17,893 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 20:51:17,894 INFO: [cached since 2.241e+04s ago] {}
2025-02-23 20:51:17,910 INFO: Entering list_tasks_json route...
2025-02-23 20:51:17,912 DEBUG: Filters used in API: {'is_archived': False}
2025-02-23 20:51:17,953 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 20:51:17,955 INFO: ROLLBACK
2025-02-23 20:51:17,956 INFO: BEGIN (implicit)
2025-02-23 20:51:17,957 INFO: 127.0.0.1 - - [23/Feb/2025 20:51:17] "GET /socket.io/?EIO=4&transport=polling&t=1o0oclur&sid=jEbsNFhBhVpD-1QJAAE2 HTTP/1.1" 200 -
2025-02-23 20:51:17,961 DEBUG: Applying filters: {'is_archived': False}
2025-02-23 20:51:17,963 INFO: [cached since 2.241e+04s ago] {}
2025-02-23 20:51:17,966 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 20:51:17,966 INFO: 127.0.0.1 - - [23/Feb/2025 20:51:17] "GET /api/contributors HTTP/1.1" 200 -
2025-02-23 20:51:17,996 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-23 20:51:18,026 INFO: [cached since 2.241e+04s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 20:51:18,031 INFO: ROLLBACK
2025-02-23 20:51:18,048 INFO: BEGIN (implicit)
2025-02-23 20:51:18,053 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-23 20:51:18,065 INFO: 127.0.0.1 - - [23/Feb/2025 20:51:18] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 20:51:18,066 INFO: [cached since 2.241e+04s ago] {'param_1': 110, 'param_2': 0}
2025-02-23 20:51:18,076 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 20:51:18,077 INFO: [cached since 2.241e+04s ago] {}
2025-02-23 20:51:18,092 INFO: ROLLBACK
2025-02-23 20:51:18,095 INFO: BEGIN (implicit)
2025-02-23 20:51:18,095 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-23 20:51:18,095 INFO: [cached since 2.241e+04s ago] {'pk_1': 19}
2025-02-23 20:51:18,097 INFO: 127.0.0.1 - - [23/Feb/2025 20:51:18] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 20:51:18,127 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 20:51:18,128 INFO: [cached since 2.241e+04s ago] {}
2025-02-23 20:51:18,136 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-23 20:51:18,137 INFO: [cached since 2.241e+04s ago] {'param_1': 19}
2025-02-23 20:51:18,152 INFO: ROLLBACK
2025-02-23 20:51:18,154 INFO: 127.0.0.1 - - [23/Feb/2025 20:51:18] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-02-23 20:51:18,259 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-23 20:51:18,259 INFO: [cached since 2.241e+04s ago] {}
2025-02-23 20:51:18,262 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-23 20:51:18,262 INFO: [cached since 2.241e+04s ago] {}
2025-02-23 20:51:18,271 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 20:51:18,271 INFO: [cached since 2.241e+04s ago] {}
2025-02-23 20:51:18,276 INFO: ROLLBACK
2025-02-23 20:51:18,278 INFO: 127.0.0.1 - - [23/Feb/2025 20:51:18] "GET /api/tasks HTTP/1.1" 200 -
2025-02-23 21:14:36,422 INFO:  * Detected change in '/Users/fredrik_cederborg/CodingProjects/PMS_react-next_version/app/routes/api_routes.py', reloading
2025-02-23 21:14:37,420 INFO: Application started in development mode
2025-02-23 21:14:37,423 ERROR: Error during application initialization: expected 'except' or 'finally' block (api_routes.py, line 302)
2025-02-23 21:15:30,187 INFO: Application started in development mode
2025-02-23 21:15:30,192 DEBUG: This is a debug message from the api_routes module
2025-02-23 21:15:30,712 DEBUG: This is a debug message from the page_routes module
2025-02-23 21:15:30,719 INFO: Blueprints registered successfully
2025-02-23 21:15:30,764 INFO: [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2025-02-23 21:15:30,764 INFO: [33mPress CTRL+C to quit[0m
2025-02-23 21:15:30,764 INFO:  * Restarting with stat
2025-02-23 21:15:31,154 INFO: Application started in development mode
2025-02-23 21:15:31,154 DEBUG: This is a debug message from the api_routes module
2025-02-23 21:15:31,500 DEBUG: This is a debug message from the page_routes module
2025-02-23 21:15:31,506 INFO: Blueprints registered successfully
2025-02-23 21:15:31,520 WARNING:  * Debugger is active!
2025-02-23 21:15:31,532 INFO:  * Debugger PIN: 602-012-967
2025-02-23 21:15:31,551 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:31] "GET /socket.io/?EIO=4&transport=polling&t=2j5pypk7 HTTP/1.1" 200 -
2025-02-23 21:15:31,552 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:31] "GET /socket.io/?EIO=4&transport=polling&t=2j5pxlv3 HTTP/1.1" 200 -
2025-02-23 21:15:31,553 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:31] "GET /socket.io/?EIO=4&transport=polling&t=2j5py14w HTTP/1.1" 200 -
2025-02-23 21:15:31,575 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:31] "POST /socket.io/?EIO=4&transport=polling&t=2j6cu6yn&sid=NM_tOINo36Con9fIAAAA HTTP/1.1" 200 -
2025-02-23 21:15:31,582 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:31] "GET /socket.io/?EIO=4&transport=polling&t=2j6cyj0s&sid=NM_tOINo36Con9fIAAAA HTTP/1.1" 200 -
2025-02-23 21:15:31,583 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:31] "POST /socket.io/?EIO=4&transport=polling&t=2j6d0m1k&sid=5bZZCSy7sKRjjEEkAAAB HTTP/1.1" 200 -
2025-02-23 21:15:31,588 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:31] "GET /socket.io/?EIO=4&transport=polling&t=2j6d2fl0&sid=5bZZCSy7sKRjjEEkAAAB HTTP/1.1" 200 -
2025-02-23 21:15:31,590 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:31] "POST /socket.io/?EIO=4&transport=polling&t=2j6d3au7&sid=Fzg6EiQFBs7oWKNWAAAC HTTP/1.1" 200 -
2025-02-23 21:15:31,591 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:31] "GET /socket.io/?EIO=4&transport=polling&t=2j6d303o&sid=Fzg6EiQFBs7oWKNWAAAC HTTP/1.1" 200 -
2025-02-23 21:15:31,601 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:31] "GET /socket.io/?EIO=4&transport=polling&t=2j6dkzkv&sid=5bZZCSy7sKRjjEEkAAAB HTTP/1.1" 200 -
2025-02-23 21:15:31,611 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:31] "GET /socket.io/?EIO=4&transport=polling&t=2j6dmz2y&sid=Fzg6EiQFBs7oWKNWAAAC HTTP/1.1" 200 -
2025-02-23 21:15:31,694 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:31] "GET /socket.io/?EIO=4&transport=polling&t=2j6g9rjj HTTP/1.1" 200 -
2025-02-23 21:15:31,716 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:31] "POST /socket.io/?EIO=4&transport=polling&t=2j6gp265&sid=ze71Q6Ix13QEORKAAAAG HTTP/1.1" 200 -
2025-02-23 21:15:31,717 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:31] "GET /socket.io/?EIO=4&transport=polling&t=2j6gyozt&sid=ze71Q6Ix13QEORKAAAAG HTTP/1.1" 200 -
2025-02-23 21:15:31,749 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:31] "GET /socket.io/?EIO=4&transport=polling&t=2j6hpacw HTTP/1.1" 200 -
2025-02-23 21:15:31,750 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:31] "GET /socket.io/?EIO=4&transport=polling&t=2j6hpf2n HTTP/1.1" 200 -
2025-02-23 21:15:31,751 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:31] "GET /socket.io/?EIO=4&transport=polling&t=2j6hqvss HTTP/1.1" 200 -
2025-02-23 21:15:31,753 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:31] "POST /socket.io/?EIO=4&transport=polling&t=2j6hyho1&sid=QQwzTF5JKs84rEccAAAI HTTP/1.1" 200 -
2025-02-23 21:15:31,754 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:31] "GET /socket.io/?EIO=4&transport=polling&t=2j6hzhxy&sid=QQwzTF5JKs84rEccAAAI HTTP/1.1" 200 -
2025-02-23 21:15:31,756 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:31] "POST /socket.io/?EIO=4&transport=polling&t=2j6i0p5a&sid=Bx2SFMEMvo6NBGIiAAAJ HTTP/1.1" 200 -
2025-02-23 21:15:31,758 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:31] "GET /socket.io/?EIO=4&transport=polling&t=2j6i1s3d&sid=Bx2SFMEMvo6NBGIiAAAJ HTTP/1.1" 200 -
2025-02-23 21:15:31,759 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:31] "POST /socket.io/?EIO=4&transport=polling&t=2j6i1j4p&sid=aILS0jgB5GbmhRDcAAAK HTTP/1.1" 200 -
2025-02-23 21:15:31,760 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:31] "GET /socket.io/?EIO=4&transport=polling&t=2j6i1xdr&sid=aILS0jgB5GbmhRDcAAAK HTTP/1.1" 200 -
2025-02-23 21:15:31,767 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:31] "GET /socket.io/?EIO=4&transport=polling&t=2j6i8277&sid=Bx2SFMEMvo6NBGIiAAAJ HTTP/1.1" 200 -
2025-02-23 21:15:31,778 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:31] "GET /socket.io/?EIO=4&transport=polling&t=2j6iaj8x&sid=aILS0jgB5GbmhRDcAAAK HTTP/1.1" 200 -
2025-02-23 21:15:31,813 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:31] "GET /socket.io/?EIO=4&transport=polling&t=2j6joxef HTTP/1.1" 200 -
2025-02-23 21:15:31,820 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:31] "POST /socket.io/?EIO=4&transport=polling&t=2j6jucka&sid=bBy7JOG0FweVMc1qAAAO HTTP/1.1" 200 -
2025-02-23 21:15:31,821 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:31] "GET /socket.io/?EIO=4&transport=polling&t=2j6jvlda&sid=bBy7JOG0FweVMc1qAAAO HTTP/1.1" 200 -
2025-02-23 21:15:32,751 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:32] "GET /socket.io/?EIO=4&transport=polling&t=2j79hp0p HTTP/1.1" 200 -
2025-02-23 21:15:32,751 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:32] "GET /socket.io/?EIO=4&transport=polling&t=2j79hq4b HTTP/1.1" 200 -
2025-02-23 21:15:32,751 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:32] "GET /socket.io/?EIO=4&transport=polling&t=2j79gbyu HTTP/1.1" 200 -
2025-02-23 21:15:32,751 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:32] "GET /socket.io/?EIO=4&transport=polling&t=2j79hc4v HTTP/1.1" 200 -
2025-02-23 21:15:32,751 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:32] "GET /socket.io/?EIO=4&transport=polling&t=2j79hjaj HTTP/1.1" 200 -
2025-02-23 21:15:32,751 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:32] "GET /socket.io/?EIO=4&transport=polling&t=2j79h0rc HTTP/1.1" 200 -
2025-02-23 21:15:32,771 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:32] "POST /socket.io/?EIO=4&transport=polling&t=2j79vlqk&sid=LG3OS1jikfdErzTLAAAS HTTP/1.1" 200 -
2025-02-23 21:15:32,772 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:32] "GET /socket.io/?EIO=4&transport=polling&t=2j79we2h&sid=LG3OS1jikfdErzTLAAAS HTTP/1.1" 200 -
2025-02-23 21:15:32,773 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:32] "POST /socket.io/?EIO=4&transport=polling&t=2j79wpce&sid=Gv3SHVgtORf_wsWeAAAT HTTP/1.1" 200 -
2025-02-23 21:15:32,773 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:32] "POST /socket.io/?EIO=4&transport=polling&t=2j79wgmr&sid=-NCwVFPL-UyVSA7YAAAR HTTP/1.1" 200 -
2025-02-23 21:15:32,773 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:32] "GET /socket.io/?EIO=4&transport=polling&t=2j79wrze&sid=Gv3SHVgtORf_wsWeAAAT HTTP/1.1" 200 -
2025-02-23 21:15:32,773 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:32] "GET /socket.io/?EIO=4&transport=polling&t=2j79xkm9&sid=-NCwVFPL-UyVSA7YAAAR HTTP/1.1" 200 -
2025-02-23 21:15:32,776 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:32] "POST /socket.io/?EIO=4&transport=polling&t=2j79zd5s&sid=Ly-VCb2_eiRQBcraAAAQ HTTP/1.1" 200 -
2025-02-23 21:15:32,776 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:32] "GET /socket.io/?EIO=4&transport=polling&t=2j7a0yoo&sid=Ly-VCb2_eiRQBcraAAAQ HTTP/1.1" 200 -
2025-02-23 21:15:32,777 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:32] "POST /socket.io/?EIO=4&transport=polling&t=2j7a0mry&sid=H_Rd0eG2ncD8jHPhAAAV HTTP/1.1" 200 -
2025-02-23 21:15:32,779 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:32] "GET /socket.io/?EIO=4&transport=polling&t=2j7a136a&sid=H_Rd0eG2ncD8jHPhAAAV HTTP/1.1" 200 -
2025-02-23 21:15:32,788 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:32] "POST /socket.io/?EIO=4&transport=polling&t=2j7a302h&sid=iOYSzgBUowOdZVWkAAAU HTTP/1.1" 200 -
2025-02-23 21:15:32,789 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:32] "GET /socket.io/?EIO=4&transport=polling&t=2j7a4vzm&sid=iOYSzgBUowOdZVWkAAAU HTTP/1.1" 200 -
2025-02-23 21:15:32,791 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:32] "GET /socket.io/?EIO=4&transport=polling&t=2j7afrfs&sid=LG3OS1jikfdErzTLAAAS HTTP/1.1" 200 -
2025-02-23 21:15:32,794 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:32] "GET /socket.io/?EIO=4&transport=polling&t=2j7amf9t&sid=Gv3SHVgtORf_wsWeAAAT HTTP/1.1" 200 -
2025-02-23 21:15:32,804 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:32] "GET /socket.io/?EIO=4&transport=polling&t=2j7aqwm8&sid=-NCwVFPL-UyVSA7YAAAR HTTP/1.1" 200 -
2025-02-23 21:15:32,818 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:32] "GET /socket.io/?EIO=4&transport=polling&t=2j7arfi3&sid=Ly-VCb2_eiRQBcraAAAQ HTTP/1.1" 200 -
2025-02-23 21:15:32,831 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:32] "GET /socket.io/?EIO=4&transport=polling&t=2j7avh8l&sid=H_Rd0eG2ncD8jHPhAAAV HTTP/1.1" 200 -
2025-02-23 21:15:32,843 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:32] "GET /socket.io/?EIO=4&transport=polling&t=2j7azman&sid=iOYSzgBUowOdZVWkAAAU HTTP/1.1" 200 -
2025-02-23 21:15:33,245 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "GET /socket.io/?EIO=4&transport=polling&t=2j7nfac2 HTTP/1.1" 200 -
2025-02-23 21:15:33,252 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "POST /socket.io/?EIO=4&transport=polling&t=2j7nkcga&sid=saRUcdTU1P8qSMIUAAAc HTTP/1.1" 200 -
2025-02-23 21:15:33,255 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "GET /socket.io/?EIO=4&transport=polling&t=2j7nmac7&sid=saRUcdTU1P8qSMIUAAAc HTTP/1.1" 200 -
2025-02-23 21:15:33,269 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "GET /socket.io/?EIO=4&transport=polling&t=2j7nyrl5&sid=saRUcdTU1P8qSMIUAAAc HTTP/1.1" 200 -
2025-02-23 21:15:33,755 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "GET /socket.io/?EIO=4&transport=polling&t=2j81agnv HTTP/1.1" 200 -
2025-02-23 21:15:33,755 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "GET /socket.io/?EIO=4&transport=polling&t=2j819w7y HTTP/1.1" 200 -
2025-02-23 21:15:33,756 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "GET /socket.io/?EIO=4&transport=polling&t=2j81bqh1 HTTP/1.1" 200 -
2025-02-23 21:15:33,757 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "GET /socket.io/?EIO=4&transport=polling&t=2j81bkn7 HTTP/1.1" 200 -
2025-02-23 21:15:33,757 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "GET /socket.io/?EIO=4&transport=polling&t=2j81cq3m HTTP/1.1" 200 -
2025-02-23 21:15:33,758 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "GET /socket.io/?EIO=4&transport=polling&t=2j81cilm HTTP/1.1" 200 -
2025-02-23 21:15:33,764 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "POST /socket.io/?EIO=4&transport=polling&t=2j81qfnd&sid=d-bjTrOKNxWuNX3tAAAf HTTP/1.1" 200 -
2025-02-23 21:15:33,764 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "GET /socket.io/?EIO=4&transport=polling&t=2j81qe7q&sid=d-bjTrOKNxWuNX3tAAAf HTTP/1.1" 200 -
2025-02-23 21:15:33,765 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "POST /socket.io/?EIO=4&transport=polling&t=2j81rfz7&sid=7szJYwNpUhKu9F20AAAe HTTP/1.1" 200 -
2025-02-23 21:15:33,765 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "POST /socket.io/?EIO=4&transport=polling&t=2j81rtyz&sid=-WhcT2LcAvdC6CioAAAh HTTP/1.1" 200 -
2025-02-23 21:15:33,765 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "GET /socket.io/?EIO=4&transport=polling&t=2j81rfli&sid=7szJYwNpUhKu9F20AAAe HTTP/1.1" 200 -
2025-02-23 21:15:33,766 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "GET /socket.io/?EIO=4&transport=polling&t=2j81s3mv&sid=-WhcT2LcAvdC6CioAAAh HTTP/1.1" 200 -
2025-02-23 21:15:33,768 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "POST /socket.io/?EIO=4&transport=polling&t=2j81suk3&sid=W9YTtIvK7bg5Bk2eAAAg HTTP/1.1" 200 -
2025-02-23 21:15:33,770 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "GET /socket.io/?EIO=4&transport=polling&t=2j81swx9&sid=W9YTtIvK7bg5Bk2eAAAg HTTP/1.1" 200 -
2025-02-23 21:15:33,774 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "POST /socket.io/?EIO=4&transport=polling&t=2j81tsog&sid=sTBMsMiMXX7LPkfOAAAi HTTP/1.1" 200 -
2025-02-23 21:15:33,774 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "GET /socket.io/?EIO=4&transport=polling&t=2j81ug4z&sid=sTBMsMiMXX7LPkfOAAAi HTTP/1.1" 200 -
2025-02-23 21:15:33,775 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "POST /socket.io/?EIO=4&transport=polling&t=2j81vyht&sid=Ta8OTmXiF9bXdOqOAAAj HTTP/1.1" 200 -
2025-02-23 21:15:33,776 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "GET /socket.io/?EIO=4&transport=polling&t=2j81v18e&sid=Ta8OTmXiF9bXdOqOAAAj HTTP/1.1" 200 -
2025-02-23 21:15:33,778 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "GET /socket.io/?EIO=4&transport=polling&t=2j824jkp&sid=7szJYwNpUhKu9F20AAAe HTTP/1.1" 200 -
2025-02-23 21:15:33,791 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "GET /socket.io/?EIO=4&transport=polling&t=2j825gr7&sid=-WhcT2LcAvdC6CioAAAh HTTP/1.1" 200 -
2025-02-23 21:15:33,797 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "GET /socket.io/?EIO=4&transport=polling&t=2j82sbfa HTTP/1.1" 200 -
2025-02-23 21:15:33,798 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "GET /socket.io/?EIO=4&transport=polling&t=2j82t6fi HTTP/1.1" 200 -
2025-02-23 21:15:33,804 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "POST /socket.io/?EIO=4&transport=polling&t=2j82wj1v&sid=bOqnhDJJOIJUuyibAAAq HTTP/1.1" 200 -
2025-02-23 21:15:33,805 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "GET /socket.io/?EIO=4&transport=polling&t=2j82yq9z&sid=bOqnhDJJOIJUuyibAAAq HTTP/1.1" 200 -
2025-02-23 21:15:33,805 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "GET /socket.io/?EIO=4&transport=polling&t=2j828uwm&sid=W9YTtIvK7bg5Bk2eAAAg HTTP/1.1" 200 -
2025-02-23 21:15:33,810 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "POST /socket.io/?EIO=4&transport=polling&t=2j830qsv&sid=k5vbhRpe-XUv5MVrAAAr HTTP/1.1" 200 -
2025-02-23 21:15:33,811 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "GET /socket.io/?EIO=4&transport=polling&t=2j831d43&sid=k5vbhRpe-XUv5MVrAAAr HTTP/1.1" 200 -
2025-02-23 21:15:33,816 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "GET /socket.io/?EIO=4&transport=polling&t=2j836om6&sid=bOqnhDJJOIJUuyibAAAq HTTP/1.1" 200 -
2025-02-23 21:15:33,819 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "GET /socket.io/?EIO=4&transport=polling&t=2j82b0yg&sid=sTBMsMiMXX7LPkfOAAAi HTTP/1.1" 200 -
2025-02-23 21:15:33,822 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "GET /socket.io/?EIO=4&transport=polling&t=2j83hzqd&sid=k5vbhRpe-XUv5MVrAAAr HTTP/1.1" 200 -
2025-02-23 21:15:33,829 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:33] "GET /socket.io/?EIO=4&transport=polling&t=2j82dfad&sid=Ta8OTmXiF9bXdOqOAAAj HTTP/1.1" 200 -
2025-02-23 21:15:34,642 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:34] "GET /socket.io/?EIO=4&transport=polling&t=2j8q5nb8 HTTP/1.1" 200 -
2025-02-23 21:15:34,645 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:34] "POST /socket.io/?EIO=4&transport=polling&t=2j8qbb1n&sid=YYWPE1vV97URtE6pAAAu HTTP/1.1" 200 -
2025-02-23 21:15:34,646 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:34] "GET /socket.io/?EIO=4&transport=polling&t=2j8qcd64&sid=YYWPE1vV97URtE6pAAAu HTTP/1.1" 200 -
2025-02-23 21:15:34,650 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:34] "GET /socket.io/?EIO=4&transport=polling&t=2j8qhybt&sid=YYWPE1vV97URtE6pAAAu HTTP/1.1" 200 -
2025-02-23 21:15:34,996 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:34] "GET /socket.io/?EIO=4&transport=polling&t=2j902f1c HTTP/1.1" 200 -
2025-02-23 21:15:35,000 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:35] "POST /socket.io/?EIO=4&transport=polling&t=2j907pga&sid=k5pyYqZQHQlhtpsOAAAw HTTP/1.1" 200 -
2025-02-23 21:15:35,001 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:35] "GET /socket.io/?EIO=4&transport=polling&t=2j907y1b&sid=k5pyYqZQHQlhtpsOAAAw HTTP/1.1" 200 -
2025-02-23 21:15:35,024 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:35] "GET /socket.io/?EIO=4&transport=polling&t=2j90vn07 HTTP/1.1" 200 -
2025-02-23 21:15:35,030 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:35] "POST /socket.io/?EIO=4&transport=polling&t=2j90y0z0&sid=JH6yywzkuHRhlj1gAAAy HTTP/1.1" 200 -
2025-02-23 21:15:35,031 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:35] "GET /socket.io/?EIO=4&transport=polling&t=2j910zw8&sid=JH6yywzkuHRhlj1gAAAy HTTP/1.1" 200 -
2025-02-23 21:15:35,772 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:35] "GET /socket.io/?EIO=4&transport=polling&t=2j9ktvrn HTTP/1.1" 200 -
2025-02-23 21:15:35,772 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:35] "GET /socket.io/?EIO=4&transport=polling&t=2j9kte4v HTTP/1.1" 200 -
2025-02-23 21:15:35,772 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:35] "GET /socket.io/?EIO=4&transport=polling&t=2j9kudoa HTTP/1.1" 200 -
2025-02-23 21:15:35,783 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:35] "POST /socket.io/?EIO=4&transport=polling&t=2j9lvz3j&sid=l7wDyl0UTaLRrr5lAAA1 HTTP/1.1" 200 -
2025-02-23 21:15:35,783 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:35] "GET /socket.io/?EIO=4&transport=polling&t=2j9lw2ej&sid=l7wDyl0UTaLRrr5lAAA1 HTTP/1.1" 200 -
2025-02-23 21:15:35,784 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:35] "POST /socket.io/?EIO=4&transport=polling&t=2j9lwr9i&sid=aXULF4s_KWVkchRdAAA0 HTTP/1.1" 200 -
2025-02-23 21:15:35,786 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:35] "GET /socket.io/?EIO=4&transport=polling&t=2j9lx0wo&sid=aXULF4s_KWVkchRdAAA0 HTTP/1.1" 200 -
2025-02-23 21:15:35,788 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:35] "POST /socket.io/?EIO=4&transport=polling&t=2j9lxix2&sid=ykaJBoX46VoT79KiAAA2 HTTP/1.1" 200 -
2025-02-23 21:15:35,789 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:35] "GET /socket.io/?EIO=4&transport=polling&t=2j9lxara&sid=ykaJBoX46VoT79KiAAA2 HTTP/1.1" 200 -
2025-02-23 21:15:35,797 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:35] "GET /socket.io/?EIO=4&transport=polling&t=2j9m6n5l&sid=aXULF4s_KWVkchRdAAA0 HTTP/1.1" 200 -
2025-02-23 21:15:35,810 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:35] "GET /socket.io/?EIO=4&transport=polling&t=2j9m8vkv&sid=ykaJBoX46VoT79KiAAA2 HTTP/1.1" 200 -
2025-02-23 21:15:38,608 INFO: Entering list_tasks route...
2025-02-23 21:15:38,608 DEBUG: Filters used: {'is_archived': False}
2025-02-23 21:15:38,645 DEBUG: Applying filters: {'is_archived': False}
2025-02-23 21:15:38,652 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-23 21:15:38,794 INFO: select pg_catalog.version()
2025-02-23 21:15:38,795 INFO: [raw sql] {}
2025-02-23 21:15:38,806 INFO: select current_schema()
2025-02-23 21:15:38,806 INFO: [raw sql] {}
2025-02-23 21:15:38,808 INFO: show standard_conforming_strings
2025-02-23 21:15:38,808 INFO: [raw sql] {}
2025-02-23 21:15:38,809 INFO: BEGIN (implicit)
2025-02-23 21:15:38,817 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-23 21:15:38,817 INFO: [generated in 0.00040s] {'param_1': 110, 'param_2': 0}
2025-02-23 21:15:38,908 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-23 21:15:38,909 INFO: [generated in 0.00024s] {}
2025-02-23 21:15:38,919 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-23 21:15:38,919 INFO: [generated in 0.00024s] {}
2025-02-23 21:15:38,922 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 21:15:38,923 INFO: [generated in 0.00017s] {}
2025-02-23 21:15:38,924 DEBUG: Tasks passed to template: [{'id': 283, 'name': 'fix update title', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T08:41:58.769700', 'updated_at': '2025-02-22T12:17:39.812683'}, {'id': 298, 'name': 'example user story with parent epic 297', 'description': '', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:41:01.907455', 'updated_at': '2025-02-23T02:20:38.256245'}, {'id': 285, 'name': 'add text truncation to project names in task list', 'description': 'kkkkkkkjjjjj\nlkajdlökjsdfölkjsdfölkjdf', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-23T19:50:03.193034'}, {'id': 264, 'name': 'close all / open all childtasks', 'description': 'ölkölklkhkk', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 7, 'status': 'Not Started', 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-02-19T22:47:17.024076'}, {'id': 276, 'name': 'add support for priority', 'description': 'ffasdlkjlkj\nljkkjlkj', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P0', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-22T18:03:14.125665'}, {'id': 270, 'name': 'the newest task', 'description': '', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:07:34.368035', 'updated_at': '2025-02-23T13:04:53.023952'}, {'id': 310, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-21T22:56:46.414917', 'updated_at': '2025-02-21T23:56:46.435450'}, {'id': 265, 'name': 'smooth transition for toggles', 'description': 'ffjjlkjljlkjlkj\nkjh', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-02-20T09:59:26.301212'}, {'id': 292, 'name': 'issue: assigning contributor does not work', 'description': '### **Summary of problem and solution**\n\nThe issue was that assigning a contributor to a task via the /tasks/<task_id>/assign_contributor API endpoint resulted in a **400 Bad Request** error. Upon investigation, the following problems were identified:\n\n1. **Missing CSRF Token:**\n- The request failed due to a missing CSRF token, as shown in the error message: *“Bad Request: The CSRF token is missing.”*\n- The frontend was not correctly including the CSRF token in the request headers.\n1. **JavaScript Error (Undefined CSRF Token Variable):**\n- The error *“ReferenceError: csrfToken is not defined”* indicated that the CSRF token was not being retrieved properly in the JavaScript code.\n1. **Incorrect Fetch Request Headers:**\n- The fetch request did not include the CSRF token under the correct key (X-CSRFToken).\n- The script attempted to send the request without properly extracting the CSRF token from the meta tag.\n\n### **Solution**\n\n1. **Include the CSRF Token in the JavaScript Code**\n\nThe CSRF token was retrieved from the meta tag and used in the request headers:\n\n```jsx\n// Retrieve CSRF token from meta tag\nconst csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\');\n```\n\nThis ensures that the CSRF token is correctly fetched and available in the JavaScript scope.\n\n1. **Modify the Fetch Request to Include CSRF Token**\n\nThe request to assign a contributor was updated to include the token:\n\n```jsx\nconst response = await fetch(`/tasks/${taskId}/assign_contributor`, {\n    method: "POST",\n    headers: { \n        "Content-Type": "application/json",\n        "X-CSRFToken": csrfToken  // Include CSRF token\n    },\n    body: JSON.stringify({ contributor_id: parseInt(contributorId, 10) }),\n});\n```\n\n- **Ensures the CSRF token is sent in the request headers** so that Flask-WTF does not reject the request.\n1. **Verify and Debug Network Requests**\n- The updated request headers were verified using **Chrome DevTools > Network tab** to ensure the X-CSRFToken was included.\n- The error messages disappeared, and the contributor assignment request **succeeded with a 200 OK response**.\n\n---\n\n### **Final Outcome**\n\n🚀 The issue was resolved, and contributors can now be assigned successfully to tasks without triggering a CSRF validation error.\n\n### **Key Learnings from This Session**\n\nThis debugging session covered several important aspects of **web development with Flask and JavaScript**, particularly related to **API requests, CSRF protection, debugging tools, and database interactions**. Here are the key takeaways:\n\n---\n\n### **1. CSRF Protection in API Requests**\n\n- **Issue:** The initial error was due to **a missing CSRF token** when making a `POST` request.\n- **Fix:** The solution was to **retrieve the CSRF token from a meta tag** in the HTML and include it in the request headers.\n- **Key Learning:** Flask-WTF requires CSRF tokens for form and API submissions to **prevent cross-site request forgery (CSRF) attacks**.✅ Always ensure that API requests include a valid CSRF token.\n\n---\n\n### **2. Debugging JavaScript Fetch Requests**\n\n- **Issue:** The JavaScript code was making a fetch request, but the variable `csrfToken` was not properly defined, causing a `ReferenceError`.\n- **Fix:** Declaring `csrfToken` at the beginning of the script:\n    \n    ```jsx\n    const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\');\n    ```\n    \n- **Key Learning:**✅ JavaScript variables must be defined before they are used.✅ Use browser **developer tools (DevTools) Network tab** to inspect headers, payloads, and responses when debugging API requests.\n\n---\n\n### **3. Structuring Flask Routes for Task Management**\n\n- **Issue:** The `assign_contributor` route was failing due to incorrect request payload validation.\n- **Fix:** Improved the route’s error handling and logging:\n    \n    ```python\n    @bp.route(\'/<int:task_id>/assign_contributor\', methods=[\'POST\'])\n    def assign_contributor(task_id):\n        try:\n            data = request.get_json()\n            contributor_id = int(data.get(\'contributor_id\', 0))\n            if not contributor_id:\n                return jsonify({\'error\': \'Valid Contributor ID is required\'}), 400\n    ```\n    \n- **Key Learning:**✅ Always validate incoming data in Flask routes to prevent type errors.✅ Use `request.get_json()` properly and handle missing or incorrect data gracefully.\n\n---\n\n### **4. Utilizing Browser DevTools for Debugging**\n\n- **Issue:** The fetch request was failing with a `400 Bad Request`, and the browser console showed `ReferenceError: csrfToken is not defined`.\n- **Fix:**\n    - Used **Network tab** to inspect the request payload and headers.\n    - Used **Console tab** to catch JavaScript errors early.\n- **Key Learning:**✅ DevTools is a **critical** tool for diagnosing network request issues.✅ Always **check console errors** before assuming it\'s a backend issue.\n\n---\n\n### **5. Database Queries and ORM Debugging**\n\n- **Issue:** Tasks were not being updated correctly, possibly due to missing commit statements.\n- **Fix:** Ensured that:was executed properly.\n    \n    ```python\n    task.contributor_id = contributor_id\n    db.session.commit()\n    ```\n    \n- **Key Learning:**✅ Always call `db.session.commit()` after making changes in SQLAlchemy.✅ Rollback transactions if an error occurs to avoid database inconsistency.\n\n---\n\n### **6. Handling Asynchronous JavaScript Logic**\n\n- **Issue:** The `assignContributor` function was executing before the page was fully loaded.\n- **Fix:** Wrapped it inside a function that ensures elements exist:\n    \n    ```\n    window.setupContributorAssignment = function () {\n        const assignButton = $("#assign-contributor-btn");\n        if (!assignButton.length) {\n            setTimeout(setupContributorAssignment, 500); // Retry in 500ms\n            return;\n        }\n    ```\n    \n- **Key Learning:**✅ Use `setTimeout` to **retry event binding** when elements are dynamically loaded.✅ Always **check if elements exist before attaching event handlers**.\n\n---\n\n### **7. Best Practices for Flask Logging & Error Handling**\n\n- **Issue:** Lack of clear logging when API calls failed.\n- **Fix:** Added better logging to track failures:\n    \n    ```python\n    logger.info(f"Assigning contributor to task ID {task_id}")\n    try:\n        # Process request...\n    except Exception as e:\n        logger.error(f"Error assigning contributor: {e}")\n    ```\n    \n- **Key Learning:**✅ Log **every major step** in API processing to simplify debugging.✅ Differentiate between `logger.info()`, `logger.warning()`, and `logger.error()` based on severity.\n\n---\n\n### **Final Takeaways**\n\n🚀 **Understanding CSRF protection** and **properly structuring API requests** is crucial for secure web applications.\n\n🔍 **Browser DevTools is invaluable** for diagnosing frontend issues, especially in JavaScript.\n\n🐍 **Flask requires proper request validation, database transactions, and logging** to maintain stability.\n\n⚡ **Asynchronous JavaScript must handle dynamic elements carefully** to avoid runtime errors.\n\nThis session reinforced best practices in **frontend-backend integration, debugging, and security**, making it a great learning experience! 🚀🔥', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:11:12.273779', 'updated_at': '2025-02-18T06:41:00.286143'}, {'id': 307, 'name': 'c', 'description': '', 'task_type': 'Subtask', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-20T16:53:38.393115', 'updated_at': '2025-02-22T18:00:51.058705'}, {'id': 295, 'name': 'issue: drag and drop errors', 'description': '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:22:54.461413', 'updated_at': '2025-02-23T13:16:54.269738'}, {'id': 284, 'name': 'add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 4, 'assigned_to': 'Fredrik', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-23T19:51:06.136664'}, {'id': 288, 'name': 'when trying to move subtask to another project, make sure a warning is displayed', 'description': 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be lost"\nOR\n\nIs it possible, and is it desireable to keep parent child relationships across projects?\nSo that a parent can be in one project but the child tasks can be in different projects?\n\nLets say \nParent epic is \n"Internationalisation"\nChild user stories are\n- Timezones\n- Language\n- Currency\n- Day, Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:54:36.297869', 'updated_at': '2025-02-23T13:17:14.262634'}, {'id': 296, 'name': 'issue: contributor is lost after updating task', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:26:43.881947', 'updated_at': '2025-02-11T15:37:31.011120'}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:17.786154', 'updated_at': '2025-02-23T11:30:04.684746'}, {'id': 321, 'name': 'untitled task', 'description': '', 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-02-22T15:24:59.683105', 'updated_at': '2025-02-22T15:28:18.664289'}, {'id': 315, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T13:06:56.470332', 'updated_at': '2025-02-22T14:06:56.476919'}, {'id': 280, 'name': 'logging (task and project history)', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 1, 'assigned_to': 'Alice', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:37:44.435112', 'updated_at': '2025-02-23T13:14:30.331668'}, {'id': 297, 'name': 'example parent epic', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:39:51.620509', 'updated_at': '2025-02-10T10:39:51.622712'}, {'id': 314, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T12:03:03.637804', 'updated_at': '2025-02-22T13:03:03.643803'}, {'id': 274, 'name': 'Add support for goals, initiatives, okr´s', 'description': 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n\nölkasdölkk', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P1', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:46:27.204912', 'updated_at': '2025-02-18T06:39:43.729310'}, {'id': 320, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T15:17:39.647261', 'updated_at': '2025-02-22T16:17:39.650332'}, {'id': 304, 'name': 'g', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-19T22:02:47.172900', 'updated_at': '2025-02-19T23:02:47.179933'}, {'id': 277, 'name': 'custom task workflow statuses', 'description': 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- Custom status\n-- Custom status\n- In Progress\n-- Custom status\n-- Custom status\n-- Custom status\n- Completed\n-- Custom status\n-- Custom status\n\n2. How can we track a task through different stages and save the sequence of events or stages the task has gone through?\nI´m thinking it could be good for mapping out processes, identifying bottlenecks and provide valuable insights while improving and streamlining workflows.\n- Stages\n- Contacts taken\n- Respons time \n- Time to action after responses\n- Dependencies\n\nNeed to be able to record every action related to this action.\nCommunication integrations\n- Slack\n- Email\n- Text messages\n- Phonecalls\n- Calendar events, meetings\n- Zoom, Google meet, Teams etc..\n\n\n2. Set custom statuses per project (can use tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:16:03.352588', 'updated_at': '2025-02-17T23:32:55.626822'}, {'id': 303, 'name': 't', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-19T19:05:00.401232', 'updated_at': '2025-02-19T20:05:00.406117'}, {'id': 293, 'name': 'click on title should copy the task title and id to clipboard', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:16:33.508209', 'updated_at': '2025-02-17T19:07:44.656573'}, {'id': 287, 'name': 'when moving a parent item to another project make sure the subtasks are moved as well', 'description': '', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:48:31.986870', 'updated_at': '2025-02-17T19:08:23.749538'}, {'id': 281, 'name': 'add high level plan', 'description': 'Add some sort of high level plan that aims to keep PM/PO´s on track and not get lost into the details of an overwhelminly large backlog', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:27:01.218606', 'updated_at': '2025-02-17T19:12:02.051244'}, {'id': 301, 'name': 'untitled task', 'description': '', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'In Progress', 'created_at': '2025-02-19T11:58:55.165343', 'updated_at': '2025-02-21T11:17:05.115762'}, {'id': 319, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T14:59:09.098097', 'updated_at': '2025-02-22T15:59:09.132640'}, {'id': 317, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T13:13:24.508779', 'updated_at': '2025-02-22T14:13:24.511517'}, {'id': 278, 'name': 'search feature for tasks list', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 5, 'project': 'Project Delta', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 4, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:03.369833', 'updated_at': '2025-02-18T00:42:29.470892'}, {'id': 289, 'name': 'issue: parent task is lost when updating task', 'description': '- Summary of the problem and solution\n    \n    **Problem: Parent Task Dropdown Was Not Being Set on Modal Open**\n    \n    The issue was that when opening a task modal, the **parent task dropdown** was not pre-populated with the correct parent task. However, interacting with the dropdown (e.g., clicking on it) would suddenly trigger it to be set correctly. This meant that the dropdown initialization was likely delayed or missing a step in the modal lifecycle.\n    \n    **Debugging Steps and Observations**\n    \n    1. **Task Details Were Fetched Correctly** ✅\n    - The task details, including parent_id, were being fetched from the API successfully.\n    1. **Parent Dropdown Initialization Issues** ❌\n    - The initializeParentDropdown() function was being called, but the dropdown was sometimes **not fully ready** when we tried to set the selected parent task.\n    1. **Clicking the Dropdown Triggered the Parent to Be Set** 🤔\n    - This hinted that the dropdown was not fully ready when setParentDropdown(task.parent_id) was initially called.\n    \n    **Final Solution**\n    \n    1. **Ensuring Dropdown Readiness Before Setting the Parent Task**\n    - We added explicit **delays and checks** to confirm that the dropdown was fully initialized before attempting to set the parent task.\n    \n    Specifically, we:\n    \n    - **Waited for the dropdown to appear in the DOM** using observeParentDropdown().\n    - **Initialized the dropdown** with initializeParentDropdown().\n    - **Waited explicitly for the dropdown to be fully ready** using waitForParentDropdownReady().\n    - **Added a final delay of 200ms** before calling setParentDropdown() to ensure stability.\n    1. **Modifying openTaskModal to Handle Parent Dropdown Setup**\n    - We ensured that initializeParentDropdown() was called **after fetching task details** and before setting the parent task.\n    1. **Confirming the Fix** 🎯\n    - After these fixes, the parent dropdown was **immediately populated** upon opening the modal, without requiring user interaction.\n    \n    **Key Learnings**\n    \n    ✅ **Dropdowns in modals need careful timing** – They might not be ready when you expect them to be.\n    \n    ✅ **Waiting for DOM updates is crucial** – Observing the element ensures it actually exists before interacting with it.\n    \n    ✅ **Explicit delays can prevent race conditions** – A small delay can sometimes resolve timing issues in UI interactions.\n    \n    **Final Result**\n    \n    ✅ The modal now **correctly loads and pre-selects the parent task** without extra clicks! 🎉🚀', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T08:56:25.273984', 'updated_at': '2025-02-23T12:51:53.922845'}, {'id': 279, 'name': 'github integration', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:38.238202', 'updated_at': '2025-02-23T13:23:18.557230'}, {'id': 300, 'name': 'new task', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-18T14:25:24.773401', 'updated_at': '2025-02-18T14:26:07.982932'}, {'id': 266, 'name': 'highlight the nested tasks', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-02-23T13:20:57.641732'}, {'id': 305, 'name': 'n', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-20T10:12:52.005313', 'updated_at': '2025-02-23T12:50:45.092951'}, {'id': 318, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 1, 'assigned_to': 'Alice', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T13:39:38.859364', 'updated_at': '2025-02-23T12:53:59.013279'}, {'id': 312, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 4, 'assigned_to': 'Fredrik', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T11:45:27.081419', 'updated_at': '2025-02-23T12:51:03.918932'}, {'id': 313, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 4, 'assigned_to': 'Fredrik', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T11:45:44.396106', 'updated_at': '2025-02-23T12:53:51.194125'}, {'id': 299, 'name': 'example sub task with parent user story 298', 'description': 'Test update 1\nTest update 2\nTest update 3', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 298, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:42:38.905700', 'updated_at': '2025-02-10T23:23:08.671464'}, {'id': 309, 'name': 'test task', 'description': 'This is a test task', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 1, 'assigned_to': 'Alice', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-21T21:19:17.563435', 'updated_at': '2025-02-23T02:40:16.275244'}, {'id': 286, 'name': 'add support for labels/tags', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:46:23.985620', 'updated_at': '2025-02-23T13:23:02.680582'}, {'id': 302, 'name': 'n', 'description': '', 'task_type': 'Subtask', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-19T18:15:01.931285', 'updated_at': '2025-02-20T07:20:56.647312'}, {'id': 269, 'name': 'fix styling for sweetalert', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-02-08T15:54:56.717846', 'updated_at': '2025-02-23T11:30:35.385752'}, {'id': 316, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T13:12:44.289461', 'updated_at': '2025-02-22T14:12:44.297036'}, {'id': 273, 'name': 'disable parent task selector in epics', 'description': 'and add text, Epic can´t have parent tasks', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:45:20.740910', 'updated_at': '2025-02-10T08:39:17.639890'}, {'id': 271, 'name': 'make sure dynamically added rows has the exact same styling and includes every element', 'description': 'Missing elements:\n- Open link\n- Default project\n- Project name should be inside a pill\n- Task type should be in a pill\n- Estimations should be 0, not N/A\n- Make sure font size is matching\n- status should have the dropdown inside a pill\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T00:21:07.108431', 'updated_at': '2025-02-23T11:30:25.428577'}, {'id': 267, 'name': 'improvements to toggles and nested tasks', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 2, 'assigned_to': 'Bob', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:29:12.464594', 'updated_at': '2025-02-23T11:03:53.247332'}, {'id': 311, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 3, 'assigned_to': 'Charlie', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-21T22:58:25.440044', 'updated_at': '2025-02-23T12:11:24.815974'}, {'id': 323, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-23T02:41:28.531955', 'updated_at': '2025-02-23T03:41:28.537448'}, {'id': 322, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 1, 'assigned_to': 'Alice', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T15:38:23.342262', 'updated_at': '2025-02-23T11:09:01.873512'}, {'id': 294, 'name': 'issue: task table filters not working', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:19:21.022598', 'updated_at': '2025-02-18T06:38:16.836257'}, {'id': 257, 'name': 'Update Task API Integration', 'description': "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-02-05T22:55:49.566819', 'updated_at': '2025-02-05T22:18:17.807154'}, {'id': 275, 'name': 'add sprints, cycles', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-18T12:08:36.665524'}, {'id': 290, 'name': 'issue: error when changing task type and', 'description': 'issue: error when changing task type and parent task before saving', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:00:03.417734', 'updated_at': '2025-02-10T09:15:09.284969'}, {'id': 291, 'name': 'add dropdowns in task list for changing: project, assigned to, estimate and task type (labels/tags)', 'description': '', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-02-18T06:40:24.609233'}, {'id': 306, 'name': 'ne', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-20T11:31:03.798672', 'updated_at': '2025-02-20T12:31:03.801989'}, {'id': 308, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-21T21:18:03.772575', 'updated_at': '2025-02-21T22:18:03.781548'}, {'id': 272, 'name': 'implement a markdown text editor like notion', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-02-10T08:28:39.669255'}, {'id': 136, 'name': 'Page scroll should stay in position when reloading', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-16T18:21:50.187247', 'updated_at': '2025-01-16T19:22:36.214901'}, {'id': 130, 'name': 'Implement the Map of Task Relationships solution for drag-and-drop', 'description': 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:41:28.093022', 'updated_at': '2025-02-18T06:41:19.891744'}, {'id': 133, 'name': 'Step 4: Enhance Logging in models.py', 'description': 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nupdating the Task model in the following ways:\n\n1.\tLog Changes to parent_id:\n\t•\tLog changes to parent_id during updates, including old and new values.\n\t2.\tValidate Hierarchy with Logging:\n\t•\tLog detailed messages when validating hierarchy changes, especially for circular dependency checks.\n\nHere’s how the models.py can be updated:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy import func, cast, CheckConstraint\nfrom sqlalchemy.orm import validates\nfrom app.extensions.db import db\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\nclass Task(db.Model):\n    __tablename__ = "task"\n    \n    # Other columns...\n\n    parent_id = db.Column(\n        db.Integer, db.ForeignKey("task.id"), index=True, nullable=True\n    )\n\n    # Relationships\n    parent = db.relationship(\n        "Task", remote_side=[id], back_populates="children", lazy="select"\n    )\n    children = db.relationship(\n        "Task", back_populates="parent", lazy="select"\n    )\n\n    \n\n\n    @staticmethod\n    def _validate_no_circular_references(new_parent_id):\n        """\n        Validates that there are no circular references in the task hierarchy.\n\n        Args:\n            new_parent_id (int): The new parent ID to validate.\n\n        Raises:\n            ValueError: If a circular reference is detected.\n        """\n        visited = set()\n        current_parent_id = new_parent_id\n\n        logger.info(f"Validating circular references for parent ID: {new_parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error(\n                    f"Circular reference detected: Parent ID {current_parent_id} already visited."\n                )\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            # Fetch the next parent_id in the hierarchy\n            parent = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not parent:\n                break  # Exit if no parent is found\n            current_parent_id = parent.parent_id\n\n        logger.info("No circular reference detected.")\n\n    @validates(\'parent_id\', \'task_type\')\n    def validate_task_changes(self, key, value):\n        """\n        Validates changes to \'parent_id\' and \'task_type\'.\n        Ensures hierarchy validity and checks for circular references.\n        """\n        logger.debug(f"Validating {key} change for Task {self.id}: {value}")\n\n        if key == \'parent_id\':\n            # Log changes to parent_id\n            if self.id and value != self.parent_id:\n                logger.info(f"Task {self.id}: Updating \'parent_id\' from {self.parent_id} to {value}")\n\n            # Prevent a task from being its own parent\n            if value and value == self.id:\n                logger.error("A task cannot be its own parent.")\n                raise ValueError("A task cannot be its own parent.")\n\n            # Check for circular references\n            if value:\n                Task.check_circular_reference(self.id, value)\n\n        elif key == \'task_type\':\n            # Log changes to task_type\n            if self.id and value != self.task_type:\n                logger.info(f"Task {self.id}: Updating \'task_type\' from {self.task_type} to {value}")\n\n        # Check hierarchy rules without triggering further validation\n        if key in [\'parent_id\', \'task_type\']:\n            self._validate_hierarchy_change(key, value)\n\n        logger.info(f"Validation passed for {key}: {value}")\n        return value\n\n    def _validate_hierarchy_change(self, key, value):\n        """\n        Validates hierarchy rules for the task based on `task_type` and `parent_id`.\n        """\n        if key == \'parent_id\' and value:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=value).first()\n            if not parent_task:\n                raise ValueError("Parent task does not exist.")\n\n            logger.debug(f"Validating hierarchy: Task {self.id}, Parent Type: {parent_task.task_type}")\n            if self.task_type == "User Story" and parent_task.task_type != "Epic":\n                raise ValueError("User Stories must have an Epic as a parent.")\n            if self.task_type == "Subtask" and parent_task.task_type != "User Story":\n                raise ValueError("Subtasks must have a User Story as a parent.")\n\n        elif key == \'task_type\' and self.parent_id:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=self.parent_id).first()\n            if parent_task:\n                logger.debug(f"Validating hierarchy: Task Type: {value}, Parent Type: {parent_task.task_type}")\n                if value == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError("User Stories must have an Epic as a parent.")\n                if value == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError("Subtasks must have a User Story as a parent.")\n\n        logger.info(f"Hierarchy validation passed for Task {self.id if self.id else \'New Task\'}.")\n\n    @staticmethod\n    def check_circular_reference(task_id, parent_id):\n        """\n        Iteratively checks for circular references in the task hierarchy.\n        Prevents stack overflow on deep hierarchies.\n        """\n        visited = set()\n        current_parent_id = parent_id\n\n        logger.info(f"Checking circular reference for Task {task_id} with Parent ID: {parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error("Circular reference detected!")\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            if current_parent_id == task_id:\n                logger.error("A task cannot be its own ancestor.")\n                raise ValueError("A task cannot be its own ancestor.")\n\n            # Fetch the next parent_id in the hierarchy\n            task = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not task:\n                break\n            current_parent_id = task.parent_id\n\n        logger.info("Circular reference check passed.")\n```\nKey Enhancements:\n\t1.\tlog_and_validate_parent_id_change:\n\t•\tLogs the old and new parent_id whenever it changes.\n\t•\tEnsures no circular references are introduced.\n\t2.\t_validate_no_circular_references:\n\t•\tValidates the parent_id field to prevent circular dependencies.\n\t•\tLogs progress and raises detailed errors if violations occur.\n\t3.\tlog_and_validate_task_type_change:\n\t•\tLogs changes to task_type with the old and new values.\n\t•\tRevalidates hierarchy rules when task_type changes.\n\t4.\tDetailed Logging for Circular Reference Validation:\n\t•\t_validate_no_circular_references and check_circular_reference methods log every step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t•\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:44:08.340041', 'updated_at': '2025-01-16T19:22:36.219710'}, {'id': 132, 'name': 'Step 1: Update tasks_table_interactions.js', 'description': '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the map for efficient parent-child relationship lookups instead of DOM traversal.\n\n```\nexport const TaskManager = {\n    init: function (csrfToken) {\n        this.csrfToken = csrfToken;\n        this.initTaskParentMap(); // Initialize the map\n        this.initDragAndDrop(); // Initialize drag-and-drop functionality\n    },\n\n    // Initialize a global map for task relationships\n    taskParentMap: new Map(),\n\n    // Build the taskParentMap from the DOM\n    initTaskParentMap: function () {\n        console.log("Initializing Task Parent Map...");\n        const rows = document.querySelectorAll("tr[data-task-id]");\n\n        rows.forEach((row) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = parseInt(row.dataset.parentId, 10) || null;\n            this.taskParentMap.set(taskId, parentId);\n        });\n\n        console.log("Task Parent Map initialized:", Array.from(this.taskParentMap.entries()));\n    },\n\n    // Update the map dynamically after drag-and-drop\n    updateTaskParentMap: function (taskId, parentId) {\n        console.log(`Updating Task Parent Map: Task ${taskId} -> Parent ${parentId}`);\n        this.taskParentMap.set(taskId, parentId);\n    },\n\n    initDragAndDrop: function () {\n        if (window.isDragAndDropInitialized) {\n            console.log("Drag-and-drop is already initialized.");\n            return;\n        }\n\n        console.log("Initializing drag-and-drop within TaskManager...");\n\n        const tableBody = document.querySelector("tbody");\n        if (!tableBody) {\n            console.warn("Task table body not found for drag-and-drop initialization");\n            return;\n        }\n\n        // Initialize Sortable.js for drag-and-drop functionality\n        Sortable.create(tableBody, {\n            handle: ".task-row", // Only draggable via `.task-row` elements\n            animation: 150, // Smooth animation\n            filter: ".task-open-link", // Prevent dragging on task links\n            preventOnFilter: true, // Prevent drag if filtered element is clicked\n            onEnd: async (event) => {\n                try {\n                    console.log("Drag-and-drop operation started...");\n                    const rows = Array.from(event.from.querySelectorAll(".task-row"));\n                    const reorderedTasks = [];\n\n                    rows.forEach((row, index) => {\n                        const taskId = parseInt(row.dataset.taskId, 10);\n                        let parentId = null;\n\n                        // Get the parent ID from the map or fallback to the dataset\n                        if (row.classList.contains("subtask-row")) {\n                            const parentRow = row.previousElementSibling;\n                            parentId = parentRow\n                                ? parseInt(parentRow.dataset.taskId, 10)\n                                : this.taskParentMap.get(taskId) || null;\n                        }\n\n                        // Update the taskParentMap dynamically\n                        this.updateTaskParentMap(taskId, parentId);\n\n                        reorderedTasks.push({\n                            id: taskId,\n                            sort_order: index + 1,\n                            parent_id: parentId,\n                        });\n                    });\n\n                    console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n                    console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n                    // Send the payload to the backend\n                    const response = await fetch("/tasks/reorder_subtasks", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                            "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n                        },\n                        body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n                    });\n\n                    if (!response.ok) {\n                        const errorData = await response.json();\n                        console.error("Error reordering tasks:", errorData);\n                        alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n                        return;\n                    }\n\n                    const data = await response.json();\n                    console.log("Task reordering successful:", data);\n\n                } catch (error) {\n                    console.error("Error during drag-and-drop operation:", error);\n                    alert("An unexpected error occurred while reordering tasks.");\n                }\n            },\n        });\n\n        window.isDragAndDropInitialized = true;\n        console.log("Drag-and-drop initialized successfully.");\n    },\n};\n```\n\nKey Updates:\n\t1.\tPrecomputed Map (taskParentMap):\n\t•\tThe initTaskParentMap function initializes the map by iterating over DOM elements and mapping each task’s ID to its parent ID.\n\t•\tThe updateTaskParentMap dynamically updates the map when tasks are reordered.\n\t2.\tEfficient Parent Lookup:\n\t•\tThe parentId is derived from the precomputed map rather than DOM traversal.\n\t3.\tBackend Payload:\n\t•\tA structured payload (reorderedTasks) is sent to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t•\tCSRF protection is ensured by passing the token to the request headers.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:44:08.338301', 'updated_at': '2025-02-06T21:59:17.417466'}, {'id': 134, 'name': 'Step 2: Update the Backend in routes.py', 'description': 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\nPlan for step 2:\n\t1.\tVerify the payload structure:\n\t•\tEnsure that the payload includes all necessary fields (id, sort_order, parent_id) for each task.\n\t•\tValidate that the parent-child relationships in the precomputed map (taskParentMap) are reflected correctly in the payload.\n\t2.\tSubmit the payload to the backend:\n\t•\tEnhance the fetch request in the onEnd function of initDragAndDrop to log detailed submission data.\n\t•\tConfirm the payload integrity in the browser console before submission.\n\t3.\tUpdate backend logging:\n\t•\tAdd logging to /reorder_subtasks in routes.py to confirm receipt of the correct payload and process parent-child updates.\n\t•\tLog before and after database updates for better debugging.\n\n-----\nUpdated tasks_table_interactions.js\n\nReplace this section:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    let parentId = null;\n```\nWith:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    const parentId = this.taskParentMap.get(taskId) || null;\n```\nThe this.taskParentMap provides a precomputed and dynamic mapping of taskId to parentId. By using this map, we avoid relying on DOM traversal logic (row.closest or row.previousElementSibling) during drag-and-drop operations, which can sometimes be unreliable or cumbersome.\n\nFull Revised onEnd section:\n```\nonEnd: async (event) => {\n    try {\n        console.log("Drag-and-drop operation started...");\n        const rows = Array.from(event.from.querySelectorAll(".task-row"));\n        const reorderedTasks = [];\n\n        rows.forEach((row, index) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = this.taskParentMap.get(taskId) || null;\n\n            // Update the taskParentMap dynamically\n            this.updateTaskParentMap(taskId, parentId);\n\n            reorderedTasks.push({\n                id: taskId,\n                sort_order: index + 1,\n                parent_id: parentId,\n            });\n        });\n\n        console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n        console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n        // Send the payload to the backend\n        const response = await fetch("/tasks/reorder_subtasks", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n            },\n            body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error("Error reordering tasks:", errorData);\n            alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n            return;\n        }\n\n        const data = await response.json();\n        console.log("Task reordering successful:", data);\n\n    } catch (error) {\n        console.error("Error during drag-and-drop operation:", error);\n        alert("An unexpected error occurred while reordering tasks.");\n    }\n}\n```\n---------------------------------\nEnsure updates include:\n\t•\tBetter Logging: Adding logs for key events such as database changes and validation results.\n\t•\tInput Validation: Ensure all required fields (id, sort_order, parent_id) exist in the payload.\n\t•\tPost-Commit Validation: Confirm database updates after the commit.\n\t•\tImproved Error Handling: Include specific error messages and consistent rollback mechanisms.\n\nBelow is the revised reorder_subtasks route with descriptive comments for each section:\n```\n@bp.route("/reorder_subtasks", methods=["POST"])\ndef reorder_subtasks():\n    """\n    Reorder subtasks globally or reassign them to a different parent.\n\n    Steps:\n    - Parse and validate input from the frontend.\n    - Update parent-child relationships and sort order in the database.\n    - Commit changes and return a success response.\n    - Handle errors gracefully and provide detailed logs for debugging.\n    """\n    logger.info("Entering reorder_subtasks route...")\n    logger.info(f"Received payload for reordering tasks: {request.json}")\n\n    try:\n        # Step 1: Parse input\n        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered\n        ordered_tasks = request.json.get("ordered_tasks", [])\n\n        logger.debug(f"Parsed parent_id: {parent_id}")\n        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")\n\n        # Step 2: Validate input\n        if not isinstance(ordered_tasks, list) or not all(\n            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task\n            for task in ordered_tasks\n        ):\n            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")\n            return jsonify({\n                "error": "Invalid input format for \'ordered_tasks\'. Each task must include \'id\', \'sort_order\', and \'parent_id\'."\n            }), 400\n\n        # Step 3: Validate parent task (if applicable)\n        if parent_id is not None:\n            parent_task = Task.query.get(parent_id)\n            if not parent_task:\n                logger.error(f"Parent task with ID {parent_id} not found.")\n                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400\n\n        logger.info("Input validation passed. Proceeding with task updates...")\n\n        # Step 4: Process updates for each subtask\n        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation\n\n        for task_data in ordered_tasks:\n            subtask_id = task_data["id"]\n            sort_order = task_data["sort_order"]\n            new_parent_id = task_data["parent_id"]\n\n            # Fetch the subtask from the database\n            subtask = Task.query.get(subtask_id)\n            if not subtask:\n                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")\n                continue\n\n            # Log and update parent_id if it changes\n            if new_parent_id is not None and new_parent_id != subtask.parent_id:\n                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")\n                subtask.parent_id = new_parent_id\n\n            # Update sort order\n            subtask.sort_order = sort_order\n            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")\n\n            # Add to the list of updated subtasks for validation\n            updated_subtasks.append(subtask)\n\n        # Step 5: Commit changes to the database\n        try:\n            db.session.commit()\n            logger.info(f"Subtasks reordered successfully: {[task[\'id\'] for task in ordered_tasks]}")\n        except Exception as e:\n            logger.error(f"Error committing changes to the database: {str(e)}")\n            db.session.rollback()\n            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500\n\n        # Step 6: Post-commit validation\n        for subtask in updated_subtasks:\n            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")\n            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")\n\n        # Step 7: Return success response\n        return jsonify({\n            "success": True,\n            "message": "Subtasks reordered successfully.",\n            "updated_subtasks": [subtask.id for subtask in updated_subtasks]\n        }), 200\n\n    except Exception as e:\n        # Step 8: Handle unexpected errors\n        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)\n        db.session.rollback()\n        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500\n```\nKey Changes and Descriptive Comments\n\t1.\tInput Parsing:\n\t•\tExtracts parent_id and ordered_tasks from the request payload.\n\t•\tLogs the parsed values for debugging.\n\t2.\tInput Validation:\n\t•\tEnsures ordered_tasks is a list of dictionaries with the required keys.\n\t•\tValidates parent_id if provided, ensuring the parent task exists in the database.\n\t3.\tUpdate Processing:\n\t•\tIterates through ordered_tasks, updating each task’s parent_id and sort_order.\n\t•\tLogs changes for each task.\n\t4.\tDatabase Commit:\n\t•\tCommits all updates in a single transaction.\n\t•\tLogs success or rolls back changes in case of an error.\n\t5.\tPost-Commit Validation:\n\t•\tVerifies that the parent_id and sort_order changes were successfully saved to the database.\n\t6.\tError Handling:\n\t•\tCaptures and logs exceptions during processing or committing.\n\t•\tProvides meaningful error messages to the frontend.\n\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:46:29.348853', 'updated_at': '2025-02-06T21:59:21.617065'}, {'id': 131, 'name': 'Step 5: Update utils.py', 'description': 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nChanges to Make:\n\t1.\tEnhance Task Filtering:\n\t•\tEnsure the filters handle parent-child relationships explicitly.\n\t•\tAdd options to include or exclude subtasks in queries.\n\t2.\tUtility Function for Debugging Parent-Child Relationships:\n\t•\tProvide a function to generate a map or list of parent-child relationships for debugging purposes.\n\t3.\tValidation Functions:\n\t•\tAdd a utility function to validate parent-child relationships and ensure no circular dependencies.\n\nUpdated utils.py Code:\n```\nimport logging\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import joinedload\nfrom app.extensions.db import db\nfrom app.tasks.models import Task\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\n\nclass TaskService:\n    @staticmethod\n    def filter_tasks(filters=None, include_subtasks=True, page=None, per_page=None):\n        """\n        Dynamically filters tasks with an option to include or exclude subtasks.\n\n        Args:\n            filters (dict): Filtering criteria.\n            include_subtasks (bool): Whether to include subtasks in the query.\n            page (int, optional): Page number for pagination.\n            per_page (int, optional): Items per page for pagination.\n\n        Returns:\n            Query or Pagination: A SQLAlchemy query object or paginated results.\n        """\n        query = Task.query.options(\n            db.joinedload(Task.project).joinedload(Project.contributors),\n            db.joinedload(Task.contributor),\n            db.joinedload(Task.children),\n        ).order_by(Task.sort_order)\n\n        if filters:\n            logger.debug(f"Applying filters: {filters}")\n\n            # Apply standard filters\n            if "is_archived" in filters:\n                query = query.filter(Task.is_archived == filters["is_archived"])\n            if "project_id" in filters:\n                query = query.filter(Task.project_id == filters["project_id"])\n            if "task_type" in filters:\n                if isinstance(filters["task_type"], list):\n                    query = query.filter(Task.task_type.in_(filters["task_type"]))\n                else:\n                    query = query.filter(Task.task_type == filters["task_type"])\n            if "completion_status" in filters:\n                completion_map = {"completed": True, "in_progress": False}\n                if filters["completion_status"] in completion_map:\n                    query = query.filter(Task.completed == completion_map[filters["completion_status"]])\n\n            # Optionally exclude subtasks\n            if not include_subtasks:\n                query = query.filter(Task.task_type != "Subtask")\n\n        logger.debug(f"Generated query: {query}")\n\n        # Pagination\n        if page and per_page:\n            return query.paginate(page=page, per_page=per_page, error_out=False)\n        return query\n\n    @staticmethod\n    def debug_parent_child_relationships(project_id=None):\n        """\n        Generates a debug map of parent-child relationships for all tasks.\n\n        Args:\n            project_id (int, optional): Restrict to tasks from a specific project.\n\n        Returns:\n            dict: A dictionary mapping parent IDs to their child task IDs.\n        """\n        query = Task.query\n        if project_id:\n            query = query.filter(Task.project_id == project_id)\n\n        tasks = query.options(\n            db.load_only(Task.id, Task.parent_id)\n        ).all()\n\n        relationship_map = {}\n        for task in tasks:\n            if task.parent_id not in relationship_map:\n                relationship_map[task.parent_id] = []\n            relationship_map[task.parent_id].append(task.id)\n\n        logger.debug(f"Parent-Child Relationship Map: {relationship_map}")\n        return relationship_map\n\n    @staticmethod\n    def validate_parent_child_relationships():\n        """\n        Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.\n\n        Raises:\n            ValueError: If invalid relationships are detected.\n        """\n        tasks = Task.query.options(db.joinedload(Task.parent)).all()\n\n        for task in tasks:\n            if task.parent_id:\n                parent_task = task.parent\n                if not parent_task:\n                    raise ValueError(f"Task {task.id} has an invalid parent ID {task.parent_id}.")\n\n                # Validate hierarchy rules\n                if task.task_type == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError(f"User Story {task.id} must have an Epic as its parent.")\n                if task.task_type == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError(f"Subtask {task.id} must have a User Story as its parent.")\n\n        logger.info("All parent-child relationships are valid.")\n\n    @staticmethod\n    def get_all_task_ids_with_parents():\n        """\n        Returns a flat list of tasks with their parent IDs for debugging.\n\n        Returns:\n            list: A list of tuples (task_id, parent_id).\n        """\n        tasks = Task.query.with_entities(Task.id, Task.parent_id).all()\n        logger.debug(f"Task IDs with Parent IDs: {tasks}")\n        return tasks\n```\n\n\nExplanation of Changes:\n\t1.\tfilter_tasks Enhancements:\n\t•\tAdded include_subtasks parameter to optionally exclude subtasks from the query.\n\t2.\tdebug_parent_child_relationships:\n\t•\tCreates a parent-child relationship map for debugging purposes.\n\t3.\tvalidate_parent_child_relationships:\n\t•\tIterates through all tasks to validate parent-child hierarchy and ensures no invalid relationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t•\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.091824', 'updated_at': '2025-01-16T19:22:36.236691'}, {'id': 135, 'name': 'Step 3: Update list.html', 'description': 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already includes everything needed. No required changes.\n\nHere´s the relevant section of list.html:\n\n```\n<tr id="task-{{ task.id }}"\n                class="task-row {% if task.task_type == \'Subtask\' %}subtask-row{% elif task.task_type == \'User Story\' %}user-story-row{% elif task.task_type == \'Epic\' %}epic-row{% endif %}"\n                style="background-color: \n                {% if task.task_type == \'Subtask\' %}\n                    rgba(200, 230, 255, 0.5); /* Light blue for Subtask */\n                {% elif task.task_type == \'User Story\' %}\n                    rgba(255, 255, 200, 0.5); /* Light yellow for User Story */\n                {% elif task.task_type == \'Epic\' %}\n                    rgba(255, 200, 200, 0.5); /* Light red for Epic */\n                {% else %}\n                    rgba(240, 240, 240, 1); /* Default light gray */\n                {% endif %};"\n                data-task-id="{{ task.id }}"\n                data-parent-id="{{ task.parent_id or \'\' }}"\n                data-level="{{ depth }}">\n                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>\n                <td>\n                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}\n                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}" aria-label="Toggle details for task {{ task.name }}">\n                        <i class="bi bi-chevron-right"></i>\n                    </button>\n                    {% endif %}\n                </td>\n                <td class="fw-medium fs-6 \n                {% if task.task_type == \'Epic\' %}\n                    epic-cell\n                {% elif task.task_type == \'User Story\' %}\n                    user-story-cell\n                {% elif task.task_type == \'Subtask\' %}\n                    subtask-cell\n                {% endif %}" \n                style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">\n                <span class="bi fs-6\n                {% if task.task_type == \'Epic\' %}\n                    bi-circle-fill\n                {% elif task.task_type == \'User Story\' %}\n                    bi-circle-half\n                {% elif task.task_type == \'Subtask\' %}\n                    bi-circle\n                {% endif %}">\n                </span>\n                {{ task.name }}\n                <small class="text-muted fw-light">\n                    (Parent-ID: {{ task.parent_id or \'None\' }})\n                </small>\n                <!-- Open Link -->\n                <a href="#" class="task-open-link" data-task-id="{{ task.id }}">\n                    <i class="bi bi-arrows-angle-expand" style="font-size: 0.8rem; color: white;"></i>\n                    Open\n                </a>\n            </td>\n                <td class="fw-light fs-6">\n                    <small class>\n                    LAC-{{ task.id }}\n                    </small>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light text-bg-secondary">\n                        {{ task.project if task.project else "Unknown Project" }}\n                    </span>\n                </td>\n                <td class="fs-6" data-contributor-column>{{ task.assigned_to if task.assigned_to else "Unassigned" }}</td>\n                <td class="fs-6">{{ task.story_points }}</td>\n                <td class="fs-6">\n                    <span class="badge rounded-pill fw-light text-bg-light">\n                        {{ task.task_type }}\n                    </span>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light {% if task.completed %}text-bg-success{% else %}text-bg-warning{% endif %}">\n                        {{ "Completed" if task.completed else "In Progress" }}\n                    </span>\n                </td>\n                <td>\n                    <!-- Delete Icon -->\n                    <button class="btn btn-dark btn-sm delete-task-btn" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .2rem; --bs-btn-font-size: .75rem;" data-task-id="{{ task.id }}" aria-label="Deletes task {{ task.id }}">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n            </tr>\n            {% for child in tasks if child.parent_id == task.id %}\n                {{ render_task(child, tasks, depth + 1) }}\n            {% endfor %}\n            {% endmacro %}\n            \n            <!-- Render top-level tasks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:46:29.349784', 'updated_at': '2025-01-16T19:22:36.238473'}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'description': 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitHub Login involves integrating OAuth 2.0, which both services support. The complexity depends on your app’s existing setup, frameworks, and experience with third-party authentication. Below is a breakdown:\n\nKey Steps for Implementing Google or GitHub Login\n\t1.\tSet Up OAuth Credentials:\n\t•\tRegister your application in the Google Cloud Console or GitHub Developer Settings.\n\t•\tObtain the client ID and client secret.\n\t2.\tInstall Required Libraries:\n\t•\tUse a library for OAuth (e.g., flask-oauthlib, python-social-auth, or authlib).\n\t•\tPopular frameworks like Flask and Django already have robust integrations for OAuth providers.\n\t3.\tBackend Configuration:\n\t•\tImplement an endpoint to handle the OAuth flow (/auth/login/google or /auth/login/github).\n\t•\tConfigure your app to send users to Google or GitHub’s authentication page.\n\t•\tHandle the OAuth callback to exchange the authorization code for an access token.\n\t•\tVerify the token and fetch user information (e.g., email, name).\n\t4.\tLink OAuth to User Registration:\n\t•\tOn successful login, create or retrieve a user in your database.\n\t•\tStore the user’s details like email, OAuth provider ID, and access token.\n\t5.\tFrontend Integration (if applicable):\n\t•\tAdd “Login with Google” or “Login with GitHub” buttons.\n\t•\tRedirect to your backend’s OAuth endpoint when clicked.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T12:15:54.291625', 'updated_at': '2025-01-16T19:22:36.239866'}, {'id': 62, 'name': 'Add OAuth integration for Google Login', 'description': 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-02-18T00:44:28.917671'}, {'id': 64, 'name': 'Setup project credentials for Google API', 'description': 'Generate client ID and secret from Google API Console for your application.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-02-18T00:44:45.802506'}, {'id': 67, 'name': 'Test Google OAuth flow', 'description': 'Verify the OAuth flow using test accounts and check the token exchange.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-02-18T00:44:43.790066'}, {'id': 65, 'name': 'Implement backend endpoints for Google OAuth', 'description': 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-02-18T00:44:41.932371'}, {'id': 63, 'name': 'Add OAuth integration for GitHub Login', 'description': 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.246358'}, {'id': 68, 'name': 'Register application in GitHub Developer Console', 'description': 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.247746'}, {'id': 69, 'name': 'Handle callback from GitHub', 'description': 'Implement the callback endpoint to process the authorization code from GitHub.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.248912'}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'description': 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 18, 'status': 'Not Started', 'created_at': '2025-01-07T19:53:50.085064', 'updated_at': '2025-01-16T19:22:36.250169'}, {'id': 100, 'name': '1.1 User Registration', 'description': 'As a user, I want to register with a username, email, and password so that I can create an account and access the system.\n\n**Acceptance Criteria:**\n\n•\tUser can input valid username, email, and password.\n•\tUsername and email must be unique.\n•\tErrors are displayed for invalid inputs or duplicate accounts.\n•\tPasswords must meet complexity requirements and be securely stored.\n•\tSuccessful registration redirects users to a login page.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:59:09.044667', 'updated_at': '2025-01-16T19:22:36.251812'}, {'id': 107, 'name': '1.1.1 Database Changes for User Registration', 'description': '1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.\n   CREATE TABLE public.users (\n       id SERIAL PRIMARY KEY,\n       username VARCHAR(50) UNIQUE NOT NULL,\n       email VARCHAR(100) UNIQUE NOT NULL,\n       password_hash VARCHAR(255) NOT NULL,\n       created_at TIMESTAMP DEFAULT NOW(),\n       updated_at TIMESTAMP DEFAULT NOW()\n);\n\n\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-11T11:36:20.238219'}, {'id': 108, 'name': '1.1.2 Backend API for Registration', 'description': '•\tCreate an endpoint POST /api/register:\n•\tValidate input fields.\n•\tHash the password using bcrypt or argon2.\n•\tInsert the user into the users table.\n•\tReturn success/failure responses.\ndddhfff\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:33.067643'}, {'id': 112, 'name': '1.2.2 Frontend Login Page', 'description': 'Develop a frontend form for user login with email and password inputs.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.683644'}, {'id': 109, 'name': '1.1.3 Create Frontend Registration Page', 'description': 'Develop a frontend form to collect user registration details.\n•\tAdd a form for username, email, and password inputs.\n•\tUse client-side validation (e.g., email format).\n•\tSend a POST request to /api/register.\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.684988'}, {'id': 110, 'name': '1.1.4 Unit Tests for Registration', 'description': 'Write unit tests for:\n\n•\tValid registration.\n•\tDuplicate username/email scenarios.\n•\tInvalid input handling.\nff', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.686902'}, {'id': 101, 'name': '1.2 User Login', 'description': 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n•\tUsers can log in with a valid email and password.\n•\tErrors are displayed for invalid credentials.\n•\tSuccessful login stores a session or JWT token.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:25:53.687936'}, {'id': 111, 'name': '1.2.1 Backend API for Login', 'description': 'Create POST /api/login endpoint to handle user login.\njjsjj', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.689096'}, {'id': 113, 'name': '1.2.3 Session Management', 'description': 'Implement secure session handling using cookies or JWT.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:20.968680'}, {'id': 114, 'name': '1.2.4 Unit Tests for Login', 'description': 'Write tests for successful and failed login attempts.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:22:36.265866'}, {'id': 106, 'name': 'Password Reset', 'description': 'As a user, I want to reset my password securely using email.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.267247'}, {'id': 128, 'name': 'Frontend Password Reset Page', 'description': 'Develop a page for users to enter a new password using a valid token.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.269158'}, {'id': 129, 'name': 'Testing Password Reset', 'description': 'Write tests for email delivery, token validation, and password updates.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.270849'}, {'id': 102, 'name': 'Logout', 'description': 'As a user, I want to log out so that I can end my session securely.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.272605'}, {'id': 117, 'name': 'Tests for Logout', 'description': 'Verify session invalidation and redirection to the login page.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.274575'}, {'id': 116, 'name': 'Frontend Logout Button', 'description': 'Add a logout button to the UI and handle session clearing.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-09T12:31:17.939784'}, {'id': 115, 'name': 'Backend API for Logout', 'description': 'Create POST /api/logout endpoint to invalidate user sessions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.277547'}, {'id': 61, 'name': 'Parent task assignment', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-01-04T22:31:45.205815', 'updated_at': '2025-02-18T06:41:37.538722'}, {'id': 45, 'name': 'Display Default Value in Dropdown', 'description': 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.280493'}, {'id': 50, 'name': 'Retrieve Current Parent Task', 'description': 'Retrieve the current parent task’s ID and name from the backend.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Completed', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-18T00:45:04.055333'}, {'id': 51, 'name': 'Set Default Value', 'description': 'Set the default value in the dropdown based on the retrieved data.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 45, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 1, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.283309'}, {'id': 46, 'name': 'Search for Parent Tasks', 'description': 'Allow users to search for tasks dynamically in the dropdown by typing.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.284882'}, {'id': 54, 'name': 'Test Partial Matching', 'description': 'Ensure the search results update in real-time as the user types.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:29.251047'}, {'id': 47, 'name': 'Handle Large Datasets Efficiently', 'description': 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:26:23.067490'}, {'id': 56, 'name': 'Paginate API Responses', 'description': 'Implement server-side filtering and pagination for large datasets.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:16.233517'}, {'id': 55, 'name': 'Enable Lazy Loading', 'description': 'Enable lazy loading or virtualization in Virtual Select.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:08.099271'}, {'id': 48, 'name': 'Select and Deselect Parent Tasks', 'description': 'Allow users to select a parent task or deselect by choosing "None."', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:25:59.651639'}, {'id': 57, 'name': 'Ensure None Option Availability', 'description': 'Add “None” as a selectable option and ensure it stays at the top of the list.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:51.310240'}, {'id': 58, 'name': 'Handle Selection Events', 'description': 'Implement event listeners to update the form’s state when the selection changes.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:43.569501'}, {'id': 49, 'name': 'Integrate Dropdown with Task Form', 'description': 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:25:36.133259'}, {'id': 59, 'name': 'Bind Dropdown to Form Field', 'description': 'Bind the dropdown to the form’s parent task field.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'In Progress', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-18T06:41:49.262443'}, {'id': 60, 'name': 'Test Form Submission', 'description': 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:28.367797'}, {'id': 41, 'name': 'Implement Searchable Dropdown', 'description': 'As a user, I want a searchable dropdown for parent task assignment.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Completed', 'created_at': '2025-01-03T09:14:28.285904', 'updated_at': '2025-02-11T08:25:07.992524'}, {'id': 52, 'name': 'Add Search Box to Dropdown', 'description': 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:01.469601'}]
2025-02-23 21:15:38,954 DEBUG: Task types: ['all', 'Epic', 'Subtask', 'User Story']
2025-02-23 21:15:38,954 DEBUG: Projects: [<Project Project Alpha (ID: 1)>, <Project Project Beta (ID: 2)>, <Project Project Gamma (ID: 3)>, <Project Project Theta (ID: 4)>, <Project Project Delta (ID: 5)>, <Project PMS - Feature Requests (ID: 7)>, <Project PMS - Backlog (ID: 6)>, <Project Miscellaneous (ID: 19)>]
2025-02-23 21:15:38,970 DEBUG: Tasks response: [{'id': 283, 'name': 'fix update title', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T08:41:58.769700', 'updated_at': '2025-02-22T12:17:39.812683'}, {'id': 298, 'name': 'example user story with parent epic 297', 'description': '', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:41:01.907455', 'updated_at': '2025-02-23T02:20:38.256245'}, {'id': 285, 'name': 'add text truncation to project names in task list', 'description': 'kkkkkkkjjjjj\nlkajdlökjsdfölkjsdfölkjdf', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-23T19:50:03.193034'}, {'id': 264, 'name': 'close all / open all childtasks', 'description': 'ölkölklkhkk', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 7, 'status': 'Not Started', 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-02-19T22:47:17.024076'}, {'id': 276, 'name': 'add support for priority', 'description': 'ffasdlkjlkj\nljkkjlkj', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P0', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-22T18:03:14.125665'}, {'id': 270, 'name': 'the newest task', 'description': '', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:07:34.368035', 'updated_at': '2025-02-23T13:04:53.023952'}, {'id': 310, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-21T22:56:46.414917', 'updated_at': '2025-02-21T23:56:46.435450'}, {'id': 265, 'name': 'smooth transition for toggles', 'description': 'ffjjlkjljlkjlkj\nkjh', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-02-20T09:59:26.301212'}, {'id': 292, 'name': 'issue: assigning contributor does not work', 'description': '### **Summary of problem and solution**\n\nThe issue was that assigning a contributor to a task via the /tasks/<task_id>/assign_contributor API endpoint resulted in a **400 Bad Request** error. Upon investigation, the following problems were identified:\n\n1. **Missing CSRF Token:**\n- The request failed due to a missing CSRF token, as shown in the error message: *“Bad Request: The CSRF token is missing.”*\n- The frontend was not correctly including the CSRF token in the request headers.\n1. **JavaScript Error (Undefined CSRF Token Variable):**\n- The error *“ReferenceError: csrfToken is not defined”* indicated that the CSRF token was not being retrieved properly in the JavaScript code.\n1. **Incorrect Fetch Request Headers:**\n- The fetch request did not include the CSRF token under the correct key (X-CSRFToken).\n- The script attempted to send the request without properly extracting the CSRF token from the meta tag.\n\n### **Solution**\n\n1. **Include the CSRF Token in the JavaScript Code**\n\nThe CSRF token was retrieved from the meta tag and used in the request headers:\n\n```jsx\n// Retrieve CSRF token from meta tag\nconst csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\');\n```\n\nThis ensures that the CSRF token is correctly fetched and available in the JavaScript scope.\n\n1. **Modify the Fetch Request to Include CSRF Token**\n\nThe request to assign a contributor was updated to include the token:\n\n```jsx\nconst response = await fetch(`/tasks/${taskId}/assign_contributor`, {\n    method: "POST",\n    headers: { \n        "Content-Type": "application/json",\n        "X-CSRFToken": csrfToken  // Include CSRF token\n    },\n    body: JSON.stringify({ contributor_id: parseInt(contributorId, 10) }),\n});\n```\n\n- **Ensures the CSRF token is sent in the request headers** so that Flask-WTF does not reject the request.\n1. **Verify and Debug Network Requests**\n- The updated request headers were verified using **Chrome DevTools > Network tab** to ensure the X-CSRFToken was included.\n- The error messages disappeared, and the contributor assignment request **succeeded with a 200 OK response**.\n\n---\n\n### **Final Outcome**\n\n🚀 The issue was resolved, and contributors can now be assigned successfully to tasks without triggering a CSRF validation error.\n\n### **Key Learnings from This Session**\n\nThis debugging session covered several important aspects of **web development with Flask and JavaScript**, particularly related to **API requests, CSRF protection, debugging tools, and database interactions**. Here are the key takeaways:\n\n---\n\n### **1. CSRF Protection in API Requests**\n\n- **Issue:** The initial error was due to **a missing CSRF token** when making a `POST` request.\n- **Fix:** The solution was to **retrieve the CSRF token from a meta tag** in the HTML and include it in the request headers.\n- **Key Learning:** Flask-WTF requires CSRF tokens for form and API submissions to **prevent cross-site request forgery (CSRF) attacks**.✅ Always ensure that API requests include a valid CSRF token.\n\n---\n\n### **2. Debugging JavaScript Fetch Requests**\n\n- **Issue:** The JavaScript code was making a fetch request, but the variable `csrfToken` was not properly defined, causing a `ReferenceError`.\n- **Fix:** Declaring `csrfToken` at the beginning of the script:\n    \n    ```jsx\n    const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\');\n    ```\n    \n- **Key Learning:**✅ JavaScript variables must be defined before they are used.✅ Use browser **developer tools (DevTools) Network tab** to inspect headers, payloads, and responses when debugging API requests.\n\n---\n\n### **3. Structuring Flask Routes for Task Management**\n\n- **Issue:** The `assign_contributor` route was failing due to incorrect request payload validation.\n- **Fix:** Improved the route’s error handling and logging:\n    \n    ```python\n    @bp.route(\'/<int:task_id>/assign_contributor\', methods=[\'POST\'])\n    def assign_contributor(task_id):\n        try:\n            data = request.get_json()\n            contributor_id = int(data.get(\'contributor_id\', 0))\n            if not contributor_id:\n                return jsonify({\'error\': \'Valid Contributor ID is required\'}), 400\n    ```\n    \n- **Key Learning:**✅ Always validate incoming data in Flask routes to prevent type errors.✅ Use `request.get_json()` properly and handle missing or incorrect data gracefully.\n\n---\n\n### **4. Utilizing Browser DevTools for Debugging**\n\n- **Issue:** The fetch request was failing with a `400 Bad Request`, and the browser console showed `ReferenceError: csrfToken is not defined`.\n- **Fix:**\n    - Used **Network tab** to inspect the request payload and headers.\n    - Used **Console tab** to catch JavaScript errors early.\n- **Key Learning:**✅ DevTools is a **critical** tool for diagnosing network request issues.✅ Always **check console errors** before assuming it\'s a backend issue.\n\n---\n\n### **5. Database Queries and ORM Debugging**\n\n- **Issue:** Tasks were not being updated correctly, possibly due to missing commit statements.\n- **Fix:** Ensured that:was executed properly.\n    \n    ```python\n    task.contributor_id = contributor_id\n    db.session.commit()\n    ```\n    \n- **Key Learning:**✅ Always call `db.session.commit()` after making changes in SQLAlchemy.✅ Rollback transactions if an error occurs to avoid database inconsistency.\n\n---\n\n### **6. Handling Asynchronous JavaScript Logic**\n\n- **Issue:** The `assignContributor` function was executing before the page was fully loaded.\n- **Fix:** Wrapped it inside a function that ensures elements exist:\n    \n    ```\n    window.setupContributorAssignment = function () {\n        const assignButton = $("#assign-contributor-btn");\n        if (!assignButton.length) {\n            setTimeout(setupContributorAssignment, 500); // Retry in 500ms\n            return;\n        }\n    ```\n    \n- **Key Learning:**✅ Use `setTimeout` to **retry event binding** when elements are dynamically loaded.✅ Always **check if elements exist before attaching event handlers**.\n\n---\n\n### **7. Best Practices for Flask Logging & Error Handling**\n\n- **Issue:** Lack of clear logging when API calls failed.\n- **Fix:** Added better logging to track failures:\n    \n    ```python\n    logger.info(f"Assigning contributor to task ID {task_id}")\n    try:\n        # Process request...\n    except Exception as e:\n        logger.error(f"Error assigning contributor: {e}")\n    ```\n    \n- **Key Learning:**✅ Log **every major step** in API processing to simplify debugging.✅ Differentiate between `logger.info()`, `logger.warning()`, and `logger.error()` based on severity.\n\n---\n\n### **Final Takeaways**\n\n🚀 **Understanding CSRF protection** and **properly structuring API requests** is crucial for secure web applications.\n\n🔍 **Browser DevTools is invaluable** for diagnosing frontend issues, especially in JavaScript.\n\n🐍 **Flask requires proper request validation, database transactions, and logging** to maintain stability.\n\n⚡ **Asynchronous JavaScript must handle dynamic elements carefully** to avoid runtime errors.\n\nThis session reinforced best practices in **frontend-backend integration, debugging, and security**, making it a great learning experience! 🚀🔥', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:11:12.273779', 'updated_at': '2025-02-18T06:41:00.286143'}, {'id': 307, 'name': 'c', 'description': '', 'task_type': 'Subtask', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-20T16:53:38.393115', 'updated_at': '2025-02-22T18:00:51.058705'}, {'id': 295, 'name': 'issue: drag and drop errors', 'description': '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:22:54.461413', 'updated_at': '2025-02-23T13:16:54.269738'}, {'id': 284, 'name': 'add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 4, 'assigned_to': 'Fredrik', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-23T19:51:06.136664'}, {'id': 288, 'name': 'when trying to move subtask to another project, make sure a warning is displayed', 'description': 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be lost"\nOR\n\nIs it possible, and is it desireable to keep parent child relationships across projects?\nSo that a parent can be in one project but the child tasks can be in different projects?\n\nLets say \nParent epic is \n"Internationalisation"\nChild user stories are\n- Timezones\n- Language\n- Currency\n- Day, Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:54:36.297869', 'updated_at': '2025-02-23T13:17:14.262634'}, {'id': 296, 'name': 'issue: contributor is lost after updating task', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:26:43.881947', 'updated_at': '2025-02-11T15:37:31.011120'}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:17.786154', 'updated_at': '2025-02-23T11:30:04.684746'}, {'id': 321, 'name': 'untitled task', 'description': '', 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-02-22T15:24:59.683105', 'updated_at': '2025-02-22T15:28:18.664289'}, {'id': 315, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T13:06:56.470332', 'updated_at': '2025-02-22T14:06:56.476919'}, {'id': 280, 'name': 'logging (task and project history)', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 1, 'assigned_to': 'Alice', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:37:44.435112', 'updated_at': '2025-02-23T13:14:30.331668'}, {'id': 297, 'name': 'example parent epic', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:39:51.620509', 'updated_at': '2025-02-10T10:39:51.622712'}, {'id': 314, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T12:03:03.637804', 'updated_at': '2025-02-22T13:03:03.643803'}, {'id': 274, 'name': 'Add support for goals, initiatives, okr´s', 'description': 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n\nölkasdölkk', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P1', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:46:27.204912', 'updated_at': '2025-02-18T06:39:43.729310'}, {'id': 320, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T15:17:39.647261', 'updated_at': '2025-02-22T16:17:39.650332'}, {'id': 304, 'name': 'g', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-19T22:02:47.172900', 'updated_at': '2025-02-19T23:02:47.179933'}, {'id': 277, 'name': 'custom task workflow statuses', 'description': 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- Custom status\n-- Custom status\n- In Progress\n-- Custom status\n-- Custom status\n-- Custom status\n- Completed\n-- Custom status\n-- Custom status\n\n2. How can we track a task through different stages and save the sequence of events or stages the task has gone through?\nI´m thinking it could be good for mapping out processes, identifying bottlenecks and provide valuable insights while improving and streamlining workflows.\n- Stages\n- Contacts taken\n- Respons time \n- Time to action after responses\n- Dependencies\n\nNeed to be able to record every action related to this action.\nCommunication integrations\n- Slack\n- Email\n- Text messages\n- Phonecalls\n- Calendar events, meetings\n- Zoom, Google meet, Teams etc..\n\n\n2. Set custom statuses per project (can use tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:16:03.352588', 'updated_at': '2025-02-17T23:32:55.626822'}, {'id': 303, 'name': 't', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-19T19:05:00.401232', 'updated_at': '2025-02-19T20:05:00.406117'}, {'id': 293, 'name': 'click on title should copy the task title and id to clipboard', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:16:33.508209', 'updated_at': '2025-02-17T19:07:44.656573'}, {'id': 287, 'name': 'when moving a parent item to another project make sure the subtasks are moved as well', 'description': '', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:48:31.986870', 'updated_at': '2025-02-17T19:08:23.749538'}, {'id': 281, 'name': 'add high level plan', 'description': 'Add some sort of high level plan that aims to keep PM/PO´s on track and not get lost into the details of an overwhelminly large backlog', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:27:01.218606', 'updated_at': '2025-02-17T19:12:02.051244'}, {'id': 301, 'name': 'untitled task', 'description': '', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'In Progress', 'created_at': '2025-02-19T11:58:55.165343', 'updated_at': '2025-02-21T11:17:05.115762'}, {'id': 319, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T14:59:09.098097', 'updated_at': '2025-02-22T15:59:09.132640'}, {'id': 317, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T13:13:24.508779', 'updated_at': '2025-02-22T14:13:24.511517'}, {'id': 278, 'name': 'search feature for tasks list', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 5, 'project': 'Project Delta', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 4, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:03.369833', 'updated_at': '2025-02-18T00:42:29.470892'}, {'id': 289, 'name': 'issue: parent task is lost when updating task', 'description': '- Summary of the problem and solution\n    \n    **Problem: Parent Task Dropdown Was Not Being Set on Modal Open**\n    \n    The issue was that when opening a task modal, the **parent task dropdown** was not pre-populated with the correct parent task. However, interacting with the dropdown (e.g., clicking on it) would suddenly trigger it to be set correctly. This meant that the dropdown initialization was likely delayed or missing a step in the modal lifecycle.\n    \n    **Debugging Steps and Observations**\n    \n    1. **Task Details Were Fetched Correctly** ✅\n    - The task details, including parent_id, were being fetched from the API successfully.\n    1. **Parent Dropdown Initialization Issues** ❌\n    - The initializeParentDropdown() function was being called, but the dropdown was sometimes **not fully ready** when we tried to set the selected parent task.\n    1. **Clicking the Dropdown Triggered the Parent to Be Set** 🤔\n    - This hinted that the dropdown was not fully ready when setParentDropdown(task.parent_id) was initially called.\n    \n    **Final Solution**\n    \n    1. **Ensuring Dropdown Readiness Before Setting the Parent Task**\n    - We added explicit **delays and checks** to confirm that the dropdown was fully initialized before attempting to set the parent task.\n    \n    Specifically, we:\n    \n    - **Waited for the dropdown to appear in the DOM** using observeParentDropdown().\n    - **Initialized the dropdown** with initializeParentDropdown().\n    - **Waited explicitly for the dropdown to be fully ready** using waitForParentDropdownReady().\n    - **Added a final delay of 200ms** before calling setParentDropdown() to ensure stability.\n    1. **Modifying openTaskModal to Handle Parent Dropdown Setup**\n    - We ensured that initializeParentDropdown() was called **after fetching task details** and before setting the parent task.\n    1. **Confirming the Fix** 🎯\n    - After these fixes, the parent dropdown was **immediately populated** upon opening the modal, without requiring user interaction.\n    \n    **Key Learnings**\n    \n    ✅ **Dropdowns in modals need careful timing** – They might not be ready when you expect them to be.\n    \n    ✅ **Waiting for DOM updates is crucial** – Observing the element ensures it actually exists before interacting with it.\n    \n    ✅ **Explicit delays can prevent race conditions** – A small delay can sometimes resolve timing issues in UI interactions.\n    \n    **Final Result**\n    \n    ✅ The modal now **correctly loads and pre-selects the parent task** without extra clicks! 🎉🚀', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T08:56:25.273984', 'updated_at': '2025-02-23T12:51:53.922845'}, {'id': 279, 'name': 'github integration', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:38.238202', 'updated_at': '2025-02-23T13:23:18.557230'}, {'id': 300, 'name': 'new task', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-18T14:25:24.773401', 'updated_at': '2025-02-18T14:26:07.982932'}, {'id': 266, 'name': 'highlight the nested tasks', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-02-23T13:20:57.641732'}, {'id': 305, 'name': 'n', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-20T10:12:52.005313', 'updated_at': '2025-02-23T12:50:45.092951'}, {'id': 318, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 1, 'assigned_to': 'Alice', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T13:39:38.859364', 'updated_at': '2025-02-23T12:53:59.013279'}, {'id': 312, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 4, 'assigned_to': 'Fredrik', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T11:45:27.081419', 'updated_at': '2025-02-23T12:51:03.918932'}, {'id': 313, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 4, 'assigned_to': 'Fredrik', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T11:45:44.396106', 'updated_at': '2025-02-23T12:53:51.194125'}, {'id': 299, 'name': 'example sub task with parent user story 298', 'description': 'Test update 1\nTest update 2\nTest update 3', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 298, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:42:38.905700', 'updated_at': '2025-02-10T23:23:08.671464'}, {'id': 309, 'name': 'test task', 'description': 'This is a test task', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 1, 'assigned_to': 'Alice', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-21T21:19:17.563435', 'updated_at': '2025-02-23T02:40:16.275244'}, {'id': 286, 'name': 'add support for labels/tags', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:46:23.985620', 'updated_at': '2025-02-23T13:23:02.680582'}, {'id': 302, 'name': 'n', 'description': '', 'task_type': 'Subtask', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-19T18:15:01.931285', 'updated_at': '2025-02-20T07:20:56.647312'}, {'id': 269, 'name': 'fix styling for sweetalert', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-02-08T15:54:56.717846', 'updated_at': '2025-02-23T11:30:35.385752'}, {'id': 316, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T13:12:44.289461', 'updated_at': '2025-02-22T14:12:44.297036'}, {'id': 273, 'name': 'disable parent task selector in epics', 'description': 'and add text, Epic can´t have parent tasks', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:45:20.740910', 'updated_at': '2025-02-10T08:39:17.639890'}, {'id': 271, 'name': 'make sure dynamically added rows has the exact same styling and includes every element', 'description': 'Missing elements:\n- Open link\n- Default project\n- Project name should be inside a pill\n- Task type should be in a pill\n- Estimations should be 0, not N/A\n- Make sure font size is matching\n- status should have the dropdown inside a pill\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T00:21:07.108431', 'updated_at': '2025-02-23T11:30:25.428577'}, {'id': 267, 'name': 'improvements to toggles and nested tasks', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 2, 'assigned_to': 'Bob', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:29:12.464594', 'updated_at': '2025-02-23T11:03:53.247332'}, {'id': 311, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 3, 'assigned_to': 'Charlie', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-21T22:58:25.440044', 'updated_at': '2025-02-23T12:11:24.815974'}, {'id': 323, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-23T02:41:28.531955', 'updated_at': '2025-02-23T03:41:28.537448'}, {'id': 322, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 1, 'assigned_to': 'Alice', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T15:38:23.342262', 'updated_at': '2025-02-23T11:09:01.873512'}, {'id': 294, 'name': 'issue: task table filters not working', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:19:21.022598', 'updated_at': '2025-02-18T06:38:16.836257'}, {'id': 257, 'name': 'Update Task API Integration', 'description': "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-02-05T22:55:49.566819', 'updated_at': '2025-02-05T22:18:17.807154'}, {'id': 275, 'name': 'add sprints, cycles', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-18T12:08:36.665524'}, {'id': 290, 'name': 'issue: error when changing task type and', 'description': 'issue: error when changing task type and parent task before saving', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:00:03.417734', 'updated_at': '2025-02-10T09:15:09.284969'}, {'id': 291, 'name': 'add dropdowns in task list for changing: project, assigned to, estimate and task type (labels/tags)', 'description': '', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-02-18T06:40:24.609233'}, {'id': 306, 'name': 'ne', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-20T11:31:03.798672', 'updated_at': '2025-02-20T12:31:03.801989'}, {'id': 308, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-21T21:18:03.772575', 'updated_at': '2025-02-21T22:18:03.781548'}, {'id': 272, 'name': 'implement a markdown text editor like notion', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-02-10T08:28:39.669255'}, {'id': 136, 'name': 'Page scroll should stay in position when reloading', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-16T18:21:50.187247', 'updated_at': '2025-01-16T19:22:36.214901'}, {'id': 130, 'name': 'Implement the Map of Task Relationships solution for drag-and-drop', 'description': 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:41:28.093022', 'updated_at': '2025-02-18T06:41:19.891744'}, {'id': 133, 'name': 'Step 4: Enhance Logging in models.py', 'description': 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nupdating the Task model in the following ways:\n\n1.\tLog Changes to parent_id:\n\t•\tLog changes to parent_id during updates, including old and new values.\n\t2.\tValidate Hierarchy with Logging:\n\t•\tLog detailed messages when validating hierarchy changes, especially for circular dependency checks.\n\nHere’s how the models.py can be updated:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy import func, cast, CheckConstraint\nfrom sqlalchemy.orm import validates\nfrom app.extensions.db import db\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\nclass Task(db.Model):\n    __tablename__ = "task"\n    \n    # Other columns...\n\n    parent_id = db.Column(\n        db.Integer, db.ForeignKey("task.id"), index=True, nullable=True\n    )\n\n    # Relationships\n    parent = db.relationship(\n        "Task", remote_side=[id], back_populates="children", lazy="select"\n    )\n    children = db.relationship(\n        "Task", back_populates="parent", lazy="select"\n    )\n\n    \n\n\n    @staticmethod\n    def _validate_no_circular_references(new_parent_id):\n        """\n        Validates that there are no circular references in the task hierarchy.\n\n        Args:\n            new_parent_id (int): The new parent ID to validate.\n\n        Raises:\n            ValueError: If a circular reference is detected.\n        """\n        visited = set()\n        current_parent_id = new_parent_id\n\n        logger.info(f"Validating circular references for parent ID: {new_parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error(\n                    f"Circular reference detected: Parent ID {current_parent_id} already visited."\n                )\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            # Fetch the next parent_id in the hierarchy\n            parent = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not parent:\n                break  # Exit if no parent is found\n            current_parent_id = parent.parent_id\n\n        logger.info("No circular reference detected.")\n\n    @validates(\'parent_id\', \'task_type\')\n    def validate_task_changes(self, key, value):\n        """\n        Validates changes to \'parent_id\' and \'task_type\'.\n        Ensures hierarchy validity and checks for circular references.\n        """\n        logger.debug(f"Validating {key} change for Task {self.id}: {value}")\n\n        if key == \'parent_id\':\n            # Log changes to parent_id\n            if self.id and value != self.parent_id:\n                logger.info(f"Task {self.id}: Updating \'parent_id\' from {self.parent_id} to {value}")\n\n            # Prevent a task from being its own parent\n            if value and value == self.id:\n                logger.error("A task cannot be its own parent.")\n                raise ValueError("A task cannot be its own parent.")\n\n            # Check for circular references\n            if value:\n                Task.check_circular_reference(self.id, value)\n\n        elif key == \'task_type\':\n            # Log changes to task_type\n            if self.id and value != self.task_type:\n                logger.info(f"Task {self.id}: Updating \'task_type\' from {self.task_type} to {value}")\n\n        # Check hierarchy rules without triggering further validation\n        if key in [\'parent_id\', \'task_type\']:\n            self._validate_hierarchy_change(key, value)\n\n        logger.info(f"Validation passed for {key}: {value}")\n        return value\n\n    def _validate_hierarchy_change(self, key, value):\n        """\n        Validates hierarchy rules for the task based on `task_type` and `parent_id`.\n        """\n        if key == \'parent_id\' and value:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=value).first()\n            if not parent_task:\n                raise ValueError("Parent task does not exist.")\n\n            logger.debug(f"Validating hierarchy: Task {self.id}, Parent Type: {parent_task.task_type}")\n            if self.task_type == "User Story" and parent_task.task_type != "Epic":\n                raise ValueError("User Stories must have an Epic as a parent.")\n            if self.task_type == "Subtask" and parent_task.task_type != "User Story":\n                raise ValueError("Subtasks must have a User Story as a parent.")\n\n        elif key == \'task_type\' and self.parent_id:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=self.parent_id).first()\n            if parent_task:\n                logger.debug(f"Validating hierarchy: Task Type: {value}, Parent Type: {parent_task.task_type}")\n                if value == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError("User Stories must have an Epic as a parent.")\n                if value == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError("Subtasks must have a User Story as a parent.")\n\n        logger.info(f"Hierarchy validation passed for Task {self.id if self.id else \'New Task\'}.")\n\n    @staticmethod\n    def check_circular_reference(task_id, parent_id):\n        """\n        Iteratively checks for circular references in the task hierarchy.\n        Prevents stack overflow on deep hierarchies.\n        """\n        visited = set()\n        current_parent_id = parent_id\n\n        logger.info(f"Checking circular reference for Task {task_id} with Parent ID: {parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error("Circular reference detected!")\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            if current_parent_id == task_id:\n                logger.error("A task cannot be its own ancestor.")\n                raise ValueError("A task cannot be its own ancestor.")\n\n            # Fetch the next parent_id in the hierarchy\n            task = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not task:\n                break\n            current_parent_id = task.parent_id\n\n        logger.info("Circular reference check passed.")\n```\nKey Enhancements:\n\t1.\tlog_and_validate_parent_id_change:\n\t•\tLogs the old and new parent_id whenever it changes.\n\t•\tEnsures no circular references are introduced.\n\t2.\t_validate_no_circular_references:\n\t•\tValidates the parent_id field to prevent circular dependencies.\n\t•\tLogs progress and raises detailed errors if violations occur.\n\t3.\tlog_and_validate_task_type_change:\n\t•\tLogs changes to task_type with the old and new values.\n\t•\tRevalidates hierarchy rules when task_type changes.\n\t4.\tDetailed Logging for Circular Reference Validation:\n\t•\t_validate_no_circular_references and check_circular_reference methods log every step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t•\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:44:08.340041', 'updated_at': '2025-01-16T19:22:36.219710'}, {'id': 132, 'name': 'Step 1: Update tasks_table_interactions.js', 'description': '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the map for efficient parent-child relationship lookups instead of DOM traversal.\n\n```\nexport const TaskManager = {\n    init: function (csrfToken) {\n        this.csrfToken = csrfToken;\n        this.initTaskParentMap(); // Initialize the map\n        this.initDragAndDrop(); // Initialize drag-and-drop functionality\n    },\n\n    // Initialize a global map for task relationships\n    taskParentMap: new Map(),\n\n    // Build the taskParentMap from the DOM\n    initTaskParentMap: function () {\n        console.log("Initializing Task Parent Map...");\n        const rows = document.querySelectorAll("tr[data-task-id]");\n\n        rows.forEach((row) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = parseInt(row.dataset.parentId, 10) || null;\n            this.taskParentMap.set(taskId, parentId);\n        });\n\n        console.log("Task Parent Map initialized:", Array.from(this.taskParentMap.entries()));\n    },\n\n    // Update the map dynamically after drag-and-drop\n    updateTaskParentMap: function (taskId, parentId) {\n        console.log(`Updating Task Parent Map: Task ${taskId} -> Parent ${parentId}`);\n        this.taskParentMap.set(taskId, parentId);\n    },\n\n    initDragAndDrop: function () {\n        if (window.isDragAndDropInitialized) {\n            console.log("Drag-and-drop is already initialized.");\n            return;\n        }\n\n        console.log("Initializing drag-and-drop within TaskManager...");\n\n        const tableBody = document.querySelector("tbody");\n        if (!tableBody) {\n            console.warn("Task table body not found for drag-and-drop initialization");\n            return;\n        }\n\n        // Initialize Sortable.js for drag-and-drop functionality\n        Sortable.create(tableBody, {\n            handle: ".task-row", // Only draggable via `.task-row` elements\n            animation: 150, // Smooth animation\n            filter: ".task-open-link", // Prevent dragging on task links\n            preventOnFilter: true, // Prevent drag if filtered element is clicked\n            onEnd: async (event) => {\n                try {\n                    console.log("Drag-and-drop operation started...");\n                    const rows = Array.from(event.from.querySelectorAll(".task-row"));\n                    const reorderedTasks = [];\n\n                    rows.forEach((row, index) => {\n                        const taskId = parseInt(row.dataset.taskId, 10);\n                        let parentId = null;\n\n                        // Get the parent ID from the map or fallback to the dataset\n                        if (row.classList.contains("subtask-row")) {\n                            const parentRow = row.previousElementSibling;\n                            parentId = parentRow\n                                ? parseInt(parentRow.dataset.taskId, 10)\n                                : this.taskParentMap.get(taskId) || null;\n                        }\n\n                        // Update the taskParentMap dynamically\n                        this.updateTaskParentMap(taskId, parentId);\n\n                        reorderedTasks.push({\n                            id: taskId,\n                            sort_order: index + 1,\n                            parent_id: parentId,\n                        });\n                    });\n\n                    console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n                    console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n                    // Send the payload to the backend\n                    const response = await fetch("/tasks/reorder_subtasks", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                            "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n                        },\n                        body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n                    });\n\n                    if (!response.ok) {\n                        const errorData = await response.json();\n                        console.error("Error reordering tasks:", errorData);\n                        alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n                        return;\n                    }\n\n                    const data = await response.json();\n                    console.log("Task reordering successful:", data);\n\n                } catch (error) {\n                    console.error("Error during drag-and-drop operation:", error);\n                    alert("An unexpected error occurred while reordering tasks.");\n                }\n            },\n        });\n\n        window.isDragAndDropInitialized = true;\n        console.log("Drag-and-drop initialized successfully.");\n    },\n};\n```\n\nKey Updates:\n\t1.\tPrecomputed Map (taskParentMap):\n\t•\tThe initTaskParentMap function initializes the map by iterating over DOM elements and mapping each task’s ID to its parent ID.\n\t•\tThe updateTaskParentMap dynamically updates the map when tasks are reordered.\n\t2.\tEfficient Parent Lookup:\n\t•\tThe parentId is derived from the precomputed map rather than DOM traversal.\n\t3.\tBackend Payload:\n\t•\tA structured payload (reorderedTasks) is sent to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t•\tCSRF protection is ensured by passing the token to the request headers.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:44:08.338301', 'updated_at': '2025-02-06T21:59:17.417466'}, {'id': 134, 'name': 'Step 2: Update the Backend in routes.py', 'description': 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\nPlan for step 2:\n\t1.\tVerify the payload structure:\n\t•\tEnsure that the payload includes all necessary fields (id, sort_order, parent_id) for each task.\n\t•\tValidate that the parent-child relationships in the precomputed map (taskParentMap) are reflected correctly in the payload.\n\t2.\tSubmit the payload to the backend:\n\t•\tEnhance the fetch request in the onEnd function of initDragAndDrop to log detailed submission data.\n\t•\tConfirm the payload integrity in the browser console before submission.\n\t3.\tUpdate backend logging:\n\t•\tAdd logging to /reorder_subtasks in routes.py to confirm receipt of the correct payload and process parent-child updates.\n\t•\tLog before and after database updates for better debugging.\n\n-----\nUpdated tasks_table_interactions.js\n\nReplace this section:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    let parentId = null;\n```\nWith:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    const parentId = this.taskParentMap.get(taskId) || null;\n```\nThe this.taskParentMap provides a precomputed and dynamic mapping of taskId to parentId. By using this map, we avoid relying on DOM traversal logic (row.closest or row.previousElementSibling) during drag-and-drop operations, which can sometimes be unreliable or cumbersome.\n\nFull Revised onEnd section:\n```\nonEnd: async (event) => {\n    try {\n        console.log("Drag-and-drop operation started...");\n        const rows = Array.from(event.from.querySelectorAll(".task-row"));\n        const reorderedTasks = [];\n\n        rows.forEach((row, index) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = this.taskParentMap.get(taskId) || null;\n\n            // Update the taskParentMap dynamically\n            this.updateTaskParentMap(taskId, parentId);\n\n            reorderedTasks.push({\n                id: taskId,\n                sort_order: index + 1,\n                parent_id: parentId,\n            });\n        });\n\n        console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n        console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n        // Send the payload to the backend\n        const response = await fetch("/tasks/reorder_subtasks", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n            },\n            body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error("Error reordering tasks:", errorData);\n            alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n            return;\n        }\n\n        const data = await response.json();\n        console.log("Task reordering successful:", data);\n\n    } catch (error) {\n        console.error("Error during drag-and-drop operation:", error);\n        alert("An unexpected error occurred while reordering tasks.");\n    }\n}\n```\n---------------------------------\nEnsure updates include:\n\t•\tBetter Logging: Adding logs for key events such as database changes and validation results.\n\t•\tInput Validation: Ensure all required fields (id, sort_order, parent_id) exist in the payload.\n\t•\tPost-Commit Validation: Confirm database updates after the commit.\n\t•\tImproved Error Handling: Include specific error messages and consistent rollback mechanisms.\n\nBelow is the revised reorder_subtasks route with descriptive comments for each section:\n```\n@bp.route("/reorder_subtasks", methods=["POST"])\ndef reorder_subtasks():\n    """\n    Reorder subtasks globally or reassign them to a different parent.\n\n    Steps:\n    - Parse and validate input from the frontend.\n    - Update parent-child relationships and sort order in the database.\n    - Commit changes and return a success response.\n    - Handle errors gracefully and provide detailed logs for debugging.\n    """\n    logger.info("Entering reorder_subtasks route...")\n    logger.info(f"Received payload for reordering tasks: {request.json}")\n\n    try:\n        # Step 1: Parse input\n        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered\n        ordered_tasks = request.json.get("ordered_tasks", [])\n\n        logger.debug(f"Parsed parent_id: {parent_id}")\n        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")\n\n        # Step 2: Validate input\n        if not isinstance(ordered_tasks, list) or not all(\n            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task\n            for task in ordered_tasks\n        ):\n            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")\n            return jsonify({\n                "error": "Invalid input format for \'ordered_tasks\'. Each task must include \'id\', \'sort_order\', and \'parent_id\'."\n            }), 400\n\n        # Step 3: Validate parent task (if applicable)\n        if parent_id is not None:\n            parent_task = Task.query.get(parent_id)\n            if not parent_task:\n                logger.error(f"Parent task with ID {parent_id} not found.")\n                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400\n\n        logger.info("Input validation passed. Proceeding with task updates...")\n\n        # Step 4: Process updates for each subtask\n        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation\n\n        for task_data in ordered_tasks:\n            subtask_id = task_data["id"]\n            sort_order = task_data["sort_order"]\n            new_parent_id = task_data["parent_id"]\n\n            # Fetch the subtask from the database\n            subtask = Task.query.get(subtask_id)\n            if not subtask:\n                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")\n                continue\n\n            # Log and update parent_id if it changes\n            if new_parent_id is not None and new_parent_id != subtask.parent_id:\n                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")\n                subtask.parent_id = new_parent_id\n\n            # Update sort order\n            subtask.sort_order = sort_order\n            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")\n\n            # Add to the list of updated subtasks for validation\n            updated_subtasks.append(subtask)\n\n        # Step 5: Commit changes to the database\n        try:\n            db.session.commit()\n            logger.info(f"Subtasks reordered successfully: {[task[\'id\'] for task in ordered_tasks]}")\n        except Exception as e:\n            logger.error(f"Error committing changes to the database: {str(e)}")\n            db.session.rollback()\n            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500\n\n        # Step 6: Post-commit validation\n        for subtask in updated_subtasks:\n            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")\n            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")\n\n        # Step 7: Return success response\n        return jsonify({\n            "success": True,\n            "message": "Subtasks reordered successfully.",\n            "updated_subtasks": [subtask.id for subtask in updated_subtasks]\n        }), 200\n\n    except Exception as e:\n        # Step 8: Handle unexpected errors\n        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)\n        db.session.rollback()\n        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500\n```\nKey Changes and Descriptive Comments\n\t1.\tInput Parsing:\n\t•\tExtracts parent_id and ordered_tasks from the request payload.\n\t•\tLogs the parsed values for debugging.\n\t2.\tInput Validation:\n\t•\tEnsures ordered_tasks is a list of dictionaries with the required keys.\n\t•\tValidates parent_id if provided, ensuring the parent task exists in the database.\n\t3.\tUpdate Processing:\n\t•\tIterates through ordered_tasks, updating each task’s parent_id and sort_order.\n\t•\tLogs changes for each task.\n\t4.\tDatabase Commit:\n\t•\tCommits all updates in a single transaction.\n\t•\tLogs success or rolls back changes in case of an error.\n\t5.\tPost-Commit Validation:\n\t•\tVerifies that the parent_id and sort_order changes were successfully saved to the database.\n\t6.\tError Handling:\n\t•\tCaptures and logs exceptions during processing or committing.\n\t•\tProvides meaningful error messages to the frontend.\n\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:46:29.348853', 'updated_at': '2025-02-06T21:59:21.617065'}, {'id': 131, 'name': 'Step 5: Update utils.py', 'description': 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nChanges to Make:\n\t1.\tEnhance Task Filtering:\n\t•\tEnsure the filters handle parent-child relationships explicitly.\n\t•\tAdd options to include or exclude subtasks in queries.\n\t2.\tUtility Function for Debugging Parent-Child Relationships:\n\t•\tProvide a function to generate a map or list of parent-child relationships for debugging purposes.\n\t3.\tValidation Functions:\n\t•\tAdd a utility function to validate parent-child relationships and ensure no circular dependencies.\n\nUpdated utils.py Code:\n```\nimport logging\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import joinedload\nfrom app.extensions.db import db\nfrom app.tasks.models import Task\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\n\nclass TaskService:\n    @staticmethod\n    def filter_tasks(filters=None, include_subtasks=True, page=None, per_page=None):\n        """\n        Dynamically filters tasks with an option to include or exclude subtasks.\n\n        Args:\n            filters (dict): Filtering criteria.\n            include_subtasks (bool): Whether to include subtasks in the query.\n            page (int, optional): Page number for pagination.\n            per_page (int, optional): Items per page for pagination.\n\n        Returns:\n            Query or Pagination: A SQLAlchemy query object or paginated results.\n        """\n        query = Task.query.options(\n            db.joinedload(Task.project).joinedload(Project.contributors),\n            db.joinedload(Task.contributor),\n            db.joinedload(Task.children),\n        ).order_by(Task.sort_order)\n\n        if filters:\n            logger.debug(f"Applying filters: {filters}")\n\n            # Apply standard filters\n            if "is_archived" in filters:\n                query = query.filter(Task.is_archived == filters["is_archived"])\n            if "project_id" in filters:\n                query = query.filter(Task.project_id == filters["project_id"])\n            if "task_type" in filters:\n                if isinstance(filters["task_type"], list):\n                    query = query.filter(Task.task_type.in_(filters["task_type"]))\n                else:\n                    query = query.filter(Task.task_type == filters["task_type"])\n            if "completion_status" in filters:\n                completion_map = {"completed": True, "in_progress": False}\n                if filters["completion_status"] in completion_map:\n                    query = query.filter(Task.completed == completion_map[filters["completion_status"]])\n\n            # Optionally exclude subtasks\n            if not include_subtasks:\n                query = query.filter(Task.task_type != "Subtask")\n\n        logger.debug(f"Generated query: {query}")\n\n        # Pagination\n        if page and per_page:\n            return query.paginate(page=page, per_page=per_page, error_out=False)\n        return query\n\n    @staticmethod\n    def debug_parent_child_relationships(project_id=None):\n        """\n        Generates a debug map of parent-child relationships for all tasks.\n\n        Args:\n            project_id (int, optional): Restrict to tasks from a specific project.\n\n        Returns:\n            dict: A dictionary mapping parent IDs to their child task IDs.\n        """\n        query = Task.query\n        if project_id:\n            query = query.filter(Task.project_id == project_id)\n\n        tasks = query.options(\n            db.load_only(Task.id, Task.parent_id)\n        ).all()\n\n        relationship_map = {}\n        for task in tasks:\n            if task.parent_id not in relationship_map:\n                relationship_map[task.parent_id] = []\n            relationship_map[task.parent_id].append(task.id)\n\n        logger.debug(f"Parent-Child Relationship Map: {relationship_map}")\n        return relationship_map\n\n    @staticmethod\n    def validate_parent_child_relationships():\n        """\n        Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.\n\n        Raises:\n            ValueError: If invalid relationships are detected.\n        """\n        tasks = Task.query.options(db.joinedload(Task.parent)).all()\n\n        for task in tasks:\n            if task.parent_id:\n                parent_task = task.parent\n                if not parent_task:\n                    raise ValueError(f"Task {task.id} has an invalid parent ID {task.parent_id}.")\n\n                # Validate hierarchy rules\n                if task.task_type == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError(f"User Story {task.id} must have an Epic as its parent.")\n                if task.task_type == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError(f"Subtask {task.id} must have a User Story as its parent.")\n\n        logger.info("All parent-child relationships are valid.")\n\n    @staticmethod\n    def get_all_task_ids_with_parents():\n        """\n        Returns a flat list of tasks with their parent IDs for debugging.\n\n        Returns:\n            list: A list of tuples (task_id, parent_id).\n        """\n        tasks = Task.query.with_entities(Task.id, Task.parent_id).all()\n        logger.debug(f"Task IDs with Parent IDs: {tasks}")\n        return tasks\n```\n\n\nExplanation of Changes:\n\t1.\tfilter_tasks Enhancements:\n\t•\tAdded include_subtasks parameter to optionally exclude subtasks from the query.\n\t2.\tdebug_parent_child_relationships:\n\t•\tCreates a parent-child relationship map for debugging purposes.\n\t3.\tvalidate_parent_child_relationships:\n\t•\tIterates through all tasks to validate parent-child hierarchy and ensures no invalid relationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t•\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.091824', 'updated_at': '2025-01-16T19:22:36.236691'}, {'id': 135, 'name': 'Step 3: Update list.html', 'description': 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already includes everything needed. No required changes.\n\nHere´s the relevant section of list.html:\n\n```\n<tr id="task-{{ task.id }}"\n                class="task-row {% if task.task_type == \'Subtask\' %}subtask-row{% elif task.task_type == \'User Story\' %}user-story-row{% elif task.task_type == \'Epic\' %}epic-row{% endif %}"\n                style="background-color: \n                {% if task.task_type == \'Subtask\' %}\n                    rgba(200, 230, 255, 0.5); /* Light blue for Subtask */\n                {% elif task.task_type == \'User Story\' %}\n                    rgba(255, 255, 200, 0.5); /* Light yellow for User Story */\n                {% elif task.task_type == \'Epic\' %}\n                    rgba(255, 200, 200, 0.5); /* Light red for Epic */\n                {% else %}\n                    rgba(240, 240, 240, 1); /* Default light gray */\n                {% endif %};"\n                data-task-id="{{ task.id }}"\n                data-parent-id="{{ task.parent_id or \'\' }}"\n                data-level="{{ depth }}">\n                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>\n                <td>\n                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}\n                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}" aria-label="Toggle details for task {{ task.name }}">\n                        <i class="bi bi-chevron-right"></i>\n                    </button>\n                    {% endif %}\n                </td>\n                <td class="fw-medium fs-6 \n                {% if task.task_type == \'Epic\' %}\n                    epic-cell\n                {% elif task.task_type == \'User Story\' %}\n                    user-story-cell\n                {% elif task.task_type == \'Subtask\' %}\n                    subtask-cell\n                {% endif %}" \n                style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">\n                <span class="bi fs-6\n                {% if task.task_type == \'Epic\' %}\n                    bi-circle-fill\n                {% elif task.task_type == \'User Story\' %}\n                    bi-circle-half\n                {% elif task.task_type == \'Subtask\' %}\n                    bi-circle\n                {% endif %}">\n                </span>\n                {{ task.name }}\n                <small class="text-muted fw-light">\n                    (Parent-ID: {{ task.parent_id or \'None\' }})\n                </small>\n                <!-- Open Link -->\n                <a href="#" class="task-open-link" data-task-id="{{ task.id }}">\n                    <i class="bi bi-arrows-angle-expand" style="font-size: 0.8rem; color: white;"></i>\n                    Open\n                </a>\n            </td>\n                <td class="fw-light fs-6">\n                    <small class>\n                    LAC-{{ task.id }}\n                    </small>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light text-bg-secondary">\n                        {{ task.project if task.project else "Unknown Project" }}\n                    </span>\n                </td>\n                <td class="fs-6" data-contributor-column>{{ task.assigned_to if task.assigned_to else "Unassigned" }}</td>\n                <td class="fs-6">{{ task.story_points }}</td>\n                <td class="fs-6">\n                    <span class="badge rounded-pill fw-light text-bg-light">\n                        {{ task.task_type }}\n                    </span>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light {% if task.completed %}text-bg-success{% else %}text-bg-warning{% endif %}">\n                        {{ "Completed" if task.completed else "In Progress" }}\n                    </span>\n                </td>\n                <td>\n                    <!-- Delete Icon -->\n                    <button class="btn btn-dark btn-sm delete-task-btn" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .2rem; --bs-btn-font-size: .75rem;" data-task-id="{{ task.id }}" aria-label="Deletes task {{ task.id }}">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n            </tr>\n            {% for child in tasks if child.parent_id == task.id %}\n                {{ render_task(child, tasks, depth + 1) }}\n            {% endfor %}\n            {% endmacro %}\n            \n            <!-- Render top-level tasks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:46:29.349784', 'updated_at': '2025-01-16T19:22:36.238473'}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'description': 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitHub Login involves integrating OAuth 2.0, which both services support. The complexity depends on your app’s existing setup, frameworks, and experience with third-party authentication. Below is a breakdown:\n\nKey Steps for Implementing Google or GitHub Login\n\t1.\tSet Up OAuth Credentials:\n\t•\tRegister your application in the Google Cloud Console or GitHub Developer Settings.\n\t•\tObtain the client ID and client secret.\n\t2.\tInstall Required Libraries:\n\t•\tUse a library for OAuth (e.g., flask-oauthlib, python-social-auth, or authlib).\n\t•\tPopular frameworks like Flask and Django already have robust integrations for OAuth providers.\n\t3.\tBackend Configuration:\n\t•\tImplement an endpoint to handle the OAuth flow (/auth/login/google or /auth/login/github).\n\t•\tConfigure your app to send users to Google or GitHub’s authentication page.\n\t•\tHandle the OAuth callback to exchange the authorization code for an access token.\n\t•\tVerify the token and fetch user information (e.g., email, name).\n\t4.\tLink OAuth to User Registration:\n\t•\tOn successful login, create or retrieve a user in your database.\n\t•\tStore the user’s details like email, OAuth provider ID, and access token.\n\t5.\tFrontend Integration (if applicable):\n\t•\tAdd “Login with Google” or “Login with GitHub” buttons.\n\t•\tRedirect to your backend’s OAuth endpoint when clicked.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T12:15:54.291625', 'updated_at': '2025-01-16T19:22:36.239866'}, {'id': 62, 'name': 'Add OAuth integration for Google Login', 'description': 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-02-18T00:44:28.917671'}, {'id': 64, 'name': 'Setup project credentials for Google API', 'description': 'Generate client ID and secret from Google API Console for your application.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-02-18T00:44:45.802506'}, {'id': 67, 'name': 'Test Google OAuth flow', 'description': 'Verify the OAuth flow using test accounts and check the token exchange.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-02-18T00:44:43.790066'}, {'id': 65, 'name': 'Implement backend endpoints for Google OAuth', 'description': 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-02-18T00:44:41.932371'}, {'id': 63, 'name': 'Add OAuth integration for GitHub Login', 'description': 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.246358'}, {'id': 68, 'name': 'Register application in GitHub Developer Console', 'description': 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.247746'}, {'id': 69, 'name': 'Handle callback from GitHub', 'description': 'Implement the callback endpoint to process the authorization code from GitHub.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.248912'}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'description': 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 18, 'status': 'Not Started', 'created_at': '2025-01-07T19:53:50.085064', 'updated_at': '2025-01-16T19:22:36.250169'}, {'id': 100, 'name': '1.1 User Registration', 'description': 'As a user, I want to register with a username, email, and password so that I can create an account and access the system.\n\n**Acceptance Criteria:**\n\n•\tUser can input valid username, email, and password.\n•\tUsername and email must be unique.\n•\tErrors are displayed for invalid inputs or duplicate accounts.\n•\tPasswords must meet complexity requirements and be securely stored.\n•\tSuccessful registration redirects users to a login page.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:59:09.044667', 'updated_at': '2025-01-16T19:22:36.251812'}, {'id': 107, 'name': '1.1.1 Database Changes for User Registration', 'description': '1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.\n   CREATE TABLE public.users (\n       id SERIAL PRIMARY KEY,\n       username VARCHAR(50) UNIQUE NOT NULL,\n       email VARCHAR(100) UNIQUE NOT NULL,\n       password_hash VARCHAR(255) NOT NULL,\n       created_at TIMESTAMP DEFAULT NOW(),\n       updated_at TIMESTAMP DEFAULT NOW()\n);\n\n\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-11T11:36:20.238219'}, {'id': 108, 'name': '1.1.2 Backend API for Registration', 'description': '•\tCreate an endpoint POST /api/register:\n•\tValidate input fields.\n•\tHash the password using bcrypt or argon2.\n•\tInsert the user into the users table.\n•\tReturn success/failure responses.\ndddhfff\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:33.067643'}, {'id': 112, 'name': '1.2.2 Frontend Login Page', 'description': 'Develop a frontend form for user login with email and password inputs.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.683644'}, {'id': 109, 'name': '1.1.3 Create Frontend Registration Page', 'description': 'Develop a frontend form to collect user registration details.\n•\tAdd a form for username, email, and password inputs.\n•\tUse client-side validation (e.g., email format).\n•\tSend a POST request to /api/register.\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.684988'}, {'id': 110, 'name': '1.1.4 Unit Tests for Registration', 'description': 'Write unit tests for:\n\n•\tValid registration.\n•\tDuplicate username/email scenarios.\n•\tInvalid input handling.\nff', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.686902'}, {'id': 101, 'name': '1.2 User Login', 'description': 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n•\tUsers can log in with a valid email and password.\n•\tErrors are displayed for invalid credentials.\n•\tSuccessful login stores a session or JWT token.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:25:53.687936'}, {'id': 111, 'name': '1.2.1 Backend API for Login', 'description': 'Create POST /api/login endpoint to handle user login.\njjsjj', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.689096'}, {'id': 113, 'name': '1.2.3 Session Management', 'description': 'Implement secure session handling using cookies or JWT.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:20.968680'}, {'id': 114, 'name': '1.2.4 Unit Tests for Login', 'description': 'Write tests for successful and failed login attempts.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:22:36.265866'}, {'id': 106, 'name': 'Password Reset', 'description': 'As a user, I want to reset my password securely using email.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.267247'}, {'id': 128, 'name': 'Frontend Password Reset Page', 'description': 'Develop a page for users to enter a new password using a valid token.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.269158'}, {'id': 129, 'name': 'Testing Password Reset', 'description': 'Write tests for email delivery, token validation, and password updates.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.270849'}, {'id': 102, 'name': 'Logout', 'description': 'As a user, I want to log out so that I can end my session securely.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.272605'}, {'id': 117, 'name': 'Tests for Logout', 'description': 'Verify session invalidation and redirection to the login page.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.274575'}, {'id': 116, 'name': 'Frontend Logout Button', 'description': 'Add a logout button to the UI and handle session clearing.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-09T12:31:17.939784'}, {'id': 115, 'name': 'Backend API for Logout', 'description': 'Create POST /api/logout endpoint to invalidate user sessions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.277547'}, {'id': 61, 'name': 'Parent task assignment', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-01-04T22:31:45.205815', 'updated_at': '2025-02-18T06:41:37.538722'}, {'id': 45, 'name': 'Display Default Value in Dropdown', 'description': 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.280493'}, {'id': 50, 'name': 'Retrieve Current Parent Task', 'description': 'Retrieve the current parent task’s ID and name from the backend.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Completed', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-18T00:45:04.055333'}, {'id': 51, 'name': 'Set Default Value', 'description': 'Set the default value in the dropdown based on the retrieved data.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 45, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 1, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.283309'}, {'id': 46, 'name': 'Search for Parent Tasks', 'description': 'Allow users to search for tasks dynamically in the dropdown by typing.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.284882'}, {'id': 54, 'name': 'Test Partial Matching', 'description': 'Ensure the search results update in real-time as the user types.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:29.251047'}, {'id': 47, 'name': 'Handle Large Datasets Efficiently', 'description': 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:26:23.067490'}, {'id': 56, 'name': 'Paginate API Responses', 'description': 'Implement server-side filtering and pagination for large datasets.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:16.233517'}, {'id': 55, 'name': 'Enable Lazy Loading', 'description': 'Enable lazy loading or virtualization in Virtual Select.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:08.099271'}, {'id': 48, 'name': 'Select and Deselect Parent Tasks', 'description': 'Allow users to select a parent task or deselect by choosing "None."', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:25:59.651639'}, {'id': 57, 'name': 'Ensure None Option Availability', 'description': 'Add “None” as a selectable option and ensure it stays at the top of the list.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:51.310240'}, {'id': 58, 'name': 'Handle Selection Events', 'description': 'Implement event listeners to update the form’s state when the selection changes.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:43.569501'}, {'id': 49, 'name': 'Integrate Dropdown with Task Form', 'description': 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:25:36.133259'}, {'id': 59, 'name': 'Bind Dropdown to Form Field', 'description': 'Bind the dropdown to the form’s parent task field.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'In Progress', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-18T06:41:49.262443'}, {'id': 60, 'name': 'Test Form Submission', 'description': 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:28.367797'}, {'id': 41, 'name': 'Implement Searchable Dropdown', 'description': 'As a user, I want a searchable dropdown for parent task assignment.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Completed', 'created_at': '2025-01-03T09:14:28.285904', 'updated_at': '2025-02-11T08:25:07.992524'}, {'id': 52, 'name': 'Add Search Box to Dropdown', 'description': 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:01.469601'}]
2025-02-23 21:15:39,042 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-23 21:15:39,042 INFO: [generated in 0.00019s] {'param_1': 2}
2025-02-23 21:15:39,043 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-23 21:15:39,043 INFO: [cached since 0.001238s ago] {'param_1': 3}
2025-02-23 21:15:39,044 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-23 21:15:39,044 INFO: [cached since 0.00185s ago] {'param_1': 4}
2025-02-23 21:15:39,045 INFO: ROLLBACK
2025-02-23 21:15:39,046 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:39] "GET /tasks/?page=1&is_archived=False HTTP/1.1" 200 -
2025-02-23 21:15:39,142 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:39] "[36mGET /static/custom.css HTTP/1.1[0m" 304 -
2025-02-23 21:15:39,142 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:39] "[36mGET /static/js/modals.js HTTP/1.1[0m" 304 -
2025-02-23 21:15:39,143 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:39] "[36mGET /static/js/tasks_table_interactions.js HTTP/1.1[0m" 304 -
2025-02-23 21:15:39,143 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:39] "[36mGET /static/js/filters.js HTTP/1.1[0m" 304 -
2025-02-23 21:15:39,159 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:39] "[36mGET /static/images/background.svg HTTP/1.1[0m" 304 -
2025-02-23 21:15:39,447 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:39] "[36mGET /static/favicon.ico HTTP/1.1[0m" 304 -
2025-02-23 21:15:44,343 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:44] "GET /socket.io/?EIO=4&transport=websocket&sid=NM_tOINo36Con9fIAAAA HTTP/1.1" 200 -
2025-02-23 21:15:45,111 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:45] "GET /socket.io/?EIO=4&transport=polling&t=2jgqu822 HTTP/1.1" 200 -
2025-02-23 21:15:45,123 INFO: BEGIN (implicit)
2025-02-23 21:15:45,155 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 21:15:45,169 INFO: [generated in 0.01494s] {}
2025-02-23 21:15:45,175 INFO: Entering list_tasks_json route...
2025-02-23 21:15:45,189 DEBUG: Filters used in API: {'is_archived': False}
2025-02-23 21:15:45,176 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:45] "POST /socket.io/?EIO=4&transport=polling&t=2jgt6ktn&sid=FMZh-51LSe2UL86zAAA6 HTTP/1.1" 200 -
2025-02-23 21:15:45,194 DEBUG: Applying filters: {'is_archived': False}
2025-02-23 21:15:45,199 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:15:45,202 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:45] "GET /socket.io/?EIO=4&transport=polling&t=2jgt83w2&sid=FMZh-51LSe2UL86zAAA6 HTTP/1.1" 200 -
2025-02-23 21:15:45,223 INFO: BEGIN (implicit)
2025-02-23 21:15:45,254 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 21:15:45,255 INFO: [generated in 0.00053s] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 21:15:45,233 INFO: BEGIN (implicit)
2025-02-23 21:15:45,259 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 21:15:45,259 INFO: [cached since 0.005333s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 21:15:45,234 INFO: [generated in 0.03550s] {'param_1': 1}
2025-02-23 21:15:45,233 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-23 21:15:45,277 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 21:15:45,277 INFO: [generated in 0.00017s] {}
2025-02-23 21:15:45,278 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:15:45,278 INFO: [cached since 0.08006s ago] {'param_1': 2}
2025-02-23 21:15:45,280 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 21:15:45,280 INFO: [cached since 0.002867s ago] {}
2025-02-23 21:15:45,291 INFO: ROLLBACK
2025-02-23 21:15:45,306 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:45] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 21:15:45,347 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:15:45,347 INFO: [cached since 0.149s ago] {'param_1': 3}
2025-02-23 21:15:45,348 INFO: ROLLBACK
2025-02-23 21:15:45,351 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:15:45,351 INFO: [cached since 0.1531s ago] {'param_1': 4}
2025-02-23 21:15:45,373 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:45] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 21:15:45,374 INFO: BEGIN (implicit)
2025-02-23 21:15:45,377 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:15:45,388 INFO: [cached since 0.1896s ago] {'param_1': 5}
2025-02-23 21:15:45,380 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-23 21:15:45,387 INFO: BEGIN (implicit)
2025-02-23 21:15:45,391 INFO: [generated in 0.01136s] {'pk_1': 19}
2025-02-23 21:15:45,393 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-23 21:15:45,395 INFO: ROLLBACK
2025-02-23 21:15:45,396 INFO: [cached since 6.579s ago] {'param_1': 110, 'param_2': 0}
2025-02-23 21:15:45,399 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:45] "GET /api/contributors HTTP/1.1" 200 -
2025-02-23 21:15:45,410 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 21:15:45,410 INFO: [cached since 0.2559s ago] {}
2025-02-23 21:15:45,418 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-23 21:15:45,418 INFO: [generated in 0.00054s] {'param_1': 19}
2025-02-23 21:15:45,510 INFO: ROLLBACK
2025-02-23 21:15:45,608 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:45] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-02-23 21:15:45,804 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-23 21:15:45,805 INFO: [cached since 6.896s ago] {}
2025-02-23 21:15:45,809 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-23 21:15:45,809 INFO: [cached since 6.891s ago] {}
2025-02-23 21:15:45,811 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 21:15:45,812 INFO: [cached since 6.889s ago] {}
2025-02-23 21:15:45,816 INFO: ROLLBACK
2025-02-23 21:15:45,817 INFO: 127.0.0.1 - - [23/Feb/2025 21:15:45] "GET /api/tasks HTTP/1.1" 200 -
2025-02-23 21:20:10,644 INFO: 127.0.0.1 - - [23/Feb/2025 21:20:10] "GET /socket.io/?EIO=4&transport=polling&t=2p5o00iq HTTP/1.1" 200 -
2025-02-23 21:20:10,690 INFO: 127.0.0.1 - - [23/Feb/2025 21:20:10] "POST /socket.io/?EIO=4&transport=polling&t=2p5q3tj7&sid=wQ9ntvWTU_qhLbtJAAA8 HTTP/1.1" 200 -
2025-02-23 21:20:10,700 INFO: 127.0.0.1 - - [23/Feb/2025 21:20:10] "GET /socket.io/?EIO=4&transport=polling&t=2p5q4w0d&sid=wQ9ntvWTU_qhLbtJAAA8 HTTP/1.1" 200 -
2025-02-23 21:20:10,724 INFO: 127.0.0.1 - - [23/Feb/2025 21:20:10] "GET /socket.io/?EIO=4&transport=polling&t=2p5qycdy&sid=wQ9ntvWTU_qhLbtJAAA8 HTTP/1.1" 200 -
2025-02-23 21:51:55,138 INFO: 127.0.0.1 - - [23/Feb/2025 21:51:55] "GET /socket.io/?EIO=4&transport=polling&t=3tz6o06o HTTP/1.1" 200 -
2025-02-23 21:51:55,292 INFO: 127.0.0.1 - - [23/Feb/2025 21:51:55] "POST /socket.io/?EIO=4&transport=polling&t=3tz9h7jz&sid=_GCEBKO3Rvm9xMxfAAA- HTTP/1.1" 200 -
2025-02-23 21:51:55,293 INFO: 127.0.0.1 - - [23/Feb/2025 21:51:55] "GET /socket.io/?EIO=4&transport=polling&t=3tz9l4tu&sid=_GCEBKO3Rvm9xMxfAAA- HTTP/1.1" 200 -
2025-02-23 21:51:55,301 INFO: 127.0.0.1 - - [23/Feb/2025 21:51:55] "GET /socket.io/?EIO=4&transport=polling&t=3tzc0nis&sid=_GCEBKO3Rvm9xMxfAAA- HTTP/1.1" 200 -
2025-02-23 21:52:24,960 INFO: 127.0.0.1 - - [23/Feb/2025 21:52:24] "GET /socket.io/?EIO=4&transport=polling&t=3um7ndlz HTTP/1.1" 200 -
2025-02-23 21:52:25,025 INFO: 127.0.0.1 - - [23/Feb/2025 21:52:25] "POST /socket.io/?EIO=4&transport=polling&t=3um842w0&sid=8LV_roIKH78-r_FWAABA HTTP/1.1" 200 -
2025-02-23 21:52:25,035 INFO: 127.0.0.1 - - [23/Feb/2025 21:52:25] "GET /socket.io/?EIO=4&transport=websocket&sid=FMZh-51LSe2UL86zAAA6 HTTP/1.1" 200 -
2025-02-23 21:52:25,038 INFO: 127.0.0.1 - - [23/Feb/2025 21:52:25] "GET /socket.io/?EIO=4&transport=polling&t=3um85cr3&sid=8LV_roIKH78-r_FWAABA HTTP/1.1" 200 -
2025-02-23 21:52:25,063 INFO: 127.0.0.1 - - [23/Feb/2025 21:52:25] "GET /socket.io/?EIO=4&transport=websocket&sid=wQ9ntvWTU_qhLbtJAAA8 HTTP/1.1" 200 -
2025-02-23 21:52:25,064 INFO: 127.0.0.1 - - [23/Feb/2025 21:52:25] "GET /socket.io/?EIO=4&transport=websocket&sid=_GCEBKO3Rvm9xMxfAAA- HTTP/1.1" 200 -
2025-02-23 21:52:25,077 INFO: 127.0.0.1 - - [23/Feb/2025 21:52:25] "GET /socket.io/?EIO=4&transport=polling&t=3umav490&sid=8LV_roIKH78-r_FWAABA HTTP/1.1" 200 -
2025-02-23 21:52:25,478 INFO: 127.0.0.1 - - [23/Feb/2025 21:52:25] "GET /socket.io/?EIO=4&transport=polling&t=3umlcjgj HTTP/1.1" 200 -
2025-02-23 21:52:25,637 INFO: BEGIN (implicit)
2025-02-23 21:52:25,644 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 21:52:25,650 INFO: [cached since 2201s ago] {}
2025-02-23 21:52:25,675 INFO: BEGIN (implicit)
2025-02-23 21:52:25,676 INFO: BEGIN (implicit)
2025-02-23 21:52:25,682 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 21:52:25,682 INFO: [cached since 2200s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 21:52:25,678 INFO: Entering list_tasks_json route...
2025-02-23 21:52:25,680 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 21:52:25,689 INFO: [cached since 2200s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 21:52:25,687 DEBUG: Filters used in API: {'is_archived': False}
2025-02-23 21:52:25,694 DEBUG: Applying filters: {'is_archived': False}
2025-02-23 21:52:25,751 INFO: 127.0.0.1 - - [23/Feb/2025 21:52:25] "POST /socket.io/?EIO=4&transport=polling&t=3umn4jmn&sid=tMU837ts7s7sG3BSAABC HTTP/1.1" 200 -
2025-02-23 21:52:25,768 INFO: 127.0.0.1 - - [23/Feb/2025 21:52:25] "GET /socket.io/?EIO=4&transport=polling&t=3umn5hgw&sid=tMU837ts7s7sG3BSAABC HTTP/1.1" 200 -
2025-02-23 21:52:25,784 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:52:25,785 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 21:52:25,797 INFO: [cached since 2201s ago] {'param_1': 1}
2025-02-23 21:52:25,791 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 21:52:25,799 INFO: [cached since 2201s ago] {}
2025-02-23 21:52:25,798 INFO: [cached since 2201s ago] {}
2025-02-23 21:52:25,799 INFO: 127.0.0.1 - - [23/Feb/2025 21:52:25] "GET /socket.io/?EIO=4&transport=polling&t=3umuiz1w&sid=tMU837ts7s7sG3BSAABC HTTP/1.1" 200 -
2025-02-23 21:52:25,794 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-23 21:52:25,811 INFO: ROLLBACK
2025-02-23 21:52:25,814 INFO: ROLLBACK
2025-02-23 21:52:25,815 INFO: BEGIN (implicit)
2025-02-23 21:52:25,816 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-23 21:52:25,817 INFO: [cached since 2207s ago] {'param_1': 110, 'param_2': 0}
2025-02-23 21:52:25,821 INFO: 127.0.0.1 - - [23/Feb/2025 21:52:25] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 21:52:25,845 INFO: 127.0.0.1 - - [23/Feb/2025 21:52:25] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 21:52:25,847 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:52:25,848 INFO: [cached since 2201s ago] {'param_1': 2}
2025-02-23 21:52:25,871 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:52:25,897 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-23 21:52:25,899 INFO: [cached since 2201s ago] {'param_1': 3}
2025-02-23 21:52:25,901 INFO: [cached since 2207s ago] {}
2025-02-23 21:52:26,016 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:52:26,018 INFO: [cached since 2201s ago] {'param_1': 4}
2025-02-23 21:52:26,024 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-23 21:52:26,024 INFO: [cached since 2207s ago] {}
2025-02-23 21:52:26,028 INFO: BEGIN (implicit)
2025-02-23 21:52:26,030 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:52:26,037 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 21:52:26,045 INFO: [cached since 2207s ago] {}
2025-02-23 21:52:26,045 INFO: [cached since 2201s ago] {'param_1': 5}
2025-02-23 21:52:26,044 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-23 21:52:26,047 INFO: [cached since 2201s ago] {'pk_1': 19}
2025-02-23 21:52:26,055 INFO: ROLLBACK
2025-02-23 21:52:26,061 INFO: ROLLBACK
2025-02-23 21:52:26,062 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 21:52:26,063 INFO: [cached since 2201s ago] {}
2025-02-23 21:52:26,064 INFO: 127.0.0.1 - - [23/Feb/2025 21:52:26] "GET /api/contributors HTTP/1.1" 200 -
2025-02-23 21:52:26,066 INFO: 127.0.0.1 - - [23/Feb/2025 21:52:26] "GET /api/tasks HTTP/1.1" 200 -
2025-02-23 21:52:26,070 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-23 21:52:26,071 INFO: [cached since 2201s ago] {'param_1': 19}
2025-02-23 21:52:26,104 INFO: ROLLBACK
2025-02-23 21:52:26,116 INFO: 127.0.0.1 - - [23/Feb/2025 21:52:26] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-02-23 21:52:42,161 INFO: 127.0.0.1 - - [23/Feb/2025 21:52:42] "GET /socket.io/?EIO=4&transport=websocket&sid=tMU837ts7s7sG3BSAABC HTTP/1.1" 200 -
2025-02-23 21:52:42,486 INFO: 127.0.0.1 - - [23/Feb/2025 21:52:42] "GET /socket.io/?EIO=4&transport=polling&t=3uzqd0y8 HTTP/1.1" 200 -
2025-02-23 21:52:42,511 INFO: 127.0.0.1 - - [23/Feb/2025 21:52:42] "POST /socket.io/?EIO=4&transport=polling&t=3uzr2i9i&sid=RISwqDQ2Et_bxhDWAABE HTTP/1.1" 200 -
2025-02-23 21:52:42,583 INFO: 127.0.0.1 - - [23/Feb/2025 21:52:42] "GET /socket.io/?EIO=4&transport=polling&t=3uzr3dzv&sid=RISwqDQ2Et_bxhDWAABE HTTP/1.1" 200 -
2025-02-23 21:52:42,639 INFO: BEGIN (implicit)
2025-02-23 21:52:42,643 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 21:52:42,643 INFO: [cached since 2218s ago] {}
2025-02-23 21:52:42,639 INFO: BEGIN (implicit)
2025-02-23 21:52:42,647 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 21:52:42,648 INFO: [cached since 2217s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 21:52:42,645 INFO: BEGIN (implicit)
2025-02-23 21:52:42,648 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 21:52:42,648 INFO: [cached since 2217s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 21:52:42,649 INFO: Entering list_tasks_json route...
2025-02-23 21:52:42,649 DEBUG: Filters used in API: {'is_archived': False}
2025-02-23 21:52:42,650 DEBUG: Applying filters: {'is_archived': False}
2025-02-23 21:52:42,674 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:52:42,675 INFO: [cached since 2218s ago] {'param_1': 1}
2025-02-23 21:52:42,675 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-23 21:52:42,677 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 21:52:42,677 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 21:52:42,678 INFO: 127.0.0.1 - - [23/Feb/2025 21:52:42] "GET /socket.io/?EIO=4&transport=polling&t=3uzu6ocx&sid=RISwqDQ2Et_bxhDWAABE HTTP/1.1" 200 -
2025-02-23 21:52:42,679 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:52:42,682 INFO: [cached since 2218s ago] {'param_1': 2}
2025-02-23 21:52:42,680 INFO: BEGIN (implicit)
2025-02-23 21:52:42,681 INFO: [cached since 2217s ago] {}
2025-02-23 21:52:42,680 INFO: [cached since 2217s ago] {}
2025-02-23 21:52:42,683 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-23 21:52:42,684 INFO: ROLLBACK
2025-02-23 21:52:42,686 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:52:42,686 INFO: [cached since 2224s ago] {'param_1': 110, 'param_2': 0}
2025-02-23 21:52:42,687 INFO: ROLLBACK
2025-02-23 21:52:42,688 INFO: 127.0.0.1 - - [23/Feb/2025 21:52:42] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 21:52:42,688 INFO: [cached since 2218s ago] {'param_1': 3}
2025-02-23 21:52:42,691 INFO: 127.0.0.1 - - [23/Feb/2025 21:52:42] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 21:52:42,782 INFO: BEGIN (implicit)
2025-02-23 21:52:42,783 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:52:42,784 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-23 21:52:42,784 INFO: [cached since 2218s ago] {'param_1': 4}
2025-02-23 21:52:42,791 INFO: [cached since 2217s ago] {'pk_1': 19}
2025-02-23 21:52:42,799 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-23 21:52:42,800 INFO: [cached since 2224s ago] {}
2025-02-23 21:52:42,802 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:52:42,805 INFO: [cached since 2218s ago] {'param_1': 5}
2025-02-23 21:52:42,805 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-23 21:52:42,806 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 21:52:42,807 INFO: [cached since 2224s ago] {}
2025-02-23 21:52:42,808 INFO: ROLLBACK
2025-02-23 21:52:42,809 INFO: [cached since 2218s ago] {}
2025-02-23 21:52:42,811 INFO: 127.0.0.1 - - [23/Feb/2025 21:52:42] "GET /api/contributors HTTP/1.1" 200 -
2025-02-23 21:52:42,813 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 21:52:42,815 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-23 21:52:42,816 INFO: [cached since 2224s ago] {}
2025-02-23 21:52:42,817 INFO: [cached since 2217s ago] {'param_1': 19}
2025-02-23 21:52:42,826 INFO: ROLLBACK
2025-02-23 21:52:42,828 INFO: ROLLBACK
2025-02-23 21:52:42,832 INFO: 127.0.0.1 - - [23/Feb/2025 21:52:42] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-02-23 21:52:42,839 INFO: 127.0.0.1 - - [23/Feb/2025 21:52:42] "GET /api/tasks HTTP/1.1" 200 -
2025-02-23 21:57:23,996 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:23] "GET /socket.io/?EIO=4&transport=polling&t=410yar3e HTTP/1.1" 200 -
2025-02-23 21:57:24,167 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:24] "POST /socket.io/?EIO=4&transport=polling&t=4111p1bo&sid=U-pttTr5k82BDWpBAABG HTTP/1.1" 200 -
2025-02-23 21:57:24,167 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:24] "GET /socket.io/?EIO=4&transport=polling&t=4111r2i7&sid=U-pttTr5k82BDWpBAABG HTTP/1.1" 200 -
2025-02-23 21:57:31,020 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:31] "GET /socket.io/?EIO=4&transport=polling&t=4168ghbl HTTP/1.1" 200 -
2025-02-23 21:57:31,039 INFO: BEGIN (implicit)
2025-02-23 21:57:31,041 INFO: Entering list_tasks_json route...
2025-02-23 21:57:31,042 INFO: BEGIN (implicit)
2025-02-23 21:57:31,044 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 21:57:31,053 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:31] "POST /socket.io/?EIO=4&transport=polling&t=416e2dpa&sid=tR1gTRk3UEwL8UX3AABI HTTP/1.1" 200 -
2025-02-23 21:57:31,055 DEBUG: Filters used in API: {'is_archived': False}
2025-02-23 21:57:31,058 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:31] "GET /socket.io/?EIO=4&transport=polling&t=416e39ax&sid=tR1gTRk3UEwL8UX3AABI HTTP/1.1" 200 -
2025-02-23 21:57:31,060 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 21:57:31,070 INFO: [cached since 2506s ago] {}
2025-02-23 21:57:31,069 DEBUG: Applying filters: {'is_archived': False}
2025-02-23 21:57:31,088 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-23 21:57:31,062 INFO: [cached since 2506s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 21:57:31,093 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:57:31,094 INFO: BEGIN (implicit)
2025-02-23 21:57:31,095 INFO: [cached since 2506s ago] {'param_1': 1}
2025-02-23 21:57:31,096 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-23 21:57:31,097 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 21:57:31,099 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:57:31,100 INFO: [cached since 2512s ago] {'param_1': 110, 'param_2': 0}
2025-02-23 21:57:31,100 INFO: [cached since 2506s ago] {}
2025-02-23 21:57:31,100 INFO: [cached since 2506s ago] {'param_1': 2}
2025-02-23 21:57:31,102 INFO: ROLLBACK
2025-02-23 21:57:31,103 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:57:31,103 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:31] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 21:57:31,103 INFO: [cached since 2506s ago] {'param_1': 3}
2025-02-23 21:57:31,120 INFO: BEGIN (implicit)
2025-02-23 21:57:31,122 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:57:31,126 INFO: BEGIN (implicit)
2025-02-23 21:57:31,128 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 21:57:31,129 INFO: [cached since 2506s ago] {'param_1': 4}
2025-02-23 21:57:31,169 INFO: [cached since 2506s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 21:57:31,174 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-23 21:57:31,183 INFO: [cached since 2506s ago] {'pk_1': 19}
2025-02-23 21:57:31,184 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 21:57:31,184 INFO: [cached since 2506s ago] {}
2025-02-23 21:57:31,187 INFO: ROLLBACK
2025-02-23 21:57:31,188 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:57:31,194 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 21:57:31,196 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-23 21:57:31,196 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:31] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 21:57:31,196 INFO: [cached since 2506s ago] {'param_1': 5}
2025-02-23 21:57:31,197 INFO: [cached since 2506s ago] {}
2025-02-23 21:57:31,197 INFO: [cached since 2512s ago] {}
2025-02-23 21:57:31,200 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-23 21:57:31,201 INFO: BEGIN (implicit)
2025-02-23 21:57:31,202 INFO: ROLLBACK
2025-02-23 21:57:31,203 INFO: [cached since 2506s ago] {'param_1': 19}
2025-02-23 21:57:31,204 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 21:57:31,212 INFO: [cached since 2506s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 21:57:31,211 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:31] "GET /api/contributors HTTP/1.1" 200 -
2025-02-23 21:57:31,207 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-23 21:57:31,215 INFO: [cached since 2512s ago] {}
2025-02-23 21:57:31,214 INFO: ROLLBACK
2025-02-23 21:57:31,220 INFO: BEGIN (implicit)
2025-02-23 21:57:31,221 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 21:57:31,222 INFO: [cached since 2506s ago] {}
2025-02-23 21:57:31,221 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 21:57:31,222 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 21:57:31,225 INFO: ROLLBACK
2025-02-23 21:57:31,221 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:31] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-02-23 21:57:31,227 INFO: [cached since 2512s ago] {}
2025-02-23 21:57:31,227 INFO: [cached since 2506s ago] {}
2025-02-23 21:57:31,229 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:31] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 21:57:31,237 INFO: ROLLBACK
2025-02-23 21:57:31,238 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:57:31,255 INFO: [cached since 2506s ago] {'param_1': 1}
2025-02-23 21:57:31,257 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:31] "GET /api/tasks HTTP/1.1" 200 -
2025-02-23 21:57:31,262 INFO: BEGIN (implicit)
2025-02-23 21:57:31,267 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 21:57:31,269 INFO: [cached since 2506s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 21:57:31,270 INFO: Entering list_tasks_json route...
2025-02-23 21:57:31,270 DEBUG: Filters used in API: {'is_archived': False}
2025-02-23 21:57:31,270 DEBUG: Applying filters: {'is_archived': False}
2025-02-23 21:57:31,305 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:57:31,311 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-23 21:57:31,311 INFO: [cached since 2506s ago] {'param_1': 2}
2025-02-23 21:57:31,312 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 21:57:31,316 INFO: BEGIN (implicit)
2025-02-23 21:57:31,319 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:57:31,320 INFO: [cached since 2506s ago] {}
2025-02-23 21:57:31,321 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-23 21:57:31,321 INFO: [cached since 2506s ago] {'param_1': 3}
2025-02-23 21:57:31,325 INFO: [cached since 2513s ago] {'param_1': 110, 'param_2': 0}
2025-02-23 21:57:31,330 INFO: ROLLBACK
2025-02-23 21:57:31,332 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:57:31,332 INFO: [cached since 2506s ago] {'param_1': 4}
2025-02-23 21:57:31,334 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:31] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 21:57:31,336 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:57:31,336 INFO: [cached since 2506s ago] {'param_1': 5}
2025-02-23 21:57:31,339 INFO: ROLLBACK
2025-02-23 21:57:31,340 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:31] "GET /api/contributors HTTP/1.1" 200 -
2025-02-23 21:57:31,374 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-23 21:57:31,379 INFO: [cached since 2513s ago] {}
2025-02-23 21:57:31,384 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-23 21:57:31,384 INFO: [cached since 2513s ago] {}
2025-02-23 21:57:31,386 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 21:57:31,386 INFO: [cached since 2513s ago] {}
2025-02-23 21:57:31,390 INFO: ROLLBACK
2025-02-23 21:57:31,392 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:31] "GET /api/tasks HTTP/1.1" 200 -
2025-02-23 21:57:31,669 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:31] "GET /socket.io/?EIO=4&transport=polling&t=416vam44 HTTP/1.1" 200 -
2025-02-23 21:57:31,953 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:31] "GET /socket.io/?EIO=4&transport=websocket&sid=U-pttTr5k82BDWpBAABG HTTP/1.1" 200 -
2025-02-23 21:57:31,957 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:31] "POST /socket.io/?EIO=4&transport=polling&t=416zezqb&sid=2emQVHW4MCbbtnZrAABK HTTP/1.1" 200 -
2025-02-23 21:57:31,960 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:31] "GET /socket.io/?EIO=4&transport=polling&t=416zlxq8&sid=2emQVHW4MCbbtnZrAABK HTTP/1.1" 200 -
2025-02-23 21:57:31,961 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:31] "GET /socket.io/?EIO=4&transport=websocket&sid=RISwqDQ2Et_bxhDWAABE HTTP/1.1" 200 -
2025-02-23 21:57:31,961 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:31] "GET /socket.io/?EIO=4&transport=websocket&sid=tR1gTRk3UEwL8UX3AABI HTTP/1.1" 200 -
2025-02-23 21:57:32,021 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:32] "GET /socket.io/?EIO=4&transport=polling&t=4175dfmd&sid=2emQVHW4MCbbtnZrAABK HTTP/1.1" 200 -
2025-02-23 21:57:32,030 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:32] "GET /socket.io/?EIO=4&transport=polling&t=4175ja9k&sid=2emQVHW4MCbbtnZrAABK HTTP/1.1" 200 -
2025-02-23 21:57:32,257 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:32] "GET /socket.io/?EIO=4&transport=polling&t=417bvjkr HTTP/1.1" 200 -
2025-02-23 21:57:32,269 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:32] "POST /socket.io/?EIO=4&transport=polling&t=417c7l66&sid=DER-HRm3mnIEswADAABM HTTP/1.1" 200 -
2025-02-23 21:57:32,316 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:32] "GET /socket.io/?EIO=4&transport=polling&t=417c8n53&sid=DER-HRm3mnIEswADAABM HTTP/1.1" 200 -
2025-02-23 21:57:32,348 INFO: BEGIN (implicit)
2025-02-23 21:57:32,353 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 21:57:32,353 INFO: [cached since 2507s ago] {}
2025-02-23 21:57:32,361 INFO: BEGIN (implicit)
2025-02-23 21:57:32,361 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 21:57:32,361 INFO: [cached since 2507s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 21:57:32,362 INFO: Entering list_tasks_json route...
2025-02-23 21:57:32,362 DEBUG: Filters used in API: {'is_archived': False}
2025-02-23 21:57:32,364 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:57:32,366 INFO: [cached since 2507s ago] {'param_1': 1}
2025-02-23 21:57:32,365 DEBUG: Applying filters: {'is_archived': False}
2025-02-23 21:57:32,366 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 21:57:32,365 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:32] "GET /socket.io/?EIO=4&transport=polling&t=417e93ax&sid=DER-HRm3mnIEswADAABM HTTP/1.1" 200 -
2025-02-23 21:57:32,392 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:57:32,575 INFO: [cached since 2507s ago] {'param_1': 2}
2025-02-23 21:57:32,477 INFO: [cached since 2507s ago] {}
2025-02-23 21:57:32,558 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-23 21:57:32,585 INFO: BEGIN (implicit)
2025-02-23 21:57:32,620 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-23 21:57:32,622 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:57:32,623 INFO: ROLLBACK
2025-02-23 21:57:32,624 INFO: [cached since 2514s ago] {'param_1': 110, 'param_2': 0}
2025-02-23 21:57:32,624 INFO: [cached since 2507s ago] {'param_1': 3}
2025-02-23 21:57:32,655 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:57:32,657 INFO: [cached since 2508s ago] {'param_1': 4}
2025-02-23 21:57:32,668 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:32] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 21:57:32,844 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:57:32,852 INFO: [cached since 2508s ago] {'param_1': 5}
2025-02-23 21:57:32,847 INFO: BEGIN (implicit)
2025-02-23 21:57:32,852 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 21:57:32,853 INFO: BEGIN (implicit)
2025-02-23 21:57:32,855 INFO: [cached since 2508s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 21:57:32,857 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-23 21:57:32,858 INFO: [cached since 2508s ago] {'pk_1': 19}
2025-02-23 21:57:32,876 INFO: ROLLBACK
2025-02-23 21:57:32,877 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 21:57:32,877 INFO: [cached since 2508s ago] {}
2025-02-23 21:57:32,878 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 21:57:32,879 INFO: [cached since 2508s ago] {}
2025-02-23 21:57:33,042 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:33] "GET /api/contributors HTTP/1.1" 200 -
2025-02-23 21:57:33,059 INFO: ROLLBACK
2025-02-23 21:57:33,060 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-23 21:57:33,060 INFO: [cached since 2508s ago] {'param_1': 19}
2025-02-23 21:57:33,065 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:33] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 21:57:33,071 INFO: ROLLBACK
2025-02-23 21:57:33,075 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:33] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-02-23 21:57:33,176 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-23 21:57:33,176 INFO: [cached since 2514s ago] {}
2025-02-23 21:57:33,180 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-23 21:57:33,180 INFO: [cached since 2514s ago] {}
2025-02-23 21:57:33,188 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 21:57:33,188 INFO: [cached since 2514s ago] {}
2025-02-23 21:57:33,237 INFO: ROLLBACK
2025-02-23 21:57:33,238 INFO: 127.0.0.1 - - [23/Feb/2025 21:57:33] "GET /api/tasks HTTP/1.1" 200 -
2025-02-23 21:59:16,168 INFO: 127.0.0.1 - - [23/Feb/2025 21:59:16] "GET /socket.io/?EIO=4&transport=polling&t=43fhmcfg HTTP/1.1" 200 -
2025-02-23 21:59:16,210 INFO: 127.0.0.1 - - [23/Feb/2025 21:59:16] "POST /socket.io/?EIO=4&transport=polling&t=43fiys59&sid=hBvZFaSk3RMwp9X2AABO HTTP/1.1" 200 -
2025-02-23 21:59:16,212 INFO: 127.0.0.1 - - [23/Feb/2025 21:59:16] "GET /socket.io/?EIO=4&transport=polling&t=43fj0re3&sid=hBvZFaSk3RMwp9X2AABO HTTP/1.1" 200 -
2025-02-23 21:59:16,220 INFO: 127.0.0.1 - - [23/Feb/2025 21:59:16] "GET /socket.io/?EIO=4&transport=polling&t=43fjsniz&sid=hBvZFaSk3RMwp9X2AABO HTTP/1.1" 200 -
2025-02-23 21:59:16,621 INFO: 127.0.0.1 - - [23/Feb/2025 21:59:16] "GET /socket.io/?EIO=4&transport=polling&t=43fug4qr HTTP/1.1" 200 -
2025-02-23 21:59:16,629 INFO: 127.0.0.1 - - [23/Feb/2025 21:59:16] "POST /socket.io/?EIO=4&transport=polling&t=43fv6w6d&sid=XB9d-2ptp_mH5GMJAABQ HTTP/1.1" 200 -
2025-02-23 21:59:16,637 INFO: 127.0.0.1 - - [23/Feb/2025 21:59:16] "GET /socket.io/?EIO=4&transport=websocket&sid=DER-HRm3mnIEswADAABM HTTP/1.1" 200 -
2025-02-23 21:59:16,639 INFO: 127.0.0.1 - - [23/Feb/2025 21:59:16] "GET /socket.io/?EIO=4&transport=websocket&sid=hBvZFaSk3RMwp9X2AABO HTTP/1.1" 200 -
2025-02-23 21:59:16,642 INFO: 127.0.0.1 - - [23/Feb/2025 21:59:16] "GET /socket.io/?EIO=4&transport=polling&t=43fv7n0y&sid=XB9d-2ptp_mH5GMJAABQ HTTP/1.1" 200 -
2025-02-23 21:59:16,646 INFO: 127.0.0.1 - - [23/Feb/2025 21:59:16] "GET /socket.io/?EIO=4&transport=polling&t=43fvo107&sid=XB9d-2ptp_mH5GMJAABQ HTTP/1.1" 200 -
2025-02-23 21:59:17,106 INFO: 127.0.0.1 - - [23/Feb/2025 21:59:17] "GET /socket.io/?EIO=4&transport=polling&t=43g6zb5i HTTP/1.1" 200 -
2025-02-23 21:59:17,180 INFO: BEGIN (implicit)
2025-02-23 21:59:17,186 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 21:59:17,186 INFO: [cached since 2612s ago] {}
2025-02-23 21:59:17,199 INFO: BEGIN (implicit)
2025-02-23 21:59:17,200 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 21:59:17,201 INFO: [cached since 2612s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 21:59:17,203 INFO: Entering list_tasks_json route...
2025-02-23 21:59:17,203 DEBUG: Filters used in API: {'is_archived': False}
2025-02-23 21:59:17,208 DEBUG: Applying filters: {'is_archived': False}
2025-02-23 21:59:17,215 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-23 21:59:17,237 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:59:17,238 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 21:59:17,241 INFO: BEGIN (implicit)
2025-02-23 21:59:17,241 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-23 21:59:17,245 INFO: 127.0.0.1 - - [23/Feb/2025 21:59:17] "POST /socket.io/?EIO=4&transport=polling&t=43g8lddy&sid=8MeclGZ9OE5X2RpMAABS HTTP/1.1" 200 -
2025-02-23 21:59:17,250 INFO: [cached since 2618s ago] {'param_1': 110, 'param_2': 0}
2025-02-23 21:59:17,254 INFO: [cached since 2612s ago] {'param_1': 1}
2025-02-23 21:59:17,261 INFO: [cached since 2612s ago] {}
2025-02-23 21:59:17,340 INFO: 127.0.0.1 - - [23/Feb/2025 21:59:17] "GET /socket.io/?EIO=4&transport=polling&t=43g8ndz1&sid=8MeclGZ9OE5X2RpMAABS HTTP/1.1" 200 -
2025-02-23 21:59:17,542 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-23 21:59:17,543 INFO: [cached since 2619s ago] {}
2025-02-23 21:59:17,547 INFO: ROLLBACK
2025-02-23 21:59:17,549 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:59:17,550 INFO: [cached since 2612s ago] {'param_1': 2}
2025-02-23 21:59:17,554 INFO: 127.0.0.1 - - [23/Feb/2025 21:59:17] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 21:59:17,564 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-23 21:59:17,564 INFO: [cached since 2619s ago] {}
2025-02-23 21:59:17,567 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:59:17,567 INFO: [cached since 2612s ago] {'param_1': 3}
2025-02-23 21:59:17,570 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 21:59:17,571 INFO: [cached since 2619s ago] {}
2025-02-23 21:59:17,575 INFO: BEGIN (implicit)
2025-02-23 21:59:17,576 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:59:17,581 INFO: BEGIN (implicit)
2025-02-23 21:59:17,582 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 21:59:17,586 INFO: ROLLBACK
2025-02-23 21:59:17,586 INFO: [cached since 2612s ago] {'param_1': 4}
2025-02-23 21:59:17,588 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-23 21:59:17,588 INFO: [cached since 2612s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 21:59:17,589 INFO: [cached since 2612s ago] {'pk_1': 19}
2025-02-23 21:59:17,592 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 21:59:17,593 INFO: 127.0.0.1 - - [23/Feb/2025 21:59:17] "GET /api/tasks HTTP/1.1" 200 -
2025-02-23 21:59:17,593 INFO: [cached since 2612s ago] {'param_1': 5}
2025-02-23 21:59:17,595 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 21:59:17,597 INFO: [cached since 2612s ago] {}
2025-02-23 21:59:17,596 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 21:59:17,601 INFO: ROLLBACK
2025-02-23 21:59:17,602 INFO: [cached since 2612s ago] {}
2025-02-23 21:59:17,603 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-23 21:59:17,607 INFO: [cached since 2612s ago] {'param_1': 19}
2025-02-23 21:59:17,604 INFO: 127.0.0.1 - - [23/Feb/2025 21:59:17] "GET /api/contributors HTTP/1.1" 200 -
2025-02-23 21:59:17,610 INFO: ROLLBACK
2025-02-23 21:59:17,611 INFO: ROLLBACK
2025-02-23 21:59:17,615 INFO: 127.0.0.1 - - [23/Feb/2025 21:59:17] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 21:59:17,616 INFO: 127.0.0.1 - - [23/Feb/2025 21:59:17] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-02-23 22:02:29,298 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:29] "GET /socket.io/?EIO=4&transport=polling&t=47kfji5p HTTP/1.1" 200 -
2025-02-23 22:02:29,322 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:29] "POST /socket.io/?EIO=4&transport=polling&t=47kjbq5i&sid=WSHIB_JQSY7C81QQAABU HTTP/1.1" 200 -
2025-02-23 22:02:29,327 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:29] "GET /socket.io/?EIO=4&transport=polling&t=47kjdqd3&sid=WSHIB_JQSY7C81QQAABU HTTP/1.1" 200 -
2025-02-23 22:02:29,623 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:29] "GET /socket.io/?EIO=4&transport=polling&t=47krr863 HTTP/1.1" 200 -
2025-02-23 22:02:29,676 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:29] "GET /socket.io/?EIO=4&transport=websocket&sid=8MeclGZ9OE5X2RpMAABS HTTP/1.1" 200 -
2025-02-23 22:02:29,678 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:29] "POST /socket.io/?EIO=4&transport=polling&t=47kt7ynw&sid=CGqHY7kw-lH8AVTtAABW HTTP/1.1" 200 -
2025-02-23 22:02:29,681 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:29] "GET /socket.io/?EIO=4&transport=websocket&sid=WSHIB_JQSY7C81QQAABU HTTP/1.1" 200 -
2025-02-23 22:02:29,721 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:29] "GET /socket.io/?EIO=4&transport=polling&t=47ktcz13&sid=CGqHY7kw-lH8AVTtAABW HTTP/1.1" 200 -
2025-02-23 22:02:29,729 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:29] "GET /socket.io/?EIO=4&transport=polling&t=47kuz51d&sid=CGqHY7kw-lH8AVTtAABW HTTP/1.1" 200 -
2025-02-23 22:02:30,461 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:30] "GET /socket.io/?EIO=4&transport=polling&t=47lf36yn HTTP/1.1" 200 -
2025-02-23 22:02:30,522 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:30] "POST /socket.io/?EIO=4&transport=polling&t=47lfqmno&sid=LGPynbdQ8sefn1rLAABY HTTP/1.1" 200 -
2025-02-23 22:02:30,557 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:30] "GET /socket.io/?EIO=4&transport=polling&t=47lfsk04&sid=LGPynbdQ8sefn1rLAABY HTTP/1.1" 200 -
2025-02-23 22:02:30,615 INFO: BEGIN (implicit)
2025-02-23 22:02:30,617 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 22:02:30,627 INFO: Entering list_tasks_json route...
2025-02-23 22:02:30,630 INFO: [cached since 2806s ago] {}
2025-02-23 22:02:30,631 DEBUG: Filters used in API: {'is_archived': False}
2025-02-23 22:02:30,645 INFO: BEGIN (implicit)
2025-02-23 22:02:30,645 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:30] "GET /socket.io/?EIO=4&transport=polling&t=47li993f&sid=LGPynbdQ8sefn1rLAABY HTTP/1.1" 200 -
2025-02-23 22:02:30,646 DEBUG: Applying filters: {'is_archived': False}
2025-02-23 22:02:30,651 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 22:02:30,658 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:02:30,668 INFO: [cached since 2806s ago] {'param_1': 1}
2025-02-23 22:02:30,668 INFO: [cached since 2805s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 22:02:30,667 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-23 22:02:30,669 INFO: BEGIN (implicit)
2025-02-23 22:02:30,669 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-23 22:02:30,670 INFO: [cached since 2812s ago] {'param_1': 110, 'param_2': 0}
2025-02-23 22:02:30,673 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:02:30,673 INFO: [cached since 2806s ago] {'param_1': 2}
2025-02-23 22:02:30,679 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 22:02:30,680 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:02:30,680 INFO: [cached since 2805s ago] {}
2025-02-23 22:02:30,681 INFO: [cached since 2806s ago] {'param_1': 3}
2025-02-23 22:02:30,687 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:02:30,690 INFO: [cached since 2806s ago] {'param_1': 4}
2025-02-23 22:02:30,689 INFO: ROLLBACK
2025-02-23 22:02:30,733 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:30] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 22:02:30,735 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:02:30,765 INFO: [cached since 2806s ago] {'param_1': 5}
2025-02-23 22:02:30,808 INFO: ROLLBACK
2025-02-23 22:02:30,811 INFO: BEGIN (implicit)
2025-02-23 22:02:30,812 INFO: BEGIN (implicit)
2025-02-23 22:02:30,827 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-23 22:02:30,827 INFO: [cached since 2805s ago] {'pk_1': 19}
2025-02-23 22:02:30,820 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 22:02:30,828 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-23 22:02:30,830 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 22:02:30,830 INFO: [cached since 2806s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 22:02:30,819 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:30] "GET /api/contributors HTTP/1.1" 200 -
2025-02-23 22:02:30,836 INFO: [cached since 2812s ago] {}
2025-02-23 22:02:30,836 INFO: [cached since 2806s ago] {}
2025-02-23 22:02:30,848 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 22:02:30,848 INFO: [cached since 2806s ago] {}
2025-02-23 22:02:30,851 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-23 22:02:30,851 INFO: [cached since 2805s ago] {'param_1': 19}
2025-02-23 22:02:30,861 INFO: ROLLBACK
2025-02-23 22:02:30,863 INFO: ROLLBACK
2025-02-23 22:02:30,863 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:30] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-02-23 22:02:30,864 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-23 22:02:30,868 INFO: [cached since 2812s ago] {}
2025-02-23 22:02:30,869 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:30] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 22:02:30,871 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 22:02:30,871 INFO: [cached since 2812s ago] {}
2025-02-23 22:02:30,882 INFO: ROLLBACK
2025-02-23 22:02:30,883 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:30] "GET /api/tasks HTTP/1.1" 200 -
2025-02-23 22:02:38,140 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:38] "GET /socket.io/?EIO=4&transport=polling&t=47rcnfvl HTTP/1.1" 200 -
2025-02-23 22:02:38,204 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:38] "POST /socket.io/?EIO=4&transport=polling&t=47rdobyp&sid=-LF0onvrCXAhc0BEAABa HTTP/1.1" 200 -
2025-02-23 22:02:38,205 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:38] "GET /socket.io/?EIO=4&transport=polling&t=47rdqaji&sid=-LF0onvrCXAhc0BEAABa HTTP/1.1" 200 -
2025-02-23 22:02:38,215 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:38] "GET /socket.io/?EIO=4&transport=polling&t=47reqsbv&sid=-LF0onvrCXAhc0BEAABa HTTP/1.1" 200 -
2025-02-23 22:02:38,452 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:38] "GET /socket.io/?EIO=4&transport=polling&t=47rl7kb6 HTTP/1.1" 200 -
2025-02-23 22:02:38,460 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:38] "POST /socket.io/?EIO=4&transport=polling&t=47rllt0f&sid=5D70eJ-uk_DQ5_gOAABc HTTP/1.1" 200 -
2025-02-23 22:02:38,464 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:38] "GET /socket.io/?EIO=4&transport=polling&t=47rlmr4v&sid=5D70eJ-uk_DQ5_gOAABc HTTP/1.1" 200 -
2025-02-23 22:02:38,467 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:38] "GET /socket.io/?EIO=4&transport=websocket&sid=LGPynbdQ8sefn1rLAABY HTTP/1.1" 200 -
2025-02-23 22:02:38,471 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:38] "GET /socket.io/?EIO=4&transport=websocket&sid=-LF0onvrCXAhc0BEAABa HTTP/1.1" 200 -
2025-02-23 22:02:38,958 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:38] "GET /socket.io/?EIO=4&transport=polling&t=47ryzqw3 HTTP/1.1" 200 -
2025-02-23 22:02:38,972 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:38] "POST /socket.io/?EIO=4&transport=polling&t=47rzq5oc&sid=TXhzHB9xnFdrLx9pAABe HTTP/1.1" 200 -
2025-02-23 22:02:39,013 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:39] "GET /socket.io/?EIO=4&transport=polling&t=47rzs7jv&sid=TXhzHB9xnFdrLx9pAABe HTTP/1.1" 200 -
2025-02-23 22:02:39,019 INFO: BEGIN (implicit)
2025-02-23 22:02:39,051 INFO: BEGIN (implicit)
2025-02-23 22:02:39,055 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 22:02:39,057 INFO: [cached since 2814s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 22:02:39,053 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 22:02:39,059 INFO: [cached since 2814s ago] {}
2025-02-23 22:02:39,062 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:39] "GET /socket.io/?EIO=4&transport=polling&t=47s1awq6&sid=TXhzHB9xnFdrLx9pAABe HTTP/1.1" 200 -
2025-02-23 22:02:39,056 INFO: Entering list_tasks_json route...
2025-02-23 22:02:39,064 DEBUG: Filters used in API: {'is_archived': False}
2025-02-23 22:02:39,084 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 22:02:39,084 INFO: [cached since 2814s ago] {}
2025-02-23 22:02:39,086 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:02:39,089 INFO: [cached since 2814s ago] {'param_1': 1}
2025-02-23 22:02:39,087 DEBUG: Applying filters: {'is_archived': False}
2025-02-23 22:02:39,089 INFO: ROLLBACK
2025-02-23 22:02:39,097 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-23 22:02:39,100 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:02:39,100 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:39] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 22:02:39,101 INFO: BEGIN (implicit)
2025-02-23 22:02:39,101 INFO: [cached since 2814s ago] {'param_1': 2}
2025-02-23 22:02:39,102 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-23 22:02:39,103 INFO: [cached since 2820s ago] {'param_1': 110, 'param_2': 0}
2025-02-23 22:02:39,107 INFO: BEGIN (implicit)
2025-02-23 22:02:39,109 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 22:02:39,109 INFO: [cached since 2814s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 22:02:39,109 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:02:39,110 INFO: [cached since 2814s ago] {'param_1': 3}
2025-02-23 22:02:39,114 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:02:39,114 INFO: [cached since 2814s ago] {'param_1': 4}
2025-02-23 22:02:39,122 INFO: BEGIN (implicit)
2025-02-23 22:02:39,145 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-23 22:02:39,146 INFO: [cached since 2814s ago] {'pk_1': 19}
2025-02-23 22:02:39,124 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 22:02:39,146 INFO: [cached since 2814s ago] {}
2025-02-23 22:02:39,149 INFO: ROLLBACK
2025-02-23 22:02:39,152 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 22:02:39,152 INFO: [cached since 2814s ago] {}
2025-02-23 22:02:39,153 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:02:39,153 INFO: [cached since 2814s ago] {'param_1': 5}
2025-02-23 22:02:39,154 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:39] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 22:02:39,156 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-23 22:02:39,156 INFO: [cached since 2814s ago] {'param_1': 19}
2025-02-23 22:02:39,162 INFO: ROLLBACK
2025-02-23 22:02:39,176 INFO: ROLLBACK
2025-02-23 22:02:39,185 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:39] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-02-23 22:02:39,193 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:39] "GET /api/contributors HTTP/1.1" 200 -
2025-02-23 22:02:39,203 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-23 22:02:39,210 INFO: [cached since 2820s ago] {}
2025-02-23 22:02:39,216 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-23 22:02:39,216 INFO: [cached since 2820s ago] {}
2025-02-23 22:02:39,218 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 22:02:39,218 INFO: [cached since 2820s ago] {}
2025-02-23 22:02:39,220 INFO: ROLLBACK
2025-02-23 22:02:39,221 INFO: 127.0.0.1 - - [23/Feb/2025 22:02:39] "GET /api/tasks HTTP/1.1" 200 -
2025-02-23 22:03:00,600 INFO: 127.0.0.1 - - [23/Feb/2025 22:03:00] "GET /socket.io/?EIO=4&transport=websocket&sid=TXhzHB9xnFdrLx9pAABe HTTP/1.1" 200 -
2025-02-23 22:03:01,127 INFO: 127.0.0.1 - - [23/Feb/2025 22:03:01] "GET /socket.io/?EIO=4&transport=polling&t=4890bl56 HTTP/1.1" 200 -
2025-02-23 22:03:01,175 INFO: BEGIN (implicit)
2025-02-23 22:03:01,199 INFO: BEGIN (implicit)
2025-02-23 22:03:01,200 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 22:03:01,200 INFO: [cached since 2836s ago] {}
2025-02-23 22:03:01,201 INFO: BEGIN (implicit)
2025-02-23 22:03:01,201 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 22:03:01,202 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 22:03:01,205 INFO: [cached since 2836s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 22:03:01,202 INFO: [cached since 2836s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 22:03:01,240 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:03:01,241 INFO: 127.0.0.1 - - [23/Feb/2025 22:03:01] "POST /socket.io/?EIO=4&transport=polling&t=4893ifwy&sid=m6T_JZvCVqj_4tc3AABg HTTP/1.1" 200 -
2025-02-23 22:03:01,203 INFO: Entering list_tasks_json route...
2025-02-23 22:03:01,246 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 22:03:01,250 INFO: 127.0.0.1 - - [23/Feb/2025 22:03:01] "GET /socket.io/?EIO=4&transport=polling&t=4893k98n&sid=m6T_JZvCVqj_4tc3AABg HTTP/1.1" 200 -
2025-02-23 22:03:01,250 INFO: [cached since 2836s ago] {'param_1': 1}
2025-02-23 22:03:01,250 DEBUG: Filters used in API: {'is_archived': False}
2025-02-23 22:03:01,251 INFO: [cached since 2836s ago] {}
2025-02-23 22:03:01,255 DEBUG: Applying filters: {'is_archived': False}
2025-02-23 22:03:01,270 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 22:03:01,276 INFO: [cached since 2836s ago] {}
2025-02-23 22:03:01,272 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:03:01,279 INFO: ROLLBACK
2025-02-23 22:03:01,279 INFO: 127.0.0.1 - - [23/Feb/2025 22:03:01] "GET /socket.io/?EIO=4&transport=polling&t=4896w4x2&sid=m6T_JZvCVqj_4tc3AABg HTTP/1.1" 200 -
2025-02-23 22:03:01,280 INFO: ROLLBACK
2025-02-23 22:03:01,280 INFO: [cached since 2836s ago] {'param_1': 2}
2025-02-23 22:03:01,287 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-23 22:03:01,288 INFO: 127.0.0.1 - - [23/Feb/2025 22:03:01] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 22:03:01,289 INFO: BEGIN (implicit)
2025-02-23 22:03:01,290 INFO: 127.0.0.1 - - [23/Feb/2025 22:03:01] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 22:03:01,295 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-23 22:03:01,298 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:03:01,303 INFO: [cached since 2843s ago] {'param_1': 110, 'param_2': 0}
2025-02-23 22:03:01,303 INFO: [cached since 2836s ago] {'param_1': 3}
2025-02-23 22:03:01,319 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:03:01,319 INFO: [cached since 2836s ago] {'param_1': 4}
2025-02-23 22:03:01,323 INFO: BEGIN (implicit)
2025-02-23 22:03:01,324 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:03:01,324 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-23 22:03:01,324 INFO: [cached since 2836s ago] {'param_1': 5}
2025-02-23 22:03:01,324 INFO: [cached since 2836s ago] {'pk_1': 19}
2025-02-23 22:03:01,327 INFO: ROLLBACK
2025-02-23 22:03:01,328 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 22:03:01,328 INFO: 127.0.0.1 - - [23/Feb/2025 22:03:01] "GET /api/contributors HTTP/1.1" 200 -
2025-02-23 22:03:01,328 INFO: [cached since 2836s ago] {}
2025-02-23 22:03:01,334 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-23 22:03:01,334 INFO: [cached since 2836s ago] {'param_1': 19}
2025-02-23 22:03:01,336 INFO: ROLLBACK
2025-02-23 22:03:01,336 INFO: 127.0.0.1 - - [23/Feb/2025 22:03:01] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-02-23 22:03:01,374 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-23 22:03:01,374 INFO: [cached since 2843s ago] {}
2025-02-23 22:03:01,378 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-23 22:03:01,379 INFO: [cached since 2843s ago] {}
2025-02-23 22:03:01,402 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 22:03:01,403 INFO: [cached since 2843s ago] {}
2025-02-23 22:03:01,409 INFO: ROLLBACK
2025-02-23 22:03:01,410 INFO: 127.0.0.1 - - [23/Feb/2025 22:03:01] "GET /api/tasks HTTP/1.1" 200 -
2025-02-23 22:03:07,501 INFO: Entering list_tasks route...
2025-02-23 22:03:07,502 DEBUG: Filters used: {'is_archived': False}
2025-02-23 22:03:07,504 DEBUG: Applying filters: {'is_archived': False}
2025-02-23 22:03:07,519 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-23 22:03:07,520 INFO: BEGIN (implicit)
2025-02-23 22:03:07,521 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-23 22:03:07,521 INFO: [cached since 2849s ago] {'param_1': 110, 'param_2': 0}
2025-02-23 22:03:07,559 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-23 22:03:07,559 INFO: [cached since 2849s ago] {}
2025-02-23 22:03:07,561 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-23 22:03:07,561 INFO: [cached since 2849s ago] {}
2025-02-23 22:03:07,562 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 22:03:07,562 INFO: [cached since 2849s ago] {}
2025-02-23 22:03:07,564 DEBUG: Tasks passed to template: [{'id': 283, 'name': 'fix update title', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T08:41:58.769700', 'updated_at': '2025-02-22T12:17:39.812683'}, {'id': 298, 'name': 'example user story with parent epic 297', 'description': '', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:41:01.907455', 'updated_at': '2025-02-23T02:20:38.256245'}, {'id': 285, 'name': 'add text truncation to project names in task list', 'description': 'kkkkkkkjjjjj\nlkajdlökjsdfölkjsdfölkjdf', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-23T19:50:03.193034'}, {'id': 264, 'name': 'close all / open all childtasks', 'description': 'ölkölklkhkk', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 7, 'status': 'Not Started', 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-02-19T22:47:17.024076'}, {'id': 276, 'name': 'add support for priority', 'description': 'ffasdlkjlkj\nljkkjlkj', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P0', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-22T18:03:14.125665'}, {'id': 270, 'name': 'the newest task', 'description': '', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:07:34.368035', 'updated_at': '2025-02-23T13:04:53.023952'}, {'id': 310, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-21T22:56:46.414917', 'updated_at': '2025-02-21T23:56:46.435450'}, {'id': 265, 'name': 'smooth transition for toggles', 'description': 'ffjjlkjljlkjlkj\nkjh', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-02-20T09:59:26.301212'}, {'id': 292, 'name': 'issue: assigning contributor does not work', 'description': '### **Summary of problem and solution**\n\nThe issue was that assigning a contributor to a task via the /tasks/<task_id>/assign_contributor API endpoint resulted in a **400 Bad Request** error. Upon investigation, the following problems were identified:\n\n1. **Missing CSRF Token:**\n- The request failed due to a missing CSRF token, as shown in the error message: *“Bad Request: The CSRF token is missing.”*\n- The frontend was not correctly including the CSRF token in the request headers.\n1. **JavaScript Error (Undefined CSRF Token Variable):**\n- The error *“ReferenceError: csrfToken is not defined”* indicated that the CSRF token was not being retrieved properly in the JavaScript code.\n1. **Incorrect Fetch Request Headers:**\n- The fetch request did not include the CSRF token under the correct key (X-CSRFToken).\n- The script attempted to send the request without properly extracting the CSRF token from the meta tag.\n\n### **Solution**\n\n1. **Include the CSRF Token in the JavaScript Code**\n\nThe CSRF token was retrieved from the meta tag and used in the request headers:\n\n```jsx\n// Retrieve CSRF token from meta tag\nconst csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\');\n```\n\nThis ensures that the CSRF token is correctly fetched and available in the JavaScript scope.\n\n1. **Modify the Fetch Request to Include CSRF Token**\n\nThe request to assign a contributor was updated to include the token:\n\n```jsx\nconst response = await fetch(`/tasks/${taskId}/assign_contributor`, {\n    method: "POST",\n    headers: { \n        "Content-Type": "application/json",\n        "X-CSRFToken": csrfToken  // Include CSRF token\n    },\n    body: JSON.stringify({ contributor_id: parseInt(contributorId, 10) }),\n});\n```\n\n- **Ensures the CSRF token is sent in the request headers** so that Flask-WTF does not reject the request.\n1. **Verify and Debug Network Requests**\n- The updated request headers were verified using **Chrome DevTools > Network tab** to ensure the X-CSRFToken was included.\n- The error messages disappeared, and the contributor assignment request **succeeded with a 200 OK response**.\n\n---\n\n### **Final Outcome**\n\n🚀 The issue was resolved, and contributors can now be assigned successfully to tasks without triggering a CSRF validation error.\n\n### **Key Learnings from This Session**\n\nThis debugging session covered several important aspects of **web development with Flask and JavaScript**, particularly related to **API requests, CSRF protection, debugging tools, and database interactions**. Here are the key takeaways:\n\n---\n\n### **1. CSRF Protection in API Requests**\n\n- **Issue:** The initial error was due to **a missing CSRF token** when making a `POST` request.\n- **Fix:** The solution was to **retrieve the CSRF token from a meta tag** in the HTML and include it in the request headers.\n- **Key Learning:** Flask-WTF requires CSRF tokens for form and API submissions to **prevent cross-site request forgery (CSRF) attacks**.✅ Always ensure that API requests include a valid CSRF token.\n\n---\n\n### **2. Debugging JavaScript Fetch Requests**\n\n- **Issue:** The JavaScript code was making a fetch request, but the variable `csrfToken` was not properly defined, causing a `ReferenceError`.\n- **Fix:** Declaring `csrfToken` at the beginning of the script:\n    \n    ```jsx\n    const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\');\n    ```\n    \n- **Key Learning:**✅ JavaScript variables must be defined before they are used.✅ Use browser **developer tools (DevTools) Network tab** to inspect headers, payloads, and responses when debugging API requests.\n\n---\n\n### **3. Structuring Flask Routes for Task Management**\n\n- **Issue:** The `assign_contributor` route was failing due to incorrect request payload validation.\n- **Fix:** Improved the route’s error handling and logging:\n    \n    ```python\n    @bp.route(\'/<int:task_id>/assign_contributor\', methods=[\'POST\'])\n    def assign_contributor(task_id):\n        try:\n            data = request.get_json()\n            contributor_id = int(data.get(\'contributor_id\', 0))\n            if not contributor_id:\n                return jsonify({\'error\': \'Valid Contributor ID is required\'}), 400\n    ```\n    \n- **Key Learning:**✅ Always validate incoming data in Flask routes to prevent type errors.✅ Use `request.get_json()` properly and handle missing or incorrect data gracefully.\n\n---\n\n### **4. Utilizing Browser DevTools for Debugging**\n\n- **Issue:** The fetch request was failing with a `400 Bad Request`, and the browser console showed `ReferenceError: csrfToken is not defined`.\n- **Fix:**\n    - Used **Network tab** to inspect the request payload and headers.\n    - Used **Console tab** to catch JavaScript errors early.\n- **Key Learning:**✅ DevTools is a **critical** tool for diagnosing network request issues.✅ Always **check console errors** before assuming it\'s a backend issue.\n\n---\n\n### **5. Database Queries and ORM Debugging**\n\n- **Issue:** Tasks were not being updated correctly, possibly due to missing commit statements.\n- **Fix:** Ensured that:was executed properly.\n    \n    ```python\n    task.contributor_id = contributor_id\n    db.session.commit()\n    ```\n    \n- **Key Learning:**✅ Always call `db.session.commit()` after making changes in SQLAlchemy.✅ Rollback transactions if an error occurs to avoid database inconsistency.\n\n---\n\n### **6. Handling Asynchronous JavaScript Logic**\n\n- **Issue:** The `assignContributor` function was executing before the page was fully loaded.\n- **Fix:** Wrapped it inside a function that ensures elements exist:\n    \n    ```\n    window.setupContributorAssignment = function () {\n        const assignButton = $("#assign-contributor-btn");\n        if (!assignButton.length) {\n            setTimeout(setupContributorAssignment, 500); // Retry in 500ms\n            return;\n        }\n    ```\n    \n- **Key Learning:**✅ Use `setTimeout` to **retry event binding** when elements are dynamically loaded.✅ Always **check if elements exist before attaching event handlers**.\n\n---\n\n### **7. Best Practices for Flask Logging & Error Handling**\n\n- **Issue:** Lack of clear logging when API calls failed.\n- **Fix:** Added better logging to track failures:\n    \n    ```python\n    logger.info(f"Assigning contributor to task ID {task_id}")\n    try:\n        # Process request...\n    except Exception as e:\n        logger.error(f"Error assigning contributor: {e}")\n    ```\n    \n- **Key Learning:**✅ Log **every major step** in API processing to simplify debugging.✅ Differentiate between `logger.info()`, `logger.warning()`, and `logger.error()` based on severity.\n\n---\n\n### **Final Takeaways**\n\n🚀 **Understanding CSRF protection** and **properly structuring API requests** is crucial for secure web applications.\n\n🔍 **Browser DevTools is invaluable** for diagnosing frontend issues, especially in JavaScript.\n\n🐍 **Flask requires proper request validation, database transactions, and logging** to maintain stability.\n\n⚡ **Asynchronous JavaScript must handle dynamic elements carefully** to avoid runtime errors.\n\nThis session reinforced best practices in **frontend-backend integration, debugging, and security**, making it a great learning experience! 🚀🔥', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:11:12.273779', 'updated_at': '2025-02-18T06:41:00.286143'}, {'id': 307, 'name': 'c', 'description': '', 'task_type': 'Subtask', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-20T16:53:38.393115', 'updated_at': '2025-02-22T18:00:51.058705'}, {'id': 295, 'name': 'issue: drag and drop errors', 'description': '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:22:54.461413', 'updated_at': '2025-02-23T13:16:54.269738'}, {'id': 284, 'name': 'add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 4, 'assigned_to': 'Fredrik', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-23T19:51:06.136664'}, {'id': 288, 'name': 'when trying to move subtask to another project, make sure a warning is displayed', 'description': 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be lost"\nOR\n\nIs it possible, and is it desireable to keep parent child relationships across projects?\nSo that a parent can be in one project but the child tasks can be in different projects?\n\nLets say \nParent epic is \n"Internationalisation"\nChild user stories are\n- Timezones\n- Language\n- Currency\n- Day, Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:54:36.297869', 'updated_at': '2025-02-23T13:17:14.262634'}, {'id': 296, 'name': 'issue: contributor is lost after updating task', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:26:43.881947', 'updated_at': '2025-02-11T15:37:31.011120'}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:17.786154', 'updated_at': '2025-02-23T11:30:04.684746'}, {'id': 321, 'name': 'untitled task', 'description': '', 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-02-22T15:24:59.683105', 'updated_at': '2025-02-22T15:28:18.664289'}, {'id': 315, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T13:06:56.470332', 'updated_at': '2025-02-22T14:06:56.476919'}, {'id': 280, 'name': 'logging (task and project history)', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 1, 'assigned_to': 'Alice', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:37:44.435112', 'updated_at': '2025-02-23T13:14:30.331668'}, {'id': 297, 'name': 'example parent epic', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:39:51.620509', 'updated_at': '2025-02-10T10:39:51.622712'}, {'id': 314, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T12:03:03.637804', 'updated_at': '2025-02-22T13:03:03.643803'}, {'id': 274, 'name': 'Add support for goals, initiatives, okr´s', 'description': 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n\nölkasdölkk', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P1', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:46:27.204912', 'updated_at': '2025-02-18T06:39:43.729310'}, {'id': 320, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T15:17:39.647261', 'updated_at': '2025-02-22T16:17:39.650332'}, {'id': 304, 'name': 'g', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-19T22:02:47.172900', 'updated_at': '2025-02-19T23:02:47.179933'}, {'id': 277, 'name': 'custom task workflow statuses', 'description': 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- Custom status\n-- Custom status\n- In Progress\n-- Custom status\n-- Custom status\n-- Custom status\n- Completed\n-- Custom status\n-- Custom status\n\n2. How can we track a task through different stages and save the sequence of events or stages the task has gone through?\nI´m thinking it could be good for mapping out processes, identifying bottlenecks and provide valuable insights while improving and streamlining workflows.\n- Stages\n- Contacts taken\n- Respons time \n- Time to action after responses\n- Dependencies\n\nNeed to be able to record every action related to this action.\nCommunication integrations\n- Slack\n- Email\n- Text messages\n- Phonecalls\n- Calendar events, meetings\n- Zoom, Google meet, Teams etc..\n\n\n2. Set custom statuses per project (can use tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:16:03.352588', 'updated_at': '2025-02-17T23:32:55.626822'}, {'id': 303, 'name': 't', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-19T19:05:00.401232', 'updated_at': '2025-02-19T20:05:00.406117'}, {'id': 293, 'name': 'click on title should copy the task title and id to clipboard', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:16:33.508209', 'updated_at': '2025-02-17T19:07:44.656573'}, {'id': 287, 'name': 'when moving a parent item to another project make sure the subtasks are moved as well', 'description': '', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:48:31.986870', 'updated_at': '2025-02-17T19:08:23.749538'}, {'id': 281, 'name': 'add high level plan', 'description': 'Add some sort of high level plan that aims to keep PM/PO´s on track and not get lost into the details of an overwhelminly large backlog', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:27:01.218606', 'updated_at': '2025-02-17T19:12:02.051244'}, {'id': 301, 'name': 'untitled task', 'description': '', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'In Progress', 'created_at': '2025-02-19T11:58:55.165343', 'updated_at': '2025-02-21T11:17:05.115762'}, {'id': 319, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T14:59:09.098097', 'updated_at': '2025-02-22T15:59:09.132640'}, {'id': 317, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T13:13:24.508779', 'updated_at': '2025-02-22T14:13:24.511517'}, {'id': 278, 'name': 'search feature for tasks list', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 5, 'project': 'Project Delta', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 4, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:03.369833', 'updated_at': '2025-02-18T00:42:29.470892'}, {'id': 289, 'name': 'issue: parent task is lost when updating task', 'description': '- Summary of the problem and solution\n    \n    **Problem: Parent Task Dropdown Was Not Being Set on Modal Open**\n    \n    The issue was that when opening a task modal, the **parent task dropdown** was not pre-populated with the correct parent task. However, interacting with the dropdown (e.g., clicking on it) would suddenly trigger it to be set correctly. This meant that the dropdown initialization was likely delayed or missing a step in the modal lifecycle.\n    \n    **Debugging Steps and Observations**\n    \n    1. **Task Details Were Fetched Correctly** ✅\n    - The task details, including parent_id, were being fetched from the API successfully.\n    1. **Parent Dropdown Initialization Issues** ❌\n    - The initializeParentDropdown() function was being called, but the dropdown was sometimes **not fully ready** when we tried to set the selected parent task.\n    1. **Clicking the Dropdown Triggered the Parent to Be Set** 🤔\n    - This hinted that the dropdown was not fully ready when setParentDropdown(task.parent_id) was initially called.\n    \n    **Final Solution**\n    \n    1. **Ensuring Dropdown Readiness Before Setting the Parent Task**\n    - We added explicit **delays and checks** to confirm that the dropdown was fully initialized before attempting to set the parent task.\n    \n    Specifically, we:\n    \n    - **Waited for the dropdown to appear in the DOM** using observeParentDropdown().\n    - **Initialized the dropdown** with initializeParentDropdown().\n    - **Waited explicitly for the dropdown to be fully ready** using waitForParentDropdownReady().\n    - **Added a final delay of 200ms** before calling setParentDropdown() to ensure stability.\n    1. **Modifying openTaskModal to Handle Parent Dropdown Setup**\n    - We ensured that initializeParentDropdown() was called **after fetching task details** and before setting the parent task.\n    1. **Confirming the Fix** 🎯\n    - After these fixes, the parent dropdown was **immediately populated** upon opening the modal, without requiring user interaction.\n    \n    **Key Learnings**\n    \n    ✅ **Dropdowns in modals need careful timing** – They might not be ready when you expect them to be.\n    \n    ✅ **Waiting for DOM updates is crucial** – Observing the element ensures it actually exists before interacting with it.\n    \n    ✅ **Explicit delays can prevent race conditions** – A small delay can sometimes resolve timing issues in UI interactions.\n    \n    **Final Result**\n    \n    ✅ The modal now **correctly loads and pre-selects the parent task** without extra clicks! 🎉🚀', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T08:56:25.273984', 'updated_at': '2025-02-23T12:51:53.922845'}, {'id': 279, 'name': 'github integration', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:38.238202', 'updated_at': '2025-02-23T13:23:18.557230'}, {'id': 300, 'name': 'new task', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-18T14:25:24.773401', 'updated_at': '2025-02-18T14:26:07.982932'}, {'id': 266, 'name': 'highlight the nested tasks', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-02-23T13:20:57.641732'}, {'id': 305, 'name': 'n', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-20T10:12:52.005313', 'updated_at': '2025-02-23T12:50:45.092951'}, {'id': 318, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 1, 'assigned_to': 'Alice', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T13:39:38.859364', 'updated_at': '2025-02-23T12:53:59.013279'}, {'id': 312, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 4, 'assigned_to': 'Fredrik', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T11:45:27.081419', 'updated_at': '2025-02-23T12:51:03.918932'}, {'id': 313, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 4, 'assigned_to': 'Fredrik', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T11:45:44.396106', 'updated_at': '2025-02-23T12:53:51.194125'}, {'id': 299, 'name': 'example sub task with parent user story 298', 'description': 'Test update 1\nTest update 2\nTest update 3', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 298, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:42:38.905700', 'updated_at': '2025-02-10T23:23:08.671464'}, {'id': 309, 'name': 'test task', 'description': 'This is a test task', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 1, 'assigned_to': 'Alice', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-21T21:19:17.563435', 'updated_at': '2025-02-23T02:40:16.275244'}, {'id': 286, 'name': 'add support for labels/tags', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:46:23.985620', 'updated_at': '2025-02-23T13:23:02.680582'}, {'id': 302, 'name': 'n', 'description': '', 'task_type': 'Subtask', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-19T18:15:01.931285', 'updated_at': '2025-02-20T07:20:56.647312'}, {'id': 269, 'name': 'fix styling for sweetalert', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-02-08T15:54:56.717846', 'updated_at': '2025-02-23T11:30:35.385752'}, {'id': 316, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T13:12:44.289461', 'updated_at': '2025-02-22T14:12:44.297036'}, {'id': 273, 'name': 'disable parent task selector in epics', 'description': 'and add text, Epic can´t have parent tasks', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:45:20.740910', 'updated_at': '2025-02-10T08:39:17.639890'}, {'id': 271, 'name': 'make sure dynamically added rows has the exact same styling and includes every element', 'description': 'Missing elements:\n- Open link\n- Default project\n- Project name should be inside a pill\n- Task type should be in a pill\n- Estimations should be 0, not N/A\n- Make sure font size is matching\n- status should have the dropdown inside a pill\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T00:21:07.108431', 'updated_at': '2025-02-23T11:30:25.428577'}, {'id': 267, 'name': 'improvements to toggles and nested tasks', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 2, 'assigned_to': 'Bob', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:29:12.464594', 'updated_at': '2025-02-23T11:03:53.247332'}, {'id': 311, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 3, 'assigned_to': 'Charlie', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-21T22:58:25.440044', 'updated_at': '2025-02-23T12:11:24.815974'}, {'id': 323, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-23T02:41:28.531955', 'updated_at': '2025-02-23T03:41:28.537448'}, {'id': 322, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 1, 'assigned_to': 'Alice', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T15:38:23.342262', 'updated_at': '2025-02-23T11:09:01.873512'}, {'id': 294, 'name': 'issue: task table filters not working', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:19:21.022598', 'updated_at': '2025-02-18T06:38:16.836257'}, {'id': 257, 'name': 'Update Task API Integration', 'description': "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-02-05T22:55:49.566819', 'updated_at': '2025-02-05T22:18:17.807154'}, {'id': 275, 'name': 'add sprints, cycles', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-18T12:08:36.665524'}, {'id': 290, 'name': 'issue: error when changing task type and', 'description': 'issue: error when changing task type and parent task before saving', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:00:03.417734', 'updated_at': '2025-02-10T09:15:09.284969'}, {'id': 291, 'name': 'add dropdowns in task list for changing: project, assigned to, estimate and task type (labels/tags)', 'description': '', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-02-18T06:40:24.609233'}, {'id': 306, 'name': 'ne', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-20T11:31:03.798672', 'updated_at': '2025-02-20T12:31:03.801989'}, {'id': 308, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-21T21:18:03.772575', 'updated_at': '2025-02-21T22:18:03.781548'}, {'id': 272, 'name': 'implement a markdown text editor like notion', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-02-10T08:28:39.669255'}, {'id': 136, 'name': 'Page scroll should stay in position when reloading', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-16T18:21:50.187247', 'updated_at': '2025-01-16T19:22:36.214901'}, {'id': 130, 'name': 'Implement the Map of Task Relationships solution for drag-and-drop', 'description': 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:41:28.093022', 'updated_at': '2025-02-18T06:41:19.891744'}, {'id': 133, 'name': 'Step 4: Enhance Logging in models.py', 'description': 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nupdating the Task model in the following ways:\n\n1.\tLog Changes to parent_id:\n\t•\tLog changes to parent_id during updates, including old and new values.\n\t2.\tValidate Hierarchy with Logging:\n\t•\tLog detailed messages when validating hierarchy changes, especially for circular dependency checks.\n\nHere’s how the models.py can be updated:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy import func, cast, CheckConstraint\nfrom sqlalchemy.orm import validates\nfrom app.extensions.db import db\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\nclass Task(db.Model):\n    __tablename__ = "task"\n    \n    # Other columns...\n\n    parent_id = db.Column(\n        db.Integer, db.ForeignKey("task.id"), index=True, nullable=True\n    )\n\n    # Relationships\n    parent = db.relationship(\n        "Task", remote_side=[id], back_populates="children", lazy="select"\n    )\n    children = db.relationship(\n        "Task", back_populates="parent", lazy="select"\n    )\n\n    \n\n\n    @staticmethod\n    def _validate_no_circular_references(new_parent_id):\n        """\n        Validates that there are no circular references in the task hierarchy.\n\n        Args:\n            new_parent_id (int): The new parent ID to validate.\n\n        Raises:\n            ValueError: If a circular reference is detected.\n        """\n        visited = set()\n        current_parent_id = new_parent_id\n\n        logger.info(f"Validating circular references for parent ID: {new_parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error(\n                    f"Circular reference detected: Parent ID {current_parent_id} already visited."\n                )\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            # Fetch the next parent_id in the hierarchy\n            parent = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not parent:\n                break  # Exit if no parent is found\n            current_parent_id = parent.parent_id\n\n        logger.info("No circular reference detected.")\n\n    @validates(\'parent_id\', \'task_type\')\n    def validate_task_changes(self, key, value):\n        """\n        Validates changes to \'parent_id\' and \'task_type\'.\n        Ensures hierarchy validity and checks for circular references.\n        """\n        logger.debug(f"Validating {key} change for Task {self.id}: {value}")\n\n        if key == \'parent_id\':\n            # Log changes to parent_id\n            if self.id and value != self.parent_id:\n                logger.info(f"Task {self.id}: Updating \'parent_id\' from {self.parent_id} to {value}")\n\n            # Prevent a task from being its own parent\n            if value and value == self.id:\n                logger.error("A task cannot be its own parent.")\n                raise ValueError("A task cannot be its own parent.")\n\n            # Check for circular references\n            if value:\n                Task.check_circular_reference(self.id, value)\n\n        elif key == \'task_type\':\n            # Log changes to task_type\n            if self.id and value != self.task_type:\n                logger.info(f"Task {self.id}: Updating \'task_type\' from {self.task_type} to {value}")\n\n        # Check hierarchy rules without triggering further validation\n        if key in [\'parent_id\', \'task_type\']:\n            self._validate_hierarchy_change(key, value)\n\n        logger.info(f"Validation passed for {key}: {value}")\n        return value\n\n    def _validate_hierarchy_change(self, key, value):\n        """\n        Validates hierarchy rules for the task based on `task_type` and `parent_id`.\n        """\n        if key == \'parent_id\' and value:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=value).first()\n            if not parent_task:\n                raise ValueError("Parent task does not exist.")\n\n            logger.debug(f"Validating hierarchy: Task {self.id}, Parent Type: {parent_task.task_type}")\n            if self.task_type == "User Story" and parent_task.task_type != "Epic":\n                raise ValueError("User Stories must have an Epic as a parent.")\n            if self.task_type == "Subtask" and parent_task.task_type != "User Story":\n                raise ValueError("Subtasks must have a User Story as a parent.")\n\n        elif key == \'task_type\' and self.parent_id:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=self.parent_id).first()\n            if parent_task:\n                logger.debug(f"Validating hierarchy: Task Type: {value}, Parent Type: {parent_task.task_type}")\n                if value == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError("User Stories must have an Epic as a parent.")\n                if value == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError("Subtasks must have a User Story as a parent.")\n\n        logger.info(f"Hierarchy validation passed for Task {self.id if self.id else \'New Task\'}.")\n\n    @staticmethod\n    def check_circular_reference(task_id, parent_id):\n        """\n        Iteratively checks for circular references in the task hierarchy.\n        Prevents stack overflow on deep hierarchies.\n        """\n        visited = set()\n        current_parent_id = parent_id\n\n        logger.info(f"Checking circular reference for Task {task_id} with Parent ID: {parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error("Circular reference detected!")\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            if current_parent_id == task_id:\n                logger.error("A task cannot be its own ancestor.")\n                raise ValueError("A task cannot be its own ancestor.")\n\n            # Fetch the next parent_id in the hierarchy\n            task = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not task:\n                break\n            current_parent_id = task.parent_id\n\n        logger.info("Circular reference check passed.")\n```\nKey Enhancements:\n\t1.\tlog_and_validate_parent_id_change:\n\t•\tLogs the old and new parent_id whenever it changes.\n\t•\tEnsures no circular references are introduced.\n\t2.\t_validate_no_circular_references:\n\t•\tValidates the parent_id field to prevent circular dependencies.\n\t•\tLogs progress and raises detailed errors if violations occur.\n\t3.\tlog_and_validate_task_type_change:\n\t•\tLogs changes to task_type with the old and new values.\n\t•\tRevalidates hierarchy rules when task_type changes.\n\t4.\tDetailed Logging for Circular Reference Validation:\n\t•\t_validate_no_circular_references and check_circular_reference methods log every step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t•\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:44:08.340041', 'updated_at': '2025-01-16T19:22:36.219710'}, {'id': 132, 'name': 'Step 1: Update tasks_table_interactions.js', 'description': '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the map for efficient parent-child relationship lookups instead of DOM traversal.\n\n```\nexport const TaskManager = {\n    init: function (csrfToken) {\n        this.csrfToken = csrfToken;\n        this.initTaskParentMap(); // Initialize the map\n        this.initDragAndDrop(); // Initialize drag-and-drop functionality\n    },\n\n    // Initialize a global map for task relationships\n    taskParentMap: new Map(),\n\n    // Build the taskParentMap from the DOM\n    initTaskParentMap: function () {\n        console.log("Initializing Task Parent Map...");\n        const rows = document.querySelectorAll("tr[data-task-id]");\n\n        rows.forEach((row) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = parseInt(row.dataset.parentId, 10) || null;\n            this.taskParentMap.set(taskId, parentId);\n        });\n\n        console.log("Task Parent Map initialized:", Array.from(this.taskParentMap.entries()));\n    },\n\n    // Update the map dynamically after drag-and-drop\n    updateTaskParentMap: function (taskId, parentId) {\n        console.log(`Updating Task Parent Map: Task ${taskId} -> Parent ${parentId}`);\n        this.taskParentMap.set(taskId, parentId);\n    },\n\n    initDragAndDrop: function () {\n        if (window.isDragAndDropInitialized) {\n            console.log("Drag-and-drop is already initialized.");\n            return;\n        }\n\n        console.log("Initializing drag-and-drop within TaskManager...");\n\n        const tableBody = document.querySelector("tbody");\n        if (!tableBody) {\n            console.warn("Task table body not found for drag-and-drop initialization");\n            return;\n        }\n\n        // Initialize Sortable.js for drag-and-drop functionality\n        Sortable.create(tableBody, {\n            handle: ".task-row", // Only draggable via `.task-row` elements\n            animation: 150, // Smooth animation\n            filter: ".task-open-link", // Prevent dragging on task links\n            preventOnFilter: true, // Prevent drag if filtered element is clicked\n            onEnd: async (event) => {\n                try {\n                    console.log("Drag-and-drop operation started...");\n                    const rows = Array.from(event.from.querySelectorAll(".task-row"));\n                    const reorderedTasks = [];\n\n                    rows.forEach((row, index) => {\n                        const taskId = parseInt(row.dataset.taskId, 10);\n                        let parentId = null;\n\n                        // Get the parent ID from the map or fallback to the dataset\n                        if (row.classList.contains("subtask-row")) {\n                            const parentRow = row.previousElementSibling;\n                            parentId = parentRow\n                                ? parseInt(parentRow.dataset.taskId, 10)\n                                : this.taskParentMap.get(taskId) || null;\n                        }\n\n                        // Update the taskParentMap dynamically\n                        this.updateTaskParentMap(taskId, parentId);\n\n                        reorderedTasks.push({\n                            id: taskId,\n                            sort_order: index + 1,\n                            parent_id: parentId,\n                        });\n                    });\n\n                    console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n                    console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n                    // Send the payload to the backend\n                    const response = await fetch("/tasks/reorder_subtasks", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                            "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n                        },\n                        body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n                    });\n\n                    if (!response.ok) {\n                        const errorData = await response.json();\n                        console.error("Error reordering tasks:", errorData);\n                        alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n                        return;\n                    }\n\n                    const data = await response.json();\n                    console.log("Task reordering successful:", data);\n\n                } catch (error) {\n                    console.error("Error during drag-and-drop operation:", error);\n                    alert("An unexpected error occurred while reordering tasks.");\n                }\n            },\n        });\n\n        window.isDragAndDropInitialized = true;\n        console.log("Drag-and-drop initialized successfully.");\n    },\n};\n```\n\nKey Updates:\n\t1.\tPrecomputed Map (taskParentMap):\n\t•\tThe initTaskParentMap function initializes the map by iterating over DOM elements and mapping each task’s ID to its parent ID.\n\t•\tThe updateTaskParentMap dynamically updates the map when tasks are reordered.\n\t2.\tEfficient Parent Lookup:\n\t•\tThe parentId is derived from the precomputed map rather than DOM traversal.\n\t3.\tBackend Payload:\n\t•\tA structured payload (reorderedTasks) is sent to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t•\tCSRF protection is ensured by passing the token to the request headers.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:44:08.338301', 'updated_at': '2025-02-06T21:59:17.417466'}, {'id': 134, 'name': 'Step 2: Update the Backend in routes.py', 'description': 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\nPlan for step 2:\n\t1.\tVerify the payload structure:\n\t•\tEnsure that the payload includes all necessary fields (id, sort_order, parent_id) for each task.\n\t•\tValidate that the parent-child relationships in the precomputed map (taskParentMap) are reflected correctly in the payload.\n\t2.\tSubmit the payload to the backend:\n\t•\tEnhance the fetch request in the onEnd function of initDragAndDrop to log detailed submission data.\n\t•\tConfirm the payload integrity in the browser console before submission.\n\t3.\tUpdate backend logging:\n\t•\tAdd logging to /reorder_subtasks in routes.py to confirm receipt of the correct payload and process parent-child updates.\n\t•\tLog before and after database updates for better debugging.\n\n-----\nUpdated tasks_table_interactions.js\n\nReplace this section:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    let parentId = null;\n```\nWith:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    const parentId = this.taskParentMap.get(taskId) || null;\n```\nThe this.taskParentMap provides a precomputed and dynamic mapping of taskId to parentId. By using this map, we avoid relying on DOM traversal logic (row.closest or row.previousElementSibling) during drag-and-drop operations, which can sometimes be unreliable or cumbersome.\n\nFull Revised onEnd section:\n```\nonEnd: async (event) => {\n    try {\n        console.log("Drag-and-drop operation started...");\n        const rows = Array.from(event.from.querySelectorAll(".task-row"));\n        const reorderedTasks = [];\n\n        rows.forEach((row, index) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = this.taskParentMap.get(taskId) || null;\n\n            // Update the taskParentMap dynamically\n            this.updateTaskParentMap(taskId, parentId);\n\n            reorderedTasks.push({\n                id: taskId,\n                sort_order: index + 1,\n                parent_id: parentId,\n            });\n        });\n\n        console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n        console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n        // Send the payload to the backend\n        const response = await fetch("/tasks/reorder_subtasks", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n            },\n            body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error("Error reordering tasks:", errorData);\n            alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n            return;\n        }\n\n        const data = await response.json();\n        console.log("Task reordering successful:", data);\n\n    } catch (error) {\n        console.error("Error during drag-and-drop operation:", error);\n        alert("An unexpected error occurred while reordering tasks.");\n    }\n}\n```\n---------------------------------\nEnsure updates include:\n\t•\tBetter Logging: Adding logs for key events such as database changes and validation results.\n\t•\tInput Validation: Ensure all required fields (id, sort_order, parent_id) exist in the payload.\n\t•\tPost-Commit Validation: Confirm database updates after the commit.\n\t•\tImproved Error Handling: Include specific error messages and consistent rollback mechanisms.\n\nBelow is the revised reorder_subtasks route with descriptive comments for each section:\n```\n@bp.route("/reorder_subtasks", methods=["POST"])\ndef reorder_subtasks():\n    """\n    Reorder subtasks globally or reassign them to a different parent.\n\n    Steps:\n    - Parse and validate input from the frontend.\n    - Update parent-child relationships and sort order in the database.\n    - Commit changes and return a success response.\n    - Handle errors gracefully and provide detailed logs for debugging.\n    """\n    logger.info("Entering reorder_subtasks route...")\n    logger.info(f"Received payload for reordering tasks: {request.json}")\n\n    try:\n        # Step 1: Parse input\n        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered\n        ordered_tasks = request.json.get("ordered_tasks", [])\n\n        logger.debug(f"Parsed parent_id: {parent_id}")\n        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")\n\n        # Step 2: Validate input\n        if not isinstance(ordered_tasks, list) or not all(\n            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task\n            for task in ordered_tasks\n        ):\n            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")\n            return jsonify({\n                "error": "Invalid input format for \'ordered_tasks\'. Each task must include \'id\', \'sort_order\', and \'parent_id\'."\n            }), 400\n\n        # Step 3: Validate parent task (if applicable)\n        if parent_id is not None:\n            parent_task = Task.query.get(parent_id)\n            if not parent_task:\n                logger.error(f"Parent task with ID {parent_id} not found.")\n                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400\n\n        logger.info("Input validation passed. Proceeding with task updates...")\n\n        # Step 4: Process updates for each subtask\n        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation\n\n        for task_data in ordered_tasks:\n            subtask_id = task_data["id"]\n            sort_order = task_data["sort_order"]\n            new_parent_id = task_data["parent_id"]\n\n            # Fetch the subtask from the database\n            subtask = Task.query.get(subtask_id)\n            if not subtask:\n                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")\n                continue\n\n            # Log and update parent_id if it changes\n            if new_parent_id is not None and new_parent_id != subtask.parent_id:\n                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")\n                subtask.parent_id = new_parent_id\n\n            # Update sort order\n            subtask.sort_order = sort_order\n            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")\n\n            # Add to the list of updated subtasks for validation\n            updated_subtasks.append(subtask)\n\n        # Step 5: Commit changes to the database\n        try:\n            db.session.commit()\n            logger.info(f"Subtasks reordered successfully: {[task[\'id\'] for task in ordered_tasks]}")\n        except Exception as e:\n            logger.error(f"Error committing changes to the database: {str(e)}")\n            db.session.rollback()\n            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500\n\n        # Step 6: Post-commit validation\n        for subtask in updated_subtasks:\n            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")\n            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")\n\n        # Step 7: Return success response\n        return jsonify({\n            "success": True,\n            "message": "Subtasks reordered successfully.",\n            "updated_subtasks": [subtask.id for subtask in updated_subtasks]\n        }), 200\n\n    except Exception as e:\n        # Step 8: Handle unexpected errors\n        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)\n        db.session.rollback()\n        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500\n```\nKey Changes and Descriptive Comments\n\t1.\tInput Parsing:\n\t•\tExtracts parent_id and ordered_tasks from the request payload.\n\t•\tLogs the parsed values for debugging.\n\t2.\tInput Validation:\n\t•\tEnsures ordered_tasks is a list of dictionaries with the required keys.\n\t•\tValidates parent_id if provided, ensuring the parent task exists in the database.\n\t3.\tUpdate Processing:\n\t•\tIterates through ordered_tasks, updating each task’s parent_id and sort_order.\n\t•\tLogs changes for each task.\n\t4.\tDatabase Commit:\n\t•\tCommits all updates in a single transaction.\n\t•\tLogs success or rolls back changes in case of an error.\n\t5.\tPost-Commit Validation:\n\t•\tVerifies that the parent_id and sort_order changes were successfully saved to the database.\n\t6.\tError Handling:\n\t•\tCaptures and logs exceptions during processing or committing.\n\t•\tProvides meaningful error messages to the frontend.\n\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:46:29.348853', 'updated_at': '2025-02-06T21:59:21.617065'}, {'id': 131, 'name': 'Step 5: Update utils.py', 'description': 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nChanges to Make:\n\t1.\tEnhance Task Filtering:\n\t•\tEnsure the filters handle parent-child relationships explicitly.\n\t•\tAdd options to include or exclude subtasks in queries.\n\t2.\tUtility Function for Debugging Parent-Child Relationships:\n\t•\tProvide a function to generate a map or list of parent-child relationships for debugging purposes.\n\t3.\tValidation Functions:\n\t•\tAdd a utility function to validate parent-child relationships and ensure no circular dependencies.\n\nUpdated utils.py Code:\n```\nimport logging\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import joinedload\nfrom app.extensions.db import db\nfrom app.tasks.models import Task\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\n\nclass TaskService:\n    @staticmethod\n    def filter_tasks(filters=None, include_subtasks=True, page=None, per_page=None):\n        """\n        Dynamically filters tasks with an option to include or exclude subtasks.\n\n        Args:\n            filters (dict): Filtering criteria.\n            include_subtasks (bool): Whether to include subtasks in the query.\n            page (int, optional): Page number for pagination.\n            per_page (int, optional): Items per page for pagination.\n\n        Returns:\n            Query or Pagination: A SQLAlchemy query object or paginated results.\n        """\n        query = Task.query.options(\n            db.joinedload(Task.project).joinedload(Project.contributors),\n            db.joinedload(Task.contributor),\n            db.joinedload(Task.children),\n        ).order_by(Task.sort_order)\n\n        if filters:\n            logger.debug(f"Applying filters: {filters}")\n\n            # Apply standard filters\n            if "is_archived" in filters:\n                query = query.filter(Task.is_archived == filters["is_archived"])\n            if "project_id" in filters:\n                query = query.filter(Task.project_id == filters["project_id"])\n            if "task_type" in filters:\n                if isinstance(filters["task_type"], list):\n                    query = query.filter(Task.task_type.in_(filters["task_type"]))\n                else:\n                    query = query.filter(Task.task_type == filters["task_type"])\n            if "completion_status" in filters:\n                completion_map = {"completed": True, "in_progress": False}\n                if filters["completion_status"] in completion_map:\n                    query = query.filter(Task.completed == completion_map[filters["completion_status"]])\n\n            # Optionally exclude subtasks\n            if not include_subtasks:\n                query = query.filter(Task.task_type != "Subtask")\n\n        logger.debug(f"Generated query: {query}")\n\n        # Pagination\n        if page and per_page:\n            return query.paginate(page=page, per_page=per_page, error_out=False)\n        return query\n\n    @staticmethod\n    def debug_parent_child_relationships(project_id=None):\n        """\n        Generates a debug map of parent-child relationships for all tasks.\n\n        Args:\n            project_id (int, optional): Restrict to tasks from a specific project.\n\n        Returns:\n            dict: A dictionary mapping parent IDs to their child task IDs.\n        """\n        query = Task.query\n        if project_id:\n            query = query.filter(Task.project_id == project_id)\n\n        tasks = query.options(\n            db.load_only(Task.id, Task.parent_id)\n        ).all()\n\n        relationship_map = {}\n        for task in tasks:\n            if task.parent_id not in relationship_map:\n                relationship_map[task.parent_id] = []\n            relationship_map[task.parent_id].append(task.id)\n\n        logger.debug(f"Parent-Child Relationship Map: {relationship_map}")\n        return relationship_map\n\n    @staticmethod\n    def validate_parent_child_relationships():\n        """\n        Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.\n\n        Raises:\n            ValueError: If invalid relationships are detected.\n        """\n        tasks = Task.query.options(db.joinedload(Task.parent)).all()\n\n        for task in tasks:\n            if task.parent_id:\n                parent_task = task.parent\n                if not parent_task:\n                    raise ValueError(f"Task {task.id} has an invalid parent ID {task.parent_id}.")\n\n                # Validate hierarchy rules\n                if task.task_type == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError(f"User Story {task.id} must have an Epic as its parent.")\n                if task.task_type == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError(f"Subtask {task.id} must have a User Story as its parent.")\n\n        logger.info("All parent-child relationships are valid.")\n\n    @staticmethod\n    def get_all_task_ids_with_parents():\n        """\n        Returns a flat list of tasks with their parent IDs for debugging.\n\n        Returns:\n            list: A list of tuples (task_id, parent_id).\n        """\n        tasks = Task.query.with_entities(Task.id, Task.parent_id).all()\n        logger.debug(f"Task IDs with Parent IDs: {tasks}")\n        return tasks\n```\n\n\nExplanation of Changes:\n\t1.\tfilter_tasks Enhancements:\n\t•\tAdded include_subtasks parameter to optionally exclude subtasks from the query.\n\t2.\tdebug_parent_child_relationships:\n\t•\tCreates a parent-child relationship map for debugging purposes.\n\t3.\tvalidate_parent_child_relationships:\n\t•\tIterates through all tasks to validate parent-child hierarchy and ensures no invalid relationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t•\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.091824', 'updated_at': '2025-01-16T19:22:36.236691'}, {'id': 135, 'name': 'Step 3: Update list.html', 'description': 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already includes everything needed. No required changes.\n\nHere´s the relevant section of list.html:\n\n```\n<tr id="task-{{ task.id }}"\n                class="task-row {% if task.task_type == \'Subtask\' %}subtask-row{% elif task.task_type == \'User Story\' %}user-story-row{% elif task.task_type == \'Epic\' %}epic-row{% endif %}"\n                style="background-color: \n                {% if task.task_type == \'Subtask\' %}\n                    rgba(200, 230, 255, 0.5); /* Light blue for Subtask */\n                {% elif task.task_type == \'User Story\' %}\n                    rgba(255, 255, 200, 0.5); /* Light yellow for User Story */\n                {% elif task.task_type == \'Epic\' %}\n                    rgba(255, 200, 200, 0.5); /* Light red for Epic */\n                {% else %}\n                    rgba(240, 240, 240, 1); /* Default light gray */\n                {% endif %};"\n                data-task-id="{{ task.id }}"\n                data-parent-id="{{ task.parent_id or \'\' }}"\n                data-level="{{ depth }}">\n                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>\n                <td>\n                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}\n                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}" aria-label="Toggle details for task {{ task.name }}">\n                        <i class="bi bi-chevron-right"></i>\n                    </button>\n                    {% endif %}\n                </td>\n                <td class="fw-medium fs-6 \n                {% if task.task_type == \'Epic\' %}\n                    epic-cell\n                {% elif task.task_type == \'User Story\' %}\n                    user-story-cell\n                {% elif task.task_type == \'Subtask\' %}\n                    subtask-cell\n                {% endif %}" \n                style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">\n                <span class="bi fs-6\n                {% if task.task_type == \'Epic\' %}\n                    bi-circle-fill\n                {% elif task.task_type == \'User Story\' %}\n                    bi-circle-half\n                {% elif task.task_type == \'Subtask\' %}\n                    bi-circle\n                {% endif %}">\n                </span>\n                {{ task.name }}\n                <small class="text-muted fw-light">\n                    (Parent-ID: {{ task.parent_id or \'None\' }})\n                </small>\n                <!-- Open Link -->\n                <a href="#" class="task-open-link" data-task-id="{{ task.id }}">\n                    <i class="bi bi-arrows-angle-expand" style="font-size: 0.8rem; color: white;"></i>\n                    Open\n                </a>\n            </td>\n                <td class="fw-light fs-6">\n                    <small class>\n                    LAC-{{ task.id }}\n                    </small>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light text-bg-secondary">\n                        {{ task.project if task.project else "Unknown Project" }}\n                    </span>\n                </td>\n                <td class="fs-6" data-contributor-column>{{ task.assigned_to if task.assigned_to else "Unassigned" }}</td>\n                <td class="fs-6">{{ task.story_points }}</td>\n                <td class="fs-6">\n                    <span class="badge rounded-pill fw-light text-bg-light">\n                        {{ task.task_type }}\n                    </span>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light {% if task.completed %}text-bg-success{% else %}text-bg-warning{% endif %}">\n                        {{ "Completed" if task.completed else "In Progress" }}\n                    </span>\n                </td>\n                <td>\n                    <!-- Delete Icon -->\n                    <button class="btn btn-dark btn-sm delete-task-btn" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .2rem; --bs-btn-font-size: .75rem;" data-task-id="{{ task.id }}" aria-label="Deletes task {{ task.id }}">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n            </tr>\n            {% for child in tasks if child.parent_id == task.id %}\n                {{ render_task(child, tasks, depth + 1) }}\n            {% endfor %}\n            {% endmacro %}\n            \n            <!-- Render top-level tasks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:46:29.349784', 'updated_at': '2025-01-16T19:22:36.238473'}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'description': 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitHub Login involves integrating OAuth 2.0, which both services support. The complexity depends on your app’s existing setup, frameworks, and experience with third-party authentication. Below is a breakdown:\n\nKey Steps for Implementing Google or GitHub Login\n\t1.\tSet Up OAuth Credentials:\n\t•\tRegister your application in the Google Cloud Console or GitHub Developer Settings.\n\t•\tObtain the client ID and client secret.\n\t2.\tInstall Required Libraries:\n\t•\tUse a library for OAuth (e.g., flask-oauthlib, python-social-auth, or authlib).\n\t•\tPopular frameworks like Flask and Django already have robust integrations for OAuth providers.\n\t3.\tBackend Configuration:\n\t•\tImplement an endpoint to handle the OAuth flow (/auth/login/google or /auth/login/github).\n\t•\tConfigure your app to send users to Google or GitHub’s authentication page.\n\t•\tHandle the OAuth callback to exchange the authorization code for an access token.\n\t•\tVerify the token and fetch user information (e.g., email, name).\n\t4.\tLink OAuth to User Registration:\n\t•\tOn successful login, create or retrieve a user in your database.\n\t•\tStore the user’s details like email, OAuth provider ID, and access token.\n\t5.\tFrontend Integration (if applicable):\n\t•\tAdd “Login with Google” or “Login with GitHub” buttons.\n\t•\tRedirect to your backend’s OAuth endpoint when clicked.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T12:15:54.291625', 'updated_at': '2025-01-16T19:22:36.239866'}, {'id': 62, 'name': 'Add OAuth integration for Google Login', 'description': 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-02-18T00:44:28.917671'}, {'id': 64, 'name': 'Setup project credentials for Google API', 'description': 'Generate client ID and secret from Google API Console for your application.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-02-18T00:44:45.802506'}, {'id': 67, 'name': 'Test Google OAuth flow', 'description': 'Verify the OAuth flow using test accounts and check the token exchange.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-02-18T00:44:43.790066'}, {'id': 65, 'name': 'Implement backend endpoints for Google OAuth', 'description': 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-02-18T00:44:41.932371'}, {'id': 63, 'name': 'Add OAuth integration for GitHub Login', 'description': 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.246358'}, {'id': 68, 'name': 'Register application in GitHub Developer Console', 'description': 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.247746'}, {'id': 69, 'name': 'Handle callback from GitHub', 'description': 'Implement the callback endpoint to process the authorization code from GitHub.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.248912'}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'description': 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 18, 'status': 'Not Started', 'created_at': '2025-01-07T19:53:50.085064', 'updated_at': '2025-01-16T19:22:36.250169'}, {'id': 100, 'name': '1.1 User Registration', 'description': 'As a user, I want to register with a username, email, and password so that I can create an account and access the system.\n\n**Acceptance Criteria:**\n\n•\tUser can input valid username, email, and password.\n•\tUsername and email must be unique.\n•\tErrors are displayed for invalid inputs or duplicate accounts.\n•\tPasswords must meet complexity requirements and be securely stored.\n•\tSuccessful registration redirects users to a login page.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:59:09.044667', 'updated_at': '2025-01-16T19:22:36.251812'}, {'id': 107, 'name': '1.1.1 Database Changes for User Registration', 'description': '1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.\n   CREATE TABLE public.users (\n       id SERIAL PRIMARY KEY,\n       username VARCHAR(50) UNIQUE NOT NULL,\n       email VARCHAR(100) UNIQUE NOT NULL,\n       password_hash VARCHAR(255) NOT NULL,\n       created_at TIMESTAMP DEFAULT NOW(),\n       updated_at TIMESTAMP DEFAULT NOW()\n);\n\n\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-11T11:36:20.238219'}, {'id': 108, 'name': '1.1.2 Backend API for Registration', 'description': '•\tCreate an endpoint POST /api/register:\n•\tValidate input fields.\n•\tHash the password using bcrypt or argon2.\n•\tInsert the user into the users table.\n•\tReturn success/failure responses.\ndddhfff\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:33.067643'}, {'id': 112, 'name': '1.2.2 Frontend Login Page', 'description': 'Develop a frontend form for user login with email and password inputs.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.683644'}, {'id': 109, 'name': '1.1.3 Create Frontend Registration Page', 'description': 'Develop a frontend form to collect user registration details.\n•\tAdd a form for username, email, and password inputs.\n•\tUse client-side validation (e.g., email format).\n•\tSend a POST request to /api/register.\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.684988'}, {'id': 110, 'name': '1.1.4 Unit Tests for Registration', 'description': 'Write unit tests for:\n\n•\tValid registration.\n•\tDuplicate username/email scenarios.\n•\tInvalid input handling.\nff', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.686902'}, {'id': 101, 'name': '1.2 User Login', 'description': 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n•\tUsers can log in with a valid email and password.\n•\tErrors are displayed for invalid credentials.\n•\tSuccessful login stores a session or JWT token.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:25:53.687936'}, {'id': 111, 'name': '1.2.1 Backend API for Login', 'description': 'Create POST /api/login endpoint to handle user login.\njjsjj', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.689096'}, {'id': 113, 'name': '1.2.3 Session Management', 'description': 'Implement secure session handling using cookies or JWT.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:20.968680'}, {'id': 114, 'name': '1.2.4 Unit Tests for Login', 'description': 'Write tests for successful and failed login attempts.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:22:36.265866'}, {'id': 106, 'name': 'Password Reset', 'description': 'As a user, I want to reset my password securely using email.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.267247'}, {'id': 128, 'name': 'Frontend Password Reset Page', 'description': 'Develop a page for users to enter a new password using a valid token.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.269158'}, {'id': 129, 'name': 'Testing Password Reset', 'description': 'Write tests for email delivery, token validation, and password updates.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.270849'}, {'id': 102, 'name': 'Logout', 'description': 'As a user, I want to log out so that I can end my session securely.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.272605'}, {'id': 117, 'name': 'Tests for Logout', 'description': 'Verify session invalidation and redirection to the login page.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.274575'}, {'id': 116, 'name': 'Frontend Logout Button', 'description': 'Add a logout button to the UI and handle session clearing.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-09T12:31:17.939784'}, {'id': 115, 'name': 'Backend API for Logout', 'description': 'Create POST /api/logout endpoint to invalidate user sessions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.277547'}, {'id': 61, 'name': 'Parent task assignment', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-01-04T22:31:45.205815', 'updated_at': '2025-02-18T06:41:37.538722'}, {'id': 45, 'name': 'Display Default Value in Dropdown', 'description': 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.280493'}, {'id': 50, 'name': 'Retrieve Current Parent Task', 'description': 'Retrieve the current parent task’s ID and name from the backend.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Completed', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-18T00:45:04.055333'}, {'id': 51, 'name': 'Set Default Value', 'description': 'Set the default value in the dropdown based on the retrieved data.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 45, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 1, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.283309'}, {'id': 46, 'name': 'Search for Parent Tasks', 'description': 'Allow users to search for tasks dynamically in the dropdown by typing.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.284882'}, {'id': 54, 'name': 'Test Partial Matching', 'description': 'Ensure the search results update in real-time as the user types.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:29.251047'}, {'id': 47, 'name': 'Handle Large Datasets Efficiently', 'description': 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:26:23.067490'}, {'id': 56, 'name': 'Paginate API Responses', 'description': 'Implement server-side filtering and pagination for large datasets.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:16.233517'}, {'id': 55, 'name': 'Enable Lazy Loading', 'description': 'Enable lazy loading or virtualization in Virtual Select.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:08.099271'}, {'id': 48, 'name': 'Select and Deselect Parent Tasks', 'description': 'Allow users to select a parent task or deselect by choosing "None."', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:25:59.651639'}, {'id': 57, 'name': 'Ensure None Option Availability', 'description': 'Add “None” as a selectable option and ensure it stays at the top of the list.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:51.310240'}, {'id': 58, 'name': 'Handle Selection Events', 'description': 'Implement event listeners to update the form’s state when the selection changes.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:43.569501'}, {'id': 49, 'name': 'Integrate Dropdown with Task Form', 'description': 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:25:36.133259'}, {'id': 59, 'name': 'Bind Dropdown to Form Field', 'description': 'Bind the dropdown to the form’s parent task field.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'In Progress', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-18T06:41:49.262443'}, {'id': 60, 'name': 'Test Form Submission', 'description': 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:28.367797'}, {'id': 41, 'name': 'Implement Searchable Dropdown', 'description': 'As a user, I want a searchable dropdown for parent task assignment.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Completed', 'created_at': '2025-01-03T09:14:28.285904', 'updated_at': '2025-02-11T08:25:07.992524'}, {'id': 52, 'name': 'Add Search Box to Dropdown', 'description': 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:01.469601'}]
2025-02-23 22:03:07,569 DEBUG: Task types: ['all', 'Epic', 'Subtask', 'User Story']
2025-02-23 22:03:07,570 DEBUG: Projects: [<Project Project Alpha (ID: 1)>, <Project Project Beta (ID: 2)>, <Project Project Gamma (ID: 3)>, <Project Project Theta (ID: 4)>, <Project Project Delta (ID: 5)>, <Project PMS - Feature Requests (ID: 7)>, <Project PMS - Backlog (ID: 6)>, <Project Miscellaneous (ID: 19)>]
2025-02-23 22:03:07,571 DEBUG: Tasks response: [{'id': 283, 'name': 'fix update title', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T08:41:58.769700', 'updated_at': '2025-02-22T12:17:39.812683'}, {'id': 298, 'name': 'example user story with parent epic 297', 'description': '', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:41:01.907455', 'updated_at': '2025-02-23T02:20:38.256245'}, {'id': 285, 'name': 'add text truncation to project names in task list', 'description': 'kkkkkkkjjjjj\nlkajdlökjsdfölkjsdfölkjdf', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-23T19:50:03.193034'}, {'id': 264, 'name': 'close all / open all childtasks', 'description': 'ölkölklkhkk', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 7, 'status': 'Not Started', 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-02-19T22:47:17.024076'}, {'id': 276, 'name': 'add support for priority', 'description': 'ffasdlkjlkj\nljkkjlkj', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P0', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-22T18:03:14.125665'}, {'id': 270, 'name': 'the newest task', 'description': '', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:07:34.368035', 'updated_at': '2025-02-23T13:04:53.023952'}, {'id': 310, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-21T22:56:46.414917', 'updated_at': '2025-02-21T23:56:46.435450'}, {'id': 265, 'name': 'smooth transition for toggles', 'description': 'ffjjlkjljlkjlkj\nkjh', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-02-20T09:59:26.301212'}, {'id': 292, 'name': 'issue: assigning contributor does not work', 'description': '### **Summary of problem and solution**\n\nThe issue was that assigning a contributor to a task via the /tasks/<task_id>/assign_contributor API endpoint resulted in a **400 Bad Request** error. Upon investigation, the following problems were identified:\n\n1. **Missing CSRF Token:**\n- The request failed due to a missing CSRF token, as shown in the error message: *“Bad Request: The CSRF token is missing.”*\n- The frontend was not correctly including the CSRF token in the request headers.\n1. **JavaScript Error (Undefined CSRF Token Variable):**\n- The error *“ReferenceError: csrfToken is not defined”* indicated that the CSRF token was not being retrieved properly in the JavaScript code.\n1. **Incorrect Fetch Request Headers:**\n- The fetch request did not include the CSRF token under the correct key (X-CSRFToken).\n- The script attempted to send the request without properly extracting the CSRF token from the meta tag.\n\n### **Solution**\n\n1. **Include the CSRF Token in the JavaScript Code**\n\nThe CSRF token was retrieved from the meta tag and used in the request headers:\n\n```jsx\n// Retrieve CSRF token from meta tag\nconst csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\');\n```\n\nThis ensures that the CSRF token is correctly fetched and available in the JavaScript scope.\n\n1. **Modify the Fetch Request to Include CSRF Token**\n\nThe request to assign a contributor was updated to include the token:\n\n```jsx\nconst response = await fetch(`/tasks/${taskId}/assign_contributor`, {\n    method: "POST",\n    headers: { \n        "Content-Type": "application/json",\n        "X-CSRFToken": csrfToken  // Include CSRF token\n    },\n    body: JSON.stringify({ contributor_id: parseInt(contributorId, 10) }),\n});\n```\n\n- **Ensures the CSRF token is sent in the request headers** so that Flask-WTF does not reject the request.\n1. **Verify and Debug Network Requests**\n- The updated request headers were verified using **Chrome DevTools > Network tab** to ensure the X-CSRFToken was included.\n- The error messages disappeared, and the contributor assignment request **succeeded with a 200 OK response**.\n\n---\n\n### **Final Outcome**\n\n🚀 The issue was resolved, and contributors can now be assigned successfully to tasks without triggering a CSRF validation error.\n\n### **Key Learnings from This Session**\n\nThis debugging session covered several important aspects of **web development with Flask and JavaScript**, particularly related to **API requests, CSRF protection, debugging tools, and database interactions**. Here are the key takeaways:\n\n---\n\n### **1. CSRF Protection in API Requests**\n\n- **Issue:** The initial error was due to **a missing CSRF token** when making a `POST` request.\n- **Fix:** The solution was to **retrieve the CSRF token from a meta tag** in the HTML and include it in the request headers.\n- **Key Learning:** Flask-WTF requires CSRF tokens for form and API submissions to **prevent cross-site request forgery (CSRF) attacks**.✅ Always ensure that API requests include a valid CSRF token.\n\n---\n\n### **2. Debugging JavaScript Fetch Requests**\n\n- **Issue:** The JavaScript code was making a fetch request, but the variable `csrfToken` was not properly defined, causing a `ReferenceError`.\n- **Fix:** Declaring `csrfToken` at the beginning of the script:\n    \n    ```jsx\n    const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\');\n    ```\n    \n- **Key Learning:**✅ JavaScript variables must be defined before they are used.✅ Use browser **developer tools (DevTools) Network tab** to inspect headers, payloads, and responses when debugging API requests.\n\n---\n\n### **3. Structuring Flask Routes for Task Management**\n\n- **Issue:** The `assign_contributor` route was failing due to incorrect request payload validation.\n- **Fix:** Improved the route’s error handling and logging:\n    \n    ```python\n    @bp.route(\'/<int:task_id>/assign_contributor\', methods=[\'POST\'])\n    def assign_contributor(task_id):\n        try:\n            data = request.get_json()\n            contributor_id = int(data.get(\'contributor_id\', 0))\n            if not contributor_id:\n                return jsonify({\'error\': \'Valid Contributor ID is required\'}), 400\n    ```\n    \n- **Key Learning:**✅ Always validate incoming data in Flask routes to prevent type errors.✅ Use `request.get_json()` properly and handle missing or incorrect data gracefully.\n\n---\n\n### **4. Utilizing Browser DevTools for Debugging**\n\n- **Issue:** The fetch request was failing with a `400 Bad Request`, and the browser console showed `ReferenceError: csrfToken is not defined`.\n- **Fix:**\n    - Used **Network tab** to inspect the request payload and headers.\n    - Used **Console tab** to catch JavaScript errors early.\n- **Key Learning:**✅ DevTools is a **critical** tool for diagnosing network request issues.✅ Always **check console errors** before assuming it\'s a backend issue.\n\n---\n\n### **5. Database Queries and ORM Debugging**\n\n- **Issue:** Tasks were not being updated correctly, possibly due to missing commit statements.\n- **Fix:** Ensured that:was executed properly.\n    \n    ```python\n    task.contributor_id = contributor_id\n    db.session.commit()\n    ```\n    \n- **Key Learning:**✅ Always call `db.session.commit()` after making changes in SQLAlchemy.✅ Rollback transactions if an error occurs to avoid database inconsistency.\n\n---\n\n### **6. Handling Asynchronous JavaScript Logic**\n\n- **Issue:** The `assignContributor` function was executing before the page was fully loaded.\n- **Fix:** Wrapped it inside a function that ensures elements exist:\n    \n    ```\n    window.setupContributorAssignment = function () {\n        const assignButton = $("#assign-contributor-btn");\n        if (!assignButton.length) {\n            setTimeout(setupContributorAssignment, 500); // Retry in 500ms\n            return;\n        }\n    ```\n    \n- **Key Learning:**✅ Use `setTimeout` to **retry event binding** when elements are dynamically loaded.✅ Always **check if elements exist before attaching event handlers**.\n\n---\n\n### **7. Best Practices for Flask Logging & Error Handling**\n\n- **Issue:** Lack of clear logging when API calls failed.\n- **Fix:** Added better logging to track failures:\n    \n    ```python\n    logger.info(f"Assigning contributor to task ID {task_id}")\n    try:\n        # Process request...\n    except Exception as e:\n        logger.error(f"Error assigning contributor: {e}")\n    ```\n    \n- **Key Learning:**✅ Log **every major step** in API processing to simplify debugging.✅ Differentiate between `logger.info()`, `logger.warning()`, and `logger.error()` based on severity.\n\n---\n\n### **Final Takeaways**\n\n🚀 **Understanding CSRF protection** and **properly structuring API requests** is crucial for secure web applications.\n\n🔍 **Browser DevTools is invaluable** for diagnosing frontend issues, especially in JavaScript.\n\n🐍 **Flask requires proper request validation, database transactions, and logging** to maintain stability.\n\n⚡ **Asynchronous JavaScript must handle dynamic elements carefully** to avoid runtime errors.\n\nThis session reinforced best practices in **frontend-backend integration, debugging, and security**, making it a great learning experience! 🚀🔥', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:11:12.273779', 'updated_at': '2025-02-18T06:41:00.286143'}, {'id': 307, 'name': 'c', 'description': '', 'task_type': 'Subtask', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-20T16:53:38.393115', 'updated_at': '2025-02-22T18:00:51.058705'}, {'id': 295, 'name': 'issue: drag and drop errors', 'description': '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:22:54.461413', 'updated_at': '2025-02-23T13:16:54.269738'}, {'id': 284, 'name': 'add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 4, 'assigned_to': 'Fredrik', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-23T19:51:06.136664'}, {'id': 288, 'name': 'when trying to move subtask to another project, make sure a warning is displayed', 'description': 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be lost"\nOR\n\nIs it possible, and is it desireable to keep parent child relationships across projects?\nSo that a parent can be in one project but the child tasks can be in different projects?\n\nLets say \nParent epic is \n"Internationalisation"\nChild user stories are\n- Timezones\n- Language\n- Currency\n- Day, Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:54:36.297869', 'updated_at': '2025-02-23T13:17:14.262634'}, {'id': 296, 'name': 'issue: contributor is lost after updating task', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:26:43.881947', 'updated_at': '2025-02-11T15:37:31.011120'}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:17.786154', 'updated_at': '2025-02-23T11:30:04.684746'}, {'id': 321, 'name': 'untitled task', 'description': '', 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-02-22T15:24:59.683105', 'updated_at': '2025-02-22T15:28:18.664289'}, {'id': 315, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T13:06:56.470332', 'updated_at': '2025-02-22T14:06:56.476919'}, {'id': 280, 'name': 'logging (task and project history)', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 1, 'assigned_to': 'Alice', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:37:44.435112', 'updated_at': '2025-02-23T13:14:30.331668'}, {'id': 297, 'name': 'example parent epic', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:39:51.620509', 'updated_at': '2025-02-10T10:39:51.622712'}, {'id': 314, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T12:03:03.637804', 'updated_at': '2025-02-22T13:03:03.643803'}, {'id': 274, 'name': 'Add support for goals, initiatives, okr´s', 'description': 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n\nölkasdölkk', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P1', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:46:27.204912', 'updated_at': '2025-02-18T06:39:43.729310'}, {'id': 320, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T15:17:39.647261', 'updated_at': '2025-02-22T16:17:39.650332'}, {'id': 304, 'name': 'g', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-19T22:02:47.172900', 'updated_at': '2025-02-19T23:02:47.179933'}, {'id': 277, 'name': 'custom task workflow statuses', 'description': 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- Custom status\n-- Custom status\n- In Progress\n-- Custom status\n-- Custom status\n-- Custom status\n- Completed\n-- Custom status\n-- Custom status\n\n2. How can we track a task through different stages and save the sequence of events or stages the task has gone through?\nI´m thinking it could be good for mapping out processes, identifying bottlenecks and provide valuable insights while improving and streamlining workflows.\n- Stages\n- Contacts taken\n- Respons time \n- Time to action after responses\n- Dependencies\n\nNeed to be able to record every action related to this action.\nCommunication integrations\n- Slack\n- Email\n- Text messages\n- Phonecalls\n- Calendar events, meetings\n- Zoom, Google meet, Teams etc..\n\n\n2. Set custom statuses per project (can use tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:16:03.352588', 'updated_at': '2025-02-17T23:32:55.626822'}, {'id': 303, 'name': 't', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-19T19:05:00.401232', 'updated_at': '2025-02-19T20:05:00.406117'}, {'id': 293, 'name': 'click on title should copy the task title and id to clipboard', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:16:33.508209', 'updated_at': '2025-02-17T19:07:44.656573'}, {'id': 287, 'name': 'when moving a parent item to another project make sure the subtasks are moved as well', 'description': '', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:48:31.986870', 'updated_at': '2025-02-17T19:08:23.749538'}, {'id': 281, 'name': 'add high level plan', 'description': 'Add some sort of high level plan that aims to keep PM/PO´s on track and not get lost into the details of an overwhelminly large backlog', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:27:01.218606', 'updated_at': '2025-02-17T19:12:02.051244'}, {'id': 301, 'name': 'untitled task', 'description': '', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'In Progress', 'created_at': '2025-02-19T11:58:55.165343', 'updated_at': '2025-02-21T11:17:05.115762'}, {'id': 319, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T14:59:09.098097', 'updated_at': '2025-02-22T15:59:09.132640'}, {'id': 317, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T13:13:24.508779', 'updated_at': '2025-02-22T14:13:24.511517'}, {'id': 278, 'name': 'search feature for tasks list', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 5, 'project': 'Project Delta', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 4, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:03.369833', 'updated_at': '2025-02-18T00:42:29.470892'}, {'id': 289, 'name': 'issue: parent task is lost when updating task', 'description': '- Summary of the problem and solution\n    \n    **Problem: Parent Task Dropdown Was Not Being Set on Modal Open**\n    \n    The issue was that when opening a task modal, the **parent task dropdown** was not pre-populated with the correct parent task. However, interacting with the dropdown (e.g., clicking on it) would suddenly trigger it to be set correctly. This meant that the dropdown initialization was likely delayed or missing a step in the modal lifecycle.\n    \n    **Debugging Steps and Observations**\n    \n    1. **Task Details Were Fetched Correctly** ✅\n    - The task details, including parent_id, were being fetched from the API successfully.\n    1. **Parent Dropdown Initialization Issues** ❌\n    - The initializeParentDropdown() function was being called, but the dropdown was sometimes **not fully ready** when we tried to set the selected parent task.\n    1. **Clicking the Dropdown Triggered the Parent to Be Set** 🤔\n    - This hinted that the dropdown was not fully ready when setParentDropdown(task.parent_id) was initially called.\n    \n    **Final Solution**\n    \n    1. **Ensuring Dropdown Readiness Before Setting the Parent Task**\n    - We added explicit **delays and checks** to confirm that the dropdown was fully initialized before attempting to set the parent task.\n    \n    Specifically, we:\n    \n    - **Waited for the dropdown to appear in the DOM** using observeParentDropdown().\n    - **Initialized the dropdown** with initializeParentDropdown().\n    - **Waited explicitly for the dropdown to be fully ready** using waitForParentDropdownReady().\n    - **Added a final delay of 200ms** before calling setParentDropdown() to ensure stability.\n    1. **Modifying openTaskModal to Handle Parent Dropdown Setup**\n    - We ensured that initializeParentDropdown() was called **after fetching task details** and before setting the parent task.\n    1. **Confirming the Fix** 🎯\n    - After these fixes, the parent dropdown was **immediately populated** upon opening the modal, without requiring user interaction.\n    \n    **Key Learnings**\n    \n    ✅ **Dropdowns in modals need careful timing** – They might not be ready when you expect them to be.\n    \n    ✅ **Waiting for DOM updates is crucial** – Observing the element ensures it actually exists before interacting with it.\n    \n    ✅ **Explicit delays can prevent race conditions** – A small delay can sometimes resolve timing issues in UI interactions.\n    \n    **Final Result**\n    \n    ✅ The modal now **correctly loads and pre-selects the parent task** without extra clicks! 🎉🚀', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T08:56:25.273984', 'updated_at': '2025-02-23T12:51:53.922845'}, {'id': 279, 'name': 'github integration', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:38.238202', 'updated_at': '2025-02-23T13:23:18.557230'}, {'id': 300, 'name': 'new task', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-18T14:25:24.773401', 'updated_at': '2025-02-18T14:26:07.982932'}, {'id': 266, 'name': 'highlight the nested tasks', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-02-23T13:20:57.641732'}, {'id': 305, 'name': 'n', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-20T10:12:52.005313', 'updated_at': '2025-02-23T12:50:45.092951'}, {'id': 318, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 1, 'assigned_to': 'Alice', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T13:39:38.859364', 'updated_at': '2025-02-23T12:53:59.013279'}, {'id': 312, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 4, 'assigned_to': 'Fredrik', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T11:45:27.081419', 'updated_at': '2025-02-23T12:51:03.918932'}, {'id': 313, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 4, 'assigned_to': 'Fredrik', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T11:45:44.396106', 'updated_at': '2025-02-23T12:53:51.194125'}, {'id': 299, 'name': 'example sub task with parent user story 298', 'description': 'Test update 1\nTest update 2\nTest update 3', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 298, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:42:38.905700', 'updated_at': '2025-02-10T23:23:08.671464'}, {'id': 309, 'name': 'test task', 'description': 'This is a test task', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 1, 'assigned_to': 'Alice', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-21T21:19:17.563435', 'updated_at': '2025-02-23T02:40:16.275244'}, {'id': 286, 'name': 'add support for labels/tags', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:46:23.985620', 'updated_at': '2025-02-23T13:23:02.680582'}, {'id': 302, 'name': 'n', 'description': '', 'task_type': 'Subtask', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-19T18:15:01.931285', 'updated_at': '2025-02-20T07:20:56.647312'}, {'id': 269, 'name': 'fix styling for sweetalert', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-02-08T15:54:56.717846', 'updated_at': '2025-02-23T11:30:35.385752'}, {'id': 316, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T13:12:44.289461', 'updated_at': '2025-02-22T14:12:44.297036'}, {'id': 273, 'name': 'disable parent task selector in epics', 'description': 'and add text, Epic can´t have parent tasks', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:45:20.740910', 'updated_at': '2025-02-10T08:39:17.639890'}, {'id': 271, 'name': 'make sure dynamically added rows has the exact same styling and includes every element', 'description': 'Missing elements:\n- Open link\n- Default project\n- Project name should be inside a pill\n- Task type should be in a pill\n- Estimations should be 0, not N/A\n- Make sure font size is matching\n- status should have the dropdown inside a pill\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T00:21:07.108431', 'updated_at': '2025-02-23T11:30:25.428577'}, {'id': 267, 'name': 'improvements to toggles and nested tasks', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 2, 'assigned_to': 'Bob', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:29:12.464594', 'updated_at': '2025-02-23T11:03:53.247332'}, {'id': 311, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 3, 'assigned_to': 'Charlie', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-21T22:58:25.440044', 'updated_at': '2025-02-23T12:11:24.815974'}, {'id': 323, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-23T02:41:28.531955', 'updated_at': '2025-02-23T03:41:28.537448'}, {'id': 322, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 1, 'assigned_to': 'Alice', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T15:38:23.342262', 'updated_at': '2025-02-23T11:09:01.873512'}, {'id': 294, 'name': 'issue: task table filters not working', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:19:21.022598', 'updated_at': '2025-02-18T06:38:16.836257'}, {'id': 257, 'name': 'Update Task API Integration', 'description': "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-02-05T22:55:49.566819', 'updated_at': '2025-02-05T22:18:17.807154'}, {'id': 275, 'name': 'add sprints, cycles', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-18T12:08:36.665524'}, {'id': 290, 'name': 'issue: error when changing task type and', 'description': 'issue: error when changing task type and parent task before saving', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:00:03.417734', 'updated_at': '2025-02-10T09:15:09.284969'}, {'id': 291, 'name': 'add dropdowns in task list for changing: project, assigned to, estimate and task type (labels/tags)', 'description': '', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-02-18T06:40:24.609233'}, {'id': 306, 'name': 'ne', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-20T11:31:03.798672', 'updated_at': '2025-02-20T12:31:03.801989'}, {'id': 308, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-21T21:18:03.772575', 'updated_at': '2025-02-21T22:18:03.781548'}, {'id': 272, 'name': 'implement a markdown text editor like notion', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-02-10T08:28:39.669255'}, {'id': 136, 'name': 'Page scroll should stay in position when reloading', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-16T18:21:50.187247', 'updated_at': '2025-01-16T19:22:36.214901'}, {'id': 130, 'name': 'Implement the Map of Task Relationships solution for drag-and-drop', 'description': 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:41:28.093022', 'updated_at': '2025-02-18T06:41:19.891744'}, {'id': 133, 'name': 'Step 4: Enhance Logging in models.py', 'description': 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nupdating the Task model in the following ways:\n\n1.\tLog Changes to parent_id:\n\t•\tLog changes to parent_id during updates, including old and new values.\n\t2.\tValidate Hierarchy with Logging:\n\t•\tLog detailed messages when validating hierarchy changes, especially for circular dependency checks.\n\nHere’s how the models.py can be updated:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy import func, cast, CheckConstraint\nfrom sqlalchemy.orm import validates\nfrom app.extensions.db import db\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\nclass Task(db.Model):\n    __tablename__ = "task"\n    \n    # Other columns...\n\n    parent_id = db.Column(\n        db.Integer, db.ForeignKey("task.id"), index=True, nullable=True\n    )\n\n    # Relationships\n    parent = db.relationship(\n        "Task", remote_side=[id], back_populates="children", lazy="select"\n    )\n    children = db.relationship(\n        "Task", back_populates="parent", lazy="select"\n    )\n\n    \n\n\n    @staticmethod\n    def _validate_no_circular_references(new_parent_id):\n        """\n        Validates that there are no circular references in the task hierarchy.\n\n        Args:\n            new_parent_id (int): The new parent ID to validate.\n\n        Raises:\n            ValueError: If a circular reference is detected.\n        """\n        visited = set()\n        current_parent_id = new_parent_id\n\n        logger.info(f"Validating circular references for parent ID: {new_parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error(\n                    f"Circular reference detected: Parent ID {current_parent_id} already visited."\n                )\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            # Fetch the next parent_id in the hierarchy\n            parent = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not parent:\n                break  # Exit if no parent is found\n            current_parent_id = parent.parent_id\n\n        logger.info("No circular reference detected.")\n\n    @validates(\'parent_id\', \'task_type\')\n    def validate_task_changes(self, key, value):\n        """\n        Validates changes to \'parent_id\' and \'task_type\'.\n        Ensures hierarchy validity and checks for circular references.\n        """\n        logger.debug(f"Validating {key} change for Task {self.id}: {value}")\n\n        if key == \'parent_id\':\n            # Log changes to parent_id\n            if self.id and value != self.parent_id:\n                logger.info(f"Task {self.id}: Updating \'parent_id\' from {self.parent_id} to {value}")\n\n            # Prevent a task from being its own parent\n            if value and value == self.id:\n                logger.error("A task cannot be its own parent.")\n                raise ValueError("A task cannot be its own parent.")\n\n            # Check for circular references\n            if value:\n                Task.check_circular_reference(self.id, value)\n\n        elif key == \'task_type\':\n            # Log changes to task_type\n            if self.id and value != self.task_type:\n                logger.info(f"Task {self.id}: Updating \'task_type\' from {self.task_type} to {value}")\n\n        # Check hierarchy rules without triggering further validation\n        if key in [\'parent_id\', \'task_type\']:\n            self._validate_hierarchy_change(key, value)\n\n        logger.info(f"Validation passed for {key}: {value}")\n        return value\n\n    def _validate_hierarchy_change(self, key, value):\n        """\n        Validates hierarchy rules for the task based on `task_type` and `parent_id`.\n        """\n        if key == \'parent_id\' and value:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=value).first()\n            if not parent_task:\n                raise ValueError("Parent task does not exist.")\n\n            logger.debug(f"Validating hierarchy: Task {self.id}, Parent Type: {parent_task.task_type}")\n            if self.task_type == "User Story" and parent_task.task_type != "Epic":\n                raise ValueError("User Stories must have an Epic as a parent.")\n            if self.task_type == "Subtask" and parent_task.task_type != "User Story":\n                raise ValueError("Subtasks must have a User Story as a parent.")\n\n        elif key == \'task_type\' and self.parent_id:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=self.parent_id).first()\n            if parent_task:\n                logger.debug(f"Validating hierarchy: Task Type: {value}, Parent Type: {parent_task.task_type}")\n                if value == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError("User Stories must have an Epic as a parent.")\n                if value == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError("Subtasks must have a User Story as a parent.")\n\n        logger.info(f"Hierarchy validation passed for Task {self.id if self.id else \'New Task\'}.")\n\n    @staticmethod\n    def check_circular_reference(task_id, parent_id):\n        """\n        Iteratively checks for circular references in the task hierarchy.\n        Prevents stack overflow on deep hierarchies.\n        """\n        visited = set()\n        current_parent_id = parent_id\n\n        logger.info(f"Checking circular reference for Task {task_id} with Parent ID: {parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error("Circular reference detected!")\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            if current_parent_id == task_id:\n                logger.error("A task cannot be its own ancestor.")\n                raise ValueError("A task cannot be its own ancestor.")\n\n            # Fetch the next parent_id in the hierarchy\n            task = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not task:\n                break\n            current_parent_id = task.parent_id\n\n        logger.info("Circular reference check passed.")\n```\nKey Enhancements:\n\t1.\tlog_and_validate_parent_id_change:\n\t•\tLogs the old and new parent_id whenever it changes.\n\t•\tEnsures no circular references are introduced.\n\t2.\t_validate_no_circular_references:\n\t•\tValidates the parent_id field to prevent circular dependencies.\n\t•\tLogs progress and raises detailed errors if violations occur.\n\t3.\tlog_and_validate_task_type_change:\n\t•\tLogs changes to task_type with the old and new values.\n\t•\tRevalidates hierarchy rules when task_type changes.\n\t4.\tDetailed Logging for Circular Reference Validation:\n\t•\t_validate_no_circular_references and check_circular_reference methods log every step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t•\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:44:08.340041', 'updated_at': '2025-01-16T19:22:36.219710'}, {'id': 132, 'name': 'Step 1: Update tasks_table_interactions.js', 'description': '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the map for efficient parent-child relationship lookups instead of DOM traversal.\n\n```\nexport const TaskManager = {\n    init: function (csrfToken) {\n        this.csrfToken = csrfToken;\n        this.initTaskParentMap(); // Initialize the map\n        this.initDragAndDrop(); // Initialize drag-and-drop functionality\n    },\n\n    // Initialize a global map for task relationships\n    taskParentMap: new Map(),\n\n    // Build the taskParentMap from the DOM\n    initTaskParentMap: function () {\n        console.log("Initializing Task Parent Map...");\n        const rows = document.querySelectorAll("tr[data-task-id]");\n\n        rows.forEach((row) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = parseInt(row.dataset.parentId, 10) || null;\n            this.taskParentMap.set(taskId, parentId);\n        });\n\n        console.log("Task Parent Map initialized:", Array.from(this.taskParentMap.entries()));\n    },\n\n    // Update the map dynamically after drag-and-drop\n    updateTaskParentMap: function (taskId, parentId) {\n        console.log(`Updating Task Parent Map: Task ${taskId} -> Parent ${parentId}`);\n        this.taskParentMap.set(taskId, parentId);\n    },\n\n    initDragAndDrop: function () {\n        if (window.isDragAndDropInitialized) {\n            console.log("Drag-and-drop is already initialized.");\n            return;\n        }\n\n        console.log("Initializing drag-and-drop within TaskManager...");\n\n        const tableBody = document.querySelector("tbody");\n        if (!tableBody) {\n            console.warn("Task table body not found for drag-and-drop initialization");\n            return;\n        }\n\n        // Initialize Sortable.js for drag-and-drop functionality\n        Sortable.create(tableBody, {\n            handle: ".task-row", // Only draggable via `.task-row` elements\n            animation: 150, // Smooth animation\n            filter: ".task-open-link", // Prevent dragging on task links\n            preventOnFilter: true, // Prevent drag if filtered element is clicked\n            onEnd: async (event) => {\n                try {\n                    console.log("Drag-and-drop operation started...");\n                    const rows = Array.from(event.from.querySelectorAll(".task-row"));\n                    const reorderedTasks = [];\n\n                    rows.forEach((row, index) => {\n                        const taskId = parseInt(row.dataset.taskId, 10);\n                        let parentId = null;\n\n                        // Get the parent ID from the map or fallback to the dataset\n                        if (row.classList.contains("subtask-row")) {\n                            const parentRow = row.previousElementSibling;\n                            parentId = parentRow\n                                ? parseInt(parentRow.dataset.taskId, 10)\n                                : this.taskParentMap.get(taskId) || null;\n                        }\n\n                        // Update the taskParentMap dynamically\n                        this.updateTaskParentMap(taskId, parentId);\n\n                        reorderedTasks.push({\n                            id: taskId,\n                            sort_order: index + 1,\n                            parent_id: parentId,\n                        });\n                    });\n\n                    console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n                    console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n                    // Send the payload to the backend\n                    const response = await fetch("/tasks/reorder_subtasks", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                            "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n                        },\n                        body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n                    });\n\n                    if (!response.ok) {\n                        const errorData = await response.json();\n                        console.error("Error reordering tasks:", errorData);\n                        alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n                        return;\n                    }\n\n                    const data = await response.json();\n                    console.log("Task reordering successful:", data);\n\n                } catch (error) {\n                    console.error("Error during drag-and-drop operation:", error);\n                    alert("An unexpected error occurred while reordering tasks.");\n                }\n            },\n        });\n\n        window.isDragAndDropInitialized = true;\n        console.log("Drag-and-drop initialized successfully.");\n    },\n};\n```\n\nKey Updates:\n\t1.\tPrecomputed Map (taskParentMap):\n\t•\tThe initTaskParentMap function initializes the map by iterating over DOM elements and mapping each task’s ID to its parent ID.\n\t•\tThe updateTaskParentMap dynamically updates the map when tasks are reordered.\n\t2.\tEfficient Parent Lookup:\n\t•\tThe parentId is derived from the precomputed map rather than DOM traversal.\n\t3.\tBackend Payload:\n\t•\tA structured payload (reorderedTasks) is sent to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t•\tCSRF protection is ensured by passing the token to the request headers.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:44:08.338301', 'updated_at': '2025-02-06T21:59:17.417466'}, {'id': 134, 'name': 'Step 2: Update the Backend in routes.py', 'description': 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\nPlan for step 2:\n\t1.\tVerify the payload structure:\n\t•\tEnsure that the payload includes all necessary fields (id, sort_order, parent_id) for each task.\n\t•\tValidate that the parent-child relationships in the precomputed map (taskParentMap) are reflected correctly in the payload.\n\t2.\tSubmit the payload to the backend:\n\t•\tEnhance the fetch request in the onEnd function of initDragAndDrop to log detailed submission data.\n\t•\tConfirm the payload integrity in the browser console before submission.\n\t3.\tUpdate backend logging:\n\t•\tAdd logging to /reorder_subtasks in routes.py to confirm receipt of the correct payload and process parent-child updates.\n\t•\tLog before and after database updates for better debugging.\n\n-----\nUpdated tasks_table_interactions.js\n\nReplace this section:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    let parentId = null;\n```\nWith:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    const parentId = this.taskParentMap.get(taskId) || null;\n```\nThe this.taskParentMap provides a precomputed and dynamic mapping of taskId to parentId. By using this map, we avoid relying on DOM traversal logic (row.closest or row.previousElementSibling) during drag-and-drop operations, which can sometimes be unreliable or cumbersome.\n\nFull Revised onEnd section:\n```\nonEnd: async (event) => {\n    try {\n        console.log("Drag-and-drop operation started...");\n        const rows = Array.from(event.from.querySelectorAll(".task-row"));\n        const reorderedTasks = [];\n\n        rows.forEach((row, index) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = this.taskParentMap.get(taskId) || null;\n\n            // Update the taskParentMap dynamically\n            this.updateTaskParentMap(taskId, parentId);\n\n            reorderedTasks.push({\n                id: taskId,\n                sort_order: index + 1,\n                parent_id: parentId,\n            });\n        });\n\n        console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n        console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n        // Send the payload to the backend\n        const response = await fetch("/tasks/reorder_subtasks", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n            },\n            body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error("Error reordering tasks:", errorData);\n            alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n            return;\n        }\n\n        const data = await response.json();\n        console.log("Task reordering successful:", data);\n\n    } catch (error) {\n        console.error("Error during drag-and-drop operation:", error);\n        alert("An unexpected error occurred while reordering tasks.");\n    }\n}\n```\n---------------------------------\nEnsure updates include:\n\t•\tBetter Logging: Adding logs for key events such as database changes and validation results.\n\t•\tInput Validation: Ensure all required fields (id, sort_order, parent_id) exist in the payload.\n\t•\tPost-Commit Validation: Confirm database updates after the commit.\n\t•\tImproved Error Handling: Include specific error messages and consistent rollback mechanisms.\n\nBelow is the revised reorder_subtasks route with descriptive comments for each section:\n```\n@bp.route("/reorder_subtasks", methods=["POST"])\ndef reorder_subtasks():\n    """\n    Reorder subtasks globally or reassign them to a different parent.\n\n    Steps:\n    - Parse and validate input from the frontend.\n    - Update parent-child relationships and sort order in the database.\n    - Commit changes and return a success response.\n    - Handle errors gracefully and provide detailed logs for debugging.\n    """\n    logger.info("Entering reorder_subtasks route...")\n    logger.info(f"Received payload for reordering tasks: {request.json}")\n\n    try:\n        # Step 1: Parse input\n        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered\n        ordered_tasks = request.json.get("ordered_tasks", [])\n\n        logger.debug(f"Parsed parent_id: {parent_id}")\n        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")\n\n        # Step 2: Validate input\n        if not isinstance(ordered_tasks, list) or not all(\n            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task\n            for task in ordered_tasks\n        ):\n            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")\n            return jsonify({\n                "error": "Invalid input format for \'ordered_tasks\'. Each task must include \'id\', \'sort_order\', and \'parent_id\'."\n            }), 400\n\n        # Step 3: Validate parent task (if applicable)\n        if parent_id is not None:\n            parent_task = Task.query.get(parent_id)\n            if not parent_task:\n                logger.error(f"Parent task with ID {parent_id} not found.")\n                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400\n\n        logger.info("Input validation passed. Proceeding with task updates...")\n\n        # Step 4: Process updates for each subtask\n        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation\n\n        for task_data in ordered_tasks:\n            subtask_id = task_data["id"]\n            sort_order = task_data["sort_order"]\n            new_parent_id = task_data["parent_id"]\n\n            # Fetch the subtask from the database\n            subtask = Task.query.get(subtask_id)\n            if not subtask:\n                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")\n                continue\n\n            # Log and update parent_id if it changes\n            if new_parent_id is not None and new_parent_id != subtask.parent_id:\n                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")\n                subtask.parent_id = new_parent_id\n\n            # Update sort order\n            subtask.sort_order = sort_order\n            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")\n\n            # Add to the list of updated subtasks for validation\n            updated_subtasks.append(subtask)\n\n        # Step 5: Commit changes to the database\n        try:\n            db.session.commit()\n            logger.info(f"Subtasks reordered successfully: {[task[\'id\'] for task in ordered_tasks]}")\n        except Exception as e:\n            logger.error(f"Error committing changes to the database: {str(e)}")\n            db.session.rollback()\n            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500\n\n        # Step 6: Post-commit validation\n        for subtask in updated_subtasks:\n            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")\n            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")\n\n        # Step 7: Return success response\n        return jsonify({\n            "success": True,\n            "message": "Subtasks reordered successfully.",\n            "updated_subtasks": [subtask.id for subtask in updated_subtasks]\n        }), 200\n\n    except Exception as e:\n        # Step 8: Handle unexpected errors\n        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)\n        db.session.rollback()\n        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500\n```\nKey Changes and Descriptive Comments\n\t1.\tInput Parsing:\n\t•\tExtracts parent_id and ordered_tasks from the request payload.\n\t•\tLogs the parsed values for debugging.\n\t2.\tInput Validation:\n\t•\tEnsures ordered_tasks is a list of dictionaries with the required keys.\n\t•\tValidates parent_id if provided, ensuring the parent task exists in the database.\n\t3.\tUpdate Processing:\n\t•\tIterates through ordered_tasks, updating each task’s parent_id and sort_order.\n\t•\tLogs changes for each task.\n\t4.\tDatabase Commit:\n\t•\tCommits all updates in a single transaction.\n\t•\tLogs success or rolls back changes in case of an error.\n\t5.\tPost-Commit Validation:\n\t•\tVerifies that the parent_id and sort_order changes were successfully saved to the database.\n\t6.\tError Handling:\n\t•\tCaptures and logs exceptions during processing or committing.\n\t•\tProvides meaningful error messages to the frontend.\n\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:46:29.348853', 'updated_at': '2025-02-06T21:59:21.617065'}, {'id': 131, 'name': 'Step 5: Update utils.py', 'description': 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nChanges to Make:\n\t1.\tEnhance Task Filtering:\n\t•\tEnsure the filters handle parent-child relationships explicitly.\n\t•\tAdd options to include or exclude subtasks in queries.\n\t2.\tUtility Function for Debugging Parent-Child Relationships:\n\t•\tProvide a function to generate a map or list of parent-child relationships for debugging purposes.\n\t3.\tValidation Functions:\n\t•\tAdd a utility function to validate parent-child relationships and ensure no circular dependencies.\n\nUpdated utils.py Code:\n```\nimport logging\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import joinedload\nfrom app.extensions.db import db\nfrom app.tasks.models import Task\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\n\nclass TaskService:\n    @staticmethod\n    def filter_tasks(filters=None, include_subtasks=True, page=None, per_page=None):\n        """\n        Dynamically filters tasks with an option to include or exclude subtasks.\n\n        Args:\n            filters (dict): Filtering criteria.\n            include_subtasks (bool): Whether to include subtasks in the query.\n            page (int, optional): Page number for pagination.\n            per_page (int, optional): Items per page for pagination.\n\n        Returns:\n            Query or Pagination: A SQLAlchemy query object or paginated results.\n        """\n        query = Task.query.options(\n            db.joinedload(Task.project).joinedload(Project.contributors),\n            db.joinedload(Task.contributor),\n            db.joinedload(Task.children),\n        ).order_by(Task.sort_order)\n\n        if filters:\n            logger.debug(f"Applying filters: {filters}")\n\n            # Apply standard filters\n            if "is_archived" in filters:\n                query = query.filter(Task.is_archived == filters["is_archived"])\n            if "project_id" in filters:\n                query = query.filter(Task.project_id == filters["project_id"])\n            if "task_type" in filters:\n                if isinstance(filters["task_type"], list):\n                    query = query.filter(Task.task_type.in_(filters["task_type"]))\n                else:\n                    query = query.filter(Task.task_type == filters["task_type"])\n            if "completion_status" in filters:\n                completion_map = {"completed": True, "in_progress": False}\n                if filters["completion_status"] in completion_map:\n                    query = query.filter(Task.completed == completion_map[filters["completion_status"]])\n\n            # Optionally exclude subtasks\n            if not include_subtasks:\n                query = query.filter(Task.task_type != "Subtask")\n\n        logger.debug(f"Generated query: {query}")\n\n        # Pagination\n        if page and per_page:\n            return query.paginate(page=page, per_page=per_page, error_out=False)\n        return query\n\n    @staticmethod\n    def debug_parent_child_relationships(project_id=None):\n        """\n        Generates a debug map of parent-child relationships for all tasks.\n\n        Args:\n            project_id (int, optional): Restrict to tasks from a specific project.\n\n        Returns:\n            dict: A dictionary mapping parent IDs to their child task IDs.\n        """\n        query = Task.query\n        if project_id:\n            query = query.filter(Task.project_id == project_id)\n\n        tasks = query.options(\n            db.load_only(Task.id, Task.parent_id)\n        ).all()\n\n        relationship_map = {}\n        for task in tasks:\n            if task.parent_id not in relationship_map:\n                relationship_map[task.parent_id] = []\n            relationship_map[task.parent_id].append(task.id)\n\n        logger.debug(f"Parent-Child Relationship Map: {relationship_map}")\n        return relationship_map\n\n    @staticmethod\n    def validate_parent_child_relationships():\n        """\n        Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.\n\n        Raises:\n            ValueError: If invalid relationships are detected.\n        """\n        tasks = Task.query.options(db.joinedload(Task.parent)).all()\n\n        for task in tasks:\n            if task.parent_id:\n                parent_task = task.parent\n                if not parent_task:\n                    raise ValueError(f"Task {task.id} has an invalid parent ID {task.parent_id}.")\n\n                # Validate hierarchy rules\n                if task.task_type == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError(f"User Story {task.id} must have an Epic as its parent.")\n                if task.task_type == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError(f"Subtask {task.id} must have a User Story as its parent.")\n\n        logger.info("All parent-child relationships are valid.")\n\n    @staticmethod\n    def get_all_task_ids_with_parents():\n        """\n        Returns a flat list of tasks with their parent IDs for debugging.\n\n        Returns:\n            list: A list of tuples (task_id, parent_id).\n        """\n        tasks = Task.query.with_entities(Task.id, Task.parent_id).all()\n        logger.debug(f"Task IDs with Parent IDs: {tasks}")\n        return tasks\n```\n\n\nExplanation of Changes:\n\t1.\tfilter_tasks Enhancements:\n\t•\tAdded include_subtasks parameter to optionally exclude subtasks from the query.\n\t2.\tdebug_parent_child_relationships:\n\t•\tCreates a parent-child relationship map for debugging purposes.\n\t3.\tvalidate_parent_child_relationships:\n\t•\tIterates through all tasks to validate parent-child hierarchy and ensures no invalid relationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t•\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.091824', 'updated_at': '2025-01-16T19:22:36.236691'}, {'id': 135, 'name': 'Step 3: Update list.html', 'description': 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already includes everything needed. No required changes.\n\nHere´s the relevant section of list.html:\n\n```\n<tr id="task-{{ task.id }}"\n                class="task-row {% if task.task_type == \'Subtask\' %}subtask-row{% elif task.task_type == \'User Story\' %}user-story-row{% elif task.task_type == \'Epic\' %}epic-row{% endif %}"\n                style="background-color: \n                {% if task.task_type == \'Subtask\' %}\n                    rgba(200, 230, 255, 0.5); /* Light blue for Subtask */\n                {% elif task.task_type == \'User Story\' %}\n                    rgba(255, 255, 200, 0.5); /* Light yellow for User Story */\n                {% elif task.task_type == \'Epic\' %}\n                    rgba(255, 200, 200, 0.5); /* Light red for Epic */\n                {% else %}\n                    rgba(240, 240, 240, 1); /* Default light gray */\n                {% endif %};"\n                data-task-id="{{ task.id }}"\n                data-parent-id="{{ task.parent_id or \'\' }}"\n                data-level="{{ depth }}">\n                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>\n                <td>\n                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}\n                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}" aria-label="Toggle details for task {{ task.name }}">\n                        <i class="bi bi-chevron-right"></i>\n                    </button>\n                    {% endif %}\n                </td>\n                <td class="fw-medium fs-6 \n                {% if task.task_type == \'Epic\' %}\n                    epic-cell\n                {% elif task.task_type == \'User Story\' %}\n                    user-story-cell\n                {% elif task.task_type == \'Subtask\' %}\n                    subtask-cell\n                {% endif %}" \n                style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">\n                <span class="bi fs-6\n                {% if task.task_type == \'Epic\' %}\n                    bi-circle-fill\n                {% elif task.task_type == \'User Story\' %}\n                    bi-circle-half\n                {% elif task.task_type == \'Subtask\' %}\n                    bi-circle\n                {% endif %}">\n                </span>\n                {{ task.name }}\n                <small class="text-muted fw-light">\n                    (Parent-ID: {{ task.parent_id or \'None\' }})\n                </small>\n                <!-- Open Link -->\n                <a href="#" class="task-open-link" data-task-id="{{ task.id }}">\n                    <i class="bi bi-arrows-angle-expand" style="font-size: 0.8rem; color: white;"></i>\n                    Open\n                </a>\n            </td>\n                <td class="fw-light fs-6">\n                    <small class>\n                    LAC-{{ task.id }}\n                    </small>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light text-bg-secondary">\n                        {{ task.project if task.project else "Unknown Project" }}\n                    </span>\n                </td>\n                <td class="fs-6" data-contributor-column>{{ task.assigned_to if task.assigned_to else "Unassigned" }}</td>\n                <td class="fs-6">{{ task.story_points }}</td>\n                <td class="fs-6">\n                    <span class="badge rounded-pill fw-light text-bg-light">\n                        {{ task.task_type }}\n                    </span>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light {% if task.completed %}text-bg-success{% else %}text-bg-warning{% endif %}">\n                        {{ "Completed" if task.completed else "In Progress" }}\n                    </span>\n                </td>\n                <td>\n                    <!-- Delete Icon -->\n                    <button class="btn btn-dark btn-sm delete-task-btn" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .2rem; --bs-btn-font-size: .75rem;" data-task-id="{{ task.id }}" aria-label="Deletes task {{ task.id }}">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n            </tr>\n            {% for child in tasks if child.parent_id == task.id %}\n                {{ render_task(child, tasks, depth + 1) }}\n            {% endfor %}\n            {% endmacro %}\n            \n            <!-- Render top-level tasks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:46:29.349784', 'updated_at': '2025-01-16T19:22:36.238473'}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'description': 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitHub Login involves integrating OAuth 2.0, which both services support. The complexity depends on your app’s existing setup, frameworks, and experience with third-party authentication. Below is a breakdown:\n\nKey Steps for Implementing Google or GitHub Login\n\t1.\tSet Up OAuth Credentials:\n\t•\tRegister your application in the Google Cloud Console or GitHub Developer Settings.\n\t•\tObtain the client ID and client secret.\n\t2.\tInstall Required Libraries:\n\t•\tUse a library for OAuth (e.g., flask-oauthlib, python-social-auth, or authlib).\n\t•\tPopular frameworks like Flask and Django already have robust integrations for OAuth providers.\n\t3.\tBackend Configuration:\n\t•\tImplement an endpoint to handle the OAuth flow (/auth/login/google or /auth/login/github).\n\t•\tConfigure your app to send users to Google or GitHub’s authentication page.\n\t•\tHandle the OAuth callback to exchange the authorization code for an access token.\n\t•\tVerify the token and fetch user information (e.g., email, name).\n\t4.\tLink OAuth to User Registration:\n\t•\tOn successful login, create or retrieve a user in your database.\n\t•\tStore the user’s details like email, OAuth provider ID, and access token.\n\t5.\tFrontend Integration (if applicable):\n\t•\tAdd “Login with Google” or “Login with GitHub” buttons.\n\t•\tRedirect to your backend’s OAuth endpoint when clicked.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T12:15:54.291625', 'updated_at': '2025-01-16T19:22:36.239866'}, {'id': 62, 'name': 'Add OAuth integration for Google Login', 'description': 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-02-18T00:44:28.917671'}, {'id': 64, 'name': 'Setup project credentials for Google API', 'description': 'Generate client ID and secret from Google API Console for your application.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-02-18T00:44:45.802506'}, {'id': 67, 'name': 'Test Google OAuth flow', 'description': 'Verify the OAuth flow using test accounts and check the token exchange.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-02-18T00:44:43.790066'}, {'id': 65, 'name': 'Implement backend endpoints for Google OAuth', 'description': 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-02-18T00:44:41.932371'}, {'id': 63, 'name': 'Add OAuth integration for GitHub Login', 'description': 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.246358'}, {'id': 68, 'name': 'Register application in GitHub Developer Console', 'description': 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.247746'}, {'id': 69, 'name': 'Handle callback from GitHub', 'description': 'Implement the callback endpoint to process the authorization code from GitHub.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.248912'}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'description': 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 18, 'status': 'Not Started', 'created_at': '2025-01-07T19:53:50.085064', 'updated_at': '2025-01-16T19:22:36.250169'}, {'id': 100, 'name': '1.1 User Registration', 'description': 'As a user, I want to register with a username, email, and password so that I can create an account and access the system.\n\n**Acceptance Criteria:**\n\n•\tUser can input valid username, email, and password.\n•\tUsername and email must be unique.\n•\tErrors are displayed for invalid inputs or duplicate accounts.\n•\tPasswords must meet complexity requirements and be securely stored.\n•\tSuccessful registration redirects users to a login page.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:59:09.044667', 'updated_at': '2025-01-16T19:22:36.251812'}, {'id': 107, 'name': '1.1.1 Database Changes for User Registration', 'description': '1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.\n   CREATE TABLE public.users (\n       id SERIAL PRIMARY KEY,\n       username VARCHAR(50) UNIQUE NOT NULL,\n       email VARCHAR(100) UNIQUE NOT NULL,\n       password_hash VARCHAR(255) NOT NULL,\n       created_at TIMESTAMP DEFAULT NOW(),\n       updated_at TIMESTAMP DEFAULT NOW()\n);\n\n\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-11T11:36:20.238219'}, {'id': 108, 'name': '1.1.2 Backend API for Registration', 'description': '•\tCreate an endpoint POST /api/register:\n•\tValidate input fields.\n•\tHash the password using bcrypt or argon2.\n•\tInsert the user into the users table.\n•\tReturn success/failure responses.\ndddhfff\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:33.067643'}, {'id': 112, 'name': '1.2.2 Frontend Login Page', 'description': 'Develop a frontend form for user login with email and password inputs.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.683644'}, {'id': 109, 'name': '1.1.3 Create Frontend Registration Page', 'description': 'Develop a frontend form to collect user registration details.\n•\tAdd a form for username, email, and password inputs.\n•\tUse client-side validation (e.g., email format).\n•\tSend a POST request to /api/register.\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.684988'}, {'id': 110, 'name': '1.1.4 Unit Tests for Registration', 'description': 'Write unit tests for:\n\n•\tValid registration.\n•\tDuplicate username/email scenarios.\n•\tInvalid input handling.\nff', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.686902'}, {'id': 101, 'name': '1.2 User Login', 'description': 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n•\tUsers can log in with a valid email and password.\n•\tErrors are displayed for invalid credentials.\n•\tSuccessful login stores a session or JWT token.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:25:53.687936'}, {'id': 111, 'name': '1.2.1 Backend API for Login', 'description': 'Create POST /api/login endpoint to handle user login.\njjsjj', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.689096'}, {'id': 113, 'name': '1.2.3 Session Management', 'description': 'Implement secure session handling using cookies or JWT.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:20.968680'}, {'id': 114, 'name': '1.2.4 Unit Tests for Login', 'description': 'Write tests for successful and failed login attempts.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:22:36.265866'}, {'id': 106, 'name': 'Password Reset', 'description': 'As a user, I want to reset my password securely using email.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.267247'}, {'id': 128, 'name': 'Frontend Password Reset Page', 'description': 'Develop a page for users to enter a new password using a valid token.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.269158'}, {'id': 129, 'name': 'Testing Password Reset', 'description': 'Write tests for email delivery, token validation, and password updates.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.270849'}, {'id': 102, 'name': 'Logout', 'description': 'As a user, I want to log out so that I can end my session securely.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.272605'}, {'id': 117, 'name': 'Tests for Logout', 'description': 'Verify session invalidation and redirection to the login page.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.274575'}, {'id': 116, 'name': 'Frontend Logout Button', 'description': 'Add a logout button to the UI and handle session clearing.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-09T12:31:17.939784'}, {'id': 115, 'name': 'Backend API for Logout', 'description': 'Create POST /api/logout endpoint to invalidate user sessions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.277547'}, {'id': 61, 'name': 'Parent task assignment', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-01-04T22:31:45.205815', 'updated_at': '2025-02-18T06:41:37.538722'}, {'id': 45, 'name': 'Display Default Value in Dropdown', 'description': 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.280493'}, {'id': 50, 'name': 'Retrieve Current Parent Task', 'description': 'Retrieve the current parent task’s ID and name from the backend.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Completed', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-18T00:45:04.055333'}, {'id': 51, 'name': 'Set Default Value', 'description': 'Set the default value in the dropdown based on the retrieved data.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 45, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 1, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.283309'}, {'id': 46, 'name': 'Search for Parent Tasks', 'description': 'Allow users to search for tasks dynamically in the dropdown by typing.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.284882'}, {'id': 54, 'name': 'Test Partial Matching', 'description': 'Ensure the search results update in real-time as the user types.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:29.251047'}, {'id': 47, 'name': 'Handle Large Datasets Efficiently', 'description': 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:26:23.067490'}, {'id': 56, 'name': 'Paginate API Responses', 'description': 'Implement server-side filtering and pagination for large datasets.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:16.233517'}, {'id': 55, 'name': 'Enable Lazy Loading', 'description': 'Enable lazy loading or virtualization in Virtual Select.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:08.099271'}, {'id': 48, 'name': 'Select and Deselect Parent Tasks', 'description': 'Allow users to select a parent task or deselect by choosing "None."', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:25:59.651639'}, {'id': 57, 'name': 'Ensure None Option Availability', 'description': 'Add “None” as a selectable option and ensure it stays at the top of the list.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:51.310240'}, {'id': 58, 'name': 'Handle Selection Events', 'description': 'Implement event listeners to update the form’s state when the selection changes.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:43.569501'}, {'id': 49, 'name': 'Integrate Dropdown with Task Form', 'description': 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:25:36.133259'}, {'id': 59, 'name': 'Bind Dropdown to Form Field', 'description': 'Bind the dropdown to the form’s parent task field.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'In Progress', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-18T06:41:49.262443'}, {'id': 60, 'name': 'Test Form Submission', 'description': 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:28.367797'}, {'id': 41, 'name': 'Implement Searchable Dropdown', 'description': 'As a user, I want a searchable dropdown for parent task assignment.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Completed', 'created_at': '2025-01-03T09:14:28.285904', 'updated_at': '2025-02-11T08:25:07.992524'}, {'id': 52, 'name': 'Add Search Box to Dropdown', 'description': 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:01.469601'}]
2025-02-23 22:03:07,626 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-23 22:03:07,626 INFO: [cached since 2849s ago] {'param_1': 2}
2025-02-23 22:03:07,628 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-23 22:03:07,628 INFO: [cached since 2849s ago] {'param_1': 3}
2025-02-23 22:03:07,628 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-23 22:03:07,628 INFO: [cached since 2849s ago] {'param_1': 4}
2025-02-23 22:03:07,629 INFO: ROLLBACK
2025-02-23 22:03:07,629 INFO: 127.0.0.1 - - [23/Feb/2025 22:03:07] "GET /tasks/?page=1&is_archived=False HTTP/1.1" 200 -
2025-02-23 22:03:07,697 INFO: 127.0.0.1 - - [23/Feb/2025 22:03:07] "[36mGET /static/custom.css HTTP/1.1[0m" 304 -
2025-02-23 22:03:07,702 INFO: 127.0.0.1 - - [23/Feb/2025 22:03:07] "[36mGET /static/js/filters.js HTTP/1.1[0m" 304 -
2025-02-23 22:03:07,718 INFO: 127.0.0.1 - - [23/Feb/2025 22:03:07] "[36mGET /static/js/tasks_table_interactions.js HTTP/1.1[0m" 304 -
2025-02-23 22:03:07,718 INFO: 127.0.0.1 - - [23/Feb/2025 22:03:07] "[36mGET /static/js/modals.js HTTP/1.1[0m" 304 -
2025-02-23 22:03:07,793 INFO: 127.0.0.1 - - [23/Feb/2025 22:03:07] "[36mGET /static/images/background.svg HTTP/1.1[0m" 304 -
2025-02-23 22:03:07,923 INFO: 127.0.0.1 - - [23/Feb/2025 22:03:07] "[36mGET /static/favicon.ico HTTP/1.1[0m" 304 -
2025-02-23 22:03:11,271 INFO: Entering list_tasks route...
2025-02-23 22:03:11,271 DEBUG: Filters used: {'is_archived': False}
2025-02-23 22:03:11,273 DEBUG: Applying filters: {'is_archived': False}
2025-02-23 22:03:11,284 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-23 22:03:11,285 INFO: BEGIN (implicit)
2025-02-23 22:03:11,286 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-23 22:03:11,287 INFO: [cached since 2853s ago] {'param_1': 110, 'param_2': 0}
2025-02-23 22:03:11,313 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-23 22:03:11,313 INFO: [cached since 2852s ago] {}
2025-02-23 22:03:11,315 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-23 22:03:11,315 INFO: [cached since 2852s ago] {}
2025-02-23 22:03:11,315 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 22:03:11,315 INFO: [cached since 2852s ago] {}
2025-02-23 22:03:11,317 DEBUG: Tasks passed to template: [{'id': 283, 'name': 'fix update title', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T08:41:58.769700', 'updated_at': '2025-02-22T12:17:39.812683'}, {'id': 298, 'name': 'example user story with parent epic 297', 'description': '', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:41:01.907455', 'updated_at': '2025-02-23T02:20:38.256245'}, {'id': 285, 'name': 'add text truncation to project names in task list', 'description': 'kkkkkkkjjjjj\nlkajdlökjsdfölkjsdfölkjdf', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-23T19:50:03.193034'}, {'id': 264, 'name': 'close all / open all childtasks', 'description': 'ölkölklkhkk', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 7, 'status': 'Not Started', 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-02-19T22:47:17.024076'}, {'id': 276, 'name': 'add support for priority', 'description': 'ffasdlkjlkj\nljkkjlkj', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P0', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-22T18:03:14.125665'}, {'id': 270, 'name': 'the newest task', 'description': '', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:07:34.368035', 'updated_at': '2025-02-23T13:04:53.023952'}, {'id': 310, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-21T22:56:46.414917', 'updated_at': '2025-02-21T23:56:46.435450'}, {'id': 265, 'name': 'smooth transition for toggles', 'description': 'ffjjlkjljlkjlkj\nkjh', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-02-20T09:59:26.301212'}, {'id': 292, 'name': 'issue: assigning contributor does not work', 'description': '### **Summary of problem and solution**\n\nThe issue was that assigning a contributor to a task via the /tasks/<task_id>/assign_contributor API endpoint resulted in a **400 Bad Request** error. Upon investigation, the following problems were identified:\n\n1. **Missing CSRF Token:**\n- The request failed due to a missing CSRF token, as shown in the error message: *“Bad Request: The CSRF token is missing.”*\n- The frontend was not correctly including the CSRF token in the request headers.\n1. **JavaScript Error (Undefined CSRF Token Variable):**\n- The error *“ReferenceError: csrfToken is not defined”* indicated that the CSRF token was not being retrieved properly in the JavaScript code.\n1. **Incorrect Fetch Request Headers:**\n- The fetch request did not include the CSRF token under the correct key (X-CSRFToken).\n- The script attempted to send the request without properly extracting the CSRF token from the meta tag.\n\n### **Solution**\n\n1. **Include the CSRF Token in the JavaScript Code**\n\nThe CSRF token was retrieved from the meta tag and used in the request headers:\n\n```jsx\n// Retrieve CSRF token from meta tag\nconst csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\');\n```\n\nThis ensures that the CSRF token is correctly fetched and available in the JavaScript scope.\n\n1. **Modify the Fetch Request to Include CSRF Token**\n\nThe request to assign a contributor was updated to include the token:\n\n```jsx\nconst response = await fetch(`/tasks/${taskId}/assign_contributor`, {\n    method: "POST",\n    headers: { \n        "Content-Type": "application/json",\n        "X-CSRFToken": csrfToken  // Include CSRF token\n    },\n    body: JSON.stringify({ contributor_id: parseInt(contributorId, 10) }),\n});\n```\n\n- **Ensures the CSRF token is sent in the request headers** so that Flask-WTF does not reject the request.\n1. **Verify and Debug Network Requests**\n- The updated request headers were verified using **Chrome DevTools > Network tab** to ensure the X-CSRFToken was included.\n- The error messages disappeared, and the contributor assignment request **succeeded with a 200 OK response**.\n\n---\n\n### **Final Outcome**\n\n🚀 The issue was resolved, and contributors can now be assigned successfully to tasks without triggering a CSRF validation error.\n\n### **Key Learnings from This Session**\n\nThis debugging session covered several important aspects of **web development with Flask and JavaScript**, particularly related to **API requests, CSRF protection, debugging tools, and database interactions**. Here are the key takeaways:\n\n---\n\n### **1. CSRF Protection in API Requests**\n\n- **Issue:** The initial error was due to **a missing CSRF token** when making a `POST` request.\n- **Fix:** The solution was to **retrieve the CSRF token from a meta tag** in the HTML and include it in the request headers.\n- **Key Learning:** Flask-WTF requires CSRF tokens for form and API submissions to **prevent cross-site request forgery (CSRF) attacks**.✅ Always ensure that API requests include a valid CSRF token.\n\n---\n\n### **2. Debugging JavaScript Fetch Requests**\n\n- **Issue:** The JavaScript code was making a fetch request, but the variable `csrfToken` was not properly defined, causing a `ReferenceError`.\n- **Fix:** Declaring `csrfToken` at the beginning of the script:\n    \n    ```jsx\n    const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\');\n    ```\n    \n- **Key Learning:**✅ JavaScript variables must be defined before they are used.✅ Use browser **developer tools (DevTools) Network tab** to inspect headers, payloads, and responses when debugging API requests.\n\n---\n\n### **3. Structuring Flask Routes for Task Management**\n\n- **Issue:** The `assign_contributor` route was failing due to incorrect request payload validation.\n- **Fix:** Improved the route’s error handling and logging:\n    \n    ```python\n    @bp.route(\'/<int:task_id>/assign_contributor\', methods=[\'POST\'])\n    def assign_contributor(task_id):\n        try:\n            data = request.get_json()\n            contributor_id = int(data.get(\'contributor_id\', 0))\n            if not contributor_id:\n                return jsonify({\'error\': \'Valid Contributor ID is required\'}), 400\n    ```\n    \n- **Key Learning:**✅ Always validate incoming data in Flask routes to prevent type errors.✅ Use `request.get_json()` properly and handle missing or incorrect data gracefully.\n\n---\n\n### **4. Utilizing Browser DevTools for Debugging**\n\n- **Issue:** The fetch request was failing with a `400 Bad Request`, and the browser console showed `ReferenceError: csrfToken is not defined`.\n- **Fix:**\n    - Used **Network tab** to inspect the request payload and headers.\n    - Used **Console tab** to catch JavaScript errors early.\n- **Key Learning:**✅ DevTools is a **critical** tool for diagnosing network request issues.✅ Always **check console errors** before assuming it\'s a backend issue.\n\n---\n\n### **5. Database Queries and ORM Debugging**\n\n- **Issue:** Tasks were not being updated correctly, possibly due to missing commit statements.\n- **Fix:** Ensured that:was executed properly.\n    \n    ```python\n    task.contributor_id = contributor_id\n    db.session.commit()\n    ```\n    \n- **Key Learning:**✅ Always call `db.session.commit()` after making changes in SQLAlchemy.✅ Rollback transactions if an error occurs to avoid database inconsistency.\n\n---\n\n### **6. Handling Asynchronous JavaScript Logic**\n\n- **Issue:** The `assignContributor` function was executing before the page was fully loaded.\n- **Fix:** Wrapped it inside a function that ensures elements exist:\n    \n    ```\n    window.setupContributorAssignment = function () {\n        const assignButton = $("#assign-contributor-btn");\n        if (!assignButton.length) {\n            setTimeout(setupContributorAssignment, 500); // Retry in 500ms\n            return;\n        }\n    ```\n    \n- **Key Learning:**✅ Use `setTimeout` to **retry event binding** when elements are dynamically loaded.✅ Always **check if elements exist before attaching event handlers**.\n\n---\n\n### **7. Best Practices for Flask Logging & Error Handling**\n\n- **Issue:** Lack of clear logging when API calls failed.\n- **Fix:** Added better logging to track failures:\n    \n    ```python\n    logger.info(f"Assigning contributor to task ID {task_id}")\n    try:\n        # Process request...\n    except Exception as e:\n        logger.error(f"Error assigning contributor: {e}")\n    ```\n    \n- **Key Learning:**✅ Log **every major step** in API processing to simplify debugging.✅ Differentiate between `logger.info()`, `logger.warning()`, and `logger.error()` based on severity.\n\n---\n\n### **Final Takeaways**\n\n🚀 **Understanding CSRF protection** and **properly structuring API requests** is crucial for secure web applications.\n\n🔍 **Browser DevTools is invaluable** for diagnosing frontend issues, especially in JavaScript.\n\n🐍 **Flask requires proper request validation, database transactions, and logging** to maintain stability.\n\n⚡ **Asynchronous JavaScript must handle dynamic elements carefully** to avoid runtime errors.\n\nThis session reinforced best practices in **frontend-backend integration, debugging, and security**, making it a great learning experience! 🚀🔥', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:11:12.273779', 'updated_at': '2025-02-18T06:41:00.286143'}, {'id': 307, 'name': 'c', 'description': '', 'task_type': 'Subtask', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-20T16:53:38.393115', 'updated_at': '2025-02-22T18:00:51.058705'}, {'id': 295, 'name': 'issue: drag and drop errors', 'description': '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:22:54.461413', 'updated_at': '2025-02-23T13:16:54.269738'}, {'id': 284, 'name': 'add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 4, 'assigned_to': 'Fredrik', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-23T19:51:06.136664'}, {'id': 288, 'name': 'when trying to move subtask to another project, make sure a warning is displayed', 'description': 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be lost"\nOR\n\nIs it possible, and is it desireable to keep parent child relationships across projects?\nSo that a parent can be in one project but the child tasks can be in different projects?\n\nLets say \nParent epic is \n"Internationalisation"\nChild user stories are\n- Timezones\n- Language\n- Currency\n- Day, Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:54:36.297869', 'updated_at': '2025-02-23T13:17:14.262634'}, {'id': 296, 'name': 'issue: contributor is lost after updating task', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:26:43.881947', 'updated_at': '2025-02-11T15:37:31.011120'}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:17.786154', 'updated_at': '2025-02-23T11:30:04.684746'}, {'id': 321, 'name': 'untitled task', 'description': '', 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-02-22T15:24:59.683105', 'updated_at': '2025-02-22T15:28:18.664289'}, {'id': 315, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T13:06:56.470332', 'updated_at': '2025-02-22T14:06:56.476919'}, {'id': 280, 'name': 'logging (task and project history)', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 1, 'assigned_to': 'Alice', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:37:44.435112', 'updated_at': '2025-02-23T13:14:30.331668'}, {'id': 297, 'name': 'example parent epic', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:39:51.620509', 'updated_at': '2025-02-10T10:39:51.622712'}, {'id': 314, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T12:03:03.637804', 'updated_at': '2025-02-22T13:03:03.643803'}, {'id': 274, 'name': 'Add support for goals, initiatives, okr´s', 'description': 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n\nölkasdölkk', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P1', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:46:27.204912', 'updated_at': '2025-02-18T06:39:43.729310'}, {'id': 320, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T15:17:39.647261', 'updated_at': '2025-02-22T16:17:39.650332'}, {'id': 304, 'name': 'g', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-19T22:02:47.172900', 'updated_at': '2025-02-19T23:02:47.179933'}, {'id': 277, 'name': 'custom task workflow statuses', 'description': 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- Custom status\n-- Custom status\n- In Progress\n-- Custom status\n-- Custom status\n-- Custom status\n- Completed\n-- Custom status\n-- Custom status\n\n2. How can we track a task through different stages and save the sequence of events or stages the task has gone through?\nI´m thinking it could be good for mapping out processes, identifying bottlenecks and provide valuable insights while improving and streamlining workflows.\n- Stages\n- Contacts taken\n- Respons time \n- Time to action after responses\n- Dependencies\n\nNeed to be able to record every action related to this action.\nCommunication integrations\n- Slack\n- Email\n- Text messages\n- Phonecalls\n- Calendar events, meetings\n- Zoom, Google meet, Teams etc..\n\n\n2. Set custom statuses per project (can use tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:16:03.352588', 'updated_at': '2025-02-17T23:32:55.626822'}, {'id': 303, 'name': 't', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-19T19:05:00.401232', 'updated_at': '2025-02-19T20:05:00.406117'}, {'id': 293, 'name': 'click on title should copy the task title and id to clipboard', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:16:33.508209', 'updated_at': '2025-02-17T19:07:44.656573'}, {'id': 287, 'name': 'when moving a parent item to another project make sure the subtasks are moved as well', 'description': '', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:48:31.986870', 'updated_at': '2025-02-17T19:08:23.749538'}, {'id': 281, 'name': 'add high level plan', 'description': 'Add some sort of high level plan that aims to keep PM/PO´s on track and not get lost into the details of an overwhelminly large backlog', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:27:01.218606', 'updated_at': '2025-02-17T19:12:02.051244'}, {'id': 301, 'name': 'untitled task', 'description': '', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'In Progress', 'created_at': '2025-02-19T11:58:55.165343', 'updated_at': '2025-02-21T11:17:05.115762'}, {'id': 319, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T14:59:09.098097', 'updated_at': '2025-02-22T15:59:09.132640'}, {'id': 317, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T13:13:24.508779', 'updated_at': '2025-02-22T14:13:24.511517'}, {'id': 278, 'name': 'search feature for tasks list', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 5, 'project': 'Project Delta', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 4, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:03.369833', 'updated_at': '2025-02-18T00:42:29.470892'}, {'id': 289, 'name': 'issue: parent task is lost when updating task', 'description': '- Summary of the problem and solution\n    \n    **Problem: Parent Task Dropdown Was Not Being Set on Modal Open**\n    \n    The issue was that when opening a task modal, the **parent task dropdown** was not pre-populated with the correct parent task. However, interacting with the dropdown (e.g., clicking on it) would suddenly trigger it to be set correctly. This meant that the dropdown initialization was likely delayed or missing a step in the modal lifecycle.\n    \n    **Debugging Steps and Observations**\n    \n    1. **Task Details Were Fetched Correctly** ✅\n    - The task details, including parent_id, were being fetched from the API successfully.\n    1. **Parent Dropdown Initialization Issues** ❌\n    - The initializeParentDropdown() function was being called, but the dropdown was sometimes **not fully ready** when we tried to set the selected parent task.\n    1. **Clicking the Dropdown Triggered the Parent to Be Set** 🤔\n    - This hinted that the dropdown was not fully ready when setParentDropdown(task.parent_id) was initially called.\n    \n    **Final Solution**\n    \n    1. **Ensuring Dropdown Readiness Before Setting the Parent Task**\n    - We added explicit **delays and checks** to confirm that the dropdown was fully initialized before attempting to set the parent task.\n    \n    Specifically, we:\n    \n    - **Waited for the dropdown to appear in the DOM** using observeParentDropdown().\n    - **Initialized the dropdown** with initializeParentDropdown().\n    - **Waited explicitly for the dropdown to be fully ready** using waitForParentDropdownReady().\n    - **Added a final delay of 200ms** before calling setParentDropdown() to ensure stability.\n    1. **Modifying openTaskModal to Handle Parent Dropdown Setup**\n    - We ensured that initializeParentDropdown() was called **after fetching task details** and before setting the parent task.\n    1. **Confirming the Fix** 🎯\n    - After these fixes, the parent dropdown was **immediately populated** upon opening the modal, without requiring user interaction.\n    \n    **Key Learnings**\n    \n    ✅ **Dropdowns in modals need careful timing** – They might not be ready when you expect them to be.\n    \n    ✅ **Waiting for DOM updates is crucial** – Observing the element ensures it actually exists before interacting with it.\n    \n    ✅ **Explicit delays can prevent race conditions** – A small delay can sometimes resolve timing issues in UI interactions.\n    \n    **Final Result**\n    \n    ✅ The modal now **correctly loads and pre-selects the parent task** without extra clicks! 🎉🚀', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T08:56:25.273984', 'updated_at': '2025-02-23T12:51:53.922845'}, {'id': 279, 'name': 'github integration', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:38.238202', 'updated_at': '2025-02-23T13:23:18.557230'}, {'id': 300, 'name': 'new task', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-18T14:25:24.773401', 'updated_at': '2025-02-18T14:26:07.982932'}, {'id': 266, 'name': 'highlight the nested tasks', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-02-23T13:20:57.641732'}, {'id': 305, 'name': 'n', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-20T10:12:52.005313', 'updated_at': '2025-02-23T12:50:45.092951'}, {'id': 318, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 1, 'assigned_to': 'Alice', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T13:39:38.859364', 'updated_at': '2025-02-23T12:53:59.013279'}, {'id': 312, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 4, 'assigned_to': 'Fredrik', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T11:45:27.081419', 'updated_at': '2025-02-23T12:51:03.918932'}, {'id': 313, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 4, 'assigned_to': 'Fredrik', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T11:45:44.396106', 'updated_at': '2025-02-23T12:53:51.194125'}, {'id': 299, 'name': 'example sub task with parent user story 298', 'description': 'Test update 1\nTest update 2\nTest update 3', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 298, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:42:38.905700', 'updated_at': '2025-02-10T23:23:08.671464'}, {'id': 309, 'name': 'test task', 'description': 'This is a test task', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 1, 'assigned_to': 'Alice', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-21T21:19:17.563435', 'updated_at': '2025-02-23T02:40:16.275244'}, {'id': 286, 'name': 'add support for labels/tags', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:46:23.985620', 'updated_at': '2025-02-23T13:23:02.680582'}, {'id': 302, 'name': 'n', 'description': '', 'task_type': 'Subtask', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-19T18:15:01.931285', 'updated_at': '2025-02-20T07:20:56.647312'}, {'id': 269, 'name': 'fix styling for sweetalert', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-02-08T15:54:56.717846', 'updated_at': '2025-02-23T11:30:35.385752'}, {'id': 316, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T13:12:44.289461', 'updated_at': '2025-02-22T14:12:44.297036'}, {'id': 273, 'name': 'disable parent task selector in epics', 'description': 'and add text, Epic can´t have parent tasks', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:45:20.740910', 'updated_at': '2025-02-10T08:39:17.639890'}, {'id': 271, 'name': 'make sure dynamically added rows has the exact same styling and includes every element', 'description': 'Missing elements:\n- Open link\n- Default project\n- Project name should be inside a pill\n- Task type should be in a pill\n- Estimations should be 0, not N/A\n- Make sure font size is matching\n- status should have the dropdown inside a pill\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T00:21:07.108431', 'updated_at': '2025-02-23T11:30:25.428577'}, {'id': 267, 'name': 'improvements to toggles and nested tasks', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 2, 'assigned_to': 'Bob', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:29:12.464594', 'updated_at': '2025-02-23T11:03:53.247332'}, {'id': 311, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 3, 'assigned_to': 'Charlie', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-21T22:58:25.440044', 'updated_at': '2025-02-23T12:11:24.815974'}, {'id': 323, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-23T02:41:28.531955', 'updated_at': '2025-02-23T03:41:28.537448'}, {'id': 322, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 1, 'assigned_to': 'Alice', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T15:38:23.342262', 'updated_at': '2025-02-23T11:09:01.873512'}, {'id': 294, 'name': 'issue: task table filters not working', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:19:21.022598', 'updated_at': '2025-02-18T06:38:16.836257'}, {'id': 257, 'name': 'Update Task API Integration', 'description': "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-02-05T22:55:49.566819', 'updated_at': '2025-02-05T22:18:17.807154'}, {'id': 275, 'name': 'add sprints, cycles', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-18T12:08:36.665524'}, {'id': 290, 'name': 'issue: error when changing task type and', 'description': 'issue: error when changing task type and parent task before saving', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:00:03.417734', 'updated_at': '2025-02-10T09:15:09.284969'}, {'id': 291, 'name': 'add dropdowns in task list for changing: project, assigned to, estimate and task type (labels/tags)', 'description': '', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-02-18T06:40:24.609233'}, {'id': 306, 'name': 'ne', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-20T11:31:03.798672', 'updated_at': '2025-02-20T12:31:03.801989'}, {'id': 308, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-21T21:18:03.772575', 'updated_at': '2025-02-21T22:18:03.781548'}, {'id': 272, 'name': 'implement a markdown text editor like notion', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-02-10T08:28:39.669255'}, {'id': 136, 'name': 'Page scroll should stay in position when reloading', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-16T18:21:50.187247', 'updated_at': '2025-01-16T19:22:36.214901'}, {'id': 130, 'name': 'Implement the Map of Task Relationships solution for drag-and-drop', 'description': 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:41:28.093022', 'updated_at': '2025-02-18T06:41:19.891744'}, {'id': 133, 'name': 'Step 4: Enhance Logging in models.py', 'description': 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nupdating the Task model in the following ways:\n\n1.\tLog Changes to parent_id:\n\t•\tLog changes to parent_id during updates, including old and new values.\n\t2.\tValidate Hierarchy with Logging:\n\t•\tLog detailed messages when validating hierarchy changes, especially for circular dependency checks.\n\nHere’s how the models.py can be updated:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy import func, cast, CheckConstraint\nfrom sqlalchemy.orm import validates\nfrom app.extensions.db import db\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\nclass Task(db.Model):\n    __tablename__ = "task"\n    \n    # Other columns...\n\n    parent_id = db.Column(\n        db.Integer, db.ForeignKey("task.id"), index=True, nullable=True\n    )\n\n    # Relationships\n    parent = db.relationship(\n        "Task", remote_side=[id], back_populates="children", lazy="select"\n    )\n    children = db.relationship(\n        "Task", back_populates="parent", lazy="select"\n    )\n\n    \n\n\n    @staticmethod\n    def _validate_no_circular_references(new_parent_id):\n        """\n        Validates that there are no circular references in the task hierarchy.\n\n        Args:\n            new_parent_id (int): The new parent ID to validate.\n\n        Raises:\n            ValueError: If a circular reference is detected.\n        """\n        visited = set()\n        current_parent_id = new_parent_id\n\n        logger.info(f"Validating circular references for parent ID: {new_parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error(\n                    f"Circular reference detected: Parent ID {current_parent_id} already visited."\n                )\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            # Fetch the next parent_id in the hierarchy\n            parent = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not parent:\n                break  # Exit if no parent is found\n            current_parent_id = parent.parent_id\n\n        logger.info("No circular reference detected.")\n\n    @validates(\'parent_id\', \'task_type\')\n    def validate_task_changes(self, key, value):\n        """\n        Validates changes to \'parent_id\' and \'task_type\'.\n        Ensures hierarchy validity and checks for circular references.\n        """\n        logger.debug(f"Validating {key} change for Task {self.id}: {value}")\n\n        if key == \'parent_id\':\n            # Log changes to parent_id\n            if self.id and value != self.parent_id:\n                logger.info(f"Task {self.id}: Updating \'parent_id\' from {self.parent_id} to {value}")\n\n            # Prevent a task from being its own parent\n            if value and value == self.id:\n                logger.error("A task cannot be its own parent.")\n                raise ValueError("A task cannot be its own parent.")\n\n            # Check for circular references\n            if value:\n                Task.check_circular_reference(self.id, value)\n\n        elif key == \'task_type\':\n            # Log changes to task_type\n            if self.id and value != self.task_type:\n                logger.info(f"Task {self.id}: Updating \'task_type\' from {self.task_type} to {value}")\n\n        # Check hierarchy rules without triggering further validation\n        if key in [\'parent_id\', \'task_type\']:\n            self._validate_hierarchy_change(key, value)\n\n        logger.info(f"Validation passed for {key}: {value}")\n        return value\n\n    def _validate_hierarchy_change(self, key, value):\n        """\n        Validates hierarchy rules for the task based on `task_type` and `parent_id`.\n        """\n        if key == \'parent_id\' and value:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=value).first()\n            if not parent_task:\n                raise ValueError("Parent task does not exist.")\n\n            logger.debug(f"Validating hierarchy: Task {self.id}, Parent Type: {parent_task.task_type}")\n            if self.task_type == "User Story" and parent_task.task_type != "Epic":\n                raise ValueError("User Stories must have an Epic as a parent.")\n            if self.task_type == "Subtask" and parent_task.task_type != "User Story":\n                raise ValueError("Subtasks must have a User Story as a parent.")\n\n        elif key == \'task_type\' and self.parent_id:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=self.parent_id).first()\n            if parent_task:\n                logger.debug(f"Validating hierarchy: Task Type: {value}, Parent Type: {parent_task.task_type}")\n                if value == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError("User Stories must have an Epic as a parent.")\n                if value == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError("Subtasks must have a User Story as a parent.")\n\n        logger.info(f"Hierarchy validation passed for Task {self.id if self.id else \'New Task\'}.")\n\n    @staticmethod\n    def check_circular_reference(task_id, parent_id):\n        """\n        Iteratively checks for circular references in the task hierarchy.\n        Prevents stack overflow on deep hierarchies.\n        """\n        visited = set()\n        current_parent_id = parent_id\n\n        logger.info(f"Checking circular reference for Task {task_id} with Parent ID: {parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error("Circular reference detected!")\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            if current_parent_id == task_id:\n                logger.error("A task cannot be its own ancestor.")\n                raise ValueError("A task cannot be its own ancestor.")\n\n            # Fetch the next parent_id in the hierarchy\n            task = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not task:\n                break\n            current_parent_id = task.parent_id\n\n        logger.info("Circular reference check passed.")\n```\nKey Enhancements:\n\t1.\tlog_and_validate_parent_id_change:\n\t•\tLogs the old and new parent_id whenever it changes.\n\t•\tEnsures no circular references are introduced.\n\t2.\t_validate_no_circular_references:\n\t•\tValidates the parent_id field to prevent circular dependencies.\n\t•\tLogs progress and raises detailed errors if violations occur.\n\t3.\tlog_and_validate_task_type_change:\n\t•\tLogs changes to task_type with the old and new values.\n\t•\tRevalidates hierarchy rules when task_type changes.\n\t4.\tDetailed Logging for Circular Reference Validation:\n\t•\t_validate_no_circular_references and check_circular_reference methods log every step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t•\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:44:08.340041', 'updated_at': '2025-01-16T19:22:36.219710'}, {'id': 132, 'name': 'Step 1: Update tasks_table_interactions.js', 'description': '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the map for efficient parent-child relationship lookups instead of DOM traversal.\n\n```\nexport const TaskManager = {\n    init: function (csrfToken) {\n        this.csrfToken = csrfToken;\n        this.initTaskParentMap(); // Initialize the map\n        this.initDragAndDrop(); // Initialize drag-and-drop functionality\n    },\n\n    // Initialize a global map for task relationships\n    taskParentMap: new Map(),\n\n    // Build the taskParentMap from the DOM\n    initTaskParentMap: function () {\n        console.log("Initializing Task Parent Map...");\n        const rows = document.querySelectorAll("tr[data-task-id]");\n\n        rows.forEach((row) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = parseInt(row.dataset.parentId, 10) || null;\n            this.taskParentMap.set(taskId, parentId);\n        });\n\n        console.log("Task Parent Map initialized:", Array.from(this.taskParentMap.entries()));\n    },\n\n    // Update the map dynamically after drag-and-drop\n    updateTaskParentMap: function (taskId, parentId) {\n        console.log(`Updating Task Parent Map: Task ${taskId} -> Parent ${parentId}`);\n        this.taskParentMap.set(taskId, parentId);\n    },\n\n    initDragAndDrop: function () {\n        if (window.isDragAndDropInitialized) {\n            console.log("Drag-and-drop is already initialized.");\n            return;\n        }\n\n        console.log("Initializing drag-and-drop within TaskManager...");\n\n        const tableBody = document.querySelector("tbody");\n        if (!tableBody) {\n            console.warn("Task table body not found for drag-and-drop initialization");\n            return;\n        }\n\n        // Initialize Sortable.js for drag-and-drop functionality\n        Sortable.create(tableBody, {\n            handle: ".task-row", // Only draggable via `.task-row` elements\n            animation: 150, // Smooth animation\n            filter: ".task-open-link", // Prevent dragging on task links\n            preventOnFilter: true, // Prevent drag if filtered element is clicked\n            onEnd: async (event) => {\n                try {\n                    console.log("Drag-and-drop operation started...");\n                    const rows = Array.from(event.from.querySelectorAll(".task-row"));\n                    const reorderedTasks = [];\n\n                    rows.forEach((row, index) => {\n                        const taskId = parseInt(row.dataset.taskId, 10);\n                        let parentId = null;\n\n                        // Get the parent ID from the map or fallback to the dataset\n                        if (row.classList.contains("subtask-row")) {\n                            const parentRow = row.previousElementSibling;\n                            parentId = parentRow\n                                ? parseInt(parentRow.dataset.taskId, 10)\n                                : this.taskParentMap.get(taskId) || null;\n                        }\n\n                        // Update the taskParentMap dynamically\n                        this.updateTaskParentMap(taskId, parentId);\n\n                        reorderedTasks.push({\n                            id: taskId,\n                            sort_order: index + 1,\n                            parent_id: parentId,\n                        });\n                    });\n\n                    console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n                    console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n                    // Send the payload to the backend\n                    const response = await fetch("/tasks/reorder_subtasks", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                            "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n                        },\n                        body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n                    });\n\n                    if (!response.ok) {\n                        const errorData = await response.json();\n                        console.error("Error reordering tasks:", errorData);\n                        alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n                        return;\n                    }\n\n                    const data = await response.json();\n                    console.log("Task reordering successful:", data);\n\n                } catch (error) {\n                    console.error("Error during drag-and-drop operation:", error);\n                    alert("An unexpected error occurred while reordering tasks.");\n                }\n            },\n        });\n\n        window.isDragAndDropInitialized = true;\n        console.log("Drag-and-drop initialized successfully.");\n    },\n};\n```\n\nKey Updates:\n\t1.\tPrecomputed Map (taskParentMap):\n\t•\tThe initTaskParentMap function initializes the map by iterating over DOM elements and mapping each task’s ID to its parent ID.\n\t•\tThe updateTaskParentMap dynamically updates the map when tasks are reordered.\n\t2.\tEfficient Parent Lookup:\n\t•\tThe parentId is derived from the precomputed map rather than DOM traversal.\n\t3.\tBackend Payload:\n\t•\tA structured payload (reorderedTasks) is sent to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t•\tCSRF protection is ensured by passing the token to the request headers.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:44:08.338301', 'updated_at': '2025-02-06T21:59:17.417466'}, {'id': 134, 'name': 'Step 2: Update the Backend in routes.py', 'description': 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\nPlan for step 2:\n\t1.\tVerify the payload structure:\n\t•\tEnsure that the payload includes all necessary fields (id, sort_order, parent_id) for each task.\n\t•\tValidate that the parent-child relationships in the precomputed map (taskParentMap) are reflected correctly in the payload.\n\t2.\tSubmit the payload to the backend:\n\t•\tEnhance the fetch request in the onEnd function of initDragAndDrop to log detailed submission data.\n\t•\tConfirm the payload integrity in the browser console before submission.\n\t3.\tUpdate backend logging:\n\t•\tAdd logging to /reorder_subtasks in routes.py to confirm receipt of the correct payload and process parent-child updates.\n\t•\tLog before and after database updates for better debugging.\n\n-----\nUpdated tasks_table_interactions.js\n\nReplace this section:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    let parentId = null;\n```\nWith:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    const parentId = this.taskParentMap.get(taskId) || null;\n```\nThe this.taskParentMap provides a precomputed and dynamic mapping of taskId to parentId. By using this map, we avoid relying on DOM traversal logic (row.closest or row.previousElementSibling) during drag-and-drop operations, which can sometimes be unreliable or cumbersome.\n\nFull Revised onEnd section:\n```\nonEnd: async (event) => {\n    try {\n        console.log("Drag-and-drop operation started...");\n        const rows = Array.from(event.from.querySelectorAll(".task-row"));\n        const reorderedTasks = [];\n\n        rows.forEach((row, index) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = this.taskParentMap.get(taskId) || null;\n\n            // Update the taskParentMap dynamically\n            this.updateTaskParentMap(taskId, parentId);\n\n            reorderedTasks.push({\n                id: taskId,\n                sort_order: index + 1,\n                parent_id: parentId,\n            });\n        });\n\n        console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n        console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n        // Send the payload to the backend\n        const response = await fetch("/tasks/reorder_subtasks", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n            },\n            body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error("Error reordering tasks:", errorData);\n            alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n            return;\n        }\n\n        const data = await response.json();\n        console.log("Task reordering successful:", data);\n\n    } catch (error) {\n        console.error("Error during drag-and-drop operation:", error);\n        alert("An unexpected error occurred while reordering tasks.");\n    }\n}\n```\n---------------------------------\nEnsure updates include:\n\t•\tBetter Logging: Adding logs for key events such as database changes and validation results.\n\t•\tInput Validation: Ensure all required fields (id, sort_order, parent_id) exist in the payload.\n\t•\tPost-Commit Validation: Confirm database updates after the commit.\n\t•\tImproved Error Handling: Include specific error messages and consistent rollback mechanisms.\n\nBelow is the revised reorder_subtasks route with descriptive comments for each section:\n```\n@bp.route("/reorder_subtasks", methods=["POST"])\ndef reorder_subtasks():\n    """\n    Reorder subtasks globally or reassign them to a different parent.\n\n    Steps:\n    - Parse and validate input from the frontend.\n    - Update parent-child relationships and sort order in the database.\n    - Commit changes and return a success response.\n    - Handle errors gracefully and provide detailed logs for debugging.\n    """\n    logger.info("Entering reorder_subtasks route...")\n    logger.info(f"Received payload for reordering tasks: {request.json}")\n\n    try:\n        # Step 1: Parse input\n        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered\n        ordered_tasks = request.json.get("ordered_tasks", [])\n\n        logger.debug(f"Parsed parent_id: {parent_id}")\n        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")\n\n        # Step 2: Validate input\n        if not isinstance(ordered_tasks, list) or not all(\n            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task\n            for task in ordered_tasks\n        ):\n            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")\n            return jsonify({\n                "error": "Invalid input format for \'ordered_tasks\'. Each task must include \'id\', \'sort_order\', and \'parent_id\'."\n            }), 400\n\n        # Step 3: Validate parent task (if applicable)\n        if parent_id is not None:\n            parent_task = Task.query.get(parent_id)\n            if not parent_task:\n                logger.error(f"Parent task with ID {parent_id} not found.")\n                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400\n\n        logger.info("Input validation passed. Proceeding with task updates...")\n\n        # Step 4: Process updates for each subtask\n        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation\n\n        for task_data in ordered_tasks:\n            subtask_id = task_data["id"]\n            sort_order = task_data["sort_order"]\n            new_parent_id = task_data["parent_id"]\n\n            # Fetch the subtask from the database\n            subtask = Task.query.get(subtask_id)\n            if not subtask:\n                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")\n                continue\n\n            # Log and update parent_id if it changes\n            if new_parent_id is not None and new_parent_id != subtask.parent_id:\n                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")\n                subtask.parent_id = new_parent_id\n\n            # Update sort order\n            subtask.sort_order = sort_order\n            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")\n\n            # Add to the list of updated subtasks for validation\n            updated_subtasks.append(subtask)\n\n        # Step 5: Commit changes to the database\n        try:\n            db.session.commit()\n            logger.info(f"Subtasks reordered successfully: {[task[\'id\'] for task in ordered_tasks]}")\n        except Exception as e:\n            logger.error(f"Error committing changes to the database: {str(e)}")\n            db.session.rollback()\n            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500\n\n        # Step 6: Post-commit validation\n        for subtask in updated_subtasks:\n            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")\n            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")\n\n        # Step 7: Return success response\n        return jsonify({\n            "success": True,\n            "message": "Subtasks reordered successfully.",\n            "updated_subtasks": [subtask.id for subtask in updated_subtasks]\n        }), 200\n\n    except Exception as e:\n        # Step 8: Handle unexpected errors\n        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)\n        db.session.rollback()\n        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500\n```\nKey Changes and Descriptive Comments\n\t1.\tInput Parsing:\n\t•\tExtracts parent_id and ordered_tasks from the request payload.\n\t•\tLogs the parsed values for debugging.\n\t2.\tInput Validation:\n\t•\tEnsures ordered_tasks is a list of dictionaries with the required keys.\n\t•\tValidates parent_id if provided, ensuring the parent task exists in the database.\n\t3.\tUpdate Processing:\n\t•\tIterates through ordered_tasks, updating each task’s parent_id and sort_order.\n\t•\tLogs changes for each task.\n\t4.\tDatabase Commit:\n\t•\tCommits all updates in a single transaction.\n\t•\tLogs success or rolls back changes in case of an error.\n\t5.\tPost-Commit Validation:\n\t•\tVerifies that the parent_id and sort_order changes were successfully saved to the database.\n\t6.\tError Handling:\n\t•\tCaptures and logs exceptions during processing or committing.\n\t•\tProvides meaningful error messages to the frontend.\n\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:46:29.348853', 'updated_at': '2025-02-06T21:59:21.617065'}, {'id': 131, 'name': 'Step 5: Update utils.py', 'description': 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nChanges to Make:\n\t1.\tEnhance Task Filtering:\n\t•\tEnsure the filters handle parent-child relationships explicitly.\n\t•\tAdd options to include or exclude subtasks in queries.\n\t2.\tUtility Function for Debugging Parent-Child Relationships:\n\t•\tProvide a function to generate a map or list of parent-child relationships for debugging purposes.\n\t3.\tValidation Functions:\n\t•\tAdd a utility function to validate parent-child relationships and ensure no circular dependencies.\n\nUpdated utils.py Code:\n```\nimport logging\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import joinedload\nfrom app.extensions.db import db\nfrom app.tasks.models import Task\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\n\nclass TaskService:\n    @staticmethod\n    def filter_tasks(filters=None, include_subtasks=True, page=None, per_page=None):\n        """\n        Dynamically filters tasks with an option to include or exclude subtasks.\n\n        Args:\n            filters (dict): Filtering criteria.\n            include_subtasks (bool): Whether to include subtasks in the query.\n            page (int, optional): Page number for pagination.\n            per_page (int, optional): Items per page for pagination.\n\n        Returns:\n            Query or Pagination: A SQLAlchemy query object or paginated results.\n        """\n        query = Task.query.options(\n            db.joinedload(Task.project).joinedload(Project.contributors),\n            db.joinedload(Task.contributor),\n            db.joinedload(Task.children),\n        ).order_by(Task.sort_order)\n\n        if filters:\n            logger.debug(f"Applying filters: {filters}")\n\n            # Apply standard filters\n            if "is_archived" in filters:\n                query = query.filter(Task.is_archived == filters["is_archived"])\n            if "project_id" in filters:\n                query = query.filter(Task.project_id == filters["project_id"])\n            if "task_type" in filters:\n                if isinstance(filters["task_type"], list):\n                    query = query.filter(Task.task_type.in_(filters["task_type"]))\n                else:\n                    query = query.filter(Task.task_type == filters["task_type"])\n            if "completion_status" in filters:\n                completion_map = {"completed": True, "in_progress": False}\n                if filters["completion_status"] in completion_map:\n                    query = query.filter(Task.completed == completion_map[filters["completion_status"]])\n\n            # Optionally exclude subtasks\n            if not include_subtasks:\n                query = query.filter(Task.task_type != "Subtask")\n\n        logger.debug(f"Generated query: {query}")\n\n        # Pagination\n        if page and per_page:\n            return query.paginate(page=page, per_page=per_page, error_out=False)\n        return query\n\n    @staticmethod\n    def debug_parent_child_relationships(project_id=None):\n        """\n        Generates a debug map of parent-child relationships for all tasks.\n\n        Args:\n            project_id (int, optional): Restrict to tasks from a specific project.\n\n        Returns:\n            dict: A dictionary mapping parent IDs to their child task IDs.\n        """\n        query = Task.query\n        if project_id:\n            query = query.filter(Task.project_id == project_id)\n\n        tasks = query.options(\n            db.load_only(Task.id, Task.parent_id)\n        ).all()\n\n        relationship_map = {}\n        for task in tasks:\n            if task.parent_id not in relationship_map:\n                relationship_map[task.parent_id] = []\n            relationship_map[task.parent_id].append(task.id)\n\n        logger.debug(f"Parent-Child Relationship Map: {relationship_map}")\n        return relationship_map\n\n    @staticmethod\n    def validate_parent_child_relationships():\n        """\n        Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.\n\n        Raises:\n            ValueError: If invalid relationships are detected.\n        """\n        tasks = Task.query.options(db.joinedload(Task.parent)).all()\n\n        for task in tasks:\n            if task.parent_id:\n                parent_task = task.parent\n                if not parent_task:\n                    raise ValueError(f"Task {task.id} has an invalid parent ID {task.parent_id}.")\n\n                # Validate hierarchy rules\n                if task.task_type == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError(f"User Story {task.id} must have an Epic as its parent.")\n                if task.task_type == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError(f"Subtask {task.id} must have a User Story as its parent.")\n\n        logger.info("All parent-child relationships are valid.")\n\n    @staticmethod\n    def get_all_task_ids_with_parents():\n        """\n        Returns a flat list of tasks with their parent IDs for debugging.\n\n        Returns:\n            list: A list of tuples (task_id, parent_id).\n        """\n        tasks = Task.query.with_entities(Task.id, Task.parent_id).all()\n        logger.debug(f"Task IDs with Parent IDs: {tasks}")\n        return tasks\n```\n\n\nExplanation of Changes:\n\t1.\tfilter_tasks Enhancements:\n\t•\tAdded include_subtasks parameter to optionally exclude subtasks from the query.\n\t2.\tdebug_parent_child_relationships:\n\t•\tCreates a parent-child relationship map for debugging purposes.\n\t3.\tvalidate_parent_child_relationships:\n\t•\tIterates through all tasks to validate parent-child hierarchy and ensures no invalid relationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t•\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.091824', 'updated_at': '2025-01-16T19:22:36.236691'}, {'id': 135, 'name': 'Step 3: Update list.html', 'description': 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already includes everything needed. No required changes.\n\nHere´s the relevant section of list.html:\n\n```\n<tr id="task-{{ task.id }}"\n                class="task-row {% if task.task_type == \'Subtask\' %}subtask-row{% elif task.task_type == \'User Story\' %}user-story-row{% elif task.task_type == \'Epic\' %}epic-row{% endif %}"\n                style="background-color: \n                {% if task.task_type == \'Subtask\' %}\n                    rgba(200, 230, 255, 0.5); /* Light blue for Subtask */\n                {% elif task.task_type == \'User Story\' %}\n                    rgba(255, 255, 200, 0.5); /* Light yellow for User Story */\n                {% elif task.task_type == \'Epic\' %}\n                    rgba(255, 200, 200, 0.5); /* Light red for Epic */\n                {% else %}\n                    rgba(240, 240, 240, 1); /* Default light gray */\n                {% endif %};"\n                data-task-id="{{ task.id }}"\n                data-parent-id="{{ task.parent_id or \'\' }}"\n                data-level="{{ depth }}">\n                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>\n                <td>\n                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}\n                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}" aria-label="Toggle details for task {{ task.name }}">\n                        <i class="bi bi-chevron-right"></i>\n                    </button>\n                    {% endif %}\n                </td>\n                <td class="fw-medium fs-6 \n                {% if task.task_type == \'Epic\' %}\n                    epic-cell\n                {% elif task.task_type == \'User Story\' %}\n                    user-story-cell\n                {% elif task.task_type == \'Subtask\' %}\n                    subtask-cell\n                {% endif %}" \n                style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">\n                <span class="bi fs-6\n                {% if task.task_type == \'Epic\' %}\n                    bi-circle-fill\n                {% elif task.task_type == \'User Story\' %}\n                    bi-circle-half\n                {% elif task.task_type == \'Subtask\' %}\n                    bi-circle\n                {% endif %}">\n                </span>\n                {{ task.name }}\n                <small class="text-muted fw-light">\n                    (Parent-ID: {{ task.parent_id or \'None\' }})\n                </small>\n                <!-- Open Link -->\n                <a href="#" class="task-open-link" data-task-id="{{ task.id }}">\n                    <i class="bi bi-arrows-angle-expand" style="font-size: 0.8rem; color: white;"></i>\n                    Open\n                </a>\n            </td>\n                <td class="fw-light fs-6">\n                    <small class>\n                    LAC-{{ task.id }}\n                    </small>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light text-bg-secondary">\n                        {{ task.project if task.project else "Unknown Project" }}\n                    </span>\n                </td>\n                <td class="fs-6" data-contributor-column>{{ task.assigned_to if task.assigned_to else "Unassigned" }}</td>\n                <td class="fs-6">{{ task.story_points }}</td>\n                <td class="fs-6">\n                    <span class="badge rounded-pill fw-light text-bg-light">\n                        {{ task.task_type }}\n                    </span>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light {% if task.completed %}text-bg-success{% else %}text-bg-warning{% endif %}">\n                        {{ "Completed" if task.completed else "In Progress" }}\n                    </span>\n                </td>\n                <td>\n                    <!-- Delete Icon -->\n                    <button class="btn btn-dark btn-sm delete-task-btn" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .2rem; --bs-btn-font-size: .75rem;" data-task-id="{{ task.id }}" aria-label="Deletes task {{ task.id }}">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n            </tr>\n            {% for child in tasks if child.parent_id == task.id %}\n                {{ render_task(child, tasks, depth + 1) }}\n            {% endfor %}\n            {% endmacro %}\n            \n            <!-- Render top-level tasks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:46:29.349784', 'updated_at': '2025-01-16T19:22:36.238473'}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'description': 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitHub Login involves integrating OAuth 2.0, which both services support. The complexity depends on your app’s existing setup, frameworks, and experience with third-party authentication. Below is a breakdown:\n\nKey Steps for Implementing Google or GitHub Login\n\t1.\tSet Up OAuth Credentials:\n\t•\tRegister your application in the Google Cloud Console or GitHub Developer Settings.\n\t•\tObtain the client ID and client secret.\n\t2.\tInstall Required Libraries:\n\t•\tUse a library for OAuth (e.g., flask-oauthlib, python-social-auth, or authlib).\n\t•\tPopular frameworks like Flask and Django already have robust integrations for OAuth providers.\n\t3.\tBackend Configuration:\n\t•\tImplement an endpoint to handle the OAuth flow (/auth/login/google or /auth/login/github).\n\t•\tConfigure your app to send users to Google or GitHub’s authentication page.\n\t•\tHandle the OAuth callback to exchange the authorization code for an access token.\n\t•\tVerify the token and fetch user information (e.g., email, name).\n\t4.\tLink OAuth to User Registration:\n\t•\tOn successful login, create or retrieve a user in your database.\n\t•\tStore the user’s details like email, OAuth provider ID, and access token.\n\t5.\tFrontend Integration (if applicable):\n\t•\tAdd “Login with Google” or “Login with GitHub” buttons.\n\t•\tRedirect to your backend’s OAuth endpoint when clicked.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T12:15:54.291625', 'updated_at': '2025-01-16T19:22:36.239866'}, {'id': 62, 'name': 'Add OAuth integration for Google Login', 'description': 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-02-18T00:44:28.917671'}, {'id': 64, 'name': 'Setup project credentials for Google API', 'description': 'Generate client ID and secret from Google API Console for your application.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-02-18T00:44:45.802506'}, {'id': 67, 'name': 'Test Google OAuth flow', 'description': 'Verify the OAuth flow using test accounts and check the token exchange.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-02-18T00:44:43.790066'}, {'id': 65, 'name': 'Implement backend endpoints for Google OAuth', 'description': 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-02-18T00:44:41.932371'}, {'id': 63, 'name': 'Add OAuth integration for GitHub Login', 'description': 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.246358'}, {'id': 68, 'name': 'Register application in GitHub Developer Console', 'description': 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.247746'}, {'id': 69, 'name': 'Handle callback from GitHub', 'description': 'Implement the callback endpoint to process the authorization code from GitHub.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.248912'}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'description': 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 18, 'status': 'Not Started', 'created_at': '2025-01-07T19:53:50.085064', 'updated_at': '2025-01-16T19:22:36.250169'}, {'id': 100, 'name': '1.1 User Registration', 'description': 'As a user, I want to register with a username, email, and password so that I can create an account and access the system.\n\n**Acceptance Criteria:**\n\n•\tUser can input valid username, email, and password.\n•\tUsername and email must be unique.\n•\tErrors are displayed for invalid inputs or duplicate accounts.\n•\tPasswords must meet complexity requirements and be securely stored.\n•\tSuccessful registration redirects users to a login page.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:59:09.044667', 'updated_at': '2025-01-16T19:22:36.251812'}, {'id': 107, 'name': '1.1.1 Database Changes for User Registration', 'description': '1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.\n   CREATE TABLE public.users (\n       id SERIAL PRIMARY KEY,\n       username VARCHAR(50) UNIQUE NOT NULL,\n       email VARCHAR(100) UNIQUE NOT NULL,\n       password_hash VARCHAR(255) NOT NULL,\n       created_at TIMESTAMP DEFAULT NOW(),\n       updated_at TIMESTAMP DEFAULT NOW()\n);\n\n\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-11T11:36:20.238219'}, {'id': 108, 'name': '1.1.2 Backend API for Registration', 'description': '•\tCreate an endpoint POST /api/register:\n•\tValidate input fields.\n•\tHash the password using bcrypt or argon2.\n•\tInsert the user into the users table.\n•\tReturn success/failure responses.\ndddhfff\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:33.067643'}, {'id': 112, 'name': '1.2.2 Frontend Login Page', 'description': 'Develop a frontend form for user login with email and password inputs.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.683644'}, {'id': 109, 'name': '1.1.3 Create Frontend Registration Page', 'description': 'Develop a frontend form to collect user registration details.\n•\tAdd a form for username, email, and password inputs.\n•\tUse client-side validation (e.g., email format).\n•\tSend a POST request to /api/register.\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.684988'}, {'id': 110, 'name': '1.1.4 Unit Tests for Registration', 'description': 'Write unit tests for:\n\n•\tValid registration.\n•\tDuplicate username/email scenarios.\n•\tInvalid input handling.\nff', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.686902'}, {'id': 101, 'name': '1.2 User Login', 'description': 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n•\tUsers can log in with a valid email and password.\n•\tErrors are displayed for invalid credentials.\n•\tSuccessful login stores a session or JWT token.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:25:53.687936'}, {'id': 111, 'name': '1.2.1 Backend API for Login', 'description': 'Create POST /api/login endpoint to handle user login.\njjsjj', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.689096'}, {'id': 113, 'name': '1.2.3 Session Management', 'description': 'Implement secure session handling using cookies or JWT.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:20.968680'}, {'id': 114, 'name': '1.2.4 Unit Tests for Login', 'description': 'Write tests for successful and failed login attempts.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:22:36.265866'}, {'id': 106, 'name': 'Password Reset', 'description': 'As a user, I want to reset my password securely using email.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.267247'}, {'id': 128, 'name': 'Frontend Password Reset Page', 'description': 'Develop a page for users to enter a new password using a valid token.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.269158'}, {'id': 129, 'name': 'Testing Password Reset', 'description': 'Write tests for email delivery, token validation, and password updates.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.270849'}, {'id': 102, 'name': 'Logout', 'description': 'As a user, I want to log out so that I can end my session securely.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.272605'}, {'id': 117, 'name': 'Tests for Logout', 'description': 'Verify session invalidation and redirection to the login page.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.274575'}, {'id': 116, 'name': 'Frontend Logout Button', 'description': 'Add a logout button to the UI and handle session clearing.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-09T12:31:17.939784'}, {'id': 115, 'name': 'Backend API for Logout', 'description': 'Create POST /api/logout endpoint to invalidate user sessions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.277547'}, {'id': 61, 'name': 'Parent task assignment', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-01-04T22:31:45.205815', 'updated_at': '2025-02-18T06:41:37.538722'}, {'id': 45, 'name': 'Display Default Value in Dropdown', 'description': 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.280493'}, {'id': 50, 'name': 'Retrieve Current Parent Task', 'description': 'Retrieve the current parent task’s ID and name from the backend.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Completed', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-18T00:45:04.055333'}, {'id': 51, 'name': 'Set Default Value', 'description': 'Set the default value in the dropdown based on the retrieved data.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 45, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 1, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.283309'}, {'id': 46, 'name': 'Search for Parent Tasks', 'description': 'Allow users to search for tasks dynamically in the dropdown by typing.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.284882'}, {'id': 54, 'name': 'Test Partial Matching', 'description': 'Ensure the search results update in real-time as the user types.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:29.251047'}, {'id': 47, 'name': 'Handle Large Datasets Efficiently', 'description': 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:26:23.067490'}, {'id': 56, 'name': 'Paginate API Responses', 'description': 'Implement server-side filtering and pagination for large datasets.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:16.233517'}, {'id': 55, 'name': 'Enable Lazy Loading', 'description': 'Enable lazy loading or virtualization in Virtual Select.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:08.099271'}, {'id': 48, 'name': 'Select and Deselect Parent Tasks', 'description': 'Allow users to select a parent task or deselect by choosing "None."', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:25:59.651639'}, {'id': 57, 'name': 'Ensure None Option Availability', 'description': 'Add “None” as a selectable option and ensure it stays at the top of the list.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:51.310240'}, {'id': 58, 'name': 'Handle Selection Events', 'description': 'Implement event listeners to update the form’s state when the selection changes.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:43.569501'}, {'id': 49, 'name': 'Integrate Dropdown with Task Form', 'description': 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:25:36.133259'}, {'id': 59, 'name': 'Bind Dropdown to Form Field', 'description': 'Bind the dropdown to the form’s parent task field.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'In Progress', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-18T06:41:49.262443'}, {'id': 60, 'name': 'Test Form Submission', 'description': 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:28.367797'}, {'id': 41, 'name': 'Implement Searchable Dropdown', 'description': 'As a user, I want a searchable dropdown for parent task assignment.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Completed', 'created_at': '2025-01-03T09:14:28.285904', 'updated_at': '2025-02-11T08:25:07.992524'}, {'id': 52, 'name': 'Add Search Box to Dropdown', 'description': 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:01.469601'}]
2025-02-23 22:03:11,332 DEBUG: Task types: ['all', 'Epic', 'Subtask', 'User Story']
2025-02-23 22:03:11,332 DEBUG: Projects: [<Project Project Alpha (ID: 1)>, <Project Project Beta (ID: 2)>, <Project Project Gamma (ID: 3)>, <Project Project Theta (ID: 4)>, <Project Project Delta (ID: 5)>, <Project PMS - Feature Requests (ID: 7)>, <Project PMS - Backlog (ID: 6)>, <Project Miscellaneous (ID: 19)>]
2025-02-23 22:03:11,333 DEBUG: Tasks response: [{'id': 283, 'name': 'fix update title', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T08:41:58.769700', 'updated_at': '2025-02-22T12:17:39.812683'}, {'id': 298, 'name': 'example user story with parent epic 297', 'description': '', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:41:01.907455', 'updated_at': '2025-02-23T02:20:38.256245'}, {'id': 285, 'name': 'add text truncation to project names in task list', 'description': 'kkkkkkkjjjjj\nlkajdlökjsdfölkjsdfölkjdf', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-23T19:50:03.193034'}, {'id': 264, 'name': 'close all / open all childtasks', 'description': 'ölkölklkhkk', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 7, 'status': 'Not Started', 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-02-19T22:47:17.024076'}, {'id': 276, 'name': 'add support for priority', 'description': 'ffasdlkjlkj\nljkkjlkj', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P0', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-22T18:03:14.125665'}, {'id': 270, 'name': 'the newest task', 'description': '', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:07:34.368035', 'updated_at': '2025-02-23T13:04:53.023952'}, {'id': 310, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-21T22:56:46.414917', 'updated_at': '2025-02-21T23:56:46.435450'}, {'id': 265, 'name': 'smooth transition for toggles', 'description': 'ffjjlkjljlkjlkj\nkjh', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-02-20T09:59:26.301212'}, {'id': 292, 'name': 'issue: assigning contributor does not work', 'description': '### **Summary of problem and solution**\n\nThe issue was that assigning a contributor to a task via the /tasks/<task_id>/assign_contributor API endpoint resulted in a **400 Bad Request** error. Upon investigation, the following problems were identified:\n\n1. **Missing CSRF Token:**\n- The request failed due to a missing CSRF token, as shown in the error message: *“Bad Request: The CSRF token is missing.”*\n- The frontend was not correctly including the CSRF token in the request headers.\n1. **JavaScript Error (Undefined CSRF Token Variable):**\n- The error *“ReferenceError: csrfToken is not defined”* indicated that the CSRF token was not being retrieved properly in the JavaScript code.\n1. **Incorrect Fetch Request Headers:**\n- The fetch request did not include the CSRF token under the correct key (X-CSRFToken).\n- The script attempted to send the request without properly extracting the CSRF token from the meta tag.\n\n### **Solution**\n\n1. **Include the CSRF Token in the JavaScript Code**\n\nThe CSRF token was retrieved from the meta tag and used in the request headers:\n\n```jsx\n// Retrieve CSRF token from meta tag\nconst csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\');\n```\n\nThis ensures that the CSRF token is correctly fetched and available in the JavaScript scope.\n\n1. **Modify the Fetch Request to Include CSRF Token**\n\nThe request to assign a contributor was updated to include the token:\n\n```jsx\nconst response = await fetch(`/tasks/${taskId}/assign_contributor`, {\n    method: "POST",\n    headers: { \n        "Content-Type": "application/json",\n        "X-CSRFToken": csrfToken  // Include CSRF token\n    },\n    body: JSON.stringify({ contributor_id: parseInt(contributorId, 10) }),\n});\n```\n\n- **Ensures the CSRF token is sent in the request headers** so that Flask-WTF does not reject the request.\n1. **Verify and Debug Network Requests**\n- The updated request headers were verified using **Chrome DevTools > Network tab** to ensure the X-CSRFToken was included.\n- The error messages disappeared, and the contributor assignment request **succeeded with a 200 OK response**.\n\n---\n\n### **Final Outcome**\n\n🚀 The issue was resolved, and contributors can now be assigned successfully to tasks without triggering a CSRF validation error.\n\n### **Key Learnings from This Session**\n\nThis debugging session covered several important aspects of **web development with Flask and JavaScript**, particularly related to **API requests, CSRF protection, debugging tools, and database interactions**. Here are the key takeaways:\n\n---\n\n### **1. CSRF Protection in API Requests**\n\n- **Issue:** The initial error was due to **a missing CSRF token** when making a `POST` request.\n- **Fix:** The solution was to **retrieve the CSRF token from a meta tag** in the HTML and include it in the request headers.\n- **Key Learning:** Flask-WTF requires CSRF tokens for form and API submissions to **prevent cross-site request forgery (CSRF) attacks**.✅ Always ensure that API requests include a valid CSRF token.\n\n---\n\n### **2. Debugging JavaScript Fetch Requests**\n\n- **Issue:** The JavaScript code was making a fetch request, but the variable `csrfToken` was not properly defined, causing a `ReferenceError`.\n- **Fix:** Declaring `csrfToken` at the beginning of the script:\n    \n    ```jsx\n    const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\');\n    ```\n    \n- **Key Learning:**✅ JavaScript variables must be defined before they are used.✅ Use browser **developer tools (DevTools) Network tab** to inspect headers, payloads, and responses when debugging API requests.\n\n---\n\n### **3. Structuring Flask Routes for Task Management**\n\n- **Issue:** The `assign_contributor` route was failing due to incorrect request payload validation.\n- **Fix:** Improved the route’s error handling and logging:\n    \n    ```python\n    @bp.route(\'/<int:task_id>/assign_contributor\', methods=[\'POST\'])\n    def assign_contributor(task_id):\n        try:\n            data = request.get_json()\n            contributor_id = int(data.get(\'contributor_id\', 0))\n            if not contributor_id:\n                return jsonify({\'error\': \'Valid Contributor ID is required\'}), 400\n    ```\n    \n- **Key Learning:**✅ Always validate incoming data in Flask routes to prevent type errors.✅ Use `request.get_json()` properly and handle missing or incorrect data gracefully.\n\n---\n\n### **4. Utilizing Browser DevTools for Debugging**\n\n- **Issue:** The fetch request was failing with a `400 Bad Request`, and the browser console showed `ReferenceError: csrfToken is not defined`.\n- **Fix:**\n    - Used **Network tab** to inspect the request payload and headers.\n    - Used **Console tab** to catch JavaScript errors early.\n- **Key Learning:**✅ DevTools is a **critical** tool for diagnosing network request issues.✅ Always **check console errors** before assuming it\'s a backend issue.\n\n---\n\n### **5. Database Queries and ORM Debugging**\n\n- **Issue:** Tasks were not being updated correctly, possibly due to missing commit statements.\n- **Fix:** Ensured that:was executed properly.\n    \n    ```python\n    task.contributor_id = contributor_id\n    db.session.commit()\n    ```\n    \n- **Key Learning:**✅ Always call `db.session.commit()` after making changes in SQLAlchemy.✅ Rollback transactions if an error occurs to avoid database inconsistency.\n\n---\n\n### **6. Handling Asynchronous JavaScript Logic**\n\n- **Issue:** The `assignContributor` function was executing before the page was fully loaded.\n- **Fix:** Wrapped it inside a function that ensures elements exist:\n    \n    ```\n    window.setupContributorAssignment = function () {\n        const assignButton = $("#assign-contributor-btn");\n        if (!assignButton.length) {\n            setTimeout(setupContributorAssignment, 500); // Retry in 500ms\n            return;\n        }\n    ```\n    \n- **Key Learning:**✅ Use `setTimeout` to **retry event binding** when elements are dynamically loaded.✅ Always **check if elements exist before attaching event handlers**.\n\n---\n\n### **7. Best Practices for Flask Logging & Error Handling**\n\n- **Issue:** Lack of clear logging when API calls failed.\n- **Fix:** Added better logging to track failures:\n    \n    ```python\n    logger.info(f"Assigning contributor to task ID {task_id}")\n    try:\n        # Process request...\n    except Exception as e:\n        logger.error(f"Error assigning contributor: {e}")\n    ```\n    \n- **Key Learning:**✅ Log **every major step** in API processing to simplify debugging.✅ Differentiate between `logger.info()`, `logger.warning()`, and `logger.error()` based on severity.\n\n---\n\n### **Final Takeaways**\n\n🚀 **Understanding CSRF protection** and **properly structuring API requests** is crucial for secure web applications.\n\n🔍 **Browser DevTools is invaluable** for diagnosing frontend issues, especially in JavaScript.\n\n🐍 **Flask requires proper request validation, database transactions, and logging** to maintain stability.\n\n⚡ **Asynchronous JavaScript must handle dynamic elements carefully** to avoid runtime errors.\n\nThis session reinforced best practices in **frontend-backend integration, debugging, and security**, making it a great learning experience! 🚀🔥', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:11:12.273779', 'updated_at': '2025-02-18T06:41:00.286143'}, {'id': 307, 'name': 'c', 'description': '', 'task_type': 'Subtask', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-20T16:53:38.393115', 'updated_at': '2025-02-22T18:00:51.058705'}, {'id': 295, 'name': 'issue: drag and drop errors', 'description': '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:22:54.461413', 'updated_at': '2025-02-23T13:16:54.269738'}, {'id': 284, 'name': 'add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 4, 'assigned_to': 'Fredrik', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-23T19:51:06.136664'}, {'id': 288, 'name': 'when trying to move subtask to another project, make sure a warning is displayed', 'description': 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be lost"\nOR\n\nIs it possible, and is it desireable to keep parent child relationships across projects?\nSo that a parent can be in one project but the child tasks can be in different projects?\n\nLets say \nParent epic is \n"Internationalisation"\nChild user stories are\n- Timezones\n- Language\n- Currency\n- Day, Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:54:36.297869', 'updated_at': '2025-02-23T13:17:14.262634'}, {'id': 296, 'name': 'issue: contributor is lost after updating task', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:26:43.881947', 'updated_at': '2025-02-11T15:37:31.011120'}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:41:17.786154', 'updated_at': '2025-02-23T11:30:04.684746'}, {'id': 321, 'name': 'untitled task', 'description': '', 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-02-22T15:24:59.683105', 'updated_at': '2025-02-22T15:28:18.664289'}, {'id': 315, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T13:06:56.470332', 'updated_at': '2025-02-22T14:06:56.476919'}, {'id': 280, 'name': 'logging (task and project history)', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 1, 'assigned_to': 'Alice', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:37:44.435112', 'updated_at': '2025-02-23T13:14:30.331668'}, {'id': 297, 'name': 'example parent epic', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:39:51.620509', 'updated_at': '2025-02-10T10:39:51.622712'}, {'id': 314, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T12:03:03.637804', 'updated_at': '2025-02-22T13:03:03.643803'}, {'id': 274, 'name': 'Add support for goals, initiatives, okr´s', 'description': 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n\nölkasdölkk', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P1', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:46:27.204912', 'updated_at': '2025-02-18T06:39:43.729310'}, {'id': 320, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T15:17:39.647261', 'updated_at': '2025-02-22T16:17:39.650332'}, {'id': 304, 'name': 'g', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-19T22:02:47.172900', 'updated_at': '2025-02-19T23:02:47.179933'}, {'id': 277, 'name': 'custom task workflow statuses', 'description': 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- Custom status\n-- Custom status\n- In Progress\n-- Custom status\n-- Custom status\n-- Custom status\n- Completed\n-- Custom status\n-- Custom status\n\n2. How can we track a task through different stages and save the sequence of events or stages the task has gone through?\nI´m thinking it could be good for mapping out processes, identifying bottlenecks and provide valuable insights while improving and streamlining workflows.\n- Stages\n- Contacts taken\n- Respons time \n- Time to action after responses\n- Dependencies\n\nNeed to be able to record every action related to this action.\nCommunication integrations\n- Slack\n- Email\n- Text messages\n- Phonecalls\n- Calendar events, meetings\n- Zoom, Google meet, Teams etc..\n\n\n2. Set custom statuses per project (can use tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:16:03.352588', 'updated_at': '2025-02-17T23:32:55.626822'}, {'id': 303, 'name': 't', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-19T19:05:00.401232', 'updated_at': '2025-02-19T20:05:00.406117'}, {'id': 293, 'name': 'click on title should copy the task title and id to clipboard', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:16:33.508209', 'updated_at': '2025-02-17T19:07:44.656573'}, {'id': 287, 'name': 'when moving a parent item to another project make sure the subtasks are moved as well', 'description': '', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:48:31.986870', 'updated_at': '2025-02-17T19:08:23.749538'}, {'id': 281, 'name': 'add high level plan', 'description': 'Add some sort of high level plan that aims to keep PM/PO´s on track and not get lost into the details of an overwhelminly large backlog', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:27:01.218606', 'updated_at': '2025-02-17T19:12:02.051244'}, {'id': 301, 'name': 'untitled task', 'description': '', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'In Progress', 'created_at': '2025-02-19T11:58:55.165343', 'updated_at': '2025-02-21T11:17:05.115762'}, {'id': 319, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T14:59:09.098097', 'updated_at': '2025-02-22T15:59:09.132640'}, {'id': 317, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T13:13:24.508779', 'updated_at': '2025-02-22T14:13:24.511517'}, {'id': 278, 'name': 'search feature for tasks list', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 5, 'project': 'Project Delta', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 4, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:03.369833', 'updated_at': '2025-02-18T00:42:29.470892'}, {'id': 289, 'name': 'issue: parent task is lost when updating task', 'description': '- Summary of the problem and solution\n    \n    **Problem: Parent Task Dropdown Was Not Being Set on Modal Open**\n    \n    The issue was that when opening a task modal, the **parent task dropdown** was not pre-populated with the correct parent task. However, interacting with the dropdown (e.g., clicking on it) would suddenly trigger it to be set correctly. This meant that the dropdown initialization was likely delayed or missing a step in the modal lifecycle.\n    \n    **Debugging Steps and Observations**\n    \n    1. **Task Details Were Fetched Correctly** ✅\n    - The task details, including parent_id, were being fetched from the API successfully.\n    1. **Parent Dropdown Initialization Issues** ❌\n    - The initializeParentDropdown() function was being called, but the dropdown was sometimes **not fully ready** when we tried to set the selected parent task.\n    1. **Clicking the Dropdown Triggered the Parent to Be Set** 🤔\n    - This hinted that the dropdown was not fully ready when setParentDropdown(task.parent_id) was initially called.\n    \n    **Final Solution**\n    \n    1. **Ensuring Dropdown Readiness Before Setting the Parent Task**\n    - We added explicit **delays and checks** to confirm that the dropdown was fully initialized before attempting to set the parent task.\n    \n    Specifically, we:\n    \n    - **Waited for the dropdown to appear in the DOM** using observeParentDropdown().\n    - **Initialized the dropdown** with initializeParentDropdown().\n    - **Waited explicitly for the dropdown to be fully ready** using waitForParentDropdownReady().\n    - **Added a final delay of 200ms** before calling setParentDropdown() to ensure stability.\n    1. **Modifying openTaskModal to Handle Parent Dropdown Setup**\n    - We ensured that initializeParentDropdown() was called **after fetching task details** and before setting the parent task.\n    1. **Confirming the Fix** 🎯\n    - After these fixes, the parent dropdown was **immediately populated** upon opening the modal, without requiring user interaction.\n    \n    **Key Learnings**\n    \n    ✅ **Dropdowns in modals need careful timing** – They might not be ready when you expect them to be.\n    \n    ✅ **Waiting for DOM updates is crucial** – Observing the element ensures it actually exists before interacting with it.\n    \n    ✅ **Explicit delays can prevent race conditions** – A small delay can sometimes resolve timing issues in UI interactions.\n    \n    **Final Result**\n    \n    ✅ The modal now **correctly loads and pre-selects the parent task** without extra clicks! 🎉🚀', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T08:56:25.273984', 'updated_at': '2025-02-23T12:51:53.922845'}, {'id': 279, 'name': 'github integration', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T07:36:38.238202', 'updated_at': '2025-02-23T13:23:18.557230'}, {'id': 300, 'name': 'new task', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-18T14:25:24.773401', 'updated_at': '2025-02-18T14:26:07.982932'}, {'id': 266, 'name': 'highlight the nested tasks', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-02-23T13:20:57.641732'}, {'id': 305, 'name': 'n', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-20T10:12:52.005313', 'updated_at': '2025-02-23T12:50:45.092951'}, {'id': 318, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 1, 'assigned_to': 'Alice', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T13:39:38.859364', 'updated_at': '2025-02-23T12:53:59.013279'}, {'id': 312, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 4, 'assigned_to': 'Fredrik', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T11:45:27.081419', 'updated_at': '2025-02-23T12:51:03.918932'}, {'id': 313, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 4, 'assigned_to': 'Fredrik', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T11:45:44.396106', 'updated_at': '2025-02-23T12:53:51.194125'}, {'id': 299, 'name': 'example sub task with parent user story 298', 'description': 'Test update 1\nTest update 2\nTest update 3', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 298, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:42:38.905700', 'updated_at': '2025-02-10T23:23:08.671464'}, {'id': 309, 'name': 'test task', 'description': 'This is a test task', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 1, 'assigned_to': 'Alice', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-21T21:19:17.563435', 'updated_at': '2025-02-23T02:40:16.275244'}, {'id': 286, 'name': 'add support for labels/tags', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T08:46:23.985620', 'updated_at': '2025-02-23T13:23:02.680582'}, {'id': 302, 'name': 'n', 'description': '', 'task_type': 'Subtask', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-19T18:15:01.931285', 'updated_at': '2025-02-20T07:20:56.647312'}, {'id': 269, 'name': 'fix styling for sweetalert', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-02-08T15:54:56.717846', 'updated_at': '2025-02-23T11:30:35.385752'}, {'id': 316, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T13:12:44.289461', 'updated_at': '2025-02-22T14:12:44.297036'}, {'id': 273, 'name': 'disable parent task selector in epics', 'description': 'and add text, Epic can´t have parent tasks', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:45:20.740910', 'updated_at': '2025-02-10T08:39:17.639890'}, {'id': 271, 'name': 'make sure dynamically added rows has the exact same styling and includes every element', 'description': 'Missing elements:\n- Open link\n- Default project\n- Project name should be inside a pill\n- Task type should be in a pill\n- Estimations should be 0, not N/A\n- Make sure font size is matching\n- status should have the dropdown inside a pill\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T00:21:07.108431', 'updated_at': '2025-02-23T11:30:25.428577'}, {'id': 267, 'name': 'improvements to toggles and nested tasks', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 2, 'assigned_to': 'Bob', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-08T02:29:12.464594', 'updated_at': '2025-02-23T11:03:53.247332'}, {'id': 311, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 3, 'assigned_to': 'Charlie', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-21T22:58:25.440044', 'updated_at': '2025-02-23T12:11:24.815974'}, {'id': 323, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-23T02:41:28.531955', 'updated_at': '2025-02-23T03:41:28.537448'}, {'id': 322, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 1, 'assigned_to': 'Alice', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-22T15:38:23.342262', 'updated_at': '2025-02-23T11:09:01.873512'}, {'id': 294, 'name': 'issue: task table filters not working', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-02-10T09:19:21.022598', 'updated_at': '2025-02-18T06:38:16.836257'}, {'id': 257, 'name': 'Update Task API Integration', 'description': "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-02-05T22:55:49.566819', 'updated_at': '2025-02-05T22:18:17.807154'}, {'id': 275, 'name': 'add sprints, cycles', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-18T12:08:36.665524'}, {'id': 290, 'name': 'issue: error when changing task type and', 'description': 'issue: error when changing task type and parent task before saving', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:00:03.417734', 'updated_at': '2025-02-10T09:15:09.284969'}, {'id': 291, 'name': 'add dropdowns in task list for changing: project, assigned to, estimate and task type (labels/tags)', 'description': '', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-02-18T06:40:24.609233'}, {'id': 306, 'name': 'ne', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-20T11:31:03.798672', 'updated_at': '2025-02-20T12:31:03.801989'}, {'id': 308, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-21T21:18:03.772575', 'updated_at': '2025-02-21T22:18:03.781548'}, {'id': 272, 'name': 'implement a markdown text editor like notion', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-02-10T08:28:39.669255'}, {'id': 136, 'name': 'Page scroll should stay in position when reloading', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-16T18:21:50.187247', 'updated_at': '2025-01-16T19:22:36.214901'}, {'id': 130, 'name': 'Implement the Map of Task Relationships solution for drag-and-drop', 'description': 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:41:28.093022', 'updated_at': '2025-02-18T06:41:19.891744'}, {'id': 133, 'name': 'Step 4: Enhance Logging in models.py', 'description': 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nupdating the Task model in the following ways:\n\n1.\tLog Changes to parent_id:\n\t•\tLog changes to parent_id during updates, including old and new values.\n\t2.\tValidate Hierarchy with Logging:\n\t•\tLog detailed messages when validating hierarchy changes, especially for circular dependency checks.\n\nHere’s how the models.py can be updated:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy import func, cast, CheckConstraint\nfrom sqlalchemy.orm import validates\nfrom app.extensions.db import db\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\nclass Task(db.Model):\n    __tablename__ = "task"\n    \n    # Other columns...\n\n    parent_id = db.Column(\n        db.Integer, db.ForeignKey("task.id"), index=True, nullable=True\n    )\n\n    # Relationships\n    parent = db.relationship(\n        "Task", remote_side=[id], back_populates="children", lazy="select"\n    )\n    children = db.relationship(\n        "Task", back_populates="parent", lazy="select"\n    )\n\n    \n\n\n    @staticmethod\n    def _validate_no_circular_references(new_parent_id):\n        """\n        Validates that there are no circular references in the task hierarchy.\n\n        Args:\n            new_parent_id (int): The new parent ID to validate.\n\n        Raises:\n            ValueError: If a circular reference is detected.\n        """\n        visited = set()\n        current_parent_id = new_parent_id\n\n        logger.info(f"Validating circular references for parent ID: {new_parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error(\n                    f"Circular reference detected: Parent ID {current_parent_id} already visited."\n                )\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            # Fetch the next parent_id in the hierarchy\n            parent = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not parent:\n                break  # Exit if no parent is found\n            current_parent_id = parent.parent_id\n\n        logger.info("No circular reference detected.")\n\n    @validates(\'parent_id\', \'task_type\')\n    def validate_task_changes(self, key, value):\n        """\n        Validates changes to \'parent_id\' and \'task_type\'.\n        Ensures hierarchy validity and checks for circular references.\n        """\n        logger.debug(f"Validating {key} change for Task {self.id}: {value}")\n\n        if key == \'parent_id\':\n            # Log changes to parent_id\n            if self.id and value != self.parent_id:\n                logger.info(f"Task {self.id}: Updating \'parent_id\' from {self.parent_id} to {value}")\n\n            # Prevent a task from being its own parent\n            if value and value == self.id:\n                logger.error("A task cannot be its own parent.")\n                raise ValueError("A task cannot be its own parent.")\n\n            # Check for circular references\n            if value:\n                Task.check_circular_reference(self.id, value)\n\n        elif key == \'task_type\':\n            # Log changes to task_type\n            if self.id and value != self.task_type:\n                logger.info(f"Task {self.id}: Updating \'task_type\' from {self.task_type} to {value}")\n\n        # Check hierarchy rules without triggering further validation\n        if key in [\'parent_id\', \'task_type\']:\n            self._validate_hierarchy_change(key, value)\n\n        logger.info(f"Validation passed for {key}: {value}")\n        return value\n\n    def _validate_hierarchy_change(self, key, value):\n        """\n        Validates hierarchy rules for the task based on `task_type` and `parent_id`.\n        """\n        if key == \'parent_id\' and value:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=value).first()\n            if not parent_task:\n                raise ValueError("Parent task does not exist.")\n\n            logger.debug(f"Validating hierarchy: Task {self.id}, Parent Type: {parent_task.task_type}")\n            if self.task_type == "User Story" and parent_task.task_type != "Epic":\n                raise ValueError("User Stories must have an Epic as a parent.")\n            if self.task_type == "Subtask" and parent_task.task_type != "User Story":\n                raise ValueError("Subtasks must have a User Story as a parent.")\n\n        elif key == \'task_type\' and self.parent_id:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=self.parent_id).first()\n            if parent_task:\n                logger.debug(f"Validating hierarchy: Task Type: {value}, Parent Type: {parent_task.task_type}")\n                if value == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError("User Stories must have an Epic as a parent.")\n                if value == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError("Subtasks must have a User Story as a parent.")\n\n        logger.info(f"Hierarchy validation passed for Task {self.id if self.id else \'New Task\'}.")\n\n    @staticmethod\n    def check_circular_reference(task_id, parent_id):\n        """\n        Iteratively checks for circular references in the task hierarchy.\n        Prevents stack overflow on deep hierarchies.\n        """\n        visited = set()\n        current_parent_id = parent_id\n\n        logger.info(f"Checking circular reference for Task {task_id} with Parent ID: {parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error("Circular reference detected!")\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            if current_parent_id == task_id:\n                logger.error("A task cannot be its own ancestor.")\n                raise ValueError("A task cannot be its own ancestor.")\n\n            # Fetch the next parent_id in the hierarchy\n            task = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not task:\n                break\n            current_parent_id = task.parent_id\n\n        logger.info("Circular reference check passed.")\n```\nKey Enhancements:\n\t1.\tlog_and_validate_parent_id_change:\n\t•\tLogs the old and new parent_id whenever it changes.\n\t•\tEnsures no circular references are introduced.\n\t2.\t_validate_no_circular_references:\n\t•\tValidates the parent_id field to prevent circular dependencies.\n\t•\tLogs progress and raises detailed errors if violations occur.\n\t3.\tlog_and_validate_task_type_change:\n\t•\tLogs changes to task_type with the old and new values.\n\t•\tRevalidates hierarchy rules when task_type changes.\n\t4.\tDetailed Logging for Circular Reference Validation:\n\t•\t_validate_no_circular_references and check_circular_reference methods log every step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t•\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:44:08.340041', 'updated_at': '2025-01-16T19:22:36.219710'}, {'id': 132, 'name': 'Step 1: Update tasks_table_interactions.js', 'description': '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the map for efficient parent-child relationship lookups instead of DOM traversal.\n\n```\nexport const TaskManager = {\n    init: function (csrfToken) {\n        this.csrfToken = csrfToken;\n        this.initTaskParentMap(); // Initialize the map\n        this.initDragAndDrop(); // Initialize drag-and-drop functionality\n    },\n\n    // Initialize a global map for task relationships\n    taskParentMap: new Map(),\n\n    // Build the taskParentMap from the DOM\n    initTaskParentMap: function () {\n        console.log("Initializing Task Parent Map...");\n        const rows = document.querySelectorAll("tr[data-task-id]");\n\n        rows.forEach((row) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = parseInt(row.dataset.parentId, 10) || null;\n            this.taskParentMap.set(taskId, parentId);\n        });\n\n        console.log("Task Parent Map initialized:", Array.from(this.taskParentMap.entries()));\n    },\n\n    // Update the map dynamically after drag-and-drop\n    updateTaskParentMap: function (taskId, parentId) {\n        console.log(`Updating Task Parent Map: Task ${taskId} -> Parent ${parentId}`);\n        this.taskParentMap.set(taskId, parentId);\n    },\n\n    initDragAndDrop: function () {\n        if (window.isDragAndDropInitialized) {\n            console.log("Drag-and-drop is already initialized.");\n            return;\n        }\n\n        console.log("Initializing drag-and-drop within TaskManager...");\n\n        const tableBody = document.querySelector("tbody");\n        if (!tableBody) {\n            console.warn("Task table body not found for drag-and-drop initialization");\n            return;\n        }\n\n        // Initialize Sortable.js for drag-and-drop functionality\n        Sortable.create(tableBody, {\n            handle: ".task-row", // Only draggable via `.task-row` elements\n            animation: 150, // Smooth animation\n            filter: ".task-open-link", // Prevent dragging on task links\n            preventOnFilter: true, // Prevent drag if filtered element is clicked\n            onEnd: async (event) => {\n                try {\n                    console.log("Drag-and-drop operation started...");\n                    const rows = Array.from(event.from.querySelectorAll(".task-row"));\n                    const reorderedTasks = [];\n\n                    rows.forEach((row, index) => {\n                        const taskId = parseInt(row.dataset.taskId, 10);\n                        let parentId = null;\n\n                        // Get the parent ID from the map or fallback to the dataset\n                        if (row.classList.contains("subtask-row")) {\n                            const parentRow = row.previousElementSibling;\n                            parentId = parentRow\n                                ? parseInt(parentRow.dataset.taskId, 10)\n                                : this.taskParentMap.get(taskId) || null;\n                        }\n\n                        // Update the taskParentMap dynamically\n                        this.updateTaskParentMap(taskId, parentId);\n\n                        reorderedTasks.push({\n                            id: taskId,\n                            sort_order: index + 1,\n                            parent_id: parentId,\n                        });\n                    });\n\n                    console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n                    console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n                    // Send the payload to the backend\n                    const response = await fetch("/tasks/reorder_subtasks", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                            "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n                        },\n                        body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n                    });\n\n                    if (!response.ok) {\n                        const errorData = await response.json();\n                        console.error("Error reordering tasks:", errorData);\n                        alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n                        return;\n                    }\n\n                    const data = await response.json();\n                    console.log("Task reordering successful:", data);\n\n                } catch (error) {\n                    console.error("Error during drag-and-drop operation:", error);\n                    alert("An unexpected error occurred while reordering tasks.");\n                }\n            },\n        });\n\n        window.isDragAndDropInitialized = true;\n        console.log("Drag-and-drop initialized successfully.");\n    },\n};\n```\n\nKey Updates:\n\t1.\tPrecomputed Map (taskParentMap):\n\t•\tThe initTaskParentMap function initializes the map by iterating over DOM elements and mapping each task’s ID to its parent ID.\n\t•\tThe updateTaskParentMap dynamically updates the map when tasks are reordered.\n\t2.\tEfficient Parent Lookup:\n\t•\tThe parentId is derived from the precomputed map rather than DOM traversal.\n\t3.\tBackend Payload:\n\t•\tA structured payload (reorderedTasks) is sent to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t•\tCSRF protection is ensured by passing the token to the request headers.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:44:08.338301', 'updated_at': '2025-02-06T21:59:17.417466'}, {'id': 134, 'name': 'Step 2: Update the Backend in routes.py', 'description': 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\nPlan for step 2:\n\t1.\tVerify the payload structure:\n\t•\tEnsure that the payload includes all necessary fields (id, sort_order, parent_id) for each task.\n\t•\tValidate that the parent-child relationships in the precomputed map (taskParentMap) are reflected correctly in the payload.\n\t2.\tSubmit the payload to the backend:\n\t•\tEnhance the fetch request in the onEnd function of initDragAndDrop to log detailed submission data.\n\t•\tConfirm the payload integrity in the browser console before submission.\n\t3.\tUpdate backend logging:\n\t•\tAdd logging to /reorder_subtasks in routes.py to confirm receipt of the correct payload and process parent-child updates.\n\t•\tLog before and after database updates for better debugging.\n\n-----\nUpdated tasks_table_interactions.js\n\nReplace this section:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    let parentId = null;\n```\nWith:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    const parentId = this.taskParentMap.get(taskId) || null;\n```\nThe this.taskParentMap provides a precomputed and dynamic mapping of taskId to parentId. By using this map, we avoid relying on DOM traversal logic (row.closest or row.previousElementSibling) during drag-and-drop operations, which can sometimes be unreliable or cumbersome.\n\nFull Revised onEnd section:\n```\nonEnd: async (event) => {\n    try {\n        console.log("Drag-and-drop operation started...");\n        const rows = Array.from(event.from.querySelectorAll(".task-row"));\n        const reorderedTasks = [];\n\n        rows.forEach((row, index) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = this.taskParentMap.get(taskId) || null;\n\n            // Update the taskParentMap dynamically\n            this.updateTaskParentMap(taskId, parentId);\n\n            reorderedTasks.push({\n                id: taskId,\n                sort_order: index + 1,\n                parent_id: parentId,\n            });\n        });\n\n        console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n        console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n        // Send the payload to the backend\n        const response = await fetch("/tasks/reorder_subtasks", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n            },\n            body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error("Error reordering tasks:", errorData);\n            alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n            return;\n        }\n\n        const data = await response.json();\n        console.log("Task reordering successful:", data);\n\n    } catch (error) {\n        console.error("Error during drag-and-drop operation:", error);\n        alert("An unexpected error occurred while reordering tasks.");\n    }\n}\n```\n---------------------------------\nEnsure updates include:\n\t•\tBetter Logging: Adding logs for key events such as database changes and validation results.\n\t•\tInput Validation: Ensure all required fields (id, sort_order, parent_id) exist in the payload.\n\t•\tPost-Commit Validation: Confirm database updates after the commit.\n\t•\tImproved Error Handling: Include specific error messages and consistent rollback mechanisms.\n\nBelow is the revised reorder_subtasks route with descriptive comments for each section:\n```\n@bp.route("/reorder_subtasks", methods=["POST"])\ndef reorder_subtasks():\n    """\n    Reorder subtasks globally or reassign them to a different parent.\n\n    Steps:\n    - Parse and validate input from the frontend.\n    - Update parent-child relationships and sort order in the database.\n    - Commit changes and return a success response.\n    - Handle errors gracefully and provide detailed logs for debugging.\n    """\n    logger.info("Entering reorder_subtasks route...")\n    logger.info(f"Received payload for reordering tasks: {request.json}")\n\n    try:\n        # Step 1: Parse input\n        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered\n        ordered_tasks = request.json.get("ordered_tasks", [])\n\n        logger.debug(f"Parsed parent_id: {parent_id}")\n        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")\n\n        # Step 2: Validate input\n        if not isinstance(ordered_tasks, list) or not all(\n            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task\n            for task in ordered_tasks\n        ):\n            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")\n            return jsonify({\n                "error": "Invalid input format for \'ordered_tasks\'. Each task must include \'id\', \'sort_order\', and \'parent_id\'."\n            }), 400\n\n        # Step 3: Validate parent task (if applicable)\n        if parent_id is not None:\n            parent_task = Task.query.get(parent_id)\n            if not parent_task:\n                logger.error(f"Parent task with ID {parent_id} not found.")\n                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400\n\n        logger.info("Input validation passed. Proceeding with task updates...")\n\n        # Step 4: Process updates for each subtask\n        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation\n\n        for task_data in ordered_tasks:\n            subtask_id = task_data["id"]\n            sort_order = task_data["sort_order"]\n            new_parent_id = task_data["parent_id"]\n\n            # Fetch the subtask from the database\n            subtask = Task.query.get(subtask_id)\n            if not subtask:\n                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")\n                continue\n\n            # Log and update parent_id if it changes\n            if new_parent_id is not None and new_parent_id != subtask.parent_id:\n                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")\n                subtask.parent_id = new_parent_id\n\n            # Update sort order\n            subtask.sort_order = sort_order\n            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")\n\n            # Add to the list of updated subtasks for validation\n            updated_subtasks.append(subtask)\n\n        # Step 5: Commit changes to the database\n        try:\n            db.session.commit()\n            logger.info(f"Subtasks reordered successfully: {[task[\'id\'] for task in ordered_tasks]}")\n        except Exception as e:\n            logger.error(f"Error committing changes to the database: {str(e)}")\n            db.session.rollback()\n            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500\n\n        # Step 6: Post-commit validation\n        for subtask in updated_subtasks:\n            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")\n            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")\n\n        # Step 7: Return success response\n        return jsonify({\n            "success": True,\n            "message": "Subtasks reordered successfully.",\n            "updated_subtasks": [subtask.id for subtask in updated_subtasks]\n        }), 200\n\n    except Exception as e:\n        # Step 8: Handle unexpected errors\n        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)\n        db.session.rollback()\n        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500\n```\nKey Changes and Descriptive Comments\n\t1.\tInput Parsing:\n\t•\tExtracts parent_id and ordered_tasks from the request payload.\n\t•\tLogs the parsed values for debugging.\n\t2.\tInput Validation:\n\t•\tEnsures ordered_tasks is a list of dictionaries with the required keys.\n\t•\tValidates parent_id if provided, ensuring the parent task exists in the database.\n\t3.\tUpdate Processing:\n\t•\tIterates through ordered_tasks, updating each task’s parent_id and sort_order.\n\t•\tLogs changes for each task.\n\t4.\tDatabase Commit:\n\t•\tCommits all updates in a single transaction.\n\t•\tLogs success or rolls back changes in case of an error.\n\t5.\tPost-Commit Validation:\n\t•\tVerifies that the parent_id and sort_order changes were successfully saved to the database.\n\t6.\tError Handling:\n\t•\tCaptures and logs exceptions during processing or committing.\n\t•\tProvides meaningful error messages to the frontend.\n\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'created_at': '2025-01-15T09:46:29.348853', 'updated_at': '2025-02-06T21:59:21.617065'}, {'id': 131, 'name': 'Step 5: Update utils.py', 'description': 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nChanges to Make:\n\t1.\tEnhance Task Filtering:\n\t•\tEnsure the filters handle parent-child relationships explicitly.\n\t•\tAdd options to include or exclude subtasks in queries.\n\t2.\tUtility Function for Debugging Parent-Child Relationships:\n\t•\tProvide a function to generate a map or list of parent-child relationships for debugging purposes.\n\t3.\tValidation Functions:\n\t•\tAdd a utility function to validate parent-child relationships and ensure no circular dependencies.\n\nUpdated utils.py Code:\n```\nimport logging\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import joinedload\nfrom app.extensions.db import db\nfrom app.tasks.models import Task\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\n\nclass TaskService:\n    @staticmethod\n    def filter_tasks(filters=None, include_subtasks=True, page=None, per_page=None):\n        """\n        Dynamically filters tasks with an option to include or exclude subtasks.\n\n        Args:\n            filters (dict): Filtering criteria.\n            include_subtasks (bool): Whether to include subtasks in the query.\n            page (int, optional): Page number for pagination.\n            per_page (int, optional): Items per page for pagination.\n\n        Returns:\n            Query or Pagination: A SQLAlchemy query object or paginated results.\n        """\n        query = Task.query.options(\n            db.joinedload(Task.project).joinedload(Project.contributors),\n            db.joinedload(Task.contributor),\n            db.joinedload(Task.children),\n        ).order_by(Task.sort_order)\n\n        if filters:\n            logger.debug(f"Applying filters: {filters}")\n\n            # Apply standard filters\n            if "is_archived" in filters:\n                query = query.filter(Task.is_archived == filters["is_archived"])\n            if "project_id" in filters:\n                query = query.filter(Task.project_id == filters["project_id"])\n            if "task_type" in filters:\n                if isinstance(filters["task_type"], list):\n                    query = query.filter(Task.task_type.in_(filters["task_type"]))\n                else:\n                    query = query.filter(Task.task_type == filters["task_type"])\n            if "completion_status" in filters:\n                completion_map = {"completed": True, "in_progress": False}\n                if filters["completion_status"] in completion_map:\n                    query = query.filter(Task.completed == completion_map[filters["completion_status"]])\n\n            # Optionally exclude subtasks\n            if not include_subtasks:\n                query = query.filter(Task.task_type != "Subtask")\n\n        logger.debug(f"Generated query: {query}")\n\n        # Pagination\n        if page and per_page:\n            return query.paginate(page=page, per_page=per_page, error_out=False)\n        return query\n\n    @staticmethod\n    def debug_parent_child_relationships(project_id=None):\n        """\n        Generates a debug map of parent-child relationships for all tasks.\n\n        Args:\n            project_id (int, optional): Restrict to tasks from a specific project.\n\n        Returns:\n            dict: A dictionary mapping parent IDs to their child task IDs.\n        """\n        query = Task.query\n        if project_id:\n            query = query.filter(Task.project_id == project_id)\n\n        tasks = query.options(\n            db.load_only(Task.id, Task.parent_id)\n        ).all()\n\n        relationship_map = {}\n        for task in tasks:\n            if task.parent_id not in relationship_map:\n                relationship_map[task.parent_id] = []\n            relationship_map[task.parent_id].append(task.id)\n\n        logger.debug(f"Parent-Child Relationship Map: {relationship_map}")\n        return relationship_map\n\n    @staticmethod\n    def validate_parent_child_relationships():\n        """\n        Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.\n\n        Raises:\n            ValueError: If invalid relationships are detected.\n        """\n        tasks = Task.query.options(db.joinedload(Task.parent)).all()\n\n        for task in tasks:\n            if task.parent_id:\n                parent_task = task.parent\n                if not parent_task:\n                    raise ValueError(f"Task {task.id} has an invalid parent ID {task.parent_id}.")\n\n                # Validate hierarchy rules\n                if task.task_type == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError(f"User Story {task.id} must have an Epic as its parent.")\n                if task.task_type == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError(f"Subtask {task.id} must have a User Story as its parent.")\n\n        logger.info("All parent-child relationships are valid.")\n\n    @staticmethod\n    def get_all_task_ids_with_parents():\n        """\n        Returns a flat list of tasks with their parent IDs for debugging.\n\n        Returns:\n            list: A list of tuples (task_id, parent_id).\n        """\n        tasks = Task.query.with_entities(Task.id, Task.parent_id).all()\n        logger.debug(f"Task IDs with Parent IDs: {tasks}")\n        return tasks\n```\n\n\nExplanation of Changes:\n\t1.\tfilter_tasks Enhancements:\n\t•\tAdded include_subtasks parameter to optionally exclude subtasks from the query.\n\t2.\tdebug_parent_child_relationships:\n\t•\tCreates a parent-child relationship map for debugging purposes.\n\t3.\tvalidate_parent_child_relationships:\n\t•\tIterates through all tasks to validate parent-child hierarchy and ensures no invalid relationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t•\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:41:28.091824', 'updated_at': '2025-01-16T19:22:36.236691'}, {'id': 135, 'name': 'Step 3: Update list.html', 'description': 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already includes everything needed. No required changes.\n\nHere´s the relevant section of list.html:\n\n```\n<tr id="task-{{ task.id }}"\n                class="task-row {% if task.task_type == \'Subtask\' %}subtask-row{% elif task.task_type == \'User Story\' %}user-story-row{% elif task.task_type == \'Epic\' %}epic-row{% endif %}"\n                style="background-color: \n                {% if task.task_type == \'Subtask\' %}\n                    rgba(200, 230, 255, 0.5); /* Light blue for Subtask */\n                {% elif task.task_type == \'User Story\' %}\n                    rgba(255, 255, 200, 0.5); /* Light yellow for User Story */\n                {% elif task.task_type == \'Epic\' %}\n                    rgba(255, 200, 200, 0.5); /* Light red for Epic */\n                {% else %}\n                    rgba(240, 240, 240, 1); /* Default light gray */\n                {% endif %};"\n                data-task-id="{{ task.id }}"\n                data-parent-id="{{ task.parent_id or \'\' }}"\n                data-level="{{ depth }}">\n                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>\n                <td>\n                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}\n                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}" aria-label="Toggle details for task {{ task.name }}">\n                        <i class="bi bi-chevron-right"></i>\n                    </button>\n                    {% endif %}\n                </td>\n                <td class="fw-medium fs-6 \n                {% if task.task_type == \'Epic\' %}\n                    epic-cell\n                {% elif task.task_type == \'User Story\' %}\n                    user-story-cell\n                {% elif task.task_type == \'Subtask\' %}\n                    subtask-cell\n                {% endif %}" \n                style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">\n                <span class="bi fs-6\n                {% if task.task_type == \'Epic\' %}\n                    bi-circle-fill\n                {% elif task.task_type == \'User Story\' %}\n                    bi-circle-half\n                {% elif task.task_type == \'Subtask\' %}\n                    bi-circle\n                {% endif %}">\n                </span>\n                {{ task.name }}\n                <small class="text-muted fw-light">\n                    (Parent-ID: {{ task.parent_id or \'None\' }})\n                </small>\n                <!-- Open Link -->\n                <a href="#" class="task-open-link" data-task-id="{{ task.id }}">\n                    <i class="bi bi-arrows-angle-expand" style="font-size: 0.8rem; color: white;"></i>\n                    Open\n                </a>\n            </td>\n                <td class="fw-light fs-6">\n                    <small class>\n                    LAC-{{ task.id }}\n                    </small>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light text-bg-secondary">\n                        {{ task.project if task.project else "Unknown Project" }}\n                    </span>\n                </td>\n                <td class="fs-6" data-contributor-column>{{ task.assigned_to if task.assigned_to else "Unassigned" }}</td>\n                <td class="fs-6">{{ task.story_points }}</td>\n                <td class="fs-6">\n                    <span class="badge rounded-pill fw-light text-bg-light">\n                        {{ task.task_type }}\n                    </span>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light {% if task.completed %}text-bg-success{% else %}text-bg-warning{% endif %}">\n                        {{ "Completed" if task.completed else "In Progress" }}\n                    </span>\n                </td>\n                <td>\n                    <!-- Delete Icon -->\n                    <button class="btn btn-dark btn-sm delete-task-btn" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .2rem; --bs-btn-font-size: .75rem;" data-task-id="{{ task.id }}" aria-label="Deletes task {{ task.id }}">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n            </tr>\n            {% for child in tasks if child.parent_id == task.id %}\n                {{ render_task(child, tasks, depth + 1) }}\n            {% endfor %}\n            {% endmacro %}\n            \n            <!-- Render top-level tasks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-01-15T09:46:29.349784', 'updated_at': '2025-01-16T19:22:36.238473'}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'description': 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitHub Login involves integrating OAuth 2.0, which both services support. The complexity depends on your app’s existing setup, frameworks, and experience with third-party authentication. Below is a breakdown:\n\nKey Steps for Implementing Google or GitHub Login\n\t1.\tSet Up OAuth Credentials:\n\t•\tRegister your application in the Google Cloud Console or GitHub Developer Settings.\n\t•\tObtain the client ID and client secret.\n\t2.\tInstall Required Libraries:\n\t•\tUse a library for OAuth (e.g., flask-oauthlib, python-social-auth, or authlib).\n\t•\tPopular frameworks like Flask and Django already have robust integrations for OAuth providers.\n\t3.\tBackend Configuration:\n\t•\tImplement an endpoint to handle the OAuth flow (/auth/login/google or /auth/login/github).\n\t•\tConfigure your app to send users to Google or GitHub’s authentication page.\n\t•\tHandle the OAuth callback to exchange the authorization code for an access token.\n\t•\tVerify the token and fetch user information (e.g., email, name).\n\t4.\tLink OAuth to User Registration:\n\t•\tOn successful login, create or retrieve a user in your database.\n\t•\tStore the user’s details like email, OAuth provider ID, and access token.\n\t5.\tFrontend Integration (if applicable):\n\t•\tAdd “Login with Google” or “Login with GitHub” buttons.\n\t•\tRedirect to your backend’s OAuth endpoint when clicked.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T12:15:54.291625', 'updated_at': '2025-01-16T19:22:36.239866'}, {'id': 62, 'name': 'Add OAuth integration for Google Login', 'description': 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-02-18T00:44:28.917671'}, {'id': 64, 'name': 'Setup project credentials for Google API', 'description': 'Generate client ID and secret from Google API Console for your application.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-02-18T00:44:45.802506'}, {'id': 67, 'name': 'Test Google OAuth flow', 'description': 'Verify the OAuth flow using test accounts and check the token exchange.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-02-18T00:44:43.790066'}, {'id': 65, 'name': 'Implement backend endpoints for Google OAuth', 'description': 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-02-18T00:44:41.932371'}, {'id': 63, 'name': 'Add OAuth integration for GitHub Login', 'description': 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-01-16T19:22:36.246358'}, {'id': 68, 'name': 'Register application in GitHub Developer Console', 'description': 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.247746'}, {'id': 69, 'name': 'Handle callback from GitHub', 'description': 'Implement the callback endpoint to process the authorization code from GitHub.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-01-16T19:22:36.248912'}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'description': 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 18, 'status': 'Not Started', 'created_at': '2025-01-07T19:53:50.085064', 'updated_at': '2025-01-16T19:22:36.250169'}, {'id': 100, 'name': '1.1 User Registration', 'description': 'As a user, I want to register with a username, email, and password so that I can create an account and access the system.\n\n**Acceptance Criteria:**\n\n•\tUser can input valid username, email, and password.\n•\tUsername and email must be unique.\n•\tErrors are displayed for invalid inputs or duplicate accounts.\n•\tPasswords must meet complexity requirements and be securely stored.\n•\tSuccessful registration redirects users to a login page.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T19:59:09.044667', 'updated_at': '2025-01-16T19:22:36.251812'}, {'id': 107, 'name': '1.1.1 Database Changes for User Registration', 'description': '1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.\n   CREATE TABLE public.users (\n       id SERIAL PRIMARY KEY,\n       username VARCHAR(50) UNIQUE NOT NULL,\n       email VARCHAR(100) UNIQUE NOT NULL,\n       password_hash VARCHAR(255) NOT NULL,\n       created_at TIMESTAMP DEFAULT NOW(),\n       updated_at TIMESTAMP DEFAULT NOW()\n);\n\n\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-11T11:36:20.238219'}, {'id': 108, 'name': '1.1.2 Backend API for Registration', 'description': '•\tCreate an endpoint POST /api/register:\n•\tValidate input fields.\n•\tHash the password using bcrypt or argon2.\n•\tInsert the user into the users table.\n•\tReturn success/failure responses.\ndddhfff\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:33.067643'}, {'id': 112, 'name': '1.2.2 Frontend Login Page', 'description': 'Develop a frontend form for user login with email and password inputs.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.683644'}, {'id': 109, 'name': '1.1.3 Create Frontend Registration Page', 'description': 'Develop a frontend form to collect user registration details.\n•\tAdd a form for username, email, and password inputs.\n•\tUse client-side validation (e.g., email format).\n•\tSend a POST request to /api/register.\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.684988'}, {'id': 110, 'name': '1.1.4 Unit Tests for Registration', 'description': 'Write unit tests for:\n\n•\tValid registration.\n•\tDuplicate username/email scenarios.\n•\tInvalid input handling.\nff', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-01-16T19:25:53.686902'}, {'id': 101, 'name': '1.2 User Login', 'description': 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n•\tUsers can log in with a valid email and password.\n•\tErrors are displayed for invalid credentials.\n•\tSuccessful login stores a session or JWT token.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:25:53.687936'}, {'id': 111, 'name': '1.2.1 Backend API for Login', 'description': 'Create POST /api/login endpoint to handle user login.\njjsjj', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:53.689096'}, {'id': 113, 'name': '1.2.3 Session Management', 'description': 'Implement secure session handling using cookies or JWT.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:25:20.968680'}, {'id': 114, 'name': '1.2.4 Unit Tests for Login', 'description': 'Write tests for successful and failed login attempts.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-01-16T19:22:36.265866'}, {'id': 106, 'name': 'Password Reset', 'description': 'As a user, I want to reset my password securely using email.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.267247'}, {'id': 128, 'name': 'Frontend Password Reset Page', 'description': 'Develop a page for users to enter a new password using a valid token.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.269158'}, {'id': 129, 'name': 'Testing Password Reset', 'description': 'Write tests for email delivery, token validation, and password updates.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-01-16T19:22:36.270849'}, {'id': 102, 'name': 'Logout', 'description': 'As a user, I want to log out so that I can end my session securely.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-01-16T19:22:36.272605'}, {'id': 117, 'name': 'Tests for Logout', 'description': 'Verify session invalidation and redirection to the login page.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.274575'}, {'id': 116, 'name': 'Frontend Logout Button', 'description': 'Add a logout button to the UI and handle session clearing.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-09T12:31:17.939784'}, {'id': 115, 'name': 'Backend API for Logout', 'description': 'Create POST /api/logout endpoint to invalidate user sessions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-01-16T19:22:36.277547'}, {'id': 61, 'name': 'Parent task assignment', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'created_at': '2025-01-04T22:31:45.205815', 'updated_at': '2025-02-18T06:41:37.538722'}, {'id': 45, 'name': 'Display Default Value in Dropdown', 'description': 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.280493'}, {'id': 50, 'name': 'Retrieve Current Parent Task', 'description': 'Retrieve the current parent task’s ID and name from the backend.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Completed', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-18T00:45:04.055333'}, {'id': 51, 'name': 'Set Default Value', 'description': 'Set the default value in the dropdown based on the retrieved data.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 45, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 1, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-01-16T19:22:36.283309'}, {'id': 46, 'name': 'Search for Parent Tasks', 'description': 'Allow users to search for tasks dynamically in the dropdown by typing.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-01-16T19:22:36.284882'}, {'id': 54, 'name': 'Test Partial Matching', 'description': 'Ensure the search results update in real-time as the user types.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:29.251047'}, {'id': 47, 'name': 'Handle Large Datasets Efficiently', 'description': 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:26:23.067490'}, {'id': 56, 'name': 'Paginate API Responses', 'description': 'Implement server-side filtering and pagination for large datasets.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:16.233517'}, {'id': 55, 'name': 'Enable Lazy Loading', 'description': 'Enable lazy loading or virtualization in Virtual Select.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:26:08.099271'}, {'id': 48, 'name': 'Select and Deselect Parent Tasks', 'description': 'Allow users to select a parent task or deselect by choosing "None."', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:25:59.651639'}, {'id': 57, 'name': 'Ensure None Option Availability', 'description': 'Add “None” as a selectable option and ensure it stays at the top of the list.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:51.310240'}, {'id': 58, 'name': 'Handle Selection Events', 'description': 'Implement event listeners to update the form’s state when the selection changes.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:43.569501'}, {'id': 49, 'name': 'Integrate Dropdown with Task Form', 'description': 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-11T08:25:36.133259'}, {'id': 59, 'name': 'Bind Dropdown to Form Field', 'description': 'Bind the dropdown to the form’s parent task field.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'In Progress', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-18T06:41:49.262443'}, {'id': 60, 'name': 'Test Form Submission', 'description': 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:28.367797'}, {'id': 41, 'name': 'Implement Searchable Dropdown', 'description': 'As a user, I want a searchable dropdown for parent task assignment.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Completed', 'created_at': '2025-01-03T09:14:28.285904', 'updated_at': '2025-02-11T08:25:07.992524'}, {'id': 52, 'name': 'Add Search Box to Dropdown', 'description': 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-11T08:25:01.469601'}]
2025-02-23 22:03:11,397 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-23 22:03:11,397 INFO: [cached since 2852s ago] {'param_1': 2}
2025-02-23 22:03:11,398 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-23 22:03:11,399 INFO: [cached since 2852s ago] {'param_1': 3}
2025-02-23 22:03:11,399 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-23 22:03:11,399 INFO: [cached since 2852s ago] {'param_1': 4}
2025-02-23 22:03:11,401 INFO: ROLLBACK
2025-02-23 22:03:11,401 INFO: 127.0.0.1 - - [23/Feb/2025 22:03:11] "GET /tasks/?page=1&is_archived=False HTTP/1.1" 200 -
2025-02-23 22:03:11,435 INFO: 127.0.0.1 - - [23/Feb/2025 22:03:11] "[36mGET /static/custom.css HTTP/1.1[0m" 304 -
2025-02-23 22:03:11,444 INFO: 127.0.0.1 - - [23/Feb/2025 22:03:11] "[36mGET /static/js/tasks_table_interactions.js HTTP/1.1[0m" 304 -
2025-02-23 22:03:11,447 INFO: 127.0.0.1 - - [23/Feb/2025 22:03:11] "[36mGET /static/js/filters.js HTTP/1.1[0m" 304 -
2025-02-23 22:03:11,447 INFO: 127.0.0.1 - - [23/Feb/2025 22:03:11] "[36mGET /static/js/modals.js HTTP/1.1[0m" 304 -
2025-02-23 22:03:11,556 INFO: 127.0.0.1 - - [23/Feb/2025 22:03:11] "[36mGET /static/favicon.ico HTTP/1.1[0m" 304 -
2025-02-23 22:05:16,088 INFO: 127.0.0.1 - - [23/Feb/2025 22:05:16] "GET /socket.io/?EIO=4&transport=polling&t=4b57x8jl HTTP/1.1" 200 -
2025-02-23 22:05:16,145 INFO: 127.0.0.1 - - [23/Feb/2025 22:05:16] "POST /socket.io/?EIO=4&transport=polling&t=4b58yvo2&sid=7vi4gA9kmLnd6U0vAABi HTTP/1.1" 200 -
2025-02-23 22:05:16,148 INFO: 127.0.0.1 - - [23/Feb/2025 22:05:16] "GET /socket.io/?EIO=4&transport=polling&t=4b58z4p8&sid=7vi4gA9kmLnd6U0vAABi HTTP/1.1" 200 -
2025-02-23 22:05:16,156 INFO: 127.0.0.1 - - [23/Feb/2025 22:05:16] "GET /socket.io/?EIO=4&transport=polling&t=4b59zlxr&sid=7vi4gA9kmLnd6U0vAABi HTTP/1.1" 200 -
2025-02-23 22:05:16,528 INFO: 127.0.0.1 - - [23/Feb/2025 22:05:16] "GET /socket.io/?EIO=4&transport=polling&t=4b5jfhmr HTTP/1.1" 200 -
2025-02-23 22:05:16,559 INFO: 127.0.0.1 - - [23/Feb/2025 22:05:16] "GET /socket.io/?EIO=4&transport=websocket&sid=m6T_JZvCVqj_4tc3AABg HTTP/1.1" 200 -
2025-02-23 22:05:16,582 INFO: 127.0.0.1 - - [23/Feb/2025 22:05:16] "POST /socket.io/?EIO=4&transport=polling&t=4b5kphps&sid=Z7Gd-SqMjf2HqYRzAABk HTTP/1.1" 200 -
2025-02-23 22:05:16,582 INFO: 127.0.0.1 - - [23/Feb/2025 22:05:16] "GET /socket.io/?EIO=4&transport=websocket&sid=7vi4gA9kmLnd6U0vAABi HTTP/1.1" 200 -
2025-02-23 22:05:16,634 INFO: 127.0.0.1 - - [23/Feb/2025 22:05:16] "GET /socket.io/?EIO=4&transport=polling&t=4b5ksgqj&sid=Z7Gd-SqMjf2HqYRzAABk HTTP/1.1" 200 -
2025-02-23 22:05:16,644 INFO: 127.0.0.1 - - [23/Feb/2025 22:05:16] "GET /socket.io/?EIO=4&transport=polling&t=4b5ni5x9&sid=Z7Gd-SqMjf2HqYRzAABk HTTP/1.1" 200 -
2025-02-23 22:05:16,669 INFO: 127.0.0.1 - - [23/Feb/2025 22:05:16] "GET /socket.io/?EIO=4&transport=polling&t=4b5o5q0m&sid=Z7Gd-SqMjf2HqYRzAABk HTTP/1.1" 200 -
2025-02-23 22:05:17,613 INFO: 127.0.0.1 - - [23/Feb/2025 22:05:17] "GET /socket.io/?EIO=4&transport=polling&t=4b6eiieb HTTP/1.1" 200 -
2025-02-23 22:05:17,630 INFO: 127.0.0.1 - - [23/Feb/2025 22:05:17] "POST /socket.io/?EIO=4&transport=polling&t=4b6es1xk&sid=xlJl1HFhWRwVs_d9AABm HTTP/1.1" 200 -
2025-02-23 22:05:17,681 INFO: 127.0.0.1 - - [23/Feb/2025 22:05:17] "GET /socket.io/?EIO=4&transport=polling&t=4b6etmbv&sid=xlJl1HFhWRwVs_d9AABm HTTP/1.1" 200 -
2025-02-23 22:05:17,744 INFO: BEGIN (implicit)
2025-02-23 22:05:17,768 INFO: BEGIN (implicit)
2025-02-23 22:05:17,769 INFO: Entering list_tasks_json route...
2025-02-23 22:05:17,771 DEBUG: Filters used in API: {'is_archived': False}
2025-02-23 22:05:17,770 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 22:05:17,771 DEBUG: Applying filters: {'is_archived': False}
2025-02-23 22:05:17,770 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 22:05:17,772 INFO: 127.0.0.1 - - [23/Feb/2025 22:05:17] "GET /socket.io/?EIO=4&transport=polling&t=4b6gk0s9&sid=xlJl1HFhWRwVs_d9AABm HTTP/1.1" 200 -
2025-02-23 22:05:17,772 INFO: [cached since 2973s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 22:05:17,780 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-23 22:05:17,780 INFO: [cached since 2973s ago] {}
2025-02-23 22:05:17,783 INFO: BEGIN (implicit)
2025-02-23 22:05:17,785 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-23 22:05:17,792 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 22:05:17,799 INFO: [cached since 2979s ago] {'param_1': 110, 'param_2': 0}
2025-02-23 22:05:17,804 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:05:17,805 INFO: [cached since 2973s ago] {'param_1': 1}
2025-02-23 22:05:17,804 INFO: [cached since 2973s ago] {}
2025-02-23 22:05:17,819 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:05:17,820 INFO: [cached since 2973s ago] {'param_1': 2}
2025-02-23 22:05:17,825 INFO: ROLLBACK
2025-02-23 22:05:17,831 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:05:17,831 INFO: [cached since 2973s ago] {'param_1': 3}
2025-02-23 22:05:17,837 INFO: 127.0.0.1 - - [23/Feb/2025 22:05:17] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 22:05:17,844 INFO: BEGIN (implicit)
2025-02-23 22:05:17,845 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 22:05:17,845 INFO: [cached since 2973s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 22:05:17,856 INFO: BEGIN (implicit)
2025-02-23 22:05:17,856 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-23 22:05:17,856 INFO: [cached since 2973s ago] {'pk_1': 19}
2025-02-23 22:05:17,895 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:05:17,914 INFO: [cached since 2973s ago] {'param_1': 4}
2025-02-23 22:05:17,904 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 22:05:17,915 INFO: [cached since 2973s ago] {}
2025-02-23 22:05:17,913 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-23 22:05:17,914 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 22:05:17,916 INFO: [cached since 2979s ago] {}
2025-02-23 22:05:17,917 INFO: [cached since 2973s ago] {}
2025-02-23 22:05:17,918 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:05:17,919 INFO: [cached since 2973s ago] {'param_1': 5}
2025-02-23 22:05:17,924 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-23 22:05:17,925 INFO: ROLLBACK
2025-02-23 22:05:17,925 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-23 22:05:17,925 INFO: ROLLBACK
2025-02-23 22:05:17,926 INFO: [cached since 2979s ago] {}
2025-02-23 22:05:17,926 INFO: [cached since 2973s ago] {'param_1': 19}
2025-02-23 22:05:17,927 INFO: 127.0.0.1 - - [23/Feb/2025 22:05:17] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 22:05:17,928 INFO: 127.0.0.1 - - [23/Feb/2025 22:05:17] "GET /api/contributors HTTP/1.1" 200 -
2025-02-23 22:05:17,932 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 22:05:17,935 INFO: ROLLBACK
2025-02-23 22:05:17,936 INFO: [cached since 2979s ago] {}
2025-02-23 22:05:17,940 INFO: 127.0.0.1 - - [23/Feb/2025 22:05:17] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-02-23 22:05:17,949 INFO: ROLLBACK
2025-02-23 22:05:17,950 INFO: 127.0.0.1 - - [23/Feb/2025 22:05:17] "GET /api/tasks HTTP/1.1" 200 -
2025-02-23 22:05:24,471 INFO: 127.0.0.1 - - [23/Feb/2025 22:05:24] "GET /socket.io/?EIO=4&transport=polling&t=4bbon1dn HTTP/1.1" 200 -
2025-02-23 22:05:24,635 INFO: 127.0.0.1 - - [23/Feb/2025 22:05:24] "POST /socket.io/?EIO=4&transport=polling&t=4bbrqqbb&sid=iodroUbOHtY8Rj3pAABo HTTP/1.1" 200 -
2025-02-23 22:05:24,636 INFO: 127.0.0.1 - - [23/Feb/2025 22:05:24] "GET /socket.io/?EIO=4&transport=polling&t=4bbrqusn&sid=iodroUbOHtY8Rj3pAABo HTTP/1.1" 200 -
2025-02-23 22:05:26,405 INFO: 127.0.0.1 - - [23/Feb/2025 22:05:26] "GET /socket.io/?EIO=4&transport=polling&t=4bd6ijsa HTTP/1.1" 200 -
2025-02-23 22:05:26,449 INFO: 127.0.0.1 - - [23/Feb/2025 22:05:26] "POST /socket.io/?EIO=4&transport=polling&t=4bd7qfja&sid=nPO44tPeGAuig4SHAABq HTTP/1.1" 200 -
2025-02-23 22:05:26,452 INFO: 127.0.0.1 - - [23/Feb/2025 22:05:26] "GET /socket.io/?EIO=4&transport=polling&t=4bd7qa6g&sid=nPO44tPeGAuig4SHAABq HTTP/1.1" 200 -
2025-02-23 22:08:40,611 INFO: Fetching task details for Task ID 264.
2025-02-23 22:08:40,613 INFO: Fetching task with ID 264.
2025-02-23 22:08:40,617 INFO: BEGIN (implicit)
2025-02-23 22:08:40,620 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 22:08:40,620 INFO: [generated in 0.00041s] {'pk_1': 264}
2025-02-23 22:08:40,626 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x109454fb0>, 'task_type': 'User Story', 'project_id': 7, 'priority': 'Medium', 'story_points': 7, 'epic_priority': None, 'contributor_id': 5, 'completed_date': None, 'id': 264, 'is_archived': False, 'name': 'close all / open all childtasks', 'completed': False, 'sort_order': 0, 'created_at': datetime.datetime(2025, 2, 8, 2, 25, 20, 101418), 'description': 'ölkölklkhkk', 'status': 'Not Started', 'updated_at': datetime.datetime(2025, 2, 19, 22, 47, 17, 24076), 'parent_id': None}
2025-02-23 22:08:40,629 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-23 22:08:40,629 INFO: [generated in 0.00068s] {'pk_1': 7}
2025-02-23 22:08:40,631 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-23 22:08:40,632 INFO: [generated in 0.00027s] {'pk_1': 5}
2025-02-23 22:08:40,633 INFO: Task ID 264 fetched with parent ID: None
2025-02-23 22:08:40,633 INFO: Task with ID 264 fetched successfully.
2025-02-23 22:08:40,634 DEBUG: Fetched Task Data: {'id': 264, 'name': 'close all / open all childtasks', 'description': 'ölkölklkhkk', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 7, 'status': 'Not Started', 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-02-19T22:47:17.024076', 'contributor_name': 'Fredrik Cederborg', 'parent': None}
2025-02-23 22:08:40,634 INFO: Task details fetched successfully for Task ID 264.
2025-02-23 22:08:40,635 INFO: ROLLBACK
2025-02-23 22:08:40,637 INFO: 127.0.0.1 - - [23/Feb/2025 22:08:40] "GET /api/tasks/264 HTTP/1.1" 200 -
2025-02-23 22:16:53,663 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:53] "GET /socket.io/?EIO=4&transport=websocket&sid=Ta8OTmXiF9bXdOqOAAAj HTTP/1.1" 200 -
2025-02-23 22:16:53,671 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:53] "GET /socket.io/?EIO=4&transport=websocket&sid=QQwzTF5JKs84rEccAAAI HTTP/1.1" 200 -
2025-02-23 22:16:53,671 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:53] "GET /socket.io/?EIO=4&transport=websocket&sid=H_Rd0eG2ncD8jHPhAAAV HTTP/1.1" 200 -
2025-02-23 22:16:53,672 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:53] "GET /socket.io/?EIO=4&transport=websocket&sid=nPO44tPeGAuig4SHAABq HTTP/1.1" 200 -
2025-02-23 22:16:53,714 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:53] "GET /socket.io/?EIO=4&transport=websocket&sid=Ly-VCb2_eiRQBcraAAAQ HTTP/1.1" 200 -
2025-02-23 22:16:53,714 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:53] "GET /socket.io/?EIO=4&transport=websocket&sid=-NCwVFPL-UyVSA7YAAAR HTTP/1.1" 200 -
2025-02-23 22:16:53,715 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:53] "GET /socket.io/?EIO=4&transport=websocket&sid=-WhcT2LcAvdC6CioAAAh HTTP/1.1" 200 -
2025-02-23 22:16:53,716 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:53] "GET /socket.io/?EIO=4&transport=websocket&sid=xlJl1HFhWRwVs_d9AABm HTTP/1.1" 200 -
2025-02-23 22:16:53,721 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:53] "GET /socket.io/?EIO=4&transport=websocket&sid=iodroUbOHtY8Rj3pAABo HTTP/1.1" 200 -
2025-02-23 22:16:53,721 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:53] "GET /socket.io/?EIO=4&transport=websocket&sid=5bZZCSy7sKRjjEEkAAAB HTTP/1.1" 200 -
2025-02-23 22:16:53,721 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:53] "GET /socket.io/?EIO=4&transport=websocket&sid=iOYSzgBUowOdZVWkAAAU HTTP/1.1" 200 -
2025-02-23 22:16:53,722 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:53] "GET /socket.io/?EIO=4&transport=websocket&sid=d-bjTrOKNxWuNX3tAAAf HTTP/1.1" 200 -
2025-02-23 22:16:53,722 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:53] "GET /socket.io/?EIO=4&transport=websocket&sid=l7wDyl0UTaLRrr5lAAA1 HTTP/1.1" 200 -
2025-02-23 22:16:53,722 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:53] "GET /socket.io/?EIO=4&transport=websocket&sid=sTBMsMiMXX7LPkfOAAAi HTTP/1.1" 200 -
2025-02-23 22:16:53,723 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:53] "GET /socket.io/?EIO=4&transport=websocket&sid=ykaJBoX46VoT79KiAAA2 HTTP/1.1" 200 -
2025-02-23 22:16:53,724 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:53] "GET /socket.io/?EIO=4&transport=websocket&sid=Gv3SHVgtORf_wsWeAAAT HTTP/1.1" 200 -
2025-02-23 22:16:53,724 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:53] "GET /socket.io/?EIO=4&transport=websocket&sid=LG3OS1jikfdErzTLAAAS HTTP/1.1" 200 -
2025-02-23 22:16:53,725 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:53] "GET /socket.io/?EIO=4&transport=websocket&sid=aILS0jgB5GbmhRDcAAAK HTTP/1.1" 200 -
2025-02-23 22:16:53,725 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:53] "GET /socket.io/?EIO=4&transport=websocket&sid=W9YTtIvK7bg5Bk2eAAAg HTTP/1.1" 200 -
2025-02-23 22:16:53,726 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:53] "GET /socket.io/?EIO=4&transport=websocket&sid=Fzg6EiQFBs7oWKNWAAAC HTTP/1.1" 200 -
2025-02-23 22:16:53,733 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:53] "GET /socket.io/?EIO=4&transport=websocket&sid=7szJYwNpUhKu9F20AAAe HTTP/1.1" 200 -
2025-02-23 22:16:53,735 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:53] "GET /socket.io/?EIO=4&transport=websocket&sid=aXULF4s_KWVkchRdAAA0 HTTP/1.1" 200 -
2025-02-23 22:16:53,735 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:53] "GET /socket.io/?EIO=4&transport=websocket&sid=Bx2SFMEMvo6NBGIiAAAJ HTTP/1.1" 200 -
2025-02-23 22:16:53,903 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:53] "GET /socket.io/?EIO=4&transport=polling&t=4q3nnwvs HTTP/1.1" 200 -
2025-02-23 22:16:53,950 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:53] "POST /socket.io/?EIO=4&transport=polling&t=4q3o8l8k&sid=t1O35-QFQmGq5s4VAABs HTTP/1.1" 200 -
2025-02-23 22:16:53,955 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:53] "GET /socket.io/?EIO=4&transport=polling&t=4q3ob5wd&sid=t1O35-QFQmGq5s4VAABs HTTP/1.1" 200 -
2025-02-23 22:16:53,962 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:53] "GET /socket.io/?EIO=4&transport=polling&t=4q3pilaa&sid=t1O35-QFQmGq5s4VAABs HTTP/1.1" 200 -
2025-02-23 22:16:54,517 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:54] "GET /socket.io/?EIO=4&transport=polling&t=4q44jxjr HTTP/1.1" 200 -
2025-02-23 22:16:54,542 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:54] "POST /socket.io/?EIO=4&transport=polling&t=4q45ga5p&sid=AZgdcdzaYk3mdJ-9AABu HTTP/1.1" 200 -
2025-02-23 22:16:54,543 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:54] "GET /socket.io/?EIO=4&transport=polling&t=4q45gpuq&sid=AZgdcdzaYk3mdJ-9AABu HTTP/1.1" 200 -
2025-02-23 22:16:54,968 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:54] "GET /socket.io/?EIO=4&transport=polling&t=4q4ai3hc HTTP/1.1" 200 -
2025-02-23 22:16:54,919 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:54] "GET /socket.io/?EIO=4&transport=polling&t=4q4ajwxk HTTP/1.1" 200 -
2025-02-23 22:16:54,971 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:54] "GET /socket.io/?EIO=4&transport=polling&t=4q4ak6ph HTTP/1.1" 200 -
2025-02-23 22:16:54,972 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:54] "GET /socket.io/?EIO=4&transport=polling&t=4q4aj85u HTTP/1.1" 200 -
2025-02-23 22:16:54,975 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:54] "GET /socket.io/?EIO=4&transport=polling&t=4q4akv4k HTTP/1.1" 200 -
2025-02-23 22:16:55,000 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4aknbm HTTP/1.1" 200 -
2025-02-23 22:16:55,002 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4akucx HTTP/1.1" 200 -
2025-02-23 22:16:55,005 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4ak422 HTTP/1.1" 200 -
2025-02-23 22:16:55,015 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4akten HTTP/1.1" 200 -
2025-02-23 22:16:55,016 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4ak1wb HTTP/1.1" 200 -
2025-02-23 22:16:55,020 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4akr53 HTTP/1.1" 200 -
2025-02-23 22:16:55,026 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4alo6z HTTP/1.1" 200 -
2025-02-23 22:16:55,027 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4aloim HTTP/1.1" 200 -
2025-02-23 22:16:55,028 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4all1h HTTP/1.1" 200 -
2025-02-23 22:16:55,033 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4am3jg HTTP/1.1" 200 -
2025-02-23 22:16:55,034 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4ameh1 HTTP/1.1" 200 -
2025-02-23 22:16:55,043 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4bd00c HTTP/1.1" 200 -
2025-02-23 22:16:55,050 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4amd4v HTTP/1.1" 200 -
2025-02-23 22:16:55,105 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "POST /socket.io/?EIO=4&transport=polling&t=4q4kuvjf&sid=mIrghq-cB-84uQeqAABw HTTP/1.1" 200 -
2025-02-23 22:16:55,109 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "POST /socket.io/?EIO=4&transport=polling&t=4q4l121l&sid=SLJ0J72DtufbzTwOAABy HTTP/1.1" 200 -
2025-02-23 22:16:55,109 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "POST /socket.io/?EIO=4&transport=polling&t=4q4kxk1j&sid=ZduIugIJ0xxYjhiNAABx HTTP/1.1" 200 -
2025-02-23 22:16:55,110 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "POST /socket.io/?EIO=4&transport=polling&t=4q4kz851&sid=Rsv8Gnm8YVCRY2MJAABz HTTP/1.1" 200 -
2025-02-23 22:16:55,115 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4kxcv5&sid=mIrghq-cB-84uQeqAABw HTTP/1.1" 200 -
2025-02-23 22:16:55,130 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4kznou&sid=ZduIugIJ0xxYjhiNAABx HTTP/1.1" 200 -
2025-02-23 22:16:55,136 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4l04ne&sid=Rsv8Gnm8YVCRY2MJAABz HTTP/1.1" 200 -
2025-02-23 22:16:55,138 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "POST /socket.io/?EIO=4&transport=polling&t=4q4l28lu&sid=zWJK0vAWakOELSNOAAB0 HTTP/1.1" 200 -
2025-02-23 22:16:55,140 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4l1asz&sid=SLJ0J72DtufbzTwOAABy HTTP/1.1" 200 -
2025-02-23 22:16:55,143 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4l3bgy&sid=zWJK0vAWakOELSNOAAB0 HTTP/1.1" 200 -
2025-02-23 22:16:55,144 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "POST /socket.io/?EIO=4&transport=polling&t=4q4l4ueu&sid=vttYefdNXchD9gpDAAB1 HTTP/1.1" 200 -
2025-02-23 22:16:55,145 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4l475h&sid=vttYefdNXchD9gpDAAB1 HTTP/1.1" 200 -
2025-02-23 22:16:55,149 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "POST /socket.io/?EIO=4&transport=polling&t=4q4l4evb&sid=NEzfQTk1HkRknz5_AAB2 HTTP/1.1" 200 -
2025-02-23 22:16:55,158 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "POST /socket.io/?EIO=4&transport=polling&t=4q4l5lkk&sid=bSb4Ud9Dy4V3zwIRAAB3 HTTP/1.1" 200 -
2025-02-23 22:16:55,161 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "POST /socket.io/?EIO=4&transport=polling&t=4q4l52hw&sid=mIiiK2IPGBuW7cI2AAB4 HTTP/1.1" 200 -
2025-02-23 22:16:55,162 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4l51d9&sid=NEzfQTk1HkRknz5_AAB2 HTTP/1.1" 200 -
2025-02-23 22:16:55,165 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4l5s8z&sid=bSb4Ud9Dy4V3zwIRAAB3 HTTP/1.1" 200 -
2025-02-23 22:16:55,165 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4l7l7a&sid=mIiiK2IPGBuW7cI2AAB4 HTTP/1.1" 200 -
2025-02-23 22:16:55,168 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "POST /socket.io/?EIO=4&transport=polling&t=4q4l7t8u&sid=WkNOKw-lcOcRYlv6AAB5 HTTP/1.1" 200 -
2025-02-23 22:16:55,169 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4l9xux&sid=WkNOKw-lcOcRYlv6AAB5 HTTP/1.1" 200 -
2025-02-23 22:16:55,171 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "POST /socket.io/?EIO=4&transport=polling&t=4q4l9gx3&sid=8i2EXosJghPPELNIAAB6 HTTP/1.1" 200 -
2025-02-23 22:16:55,175 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4la64c&sid=8i2EXosJghPPELNIAAB6 HTTP/1.1" 200 -
2025-02-23 22:16:55,176 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "POST /socket.io/?EIO=4&transport=polling&t=4q4laxjz&sid=EXHTSj2HV56TVLLEAAB9 HTTP/1.1" 200 -
2025-02-23 22:16:55,177 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4lb5f7&sid=EXHTSj2HV56TVLLEAAB9 HTTP/1.1" 200 -
2025-02-23 22:16:55,177 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "POST /socket.io/?EIO=4&transport=polling&t=4q4lcb0q&sid=wNllK4r8ZIG3aUGqAAB7 HTTP/1.1" 200 -
2025-02-23 22:16:55,178 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4lcah6&sid=wNllK4r8ZIG3aUGqAAB7 HTTP/1.1" 200 -
2025-02-23 22:16:55,180 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "POST /socket.io/?EIO=4&transport=polling&t=4q4ldmje&sid=yFwN7I0yNkR5fA4cAACB HTTP/1.1" 200 -
2025-02-23 22:16:55,181 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4levok&sid=yFwN7I0yNkR5fA4cAACB HTTP/1.1" 200 -
2025-02-23 22:16:55,182 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "POST /socket.io/?EIO=4&transport=polling&t=4q4ld86w&sid=uCckEHooDAskicRMAAB8 HTTP/1.1" 200 -
2025-02-23 22:16:55,182 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4ld5ee&sid=uCckEHooDAskicRMAAB8 HTTP/1.1" 200 -
2025-02-23 22:16:55,183 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "POST /socket.io/?EIO=4&transport=polling&t=4q4lgs60&sid=VbdXWJZ6YDrxa_JPAACA HTTP/1.1" 200 -
2025-02-23 22:16:55,185 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "POST /socket.io/?EIO=4&transport=polling&t=4q4lgyov&sid=qkFw7RQhcnZ5YlmSAAB_ HTTP/1.1" 200 -
2025-02-23 22:16:55,187 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "POST /socket.io/?EIO=4&transport=polling&t=4q4lhyn5&sid=Ey4IhGzEPzMsJpsZAAB- HTTP/1.1" 200 -
2025-02-23 22:16:55,188 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4lgyxi&sid=VbdXWJZ6YDrxa_JPAACA HTTP/1.1" 200 -
2025-02-23 22:16:55,188 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4lhf43&sid=qkFw7RQhcnZ5YlmSAAB_ HTTP/1.1" 200 -
2025-02-23 22:16:55,189 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4lhkh2&sid=Ey4IhGzEPzMsJpsZAAB- HTTP/1.1" 200 -
2025-02-23 22:16:55,190 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4m9i8d&sid=ZduIugIJ0xxYjhiNAABx HTTP/1.1" 200 -
2025-02-23 22:16:55,191 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4mda23&sid=SLJ0J72DtufbzTwOAABy HTTP/1.1" 200 -
2025-02-23 22:16:55,191 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4mbpdc&sid=Rsv8Gnm8YVCRY2MJAABz HTTP/1.1" 200 -
2025-02-23 22:16:55,196 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4mwsvc&sid=zWJK0vAWakOELSNOAAB0 HTTP/1.1" 200 -
2025-02-23 22:16:55,210 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4mx2ay&sid=vttYefdNXchD9gpDAAB1 HTTP/1.1" 200 -
2025-02-23 22:16:55,223 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4n65bv&sid=NEzfQTk1HkRknz5_AAB2 HTTP/1.1" 200 -
2025-02-23 22:16:55,239 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4nagty&sid=mIiiK2IPGBuW7cI2AAB4 HTTP/1.1" 200 -
2025-02-23 22:16:55,250 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4n7qpl&sid=bSb4Ud9Dy4V3zwIRAAB3 HTTP/1.1" 200 -
2025-02-23 22:16:55,263 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4nakjh&sid=WkNOKw-lcOcRYlv6AAB5 HTTP/1.1" 200 -
2025-02-23 22:16:55,274 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4ncnym&sid=8i2EXosJghPPELNIAAB6 HTTP/1.1" 200 -
2025-02-23 22:16:55,288 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4nfqbt&sid=EXHTSj2HV56TVLLEAAB9 HTTP/1.1" 200 -
2025-02-23 22:16:55,301 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4ngrbj&sid=wNllK4r8ZIG3aUGqAAB7 HTTP/1.1" 200 -
2025-02-23 22:16:55,723 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q5191o6 HTTP/1.1" 200 -
2025-02-23 22:16:55,728 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q51a0r5 HTTP/1.1" 200 -
2025-02-23 22:16:55,729 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q51ad8i HTTP/1.1" 200 -
2025-02-23 22:16:55,737 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "POST /socket.io/?EIO=4&transport=polling&t=4q52q9gx&sid=otVeJM4wVAn0TRjpAACU HTTP/1.1" 200 -
2025-02-23 22:16:55,741 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q52qc0h&sid=otVeJM4wVAn0TRjpAACU HTTP/1.1" 200 -
2025-02-23 22:16:55,741 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4njwoc&sid=yFwN7I0yNkR5fA4cAACB HTTP/1.1" 200 -
2025-02-23 22:16:55,746 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "POST /socket.io/?EIO=4&transport=polling&t=4q52q9iv&sid=7aEfcxKFWHoHlkBmAACV HTTP/1.1" 200 -
2025-02-23 22:16:55,747 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q52q5dr&sid=7aEfcxKFWHoHlkBmAACV HTTP/1.1" 200 -
2025-02-23 22:16:55,754 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "POST /socket.io/?EIO=4&transport=polling&t=4q52rhav&sid=o4mUMi4Ghb7IPpH_AACW HTTP/1.1" 200 -
2025-02-23 22:16:55,756 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q52ruyx&sid=o4mUMi4Ghb7IPpH_AACW HTTP/1.1" 200 -
2025-02-23 22:16:55,765 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q533b0j&sid=otVeJM4wVAn0TRjpAACU HTTP/1.1" 200 -
2025-02-23 22:16:55,772 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q53ajhq&sid=7aEfcxKFWHoHlkBmAACV HTTP/1.1" 200 -
2025-02-23 22:16:55,785 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q53lwqq&sid=o4mUMi4Ghb7IPpH_AACW HTTP/1.1" 200 -
2025-02-23 22:16:55,931 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:55] "GET /socket.io/?EIO=4&transport=polling&t=4q4nlyx4&sid=uCckEHooDAskicRMAAB8 HTTP/1.1" 200 -
2025-02-23 22:16:56,348 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:56] "GET /socket.io/?EIO=4&transport=polling&t=4q4npr9z&sid=VbdXWJZ6YDrxa_JPAACA HTTP/1.1" 200 -
2025-02-23 22:16:58,049 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:58] "GET /socket.io/?EIO=4&transport=polling&t=4q4nrbp9&sid=Ey4IhGzEPzMsJpsZAAB- HTTP/1.1" 200 -
2025-02-23 22:16:58,145 INFO: 127.0.0.1 - - [23/Feb/2025 22:16:58] "GET /socket.io/?EIO=4&transport=polling&t=4q4npd7e&sid=qkFw7RQhcnZ5YlmSAAB_ HTTP/1.1" 200 -
2025-02-23 22:31:08,482 INFO: 127.0.0.1 - - [23/Feb/2025 22:31:08] "GET /socket.io/?EIO=4&transport=polling&t=58f1zfjt HTTP/1.1" 200 -
2025-02-23 22:31:08,505 INFO: 127.0.0.1 - - [23/Feb/2025 22:31:08] "POST /socket.io/?EIO=4&transport=polling&t=58f2iry7&sid=BFYoiNMjSlUSnNoBAACa HTTP/1.1" 200 -
2025-02-23 22:31:08,597 INFO: 127.0.0.1 - - [23/Feb/2025 22:31:08] "GET /socket.io/?EIO=4&transport=websocket&sid=t1O35-QFQmGq5s4VAABs HTTP/1.1" 200 -
2025-02-23 22:31:08,617 INFO: 127.0.0.1 - - [23/Feb/2025 22:31:08] "GET /socket.io/?EIO=4&transport=polling&t=58f2jdyj&sid=BFYoiNMjSlUSnNoBAACa HTTP/1.1" 200 -
2025-02-23 22:31:08,665 INFO: 127.0.0.1 - - [23/Feb/2025 22:31:08] "GET /socket.io/?EIO=4&transport=websocket&sid=AZgdcdzaYk3mdJ-9AABu HTTP/1.1" 200 -
2025-02-23 22:31:08,669 INFO: 127.0.0.1 - - [23/Feb/2025 22:31:08] "GET /socket.io/?EIO=4&transport=websocket&sid=yFwN7I0yNkR5fA4cAACB HTTP/1.1" 200 -
2025-02-23 22:31:08,722 INFO: 127.0.0.1 - - [23/Feb/2025 22:31:08] "GET /socket.io/?EIO=4&transport=polling&t=58f8sv9x&sid=BFYoiNMjSlUSnNoBAACa HTTP/1.1" 200 -
2025-02-23 22:31:08,729 INFO: 127.0.0.1 - - [23/Feb/2025 22:31:08] "GET /socket.io/?EIO=4&transport=polling&t=58f9261l&sid=BFYoiNMjSlUSnNoBAACa HTTP/1.1" 200 -
2025-02-23 22:31:08,943 INFO: 127.0.0.1 - - [23/Feb/2025 22:31:08] "GET /socket.io/?EIO=4&transport=polling&t=58feyma0 HTTP/1.1" 200 -
2025-02-23 22:31:08,955 INFO: 127.0.0.1 - - [23/Feb/2025 22:31:08] "POST /socket.io/?EIO=4&transport=polling&t=58ff6d59&sid=NN-hoJPbAxd_wbBzAACc HTTP/1.1" 200 -
2025-02-23 22:31:09,012 INFO: 127.0.0.1 - - [23/Feb/2025 22:31:09] "GET /socket.io/?EIO=4&transport=polling&t=58ff754z&sid=NN-hoJPbAxd_wbBzAACc HTTP/1.1" 200 -
2025-02-23 22:31:09,134 INFO: Entering list_tasks_json route...
2025-02-23 22:31:09,135 DEBUG: Filters used in API: {'is_archived': False}
2025-02-23 22:31:09,149 INFO: BEGIN (implicit)
2025-02-23 22:31:09,153 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 22:31:09,161 INFO: BEGIN (implicit)
2025-02-23 22:31:09,161 DEBUG: Applying filters: {'is_archived': False}
2025-02-23 22:31:09,163 INFO: BEGIN (implicit)
2025-02-23 22:31:09,164 INFO: [cached since 4524s ago] {}
2025-02-23 22:31:09,167 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 22:31:09,193 INFO: [cached since 4524s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 22:31:09,168 INFO: 127.0.0.1 - - [23/Feb/2025 22:31:09] "GET /socket.io/?EIO=4&transport=polling&t=58finytw&sid=NN-hoJPbAxd_wbBzAACc HTTP/1.1" 200 -
2025-02-23 22:31:09,176 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 22:31:09,190 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-23 22:31:09,196 INFO: BEGIN (implicit)
2025-02-23 22:31:09,196 INFO: [cached since 4524s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 22:31:09,198 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-23 22:31:09,200 INFO: [cached since 4531s ago] {'param_1': 110, 'param_2': 0}
2025-02-23 22:31:09,327 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:31:09,329 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 22:31:09,330 INFO: [cached since 4524s ago] {}
2025-02-23 22:31:09,329 INFO: [cached since 4524s ago] {'param_1': 1}
2025-02-23 22:31:09,372 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 22:31:09,379 INFO: [cached since 4524s ago] {}
2025-02-23 22:31:09,384 INFO: ROLLBACK
2025-02-23 22:31:09,388 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:31:09,388 INFO: [cached since 4524s ago] {'param_1': 2}
2025-02-23 22:31:09,464 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:31:09,465 INFO: 127.0.0.1 - - [23/Feb/2025 22:31:09] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 22:31:09,514 INFO: [cached since 4524s ago] {'param_1': 3}
2025-02-23 22:31:09,514 INFO: ROLLBACK
2025-02-23 22:31:09,595 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:31:09,602 INFO: 127.0.0.1 - - [23/Feb/2025 22:31:09] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 22:31:09,610 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-23 22:31:09,610 INFO: [cached since 4525s ago] {'param_1': 4}
2025-02-23 22:31:09,610 INFO: [cached since 4531s ago] {}
2025-02-23 22:31:09,658 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:31:09,658 INFO: [cached since 4525s ago] {'param_1': 5}
2025-02-23 22:31:09,681 INFO: ROLLBACK
2025-02-23 22:31:09,681 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-23 22:31:09,690 INFO: [cached since 4531s ago] {}
2025-02-23 22:31:09,690 INFO: 127.0.0.1 - - [23/Feb/2025 22:31:09] "GET /api/contributors HTTP/1.1" 200 -
2025-02-23 22:31:09,687 INFO: BEGIN (implicit)
2025-02-23 22:31:09,699 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 22:31:09,700 INFO: [cached since 4531s ago] {}
2025-02-23 22:31:09,700 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-23 22:31:09,700 INFO: [cached since 4524s ago] {'pk_1': 19}
2025-02-23 22:31:09,710 INFO: ROLLBACK
2025-02-23 22:31:09,712 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 22:31:09,712 INFO: [cached since 4525s ago] {}
2025-02-23 22:31:09,713 INFO: 127.0.0.1 - - [23/Feb/2025 22:31:09] "GET /api/tasks HTTP/1.1" 200 -
2025-02-23 22:31:09,715 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-23 22:31:09,719 INFO: [cached since 4524s ago] {'param_1': 19}
2025-02-23 22:31:09,733 INFO: ROLLBACK
2025-02-23 22:31:09,735 INFO: 127.0.0.1 - - [23/Feb/2025 22:31:09] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-02-23 22:32:33,391 INFO: 127.0.0.1 - - [23/Feb/2025 22:32:33] "GET /socket.io/?EIO=4&transport=polling&t=5a8kilhd HTTP/1.1" 200 -
2025-02-23 22:32:33,614 INFO: 127.0.0.1 - - [23/Feb/2025 22:32:33] "POST /socket.io/?EIO=4&transport=polling&t=5a8ovvgp&sid=7OxTts4qE0ikPE-cAACe HTTP/1.1" 200 -
2025-02-23 22:32:33,614 INFO: 127.0.0.1 - - [23/Feb/2025 22:32:33] "GET /socket.io/?EIO=4&transport=polling&t=5a8ox7fs&sid=7OxTts4qE0ikPE-cAACe HTTP/1.1" 200 -
2025-02-23 22:33:49,302 INFO: 127.0.0.1 - - [23/Feb/2025 22:33:49] "GET /socket.io/?EIO=4&transport=polling&t=5bv587tm HTTP/1.1" 200 -
2025-02-23 22:33:49,362 INFO: 127.0.0.1 - - [23/Feb/2025 22:33:49] "POST /socket.io/?EIO=4&transport=polling&t=5bv7310j&sid=N7Q4Gs5chM44sTPtAACg HTTP/1.1" 200 -
2025-02-23 22:33:49,377 INFO: 127.0.0.1 - - [23/Feb/2025 22:33:49] "GET /socket.io/?EIO=4&transport=polling&t=5bv74zbi&sid=N7Q4Gs5chM44sTPtAACg HTTP/1.1" 200 -
2025-02-23 22:33:49,384 INFO: 127.0.0.1 - - [23/Feb/2025 22:33:49] "GET /socket.io/?EIO=4&transport=polling&t=5bv7n1pc&sid=N7Q4Gs5chM44sTPtAACg HTTP/1.1" 200 -
2025-02-23 22:34:00,196 INFO: 127.0.0.1 - - [23/Feb/2025 22:34:00] "GET /socket.io/?EIO=4&transport=polling&t=5c3jiqgo HTTP/1.1" 200 -
2025-02-23 22:34:00,262 INFO: 127.0.0.1 - - [23/Feb/2025 22:34:00] "POST /socket.io/?EIO=4&transport=polling&t=5c3luesm&sid=undLJ7DmOgIanHk6AACi HTTP/1.1" 200 -
2025-02-23 22:34:00,361 INFO: 127.0.0.1 - - [23/Feb/2025 22:34:00] "GET /socket.io/?EIO=4&transport=polling&t=5c3lv5c8&sid=undLJ7DmOgIanHk6AACi HTTP/1.1" 200 -
2025-02-23 22:36:15,665 INFO: 127.0.0.1 - - [23/Feb/2025 22:36:15] "GET /socket.io/?EIO=4&transport=polling&t=5f02yaek HTTP/1.1" 200 -
2025-02-23 22:36:15,778 INFO: 127.0.0.1 - - [23/Feb/2025 22:36:15] "GET /socket.io/?EIO=4&transport=websocket&sid=undLJ7DmOgIanHk6AACi HTTP/1.1" 200 -
2025-02-23 22:36:15,779 INFO: 127.0.0.1 - - [23/Feb/2025 22:36:15] "GET /socket.io/?EIO=4&transport=websocket&sid=NN-hoJPbAxd_wbBzAACc HTTP/1.1" 200 -
2025-02-23 22:36:15,781 INFO: 127.0.0.1 - - [23/Feb/2025 22:36:15] "GET /socket.io/?EIO=4&transport=websocket&sid=7OxTts4qE0ikPE-cAACe HTTP/1.1" 200 -
2025-02-23 22:36:15,787 INFO: 127.0.0.1 - - [23/Feb/2025 22:36:15] "GET /socket.io/?EIO=4&transport=websocket&sid=N7Q4Gs5chM44sTPtAACg HTTP/1.1" 200 -
2025-02-23 22:36:15,805 INFO: 127.0.0.1 - - [23/Feb/2025 22:36:15] "POST /socket.io/?EIO=4&transport=polling&t=5f04k7q6&sid=LxmlPjiH-c5zJjwbAACk HTTP/1.1" 200 -
2025-02-23 22:36:15,806 INFO: 127.0.0.1 - - [23/Feb/2025 22:36:15] "GET /socket.io/?EIO=4&transport=polling&t=5f066dq7&sid=LxmlPjiH-c5zJjwbAACk HTTP/1.1" 200 -
2025-02-23 22:36:15,811 INFO: 127.0.0.1 - - [23/Feb/2025 22:36:15] "GET /socket.io/?EIO=4&transport=polling&t=5f0759y4&sid=LxmlPjiH-c5zJjwbAACk HTTP/1.1" 200 -
2025-02-23 22:36:15,821 INFO: 127.0.0.1 - - [23/Feb/2025 22:36:15] "GET /socket.io/?EIO=4&transport=polling&t=5f07d9bh&sid=LxmlPjiH-c5zJjwbAACk HTTP/1.1" 200 -
2025-02-23 22:36:16,064 INFO: 127.0.0.1 - - [23/Feb/2025 22:36:16] "GET /socket.io/?EIO=4&transport=polling&t=5f0e3txa HTTP/1.1" 200 -
2025-02-23 22:36:16,118 INFO: 127.0.0.1 - - [23/Feb/2025 22:36:16] "POST /socket.io/?EIO=4&transport=polling&t=5f0eh0op&sid=PhyCbS24X2BSo2DLAACm HTTP/1.1" 200 -
2025-02-23 22:36:16,133 INFO: 127.0.0.1 - - [23/Feb/2025 22:36:16] "GET /socket.io/?EIO=4&transport=polling&t=5f0eir5v&sid=PhyCbS24X2BSo2DLAACm HTTP/1.1" 200 -
2025-02-23 22:36:16,249 INFO: BEGIN (implicit)
2025-02-23 22:36:16,273 INFO: BEGIN (implicit)
2025-02-23 22:36:16,276 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 22:36:16,279 INFO: BEGIN (implicit)
2025-02-23 22:36:16,282 INFO: [cached since 4831s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 22:36:16,283 INFO: Entering list_tasks_json route...
2025-02-23 22:36:16,283 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 22:36:16,283 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 22:36:16,284 DEBUG: Filters used in API: {'is_archived': False}
2025-02-23 22:36:16,285 INFO: 127.0.0.1 - - [23/Feb/2025 22:36:16] "GET /socket.io/?EIO=4&transport=polling&t=5f0hvxe2&sid=PhyCbS24X2BSo2DLAACm HTTP/1.1" 200 -
2025-02-23 22:36:16,285 INFO: [cached since 4831s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 22:36:16,286 INFO: [cached since 4831s ago] {}
2025-02-23 22:36:16,292 DEBUG: Applying filters: {'is_archived': False}
2025-02-23 22:36:16,306 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 22:36:16,328 INFO: [cached since 4831s ago] {}
2025-02-23 22:36:16,317 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 22:36:16,328 INFO: [cached since 4831s ago] {}
2025-02-23 22:36:16,324 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-23 22:36:16,327 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:36:16,330 INFO: BEGIN (implicit)
2025-02-23 22:36:16,330 INFO: [cached since 4831s ago] {'param_1': 1}
2025-02-23 22:36:16,330 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-23 22:36:16,332 INFO: ROLLBACK
2025-02-23 22:36:16,333 INFO: ROLLBACK
2025-02-23 22:36:16,333 INFO: [cached since 4838s ago] {'param_1': 110, 'param_2': 0}
2025-02-23 22:36:16,334 INFO: 127.0.0.1 - - [23/Feb/2025 22:36:16] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 22:36:16,334 INFO: 127.0.0.1 - - [23/Feb/2025 22:36:16] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 22:36:16,346 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:36:16,347 INFO: [cached since 4831s ago] {'param_1': 2}
2025-02-23 22:36:16,363 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:36:16,366 INFO: [cached since 4831s ago] {'param_1': 3}
2025-02-23 22:36:16,372 INFO: BEGIN (implicit)
2025-02-23 22:36:16,373 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-23 22:36:16,373 INFO: [cached since 4831s ago] {'pk_1': 19}
2025-02-23 22:36:16,375 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:36:16,377 INFO: [cached since 4831s ago] {'param_1': 4}
2025-02-23 22:36:16,377 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 22:36:16,378 INFO: [cached since 4831s ago] {}
2025-02-23 22:36:16,379 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-23 22:36:16,379 INFO: [cached since 4831s ago] {'param_1': 19}
2025-02-23 22:36:16,382 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:36:16,383 INFO: ROLLBACK
2025-02-23 22:36:16,384 INFO: [cached since 4831s ago] {'param_1': 5}
2025-02-23 22:36:16,394 INFO: 127.0.0.1 - - [23/Feb/2025 22:36:16] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-02-23 22:36:16,408 INFO: ROLLBACK
2025-02-23 22:36:16,409 INFO: 127.0.0.1 - - [23/Feb/2025 22:36:16] "GET /api/contributors HTTP/1.1" 200 -
2025-02-23 22:36:16,453 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-23 22:36:16,453 INFO: [cached since 4838s ago] {}
2025-02-23 22:36:16,456 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-23 22:36:16,457 INFO: [cached since 4838s ago] {}
2025-02-23 22:36:16,458 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 22:36:16,458 INFO: [cached since 4838s ago] {}
2025-02-23 22:36:16,462 INFO: ROLLBACK
2025-02-23 22:36:16,463 INFO: 127.0.0.1 - - [23/Feb/2025 22:36:16] "GET /api/tasks HTTP/1.1" 200 -
2025-02-23 22:46:15,424 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:15] "GET /socket.io/?EIO=4&transport=polling&t=5ruuzwls HTTP/1.1" 200 -
2025-02-23 22:46:15,693 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:15] "POST /socket.io/?EIO=4&transport=polling&t=5ruzwart&sid=uVPMaYmPyYVYvXAOAACo HTTP/1.1" 200 -
2025-02-23 22:46:15,695 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:15] "GET /socket.io/?EIO=4&transport=polling&t=5ruzz4r1&sid=uVPMaYmPyYVYvXAOAACo HTTP/1.1" 200 -
2025-02-23 22:46:15,768 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:15] "GET /socket.io/?EIO=4&transport=polling&t=5rv48qwd&sid=uVPMaYmPyYVYvXAOAACo HTTP/1.1" 200 -
2025-02-23 22:46:22,507 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:22] "GET /socket.io/?EIO=4&transport=polling&t=5s0boj4t HTTP/1.1" 200 -
2025-02-23 22:46:22,577 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:22] "POST /socket.io/?EIO=4&transport=polling&t=5s0d96ac&sid=xMBnKW9X6hevQAtqAACq HTTP/1.1" 200 -
2025-02-23 22:46:22,580 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:22] "GET /socket.io/?EIO=4&transport=polling&t=5s0daolt&sid=xMBnKW9X6hevQAtqAACq HTTP/1.1" 200 -
2025-02-23 22:46:32,612 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:32] "GET /socket.io/?EIO=4&transport=polling&t=5s847bte HTTP/1.1" 200 -
2025-02-23 22:46:32,713 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:32] "GET /socket.io/?EIO=4&transport=websocket&sid=uVPMaYmPyYVYvXAOAACo HTTP/1.1" 200 -
2025-02-23 22:46:32,714 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:32] "GET /socket.io/?EIO=4&transport=websocket&sid=xMBnKW9X6hevQAtqAACq HTTP/1.1" 200 -
2025-02-23 22:46:32,715 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:32] "GET /socket.io/?EIO=4&transport=websocket&sid=PhyCbS24X2BSo2DLAACm HTTP/1.1" 200 -
2025-02-23 22:46:32,758 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:32] "POST /socket.io/?EIO=4&transport=polling&t=5s88fwej&sid=mR0QGBy8Z6PmXV6EAACs HTTP/1.1" 200 -
2025-02-23 22:46:32,762 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:32] "GET /socket.io/?EIO=4&transport=polling&t=5s88ixn6&sid=mR0QGBy8Z6PmXV6EAACs HTTP/1.1" 200 -
2025-02-23 22:46:32,778 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:32] "GET /socket.io/?EIO=4&transport=polling&t=5s894mo9&sid=mR0QGBy8Z6PmXV6EAACs HTTP/1.1" 200 -
2025-02-23 22:46:33,229 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:33] "GET /socket.io/?EIO=4&transport=polling&t=5s8llry7 HTTP/1.1" 200 -
2025-02-23 22:46:33,272 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:33] "POST /socket.io/?EIO=4&transport=polling&t=5s8lwtva&sid=r4sahs96P_a0lKi2AACu HTTP/1.1" 200 -
2025-02-23 22:46:33,273 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:33] "GET /socket.io/?EIO=4&transport=polling&t=5s8lwn96&sid=r4sahs96P_a0lKi2AACu HTTP/1.1" 200 -
2025-02-23 22:46:33,287 INFO: BEGIN (implicit)
2025-02-23 22:46:33,293 INFO: BEGIN (implicit)
2025-02-23 22:46:33,300 INFO: BEGIN (implicit)
2025-02-23 22:46:33,309 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 22:46:33,312 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 22:46:33,313 INFO: Entering list_tasks_json route...
2025-02-23 22:46:33,314 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 22:46:33,316 INFO: [cached since 5448s ago] {}
2025-02-23 22:46:33,316 INFO: [cached since 5448s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 22:46:33,317 DEBUG: Filters used in API: {'is_archived': False}
2025-02-23 22:46:33,317 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:33] "GET /socket.io/?EIO=4&transport=polling&t=5s8n6enc&sid=r4sahs96P_a0lKi2AACu HTTP/1.1" 200 -
2025-02-23 22:46:33,318 INFO: [cached since 5448s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 22:46:33,323 DEBUG: Applying filters: {'is_archived': False}
2025-02-23 22:46:33,349 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-23 22:46:33,352 INFO: BEGIN (implicit)
2025-02-23 22:46:33,353 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-23 22:46:33,354 INFO: [cached since 5455s ago] {'param_1': 110, 'param_2': 0}
2025-02-23 22:46:33,391 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:46:33,391 INFO: [cached since 5448s ago] {'param_1': 1}
2025-02-23 22:46:33,394 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 22:46:33,394 INFO: [cached since 5448s ago] {}
2025-02-23 22:46:33,397 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 22:46:33,397 INFO: [cached since 5448s ago] {}
2025-02-23 22:46:33,412 INFO: ROLLBACK
2025-02-23 22:46:33,413 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:46:33,414 INFO: [cached since 5448s ago] {'param_1': 2}
2025-02-23 22:46:33,414 INFO: ROLLBACK
2025-02-23 22:46:33,416 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:46:33,417 INFO: [cached since 5448s ago] {'param_1': 3}
2025-02-23 22:46:33,424 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:33] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 22:46:33,425 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:46:33,433 INFO: [cached since 5448s ago] {'param_1': 4}
2025-02-23 22:46:33,425 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:33] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 22:46:33,449 INFO: BEGIN (implicit)
2025-02-23 22:46:33,449 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-23 22:46:33,450 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:46:33,450 INFO: [cached since 5448s ago] {'pk_1': 19}
2025-02-23 22:46:33,450 INFO: [cached since 5448s ago] {'param_1': 5}
2025-02-23 22:46:33,452 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 22:46:33,453 INFO: [cached since 5448s ago] {}
2025-02-23 22:46:33,453 INFO: ROLLBACK
2025-02-23 22:46:33,454 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:33] "GET /api/contributors HTTP/1.1" 200 -
2025-02-23 22:46:33,458 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-23 22:46:33,459 INFO: [cached since 5448s ago] {'param_1': 19}
2025-02-23 22:46:33,464 INFO: ROLLBACK
2025-02-23 22:46:33,465 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:33] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-02-23 22:46:33,509 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-23 22:46:33,509 INFO: [cached since 5455s ago] {}
2025-02-23 22:46:33,514 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-23 22:46:33,514 INFO: [cached since 5455s ago] {}
2025-02-23 22:46:33,517 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 22:46:33,517 INFO: [cached since 5455s ago] {}
2025-02-23 22:46:33,544 INFO: ROLLBACK
2025-02-23 22:46:33,544 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:33] "GET /api/tasks HTTP/1.1" 200 -
2025-02-23 22:46:52,110 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:52] "GET /socket.io/?EIO=4&transport=websocket&sid=r4sahs96P_a0lKi2AACu HTTP/1.1" 200 -
2025-02-23 22:46:52,365 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:52] "GET /socket.io/?EIO=4&transport=polling&t=5snczf8w HTTP/1.1" 200 -
2025-02-23 22:46:52,375 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:52] "POST /socket.io/?EIO=4&transport=polling&t=5snddfrt&sid=Q9zXGGIqUjGgfhpfAACw HTTP/1.1" 200 -
2025-02-23 22:46:52,391 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:52] "GET /socket.io/?EIO=4&transport=polling&t=5sndfbx4&sid=Q9zXGGIqUjGgfhpfAACw HTTP/1.1" 200 -
2025-02-23 22:46:52,405 INFO: BEGIN (implicit)
2025-02-23 22:46:52,408 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 22:46:52,408 INFO: [cached since 5467s ago] {}
2025-02-23 22:46:52,410 INFO: BEGIN (implicit)
2025-02-23 22:46:52,411 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 22:46:52,412 INFO: [cached since 5467s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 22:46:52,415 INFO: Entering list_tasks_json route...
2025-02-23 22:46:52,418 DEBUG: Filters used in API: {'is_archived': False}
2025-02-23 22:46:52,425 DEBUG: Applying filters: {'is_archived': False}
2025-02-23 22:46:52,495 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:52] "GET /socket.io/?EIO=4&transport=polling&t=5snekq4t&sid=Q9zXGGIqUjGgfhpfAACw HTTP/1.1" 200 -
2025-02-23 22:46:52,513 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 22:46:52,516 INFO: [cached since 5467s ago] {}
2025-02-23 22:46:52,534 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:46:52,536 INFO: [cached since 5467s ago] {'param_1': 1}
2025-02-23 22:46:52,540 INFO: ROLLBACK
2025-02-23 22:46:52,543 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:52] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 22:46:52,545 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-23 22:46:52,546 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:52] "GET /socket.io/?EIO=4&transport=polling&t=5sngxwhp&sid=Q9zXGGIqUjGgfhpfAACw HTTP/1.1" 200 -
2025-02-23 22:46:52,549 INFO: BEGIN (implicit)
2025-02-23 22:46:52,554 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:46:52,556 INFO: BEGIN (implicit)
2025-02-23 22:46:52,558 INFO: BEGIN (implicit)
2025-02-23 22:46:52,561 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-23 22:46:52,562 INFO: [cached since 5467s ago] {'pk_1': 19}
2025-02-23 22:46:52,560 INFO: [cached since 5468s ago] {'param_1': 2}
2025-02-23 22:46:52,561 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 22:46:52,563 INFO: [cached since 5467s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 22:46:52,559 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-23 22:46:52,564 INFO: [cached since 5474s ago] {'param_1': 110, 'param_2': 0}
2025-02-23 22:46:52,567 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:46:52,568 INFO: [cached since 5468s ago] {'param_1': 3}
2025-02-23 22:46:52,568 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 22:46:52,567 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 22:46:52,574 INFO: [cached since 5468s ago] {}
2025-02-23 22:46:52,573 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:46:52,575 INFO: [cached since 5468s ago] {'param_1': 4}
2025-02-23 22:46:52,573 INFO: [cached since 5467s ago] {}
2025-02-23 22:46:52,577 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-23 22:46:52,578 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:46:52,579 INFO: [cached since 5468s ago] {'param_1': 5}
2025-02-23 22:46:52,578 INFO: [cached since 5467s ago] {'param_1': 19}
2025-02-23 22:46:52,579 INFO: ROLLBACK
2025-02-23 22:46:52,581 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:52] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 22:46:52,583 INFO: ROLLBACK
2025-02-23 22:46:52,584 INFO: ROLLBACK
2025-02-23 22:46:52,586 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:52] "GET /api/contributors HTTP/1.1" 200 -
2025-02-23 22:46:52,587 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:52] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-02-23 22:46:52,826 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-23 22:46:52,826 INFO: [cached since 5474s ago] {}
2025-02-23 22:46:52,830 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-23 22:46:52,831 INFO: [cached since 5474s ago] {}
2025-02-23 22:46:52,835 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 22:46:52,835 INFO: [cached since 5474s ago] {}
2025-02-23 22:46:52,842 INFO: ROLLBACK
2025-02-23 22:46:52,842 INFO: 127.0.0.1 - - [23/Feb/2025 22:46:52] "GET /api/tasks HTTP/1.1" 200 -
2025-02-23 22:47:21,072 INFO: 127.0.0.1 - - [23/Feb/2025 22:47:21] "GET /socket.io/?EIO=4&transport=polling&t=5t9ijbey HTTP/1.1" 200 -
2025-02-23 22:47:21,206 INFO: 127.0.0.1 - - [23/Feb/2025 22:47:21] "POST /socket.io/?EIO=4&transport=polling&t=5t9m8zhf&sid=70bsLP3hq19onNpMAACy HTTP/1.1" 200 -
2025-02-23 22:47:21,208 INFO: 127.0.0.1 - - [23/Feb/2025 22:47:21] "GET /socket.io/?EIO=4&transport=polling&t=5t9m9x81&sid=70bsLP3hq19onNpMAACy HTTP/1.1" 200 -
2025-02-23 22:47:27,286 INFO: 127.0.0.1 - - [23/Feb/2025 22:47:27] "GET /socket.io/?EIO=4&transport=polling&t=5teaxhq3 HTTP/1.1" 200 -
2025-02-23 22:47:27,378 INFO: 127.0.0.1 - - [23/Feb/2025 22:47:27] "GET /socket.io/?EIO=4&transport=websocket&sid=Q9zXGGIqUjGgfhpfAACw HTTP/1.1" 200 -
2025-02-23 22:47:27,384 INFO: 127.0.0.1 - - [23/Feb/2025 22:47:27] "GET /socket.io/?EIO=4&transport=websocket&sid=70bsLP3hq19onNpMAACy HTTP/1.1" 200 -
2025-02-23 22:47:27,402 INFO: 127.0.0.1 - - [23/Feb/2025 22:47:27] "POST /socket.io/?EIO=4&transport=polling&t=5teeb1w1&sid=0UunXZe5rkPfGMPsAAC0 HTTP/1.1" 200 -
2025-02-23 22:47:27,407 INFO: 127.0.0.1 - - [23/Feb/2025 22:47:27] "GET /socket.io/?EIO=4&transport=polling&t=5teedp93&sid=0UunXZe5rkPfGMPsAAC0 HTTP/1.1" 200 -
2025-02-23 22:47:27,434 INFO: 127.0.0.1 - - [23/Feb/2025 22:47:27] "GET /socket.io/?EIO=4&transport=polling&t=5tef8cnz&sid=0UunXZe5rkPfGMPsAAC0 HTTP/1.1" 200 -
2025-02-23 22:47:27,852 INFO: 127.0.0.1 - - [23/Feb/2025 22:47:27] "GET /socket.io/?EIO=4&transport=polling&t=5teqcrzz HTTP/1.1" 200 -
2025-02-23 22:47:27,892 INFO: BEGIN (implicit)
2025-02-23 22:47:27,896 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 22:47:27,897 INFO: BEGIN (implicit)
2025-02-23 22:47:27,902 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 22:47:27,903 INFO: [cached since 5503s ago] {}
2025-02-23 22:47:27,898 INFO: [cached since 5503s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 22:47:27,899 INFO: Entering list_tasks_json route...
2025-02-23 22:47:27,909 DEBUG: Filters used in API: {'is_archived': False}
2025-02-23 22:47:27,917 DEBUG: Applying filters: {'is_archived': False}
2025-02-23 22:47:27,908 INFO: 127.0.0.1 - - [23/Feb/2025 22:47:27] "POST /socket.io/?EIO=4&transport=polling&t=5tes0gxw&sid=B74EIR-eDxx6awdIAAC2 HTTP/1.1" 200 -
2025-02-23 22:47:27,940 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 22:47:27,942 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:47:27,951 INFO: [cached since 5503s ago] {'param_1': 1}
2025-02-23 22:47:27,943 INFO: 127.0.0.1 - - [23/Feb/2025 22:47:27] "GET /socket.io/?EIO=4&transport=polling&t=5tes1ny7&sid=B74EIR-eDxx6awdIAAC2 HTTP/1.1" 200 -
2025-02-23 22:47:27,948 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-02-23 22:47:27,948 INFO: [cached since 5503s ago] {}
2025-02-23 22:47:27,953 INFO: BEGIN (implicit)
2025-02-23 22:47:27,953 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-02-23 22:47:27,956 INFO: 127.0.0.1 - - [23/Feb/2025 22:47:27] "GET /socket.io/?EIO=4&transport=polling&t=5tettt39&sid=B74EIR-eDxx6awdIAAC2 HTTP/1.1" 200 -
2025-02-23 22:47:27,957 INFO: [cached since 5509s ago] {'param_1': 110, 'param_2': 0}
2025-02-23 22:47:27,965 INFO: ROLLBACK
2025-02-23 22:47:27,968 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:47:27,969 INFO: [cached since 5503s ago] {'param_1': 2}
2025-02-23 22:47:27,969 INFO: 127.0.0.1 - - [23/Feb/2025 22:47:27] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 22:47:27,976 INFO: BEGIN (implicit)
2025-02-23 22:47:27,982 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:47:27,989 INFO: [cached since 5503s ago] {'param_1': 3}
2025-02-23 22:47:27,983 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-02-23 22:47:27,987 INFO: BEGIN (implicit)
2025-02-23 22:47:27,990 INFO: [cached since 5503s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-02-23 22:47:27,991 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-23 22:47:27,991 INFO: [cached since 5503s ago] {'pk_1': 19}
2025-02-23 22:47:27,993 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-02-23 22:47:27,993 INFO: [cached since 5503s ago] {}
2025-02-23 22:47:27,994 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 22:47:27,994 INFO: [cached since 5503s ago] {}
2025-02-23 22:47:27,995 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-02-23 22:47:27,996 INFO: [cached since 5503s ago] {'param_1': 19}
2025-02-23 22:47:27,996 INFO: ROLLBACK
2025-02-23 22:47:27,997 INFO: 127.0.0.1 - - [23/Feb/2025 22:47:27] "GET /api/projects HTTP/1.1" 200 -
2025-02-23 22:47:27,998 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:47:27,999 INFO: ROLLBACK
2025-02-23 22:47:28,000 INFO: [cached since 5503s ago] {'param_1': 4}
2025-02-23 22:47:28,001 INFO: 127.0.0.1 - - [23/Feb/2025 22:47:28] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-02-23 22:47:28,006 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-02-23 22:47:28,006 INFO: [cached since 5503s ago] {'param_1': 5}
2025-02-23 22:47:28,012 INFO: ROLLBACK
2025-02-23 22:47:28,012 INFO: 127.0.0.1 - - [23/Feb/2025 22:47:28] "GET /api/contributors HTTP/1.1" 200 -
2025-02-23 22:47:28,040 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-02-23 22:47:28,040 INFO: [cached since 5509s ago] {}
2025-02-23 22:47:28,046 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-02-23 22:47:28,046 INFO: [cached since 5509s ago] {}
2025-02-23 22:47:28,047 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-02-23 22:47:28,048 INFO: [cached since 5509s ago] {}
2025-02-23 22:47:28,053 INFO: ROLLBACK
2025-02-23 22:47:28,054 INFO: 127.0.0.1 - - [23/Feb/2025 22:47:28] "GET /api/tasks HTTP/1.1" 200 -
2025-02-23 22:57:25,619 INFO: 127.0.0.1 - - [23/Feb/2025 22:57:25] "GET /socket.io/?EIO=4&transport=polling&t=667z9f5r HTTP/1.1" 200 -
2025-02-23 22:57:25,773 INFO: 127.0.0.1 - - [23/Feb/2025 22:57:25] "POST /socket.io/?EIO=4&transport=polling&t=6682hd3a&sid=znmywFXwnR-OUMFIAAC4 HTTP/1.1" 200 -
2025-02-23 22:57:25,778 INFO: 127.0.0.1 - - [23/Feb/2025 22:57:25] "GET /socket.io/?EIO=4&transport=polling&t=6682iwd7&sid=znmywFXwnR-OUMFIAAC4 HTTP/1.1" 200 -
2025-02-23 22:57:33,272 INFO: 127.0.0.1 - - [23/Feb/2025 22:57:33] "GET /socket.io/?EIO=4&transport=polling&t=66dvtaza HTTP/1.1" 200 -
2025-02-23 22:57:33,389 INFO: 127.0.0.1 - - [23/Feb/2025 22:57:33] "POST /socket.io/?EIO=4&transport=polling&t=66dxvqgz&sid=EtKtZF27gUNTpjkbAAC6 HTTP/1.1" 200 -
2025-02-23 22:57:33,401 INFO: 127.0.0.1 - - [23/Feb/2025 22:57:33] "GET /socket.io/?EIO=4&transport=polling&t=66dxv8nv&sid=EtKtZF27gUNTpjkbAAC6 HTTP/1.1" 200 -
2025-02-23 22:57:41,926 INFO: 127.0.0.1 - - [23/Feb/2025 22:57:41] "GET /socket.io/?EIO=4&transport=polling&t=66kkiim8 HTTP/1.1" 200 -
2025-02-23 22:57:41,974 INFO: 127.0.0.1 - - [23/Feb/2025 22:57:41] "POST /socket.io/?EIO=4&transport=polling&t=66kls364&sid=b7P-Ozg1NJkgYLdOAAC8 HTTP/1.1" 200 -
2025-02-23 22:57:41,974 INFO: 127.0.0.1 - - [23/Feb/2025 22:57:41] "GET /socket.io/?EIO=4&transport=polling&t=66kltazj&sid=b7P-Ozg1NJkgYLdOAAC8 HTTP/1.1" 200 -
2025-02-23 22:57:41,977 INFO: 127.0.0.1 - - [23/Feb/2025 22:57:41] "GET /socket.io/?EIO=4&transport=polling&t=66klzoxy&sid=b7P-Ozg1NJkgYLdOAAC8 HTTP/1.1" 200 -
2025-02-23 22:57:55,188 INFO: 127.0.0.1 - - [23/Feb/2025 22:57:55] "GET /socket.io/?EIO=4&transport=polling&t=66usopzj HTTP/1.1" 200 -
2025-02-23 22:57:55,243 INFO: 127.0.0.1 - - [23/Feb/2025 22:57:55] "POST /socket.io/?EIO=4&transport=polling&t=66uudrth&sid=0OGBmOia_SPgcd5NAAC- HTTP/1.1" 200 -
2025-02-23 22:57:55,243 INFO: 127.0.0.1 - - [23/Feb/2025 22:57:55] "GET /socket.io/?EIO=4&transport=polling&t=66uuefcn&sid=0OGBmOia_SPgcd5NAAC- HTTP/1.1" 200 -
2025-02-23 23:02:39,671 INFO: 127.0.0.1 - - [23/Feb/2025 23:02:39] "OPTIONS /api/tasks/298 HTTP/1.1" 200 -
2025-02-23 23:02:39,680 INFO: BEGIN (implicit)
2025-02-23 23:02:39,683 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 23:02:39,683 INFO: [cached since 3239s ago] {'pk_1': 298}
2025-02-23 23:02:39,692 DEBUG: Received update payload for Task ID 298: {'priority': 'Critical'}
2025-02-23 23:02:39,692 DEBUG: 🔍 Validating priority: key=priority, value=Critical, task_type=User Story
2025-02-23 23:02:39,693 DEBUG: Updated priority for Task ID 298
2025-02-23 23:02:39,727 INFO: UPDATE task SET priority=%(priority)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-02-23 23:02:39,728 INFO: [generated in 0.00057s] {'priority': None, 'updated_at': datetime.datetime(2025, 2, 23, 22, 2, 39, 693286), 'task_id': 298}
2025-02-23 23:02:39,742 INFO: COMMIT
2025-02-23 23:02:39,746 INFO: Task ID 298 updated successfully. Updated fields: ['priority']
2025-02-23 23:02:39,746 INFO: BEGIN (implicit)
2025-02-23 23:02:39,747 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 23:02:39,747 INFO: [generated in 0.00015s] {'pk_1': 298}
2025-02-23 23:02:39,750 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-23 23:02:39,751 INFO: [cached since 3239s ago] {'pk_1': 5}
2025-02-23 23:02:39,753 INFO: UPDATE task SET updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-02-23 23:02:39,760 INFO: [generated in 0.00627s] {'updated_at': datetime.datetime(2025, 2, 23, 22, 2, 39, 752997), 'task_id': 298}
2025-02-23 23:02:39,773 INFO: COMMIT
2025-02-23 23:02:39,783 INFO: Task ID 298 updated successfully. Updated fields: ['priority']
2025-02-23 23:02:39,783 INFO: BEGIN (implicit)
2025-02-23 23:02:39,784 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 23:02:39,784 INFO: [cached since 0.03752s ago] {'pk_1': 298}
2025-02-23 23:02:39,788 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-23 23:02:39,788 INFO: [cached since 3239s ago] {'pk_1': 5}
2025-02-23 23:02:39,790 INFO: ROLLBACK
2025-02-23 23:02:39,790 INFO: 127.0.0.1 - - [23/Feb/2025 23:02:39] "PATCH /api/tasks/298 HTTP/1.1" 200 -
2025-02-23 23:02:42,446 INFO: BEGIN (implicit)
2025-02-23 23:02:42,447 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 23:02:42,447 INFO: [cached since 3242s ago] {'pk_1': 298}
2025-02-23 23:02:42,449 DEBUG: Received update payload for Task ID 298: {'priority': 'High'}
2025-02-23 23:02:42,449 DEBUG: 🔍 Validating priority: key=priority, value=High, task_type=User Story
2025-02-23 23:02:42,449 DEBUG: Updated priority for Task ID 298
2025-02-23 23:02:42,451 INFO: UPDATE task SET updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-02-23 23:02:42,451 INFO: [cached since 2.698s ago] {'updated_at': datetime.datetime(2025, 2, 23, 22, 2, 42, 449853), 'task_id': 298}
2025-02-23 23:02:42,458 INFO: COMMIT
2025-02-23 23:02:42,460 INFO: Task ID 298 updated successfully. Updated fields: ['priority']
2025-02-23 23:02:42,461 INFO: BEGIN (implicit)
2025-02-23 23:02:42,461 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 23:02:42,461 INFO: [cached since 2.715s ago] {'pk_1': 298}
2025-02-23 23:02:42,463 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-23 23:02:42,463 INFO: [cached since 3242s ago] {'pk_1': 5}
2025-02-23 23:02:42,464 INFO: UPDATE task SET updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-02-23 23:02:42,468 INFO: [cached since 2.714s ago] {'updated_at': datetime.datetime(2025, 2, 23, 22, 2, 42, 463994), 'task_id': 298}
2025-02-23 23:02:42,470 INFO: COMMIT
2025-02-23 23:02:42,472 INFO: Task ID 298 updated successfully. Updated fields: ['priority']
2025-02-23 23:02:42,472 INFO: BEGIN (implicit)
2025-02-23 23:02:42,473 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 23:02:42,473 INFO: [cached since 2.726s ago] {'pk_1': 298}
2025-02-23 23:02:42,476 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-23 23:02:42,476 INFO: [cached since 3242s ago] {'pk_1': 5}
2025-02-23 23:02:42,478 INFO: ROLLBACK
2025-02-23 23:02:42,479 INFO: 127.0.0.1 - - [23/Feb/2025 23:02:42] "PATCH /api/tasks/298 HTTP/1.1" 200 -
2025-02-23 23:03:25,280 INFO: Fetching task details for Task ID 298.
2025-02-23 23:03:25,281 INFO: Fetching task with ID 298.
2025-02-23 23:03:25,288 INFO: BEGIN (implicit)
2025-02-23 23:03:25,294 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-02-23 23:03:25,295 INFO: [cached since 3285s ago] {'pk_1': 298}
2025-02-23 23:03:25,309 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x10ace30b0>, 'task_type': 'User Story', 'project_id': 1, 'priority': None, 'story_points': 0, 'epic_priority': None, 'contributor_id': 5, 'completed_date': None, 'id': 298, 'is_archived': False, 'name': 'example user story with parent epic 297', 'completed': False, 'sort_order': 0, 'created_at': datetime.datetime(2025, 2, 10, 9, 41, 1, 907455), 'description': '', 'status': 'Not Started', 'updated_at': datetime.datetime(2025, 2, 23, 22, 2, 42, 463994), 'parent_id': None}
2025-02-23 23:03:25,311 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-02-23 23:03:25,311 INFO: [cached since 3285s ago] {'pk_1': 1}
2025-02-23 23:03:25,313 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-02-23 23:03:25,313 INFO: [cached since 3285s ago] {'pk_1': 5}
2025-02-23 23:03:25,313 INFO: Task ID 298 fetched with parent ID: None
2025-02-23 23:03:25,314 INFO: Task with ID 298 fetched successfully.
2025-02-23 23:03:25,314 DEBUG: Fetched Task Data: {'id': 298, 'name': 'example user story with parent epic 297', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 1, 'project': 'Project Alpha', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'created_at': '2025-02-10T09:41:01.907455', 'updated_at': '2025-02-23T22:02:42.463994', 'contributor_name': 'Fredrik Cederborg', 'parent': None}
2025-02-23 23:03:25,314 INFO: Task details fetched successfully for Task ID 298.
2025-02-23 23:03:25,315 INFO: ROLLBACK
2025-02-23 23:03:25,316 INFO: 127.0.0.1 - - [23/Feb/2025 23:03:25] "GET /api/tasks/298 HTTP/1.1" 200 -
2025-02-23 23:21:41,957 INFO: 127.0.0.1 - - [23/Feb/2025 23:21:41] "GET /socket.io/?EIO=4&transport=polling&t=71fpbu7m HTTP/1.1" 200 -
2025-02-23 23:21:42,008 INFO: 127.0.0.1 - - [23/Feb/2025 23:21:42] "POST /socket.io/?EIO=4&transport=polling&t=71fqp5hi&sid=HHUXk0l1Dw-3kNs6AADA HTTP/1.1" 200 -
2025-02-23 23:21:42,009 INFO: 127.0.0.1 - - [23/Feb/2025 23:21:42] "GET /socket.io/?EIO=4&transport=polling&t=71fqq0ex&sid=HHUXk0l1Dw-3kNs6AADA HTTP/1.1" 200 -
2025-02-23 23:21:43,367 INFO: 127.0.0.1 - - [23/Feb/2025 23:21:43] "GET /socket.io/?EIO=4&transport=polling&t=71gsfurp HTTP/1.1" 200 -
