2025-03-04 17:49:21,047 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 17:49:21,047 INFO: Entering available_tasks route...
2025-03-04 17:49:21,053 INFO: [cached since 317.5s ago] {'param_1': 4}
2025-03-04 17:49:21,053 DEBUG: Query parameters: task_type=User Story, exclude_task_id=264, search_term=, project_id=None, limit=30, page=1
2025-03-04 17:49:21,053 INFO: BEGIN (implicit)
2025-03-04 17:49:21,054 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 17:49:21,054 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 17:49:21,054 INFO: [cached since 273.3s ago] {'pk_1': 264}
2025-03-04 17:49:21,054 INFO: [cached since 317.5s ago] {'param_1': 5}
2025-03-04 17:49:21,055 INFO: ROLLBACK
2025-03-04 17:49:21,055 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 264, 'task_type': ['User Story']}
2025-03-04 17:49:21,055 INFO: Validating hierarchy for Task N/A
2025-03-04 17:49:21,055 INFO: Determining valid parent types for task_type: User Story
2025-03-04 17:49:21,055 INFO: 127.0.0.1 - - [04/Mar/2025 17:49:21] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-04 17:49:21,056 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 264, 'task_type': ['Epic']}
2025-03-04 17:49:21,060 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-04 17:49:21,061 INFO: BEGIN (implicit)
2025-03-04 17:49:21,062 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-04 17:49:21,062 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-04 17:49:21,062 INFO: [cached since 273.1s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-04 17:49:21,062 INFO: [cached since 317.3s ago] {'pk_1': 7}
2025-03-04 17:49:21,063 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-04 17:49:21,064 DEBUG: Tasks returned: [{'id': 327, 'name': 'üèÜ\xa0Epic: AI-Driven Feature Planning & Estimation', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 267, 'name': 'Improvements to toggles and nested tasks', 'task_type': 'Epic', 'is_parent': False}, {'id': 325, 'name': 'Improve task list responsive grid', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okr¬¥s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 284, 'name': 'Add type "issue/bug"', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notifications', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}]
2025-03-04 17:49:21,064 INFO: [cached since 317.6s ago] {}
2025-03-04 17:49:21,064 INFO: ROLLBACK
2025-03-04 17:49:21,065 INFO: 127.0.0.1 - - [04/Mar/2025 17:49:21] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=264&page=1&limit=30 HTTP/1.1" 200 -
2025-03-04 17:49:21,066 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-04 17:49:21,067 INFO: [cached since 317.3s ago] {'param_1': 7}
2025-03-04 17:49:21,068 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 17:49:21,069 INFO: [cached since 317.5s ago] {'param_1': 1}
2025-03-04 17:49:21,070 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 17:49:21,070 INFO: [cached since 317.5s ago] {'param_1': 2}
2025-03-04 17:49:21,070 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 17:49:21,070 INFO: [cached since 317.5s ago] {'param_1': 3}
2025-03-04 17:49:21,071 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 17:49:21,071 INFO: [cached since 317.5s ago] {'param_1': 4}
2025-03-04 17:49:21,072 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 17:49:21,072 INFO: [cached since 317.5s ago] {'param_1': 5}
2025-03-04 17:49:21,073 INFO: ROLLBACK
2025-03-04 17:49:21,073 INFO: 127.0.0.1 - - [04/Mar/2025 17:49:21] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-04 17:55:51,982 INFO: Entering list_tasks route...
2025-03-04 17:55:51,983 DEBUG: Filters used: {'is_archived': False}
2025-03-04 17:55:51,985 DEBUG: Applying filters: {'is_archived': False}
2025-03-04 17:55:52,000 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-04 17:55:52,003 INFO: BEGIN (implicit)
2025-03-04 17:55:52,006 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-04 17:55:52,007 INFO: [cached since 708.5s ago] {'param_1': 500, 'param_2': 0}
2025-03-04 17:55:52,055 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-04 17:55:52,055 INFO: [cached since 708.3s ago] {}
2025-03-04 17:55:52,057 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-04 17:55:52,057 INFO: [cached since 708.3s ago] {}
2025-03-04 17:55:52,058 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-04 17:55:52,058 INFO: [cached since 708.3s ago] {}
2025-03-04 17:55:52,060 DEBUG: Tasks passed to template: [{'id': 370, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T21:27:30.386959', 'updated_at': '2025-02-28T22:27:30.395572'}, {'id': 346, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:24:40.311054', 'updated_at': '2025-02-28T15:24:40.322156'}, {'id': 342, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:11.944980', 'updated_at': '2025-02-28T15:18:11.954065'}, {'id': 344, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:16.258493', 'updated_at': '2025-02-28T15:18:16.268248'}, {'id': 339, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:10.856511', 'updated_at': '2025-02-28T15:18:10.860682'}, {'id': 265, 'name': 'Smooth transition for toggles', 'description': '<p>Added new description</p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-03-01T15:23:05.271095'}, {'id': 292, 'name': 'Issue: assigning contributor does not work', 'description': '<p>### **Summary of problem and solution** The issue was that assigning a contributor to a task via the /tasks//assign_contributor API endpoint resulted in a **400 Bad Request** error. Upon investigation, the following problems were identified: 1. **Missing CSRF Token:** - The request failed due to a missing CSRF token, as shown in the error message: *‚ÄúBad Request: The CSRF token is missing.‚Äù* - The frontend was not correctly including the CSRF token in the request headers. 1. **JavaScript Error (Undefined CSRF Token Variable):** - The error *‚ÄúReferenceError: csrfToken is not defined‚Äù* indicated that the CSRF token was not being retrieved properly in the JavaScript code. 1. **Incorrect Fetch Request Headers:** - The fetch request did not include the CSRF token under the correct key (X-CSRFToken). - The script attempted to send the request without properly extracting the CSRF token from the meta tag. ### **Solution** 1. **Include the CSRF Token in the JavaScript Code** The CSRF token was retrieved from the meta tag and used in the request headers: ```jsx // Retrieve CSRF token from meta tag const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\'); ``` This ensures that the CSRF token is correctly fetched and available in the JavaScript scope. 1. **Modify the Fetch Request to Include CSRF Token** The request to assign a contributor was updated to include the token: ```jsx const response = await fetch(`/tasks/${taskId}/assign_contributor`, { method: "POST", headers: { "Content-Type": "application/json", "X-CSRFToken": csrfToken // Include CSRF token }, body: JSON.stringify({ contributor_id: parseInt(contributorId, 10) }), }); ``` - **Ensures the CSRF token is sent in the request headers** so that Flask-WTF does not reject the request. 1. **Verify and Debug Network Requests** - The updated request headers were verified using **Chrome DevTools &gt; Network tab** to ensure the X-CSRFToken was included. - The error messages disappeared, and the contributor assignment request **succeeded with a 200 OK response**. --- ### **Final Outcome** üöÄ The issue was resolved, and contributors can now be assigned successfully to tasks without triggering a CSRF validation error. ### **Key Learnings from This Session** This debugging session covered several important aspects of **web development with Flask and JavaScript**, particularly related to **API requests, CSRF protection, debugging tools, and database interactions**. Here are the key takeaways: --- ### **1. CSRF Protection in API Requests** - **Issue:** The initial error was due to **a missing CSRF token** when making a `POST` request. - **Fix:** The solution was to **retrieve the CSRF token from a meta tag** in the HTML and include it in the request headers. - **Key Learning:** Flask-WTF requires CSRF tokens for form and API submissions to **prevent cross-site request forgery (CSRF) attacks**.‚úÖ Always ensure that API requests include a valid CSRF token. --- ### **2. Debugging JavaScript Fetch Requests** - **Issue:** The JavaScript code was making a fetch request, but the variable `csrfToken` was not properly defined, causing a `ReferenceError`. - **Fix:** Declaring `csrfToken` at the beginning of the script: ```jsx const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\'); ``` - **Key Learning:**‚úÖ JavaScript variables must be defined before they are used.‚úÖ Use browser **developer tools (DevTools) Network tab** to inspect headers, payloads, and responses when debugging API requests. --- ### **3. Structuring Flask Routes for Task Management** - **Issue:** The `assign_contributor` route was failing due to incorrect request payload validation. - **Fix:** Improved the route‚Äôs error handling and logging: ```python @bp.route(\'//assign_contributor\', methods=[\'POST\']) def assign_contributor(task_id): try: data = request.get_json() contributor_id = int(data.get(\'contributor_id\', 0)) if not contributor_id: return jsonify({\'error\': \'Valid Contributor ID is required\'}), 400 ``` - **Key Learning:**‚úÖ Always validate incoming data in Flask routes to prevent type errors.‚úÖ Use `request.get_json()` properly and handle missing or incorrect data gracefully. --- ### **4. Utilizing Browser DevTools for Debugging** - **Issue:** The fetch request was failing with a `400 Bad Request`, and the browser console showed `ReferenceError: csrfToken is not defined`. - **Fix:** - Used **Network tab** to inspect the request payload and headers. - Used **Console tab** to catch JavaScript errors early. - **Key Learning:**‚úÖ DevTools is a **critical** tool for diagnosing network request issues.‚úÖ Always **check console errors** before assuming it\'s a backend issue. --- ### **5. Database Queries and ORM Debugging** - **Issue:** Tasks were not being updated correctly, possibly due to missing commit statements. - **Fix:** Ensured that:was executed properly. ```python task.contributor_id = contributor_id db.session.commit() ``` - **Key Learning:**‚úÖ Always call `db.session.commit()` after making changes in SQLAlchemy.‚úÖ Rollback transactions if an error occurs to avoid database inconsistency. --- ### **6. Handling Asynchronous JavaScript Logic** - **Issue:** The `assignContributor` function was executing before the page was fully loaded. - **Fix:** Wrapped it inside a function that ensures elements exist: ``` window.setupContributorAssignment = function () { const assignButton = $("#assign-contributor-btn"); if (!assignButton.length) { setTimeout(setupContributorAssignment, 500); // Retry in 500ms return; } ``` - **Key Learning:**‚úÖ Use `setTimeout` to **retry event binding** when elements are dynamically loaded.‚úÖ Always **check if elements exist before attaching event handlers**. --- ### **7. Best Practices for Flask Logging &amp; Error Handling** - **Issue:** Lack of clear logging when API calls failed. - **Fix:** Added better logging to track failures: ```python logger.info(f"Assigning contributor to task ID {task_id}") try: # Process request... except Exception as e: logger.error(f"Error assigning contributor: {e}") ``` - **Key Learning:**‚úÖ Log **every major step** in API processing to simplify debugging.‚úÖ Differentiate between `logger.info()`, `logger.warning()`, and `logger.error()` based on severity. --- ### **Final Takeaways** üöÄ **Understanding CSRF protection** and **properly structuring API requests** is crucial for secure web applications. üîç **Browser DevTools is invaluable** for diagnosing frontend issues, especially in JavaScript. üêç **Flask requires proper request validation, database transactions, and logging** to maintain stability. ‚ö° **Asynchronous JavaScript must handle dynamic elements carefully** to avoid runtime errors. This session reinforced best practices in **frontend-backend integration, debugging, and security**, making it a great learning experience! üöÄüî•</p>', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 0, 'created_at': '2025-02-10T09:11:12.273779', 'updated_at': '2025-03-04T00:41:24.838143'}, {'id': 373, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T22:10:59.863170', 'updated_at': '2025-02-28T23:10:59.893542'}, {'id': 335, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:44:45.530624', 'updated_at': '2025-02-28T14:44:45.542212'}, {'id': 357, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T15:08:15.356759', 'updated_at': '2025-02-28T16:08:15.371374'}, {'id': 343, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:12.267445', 'updated_at': '2025-02-28T15:18:12.278088'}, {'id': 337, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:07.626569', 'updated_at': '2025-02-28T15:18:07.632643'}, {'id': 361, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T17:11:52.257703', 'updated_at': '2025-02-28T18:11:52.262071'}, {'id': 355, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:55:16.105634', 'updated_at': '2025-02-28T15:55:16.131837'}, {'id': 348, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:26:17.632940', 'updated_at': '2025-02-28T15:26:17.642972'}, {'id': 332, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:35:43.663809', 'updated_at': '2025-02-28T14:35:43.673337'}, {'id': 333, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:36:20.683426', 'updated_at': '2025-02-28T14:36:20.691337'}, {'id': 365, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:30:48.877580', 'updated_at': '2025-02-28T19:30:48.887060'}, {'id': 340, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:11.061737', 'updated_at': '2025-02-28T15:18:11.075736'}, {'id': 367, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:39:25.734101', 'updated_at': '2025-02-28T19:39:25.739322'}, {'id': 366, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:38:39.027061', 'updated_at': '2025-02-28T19:38:39.048248'}, {'id': 358, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T15:46:04.956844', 'updated_at': '2025-02-28T16:46:04.966511'}, {'id': 244, 'name': 'Scroll to Updated Task', 'description': 'Automatically scroll to the updated task in the list if it‚Äôs out of view.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 0, 'created_at': '2025-02-05T12:56:52.818501', 'updated_at': '2025-02-28T00:11:57.987007'}, {'id': 353, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:52:04.500938', 'updated_at': '2025-02-28T15:52:04.512331'}, {'id': 362, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 284, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:14:50.969730', 'updated_at': '2025-03-04T17:30:45.507303'}, {'id': 356, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T15:08:08.061166', 'updated_at': '2025-02-28T16:08:08.066215'}, {'id': 329, 'name': 'Implement an API endpoint for submitting raw feature requests.', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-27T23:13:09.068616', 'updated_at': '2025-03-01T01:00:05.807248'}, {'id': 341, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:11.691354', 'updated_at': '2025-02-28T15:18:11.699365'}, {'id': 351, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:32:58.672570', 'updated_at': '2025-02-28T15:32:58.678298'}, {'id': 336, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:07:11.299563', 'updated_at': '2025-02-28T15:07:11.310976'}, {'id': 369, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T21:17:46.272998', 'updated_at': '2025-02-28T22:17:46.285417'}, {'id': 352, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:51:56.533768', 'updated_at': '2025-02-28T15:51:56.563880'}, {'id': 334, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:44:06.347090', 'updated_at': '2025-02-28T14:44:06.354371'}, {'id': 338, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:10.122843', 'updated_at': '2025-02-28T15:18:10.128941'}, {'id': 350, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:32:49.928206', 'updated_at': '2025-02-28T15:32:49.935531'}, {'id': 248, 'name': 'Implement Toggle Button', 'description': 'Add a toggle button to switch between hierarchical and flat views.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-05T12:58:14.518518', 'updated_at': '2025-02-28T00:11:48.483207'}, {'id': 354, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:54:59.543585', 'updated_at': '2025-02-28T15:54:59.553122'}, {'id': 347, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:24:45.846396', 'updated_at': '2025-02-28T15:24:45.860885'}, {'id': 345, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:53.170926', 'updated_at': '2025-02-28T15:18:53.179222'}, {'id': 331, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:35:35.797059', 'updated_at': '2025-02-28T14:35:35.813440'}, {'id': 359, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-28T15:54:42.242569', 'updated_at': '2025-03-01T02:01:18.851236'}, {'id': 291, 'name': 'Add dropdowns in task list for changing: Assigned to, Estimate, Task Type and Status', 'description': '<p>Write Description task description...</p>', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 1, 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-03-01T22:09:13.882787'}, {'id': 386, 'name': 'Test task', 'description': '<p>Testing tiptap editor lkjlk</p><hr><p>Write something</p><hr><p>Write something</p><hr><p></p>', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 284, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 9, 'status': 'In Progress', 'sort_order': 1, 'created_at': '2025-03-01T12:39:07.359868', 'updated_at': '2025-03-04T15:33:53.366530'}, {'id': 245, 'name': 'Apply Dynamic Sorting and Filtering', 'description': 'Ensure the task list dynamically updates its sorting and filtering after a status change.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'In Progress', 'sort_order': 1, 'created_at': '2025-02-05T12:56:52.818501', 'updated_at': '2025-02-28T00:12:01.504825'}, {'id': 327, 'name': 'üèÜ\xa0Epic: AI-Driven Feature Planning & Estimation', 'description': '<h2><strong>Description:&nbsp;</strong></h2><p>AI assists in refining raw feature requests into</p><p>structured plans, generating PRDs, Epics, User Stories, Acceptance Criteria, and Edge Cases. AI also provides intelligent estimations based on historical data and improves accuracy over time.</p><p></p><hr><h2>## Heading</h2><p></p>', 'task_type': 'Epic', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-27T23:02:31.274292', 'updated_at': '2025-03-04T15:27:42.964232'}, {'id': 64, 'name': 'Setup project credentials for Google API', 'description': 'Generate client ID and secret from Google API Console for your application.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-03-01T02:01:02.546625'}, {'id': 250, 'name': 'Preserve User Preferences', 'description': 'Persist the user‚Äôs chosen view state between sessions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-05T12:58:14.518518', 'updated_at': '2025-02-28T00:11:48.483213'}, {'id': 249, 'name': 'Define View States', 'description': 'Clearly label and define the view states for hierarchical and flat sorting.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-05T12:58:14.518518', 'updated_at': '2025-02-28T00:11:48.483213'}, {'id': 360, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-28T15:54:58.904932', 'updated_at': '2025-03-01T02:01:18.851237'}, {'id': 266, 'name': 'Highlight the nested tasks', 'description': '<p>lkjlkjlkjlkjlkjlkjWrite your task description...</p><p></p><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-03-03T17:32:52.809368'}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'description': '<p>Write your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p>', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-03-03T08:46:23.302934'}, {'id': 243, 'name': 'Highlight Updated Task', 'description': 'Highlight the updated task in the UI to provide immediate visual feedback.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 2, 'created_at': '2025-02-05T12:56:52.818501', 'updated_at': '2025-02-28T00:12:01.504819'}, {'id': 67, 'name': 'Test Google OAuth flow', 'description': 'Verify the OAuth flow using test accounts and check the token exchange.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-03-01T02:01:02.546635'}, {'id': 295, 'name': 'Issue: drag and drop errors', 'description': '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-10T09:22:54.461413', 'updated_at': '2025-02-28T00:11:55.301307'}, {'id': 290, 'name': 'issue: error when changing task type and', 'description': 'issue: error when changing task type and parent task before saving', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-10T09:00:03.417734', 'updated_at': '2025-03-01T02:01:18.851234'}, {'id': 257, 'name': 'Update Task API Integration', 'description': "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-05T22:55:49.566819', 'updated_at': '2025-02-28T00:11:57.987011'}, {'id': 66, 'name': 'Setup OAuth scopes for Google API', 'description': 'Determine the required OAuth scopes for your application and add them to the configuration.\nedit', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-03-01T02:01:02.546634'}, {'id': 326, 'name': 'Add dropdown in task list for changing: Project', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-26T22:10:15.209008', 'updated_at': '2025-03-01T02:01:12.498734'}, {'id': 264, 'name': 'Close all / Open all childtasks', 'description': '<p>Added new description check other tab</p><p></p><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 7, 'status': 'Not Started', 'sort_order': 4, 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-03-03T07:43:17.298288'}, {'id': 133, 'name': 'Step 4: Enhance Logging in models.py', 'description': 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nupdating the Task model in the following ways:\n\n1.\tLog Changes to parent_id:\n\t‚Ä¢\tLog changes to parent_id during updates, including old and new values.\n\t2.\tValidate Hierarchy with Logging:\n\t‚Ä¢\tLog detailed messages when validating hierarchy changes, especially for circular dependency checks.\n\nHere‚Äôs how the models.py can be updated:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy import func, cast, CheckConstraint\nfrom sqlalchemy.orm import validates\nfrom app.extensions.db import db\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\nclass Task(db.Model):\n    __tablename__ = "task"\n    \n    # Other columns...\n\n    parent_id = db.Column(\n        db.Integer, db.ForeignKey("task.id"), index=True, nullable=True\n    )\n\n    # Relationships\n    parent = db.relationship(\n        "Task", remote_side=[id], back_populates="children", lazy="select"\n    )\n    children = db.relationship(\n        "Task", back_populates="parent", lazy="select"\n    )\n\n    \n\n\n    @staticmethod\n    def _validate_no_circular_references(new_parent_id):\n        """\n        Validates that there are no circular references in the task hierarchy.\n\n        Args:\n            new_parent_id (int): The new parent ID to validate.\n\n        Raises:\n            ValueError: If a circular reference is detected.\n        """\n        visited = set()\n        current_parent_id = new_parent_id\n\n        logger.info(f"Validating circular references for parent ID: {new_parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error(\n                    f"Circular reference detected: Parent ID {current_parent_id} already visited."\n                )\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            # Fetch the next parent_id in the hierarchy\n            parent = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not parent:\n                break  # Exit if no parent is found\n            current_parent_id = parent.parent_id\n\n        logger.info("No circular reference detected.")\n\n    @validates(\'parent_id\', \'task_type\')\n    def validate_task_changes(self, key, value):\n        """\n        Validates changes to \'parent_id\' and \'task_type\'.\n        Ensures hierarchy validity and checks for circular references.\n        """\n        logger.debug(f"Validating {key} change for Task {self.id}: {value}")\n\n        if key == \'parent_id\':\n            # Log changes to parent_id\n            if self.id and value != self.parent_id:\n                logger.info(f"Task {self.id}: Updating \'parent_id\' from {self.parent_id} to {value}")\n\n            # Prevent a task from being its own parent\n            if value and value == self.id:\n                logger.error("A task cannot be its own parent.")\n                raise ValueError("A task cannot be its own parent.")\n\n            # Check for circular references\n            if value:\n                Task.check_circular_reference(self.id, value)\n\n        elif key == \'task_type\':\n            # Log changes to task_type\n            if self.id and value != self.task_type:\n                logger.info(f"Task {self.id}: Updating \'task_type\' from {self.task_type} to {value}")\n\n        # Check hierarchy rules without triggering further validation\n        if key in [\'parent_id\', \'task_type\']:\n            self._validate_hierarchy_change(key, value)\n\n        logger.info(f"Validation passed for {key}: {value}")\n        return value\n\n    def _validate_hierarchy_change(self, key, value):\n        """\n        Validates hierarchy rules for the task based on `task_type` and `parent_id`.\n        """\n        if key == \'parent_id\' and value:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=value).first()\n            if not parent_task:\n                raise ValueError("Parent task does not exist.")\n\n            logger.debug(f"Validating hierarchy: Task {self.id}, Parent Type: {parent_task.task_type}")\n            if self.task_type == "User Story" and parent_task.task_type != "Epic":\n                raise ValueError("User Stories must have an Epic as a parent.")\n            if self.task_type == "Subtask" and parent_task.task_type != "User Story":\n                raise ValueError("Subtasks must have a User Story as a parent.")\n\n        elif key == \'task_type\' and self.parent_id:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=self.parent_id).first()\n            if parent_task:\n                logger.debug(f"Validating hierarchy: Task Type: {value}, Parent Type: {parent_task.task_type}")\n                if value == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError("User Stories must have an Epic as a parent.")\n                if value == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError("Subtasks must have a User Story as a parent.")\n\n        logger.info(f"Hierarchy validation passed for Task {self.id if self.id else \'New Task\'}.")\n\n    @staticmethod\n    def check_circular_reference(task_id, parent_id):\n        """\n        Iteratively checks for circular references in the task hierarchy.\n        Prevents stack overflow on deep hierarchies.\n        """\n        visited = set()\n        current_parent_id = parent_id\n\n        logger.info(f"Checking circular reference for Task {task_id} with Parent ID: {parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error("Circular reference detected!")\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            if current_parent_id == task_id:\n                logger.error("A task cannot be its own ancestor.")\n                raise ValueError("A task cannot be its own ancestor.")\n\n            # Fetch the next parent_id in the hierarchy\n            task = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not task:\n                break\n            current_parent_id = task.parent_id\n\n        logger.info("Circular reference check passed.")\n```\nKey Enhancements:\n\t1.\tlog_and_validate_parent_id_change:\n\t‚Ä¢\tLogs the old and new parent_id whenever it changes.\n\t‚Ä¢\tEnsures no circular references are introduced.\n\t2.\t_validate_no_circular_references:\n\t‚Ä¢\tValidates the parent_id field to prevent circular dependencies.\n\t‚Ä¢\tLogs progress and raises detailed errors if violations occur.\n\t3.\tlog_and_validate_task_type_change:\n\t‚Ä¢\tLogs changes to task_type with the old and new values.\n\t‚Ä¢\tRevalidates hierarchy rules when task_type changes.\n\t4.\tDetailed Logging for Circular Reference Validation:\n\t‚Ä¢\t_validate_no_circular_references and check_circular_reference methods log every step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t‚Ä¢\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 4, 'created_at': '2025-01-15T09:44:08.340041', 'updated_at': '2025-03-01T02:01:18.851231'}, {'id': 132, 'name': 'Step 1: Update tasks_table_interactions.js', 'description': '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the map for efficient parent-child relationship lookups instead of DOM traversal.\n\n```\nexport const TaskManager = {\n    init: function (csrfToken) {\n        this.csrfToken = csrfToken;\n        this.initTaskParentMap(); // Initialize the map\n        this.initDragAndDrop(); // Initialize drag-and-drop functionality\n    },\n\n    // Initialize a global map for task relationships\n    taskParentMap: new Map(),\n\n    // Build the taskParentMap from the DOM\n    initTaskParentMap: function () {\n        console.log("Initializing Task Parent Map...");\n        const rows = document.querySelectorAll("tr[data-task-id]");\n\n        rows.forEach((row) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = parseInt(row.dataset.parentId, 10) || null;\n            this.taskParentMap.set(taskId, parentId);\n        });\n\n        console.log("Task Parent Map initialized:", Array.from(this.taskParentMap.entries()));\n    },\n\n    // Update the map dynamically after drag-and-drop\n    updateTaskParentMap: function (taskId, parentId) {\n        console.log(`Updating Task Parent Map: Task ${taskId} -> Parent ${parentId}`);\n        this.taskParentMap.set(taskId, parentId);\n    },\n\n    initDragAndDrop: function () {\n        if (window.isDragAndDropInitialized) {\n            console.log("Drag-and-drop is already initialized.");\n            return;\n        }\n\n        console.log("Initializing drag-and-drop within TaskManager...");\n\n        const tableBody = document.querySelector("tbody");\n        if (!tableBody) {\n            console.warn("Task table body not found for drag-and-drop initialization");\n            return;\n        }\n\n        // Initialize Sortable.js for drag-and-drop functionality\n        Sortable.create(tableBody, {\n            handle: ".task-row", // Only draggable via `.task-row` elements\n            animation: 150, // Smooth animation\n            filter: ".task-open-link", // Prevent dragging on task links\n            preventOnFilter: true, // Prevent drag if filtered element is clicked\n            onEnd: async (event) => {\n                try {\n                    console.log("Drag-and-drop operation started...");\n                    const rows = Array.from(event.from.querySelectorAll(".task-row"));\n                    const reorderedTasks = [];\n\n                    rows.forEach((row, index) => {\n                        const taskId = parseInt(row.dataset.taskId, 10);\n                        let parentId = null;\n\n                        // Get the parent ID from the map or fallback to the dataset\n                        if (row.classList.contains("subtask-row")) {\n                            const parentRow = row.previousElementSibling;\n                            parentId = parentRow\n                                ? parseInt(parentRow.dataset.taskId, 10)\n                                : this.taskParentMap.get(taskId) || null;\n                        }\n\n                        // Update the taskParentMap dynamically\n                        this.updateTaskParentMap(taskId, parentId);\n\n                        reorderedTasks.push({\n                            id: taskId,\n                            sort_order: index + 1,\n                            parent_id: parentId,\n                        });\n                    });\n\n                    console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n                    console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n                    // Send the payload to the backend\n                    const response = await fetch("/tasks/reorder_subtasks", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                            "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n                        },\n                        body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n                    });\n\n                    if (!response.ok) {\n                        const errorData = await response.json();\n                        console.error("Error reordering tasks:", errorData);\n                        alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n                        return;\n                    }\n\n                    const data = await response.json();\n                    console.log("Task reordering successful:", data);\n\n                } catch (error) {\n                    console.error("Error during drag-and-drop operation:", error);\n                    alert("An unexpected error occurred while reordering tasks.");\n                }\n            },\n        });\n\n        window.isDragAndDropInitialized = true;\n        console.log("Drag-and-drop initialized successfully.");\n    },\n};\n```\n\nKey Updates:\n\t1.\tPrecomputed Map (taskParentMap):\n\t‚Ä¢\tThe initTaskParentMap function initializes the map by iterating over DOM elements and mapping each task‚Äôs ID to its parent ID.\n\t‚Ä¢\tThe updateTaskParentMap dynamically updates the map when tasks are reordered.\n\t2.\tEfficient Parent Lookup:\n\t‚Ä¢\tThe parentId is derived from the precomputed map rather than DOM traversal.\n\t3.\tBackend Payload:\n\t‚Ä¢\tA structured payload (reorderedTasks) is sent to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t‚Ä¢\tCSRF protection is ensured by passing the token to the request headers.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'sort_order': 5, 'created_at': '2025-01-15T09:44:08.338301', 'updated_at': '2025-03-01T02:01:18.851229'}, {'id': 328, 'name': 'üü¢ User Story 1: AI-Generated Feature Refinement\xa0(8 Story Points)', 'description': 'As a\xa0product manager,\xa0I want\xa0AI to refine raw feature requests into structured PRDs, Epics, and User Stories,\xa0So that\xa0I can quickly turn ideas into actionable tasks.\n\n', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 5, 'created_at': '2025-02-27T23:09:37.421629', 'updated_at': '2025-03-03T06:26:25.726905'}, {'id': 287, 'name': 'When moving a parent item to another project make sure the subtasks are moved as well', 'description': '', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 5, 'created_at': '2025-02-10T08:48:31.986870', 'updated_at': '2025-03-01T02:01:12.498732'}, {'id': 134, 'name': 'Step 2: Update the Backend in routes.py', 'description': 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\nPlan for step 2:\n\t1.\tVerify the payload structure:\n\t‚Ä¢\tEnsure that the payload includes all necessary fields (id, sort_order, parent_id) for each task.\n\t‚Ä¢\tValidate that the parent-child relationships in the precomputed map (taskParentMap) are reflected correctly in the payload.\n\t2.\tSubmit the payload to the backend:\n\t‚Ä¢\tEnhance the fetch request in the onEnd function of initDragAndDrop to log detailed submission data.\n\t‚Ä¢\tConfirm the payload integrity in the browser console before submission.\n\t3.\tUpdate backend logging:\n\t‚Ä¢\tAdd logging to /reorder_subtasks in routes.py to confirm receipt of the correct payload and process parent-child updates.\n\t‚Ä¢\tLog before and after database updates for better debugging.\n\n-----\nUpdated tasks_table_interactions.js\n\nReplace this section:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    let parentId = null;\n```\nWith:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    const parentId = this.taskParentMap.get(taskId) || null;\n```\nThe this.taskParentMap provides a precomputed and dynamic mapping of taskId to parentId. By using this map, we avoid relying on DOM traversal logic (row.closest or row.previousElementSibling) during drag-and-drop operations, which can sometimes be unreliable or cumbersome.\n\nFull Revised onEnd section:\n```\nonEnd: async (event) => {\n    try {\n        console.log("Drag-and-drop operation started...");\n        const rows = Array.from(event.from.querySelectorAll(".task-row"));\n        const reorderedTasks = [];\n\n        rows.forEach((row, index) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = this.taskParentMap.get(taskId) || null;\n\n            // Update the taskParentMap dynamically\n            this.updateTaskParentMap(taskId, parentId);\n\n            reorderedTasks.push({\n                id: taskId,\n                sort_order: index + 1,\n                parent_id: parentId,\n            });\n        });\n\n        console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n        console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n        // Send the payload to the backend\n        const response = await fetch("/tasks/reorder_subtasks", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n            },\n            body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error("Error reordering tasks:", errorData);\n            alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n            return;\n        }\n\n        const data = await response.json();\n        console.log("Task reordering successful:", data);\n\n    } catch (error) {\n        console.error("Error during drag-and-drop operation:", error);\n        alert("An unexpected error occurred while reordering tasks.");\n    }\n}\n```\n---------------------------------\nEnsure updates include:\n\t‚Ä¢\tBetter Logging: Adding logs for key events such as database changes and validation results.\n\t‚Ä¢\tInput Validation: Ensure all required fields (id, sort_order, parent_id) exist in the payload.\n\t‚Ä¢\tPost-Commit Validation: Confirm database updates after the commit.\n\t‚Ä¢\tImproved Error Handling: Include specific error messages and consistent rollback mechanisms.\n\nBelow is the revised reorder_subtasks route with descriptive comments for each section:\n```\n@bp.route("/reorder_subtasks", methods=["POST"])\ndef reorder_subtasks():\n    """\n    Reorder subtasks globally or reassign them to a different parent.\n\n    Steps:\n    - Parse and validate input from the frontend.\n    - Update parent-child relationships and sort order in the database.\n    - Commit changes and return a success response.\n    - Handle errors gracefully and provide detailed logs for debugging.\n    """\n    logger.info("Entering reorder_subtasks route...")\n    logger.info(f"Received payload for reordering tasks: {request.json}")\n\n    try:\n        # Step 1: Parse input\n        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered\n        ordered_tasks = request.json.get("ordered_tasks", [])\n\n        logger.debug(f"Parsed parent_id: {parent_id}")\n        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")\n\n        # Step 2: Validate input\n        if not isinstance(ordered_tasks, list) or not all(\n            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task\n            for task in ordered_tasks\n        ):\n            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")\n            return jsonify({\n                "error": "Invalid input format for \'ordered_tasks\'. Each task must include \'id\', \'sort_order\', and \'parent_id\'."\n            }), 400\n\n        # Step 3: Validate parent task (if applicable)\n        if parent_id is not None:\n            parent_task = Task.query.get(parent_id)\n            if not parent_task:\n                logger.error(f"Parent task with ID {parent_id} not found.")\n                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400\n\n        logger.info("Input validation passed. Proceeding with task updates...")\n\n        # Step 4: Process updates for each subtask\n        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation\n\n        for task_data in ordered_tasks:\n            subtask_id = task_data["id"]\n            sort_order = task_data["sort_order"]\n            new_parent_id = task_data["parent_id"]\n\n            # Fetch the subtask from the database\n            subtask = Task.query.get(subtask_id)\n            if not subtask:\n                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")\n                continue\n\n            # Log and update parent_id if it changes\n            if new_parent_id is not None and new_parent_id != subtask.parent_id:\n                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")\n                subtask.parent_id = new_parent_id\n\n            # Update sort order\n            subtask.sort_order = sort_order\n            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")\n\n            # Add to the list of updated subtasks for validation\n            updated_subtasks.append(subtask)\n\n        # Step 5: Commit changes to the database\n        try:\n            db.session.commit()\n            logger.info(f"Subtasks reordered successfully: {[task[\'id\'] for task in ordered_tasks]}")\n        except Exception as e:\n            logger.error(f"Error committing changes to the database: {str(e)}")\n            db.session.rollback()\n            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500\n\n        # Step 6: Post-commit validation\n        for subtask in updated_subtasks:\n            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")\n            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")\n\n        # Step 7: Return success response\n        return jsonify({\n            "success": True,\n            "message": "Subtasks reordered successfully.",\n            "updated_subtasks": [subtask.id for subtask in updated_subtasks]\n        }), 200\n\n    except Exception as e:\n        # Step 8: Handle unexpected errors\n        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)\n        db.session.rollback()\n        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500\n```\nKey Changes and Descriptive Comments\n\t1.\tInput Parsing:\n\t‚Ä¢\tExtracts parent_id and ordered_tasks from the request payload.\n\t‚Ä¢\tLogs the parsed values for debugging.\n\t2.\tInput Validation:\n\t‚Ä¢\tEnsures ordered_tasks is a list of dictionaries with the required keys.\n\t‚Ä¢\tValidates parent_id if provided, ensuring the parent task exists in the database.\n\t3.\tUpdate Processing:\n\t‚Ä¢\tIterates through ordered_tasks, updating each task‚Äôs parent_id and sort_order.\n\t‚Ä¢\tLogs changes for each task.\n\t4.\tDatabase Commit:\n\t‚Ä¢\tCommits all updates in a single transaction.\n\t‚Ä¢\tLogs success or rolls back changes in case of an error.\n\t5.\tPost-Commit Validation:\n\t‚Ä¢\tVerifies that the parent_id and sort_order changes were successfully saved to the database.\n\t6.\tError Handling:\n\t‚Ä¢\tCaptures and logs exceptions during processing or committing.\n\t‚Ä¢\tProvides meaningful error messages to the frontend.\n\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'sort_order': 6, 'created_at': '2025-01-15T09:46:29.348853', 'updated_at': '2025-03-01T02:01:18.851232'}, {'id': 286, 'name': 'Implement abels/tags', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 6, 'created_at': '2025-02-10T08:46:23.985620', 'updated_at': '2025-03-01T02:01:12.498730'}, {'id': 296, 'name': 'issue: contributor is lost after updating task', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 7, 'created_at': '2025-02-10T09:26:43.881947', 'updated_at': '2025-02-28T00:11:55.301308'}, {'id': 131, 'name': 'Step 5: Update utils.py', 'description': 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nChanges to Make:\n\t1.\tEnhance Task Filtering:\n\t‚Ä¢\tEnsure the filters handle parent-child relationships explicitly.\n\t‚Ä¢\tAdd options to include or exclude subtasks in queries.\n\t2.\tUtility Function for Debugging Parent-Child Relationships:\n\t‚Ä¢\tProvide a function to generate a map or list of parent-child relationships for debugging purposes.\n\t3.\tValidation Functions:\n\t‚Ä¢\tAdd a utility function to validate parent-child relationships and ensure no circular dependencies.\n\nUpdated utils.py Code:\n```\nimport logging\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import joinedload\nfrom app.extensions.db import db\nfrom app.tasks.models import Task\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\n\nclass TaskService:\n    @staticmethod\n    def filter_tasks(filters=None, include_subtasks=True, page=None, per_page=None):\n        """\n        Dynamically filters tasks with an option to include or exclude subtasks.\n\n        Args:\n            filters (dict): Filtering criteria.\n            include_subtasks (bool): Whether to include subtasks in the query.\n            page (int, optional): Page number for pagination.\n            per_page (int, optional): Items per page for pagination.\n\n        Returns:\n            Query or Pagination: A SQLAlchemy query object or paginated results.\n        """\n        query = Task.query.options(\n            db.joinedload(Task.project).joinedload(Project.contributors),\n            db.joinedload(Task.contributor),\n            db.joinedload(Task.children),\n        ).order_by(Task.sort_order)\n\n        if filters:\n            logger.debug(f"Applying filters: {filters}")\n\n            # Apply standard filters\n            if "is_archived" in filters:\n                query = query.filter(Task.is_archived == filters["is_archived"])\n            if "project_id" in filters:\n                query = query.filter(Task.project_id == filters["project_id"])\n            if "task_type" in filters:\n                if isinstance(filters["task_type"], list):\n                    query = query.filter(Task.task_type.in_(filters["task_type"]))\n                else:\n                    query = query.filter(Task.task_type == filters["task_type"])\n            if "completion_status" in filters:\n                completion_map = {"completed": True, "in_progress": False}\n                if filters["completion_status"] in completion_map:\n                    query = query.filter(Task.completed == completion_map[filters["completion_status"]])\n\n            # Optionally exclude subtasks\n            if not include_subtasks:\n                query = query.filter(Task.task_type != "Subtask")\n\n        logger.debug(f"Generated query: {query}")\n\n        # Pagination\n        if page and per_page:\n            return query.paginate(page=page, per_page=per_page, error_out=False)\n        return query\n\n    @staticmethod\n    def debug_parent_child_relationships(project_id=None):\n        """\n        Generates a debug map of parent-child relationships for all tasks.\n\n        Args:\n            project_id (int, optional): Restrict to tasks from a specific project.\n\n        Returns:\n            dict: A dictionary mapping parent IDs to their child task IDs.\n        """\n        query = Task.query\n        if project_id:\n            query = query.filter(Task.project_id == project_id)\n\n        tasks = query.options(\n            db.load_only(Task.id, Task.parent_id)\n        ).all()\n\n        relationship_map = {}\n        for task in tasks:\n            if task.parent_id not in relationship_map:\n                relationship_map[task.parent_id] = []\n            relationship_map[task.parent_id].append(task.id)\n\n        logger.debug(f"Parent-Child Relationship Map: {relationship_map}")\n        return relationship_map\n\n    @staticmethod\n    def validate_parent_child_relationships():\n        """\n        Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.\n\n        Raises:\n            ValueError: If invalid relationships are detected.\n        """\n        tasks = Task.query.options(db.joinedload(Task.parent)).all()\n\n        for task in tasks:\n            if task.parent_id:\n                parent_task = task.parent\n                if not parent_task:\n                    raise ValueError(f"Task {task.id} has an invalid parent ID {task.parent_id}.")\n\n                # Validate hierarchy rules\n                if task.task_type == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError(f"User Story {task.id} must have an Epic as its parent.")\n                if task.task_type == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError(f"Subtask {task.id} must have a User Story as its parent.")\n\n        logger.info("All parent-child relationships are valid.")\n\n    @staticmethod\n    def get_all_task_ids_with_parents():\n        """\n        Returns a flat list of tasks with their parent IDs for debugging.\n\n        Returns:\n            list: A list of tuples (task_id, parent_id).\n        """\n        tasks = Task.query.with_entities(Task.id, Task.parent_id).all()\n        logger.debug(f"Task IDs with Parent IDs: {tasks}")\n        return tasks\n```\n\n\nExplanation of Changes:\n\t1.\tfilter_tasks Enhancements:\n\t‚Ä¢\tAdded include_subtasks parameter to optionally exclude subtasks from the query.\n\t2.\tdebug_parent_child_relationships:\n\t‚Ä¢\tCreates a parent-child relationship map for debugging purposes.\n\t3.\tvalidate_parent_child_relationships:\n\t‚Ä¢\tIterates through all tasks to validate parent-child hierarchy and ensures no invalid relationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t‚Ä¢\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 7, 'created_at': '2025-01-15T09:41:28.091824', 'updated_at': '2025-03-01T02:01:18.851223'}, {'id': 135, 'name': 'Step 3: Update list.html', 'description': 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already includes everything needed. No required changes.\n\nHere¬¥s the relevant section of list.html:\n\n```\n<tr id="task-{{ task.id }}"\n                class="task-row {% if task.task_type == \'Subtask\' %}subtask-row{% elif task.task_type == \'User Story\' %}user-story-row{% elif task.task_type == \'Epic\' %}epic-row{% endif %}"\n                style="background-color: \n                {% if task.task_type == \'Subtask\' %}\n                    rgba(200, 230, 255, 0.5); /* Light blue for Subtask */\n                {% elif task.task_type == \'User Story\' %}\n                    rgba(255, 255, 200, 0.5); /* Light yellow for User Story */\n                {% elif task.task_type == \'Epic\' %}\n                    rgba(255, 200, 200, 0.5); /* Light red for Epic */\n                {% else %}\n                    rgba(240, 240, 240, 1); /* Default light gray */\n                {% endif %};"\n                data-task-id="{{ task.id }}"\n                data-parent-id="{{ task.parent_id or \'\' }}"\n                data-level="{{ depth }}">\n                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>\n                <td>\n                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}\n                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}" aria-label="Toggle details for task {{ task.name }}">\n                        <i class="bi bi-chevron-right"></i>\n                    </button>\n                    {% endif %}\n                </td>\n                <td class="fw-medium fs-6 \n                {% if task.task_type == \'Epic\' %}\n                    epic-cell\n                {% elif task.task_type == \'User Story\' %}\n                    user-story-cell\n                {% elif task.task_type == \'Subtask\' %}\n                    subtask-cell\n                {% endif %}" \n                style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">\n                <span class="bi fs-6\n                {% if task.task_type == \'Epic\' %}\n                    bi-circle-fill\n                {% elif task.task_type == \'User Story\' %}\n                    bi-circle-half\n                {% elif task.task_type == \'Subtask\' %}\n                    bi-circle\n                {% endif %}">\n                </span>\n                {{ task.name }}\n                <small class="text-muted fw-light">\n                    (Parent-ID: {{ task.parent_id or \'None\' }})\n                </small>\n                <!-- Open Link -->\n                <a href="#" class="task-open-link" data-task-id="{{ task.id }}">\n                    <i class="bi bi-arrows-angle-expand" style="font-size: 0.8rem; color: white;"></i>\n                    Open\n                </a>\n            </td>\n                <td class="fw-light fs-6">\n                    <small class>\n                    LAC-{{ task.id }}\n                    </small>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light text-bg-secondary">\n                        {{ task.project if task.project else "Unknown Project" }}\n                    </span>\n                </td>\n                <td class="fs-6" data-contributor-column>{{ task.assigned_to if task.assigned_to else "Unassigned" }}</td>\n                <td class="fs-6">{{ task.story_points }}</td>\n                <td class="fs-6">\n                    <span class="badge rounded-pill fw-light text-bg-light">\n                        {{ task.task_type }}\n                    </span>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light {% if task.completed %}text-bg-success{% else %}text-bg-warning{% endif %}">\n                        {{ "Completed" if task.completed else "In Progress" }}\n                    </span>\n                </td>\n                <td>\n                    <!-- Delete Icon -->\n                    <button class="btn btn-dark btn-sm delete-task-btn" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .2rem; --bs-btn-font-size: .75rem;" data-task-id="{{ task.id }}" aria-label="Deletes task {{ task.id }}">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n            </tr>\n            {% for child in tasks if child.parent_id == task.id %}\n                {{ render_task(child, tasks, depth + 1) }}\n            {% endfor %}\n            {% endmacro %}\n            \n            <!-- Render top-level tasks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 8, 'created_at': '2025-01-15T09:46:29.349784', 'updated_at': '2025-03-01T02:01:18.851233'}, {'id': 289, 'name': 'issue: parent task is lost when updating task', 'description': '- Summary of the problem and solution\n    \n    **Problem: Parent Task Dropdown Was Not Being Set on Modal Open**\n    \n    The issue was that when opening a task modal, the **parent task dropdown** was not pre-populated with the correct parent task. However, interacting with the dropdown (e.g., clicking on it) would suddenly trigger it to be set correctly. This meant that the dropdown initialization was likely delayed or missing a step in the modal lifecycle.\n    \n    **Debugging Steps and Observations**\n    \n    1. **Task Details Were Fetched Correctly** ‚úÖ\n    - The task details, including parent_id, were being fetched from the API successfully.\n    1. **Parent Dropdown Initialization Issues** ‚ùå\n    - The initializeParentDropdown() function was being called, but the dropdown was sometimes **not fully ready** when we tried to set the selected parent task.\n    1. **Clicking the Dropdown Triggered the Parent to Be Set** ü§î\n    - This hinted that the dropdown was not fully ready when setParentDropdown(task.parent_id) was initially called.\n    \n    **Final Solution**\n    \n    1. **Ensuring Dropdown Readiness Before Setting the Parent Task**\n    - We added explicit **delays and checks** to confirm that the dropdown was fully initialized before attempting to set the parent task.\n    \n    Specifically, we:\n    \n    - **Waited for the dropdown to appear in the DOM** using observeParentDropdown().\n    - **Initialized the dropdown** with initializeParentDropdown().\n    - **Waited explicitly for the dropdown to be fully ready** using waitForParentDropdownReady().\n    - **Added a final delay of 200ms** before calling setParentDropdown() to ensure stability.\n    1. **Modifying openTaskModal to Handle Parent Dropdown Setup**\n    - We ensured that initializeParentDropdown() was called **after fetching task details** and before setting the parent task.\n    1. **Confirming the Fix** üéØ\n    - After these fixes, the parent dropdown was **immediately populated** upon opening the modal, without requiring user interaction.\n    \n    **Key Learnings**\n    \n    ‚úÖ **Dropdowns in modals need careful timing** ‚Äì They might not be ready when you expect them to be.\n    \n    ‚úÖ **Waiting for DOM updates is crucial** ‚Äì Observing the element ensures it actually exists before interacting with it.\n    \n    ‚úÖ **Explicit delays can prevent race conditions** ‚Äì A small delay can sometimes resolve timing issues in UI interactions.\n    \n    **Final Result**\n    \n    ‚úÖ The modal now **correctly loads and pre-selects the parent task** without extra clicks! üéâüöÄ', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 8, 'created_at': '2025-02-10T08:56:25.273984', 'updated_at': '2025-02-28T00:11:55.301302'}, {'id': 269, 'name': 'Fix styling for sweetalert', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'sort_order': 10, 'created_at': '2025-02-08T15:54:56.717846', 'updated_at': '2025-02-28T00:11:55.301281'}, {'id': 293, 'name': 'Click on title should copy the task title and id to clipboard', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 11, 'created_at': '2025-02-10T09:16:33.508209', 'updated_at': '2025-02-28T00:11:55.301304'}, {'id': 247, 'name': 'Add Temporary Badge', 'description': 'Add a temporary badge or visual indicator to the updated task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 241, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 11, 'created_at': '2025-02-05T12:57:37.151479', 'updated_at': '2025-02-27T08:43:14.054398'}, {'id': 294, 'name': 'Issue: task table filters not working', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 12, 'created_at': '2025-02-10T09:19:21.022598', 'updated_at': '2025-02-28T00:11:55.301306'}, {'id': 240, 'name': 'Update Task Workflow', 'description': 'As a user, I want to update the status of a task so that it reflects the changes in the UI dynamically without reloading the page.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'In Progress', 'sort_order': 14, 'created_at': '2025-02-05T12:54:55.061344', 'updated_at': '2025-02-28T00:11:55.301273'}, {'id': 242, 'name': 'User Control Over Views', 'description': 'As a user, I want to toggle between hierarchical and flat views so that I can switch sorting preferences based on my workflow.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 15, 'created_at': '2025-02-05T12:55:50.108011', 'updated_at': '2025-02-28T00:11:55.301275'}, {'id': 130, 'name': 'Implement the Map of Task Relationships solution for drag-and-drop', 'description': 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 16, 'created_at': '2025-01-15T09:41:28.093022', 'updated_at': '2025-02-28T00:11:55.301271'}, {'id': 246, 'name': 'Toast Notification', 'description': 'Display a toast notification confirming the task status update.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 241, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 16, 'created_at': '2025-02-05T12:57:37.151479', 'updated_at': '2025-02-27T08:43:14.054398'}, {'id': 283, 'name': 'Fix issue with updating task title', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 18, 'created_at': '2025-02-10T08:41:58.769700', 'updated_at': '2025-02-28T00:11:55.301295'}, {'id': 278, 'name': 'Implement search feature for tasks list', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 5, 'project': 'Project Delta', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 4, 'status': 'Not Started', 'sort_order': 19, 'created_at': '2025-02-10T07:36:03.369833', 'updated_at': '2025-02-28T00:11:55.301289'}, {'id': 62, 'name': 'Add OAuth integration for Google Login', 'description': 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 20, 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-02-28T00:11:55.301255'}, {'id': 279, 'name': 'github integration', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 21, 'created_at': '2025-02-10T07:36:38.238202', 'updated_at': '2025-02-28T00:11:55.301290'}, {'id': 65, 'name': 'Implement backend endpoints for Google OAuth', 'description': 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 22, 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-02-28T00:11:55.301260'}, {'id': 241, 'name': 'Provide User Feedback', 'description': 'As a user, I want to receive immediate feedback after updating a task‚Äôs status so that I know the update was successful.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 24, 'created_at': '2025-02-05T12:55:19.826398', 'updated_at': '2025-02-28T00:11:55.301274'}, {'id': 41, 'name': 'Implement Searchable Dropdown', 'description': 'As a user, I want a searchable dropdown for parent task assignment.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Completed', 'sort_order': 25, 'created_at': '2025-01-03T09:14:28.285904', 'updated_at': '2025-02-28T00:11:55.301181'}, {'id': 85, 'name': 'Assign multiple contributors to a task', 'description': 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 27, 'created_at': '2025-01-07T19:32:39.466022', 'updated_at': '2025-02-28T00:11:55.301266'}, {'id': 136, 'name': 'Page scroll should stay in position when reloading', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 28, 'created_at': '2025-01-16T18:21:50.187247', 'updated_at': '2025-02-28T00:11:55.301272'}, {'id': 267, 'name': 'Improvements to toggles and nested tasks', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 29, 'created_at': '2025-02-08T02:29:12.464594', 'updated_at': '2025-03-03T14:17:12.065528'}, {'id': 325, 'name': 'Improve task list responsive grid', 'description': '## üîç **How Leading Task Management Apps Handle Column Widths**\n\n### 1Ô∏è‚É£ **JIRA (Atlassian)**\n\nüîπ **Dynamic Resizing** (CSS Grid + JavaScript)\n\n- Uses `display: grid` for task tables.\n- Columns are resizable with a drag handle.\n- `grid-template-columns: auto 1fr auto;` for flexibility.\n- **Approach**: Fixed + flexible widths with an adaptive UI.\n\n---\n\n### 2Ô∏è‚É£ **Monday.com**\n\nüîπ **Flexbox-Based Table**\n\n- Uses `display: flex;` instead of `grid` for more control.\n- Columns use **`flex-grow`** to expand dynamically.\n- Drag handles allow users to resize columns.\n- **Approach**: **JavaScript-based column width management** to allow user customization.\n\n---\n\n### 3Ô∏è‚É£ **Asana**\n\nüîπ **Hybrid (Flexbox + JavaScript)**\n\n- Uses **CSS flexbox** for flexible layout.\n- Users can resize columns by dragging.\n- `min-width: 120px;` ensures usability.\n- **Approach**: A combination of `flex` and `min-width` to ensure usability on smaller screens.\n\n---\n\n### 4Ô∏è‚É£ **Linear**\n\nüîπ **CSS Grid with `fr` Units**\n\n- Uses a modern **CSS Grid** approach:\n    \n    ```css\n    grid-template-columns: auto 1fr auto;\n    ```\n    \n- Dynamically adjusts the width of columns **based on content**.\n- Uses `grid-template-columns: minmax(150px, 2fr) 3fr 1fr;` for controlled column expansion.\n- **Approach**: Minimalist UI with focus on speed and responsiveness.\n\n---\n\n### 5Ô∏è‚É£ **Shortcut**\n\nüîπ **Similar to Jira (Resizable Columns)**\n\n- Uses **CSS Grid + JavaScript-based resizing**.\n- Stores user preferences (column order, width) in **local storage**.\n- **Approach**: Persistent column sizes per user, allowing for a **customizable layout**.\n\n---\n\n## ‚úÖ **What‚Äôs the Best Approach for Our App?**\n\n### üéØ **Option 1: CSS Grid (Recommended)**\n\n```css\ngrid-template-columns: 1fr 2fr 1fr;\n```\n\nPros:\n‚úî **Modern**\n\n‚úî **Auto-resizes based on content**\n\n‚úî **Easy to manage**\n\n---\n\n### üéØ **Option 2: Flexbox (For More Control)**\n\n```css\ndisplay: flex;\nflex-grow: 1;\nmin-width: 120px;\n```\n\nPros:\n‚úî **More control over column shrinking/growing**\n\n‚úî **Easier to make resizable**\n\n‚úî **Ideal for draggable column resizing**\n\n---\n\n### üéØ **Option 3: JavaScript-Powered Resizing (Advanced)**\n\n- Uses `grid-template-columns` but **lets users drag & resize**.\n- Stores **column widths in local storage**.\n- Uses `ResizeObserver` to listen for changes.\n\nPros:\n‚úî **User-friendly (lets users resize columns)**\n\n‚úî **Persistent user preferences**\n\n‚úî **Great for complex task management apps**\n\n---\n\n## üî• **What‚Äôs the Best Choice for Us?**\n\n- If you want **simple auto-adjusting columns**, go with **CSS Grid** (`fr` units).\n- If you need **manual resizing**, use **Flexbox + JavaScript**.\n- If you want **fully customizable layouts**, use **JavaScript-powered resizing** like Jira or Monday.\n\nWould you like me to **implement resizable columns** with JavaScript? üöÄ', 'task_type': 'Epic', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'sort_order': 30, 'created_at': '2025-02-25T00:02:51.810711', 'updated_at': '2025-03-03T14:17:02.484796'}, {'id': 274, 'name': 'Add support for goals, initiatives, okr¬¥s', 'description': 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n\n√∂lkasd√∂lkk', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P1', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 31, 'created_at': '2025-02-10T00:46:27.204912', 'updated_at': '2025-02-28T00:11:55.301284'}, {'id': 63, 'name': 'Add OAuth integration for GitHub Login', 'description': 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'sort_order': 32, 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-02-27T08:43:14.054354'}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 32, 'created_at': '2025-02-10T08:41:17.786154', 'updated_at': '2025-03-03T14:16:41.747486'}, {'id': 276, 'name': 'Add support for priority', 'description': 'ffasdlkjlkj\nljkkjlkj', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P0', 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 33, 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-28T00:11:55.301286'}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'description': 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- Custom status\n-- Custom status\n- In Progress\n-- Custom status\n-- Custom status\n-- Custom status\n- Completed\n-- Custom status\n-- Custom status\n\n2. How can we track a task through different stages and save the sequence of events or stages the task has gone through?\nI¬¥m thinking it could be good for mapping out processes, identifying bottlenecks and provide valuable insights while improving and streamlining workflows.\n- Stages\n- Contacts taken\n- Respons time \n- Time to action after responses\n- Dependencies\n\nNeed to be able to record every action related to this action.\nCommunication integrations\n- Slack\n- Email\n- Text messages\n- Phonecalls\n- Calendar events, meetings\n- Zoom, Google meet, Teams etc..\n\n\n2. Set custom statuses per project (can use tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 34, 'created_at': '2025-02-10T07:16:03.352588', 'updated_at': '2025-03-03T14:16:31.129766'}, {'id': 68, 'name': 'Register application in GitHub Developer Console', 'description': 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 35, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-02-27T08:43:14.054358'}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'description': 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be lost"\nOR\n\nIs it possible, and is it desireable to keep parent child relationships across projects?\nSo that a parent can be in one project but the child tasks can be in different projects?\n\nLets say \nParent epic is \n"Internationalisation"\nChild user stories are\n- Timezones\n- Language\n- Currency\n- Day, Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 35, 'created_at': '2025-02-10T08:54:36.297869', 'updated_at': '2025-03-03T14:16:24.364985'}, {'id': 284, 'name': 'Add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 36, 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-28T00:11:55.301296'}, {'id': 281, 'name': 'Add a page for roadmap', 'description': 'Add some sort of high level plan that aims to keep PM/PO¬¥s on track and not get lost into the details of an overwhelming large backlog', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 37, 'created_at': '2025-02-10T08:27:01.218606', 'updated_at': '2025-02-28T00:11:55.301293'}, {'id': 273, 'name': 'Disable parent task selector in epics', 'description': 'and add text, Epic can¬¥t have parent tasks', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 38, 'created_at': '2025-02-10T00:45:20.740910', 'updated_at': '2025-02-28T00:11:55.301283'}, {'id': 69, 'name': 'Handle callback from GitHub', 'description': 'Implement the callback endpoint to process the authorization code from GitHub.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 38, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-02-26T21:53:17.041822'}, {'id': 280, 'name': 'logging (task and project history)', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 39, 'created_at': '2025-02-10T07:37:44.435112', 'updated_at': '2025-02-28T00:11:55.301291'}, {'id': 275, 'name': 'Add support for sprints/cycles', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 40, 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-28T00:11:55.301285'}, {'id': 100, 'name': '1.1 User Registration', 'description': '<blockquote><p>As a user, I want to register with a username, email, and password so that I can create an account and access the system. </p></blockquote><p>**Acceptance Criteria:** </p><ul><li><p>‚Ä¢ User can input valid username, email, and password.</p></li><li><p>‚Ä¢ Username and email must be unique. </p></li><li><p>‚Ä¢ Errors are displayed for invalid inputs or duplicate accounts. </p></li><li><p>‚Ä¢ Passwords must meet complexity requirements and be securely stored. </p></li><li><p>‚Ä¢ Successful registration redirects users to a login page.</p></li></ul><hr><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 41, 'created_at': '2025-01-07T19:59:09.044667', 'updated_at': '2025-03-03T14:20:10.801828'}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'description': 'kkkkkkkjjjjj\nlkajdl√∂kjsdf√∂lkjsdf√∂lkjdf', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 41, 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-28T00:11:55.301297'}, {'id': 107, 'name': '1.1.1 Database Changes for User Registration', 'description': '<p>1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.</p><p></p><hr><p>Adding text</p><pre><code>CREATE TABLE public.users ( id SERIAL PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL, created_at TIMESTAMP DEFAULT NOW(), updated_at TIMESTAMP DEFAULT NOW() );</code></pre><p></p>', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 42, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-03-03T20:49:45.725711'}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'description': 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitHub Login involves integrating OAuth 2.0, which both services support. The complexity depends on your app‚Äôs existing setup, frameworks, and experience with third-party authentication. Below is a breakdown:\n\nKey Steps for Implementing Google or GitHub Login\n\t1.\tSet Up OAuth Credentials:\n\t‚Ä¢\tRegister your application in the Google Cloud Console or GitHub Developer Settings.\n\t‚Ä¢\tObtain the client ID and client secret.\n\t2.\tInstall Required Libraries:\n\t‚Ä¢\tUse a library for OAuth (e.g., flask-oauthlib, python-social-auth, or authlib).\n\t‚Ä¢\tPopular frameworks like Flask and Django already have robust integrations for OAuth providers.\n\t3.\tBackend Configuration:\n\t‚Ä¢\tImplement an endpoint to handle the OAuth flow (/auth/login/google or /auth/login/github).\n\t‚Ä¢\tConfigure your app to send users to Google or GitHub‚Äôs authentication page.\n\t‚Ä¢\tHandle the OAuth callback to exchange the authorization code for an access token.\n\t‚Ä¢\tVerify the token and fetch user information (e.g., email, name).\n\t4.\tLink OAuth to User Registration:\n\t‚Ä¢\tOn successful login, create or retrieve a user in your database.\n\t‚Ä¢\tStore the user‚Äôs details like email, OAuth provider ID, and access token.\n\t5.\tFrontend Integration (if applicable):\n\t‚Ä¢\tAdd ‚ÄúLogin with Google‚Äù or ‚ÄúLogin with GitHub‚Äù buttons.\n\t‚Ä¢\tRedirect to your backend‚Äôs OAuth endpoint when clicked.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 42, 'created_at': '2025-01-07T12:15:54.291625', 'updated_at': '2025-02-28T00:11:55.301262'}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'description': 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 18, 'status': 'Not Started', 'sort_order': 43, 'created_at': '2025-01-07T19:53:50.085064', 'updated_at': '2025-02-28T00:11:55.301267'}, {'id': 61, 'name': 'Parent task assignment', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'sort_order': 44, 'created_at': '2025-01-04T22:31:45.205815', 'updated_at': '2025-02-28T00:11:55.301224'}, {'id': 108, 'name': '1.1.2 Backend API for Registration', 'description': '‚Ä¢\tCreate an endpoint POST /api/register:\n‚Ä¢\tValidate input fields.\n‚Ä¢\tHash the password using bcrypt or argon2.\n‚Ä¢\tInsert the user into the users table.\n‚Ä¢\tReturn success/failure responses.\ndddhfff\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 44, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-27T08:43:14.054375'}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t‚Ä¢\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t‚Ä¢\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t‚Ä¢\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 45, 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-02-28T00:11:55.301265'}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'description': 'PRD: Define roles and permissions to restrict access. Roles include admin, developer, and viewer. Implement middleware for access control checks.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 46, 'created_at': '2025-01-07T19:54:09.204981', 'updated_at': '2025-02-28T00:11:55.301268'}, {'id': 83, 'name': 'Notifications', 'description': 'Implement sending notifications to selected people triggered by events.\nCustomizing messages:\nPossibility to adjust how detailed the information should be and what level of technical difficulty the language can contain. Integration to LMS that tailors messages to different target groups and then sends the appropriate version to the appropriate target group.\n\n\n\n- Ready for Release\n   - Send documentation of new feature to support and customer success team\n      - Add technical documentation as file in documentation library.\n      - User documentation\n      - Create and send feature description to Sales & Marketing dep.\n      - Create and send feature description and estimation of added value for company and customer to Investors.\n   - Create and publish release notes online and in inline message system.\n\nRead more: https://www.notion.so/lacunamedia/Create-and-send-messages-triggered-by-events-174979257fc08022b18bc76d3b28a4b3?pvs=4', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 47, 'created_at': '2025-01-07T16:10:54.030609', 'updated_at': '2025-02-28T00:11:55.301263'}, {'id': 112, 'name': '1.2.2 Frontend Login Page', 'description': 'Develop a frontend form for user login with email and password inputs.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 47, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054377'}, {'id': 99, 'name': 'Enhance User Account Management', 'description': 'PRD: Provide additional account management features for users and admins. Includes profile management, password reset functionality, and audit logging.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'sort_order': 48, 'created_at': '2025-01-07T19:54:20.692949', 'updated_at': '2025-02-28T00:11:55.301269'}, {'id': 109, 'name': '1.1.3 Create Frontend Registration Page', 'description': 'Develop a frontend form to collect user registration details.\n‚Ä¢\tAdd a form for username, email, and password inputs.\n‚Ä¢\tUse client-side validation (e.g., email format).\n‚Ä¢\tSend a POST request to /api/register.\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 49, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-27T08:43:14.054375'}, {'id': 110, 'name': '1.1.4 Unit Tests for Registration', 'description': 'Write unit tests for:\n\n‚Ä¢\tValid registration.\n‚Ä¢\tDuplicate username/email scenarios.\n‚Ä¢\tInvalid input handling.\nff', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 50, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-27T08:43:14.054376'}, {'id': 101, 'name': '1.2 User Login', 'description': 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n‚Ä¢\tUsers can log in with a valid email and password.\n‚Ä¢\tErrors are displayed for invalid credentials.\n‚Ä¢\tSuccessful login stores a session or JWT token.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 52, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054370'}, {'id': 111, 'name': '1.2.1 Backend API for Login', 'description': 'Create POST /api/login endpoint to handle user login.\njjsjj', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 54, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054377'}, {'id': 113, 'name': '1.2.3 Session Management', 'description': 'Implement secure session handling using cookies or JWT.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 55, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054378'}, {'id': 114, 'name': '1.2.4 Unit Tests for Login', 'description': 'Write tests for successful and failed login attempts.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 56, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054379'}, {'id': 106, 'name': 'Password Reset', 'description': 'As a user, I want to reset my password securely using email.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'sort_order': 57, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054373'}, {'id': 128, 'name': 'Frontend Password Reset Page', 'description': 'Develop a page for users to enter a new password using a valid token.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 58, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054388'}, {'id': 129, 'name': 'Testing Password Reset', 'description': 'Write tests for email delivery, token validation, and password updates.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 59, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054389'}, {'id': 102, 'name': 'Logout', 'description': 'As a user, I want to log out so that I can end my session securely.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 60, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054371'}, {'id': 117, 'name': 'Tests for Logout', 'description': 'Verify session invalidation and redirection to the login page.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 61, 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-27T08:43:14.054381'}, {'id': 381, 'name': 'Delete this', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 344, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 61, 'created_at': '2025-02-28T23:48:05.992788', 'updated_at': '2025-03-04T17:17:46.383393'}, {'id': 116, 'name': 'Frontend Logout Button', 'description': 'Add a logout button to the UI and handle session clearing.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 62, 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-27T08:43:14.054380'}, {'id': 115, 'name': 'Backend API for Logout', 'description': 'Create POST /api/logout endpoint to invalidate user sessions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 63, 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-27T08:43:14.054379'}, {'id': 45, 'name': 'Display Default Value in Dropdown', 'description': 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 64, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054343'}, {'id': 50, 'name': 'Retrieve Current Parent Task', 'description': 'Retrieve the current parent task‚Äôs ID and name from the backend.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Completed', 'sort_order': 65, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054346'}, {'id': 51, 'name': 'Set Default Value', 'description': 'Set the default value in the dropdown based on the retrieved data.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 45, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 1, 'status': 'Not Started', 'sort_order': 66, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054347'}, {'id': 46, 'name': 'Search for Parent Tasks', 'description': 'Allow users to search for tasks dynamically in the dropdown by typing.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'sort_order': 67, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054344'}, {'id': 54, 'name': 'Test Partial Matching', 'description': 'Ensure the search results update in real-time as the user types.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 68, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054349'}, {'id': 47, 'name': 'Handle Large Datasets Efficiently', 'description': 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'sort_order': 69, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054344'}, {'id': 56, 'name': 'Paginate API Responses', 'description': 'Implement server-side filtering and pagination for large datasets.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 70, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054350'}, {'id': 55, 'name': 'Enable Lazy Loading', 'description': 'Enable lazy loading or virtualization in Virtual Select.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 71, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054350'}, {'id': 48, 'name': 'Select and Deselect Parent Tasks', 'description': 'Allow users to select a parent task or deselect by choosing "None."', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 72, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054345'}, {'id': 57, 'name': 'Ensure None Option Availability', 'description': 'Add ‚ÄúNone‚Äù as a selectable option and ensure it stays at the top of the list.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 73, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054351'}, {'id': 58, 'name': 'Handle Selection Events', 'description': 'Implement event listeners to update the form‚Äôs state when the selection changes.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 74, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054352'}, {'id': 49, 'name': 'Integrate Dropdown with Task Form', 'description': 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 75, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054346'}, {'id': 376, 'name': 'Subtask test', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 346, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 76, 'created_at': '2025-02-28T23:01:44.247988', 'updated_at': '2025-03-04T15:44:10.651229'}, {'id': 59, 'name': 'Bind Dropdown to Form Field', 'description': 'Bind the dropdown to the form‚Äôs parent task field.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'In Progress', 'sort_order': 76, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054352'}, {'id': 383, 'name': 'new user story', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 344, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 76, 'created_at': '2025-03-01T01:00:27.095399', 'updated_at': '2025-03-04T17:47:38.815069'}, {'id': 60, 'name': 'Test Form Submission', 'description': 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 77, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054353'}, {'id': 52, 'name': 'Add Search Box to Dropdown', 'description': 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 78, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054348'}, {'id': 53, 'name': 'Implement AJAX Search', 'description': 'Implement AJAX-based search to fetch tasks dynamically from the backend.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 79, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054348'}, {'id': 42, 'name': 'Choose Dropdown Library', 'description': 'Research and decide on the dropdown library to use.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 80, 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-27T08:43:14.054341'}, {'id': 378, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 80, 'created_at': '2025-02-28T23:17:32.404713', 'updated_at': '2025-03-01T00:17:32.410920'}, {'id': 43, 'name': 'Integrate Dropdown Library', 'description': 'Integrate the chosen dropdown library into the project.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Completed', 'sort_order': 81, 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-27T08:43:14.054342'}, {'id': 377, 'name': 'Taskade', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 342, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 82, 'created_at': '2025-02-28T23:02:24.453543', 'updated_at': '2025-03-04T17:12:31.851611'}, {'id': 90, 'name': 'Update frontend to display and manage multiple contributors', 'description': 'Allow users to view, add, or remove multiple contributors via the UI.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 82, 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-27T08:43:14.054364'}, {'id': 88, 'name': 'Update database schema for multiple contributors', 'description': 'Modify the task table to support many-to-many relationships for contributors.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 83, 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-27T08:43:14.054362'}, {'id': 89, 'name': 'Develop backend API for adding contributors to a task', 'description': 'Create endpoints to add, update, and remove contributors for a task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 84, 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-27T08:43:14.054363'}, {'id': 86, 'name': 'Allow designation of task owner', 'description': 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 85, 'created_at': '2025-01-07T19:33:29.330562', 'updated_at': '2025-02-27T08:43:14.054361'}, {'id': 375, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 85, 'created_at': '2025-02-28T22:48:35.594251', 'updated_at': '2025-02-28T23:48:35.676455'}, {'id': 93, 'name': 'Update frontend to manage task ownership', 'description': 'Allow users to assign or update the task owner via the UI.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 86, 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-27T08:43:14.054365'}, {'id': 384, 'name': 'Changed title', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 86, 'created_at': '2025-03-01T12:06:32.303897', 'updated_at': '2025-03-04T17:34:48.465098'}, {'id': 91, 'name': 'Update database schema for task ownership', 'description': 'Add a column or relationship to assign a single owner per task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 87, 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-27T08:43:14.054364'}, {'id': 92, 'name': 'Develop backend API for assigning task owner', 'description': 'Create endpoints to assign or update the owner of a task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 88, 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-27T08:43:14.054365'}, {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 89, 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-02-27T08:43:14.054362'}, {'id': 96, 'name': 'Allow admin users to create and customize contributor roles via frontend', 'description': 'Provide UI functionality for admins to manage contributor roles dynamically.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 90, 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-27T08:43:14.054367'}, {'id': 94, 'name': 'Add database support for contributor roles', 'description': 'Introduce a roles table and link contributors to specific roles for tasks.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 91, 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-27T08:43:14.054366'}, {'id': 95, 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 92, 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-27T08:43:14.054367'}, {'id': 127, 'name': 'Backend API for Password Reset', 'description': 'Create endpoints to handle password reset requests and token validation.\ndfdf\n\nasdasd', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 93, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054387'}, {'id': 126, 'name': 'Email Configuration for Password Reset', 'description': 'Configure email service to send password reset links.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 94, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054387'}, {'id': 104, 'name': 'Middleware for Role Enforcement', 'description': 'As a system, I want to enforce role-based access to specific routes.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 98, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 95, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054372'}, {'id': 122, 'name': 'Testing Role Enforcement', 'description': 'Write tests to ensure proper access control based on roles.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 96, 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-02-27T08:43:14.054384'}, {'id': 121, 'name': 'Develop Role Enforcement Middleware', 'description': 'Implement middleware to check user roles for access control.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 104, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 97, 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-02-27T08:43:14.054383'}, {'id': 105, 'name': 'Profile Management', 'description': 'As a user, I want to update my profile (username, email, password).', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 99, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 98, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054373'}, {'id': 123, 'name': 'Backend API for Profile Management', 'description': 'Create PATCH /api/profile endpoint to update user details.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 99, 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-02-27T08:43:14.054385'}, {'id': 125, 'name': 'Testing Profile Updates', 'description': 'Write tests for profile update functionality.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 100, 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-02-27T08:43:14.054386'}, {'id': 124, 'name': 'Frontend Profile Page', 'description': 'Develop a profile page for editing user details.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 101, 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-02-27T08:43:14.054385'}, {'id': 103, 'name': 'Role Assignment', 'description': 'As an administrator, I want to assign roles to users so that I can control access to certain features.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 98, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 102, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054372'}, {'id': 120, 'name': 'Testing Role Assignment', 'description': 'Write tests to validate role changes and restrictions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 103, 'created_at': '2025-01-07T20:40:58.383687', 'updated_at': '2025-02-27T08:43:14.054383'}, {'id': 119, 'name': 'Backend API for Role Assignment', 'description': 'Create POST /api/assign-role endpoint to manage user roles.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 104, 'created_at': '2025-01-07T20:40:58.383687', 'updated_at': '2025-02-27T08:43:14.054382'}, {'id': 118, 'name': 'Database Changes for Role Assignment', 'description': 'Add a role column to the users table.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 105, 'created_at': '2025-01-07T20:40:58.383687', 'updated_at': '2025-02-27T08:43:14.054381'}, {'id': 44, 'name': 'Test Performance with 500 Tasks', 'description': 'Ensure dropdown performance remains smooth with 500 tasks.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 107, 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-26T21:53:17.041813'}]
2025-03-04 17:55:52,078 DEBUG: Task types: ['all', 'Subtask', 'Epic', 'User Story']
2025-03-04 17:55:52,078 DEBUG: Projects: [<Project Project Alpha (ID: 1)>, <Project Project Beta (ID: 2)>, <Project Project Gamma (ID: 3)>, <Project Project Theta (ID: 4)>, <Project Project Delta (ID: 5)>, <Project PMS - Feature Requests (ID: 7)>, <Project PMS - Backlog (ID: 6)>, <Project Miscellaneous (ID: 19)>]
2025-03-04 17:55:52,079 DEBUG: Tasks response: [{'id': 370, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T21:27:30.386959', 'updated_at': '2025-02-28T22:27:30.395572'}, {'id': 346, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:24:40.311054', 'updated_at': '2025-02-28T15:24:40.322156'}, {'id': 342, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:11.944980', 'updated_at': '2025-02-28T15:18:11.954065'}, {'id': 344, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:16.258493', 'updated_at': '2025-02-28T15:18:16.268248'}, {'id': 339, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:10.856511', 'updated_at': '2025-02-28T15:18:10.860682'}, {'id': 265, 'name': 'Smooth transition for toggles', 'description': '<p>Added new description</p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-03-01T15:23:05.271095'}, {'id': 292, 'name': 'Issue: assigning contributor does not work', 'description': '<p>### **Summary of problem and solution** The issue was that assigning a contributor to a task via the /tasks//assign_contributor API endpoint resulted in a **400 Bad Request** error. Upon investigation, the following problems were identified: 1. **Missing CSRF Token:** - The request failed due to a missing CSRF token, as shown in the error message: *‚ÄúBad Request: The CSRF token is missing.‚Äù* - The frontend was not correctly including the CSRF token in the request headers. 1. **JavaScript Error (Undefined CSRF Token Variable):** - The error *‚ÄúReferenceError: csrfToken is not defined‚Äù* indicated that the CSRF token was not being retrieved properly in the JavaScript code. 1. **Incorrect Fetch Request Headers:** - The fetch request did not include the CSRF token under the correct key (X-CSRFToken). - The script attempted to send the request without properly extracting the CSRF token from the meta tag. ### **Solution** 1. **Include the CSRF Token in the JavaScript Code** The CSRF token was retrieved from the meta tag and used in the request headers: ```jsx // Retrieve CSRF token from meta tag const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\'); ``` This ensures that the CSRF token is correctly fetched and available in the JavaScript scope. 1. **Modify the Fetch Request to Include CSRF Token** The request to assign a contributor was updated to include the token: ```jsx const response = await fetch(`/tasks/${taskId}/assign_contributor`, { method: "POST", headers: { "Content-Type": "application/json", "X-CSRFToken": csrfToken // Include CSRF token }, body: JSON.stringify({ contributor_id: parseInt(contributorId, 10) }), }); ``` - **Ensures the CSRF token is sent in the request headers** so that Flask-WTF does not reject the request. 1. **Verify and Debug Network Requests** - The updated request headers were verified using **Chrome DevTools &gt; Network tab** to ensure the X-CSRFToken was included. - The error messages disappeared, and the contributor assignment request **succeeded with a 200 OK response**. --- ### **Final Outcome** üöÄ The issue was resolved, and contributors can now be assigned successfully to tasks without triggering a CSRF validation error. ### **Key Learnings from This Session** This debugging session covered several important aspects of **web development with Flask and JavaScript**, particularly related to **API requests, CSRF protection, debugging tools, and database interactions**. Here are the key takeaways: --- ### **1. CSRF Protection in API Requests** - **Issue:** The initial error was due to **a missing CSRF token** when making a `POST` request. - **Fix:** The solution was to **retrieve the CSRF token from a meta tag** in the HTML and include it in the request headers. - **Key Learning:** Flask-WTF requires CSRF tokens for form and API submissions to **prevent cross-site request forgery (CSRF) attacks**.‚úÖ Always ensure that API requests include a valid CSRF token. --- ### **2. Debugging JavaScript Fetch Requests** - **Issue:** The JavaScript code was making a fetch request, but the variable `csrfToken` was not properly defined, causing a `ReferenceError`. - **Fix:** Declaring `csrfToken` at the beginning of the script: ```jsx const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\'); ``` - **Key Learning:**‚úÖ JavaScript variables must be defined before they are used.‚úÖ Use browser **developer tools (DevTools) Network tab** to inspect headers, payloads, and responses when debugging API requests. --- ### **3. Structuring Flask Routes for Task Management** - **Issue:** The `assign_contributor` route was failing due to incorrect request payload validation. - **Fix:** Improved the route‚Äôs error handling and logging: ```python @bp.route(\'//assign_contributor\', methods=[\'POST\']) def assign_contributor(task_id): try: data = request.get_json() contributor_id = int(data.get(\'contributor_id\', 0)) if not contributor_id: return jsonify({\'error\': \'Valid Contributor ID is required\'}), 400 ``` - **Key Learning:**‚úÖ Always validate incoming data in Flask routes to prevent type errors.‚úÖ Use `request.get_json()` properly and handle missing or incorrect data gracefully. --- ### **4. Utilizing Browser DevTools for Debugging** - **Issue:** The fetch request was failing with a `400 Bad Request`, and the browser console showed `ReferenceError: csrfToken is not defined`. - **Fix:** - Used **Network tab** to inspect the request payload and headers. - Used **Console tab** to catch JavaScript errors early. - **Key Learning:**‚úÖ DevTools is a **critical** tool for diagnosing network request issues.‚úÖ Always **check console errors** before assuming it\'s a backend issue. --- ### **5. Database Queries and ORM Debugging** - **Issue:** Tasks were not being updated correctly, possibly due to missing commit statements. - **Fix:** Ensured that:was executed properly. ```python task.contributor_id = contributor_id db.session.commit() ``` - **Key Learning:**‚úÖ Always call `db.session.commit()` after making changes in SQLAlchemy.‚úÖ Rollback transactions if an error occurs to avoid database inconsistency. --- ### **6. Handling Asynchronous JavaScript Logic** - **Issue:** The `assignContributor` function was executing before the page was fully loaded. - **Fix:** Wrapped it inside a function that ensures elements exist: ``` window.setupContributorAssignment = function () { const assignButton = $("#assign-contributor-btn"); if (!assignButton.length) { setTimeout(setupContributorAssignment, 500); // Retry in 500ms return; } ``` - **Key Learning:**‚úÖ Use `setTimeout` to **retry event binding** when elements are dynamically loaded.‚úÖ Always **check if elements exist before attaching event handlers**. --- ### **7. Best Practices for Flask Logging &amp; Error Handling** - **Issue:** Lack of clear logging when API calls failed. - **Fix:** Added better logging to track failures: ```python logger.info(f"Assigning contributor to task ID {task_id}") try: # Process request... except Exception as e: logger.error(f"Error assigning contributor: {e}") ``` - **Key Learning:**‚úÖ Log **every major step** in API processing to simplify debugging.‚úÖ Differentiate between `logger.info()`, `logger.warning()`, and `logger.error()` based on severity. --- ### **Final Takeaways** üöÄ **Understanding CSRF protection** and **properly structuring API requests** is crucial for secure web applications. üîç **Browser DevTools is invaluable** for diagnosing frontend issues, especially in JavaScript. üêç **Flask requires proper request validation, database transactions, and logging** to maintain stability. ‚ö° **Asynchronous JavaScript must handle dynamic elements carefully** to avoid runtime errors. This session reinforced best practices in **frontend-backend integration, debugging, and security**, making it a great learning experience! üöÄüî•</p>', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 0, 'created_at': '2025-02-10T09:11:12.273779', 'updated_at': '2025-03-04T00:41:24.838143'}, {'id': 373, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T22:10:59.863170', 'updated_at': '2025-02-28T23:10:59.893542'}, {'id': 335, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:44:45.530624', 'updated_at': '2025-02-28T14:44:45.542212'}, {'id': 357, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T15:08:15.356759', 'updated_at': '2025-02-28T16:08:15.371374'}, {'id': 343, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:12.267445', 'updated_at': '2025-02-28T15:18:12.278088'}, {'id': 337, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:07.626569', 'updated_at': '2025-02-28T15:18:07.632643'}, {'id': 361, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T17:11:52.257703', 'updated_at': '2025-02-28T18:11:52.262071'}, {'id': 355, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:55:16.105634', 'updated_at': '2025-02-28T15:55:16.131837'}, {'id': 348, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:26:17.632940', 'updated_at': '2025-02-28T15:26:17.642972'}, {'id': 332, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:35:43.663809', 'updated_at': '2025-02-28T14:35:43.673337'}, {'id': 333, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:36:20.683426', 'updated_at': '2025-02-28T14:36:20.691337'}, {'id': 365, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:30:48.877580', 'updated_at': '2025-02-28T19:30:48.887060'}, {'id': 340, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:11.061737', 'updated_at': '2025-02-28T15:18:11.075736'}, {'id': 367, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:39:25.734101', 'updated_at': '2025-02-28T19:39:25.739322'}, {'id': 366, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:38:39.027061', 'updated_at': '2025-02-28T19:38:39.048248'}, {'id': 358, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T15:46:04.956844', 'updated_at': '2025-02-28T16:46:04.966511'}, {'id': 244, 'name': 'Scroll to Updated Task', 'description': 'Automatically scroll to the updated task in the list if it‚Äôs out of view.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 0, 'created_at': '2025-02-05T12:56:52.818501', 'updated_at': '2025-02-28T00:11:57.987007'}, {'id': 353, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:52:04.500938', 'updated_at': '2025-02-28T15:52:04.512331'}, {'id': 362, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 284, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:14:50.969730', 'updated_at': '2025-03-04T17:30:45.507303'}, {'id': 356, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T15:08:08.061166', 'updated_at': '2025-02-28T16:08:08.066215'}, {'id': 329, 'name': 'Implement an API endpoint for submitting raw feature requests.', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-27T23:13:09.068616', 'updated_at': '2025-03-01T01:00:05.807248'}, {'id': 341, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:11.691354', 'updated_at': '2025-02-28T15:18:11.699365'}, {'id': 351, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:32:58.672570', 'updated_at': '2025-02-28T15:32:58.678298'}, {'id': 336, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:07:11.299563', 'updated_at': '2025-02-28T15:07:11.310976'}, {'id': 369, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T21:17:46.272998', 'updated_at': '2025-02-28T22:17:46.285417'}, {'id': 352, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:51:56.533768', 'updated_at': '2025-02-28T15:51:56.563880'}, {'id': 334, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:44:06.347090', 'updated_at': '2025-02-28T14:44:06.354371'}, {'id': 338, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:10.122843', 'updated_at': '2025-02-28T15:18:10.128941'}, {'id': 350, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:32:49.928206', 'updated_at': '2025-02-28T15:32:49.935531'}, {'id': 248, 'name': 'Implement Toggle Button', 'description': 'Add a toggle button to switch between hierarchical and flat views.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-05T12:58:14.518518', 'updated_at': '2025-02-28T00:11:48.483207'}, {'id': 354, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:54:59.543585', 'updated_at': '2025-02-28T15:54:59.553122'}, {'id': 347, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:24:45.846396', 'updated_at': '2025-02-28T15:24:45.860885'}, {'id': 345, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:53.170926', 'updated_at': '2025-02-28T15:18:53.179222'}, {'id': 331, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:35:35.797059', 'updated_at': '2025-02-28T14:35:35.813440'}, {'id': 359, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-28T15:54:42.242569', 'updated_at': '2025-03-01T02:01:18.851236'}, {'id': 291, 'name': 'Add dropdowns in task list for changing: Assigned to, Estimate, Task Type and Status', 'description': '<p>Write Description task description...</p>', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 1, 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-03-01T22:09:13.882787'}, {'id': 386, 'name': 'Test task', 'description': '<p>Testing tiptap editor lkjlk</p><hr><p>Write something</p><hr><p>Write something</p><hr><p></p>', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 284, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 9, 'status': 'In Progress', 'sort_order': 1, 'created_at': '2025-03-01T12:39:07.359868', 'updated_at': '2025-03-04T15:33:53.366530'}, {'id': 245, 'name': 'Apply Dynamic Sorting and Filtering', 'description': 'Ensure the task list dynamically updates its sorting and filtering after a status change.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'In Progress', 'sort_order': 1, 'created_at': '2025-02-05T12:56:52.818501', 'updated_at': '2025-02-28T00:12:01.504825'}, {'id': 327, 'name': 'üèÜ\xa0Epic: AI-Driven Feature Planning & Estimation', 'description': '<h2><strong>Description:&nbsp;</strong></h2><p>AI assists in refining raw feature requests into</p><p>structured plans, generating PRDs, Epics, User Stories, Acceptance Criteria, and Edge Cases. AI also provides intelligent estimations based on historical data and improves accuracy over time.</p><p></p><hr><h2>## Heading</h2><p></p>', 'task_type': 'Epic', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-27T23:02:31.274292', 'updated_at': '2025-03-04T15:27:42.964232'}, {'id': 64, 'name': 'Setup project credentials for Google API', 'description': 'Generate client ID and secret from Google API Console for your application.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-03-01T02:01:02.546625'}, {'id': 250, 'name': 'Preserve User Preferences', 'description': 'Persist the user‚Äôs chosen view state between sessions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-05T12:58:14.518518', 'updated_at': '2025-02-28T00:11:48.483213'}, {'id': 249, 'name': 'Define View States', 'description': 'Clearly label and define the view states for hierarchical and flat sorting.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-05T12:58:14.518518', 'updated_at': '2025-02-28T00:11:48.483213'}, {'id': 360, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-28T15:54:58.904932', 'updated_at': '2025-03-01T02:01:18.851237'}, {'id': 266, 'name': 'Highlight the nested tasks', 'description': '<p>lkjlkjlkjlkjlkjlkjWrite your task description...</p><p></p><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-03-03T17:32:52.809368'}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'description': '<p>Write your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p>', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-03-03T08:46:23.302934'}, {'id': 243, 'name': 'Highlight Updated Task', 'description': 'Highlight the updated task in the UI to provide immediate visual feedback.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 2, 'created_at': '2025-02-05T12:56:52.818501', 'updated_at': '2025-02-28T00:12:01.504819'}, {'id': 67, 'name': 'Test Google OAuth flow', 'description': 'Verify the OAuth flow using test accounts and check the token exchange.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-03-01T02:01:02.546635'}, {'id': 295, 'name': 'Issue: drag and drop errors', 'description': '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-10T09:22:54.461413', 'updated_at': '2025-02-28T00:11:55.301307'}, {'id': 290, 'name': 'issue: error when changing task type and', 'description': 'issue: error when changing task type and parent task before saving', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-10T09:00:03.417734', 'updated_at': '2025-03-01T02:01:18.851234'}, {'id': 257, 'name': 'Update Task API Integration', 'description': "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-05T22:55:49.566819', 'updated_at': '2025-02-28T00:11:57.987011'}, {'id': 66, 'name': 'Setup OAuth scopes for Google API', 'description': 'Determine the required OAuth scopes for your application and add them to the configuration.\nedit', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-03-01T02:01:02.546634'}, {'id': 326, 'name': 'Add dropdown in task list for changing: Project', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-26T22:10:15.209008', 'updated_at': '2025-03-01T02:01:12.498734'}, {'id': 264, 'name': 'Close all / Open all childtasks', 'description': '<p>Added new description check other tab</p><p></p><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 7, 'status': 'Not Started', 'sort_order': 4, 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-03-03T07:43:17.298288'}, {'id': 133, 'name': 'Step 4: Enhance Logging in models.py', 'description': 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nupdating the Task model in the following ways:\n\n1.\tLog Changes to parent_id:\n\t‚Ä¢\tLog changes to parent_id during updates, including old and new values.\n\t2.\tValidate Hierarchy with Logging:\n\t‚Ä¢\tLog detailed messages when validating hierarchy changes, especially for circular dependency checks.\n\nHere‚Äôs how the models.py can be updated:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy import func, cast, CheckConstraint\nfrom sqlalchemy.orm import validates\nfrom app.extensions.db import db\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\nclass Task(db.Model):\n    __tablename__ = "task"\n    \n    # Other columns...\n\n    parent_id = db.Column(\n        db.Integer, db.ForeignKey("task.id"), index=True, nullable=True\n    )\n\n    # Relationships\n    parent = db.relationship(\n        "Task", remote_side=[id], back_populates="children", lazy="select"\n    )\n    children = db.relationship(\n        "Task", back_populates="parent", lazy="select"\n    )\n\n    \n\n\n    @staticmethod\n    def _validate_no_circular_references(new_parent_id):\n        """\n        Validates that there are no circular references in the task hierarchy.\n\n        Args:\n            new_parent_id (int): The new parent ID to validate.\n\n        Raises:\n            ValueError: If a circular reference is detected.\n        """\n        visited = set()\n        current_parent_id = new_parent_id\n\n        logger.info(f"Validating circular references for parent ID: {new_parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error(\n                    f"Circular reference detected: Parent ID {current_parent_id} already visited."\n                )\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            # Fetch the next parent_id in the hierarchy\n            parent = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not parent:\n                break  # Exit if no parent is found\n            current_parent_id = parent.parent_id\n\n        logger.info("No circular reference detected.")\n\n    @validates(\'parent_id\', \'task_type\')\n    def validate_task_changes(self, key, value):\n        """\n        Validates changes to \'parent_id\' and \'task_type\'.\n        Ensures hierarchy validity and checks for circular references.\n        """\n        logger.debug(f"Validating {key} change for Task {self.id}: {value}")\n\n        if key == \'parent_id\':\n            # Log changes to parent_id\n            if self.id and value != self.parent_id:\n                logger.info(f"Task {self.id}: Updating \'parent_id\' from {self.parent_id} to {value}")\n\n            # Prevent a task from being its own parent\n            if value and value == self.id:\n                logger.error("A task cannot be its own parent.")\n                raise ValueError("A task cannot be its own parent.")\n\n            # Check for circular references\n            if value:\n                Task.check_circular_reference(self.id, value)\n\n        elif key == \'task_type\':\n            # Log changes to task_type\n            if self.id and value != self.task_type:\n                logger.info(f"Task {self.id}: Updating \'task_type\' from {self.task_type} to {value}")\n\n        # Check hierarchy rules without triggering further validation\n        if key in [\'parent_id\', \'task_type\']:\n            self._validate_hierarchy_change(key, value)\n\n        logger.info(f"Validation passed for {key}: {value}")\n        return value\n\n    def _validate_hierarchy_change(self, key, value):\n        """\n        Validates hierarchy rules for the task based on `task_type` and `parent_id`.\n        """\n        if key == \'parent_id\' and value:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=value).first()\n            if not parent_task:\n                raise ValueError("Parent task does not exist.")\n\n            logger.debug(f"Validating hierarchy: Task {self.id}, Parent Type: {parent_task.task_type}")\n            if self.task_type == "User Story" and parent_task.task_type != "Epic":\n                raise ValueError("User Stories must have an Epic as a parent.")\n            if self.task_type == "Subtask" and parent_task.task_type != "User Story":\n                raise ValueError("Subtasks must have a User Story as a parent.")\n\n        elif key == \'task_type\' and self.parent_id:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=self.parent_id).first()\n            if parent_task:\n                logger.debug(f"Validating hierarchy: Task Type: {value}, Parent Type: {parent_task.task_type}")\n                if value == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError("User Stories must have an Epic as a parent.")\n                if value == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError("Subtasks must have a User Story as a parent.")\n\n        logger.info(f"Hierarchy validation passed for Task {self.id if self.id else \'New Task\'}.")\n\n    @staticmethod\n    def check_circular_reference(task_id, parent_id):\n        """\n        Iteratively checks for circular references in the task hierarchy.\n        Prevents stack overflow on deep hierarchies.\n        """\n        visited = set()\n        current_parent_id = parent_id\n\n        logger.info(f"Checking circular reference for Task {task_id} with Parent ID: {parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error("Circular reference detected!")\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            if current_parent_id == task_id:\n                logger.error("A task cannot be its own ancestor.")\n                raise ValueError("A task cannot be its own ancestor.")\n\n            # Fetch the next parent_id in the hierarchy\n            task = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not task:\n                break\n            current_parent_id = task.parent_id\n\n        logger.info("Circular reference check passed.")\n```\nKey Enhancements:\n\t1.\tlog_and_validate_parent_id_change:\n\t‚Ä¢\tLogs the old and new parent_id whenever it changes.\n\t‚Ä¢\tEnsures no circular references are introduced.\n\t2.\t_validate_no_circular_references:\n\t‚Ä¢\tValidates the parent_id field to prevent circular dependencies.\n\t‚Ä¢\tLogs progress and raises detailed errors if violations occur.\n\t3.\tlog_and_validate_task_type_change:\n\t‚Ä¢\tLogs changes to task_type with the old and new values.\n\t‚Ä¢\tRevalidates hierarchy rules when task_type changes.\n\t4.\tDetailed Logging for Circular Reference Validation:\n\t‚Ä¢\t_validate_no_circular_references and check_circular_reference methods log every step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t‚Ä¢\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 4, 'created_at': '2025-01-15T09:44:08.340041', 'updated_at': '2025-03-01T02:01:18.851231'}, {'id': 132, 'name': 'Step 1: Update tasks_table_interactions.js', 'description': '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the map for efficient parent-child relationship lookups instead of DOM traversal.\n\n```\nexport const TaskManager = {\n    init: function (csrfToken) {\n        this.csrfToken = csrfToken;\n        this.initTaskParentMap(); // Initialize the map\n        this.initDragAndDrop(); // Initialize drag-and-drop functionality\n    },\n\n    // Initialize a global map for task relationships\n    taskParentMap: new Map(),\n\n    // Build the taskParentMap from the DOM\n    initTaskParentMap: function () {\n        console.log("Initializing Task Parent Map...");\n        const rows = document.querySelectorAll("tr[data-task-id]");\n\n        rows.forEach((row) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = parseInt(row.dataset.parentId, 10) || null;\n            this.taskParentMap.set(taskId, parentId);\n        });\n\n        console.log("Task Parent Map initialized:", Array.from(this.taskParentMap.entries()));\n    },\n\n    // Update the map dynamically after drag-and-drop\n    updateTaskParentMap: function (taskId, parentId) {\n        console.log(`Updating Task Parent Map: Task ${taskId} -> Parent ${parentId}`);\n        this.taskParentMap.set(taskId, parentId);\n    },\n\n    initDragAndDrop: function () {\n        if (window.isDragAndDropInitialized) {\n            console.log("Drag-and-drop is already initialized.");\n            return;\n        }\n\n        console.log("Initializing drag-and-drop within TaskManager...");\n\n        const tableBody = document.querySelector("tbody");\n        if (!tableBody) {\n            console.warn("Task table body not found for drag-and-drop initialization");\n            return;\n        }\n\n        // Initialize Sortable.js for drag-and-drop functionality\n        Sortable.create(tableBody, {\n            handle: ".task-row", // Only draggable via `.task-row` elements\n            animation: 150, // Smooth animation\n            filter: ".task-open-link", // Prevent dragging on task links\n            preventOnFilter: true, // Prevent drag if filtered element is clicked\n            onEnd: async (event) => {\n                try {\n                    console.log("Drag-and-drop operation started...");\n                    const rows = Array.from(event.from.querySelectorAll(".task-row"));\n                    const reorderedTasks = [];\n\n                    rows.forEach((row, index) => {\n                        const taskId = parseInt(row.dataset.taskId, 10);\n                        let parentId = null;\n\n                        // Get the parent ID from the map or fallback to the dataset\n                        if (row.classList.contains("subtask-row")) {\n                            const parentRow = row.previousElementSibling;\n                            parentId = parentRow\n                                ? parseInt(parentRow.dataset.taskId, 10)\n                                : this.taskParentMap.get(taskId) || null;\n                        }\n\n                        // Update the taskParentMap dynamically\n                        this.updateTaskParentMap(taskId, parentId);\n\n                        reorderedTasks.push({\n                            id: taskId,\n                            sort_order: index + 1,\n                            parent_id: parentId,\n                        });\n                    });\n\n                    console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n                    console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n                    // Send the payload to the backend\n                    const response = await fetch("/tasks/reorder_subtasks", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                            "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n                        },\n                        body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n                    });\n\n                    if (!response.ok) {\n                        const errorData = await response.json();\n                        console.error("Error reordering tasks:", errorData);\n                        alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n                        return;\n                    }\n\n                    const data = await response.json();\n                    console.log("Task reordering successful:", data);\n\n                } catch (error) {\n                    console.error("Error during drag-and-drop operation:", error);\n                    alert("An unexpected error occurred while reordering tasks.");\n                }\n            },\n        });\n\n        window.isDragAndDropInitialized = true;\n        console.log("Drag-and-drop initialized successfully.");\n    },\n};\n```\n\nKey Updates:\n\t1.\tPrecomputed Map (taskParentMap):\n\t‚Ä¢\tThe initTaskParentMap function initializes the map by iterating over DOM elements and mapping each task‚Äôs ID to its parent ID.\n\t‚Ä¢\tThe updateTaskParentMap dynamically updates the map when tasks are reordered.\n\t2.\tEfficient Parent Lookup:\n\t‚Ä¢\tThe parentId is derived from the precomputed map rather than DOM traversal.\n\t3.\tBackend Payload:\n\t‚Ä¢\tA structured payload (reorderedTasks) is sent to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t‚Ä¢\tCSRF protection is ensured by passing the token to the request headers.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'sort_order': 5, 'created_at': '2025-01-15T09:44:08.338301', 'updated_at': '2025-03-01T02:01:18.851229'}, {'id': 328, 'name': 'üü¢ User Story 1: AI-Generated Feature Refinement\xa0(8 Story Points)', 'description': 'As a\xa0product manager,\xa0I want\xa0AI to refine raw feature requests into structured PRDs, Epics, and User Stories,\xa0So that\xa0I can quickly turn ideas into actionable tasks.\n\n', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 5, 'created_at': '2025-02-27T23:09:37.421629', 'updated_at': '2025-03-03T06:26:25.726905'}, {'id': 287, 'name': 'When moving a parent item to another project make sure the subtasks are moved as well', 'description': '', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 5, 'created_at': '2025-02-10T08:48:31.986870', 'updated_at': '2025-03-01T02:01:12.498732'}, {'id': 134, 'name': 'Step 2: Update the Backend in routes.py', 'description': 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\nPlan for step 2:\n\t1.\tVerify the payload structure:\n\t‚Ä¢\tEnsure that the payload includes all necessary fields (id, sort_order, parent_id) for each task.\n\t‚Ä¢\tValidate that the parent-child relationships in the precomputed map (taskParentMap) are reflected correctly in the payload.\n\t2.\tSubmit the payload to the backend:\n\t‚Ä¢\tEnhance the fetch request in the onEnd function of initDragAndDrop to log detailed submission data.\n\t‚Ä¢\tConfirm the payload integrity in the browser console before submission.\n\t3.\tUpdate backend logging:\n\t‚Ä¢\tAdd logging to /reorder_subtasks in routes.py to confirm receipt of the correct payload and process parent-child updates.\n\t‚Ä¢\tLog before and after database updates for better debugging.\n\n-----\nUpdated tasks_table_interactions.js\n\nReplace this section:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    let parentId = null;\n```\nWith:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    const parentId = this.taskParentMap.get(taskId) || null;\n```\nThe this.taskParentMap provides a precomputed and dynamic mapping of taskId to parentId. By using this map, we avoid relying on DOM traversal logic (row.closest or row.previousElementSibling) during drag-and-drop operations, which can sometimes be unreliable or cumbersome.\n\nFull Revised onEnd section:\n```\nonEnd: async (event) => {\n    try {\n        console.log("Drag-and-drop operation started...");\n        const rows = Array.from(event.from.querySelectorAll(".task-row"));\n        const reorderedTasks = [];\n\n        rows.forEach((row, index) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = this.taskParentMap.get(taskId) || null;\n\n            // Update the taskParentMap dynamically\n            this.updateTaskParentMap(taskId, parentId);\n\n            reorderedTasks.push({\n                id: taskId,\n                sort_order: index + 1,\n                parent_id: parentId,\n            });\n        });\n\n        console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n        console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n        // Send the payload to the backend\n        const response = await fetch("/tasks/reorder_subtasks", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n            },\n            body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error("Error reordering tasks:", errorData);\n            alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n            return;\n        }\n\n        const data = await response.json();\n        console.log("Task reordering successful:", data);\n\n    } catch (error) {\n        console.error("Error during drag-and-drop operation:", error);\n        alert("An unexpected error occurred while reordering tasks.");\n    }\n}\n```\n---------------------------------\nEnsure updates include:\n\t‚Ä¢\tBetter Logging: Adding logs for key events such as database changes and validation results.\n\t‚Ä¢\tInput Validation: Ensure all required fields (id, sort_order, parent_id) exist in the payload.\n\t‚Ä¢\tPost-Commit Validation: Confirm database updates after the commit.\n\t‚Ä¢\tImproved Error Handling: Include specific error messages and consistent rollback mechanisms.\n\nBelow is the revised reorder_subtasks route with descriptive comments for each section:\n```\n@bp.route("/reorder_subtasks", methods=["POST"])\ndef reorder_subtasks():\n    """\n    Reorder subtasks globally or reassign them to a different parent.\n\n    Steps:\n    - Parse and validate input from the frontend.\n    - Update parent-child relationships and sort order in the database.\n    - Commit changes and return a success response.\n    - Handle errors gracefully and provide detailed logs for debugging.\n    """\n    logger.info("Entering reorder_subtasks route...")\n    logger.info(f"Received payload for reordering tasks: {request.json}")\n\n    try:\n        # Step 1: Parse input\n        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered\n        ordered_tasks = request.json.get("ordered_tasks", [])\n\n        logger.debug(f"Parsed parent_id: {parent_id}")\n        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")\n\n        # Step 2: Validate input\n        if not isinstance(ordered_tasks, list) or not all(\n            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task\n            for task in ordered_tasks\n        ):\n            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")\n            return jsonify({\n                "error": "Invalid input format for \'ordered_tasks\'. Each task must include \'id\', \'sort_order\', and \'parent_id\'."\n            }), 400\n\n        # Step 3: Validate parent task (if applicable)\n        if parent_id is not None:\n            parent_task = Task.query.get(parent_id)\n            if not parent_task:\n                logger.error(f"Parent task with ID {parent_id} not found.")\n                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400\n\n        logger.info("Input validation passed. Proceeding with task updates...")\n\n        # Step 4: Process updates for each subtask\n        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation\n\n        for task_data in ordered_tasks:\n            subtask_id = task_data["id"]\n            sort_order = task_data["sort_order"]\n            new_parent_id = task_data["parent_id"]\n\n            # Fetch the subtask from the database\n            subtask = Task.query.get(subtask_id)\n            if not subtask:\n                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")\n                continue\n\n            # Log and update parent_id if it changes\n            if new_parent_id is not None and new_parent_id != subtask.parent_id:\n                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")\n                subtask.parent_id = new_parent_id\n\n            # Update sort order\n            subtask.sort_order = sort_order\n            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")\n\n            # Add to the list of updated subtasks for validation\n            updated_subtasks.append(subtask)\n\n        # Step 5: Commit changes to the database\n        try:\n            db.session.commit()\n            logger.info(f"Subtasks reordered successfully: {[task[\'id\'] for task in ordered_tasks]}")\n        except Exception as e:\n            logger.error(f"Error committing changes to the database: {str(e)}")\n            db.session.rollback()\n            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500\n\n        # Step 6: Post-commit validation\n        for subtask in updated_subtasks:\n            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")\n            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")\n\n        # Step 7: Return success response\n        return jsonify({\n            "success": True,\n            "message": "Subtasks reordered successfully.",\n            "updated_subtasks": [subtask.id for subtask in updated_subtasks]\n        }), 200\n\n    except Exception as e:\n        # Step 8: Handle unexpected errors\n        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)\n        db.session.rollback()\n        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500\n```\nKey Changes and Descriptive Comments\n\t1.\tInput Parsing:\n\t‚Ä¢\tExtracts parent_id and ordered_tasks from the request payload.\n\t‚Ä¢\tLogs the parsed values for debugging.\n\t2.\tInput Validation:\n\t‚Ä¢\tEnsures ordered_tasks is a list of dictionaries with the required keys.\n\t‚Ä¢\tValidates parent_id if provided, ensuring the parent task exists in the database.\n\t3.\tUpdate Processing:\n\t‚Ä¢\tIterates through ordered_tasks, updating each task‚Äôs parent_id and sort_order.\n\t‚Ä¢\tLogs changes for each task.\n\t4.\tDatabase Commit:\n\t‚Ä¢\tCommits all updates in a single transaction.\n\t‚Ä¢\tLogs success or rolls back changes in case of an error.\n\t5.\tPost-Commit Validation:\n\t‚Ä¢\tVerifies that the parent_id and sort_order changes were successfully saved to the database.\n\t6.\tError Handling:\n\t‚Ä¢\tCaptures and logs exceptions during processing or committing.\n\t‚Ä¢\tProvides meaningful error messages to the frontend.\n\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'sort_order': 6, 'created_at': '2025-01-15T09:46:29.348853', 'updated_at': '2025-03-01T02:01:18.851232'}, {'id': 286, 'name': 'Implement abels/tags', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 6, 'created_at': '2025-02-10T08:46:23.985620', 'updated_at': '2025-03-01T02:01:12.498730'}, {'id': 296, 'name': 'issue: contributor is lost after updating task', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 7, 'created_at': '2025-02-10T09:26:43.881947', 'updated_at': '2025-02-28T00:11:55.301308'}, {'id': 131, 'name': 'Step 5: Update utils.py', 'description': 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nChanges to Make:\n\t1.\tEnhance Task Filtering:\n\t‚Ä¢\tEnsure the filters handle parent-child relationships explicitly.\n\t‚Ä¢\tAdd options to include or exclude subtasks in queries.\n\t2.\tUtility Function for Debugging Parent-Child Relationships:\n\t‚Ä¢\tProvide a function to generate a map or list of parent-child relationships for debugging purposes.\n\t3.\tValidation Functions:\n\t‚Ä¢\tAdd a utility function to validate parent-child relationships and ensure no circular dependencies.\n\nUpdated utils.py Code:\n```\nimport logging\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import joinedload\nfrom app.extensions.db import db\nfrom app.tasks.models import Task\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\n\nclass TaskService:\n    @staticmethod\n    def filter_tasks(filters=None, include_subtasks=True, page=None, per_page=None):\n        """\n        Dynamically filters tasks with an option to include or exclude subtasks.\n\n        Args:\n            filters (dict): Filtering criteria.\n            include_subtasks (bool): Whether to include subtasks in the query.\n            page (int, optional): Page number for pagination.\n            per_page (int, optional): Items per page for pagination.\n\n        Returns:\n            Query or Pagination: A SQLAlchemy query object or paginated results.\n        """\n        query = Task.query.options(\n            db.joinedload(Task.project).joinedload(Project.contributors),\n            db.joinedload(Task.contributor),\n            db.joinedload(Task.children),\n        ).order_by(Task.sort_order)\n\n        if filters:\n            logger.debug(f"Applying filters: {filters}")\n\n            # Apply standard filters\n            if "is_archived" in filters:\n                query = query.filter(Task.is_archived == filters["is_archived"])\n            if "project_id" in filters:\n                query = query.filter(Task.project_id == filters["project_id"])\n            if "task_type" in filters:\n                if isinstance(filters["task_type"], list):\n                    query = query.filter(Task.task_type.in_(filters["task_type"]))\n                else:\n                    query = query.filter(Task.task_type == filters["task_type"])\n            if "completion_status" in filters:\n                completion_map = {"completed": True, "in_progress": False}\n                if filters["completion_status"] in completion_map:\n                    query = query.filter(Task.completed == completion_map[filters["completion_status"]])\n\n            # Optionally exclude subtasks\n            if not include_subtasks:\n                query = query.filter(Task.task_type != "Subtask")\n\n        logger.debug(f"Generated query: {query}")\n\n        # Pagination\n        if page and per_page:\n            return query.paginate(page=page, per_page=per_page, error_out=False)\n        return query\n\n    @staticmethod\n    def debug_parent_child_relationships(project_id=None):\n        """\n        Generates a debug map of parent-child relationships for all tasks.\n\n        Args:\n            project_id (int, optional): Restrict to tasks from a specific project.\n\n        Returns:\n            dict: A dictionary mapping parent IDs to their child task IDs.\n        """\n        query = Task.query\n        if project_id:\n            query = query.filter(Task.project_id == project_id)\n\n        tasks = query.options(\n            db.load_only(Task.id, Task.parent_id)\n        ).all()\n\n        relationship_map = {}\n        for task in tasks:\n            if task.parent_id not in relationship_map:\n                relationship_map[task.parent_id] = []\n            relationship_map[task.parent_id].append(task.id)\n\n        logger.debug(f"Parent-Child Relationship Map: {relationship_map}")\n        return relationship_map\n\n    @staticmethod\n    def validate_parent_child_relationships():\n        """\n        Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.\n\n        Raises:\n            ValueError: If invalid relationships are detected.\n        """\n        tasks = Task.query.options(db.joinedload(Task.parent)).all()\n\n        for task in tasks:\n            if task.parent_id:\n                parent_task = task.parent\n                if not parent_task:\n                    raise ValueError(f"Task {task.id} has an invalid parent ID {task.parent_id}.")\n\n                # Validate hierarchy rules\n                if task.task_type == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError(f"User Story {task.id} must have an Epic as its parent.")\n                if task.task_type == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError(f"Subtask {task.id} must have a User Story as its parent.")\n\n        logger.info("All parent-child relationships are valid.")\n\n    @staticmethod\n    def get_all_task_ids_with_parents():\n        """\n        Returns a flat list of tasks with their parent IDs for debugging.\n\n        Returns:\n            list: A list of tuples (task_id, parent_id).\n        """\n        tasks = Task.query.with_entities(Task.id, Task.parent_id).all()\n        logger.debug(f"Task IDs with Parent IDs: {tasks}")\n        return tasks\n```\n\n\nExplanation of Changes:\n\t1.\tfilter_tasks Enhancements:\n\t‚Ä¢\tAdded include_subtasks parameter to optionally exclude subtasks from the query.\n\t2.\tdebug_parent_child_relationships:\n\t‚Ä¢\tCreates a parent-child relationship map for debugging purposes.\n\t3.\tvalidate_parent_child_relationships:\n\t‚Ä¢\tIterates through all tasks to validate parent-child hierarchy and ensures no invalid relationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t‚Ä¢\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 7, 'created_at': '2025-01-15T09:41:28.091824', 'updated_at': '2025-03-01T02:01:18.851223'}, {'id': 135, 'name': 'Step 3: Update list.html', 'description': 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already includes everything needed. No required changes.\n\nHere¬¥s the relevant section of list.html:\n\n```\n<tr id="task-{{ task.id }}"\n                class="task-row {% if task.task_type == \'Subtask\' %}subtask-row{% elif task.task_type == \'User Story\' %}user-story-row{% elif task.task_type == \'Epic\' %}epic-row{% endif %}"\n                style="background-color: \n                {% if task.task_type == \'Subtask\' %}\n                    rgba(200, 230, 255, 0.5); /* Light blue for Subtask */\n                {% elif task.task_type == \'User Story\' %}\n                    rgba(255, 255, 200, 0.5); /* Light yellow for User Story */\n                {% elif task.task_type == \'Epic\' %}\n                    rgba(255, 200, 200, 0.5); /* Light red for Epic */\n                {% else %}\n                    rgba(240, 240, 240, 1); /* Default light gray */\n                {% endif %};"\n                data-task-id="{{ task.id }}"\n                data-parent-id="{{ task.parent_id or \'\' }}"\n                data-level="{{ depth }}">\n                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>\n                <td>\n                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}\n                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}" aria-label="Toggle details for task {{ task.name }}">\n                        <i class="bi bi-chevron-right"></i>\n                    </button>\n                    {% endif %}\n                </td>\n                <td class="fw-medium fs-6 \n                {% if task.task_type == \'Epic\' %}\n                    epic-cell\n                {% elif task.task_type == \'User Story\' %}\n                    user-story-cell\n                {% elif task.task_type == \'Subtask\' %}\n                    subtask-cell\n                {% endif %}" \n                style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">\n                <span class="bi fs-6\n                {% if task.task_type == \'Epic\' %}\n                    bi-circle-fill\n                {% elif task.task_type == \'User Story\' %}\n                    bi-circle-half\n                {% elif task.task_type == \'Subtask\' %}\n                    bi-circle\n                {% endif %}">\n                </span>\n                {{ task.name }}\n                <small class="text-muted fw-light">\n                    (Parent-ID: {{ task.parent_id or \'None\' }})\n                </small>\n                <!-- Open Link -->\n                <a href="#" class="task-open-link" data-task-id="{{ task.id }}">\n                    <i class="bi bi-arrows-angle-expand" style="font-size: 0.8rem; color: white;"></i>\n                    Open\n                </a>\n            </td>\n                <td class="fw-light fs-6">\n                    <small class>\n                    LAC-{{ task.id }}\n                    </small>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light text-bg-secondary">\n                        {{ task.project if task.project else "Unknown Project" }}\n                    </span>\n                </td>\n                <td class="fs-6" data-contributor-column>{{ task.assigned_to if task.assigned_to else "Unassigned" }}</td>\n                <td class="fs-6">{{ task.story_points }}</td>\n                <td class="fs-6">\n                    <span class="badge rounded-pill fw-light text-bg-light">\n                        {{ task.task_type }}\n                    </span>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light {% if task.completed %}text-bg-success{% else %}text-bg-warning{% endif %}">\n                        {{ "Completed" if task.completed else "In Progress" }}\n                    </span>\n                </td>\n                <td>\n                    <!-- Delete Icon -->\n                    <button class="btn btn-dark btn-sm delete-task-btn" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .2rem; --bs-btn-font-size: .75rem;" data-task-id="{{ task.id }}" aria-label="Deletes task {{ task.id }}">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n            </tr>\n            {% for child in tasks if child.parent_id == task.id %}\n                {{ render_task(child, tasks, depth + 1) }}\n            {% endfor %}\n            {% endmacro %}\n            \n            <!-- Render top-level tasks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 8, 'created_at': '2025-01-15T09:46:29.349784', 'updated_at': '2025-03-01T02:01:18.851233'}, {'id': 289, 'name': 'issue: parent task is lost when updating task', 'description': '- Summary of the problem and solution\n    \n    **Problem: Parent Task Dropdown Was Not Being Set on Modal Open**\n    \n    The issue was that when opening a task modal, the **parent task dropdown** was not pre-populated with the correct parent task. However, interacting with the dropdown (e.g., clicking on it) would suddenly trigger it to be set correctly. This meant that the dropdown initialization was likely delayed or missing a step in the modal lifecycle.\n    \n    **Debugging Steps and Observations**\n    \n    1. **Task Details Were Fetched Correctly** ‚úÖ\n    - The task details, including parent_id, were being fetched from the API successfully.\n    1. **Parent Dropdown Initialization Issues** ‚ùå\n    - The initializeParentDropdown() function was being called, but the dropdown was sometimes **not fully ready** when we tried to set the selected parent task.\n    1. **Clicking the Dropdown Triggered the Parent to Be Set** ü§î\n    - This hinted that the dropdown was not fully ready when setParentDropdown(task.parent_id) was initially called.\n    \n    **Final Solution**\n    \n    1. **Ensuring Dropdown Readiness Before Setting the Parent Task**\n    - We added explicit **delays and checks** to confirm that the dropdown was fully initialized before attempting to set the parent task.\n    \n    Specifically, we:\n    \n    - **Waited for the dropdown to appear in the DOM** using observeParentDropdown().\n    - **Initialized the dropdown** with initializeParentDropdown().\n    - **Waited explicitly for the dropdown to be fully ready** using waitForParentDropdownReady().\n    - **Added a final delay of 200ms** before calling setParentDropdown() to ensure stability.\n    1. **Modifying openTaskModal to Handle Parent Dropdown Setup**\n    - We ensured that initializeParentDropdown() was called **after fetching task details** and before setting the parent task.\n    1. **Confirming the Fix** üéØ\n    - After these fixes, the parent dropdown was **immediately populated** upon opening the modal, without requiring user interaction.\n    \n    **Key Learnings**\n    \n    ‚úÖ **Dropdowns in modals need careful timing** ‚Äì They might not be ready when you expect them to be.\n    \n    ‚úÖ **Waiting for DOM updates is crucial** ‚Äì Observing the element ensures it actually exists before interacting with it.\n    \n    ‚úÖ **Explicit delays can prevent race conditions** ‚Äì A small delay can sometimes resolve timing issues in UI interactions.\n    \n    **Final Result**\n    \n    ‚úÖ The modal now **correctly loads and pre-selects the parent task** without extra clicks! üéâüöÄ', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 8, 'created_at': '2025-02-10T08:56:25.273984', 'updated_at': '2025-02-28T00:11:55.301302'}, {'id': 269, 'name': 'Fix styling for sweetalert', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'sort_order': 10, 'created_at': '2025-02-08T15:54:56.717846', 'updated_at': '2025-02-28T00:11:55.301281'}, {'id': 293, 'name': 'Click on title should copy the task title and id to clipboard', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 11, 'created_at': '2025-02-10T09:16:33.508209', 'updated_at': '2025-02-28T00:11:55.301304'}, {'id': 247, 'name': 'Add Temporary Badge', 'description': 'Add a temporary badge or visual indicator to the updated task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 241, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 11, 'created_at': '2025-02-05T12:57:37.151479', 'updated_at': '2025-02-27T08:43:14.054398'}, {'id': 294, 'name': 'Issue: task table filters not working', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 12, 'created_at': '2025-02-10T09:19:21.022598', 'updated_at': '2025-02-28T00:11:55.301306'}, {'id': 240, 'name': 'Update Task Workflow', 'description': 'As a user, I want to update the status of a task so that it reflects the changes in the UI dynamically without reloading the page.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'In Progress', 'sort_order': 14, 'created_at': '2025-02-05T12:54:55.061344', 'updated_at': '2025-02-28T00:11:55.301273'}, {'id': 242, 'name': 'User Control Over Views', 'description': 'As a user, I want to toggle between hierarchical and flat views so that I can switch sorting preferences based on my workflow.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 15, 'created_at': '2025-02-05T12:55:50.108011', 'updated_at': '2025-02-28T00:11:55.301275'}, {'id': 130, 'name': 'Implement the Map of Task Relationships solution for drag-and-drop', 'description': 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 16, 'created_at': '2025-01-15T09:41:28.093022', 'updated_at': '2025-02-28T00:11:55.301271'}, {'id': 246, 'name': 'Toast Notification', 'description': 'Display a toast notification confirming the task status update.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 241, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 16, 'created_at': '2025-02-05T12:57:37.151479', 'updated_at': '2025-02-27T08:43:14.054398'}, {'id': 283, 'name': 'Fix issue with updating task title', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 18, 'created_at': '2025-02-10T08:41:58.769700', 'updated_at': '2025-02-28T00:11:55.301295'}, {'id': 278, 'name': 'Implement search feature for tasks list', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 5, 'project': 'Project Delta', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 4, 'status': 'Not Started', 'sort_order': 19, 'created_at': '2025-02-10T07:36:03.369833', 'updated_at': '2025-02-28T00:11:55.301289'}, {'id': 62, 'name': 'Add OAuth integration for Google Login', 'description': 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 20, 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-02-28T00:11:55.301255'}, {'id': 279, 'name': 'github integration', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 21, 'created_at': '2025-02-10T07:36:38.238202', 'updated_at': '2025-02-28T00:11:55.301290'}, {'id': 65, 'name': 'Implement backend endpoints for Google OAuth', 'description': 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 22, 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-02-28T00:11:55.301260'}, {'id': 241, 'name': 'Provide User Feedback', 'description': 'As a user, I want to receive immediate feedback after updating a task‚Äôs status so that I know the update was successful.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 24, 'created_at': '2025-02-05T12:55:19.826398', 'updated_at': '2025-02-28T00:11:55.301274'}, {'id': 41, 'name': 'Implement Searchable Dropdown', 'description': 'As a user, I want a searchable dropdown for parent task assignment.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Completed', 'sort_order': 25, 'created_at': '2025-01-03T09:14:28.285904', 'updated_at': '2025-02-28T00:11:55.301181'}, {'id': 85, 'name': 'Assign multiple contributors to a task', 'description': 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 27, 'created_at': '2025-01-07T19:32:39.466022', 'updated_at': '2025-02-28T00:11:55.301266'}, {'id': 136, 'name': 'Page scroll should stay in position when reloading', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 28, 'created_at': '2025-01-16T18:21:50.187247', 'updated_at': '2025-02-28T00:11:55.301272'}, {'id': 267, 'name': 'Improvements to toggles and nested tasks', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 29, 'created_at': '2025-02-08T02:29:12.464594', 'updated_at': '2025-03-03T14:17:12.065528'}, {'id': 325, 'name': 'Improve task list responsive grid', 'description': '## üîç **How Leading Task Management Apps Handle Column Widths**\n\n### 1Ô∏è‚É£ **JIRA (Atlassian)**\n\nüîπ **Dynamic Resizing** (CSS Grid + JavaScript)\n\n- Uses `display: grid` for task tables.\n- Columns are resizable with a drag handle.\n- `grid-template-columns: auto 1fr auto;` for flexibility.\n- **Approach**: Fixed + flexible widths with an adaptive UI.\n\n---\n\n### 2Ô∏è‚É£ **Monday.com**\n\nüîπ **Flexbox-Based Table**\n\n- Uses `display: flex;` instead of `grid` for more control.\n- Columns use **`flex-grow`** to expand dynamically.\n- Drag handles allow users to resize columns.\n- **Approach**: **JavaScript-based column width management** to allow user customization.\n\n---\n\n### 3Ô∏è‚É£ **Asana**\n\nüîπ **Hybrid (Flexbox + JavaScript)**\n\n- Uses **CSS flexbox** for flexible layout.\n- Users can resize columns by dragging.\n- `min-width: 120px;` ensures usability.\n- **Approach**: A combination of `flex` and `min-width` to ensure usability on smaller screens.\n\n---\n\n### 4Ô∏è‚É£ **Linear**\n\nüîπ **CSS Grid with `fr` Units**\n\n- Uses a modern **CSS Grid** approach:\n    \n    ```css\n    grid-template-columns: auto 1fr auto;\n    ```\n    \n- Dynamically adjusts the width of columns **based on content**.\n- Uses `grid-template-columns: minmax(150px, 2fr) 3fr 1fr;` for controlled column expansion.\n- **Approach**: Minimalist UI with focus on speed and responsiveness.\n\n---\n\n### 5Ô∏è‚É£ **Shortcut**\n\nüîπ **Similar to Jira (Resizable Columns)**\n\n- Uses **CSS Grid + JavaScript-based resizing**.\n- Stores user preferences (column order, width) in **local storage**.\n- **Approach**: Persistent column sizes per user, allowing for a **customizable layout**.\n\n---\n\n## ‚úÖ **What‚Äôs the Best Approach for Our App?**\n\n### üéØ **Option 1: CSS Grid (Recommended)**\n\n```css\ngrid-template-columns: 1fr 2fr 1fr;\n```\n\nPros:\n‚úî **Modern**\n\n‚úî **Auto-resizes based on content**\n\n‚úî **Easy to manage**\n\n---\n\n### üéØ **Option 2: Flexbox (For More Control)**\n\n```css\ndisplay: flex;\nflex-grow: 1;\nmin-width: 120px;\n```\n\nPros:\n‚úî **More control over column shrinking/growing**\n\n‚úî **Easier to make resizable**\n\n‚úî **Ideal for draggable column resizing**\n\n---\n\n### üéØ **Option 3: JavaScript-Powered Resizing (Advanced)**\n\n- Uses `grid-template-columns` but **lets users drag & resize**.\n- Stores **column widths in local storage**.\n- Uses `ResizeObserver` to listen for changes.\n\nPros:\n‚úî **User-friendly (lets users resize columns)**\n\n‚úî **Persistent user preferences**\n\n‚úî **Great for complex task management apps**\n\n---\n\n## üî• **What‚Äôs the Best Choice for Us?**\n\n- If you want **simple auto-adjusting columns**, go with **CSS Grid** (`fr` units).\n- If you need **manual resizing**, use **Flexbox + JavaScript**.\n- If you want **fully customizable layouts**, use **JavaScript-powered resizing** like Jira or Monday.\n\nWould you like me to **implement resizable columns** with JavaScript? üöÄ', 'task_type': 'Epic', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'sort_order': 30, 'created_at': '2025-02-25T00:02:51.810711', 'updated_at': '2025-03-03T14:17:02.484796'}, {'id': 274, 'name': 'Add support for goals, initiatives, okr¬¥s', 'description': 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n\n√∂lkasd√∂lkk', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P1', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 31, 'created_at': '2025-02-10T00:46:27.204912', 'updated_at': '2025-02-28T00:11:55.301284'}, {'id': 63, 'name': 'Add OAuth integration for GitHub Login', 'description': 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'sort_order': 32, 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-02-27T08:43:14.054354'}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 32, 'created_at': '2025-02-10T08:41:17.786154', 'updated_at': '2025-03-03T14:16:41.747486'}, {'id': 276, 'name': 'Add support for priority', 'description': 'ffasdlkjlkj\nljkkjlkj', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P0', 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 33, 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-28T00:11:55.301286'}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'description': 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- Custom status\n-- Custom status\n- In Progress\n-- Custom status\n-- Custom status\n-- Custom status\n- Completed\n-- Custom status\n-- Custom status\n\n2. How can we track a task through different stages and save the sequence of events or stages the task has gone through?\nI¬¥m thinking it could be good for mapping out processes, identifying bottlenecks and provide valuable insights while improving and streamlining workflows.\n- Stages\n- Contacts taken\n- Respons time \n- Time to action after responses\n- Dependencies\n\nNeed to be able to record every action related to this action.\nCommunication integrations\n- Slack\n- Email\n- Text messages\n- Phonecalls\n- Calendar events, meetings\n- Zoom, Google meet, Teams etc..\n\n\n2. Set custom statuses per project (can use tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 34, 'created_at': '2025-02-10T07:16:03.352588', 'updated_at': '2025-03-03T14:16:31.129766'}, {'id': 68, 'name': 'Register application in GitHub Developer Console', 'description': 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 35, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-02-27T08:43:14.054358'}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'description': 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be lost"\nOR\n\nIs it possible, and is it desireable to keep parent child relationships across projects?\nSo that a parent can be in one project but the child tasks can be in different projects?\n\nLets say \nParent epic is \n"Internationalisation"\nChild user stories are\n- Timezones\n- Language\n- Currency\n- Day, Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 35, 'created_at': '2025-02-10T08:54:36.297869', 'updated_at': '2025-03-03T14:16:24.364985'}, {'id': 284, 'name': 'Add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 36, 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-28T00:11:55.301296'}, {'id': 281, 'name': 'Add a page for roadmap', 'description': 'Add some sort of high level plan that aims to keep PM/PO¬¥s on track and not get lost into the details of an overwhelming large backlog', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 37, 'created_at': '2025-02-10T08:27:01.218606', 'updated_at': '2025-02-28T00:11:55.301293'}, {'id': 273, 'name': 'Disable parent task selector in epics', 'description': 'and add text, Epic can¬¥t have parent tasks', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 38, 'created_at': '2025-02-10T00:45:20.740910', 'updated_at': '2025-02-28T00:11:55.301283'}, {'id': 69, 'name': 'Handle callback from GitHub', 'description': 'Implement the callback endpoint to process the authorization code from GitHub.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 38, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-02-26T21:53:17.041822'}, {'id': 280, 'name': 'logging (task and project history)', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 39, 'created_at': '2025-02-10T07:37:44.435112', 'updated_at': '2025-02-28T00:11:55.301291'}, {'id': 275, 'name': 'Add support for sprints/cycles', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 40, 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-28T00:11:55.301285'}, {'id': 100, 'name': '1.1 User Registration', 'description': '<blockquote><p>As a user, I want to register with a username, email, and password so that I can create an account and access the system. </p></blockquote><p>**Acceptance Criteria:** </p><ul><li><p>‚Ä¢ User can input valid username, email, and password.</p></li><li><p>‚Ä¢ Username and email must be unique. </p></li><li><p>‚Ä¢ Errors are displayed for invalid inputs or duplicate accounts. </p></li><li><p>‚Ä¢ Passwords must meet complexity requirements and be securely stored. </p></li><li><p>‚Ä¢ Successful registration redirects users to a login page.</p></li></ul><hr><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 41, 'created_at': '2025-01-07T19:59:09.044667', 'updated_at': '2025-03-03T14:20:10.801828'}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'description': 'kkkkkkkjjjjj\nlkajdl√∂kjsdf√∂lkjsdf√∂lkjdf', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 41, 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-28T00:11:55.301297'}, {'id': 107, 'name': '1.1.1 Database Changes for User Registration', 'description': '<p>1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.</p><p></p><hr><p>Adding text</p><pre><code>CREATE TABLE public.users ( id SERIAL PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL, created_at TIMESTAMP DEFAULT NOW(), updated_at TIMESTAMP DEFAULT NOW() );</code></pre><p></p>', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 42, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-03-03T20:49:45.725711'}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'description': 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitHub Login involves integrating OAuth 2.0, which both services support. The complexity depends on your app‚Äôs existing setup, frameworks, and experience with third-party authentication. Below is a breakdown:\n\nKey Steps for Implementing Google or GitHub Login\n\t1.\tSet Up OAuth Credentials:\n\t‚Ä¢\tRegister your application in the Google Cloud Console or GitHub Developer Settings.\n\t‚Ä¢\tObtain the client ID and client secret.\n\t2.\tInstall Required Libraries:\n\t‚Ä¢\tUse a library for OAuth (e.g., flask-oauthlib, python-social-auth, or authlib).\n\t‚Ä¢\tPopular frameworks like Flask and Django already have robust integrations for OAuth providers.\n\t3.\tBackend Configuration:\n\t‚Ä¢\tImplement an endpoint to handle the OAuth flow (/auth/login/google or /auth/login/github).\n\t‚Ä¢\tConfigure your app to send users to Google or GitHub‚Äôs authentication page.\n\t‚Ä¢\tHandle the OAuth callback to exchange the authorization code for an access token.\n\t‚Ä¢\tVerify the token and fetch user information (e.g., email, name).\n\t4.\tLink OAuth to User Registration:\n\t‚Ä¢\tOn successful login, create or retrieve a user in your database.\n\t‚Ä¢\tStore the user‚Äôs details like email, OAuth provider ID, and access token.\n\t5.\tFrontend Integration (if applicable):\n\t‚Ä¢\tAdd ‚ÄúLogin with Google‚Äù or ‚ÄúLogin with GitHub‚Äù buttons.\n\t‚Ä¢\tRedirect to your backend‚Äôs OAuth endpoint when clicked.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 42, 'created_at': '2025-01-07T12:15:54.291625', 'updated_at': '2025-02-28T00:11:55.301262'}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'description': 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 18, 'status': 'Not Started', 'sort_order': 43, 'created_at': '2025-01-07T19:53:50.085064', 'updated_at': '2025-02-28T00:11:55.301267'}, {'id': 61, 'name': 'Parent task assignment', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'sort_order': 44, 'created_at': '2025-01-04T22:31:45.205815', 'updated_at': '2025-02-28T00:11:55.301224'}, {'id': 108, 'name': '1.1.2 Backend API for Registration', 'description': '‚Ä¢\tCreate an endpoint POST /api/register:\n‚Ä¢\tValidate input fields.\n‚Ä¢\tHash the password using bcrypt or argon2.\n‚Ä¢\tInsert the user into the users table.\n‚Ä¢\tReturn success/failure responses.\ndddhfff\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 44, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-27T08:43:14.054375'}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t‚Ä¢\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t‚Ä¢\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t‚Ä¢\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 45, 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-02-28T00:11:55.301265'}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'description': 'PRD: Define roles and permissions to restrict access. Roles include admin, developer, and viewer. Implement middleware for access control checks.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 46, 'created_at': '2025-01-07T19:54:09.204981', 'updated_at': '2025-02-28T00:11:55.301268'}, {'id': 83, 'name': 'Notifications', 'description': 'Implement sending notifications to selected people triggered by events.\nCustomizing messages:\nPossibility to adjust how detailed the information should be and what level of technical difficulty the language can contain. Integration to LMS that tailors messages to different target groups and then sends the appropriate version to the appropriate target group.\n\n\n\n- Ready for Release\n   - Send documentation of new feature to support and customer success team\n      - Add technical documentation as file in documentation library.\n      - User documentation\n      - Create and send feature description to Sales & Marketing dep.\n      - Create and send feature description and estimation of added value for company and customer to Investors.\n   - Create and publish release notes online and in inline message system.\n\nRead more: https://www.notion.so/lacunamedia/Create-and-send-messages-triggered-by-events-174979257fc08022b18bc76d3b28a4b3?pvs=4', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 47, 'created_at': '2025-01-07T16:10:54.030609', 'updated_at': '2025-02-28T00:11:55.301263'}, {'id': 112, 'name': '1.2.2 Frontend Login Page', 'description': 'Develop a frontend form for user login with email and password inputs.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 47, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054377'}, {'id': 99, 'name': 'Enhance User Account Management', 'description': 'PRD: Provide additional account management features for users and admins. Includes profile management, password reset functionality, and audit logging.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'sort_order': 48, 'created_at': '2025-01-07T19:54:20.692949', 'updated_at': '2025-02-28T00:11:55.301269'}, {'id': 109, 'name': '1.1.3 Create Frontend Registration Page', 'description': 'Develop a frontend form to collect user registration details.\n‚Ä¢\tAdd a form for username, email, and password inputs.\n‚Ä¢\tUse client-side validation (e.g., email format).\n‚Ä¢\tSend a POST request to /api/register.\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 49, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-27T08:43:14.054375'}, {'id': 110, 'name': '1.1.4 Unit Tests for Registration', 'description': 'Write unit tests for:\n\n‚Ä¢\tValid registration.\n‚Ä¢\tDuplicate username/email scenarios.\n‚Ä¢\tInvalid input handling.\nff', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 50, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-27T08:43:14.054376'}, {'id': 101, 'name': '1.2 User Login', 'description': 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n‚Ä¢\tUsers can log in with a valid email and password.\n‚Ä¢\tErrors are displayed for invalid credentials.\n‚Ä¢\tSuccessful login stores a session or JWT token.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 52, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054370'}, {'id': 111, 'name': '1.2.1 Backend API for Login', 'description': 'Create POST /api/login endpoint to handle user login.\njjsjj', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 54, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054377'}, {'id': 113, 'name': '1.2.3 Session Management', 'description': 'Implement secure session handling using cookies or JWT.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 55, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054378'}, {'id': 114, 'name': '1.2.4 Unit Tests for Login', 'description': 'Write tests for successful and failed login attempts.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 56, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054379'}, {'id': 106, 'name': 'Password Reset', 'description': 'As a user, I want to reset my password securely using email.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'sort_order': 57, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054373'}, {'id': 128, 'name': 'Frontend Password Reset Page', 'description': 'Develop a page for users to enter a new password using a valid token.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 58, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054388'}, {'id': 129, 'name': 'Testing Password Reset', 'description': 'Write tests for email delivery, token validation, and password updates.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 59, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054389'}, {'id': 102, 'name': 'Logout', 'description': 'As a user, I want to log out so that I can end my session securely.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 60, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054371'}, {'id': 117, 'name': 'Tests for Logout', 'description': 'Verify session invalidation and redirection to the login page.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 61, 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-27T08:43:14.054381'}, {'id': 381, 'name': 'Delete this', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 344, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 61, 'created_at': '2025-02-28T23:48:05.992788', 'updated_at': '2025-03-04T17:17:46.383393'}, {'id': 116, 'name': 'Frontend Logout Button', 'description': 'Add a logout button to the UI and handle session clearing.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 62, 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-27T08:43:14.054380'}, {'id': 115, 'name': 'Backend API for Logout', 'description': 'Create POST /api/logout endpoint to invalidate user sessions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 63, 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-27T08:43:14.054379'}, {'id': 45, 'name': 'Display Default Value in Dropdown', 'description': 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 64, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054343'}, {'id': 50, 'name': 'Retrieve Current Parent Task', 'description': 'Retrieve the current parent task‚Äôs ID and name from the backend.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Completed', 'sort_order': 65, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054346'}, {'id': 51, 'name': 'Set Default Value', 'description': 'Set the default value in the dropdown based on the retrieved data.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 45, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 1, 'status': 'Not Started', 'sort_order': 66, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054347'}, {'id': 46, 'name': 'Search for Parent Tasks', 'description': 'Allow users to search for tasks dynamically in the dropdown by typing.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'sort_order': 67, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054344'}, {'id': 54, 'name': 'Test Partial Matching', 'description': 'Ensure the search results update in real-time as the user types.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 68, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054349'}, {'id': 47, 'name': 'Handle Large Datasets Efficiently', 'description': 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'sort_order': 69, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054344'}, {'id': 56, 'name': 'Paginate API Responses', 'description': 'Implement server-side filtering and pagination for large datasets.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 70, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054350'}, {'id': 55, 'name': 'Enable Lazy Loading', 'description': 'Enable lazy loading or virtualization in Virtual Select.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 71, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054350'}, {'id': 48, 'name': 'Select and Deselect Parent Tasks', 'description': 'Allow users to select a parent task or deselect by choosing "None."', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 72, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054345'}, {'id': 57, 'name': 'Ensure None Option Availability', 'description': 'Add ‚ÄúNone‚Äù as a selectable option and ensure it stays at the top of the list.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 73, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054351'}, {'id': 58, 'name': 'Handle Selection Events', 'description': 'Implement event listeners to update the form‚Äôs state when the selection changes.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 74, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054352'}, {'id': 49, 'name': 'Integrate Dropdown with Task Form', 'description': 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 75, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054346'}, {'id': 376, 'name': 'Subtask test', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 346, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 76, 'created_at': '2025-02-28T23:01:44.247988', 'updated_at': '2025-03-04T15:44:10.651229'}, {'id': 59, 'name': 'Bind Dropdown to Form Field', 'description': 'Bind the dropdown to the form‚Äôs parent task field.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'In Progress', 'sort_order': 76, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054352'}, {'id': 383, 'name': 'new user story', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 344, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 76, 'created_at': '2025-03-01T01:00:27.095399', 'updated_at': '2025-03-04T17:47:38.815069'}, {'id': 60, 'name': 'Test Form Submission', 'description': 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 77, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054353'}, {'id': 52, 'name': 'Add Search Box to Dropdown', 'description': 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 78, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054348'}, {'id': 53, 'name': 'Implement AJAX Search', 'description': 'Implement AJAX-based search to fetch tasks dynamically from the backend.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 79, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054348'}, {'id': 42, 'name': 'Choose Dropdown Library', 'description': 'Research and decide on the dropdown library to use.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 80, 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-27T08:43:14.054341'}, {'id': 378, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 80, 'created_at': '2025-02-28T23:17:32.404713', 'updated_at': '2025-03-01T00:17:32.410920'}, {'id': 43, 'name': 'Integrate Dropdown Library', 'description': 'Integrate the chosen dropdown library into the project.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Completed', 'sort_order': 81, 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-27T08:43:14.054342'}, {'id': 377, 'name': 'Taskade', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 342, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 82, 'created_at': '2025-02-28T23:02:24.453543', 'updated_at': '2025-03-04T17:12:31.851611'}, {'id': 90, 'name': 'Update frontend to display and manage multiple contributors', 'description': 'Allow users to view, add, or remove multiple contributors via the UI.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 82, 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-27T08:43:14.054364'}, {'id': 88, 'name': 'Update database schema for multiple contributors', 'description': 'Modify the task table to support many-to-many relationships for contributors.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 83, 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-27T08:43:14.054362'}, {'id': 89, 'name': 'Develop backend API for adding contributors to a task', 'description': 'Create endpoints to add, update, and remove contributors for a task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 84, 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-27T08:43:14.054363'}, {'id': 86, 'name': 'Allow designation of task owner', 'description': 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 85, 'created_at': '2025-01-07T19:33:29.330562', 'updated_at': '2025-02-27T08:43:14.054361'}, {'id': 375, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 85, 'created_at': '2025-02-28T22:48:35.594251', 'updated_at': '2025-02-28T23:48:35.676455'}, {'id': 93, 'name': 'Update frontend to manage task ownership', 'description': 'Allow users to assign or update the task owner via the UI.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 86, 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-27T08:43:14.054365'}, {'id': 384, 'name': 'Changed title', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 86, 'created_at': '2025-03-01T12:06:32.303897', 'updated_at': '2025-03-04T17:34:48.465098'}, {'id': 91, 'name': 'Update database schema for task ownership', 'description': 'Add a column or relationship to assign a single owner per task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 87, 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-27T08:43:14.054364'}, {'id': 92, 'name': 'Develop backend API for assigning task owner', 'description': 'Create endpoints to assign or update the owner of a task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 88, 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-27T08:43:14.054365'}, {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 89, 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-02-27T08:43:14.054362'}, {'id': 96, 'name': 'Allow admin users to create and customize contributor roles via frontend', 'description': 'Provide UI functionality for admins to manage contributor roles dynamically.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 90, 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-27T08:43:14.054367'}, {'id': 94, 'name': 'Add database support for contributor roles', 'description': 'Introduce a roles table and link contributors to specific roles for tasks.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 91, 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-27T08:43:14.054366'}, {'id': 95, 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 92, 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-27T08:43:14.054367'}, {'id': 127, 'name': 'Backend API for Password Reset', 'description': 'Create endpoints to handle password reset requests and token validation.\ndfdf\n\nasdasd', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 93, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054387'}, {'id': 126, 'name': 'Email Configuration for Password Reset', 'description': 'Configure email service to send password reset links.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 94, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054387'}, {'id': 104, 'name': 'Middleware for Role Enforcement', 'description': 'As a system, I want to enforce role-based access to specific routes.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 98, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 95, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054372'}, {'id': 122, 'name': 'Testing Role Enforcement', 'description': 'Write tests to ensure proper access control based on roles.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 96, 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-02-27T08:43:14.054384'}, {'id': 121, 'name': 'Develop Role Enforcement Middleware', 'description': 'Implement middleware to check user roles for access control.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 104, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 97, 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-02-27T08:43:14.054383'}, {'id': 105, 'name': 'Profile Management', 'description': 'As a user, I want to update my profile (username, email, password).', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 99, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 98, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054373'}, {'id': 123, 'name': 'Backend API for Profile Management', 'description': 'Create PATCH /api/profile endpoint to update user details.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 99, 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-02-27T08:43:14.054385'}, {'id': 125, 'name': 'Testing Profile Updates', 'description': 'Write tests for profile update functionality.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 100, 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-02-27T08:43:14.054386'}, {'id': 124, 'name': 'Frontend Profile Page', 'description': 'Develop a profile page for editing user details.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 101, 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-02-27T08:43:14.054385'}, {'id': 103, 'name': 'Role Assignment', 'description': 'As an administrator, I want to assign roles to users so that I can control access to certain features.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 98, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 102, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054372'}, {'id': 120, 'name': 'Testing Role Assignment', 'description': 'Write tests to validate role changes and restrictions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 103, 'created_at': '2025-01-07T20:40:58.383687', 'updated_at': '2025-02-27T08:43:14.054383'}, {'id': 119, 'name': 'Backend API for Role Assignment', 'description': 'Create POST /api/assign-role endpoint to manage user roles.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 104, 'created_at': '2025-01-07T20:40:58.383687', 'updated_at': '2025-02-27T08:43:14.054382'}, {'id': 118, 'name': 'Database Changes for Role Assignment', 'description': 'Add a role column to the users table.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 105, 'created_at': '2025-01-07T20:40:58.383687', 'updated_at': '2025-02-27T08:43:14.054381'}, {'id': 44, 'name': 'Test Performance with 500 Tasks', 'description': 'Ensure dropdown performance remains smooth with 500 tasks.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 107, 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-26T21:53:17.041813'}]
2025-03-04 17:55:52,176 ERROR: Unexpected error in list_tasks: Could not build url for endpoint 'tasks.list_tasks' with values ['is_archived', 'page']. Did you mean 'tasks_bp.list_tasks' instead?
2025-03-04 17:55:52,182 INFO: ROLLBACK
2025-03-04 17:55:52,182 INFO: 127.0.0.1 - - [04/Mar/2025 17:55:52] "GET /tasks/ HTTP/1.1" 200 -
2025-03-04 17:55:52,220 INFO: 127.0.0.1 - - [04/Mar/2025 17:55:52] "[36mGET /static/custom.css HTTP/1.1[0m" 304 -
2025-03-04 17:55:52,222 INFO: 127.0.0.1 - - [04/Mar/2025 17:55:52] "[36mGET /static/js/filters.js HTTP/1.1[0m" 304 -
2025-03-04 17:55:52,223 INFO: 127.0.0.1 - - [04/Mar/2025 17:55:52] "[36mGET /static/js/modals.js HTTP/1.1[0m" 304 -
2025-03-04 17:55:52,224 INFO: 127.0.0.1 - - [04/Mar/2025 17:55:52] "[36mGET /static/js/tasks_table_interactions.js HTTP/1.1[0m" 304 -
2025-03-04 17:55:52,231 INFO: 127.0.0.1 - - [04/Mar/2025 17:55:52] "[36mGET /static/images/background.svg HTTP/1.1[0m" 304 -
2025-03-04 17:55:52,318 INFO: 127.0.0.1 - - [04/Mar/2025 17:55:52] "[36mGET /static/favicon.ico HTTP/1.1[0m" 304 -
2025-03-04 17:55:53,763 INFO: Entering list_tasks route...
2025-03-04 17:55:53,764 DEBUG: Filters used: {'is_archived': False}
2025-03-04 17:55:53,764 DEBUG: Applying filters: {'is_archived': False}
2025-03-04 17:55:53,771 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-04 17:55:53,773 INFO: BEGIN (implicit)
2025-03-04 17:55:53,773 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-04 17:55:53,773 INFO: [cached since 710.3s ago] {'param_1': 500, 'param_2': 0}
2025-03-04 17:55:53,819 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-04 17:55:53,819 INFO: [cached since 710s ago] {}
2025-03-04 17:55:53,821 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-04 17:55:53,821 INFO: [cached since 710s ago] {}
2025-03-04 17:55:53,822 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-04 17:55:53,822 INFO: [cached since 710s ago] {}
2025-03-04 17:55:53,823 DEBUG: Tasks passed to template: [{'id': 370, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T21:27:30.386959', 'updated_at': '2025-02-28T22:27:30.395572'}, {'id': 346, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:24:40.311054', 'updated_at': '2025-02-28T15:24:40.322156'}, {'id': 342, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:11.944980', 'updated_at': '2025-02-28T15:18:11.954065'}, {'id': 344, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:16.258493', 'updated_at': '2025-02-28T15:18:16.268248'}, {'id': 339, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:10.856511', 'updated_at': '2025-02-28T15:18:10.860682'}, {'id': 265, 'name': 'Smooth transition for toggles', 'description': '<p>Added new description</p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-03-01T15:23:05.271095'}, {'id': 292, 'name': 'Issue: assigning contributor does not work', 'description': '<p>### **Summary of problem and solution** The issue was that assigning a contributor to a task via the /tasks//assign_contributor API endpoint resulted in a **400 Bad Request** error. Upon investigation, the following problems were identified: 1. **Missing CSRF Token:** - The request failed due to a missing CSRF token, as shown in the error message: *‚ÄúBad Request: The CSRF token is missing.‚Äù* - The frontend was not correctly including the CSRF token in the request headers. 1. **JavaScript Error (Undefined CSRF Token Variable):** - The error *‚ÄúReferenceError: csrfToken is not defined‚Äù* indicated that the CSRF token was not being retrieved properly in the JavaScript code. 1. **Incorrect Fetch Request Headers:** - The fetch request did not include the CSRF token under the correct key (X-CSRFToken). - The script attempted to send the request without properly extracting the CSRF token from the meta tag. ### **Solution** 1. **Include the CSRF Token in the JavaScript Code** The CSRF token was retrieved from the meta tag and used in the request headers: ```jsx // Retrieve CSRF token from meta tag const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\'); ``` This ensures that the CSRF token is correctly fetched and available in the JavaScript scope. 1. **Modify the Fetch Request to Include CSRF Token** The request to assign a contributor was updated to include the token: ```jsx const response = await fetch(`/tasks/${taskId}/assign_contributor`, { method: "POST", headers: { "Content-Type": "application/json", "X-CSRFToken": csrfToken // Include CSRF token }, body: JSON.stringify({ contributor_id: parseInt(contributorId, 10) }), }); ``` - **Ensures the CSRF token is sent in the request headers** so that Flask-WTF does not reject the request. 1. **Verify and Debug Network Requests** - The updated request headers were verified using **Chrome DevTools &gt; Network tab** to ensure the X-CSRFToken was included. - The error messages disappeared, and the contributor assignment request **succeeded with a 200 OK response**. --- ### **Final Outcome** üöÄ The issue was resolved, and contributors can now be assigned successfully to tasks without triggering a CSRF validation error. ### **Key Learnings from This Session** This debugging session covered several important aspects of **web development with Flask and JavaScript**, particularly related to **API requests, CSRF protection, debugging tools, and database interactions**. Here are the key takeaways: --- ### **1. CSRF Protection in API Requests** - **Issue:** The initial error was due to **a missing CSRF token** when making a `POST` request. - **Fix:** The solution was to **retrieve the CSRF token from a meta tag** in the HTML and include it in the request headers. - **Key Learning:** Flask-WTF requires CSRF tokens for form and API submissions to **prevent cross-site request forgery (CSRF) attacks**.‚úÖ Always ensure that API requests include a valid CSRF token. --- ### **2. Debugging JavaScript Fetch Requests** - **Issue:** The JavaScript code was making a fetch request, but the variable `csrfToken` was not properly defined, causing a `ReferenceError`. - **Fix:** Declaring `csrfToken` at the beginning of the script: ```jsx const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\'); ``` - **Key Learning:**‚úÖ JavaScript variables must be defined before they are used.‚úÖ Use browser **developer tools (DevTools) Network tab** to inspect headers, payloads, and responses when debugging API requests. --- ### **3. Structuring Flask Routes for Task Management** - **Issue:** The `assign_contributor` route was failing due to incorrect request payload validation. - **Fix:** Improved the route‚Äôs error handling and logging: ```python @bp.route(\'//assign_contributor\', methods=[\'POST\']) def assign_contributor(task_id): try: data = request.get_json() contributor_id = int(data.get(\'contributor_id\', 0)) if not contributor_id: return jsonify({\'error\': \'Valid Contributor ID is required\'}), 400 ``` - **Key Learning:**‚úÖ Always validate incoming data in Flask routes to prevent type errors.‚úÖ Use `request.get_json()` properly and handle missing or incorrect data gracefully. --- ### **4. Utilizing Browser DevTools for Debugging** - **Issue:** The fetch request was failing with a `400 Bad Request`, and the browser console showed `ReferenceError: csrfToken is not defined`. - **Fix:** - Used **Network tab** to inspect the request payload and headers. - Used **Console tab** to catch JavaScript errors early. - **Key Learning:**‚úÖ DevTools is a **critical** tool for diagnosing network request issues.‚úÖ Always **check console errors** before assuming it\'s a backend issue. --- ### **5. Database Queries and ORM Debugging** - **Issue:** Tasks were not being updated correctly, possibly due to missing commit statements. - **Fix:** Ensured that:was executed properly. ```python task.contributor_id = contributor_id db.session.commit() ``` - **Key Learning:**‚úÖ Always call `db.session.commit()` after making changes in SQLAlchemy.‚úÖ Rollback transactions if an error occurs to avoid database inconsistency. --- ### **6. Handling Asynchronous JavaScript Logic** - **Issue:** The `assignContributor` function was executing before the page was fully loaded. - **Fix:** Wrapped it inside a function that ensures elements exist: ``` window.setupContributorAssignment = function () { const assignButton = $("#assign-contributor-btn"); if (!assignButton.length) { setTimeout(setupContributorAssignment, 500); // Retry in 500ms return; } ``` - **Key Learning:**‚úÖ Use `setTimeout` to **retry event binding** when elements are dynamically loaded.‚úÖ Always **check if elements exist before attaching event handlers**. --- ### **7. Best Practices for Flask Logging &amp; Error Handling** - **Issue:** Lack of clear logging when API calls failed. - **Fix:** Added better logging to track failures: ```python logger.info(f"Assigning contributor to task ID {task_id}") try: # Process request... except Exception as e: logger.error(f"Error assigning contributor: {e}") ``` - **Key Learning:**‚úÖ Log **every major step** in API processing to simplify debugging.‚úÖ Differentiate between `logger.info()`, `logger.warning()`, and `logger.error()` based on severity. --- ### **Final Takeaways** üöÄ **Understanding CSRF protection** and **properly structuring API requests** is crucial for secure web applications. üîç **Browser DevTools is invaluable** for diagnosing frontend issues, especially in JavaScript. üêç **Flask requires proper request validation, database transactions, and logging** to maintain stability. ‚ö° **Asynchronous JavaScript must handle dynamic elements carefully** to avoid runtime errors. This session reinforced best practices in **frontend-backend integration, debugging, and security**, making it a great learning experience! üöÄüî•</p>', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 0, 'created_at': '2025-02-10T09:11:12.273779', 'updated_at': '2025-03-04T00:41:24.838143'}, {'id': 373, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T22:10:59.863170', 'updated_at': '2025-02-28T23:10:59.893542'}, {'id': 335, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:44:45.530624', 'updated_at': '2025-02-28T14:44:45.542212'}, {'id': 357, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T15:08:15.356759', 'updated_at': '2025-02-28T16:08:15.371374'}, {'id': 343, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:12.267445', 'updated_at': '2025-02-28T15:18:12.278088'}, {'id': 337, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:07.626569', 'updated_at': '2025-02-28T15:18:07.632643'}, {'id': 361, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T17:11:52.257703', 'updated_at': '2025-02-28T18:11:52.262071'}, {'id': 355, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:55:16.105634', 'updated_at': '2025-02-28T15:55:16.131837'}, {'id': 348, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:26:17.632940', 'updated_at': '2025-02-28T15:26:17.642972'}, {'id': 332, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:35:43.663809', 'updated_at': '2025-02-28T14:35:43.673337'}, {'id': 333, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:36:20.683426', 'updated_at': '2025-02-28T14:36:20.691337'}, {'id': 365, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:30:48.877580', 'updated_at': '2025-02-28T19:30:48.887060'}, {'id': 340, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:11.061737', 'updated_at': '2025-02-28T15:18:11.075736'}, {'id': 367, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:39:25.734101', 'updated_at': '2025-02-28T19:39:25.739322'}, {'id': 366, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:38:39.027061', 'updated_at': '2025-02-28T19:38:39.048248'}, {'id': 358, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T15:46:04.956844', 'updated_at': '2025-02-28T16:46:04.966511'}, {'id': 244, 'name': 'Scroll to Updated Task', 'description': 'Automatically scroll to the updated task in the list if it‚Äôs out of view.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 0, 'created_at': '2025-02-05T12:56:52.818501', 'updated_at': '2025-02-28T00:11:57.987007'}, {'id': 353, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:52:04.500938', 'updated_at': '2025-02-28T15:52:04.512331'}, {'id': 362, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 284, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:14:50.969730', 'updated_at': '2025-03-04T17:30:45.507303'}, {'id': 356, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T15:08:08.061166', 'updated_at': '2025-02-28T16:08:08.066215'}, {'id': 329, 'name': 'Implement an API endpoint for submitting raw feature requests.', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-27T23:13:09.068616', 'updated_at': '2025-03-01T01:00:05.807248'}, {'id': 341, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:11.691354', 'updated_at': '2025-02-28T15:18:11.699365'}, {'id': 351, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:32:58.672570', 'updated_at': '2025-02-28T15:32:58.678298'}, {'id': 336, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:07:11.299563', 'updated_at': '2025-02-28T15:07:11.310976'}, {'id': 369, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T21:17:46.272998', 'updated_at': '2025-02-28T22:17:46.285417'}, {'id': 352, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:51:56.533768', 'updated_at': '2025-02-28T15:51:56.563880'}, {'id': 334, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:44:06.347090', 'updated_at': '2025-02-28T14:44:06.354371'}, {'id': 338, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:10.122843', 'updated_at': '2025-02-28T15:18:10.128941'}, {'id': 350, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:32:49.928206', 'updated_at': '2025-02-28T15:32:49.935531'}, {'id': 248, 'name': 'Implement Toggle Button', 'description': 'Add a toggle button to switch between hierarchical and flat views.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-05T12:58:14.518518', 'updated_at': '2025-02-28T00:11:48.483207'}, {'id': 354, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:54:59.543585', 'updated_at': '2025-02-28T15:54:59.553122'}, {'id': 347, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:24:45.846396', 'updated_at': '2025-02-28T15:24:45.860885'}, {'id': 345, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:53.170926', 'updated_at': '2025-02-28T15:18:53.179222'}, {'id': 331, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:35:35.797059', 'updated_at': '2025-02-28T14:35:35.813440'}, {'id': 359, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-28T15:54:42.242569', 'updated_at': '2025-03-01T02:01:18.851236'}, {'id': 291, 'name': 'Add dropdowns in task list for changing: Assigned to, Estimate, Task Type and Status', 'description': '<p>Write Description task description...</p>', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 1, 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-03-01T22:09:13.882787'}, {'id': 386, 'name': 'Test task', 'description': '<p>Testing tiptap editor lkjlk</p><hr><p>Write something</p><hr><p>Write something</p><hr><p></p>', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 284, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 9, 'status': 'In Progress', 'sort_order': 1, 'created_at': '2025-03-01T12:39:07.359868', 'updated_at': '2025-03-04T15:33:53.366530'}, {'id': 245, 'name': 'Apply Dynamic Sorting and Filtering', 'description': 'Ensure the task list dynamically updates its sorting and filtering after a status change.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'In Progress', 'sort_order': 1, 'created_at': '2025-02-05T12:56:52.818501', 'updated_at': '2025-02-28T00:12:01.504825'}, {'id': 327, 'name': 'üèÜ\xa0Epic: AI-Driven Feature Planning & Estimation', 'description': '<h2><strong>Description:&nbsp;</strong></h2><p>AI assists in refining raw feature requests into</p><p>structured plans, generating PRDs, Epics, User Stories, Acceptance Criteria, and Edge Cases. AI also provides intelligent estimations based on historical data and improves accuracy over time.</p><p></p><hr><h2>## Heading</h2><p></p>', 'task_type': 'Epic', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-27T23:02:31.274292', 'updated_at': '2025-03-04T15:27:42.964232'}, {'id': 64, 'name': 'Setup project credentials for Google API', 'description': 'Generate client ID and secret from Google API Console for your application.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-03-01T02:01:02.546625'}, {'id': 250, 'name': 'Preserve User Preferences', 'description': 'Persist the user‚Äôs chosen view state between sessions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-05T12:58:14.518518', 'updated_at': '2025-02-28T00:11:48.483213'}, {'id': 249, 'name': 'Define View States', 'description': 'Clearly label and define the view states for hierarchical and flat sorting.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-05T12:58:14.518518', 'updated_at': '2025-02-28T00:11:48.483213'}, {'id': 360, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-28T15:54:58.904932', 'updated_at': '2025-03-01T02:01:18.851237'}, {'id': 266, 'name': 'Highlight the nested tasks', 'description': '<p>lkjlkjlkjlkjlkjlkjWrite your task description...</p><p></p><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-03-03T17:32:52.809368'}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'description': '<p>Write your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p>', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-03-03T08:46:23.302934'}, {'id': 243, 'name': 'Highlight Updated Task', 'description': 'Highlight the updated task in the UI to provide immediate visual feedback.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 2, 'created_at': '2025-02-05T12:56:52.818501', 'updated_at': '2025-02-28T00:12:01.504819'}, {'id': 67, 'name': 'Test Google OAuth flow', 'description': 'Verify the OAuth flow using test accounts and check the token exchange.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-03-01T02:01:02.546635'}, {'id': 295, 'name': 'Issue: drag and drop errors', 'description': '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-10T09:22:54.461413', 'updated_at': '2025-02-28T00:11:55.301307'}, {'id': 290, 'name': 'issue: error when changing task type and', 'description': 'issue: error when changing task type and parent task before saving', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-10T09:00:03.417734', 'updated_at': '2025-03-01T02:01:18.851234'}, {'id': 257, 'name': 'Update Task API Integration', 'description': "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-05T22:55:49.566819', 'updated_at': '2025-02-28T00:11:57.987011'}, {'id': 66, 'name': 'Setup OAuth scopes for Google API', 'description': 'Determine the required OAuth scopes for your application and add them to the configuration.\nedit', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-03-01T02:01:02.546634'}, {'id': 326, 'name': 'Add dropdown in task list for changing: Project', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-26T22:10:15.209008', 'updated_at': '2025-03-01T02:01:12.498734'}, {'id': 264, 'name': 'Close all / Open all childtasks', 'description': '<p>Added new description check other tab</p><p></p><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 7, 'status': 'Not Started', 'sort_order': 4, 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-03-03T07:43:17.298288'}, {'id': 133, 'name': 'Step 4: Enhance Logging in models.py', 'description': 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nupdating the Task model in the following ways:\n\n1.\tLog Changes to parent_id:\n\t‚Ä¢\tLog changes to parent_id during updates, including old and new values.\n\t2.\tValidate Hierarchy with Logging:\n\t‚Ä¢\tLog detailed messages when validating hierarchy changes, especially for circular dependency checks.\n\nHere‚Äôs how the models.py can be updated:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy import func, cast, CheckConstraint\nfrom sqlalchemy.orm import validates\nfrom app.extensions.db import db\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\nclass Task(db.Model):\n    __tablename__ = "task"\n    \n    # Other columns...\n\n    parent_id = db.Column(\n        db.Integer, db.ForeignKey("task.id"), index=True, nullable=True\n    )\n\n    # Relationships\n    parent = db.relationship(\n        "Task", remote_side=[id], back_populates="children", lazy="select"\n    )\n    children = db.relationship(\n        "Task", back_populates="parent", lazy="select"\n    )\n\n    \n\n\n    @staticmethod\n    def _validate_no_circular_references(new_parent_id):\n        """\n        Validates that there are no circular references in the task hierarchy.\n\n        Args:\n            new_parent_id (int): The new parent ID to validate.\n\n        Raises:\n            ValueError: If a circular reference is detected.\n        """\n        visited = set()\n        current_parent_id = new_parent_id\n\n        logger.info(f"Validating circular references for parent ID: {new_parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error(\n                    f"Circular reference detected: Parent ID {current_parent_id} already visited."\n                )\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            # Fetch the next parent_id in the hierarchy\n            parent = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not parent:\n                break  # Exit if no parent is found\n            current_parent_id = parent.parent_id\n\n        logger.info("No circular reference detected.")\n\n    @validates(\'parent_id\', \'task_type\')\n    def validate_task_changes(self, key, value):\n        """\n        Validates changes to \'parent_id\' and \'task_type\'.\n        Ensures hierarchy validity and checks for circular references.\n        """\n        logger.debug(f"Validating {key} change for Task {self.id}: {value}")\n\n        if key == \'parent_id\':\n            # Log changes to parent_id\n            if self.id and value != self.parent_id:\n                logger.info(f"Task {self.id}: Updating \'parent_id\' from {self.parent_id} to {value}")\n\n            # Prevent a task from being its own parent\n            if value and value == self.id:\n                logger.error("A task cannot be its own parent.")\n                raise ValueError("A task cannot be its own parent.")\n\n            # Check for circular references\n            if value:\n                Task.check_circular_reference(self.id, value)\n\n        elif key == \'task_type\':\n            # Log changes to task_type\n            if self.id and value != self.task_type:\n                logger.info(f"Task {self.id}: Updating \'task_type\' from {self.task_type} to {value}")\n\n        # Check hierarchy rules without triggering further validation\n        if key in [\'parent_id\', \'task_type\']:\n            self._validate_hierarchy_change(key, value)\n\n        logger.info(f"Validation passed for {key}: {value}")\n        return value\n\n    def _validate_hierarchy_change(self, key, value):\n        """\n        Validates hierarchy rules for the task based on `task_type` and `parent_id`.\n        """\n        if key == \'parent_id\' and value:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=value).first()\n            if not parent_task:\n                raise ValueError("Parent task does not exist.")\n\n            logger.debug(f"Validating hierarchy: Task {self.id}, Parent Type: {parent_task.task_type}")\n            if self.task_type == "User Story" and parent_task.task_type != "Epic":\n                raise ValueError("User Stories must have an Epic as a parent.")\n            if self.task_type == "Subtask" and parent_task.task_type != "User Story":\n                raise ValueError("Subtasks must have a User Story as a parent.")\n\n        elif key == \'task_type\' and self.parent_id:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=self.parent_id).first()\n            if parent_task:\n                logger.debug(f"Validating hierarchy: Task Type: {value}, Parent Type: {parent_task.task_type}")\n                if value == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError("User Stories must have an Epic as a parent.")\n                if value == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError("Subtasks must have a User Story as a parent.")\n\n        logger.info(f"Hierarchy validation passed for Task {self.id if self.id else \'New Task\'}.")\n\n    @staticmethod\n    def check_circular_reference(task_id, parent_id):\n        """\n        Iteratively checks for circular references in the task hierarchy.\n        Prevents stack overflow on deep hierarchies.\n        """\n        visited = set()\n        current_parent_id = parent_id\n\n        logger.info(f"Checking circular reference for Task {task_id} with Parent ID: {parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error("Circular reference detected!")\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            if current_parent_id == task_id:\n                logger.error("A task cannot be its own ancestor.")\n                raise ValueError("A task cannot be its own ancestor.")\n\n            # Fetch the next parent_id in the hierarchy\n            task = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not task:\n                break\n            current_parent_id = task.parent_id\n\n        logger.info("Circular reference check passed.")\n```\nKey Enhancements:\n\t1.\tlog_and_validate_parent_id_change:\n\t‚Ä¢\tLogs the old and new parent_id whenever it changes.\n\t‚Ä¢\tEnsures no circular references are introduced.\n\t2.\t_validate_no_circular_references:\n\t‚Ä¢\tValidates the parent_id field to prevent circular dependencies.\n\t‚Ä¢\tLogs progress and raises detailed errors if violations occur.\n\t3.\tlog_and_validate_task_type_change:\n\t‚Ä¢\tLogs changes to task_type with the old and new values.\n\t‚Ä¢\tRevalidates hierarchy rules when task_type changes.\n\t4.\tDetailed Logging for Circular Reference Validation:\n\t‚Ä¢\t_validate_no_circular_references and check_circular_reference methods log every step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t‚Ä¢\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 4, 'created_at': '2025-01-15T09:44:08.340041', 'updated_at': '2025-03-01T02:01:18.851231'}, {'id': 132, 'name': 'Step 1: Update tasks_table_interactions.js', 'description': '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the map for efficient parent-child relationship lookups instead of DOM traversal.\n\n```\nexport const TaskManager = {\n    init: function (csrfToken) {\n        this.csrfToken = csrfToken;\n        this.initTaskParentMap(); // Initialize the map\n        this.initDragAndDrop(); // Initialize drag-and-drop functionality\n    },\n\n    // Initialize a global map for task relationships\n    taskParentMap: new Map(),\n\n    // Build the taskParentMap from the DOM\n    initTaskParentMap: function () {\n        console.log("Initializing Task Parent Map...");\n        const rows = document.querySelectorAll("tr[data-task-id]");\n\n        rows.forEach((row) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = parseInt(row.dataset.parentId, 10) || null;\n            this.taskParentMap.set(taskId, parentId);\n        });\n\n        console.log("Task Parent Map initialized:", Array.from(this.taskParentMap.entries()));\n    },\n\n    // Update the map dynamically after drag-and-drop\n    updateTaskParentMap: function (taskId, parentId) {\n        console.log(`Updating Task Parent Map: Task ${taskId} -> Parent ${parentId}`);\n        this.taskParentMap.set(taskId, parentId);\n    },\n\n    initDragAndDrop: function () {\n        if (window.isDragAndDropInitialized) {\n            console.log("Drag-and-drop is already initialized.");\n            return;\n        }\n\n        console.log("Initializing drag-and-drop within TaskManager...");\n\n        const tableBody = document.querySelector("tbody");\n        if (!tableBody) {\n            console.warn("Task table body not found for drag-and-drop initialization");\n            return;\n        }\n\n        // Initialize Sortable.js for drag-and-drop functionality\n        Sortable.create(tableBody, {\n            handle: ".task-row", // Only draggable via `.task-row` elements\n            animation: 150, // Smooth animation\n            filter: ".task-open-link", // Prevent dragging on task links\n            preventOnFilter: true, // Prevent drag if filtered element is clicked\n            onEnd: async (event) => {\n                try {\n                    console.log("Drag-and-drop operation started...");\n                    const rows = Array.from(event.from.querySelectorAll(".task-row"));\n                    const reorderedTasks = [];\n\n                    rows.forEach((row, index) => {\n                        const taskId = parseInt(row.dataset.taskId, 10);\n                        let parentId = null;\n\n                        // Get the parent ID from the map or fallback to the dataset\n                        if (row.classList.contains("subtask-row")) {\n                            const parentRow = row.previousElementSibling;\n                            parentId = parentRow\n                                ? parseInt(parentRow.dataset.taskId, 10)\n                                : this.taskParentMap.get(taskId) || null;\n                        }\n\n                        // Update the taskParentMap dynamically\n                        this.updateTaskParentMap(taskId, parentId);\n\n                        reorderedTasks.push({\n                            id: taskId,\n                            sort_order: index + 1,\n                            parent_id: parentId,\n                        });\n                    });\n\n                    console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n                    console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n                    // Send the payload to the backend\n                    const response = await fetch("/tasks/reorder_subtasks", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                            "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n                        },\n                        body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n                    });\n\n                    if (!response.ok) {\n                        const errorData = await response.json();\n                        console.error("Error reordering tasks:", errorData);\n                        alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n                        return;\n                    }\n\n                    const data = await response.json();\n                    console.log("Task reordering successful:", data);\n\n                } catch (error) {\n                    console.error("Error during drag-and-drop operation:", error);\n                    alert("An unexpected error occurred while reordering tasks.");\n                }\n            },\n        });\n\n        window.isDragAndDropInitialized = true;\n        console.log("Drag-and-drop initialized successfully.");\n    },\n};\n```\n\nKey Updates:\n\t1.\tPrecomputed Map (taskParentMap):\n\t‚Ä¢\tThe initTaskParentMap function initializes the map by iterating over DOM elements and mapping each task‚Äôs ID to its parent ID.\n\t‚Ä¢\tThe updateTaskParentMap dynamically updates the map when tasks are reordered.\n\t2.\tEfficient Parent Lookup:\n\t‚Ä¢\tThe parentId is derived from the precomputed map rather than DOM traversal.\n\t3.\tBackend Payload:\n\t‚Ä¢\tA structured payload (reorderedTasks) is sent to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t‚Ä¢\tCSRF protection is ensured by passing the token to the request headers.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'sort_order': 5, 'created_at': '2025-01-15T09:44:08.338301', 'updated_at': '2025-03-01T02:01:18.851229'}, {'id': 328, 'name': 'üü¢ User Story 1: AI-Generated Feature Refinement\xa0(8 Story Points)', 'description': 'As a\xa0product manager,\xa0I want\xa0AI to refine raw feature requests into structured PRDs, Epics, and User Stories,\xa0So that\xa0I can quickly turn ideas into actionable tasks.\n\n', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 5, 'created_at': '2025-02-27T23:09:37.421629', 'updated_at': '2025-03-03T06:26:25.726905'}, {'id': 287, 'name': 'When moving a parent item to another project make sure the subtasks are moved as well', 'description': '', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 5, 'created_at': '2025-02-10T08:48:31.986870', 'updated_at': '2025-03-01T02:01:12.498732'}, {'id': 134, 'name': 'Step 2: Update the Backend in routes.py', 'description': 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\nPlan for step 2:\n\t1.\tVerify the payload structure:\n\t‚Ä¢\tEnsure that the payload includes all necessary fields (id, sort_order, parent_id) for each task.\n\t‚Ä¢\tValidate that the parent-child relationships in the precomputed map (taskParentMap) are reflected correctly in the payload.\n\t2.\tSubmit the payload to the backend:\n\t‚Ä¢\tEnhance the fetch request in the onEnd function of initDragAndDrop to log detailed submission data.\n\t‚Ä¢\tConfirm the payload integrity in the browser console before submission.\n\t3.\tUpdate backend logging:\n\t‚Ä¢\tAdd logging to /reorder_subtasks in routes.py to confirm receipt of the correct payload and process parent-child updates.\n\t‚Ä¢\tLog before and after database updates for better debugging.\n\n-----\nUpdated tasks_table_interactions.js\n\nReplace this section:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    let parentId = null;\n```\nWith:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    const parentId = this.taskParentMap.get(taskId) || null;\n```\nThe this.taskParentMap provides a precomputed and dynamic mapping of taskId to parentId. By using this map, we avoid relying on DOM traversal logic (row.closest or row.previousElementSibling) during drag-and-drop operations, which can sometimes be unreliable or cumbersome.\n\nFull Revised onEnd section:\n```\nonEnd: async (event) => {\n    try {\n        console.log("Drag-and-drop operation started...");\n        const rows = Array.from(event.from.querySelectorAll(".task-row"));\n        const reorderedTasks = [];\n\n        rows.forEach((row, index) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = this.taskParentMap.get(taskId) || null;\n\n            // Update the taskParentMap dynamically\n            this.updateTaskParentMap(taskId, parentId);\n\n            reorderedTasks.push({\n                id: taskId,\n                sort_order: index + 1,\n                parent_id: parentId,\n            });\n        });\n\n        console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n        console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n        // Send the payload to the backend\n        const response = await fetch("/tasks/reorder_subtasks", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n            },\n            body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error("Error reordering tasks:", errorData);\n            alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n            return;\n        }\n\n        const data = await response.json();\n        console.log("Task reordering successful:", data);\n\n    } catch (error) {\n        console.error("Error during drag-and-drop operation:", error);\n        alert("An unexpected error occurred while reordering tasks.");\n    }\n}\n```\n---------------------------------\nEnsure updates include:\n\t‚Ä¢\tBetter Logging: Adding logs for key events such as database changes and validation results.\n\t‚Ä¢\tInput Validation: Ensure all required fields (id, sort_order, parent_id) exist in the payload.\n\t‚Ä¢\tPost-Commit Validation: Confirm database updates after the commit.\n\t‚Ä¢\tImproved Error Handling: Include specific error messages and consistent rollback mechanisms.\n\nBelow is the revised reorder_subtasks route with descriptive comments for each section:\n```\n@bp.route("/reorder_subtasks", methods=["POST"])\ndef reorder_subtasks():\n    """\n    Reorder subtasks globally or reassign them to a different parent.\n\n    Steps:\n    - Parse and validate input from the frontend.\n    - Update parent-child relationships and sort order in the database.\n    - Commit changes and return a success response.\n    - Handle errors gracefully and provide detailed logs for debugging.\n    """\n    logger.info("Entering reorder_subtasks route...")\n    logger.info(f"Received payload for reordering tasks: {request.json}")\n\n    try:\n        # Step 1: Parse input\n        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered\n        ordered_tasks = request.json.get("ordered_tasks", [])\n\n        logger.debug(f"Parsed parent_id: {parent_id}")\n        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")\n\n        # Step 2: Validate input\n        if not isinstance(ordered_tasks, list) or not all(\n            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task\n            for task in ordered_tasks\n        ):\n            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")\n            return jsonify({\n                "error": "Invalid input format for \'ordered_tasks\'. Each task must include \'id\', \'sort_order\', and \'parent_id\'."\n            }), 400\n\n        # Step 3: Validate parent task (if applicable)\n        if parent_id is not None:\n            parent_task = Task.query.get(parent_id)\n            if not parent_task:\n                logger.error(f"Parent task with ID {parent_id} not found.")\n                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400\n\n        logger.info("Input validation passed. Proceeding with task updates...")\n\n        # Step 4: Process updates for each subtask\n        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation\n\n        for task_data in ordered_tasks:\n            subtask_id = task_data["id"]\n            sort_order = task_data["sort_order"]\n            new_parent_id = task_data["parent_id"]\n\n            # Fetch the subtask from the database\n            subtask = Task.query.get(subtask_id)\n            if not subtask:\n                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")\n                continue\n\n            # Log and update parent_id if it changes\n            if new_parent_id is not None and new_parent_id != subtask.parent_id:\n                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")\n                subtask.parent_id = new_parent_id\n\n            # Update sort order\n            subtask.sort_order = sort_order\n            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")\n\n            # Add to the list of updated subtasks for validation\n            updated_subtasks.append(subtask)\n\n        # Step 5: Commit changes to the database\n        try:\n            db.session.commit()\n            logger.info(f"Subtasks reordered successfully: {[task[\'id\'] for task in ordered_tasks]}")\n        except Exception as e:\n            logger.error(f"Error committing changes to the database: {str(e)}")\n            db.session.rollback()\n            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500\n\n        # Step 6: Post-commit validation\n        for subtask in updated_subtasks:\n            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")\n            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")\n\n        # Step 7: Return success response\n        return jsonify({\n            "success": True,\n            "message": "Subtasks reordered successfully.",\n            "updated_subtasks": [subtask.id for subtask in updated_subtasks]\n        }), 200\n\n    except Exception as e:\n        # Step 8: Handle unexpected errors\n        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)\n        db.session.rollback()\n        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500\n```\nKey Changes and Descriptive Comments\n\t1.\tInput Parsing:\n\t‚Ä¢\tExtracts parent_id and ordered_tasks from the request payload.\n\t‚Ä¢\tLogs the parsed values for debugging.\n\t2.\tInput Validation:\n\t‚Ä¢\tEnsures ordered_tasks is a list of dictionaries with the required keys.\n\t‚Ä¢\tValidates parent_id if provided, ensuring the parent task exists in the database.\n\t3.\tUpdate Processing:\n\t‚Ä¢\tIterates through ordered_tasks, updating each task‚Äôs parent_id and sort_order.\n\t‚Ä¢\tLogs changes for each task.\n\t4.\tDatabase Commit:\n\t‚Ä¢\tCommits all updates in a single transaction.\n\t‚Ä¢\tLogs success or rolls back changes in case of an error.\n\t5.\tPost-Commit Validation:\n\t‚Ä¢\tVerifies that the parent_id and sort_order changes were successfully saved to the database.\n\t6.\tError Handling:\n\t‚Ä¢\tCaptures and logs exceptions during processing or committing.\n\t‚Ä¢\tProvides meaningful error messages to the frontend.\n\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'sort_order': 6, 'created_at': '2025-01-15T09:46:29.348853', 'updated_at': '2025-03-01T02:01:18.851232'}, {'id': 286, 'name': 'Implement abels/tags', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 6, 'created_at': '2025-02-10T08:46:23.985620', 'updated_at': '2025-03-01T02:01:12.498730'}, {'id': 296, 'name': 'issue: contributor is lost after updating task', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 7, 'created_at': '2025-02-10T09:26:43.881947', 'updated_at': '2025-02-28T00:11:55.301308'}, {'id': 131, 'name': 'Step 5: Update utils.py', 'description': 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nChanges to Make:\n\t1.\tEnhance Task Filtering:\n\t‚Ä¢\tEnsure the filters handle parent-child relationships explicitly.\n\t‚Ä¢\tAdd options to include or exclude subtasks in queries.\n\t2.\tUtility Function for Debugging Parent-Child Relationships:\n\t‚Ä¢\tProvide a function to generate a map or list of parent-child relationships for debugging purposes.\n\t3.\tValidation Functions:\n\t‚Ä¢\tAdd a utility function to validate parent-child relationships and ensure no circular dependencies.\n\nUpdated utils.py Code:\n```\nimport logging\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import joinedload\nfrom app.extensions.db import db\nfrom app.tasks.models import Task\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\n\nclass TaskService:\n    @staticmethod\n    def filter_tasks(filters=None, include_subtasks=True, page=None, per_page=None):\n        """\n        Dynamically filters tasks with an option to include or exclude subtasks.\n\n        Args:\n            filters (dict): Filtering criteria.\n            include_subtasks (bool): Whether to include subtasks in the query.\n            page (int, optional): Page number for pagination.\n            per_page (int, optional): Items per page for pagination.\n\n        Returns:\n            Query or Pagination: A SQLAlchemy query object or paginated results.\n        """\n        query = Task.query.options(\n            db.joinedload(Task.project).joinedload(Project.contributors),\n            db.joinedload(Task.contributor),\n            db.joinedload(Task.children),\n        ).order_by(Task.sort_order)\n\n        if filters:\n            logger.debug(f"Applying filters: {filters}")\n\n            # Apply standard filters\n            if "is_archived" in filters:\n                query = query.filter(Task.is_archived == filters["is_archived"])\n            if "project_id" in filters:\n                query = query.filter(Task.project_id == filters["project_id"])\n            if "task_type" in filters:\n                if isinstance(filters["task_type"], list):\n                    query = query.filter(Task.task_type.in_(filters["task_type"]))\n                else:\n                    query = query.filter(Task.task_type == filters["task_type"])\n            if "completion_status" in filters:\n                completion_map = {"completed": True, "in_progress": False}\n                if filters["completion_status"] in completion_map:\n                    query = query.filter(Task.completed == completion_map[filters["completion_status"]])\n\n            # Optionally exclude subtasks\n            if not include_subtasks:\n                query = query.filter(Task.task_type != "Subtask")\n\n        logger.debug(f"Generated query: {query}")\n\n        # Pagination\n        if page and per_page:\n            return query.paginate(page=page, per_page=per_page, error_out=False)\n        return query\n\n    @staticmethod\n    def debug_parent_child_relationships(project_id=None):\n        """\n        Generates a debug map of parent-child relationships for all tasks.\n\n        Args:\n            project_id (int, optional): Restrict to tasks from a specific project.\n\n        Returns:\n            dict: A dictionary mapping parent IDs to their child task IDs.\n        """\n        query = Task.query\n        if project_id:\n            query = query.filter(Task.project_id == project_id)\n\n        tasks = query.options(\n            db.load_only(Task.id, Task.parent_id)\n        ).all()\n\n        relationship_map = {}\n        for task in tasks:\n            if task.parent_id not in relationship_map:\n                relationship_map[task.parent_id] = []\n            relationship_map[task.parent_id].append(task.id)\n\n        logger.debug(f"Parent-Child Relationship Map: {relationship_map}")\n        return relationship_map\n\n    @staticmethod\n    def validate_parent_child_relationships():\n        """\n        Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.\n\n        Raises:\n            ValueError: If invalid relationships are detected.\n        """\n        tasks = Task.query.options(db.joinedload(Task.parent)).all()\n\n        for task in tasks:\n            if task.parent_id:\n                parent_task = task.parent\n                if not parent_task:\n                    raise ValueError(f"Task {task.id} has an invalid parent ID {task.parent_id}.")\n\n                # Validate hierarchy rules\n                if task.task_type == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError(f"User Story {task.id} must have an Epic as its parent.")\n                if task.task_type == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError(f"Subtask {task.id} must have a User Story as its parent.")\n\n        logger.info("All parent-child relationships are valid.")\n\n    @staticmethod\n    def get_all_task_ids_with_parents():\n        """\n        Returns a flat list of tasks with their parent IDs for debugging.\n\n        Returns:\n            list: A list of tuples (task_id, parent_id).\n        """\n        tasks = Task.query.with_entities(Task.id, Task.parent_id).all()\n        logger.debug(f"Task IDs with Parent IDs: {tasks}")\n        return tasks\n```\n\n\nExplanation of Changes:\n\t1.\tfilter_tasks Enhancements:\n\t‚Ä¢\tAdded include_subtasks parameter to optionally exclude subtasks from the query.\n\t2.\tdebug_parent_child_relationships:\n\t‚Ä¢\tCreates a parent-child relationship map for debugging purposes.\n\t3.\tvalidate_parent_child_relationships:\n\t‚Ä¢\tIterates through all tasks to validate parent-child hierarchy and ensures no invalid relationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t‚Ä¢\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 7, 'created_at': '2025-01-15T09:41:28.091824', 'updated_at': '2025-03-01T02:01:18.851223'}, {'id': 135, 'name': 'Step 3: Update list.html', 'description': 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already includes everything needed. No required changes.\n\nHere¬¥s the relevant section of list.html:\n\n```\n<tr id="task-{{ task.id }}"\n                class="task-row {% if task.task_type == \'Subtask\' %}subtask-row{% elif task.task_type == \'User Story\' %}user-story-row{% elif task.task_type == \'Epic\' %}epic-row{% endif %}"\n                style="background-color: \n                {% if task.task_type == \'Subtask\' %}\n                    rgba(200, 230, 255, 0.5); /* Light blue for Subtask */\n                {% elif task.task_type == \'User Story\' %}\n                    rgba(255, 255, 200, 0.5); /* Light yellow for User Story */\n                {% elif task.task_type == \'Epic\' %}\n                    rgba(255, 200, 200, 0.5); /* Light red for Epic */\n                {% else %}\n                    rgba(240, 240, 240, 1); /* Default light gray */\n                {% endif %};"\n                data-task-id="{{ task.id }}"\n                data-parent-id="{{ task.parent_id or \'\' }}"\n                data-level="{{ depth }}">\n                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>\n                <td>\n                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}\n                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}" aria-label="Toggle details for task {{ task.name }}">\n                        <i class="bi bi-chevron-right"></i>\n                    </button>\n                    {% endif %}\n                </td>\n                <td class="fw-medium fs-6 \n                {% if task.task_type == \'Epic\' %}\n                    epic-cell\n                {% elif task.task_type == \'User Story\' %}\n                    user-story-cell\n                {% elif task.task_type == \'Subtask\' %}\n                    subtask-cell\n                {% endif %}" \n                style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">\n                <span class="bi fs-6\n                {% if task.task_type == \'Epic\' %}\n                    bi-circle-fill\n                {% elif task.task_type == \'User Story\' %}\n                    bi-circle-half\n                {% elif task.task_type == \'Subtask\' %}\n                    bi-circle\n                {% endif %}">\n                </span>\n                {{ task.name }}\n                <small class="text-muted fw-light">\n                    (Parent-ID: {{ task.parent_id or \'None\' }})\n                </small>\n                <!-- Open Link -->\n                <a href="#" class="task-open-link" data-task-id="{{ task.id }}">\n                    <i class="bi bi-arrows-angle-expand" style="font-size: 0.8rem; color: white;"></i>\n                    Open\n                </a>\n            </td>\n                <td class="fw-light fs-6">\n                    <small class>\n                    LAC-{{ task.id }}\n                    </small>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light text-bg-secondary">\n                        {{ task.project if task.project else "Unknown Project" }}\n                    </span>\n                </td>\n                <td class="fs-6" data-contributor-column>{{ task.assigned_to if task.assigned_to else "Unassigned" }}</td>\n                <td class="fs-6">{{ task.story_points }}</td>\n                <td class="fs-6">\n                    <span class="badge rounded-pill fw-light text-bg-light">\n                        {{ task.task_type }}\n                    </span>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light {% if task.completed %}text-bg-success{% else %}text-bg-warning{% endif %}">\n                        {{ "Completed" if task.completed else "In Progress" }}\n                    </span>\n                </td>\n                <td>\n                    <!-- Delete Icon -->\n                    <button class="btn btn-dark btn-sm delete-task-btn" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .2rem; --bs-btn-font-size: .75rem;" data-task-id="{{ task.id }}" aria-label="Deletes task {{ task.id }}">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n            </tr>\n            {% for child in tasks if child.parent_id == task.id %}\n                {{ render_task(child, tasks, depth + 1) }}\n            {% endfor %}\n            {% endmacro %}\n            \n            <!-- Render top-level tasks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 8, 'created_at': '2025-01-15T09:46:29.349784', 'updated_at': '2025-03-01T02:01:18.851233'}, {'id': 289, 'name': 'issue: parent task is lost when updating task', 'description': '- Summary of the problem and solution\n    \n    **Problem: Parent Task Dropdown Was Not Being Set on Modal Open**\n    \n    The issue was that when opening a task modal, the **parent task dropdown** was not pre-populated with the correct parent task. However, interacting with the dropdown (e.g., clicking on it) would suddenly trigger it to be set correctly. This meant that the dropdown initialization was likely delayed or missing a step in the modal lifecycle.\n    \n    **Debugging Steps and Observations**\n    \n    1. **Task Details Were Fetched Correctly** ‚úÖ\n    - The task details, including parent_id, were being fetched from the API successfully.\n    1. **Parent Dropdown Initialization Issues** ‚ùå\n    - The initializeParentDropdown() function was being called, but the dropdown was sometimes **not fully ready** when we tried to set the selected parent task.\n    1. **Clicking the Dropdown Triggered the Parent to Be Set** ü§î\n    - This hinted that the dropdown was not fully ready when setParentDropdown(task.parent_id) was initially called.\n    \n    **Final Solution**\n    \n    1. **Ensuring Dropdown Readiness Before Setting the Parent Task**\n    - We added explicit **delays and checks** to confirm that the dropdown was fully initialized before attempting to set the parent task.\n    \n    Specifically, we:\n    \n    - **Waited for the dropdown to appear in the DOM** using observeParentDropdown().\n    - **Initialized the dropdown** with initializeParentDropdown().\n    - **Waited explicitly for the dropdown to be fully ready** using waitForParentDropdownReady().\n    - **Added a final delay of 200ms** before calling setParentDropdown() to ensure stability.\n    1. **Modifying openTaskModal to Handle Parent Dropdown Setup**\n    - We ensured that initializeParentDropdown() was called **after fetching task details** and before setting the parent task.\n    1. **Confirming the Fix** üéØ\n    - After these fixes, the parent dropdown was **immediately populated** upon opening the modal, without requiring user interaction.\n    \n    **Key Learnings**\n    \n    ‚úÖ **Dropdowns in modals need careful timing** ‚Äì They might not be ready when you expect them to be.\n    \n    ‚úÖ **Waiting for DOM updates is crucial** ‚Äì Observing the element ensures it actually exists before interacting with it.\n    \n    ‚úÖ **Explicit delays can prevent race conditions** ‚Äì A small delay can sometimes resolve timing issues in UI interactions.\n    \n    **Final Result**\n    \n    ‚úÖ The modal now **correctly loads and pre-selects the parent task** without extra clicks! üéâüöÄ', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 8, 'created_at': '2025-02-10T08:56:25.273984', 'updated_at': '2025-02-28T00:11:55.301302'}, {'id': 269, 'name': 'Fix styling for sweetalert', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'sort_order': 10, 'created_at': '2025-02-08T15:54:56.717846', 'updated_at': '2025-02-28T00:11:55.301281'}, {'id': 293, 'name': 'Click on title should copy the task title and id to clipboard', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 11, 'created_at': '2025-02-10T09:16:33.508209', 'updated_at': '2025-02-28T00:11:55.301304'}, {'id': 247, 'name': 'Add Temporary Badge', 'description': 'Add a temporary badge or visual indicator to the updated task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 241, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 11, 'created_at': '2025-02-05T12:57:37.151479', 'updated_at': '2025-02-27T08:43:14.054398'}, {'id': 294, 'name': 'Issue: task table filters not working', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 12, 'created_at': '2025-02-10T09:19:21.022598', 'updated_at': '2025-02-28T00:11:55.301306'}, {'id': 240, 'name': 'Update Task Workflow', 'description': 'As a user, I want to update the status of a task so that it reflects the changes in the UI dynamically without reloading the page.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'In Progress', 'sort_order': 14, 'created_at': '2025-02-05T12:54:55.061344', 'updated_at': '2025-02-28T00:11:55.301273'}, {'id': 242, 'name': 'User Control Over Views', 'description': 'As a user, I want to toggle between hierarchical and flat views so that I can switch sorting preferences based on my workflow.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 15, 'created_at': '2025-02-05T12:55:50.108011', 'updated_at': '2025-02-28T00:11:55.301275'}, {'id': 130, 'name': 'Implement the Map of Task Relationships solution for drag-and-drop', 'description': 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 16, 'created_at': '2025-01-15T09:41:28.093022', 'updated_at': '2025-02-28T00:11:55.301271'}, {'id': 246, 'name': 'Toast Notification', 'description': 'Display a toast notification confirming the task status update.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 241, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 16, 'created_at': '2025-02-05T12:57:37.151479', 'updated_at': '2025-02-27T08:43:14.054398'}, {'id': 283, 'name': 'Fix issue with updating task title', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 18, 'created_at': '2025-02-10T08:41:58.769700', 'updated_at': '2025-02-28T00:11:55.301295'}, {'id': 278, 'name': 'Implement search feature for tasks list', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 5, 'project': 'Project Delta', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 4, 'status': 'Not Started', 'sort_order': 19, 'created_at': '2025-02-10T07:36:03.369833', 'updated_at': '2025-02-28T00:11:55.301289'}, {'id': 62, 'name': 'Add OAuth integration for Google Login', 'description': 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 20, 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-02-28T00:11:55.301255'}, {'id': 279, 'name': 'github integration', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 21, 'created_at': '2025-02-10T07:36:38.238202', 'updated_at': '2025-02-28T00:11:55.301290'}, {'id': 65, 'name': 'Implement backend endpoints for Google OAuth', 'description': 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 22, 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-02-28T00:11:55.301260'}, {'id': 241, 'name': 'Provide User Feedback', 'description': 'As a user, I want to receive immediate feedback after updating a task‚Äôs status so that I know the update was successful.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 24, 'created_at': '2025-02-05T12:55:19.826398', 'updated_at': '2025-02-28T00:11:55.301274'}, {'id': 41, 'name': 'Implement Searchable Dropdown', 'description': 'As a user, I want a searchable dropdown for parent task assignment.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Completed', 'sort_order': 25, 'created_at': '2025-01-03T09:14:28.285904', 'updated_at': '2025-02-28T00:11:55.301181'}, {'id': 85, 'name': 'Assign multiple contributors to a task', 'description': 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 27, 'created_at': '2025-01-07T19:32:39.466022', 'updated_at': '2025-02-28T00:11:55.301266'}, {'id': 136, 'name': 'Page scroll should stay in position when reloading', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 28, 'created_at': '2025-01-16T18:21:50.187247', 'updated_at': '2025-02-28T00:11:55.301272'}, {'id': 267, 'name': 'Improvements to toggles and nested tasks', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 29, 'created_at': '2025-02-08T02:29:12.464594', 'updated_at': '2025-03-03T14:17:12.065528'}, {'id': 325, 'name': 'Improve task list responsive grid', 'description': '## üîç **How Leading Task Management Apps Handle Column Widths**\n\n### 1Ô∏è‚É£ **JIRA (Atlassian)**\n\nüîπ **Dynamic Resizing** (CSS Grid + JavaScript)\n\n- Uses `display: grid` for task tables.\n- Columns are resizable with a drag handle.\n- `grid-template-columns: auto 1fr auto;` for flexibility.\n- **Approach**: Fixed + flexible widths with an adaptive UI.\n\n---\n\n### 2Ô∏è‚É£ **Monday.com**\n\nüîπ **Flexbox-Based Table**\n\n- Uses `display: flex;` instead of `grid` for more control.\n- Columns use **`flex-grow`** to expand dynamically.\n- Drag handles allow users to resize columns.\n- **Approach**: **JavaScript-based column width management** to allow user customization.\n\n---\n\n### 3Ô∏è‚É£ **Asana**\n\nüîπ **Hybrid (Flexbox + JavaScript)**\n\n- Uses **CSS flexbox** for flexible layout.\n- Users can resize columns by dragging.\n- `min-width: 120px;` ensures usability.\n- **Approach**: A combination of `flex` and `min-width` to ensure usability on smaller screens.\n\n---\n\n### 4Ô∏è‚É£ **Linear**\n\nüîπ **CSS Grid with `fr` Units**\n\n- Uses a modern **CSS Grid** approach:\n    \n    ```css\n    grid-template-columns: auto 1fr auto;\n    ```\n    \n- Dynamically adjusts the width of columns **based on content**.\n- Uses `grid-template-columns: minmax(150px, 2fr) 3fr 1fr;` for controlled column expansion.\n- **Approach**: Minimalist UI with focus on speed and responsiveness.\n\n---\n\n### 5Ô∏è‚É£ **Shortcut**\n\nüîπ **Similar to Jira (Resizable Columns)**\n\n- Uses **CSS Grid + JavaScript-based resizing**.\n- Stores user preferences (column order, width) in **local storage**.\n- **Approach**: Persistent column sizes per user, allowing for a **customizable layout**.\n\n---\n\n## ‚úÖ **What‚Äôs the Best Approach for Our App?**\n\n### üéØ **Option 1: CSS Grid (Recommended)**\n\n```css\ngrid-template-columns: 1fr 2fr 1fr;\n```\n\nPros:\n‚úî **Modern**\n\n‚úî **Auto-resizes based on content**\n\n‚úî **Easy to manage**\n\n---\n\n### üéØ **Option 2: Flexbox (For More Control)**\n\n```css\ndisplay: flex;\nflex-grow: 1;\nmin-width: 120px;\n```\n\nPros:\n‚úî **More control over column shrinking/growing**\n\n‚úî **Easier to make resizable**\n\n‚úî **Ideal for draggable column resizing**\n\n---\n\n### üéØ **Option 3: JavaScript-Powered Resizing (Advanced)**\n\n- Uses `grid-template-columns` but **lets users drag & resize**.\n- Stores **column widths in local storage**.\n- Uses `ResizeObserver` to listen for changes.\n\nPros:\n‚úî **User-friendly (lets users resize columns)**\n\n‚úî **Persistent user preferences**\n\n‚úî **Great for complex task management apps**\n\n---\n\n## üî• **What‚Äôs the Best Choice for Us?**\n\n- If you want **simple auto-adjusting columns**, go with **CSS Grid** (`fr` units).\n- If you need **manual resizing**, use **Flexbox + JavaScript**.\n- If you want **fully customizable layouts**, use **JavaScript-powered resizing** like Jira or Monday.\n\nWould you like me to **implement resizable columns** with JavaScript? üöÄ', 'task_type': 'Epic', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'sort_order': 30, 'created_at': '2025-02-25T00:02:51.810711', 'updated_at': '2025-03-03T14:17:02.484796'}, {'id': 274, 'name': 'Add support for goals, initiatives, okr¬¥s', 'description': 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n\n√∂lkasd√∂lkk', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P1', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 31, 'created_at': '2025-02-10T00:46:27.204912', 'updated_at': '2025-02-28T00:11:55.301284'}, {'id': 63, 'name': 'Add OAuth integration for GitHub Login', 'description': 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'sort_order': 32, 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-02-27T08:43:14.054354'}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 32, 'created_at': '2025-02-10T08:41:17.786154', 'updated_at': '2025-03-03T14:16:41.747486'}, {'id': 276, 'name': 'Add support for priority', 'description': 'ffasdlkjlkj\nljkkjlkj', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P0', 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 33, 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-28T00:11:55.301286'}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'description': 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- Custom status\n-- Custom status\n- In Progress\n-- Custom status\n-- Custom status\n-- Custom status\n- Completed\n-- Custom status\n-- Custom status\n\n2. How can we track a task through different stages and save the sequence of events or stages the task has gone through?\nI¬¥m thinking it could be good for mapping out processes, identifying bottlenecks and provide valuable insights while improving and streamlining workflows.\n- Stages\n- Contacts taken\n- Respons time \n- Time to action after responses\n- Dependencies\n\nNeed to be able to record every action related to this action.\nCommunication integrations\n- Slack\n- Email\n- Text messages\n- Phonecalls\n- Calendar events, meetings\n- Zoom, Google meet, Teams etc..\n\n\n2. Set custom statuses per project (can use tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 34, 'created_at': '2025-02-10T07:16:03.352588', 'updated_at': '2025-03-03T14:16:31.129766'}, {'id': 68, 'name': 'Register application in GitHub Developer Console', 'description': 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 35, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-02-27T08:43:14.054358'}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'description': 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be lost"\nOR\n\nIs it possible, and is it desireable to keep parent child relationships across projects?\nSo that a parent can be in one project but the child tasks can be in different projects?\n\nLets say \nParent epic is \n"Internationalisation"\nChild user stories are\n- Timezones\n- Language\n- Currency\n- Day, Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 35, 'created_at': '2025-02-10T08:54:36.297869', 'updated_at': '2025-03-03T14:16:24.364985'}, {'id': 284, 'name': 'Add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 36, 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-28T00:11:55.301296'}, {'id': 281, 'name': 'Add a page for roadmap', 'description': 'Add some sort of high level plan that aims to keep PM/PO¬¥s on track and not get lost into the details of an overwhelming large backlog', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 37, 'created_at': '2025-02-10T08:27:01.218606', 'updated_at': '2025-02-28T00:11:55.301293'}, {'id': 273, 'name': 'Disable parent task selector in epics', 'description': 'and add text, Epic can¬¥t have parent tasks', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 38, 'created_at': '2025-02-10T00:45:20.740910', 'updated_at': '2025-02-28T00:11:55.301283'}, {'id': 69, 'name': 'Handle callback from GitHub', 'description': 'Implement the callback endpoint to process the authorization code from GitHub.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 38, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-02-26T21:53:17.041822'}, {'id': 280, 'name': 'logging (task and project history)', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 39, 'created_at': '2025-02-10T07:37:44.435112', 'updated_at': '2025-02-28T00:11:55.301291'}, {'id': 275, 'name': 'Add support for sprints/cycles', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 40, 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-28T00:11:55.301285'}, {'id': 100, 'name': '1.1 User Registration', 'description': '<blockquote><p>As a user, I want to register with a username, email, and password so that I can create an account and access the system. </p></blockquote><p>**Acceptance Criteria:** </p><ul><li><p>‚Ä¢ User can input valid username, email, and password.</p></li><li><p>‚Ä¢ Username and email must be unique. </p></li><li><p>‚Ä¢ Errors are displayed for invalid inputs or duplicate accounts. </p></li><li><p>‚Ä¢ Passwords must meet complexity requirements and be securely stored. </p></li><li><p>‚Ä¢ Successful registration redirects users to a login page.</p></li></ul><hr><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 41, 'created_at': '2025-01-07T19:59:09.044667', 'updated_at': '2025-03-03T14:20:10.801828'}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'description': 'kkkkkkkjjjjj\nlkajdl√∂kjsdf√∂lkjsdf√∂lkjdf', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 41, 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-28T00:11:55.301297'}, {'id': 107, 'name': '1.1.1 Database Changes for User Registration', 'description': '<p>1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.</p><p></p><hr><p>Adding text</p><pre><code>CREATE TABLE public.users ( id SERIAL PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL, created_at TIMESTAMP DEFAULT NOW(), updated_at TIMESTAMP DEFAULT NOW() );</code></pre><p></p>', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 42, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-03-03T20:49:45.725711'}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'description': 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitHub Login involves integrating OAuth 2.0, which both services support. The complexity depends on your app‚Äôs existing setup, frameworks, and experience with third-party authentication. Below is a breakdown:\n\nKey Steps for Implementing Google or GitHub Login\n\t1.\tSet Up OAuth Credentials:\n\t‚Ä¢\tRegister your application in the Google Cloud Console or GitHub Developer Settings.\n\t‚Ä¢\tObtain the client ID and client secret.\n\t2.\tInstall Required Libraries:\n\t‚Ä¢\tUse a library for OAuth (e.g., flask-oauthlib, python-social-auth, or authlib).\n\t‚Ä¢\tPopular frameworks like Flask and Django already have robust integrations for OAuth providers.\n\t3.\tBackend Configuration:\n\t‚Ä¢\tImplement an endpoint to handle the OAuth flow (/auth/login/google or /auth/login/github).\n\t‚Ä¢\tConfigure your app to send users to Google or GitHub‚Äôs authentication page.\n\t‚Ä¢\tHandle the OAuth callback to exchange the authorization code for an access token.\n\t‚Ä¢\tVerify the token and fetch user information (e.g., email, name).\n\t4.\tLink OAuth to User Registration:\n\t‚Ä¢\tOn successful login, create or retrieve a user in your database.\n\t‚Ä¢\tStore the user‚Äôs details like email, OAuth provider ID, and access token.\n\t5.\tFrontend Integration (if applicable):\n\t‚Ä¢\tAdd ‚ÄúLogin with Google‚Äù or ‚ÄúLogin with GitHub‚Äù buttons.\n\t‚Ä¢\tRedirect to your backend‚Äôs OAuth endpoint when clicked.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 42, 'created_at': '2025-01-07T12:15:54.291625', 'updated_at': '2025-02-28T00:11:55.301262'}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'description': 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 18, 'status': 'Not Started', 'sort_order': 43, 'created_at': '2025-01-07T19:53:50.085064', 'updated_at': '2025-02-28T00:11:55.301267'}, {'id': 61, 'name': 'Parent task assignment', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'sort_order': 44, 'created_at': '2025-01-04T22:31:45.205815', 'updated_at': '2025-02-28T00:11:55.301224'}, {'id': 108, 'name': '1.1.2 Backend API for Registration', 'description': '‚Ä¢\tCreate an endpoint POST /api/register:\n‚Ä¢\tValidate input fields.\n‚Ä¢\tHash the password using bcrypt or argon2.\n‚Ä¢\tInsert the user into the users table.\n‚Ä¢\tReturn success/failure responses.\ndddhfff\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 44, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-27T08:43:14.054375'}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t‚Ä¢\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t‚Ä¢\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t‚Ä¢\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 45, 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-02-28T00:11:55.301265'}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'description': 'PRD: Define roles and permissions to restrict access. Roles include admin, developer, and viewer. Implement middleware for access control checks.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 46, 'created_at': '2025-01-07T19:54:09.204981', 'updated_at': '2025-02-28T00:11:55.301268'}, {'id': 83, 'name': 'Notifications', 'description': 'Implement sending notifications to selected people triggered by events.\nCustomizing messages:\nPossibility to adjust how detailed the information should be and what level of technical difficulty the language can contain. Integration to LMS that tailors messages to different target groups and then sends the appropriate version to the appropriate target group.\n\n\n\n- Ready for Release\n   - Send documentation of new feature to support and customer success team\n      - Add technical documentation as file in documentation library.\n      - User documentation\n      - Create and send feature description to Sales & Marketing dep.\n      - Create and send feature description and estimation of added value for company and customer to Investors.\n   - Create and publish release notes online and in inline message system.\n\nRead more: https://www.notion.so/lacunamedia/Create-and-send-messages-triggered-by-events-174979257fc08022b18bc76d3b28a4b3?pvs=4', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 47, 'created_at': '2025-01-07T16:10:54.030609', 'updated_at': '2025-02-28T00:11:55.301263'}, {'id': 112, 'name': '1.2.2 Frontend Login Page', 'description': 'Develop a frontend form for user login with email and password inputs.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 47, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054377'}, {'id': 99, 'name': 'Enhance User Account Management', 'description': 'PRD: Provide additional account management features for users and admins. Includes profile management, password reset functionality, and audit logging.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'sort_order': 48, 'created_at': '2025-01-07T19:54:20.692949', 'updated_at': '2025-02-28T00:11:55.301269'}, {'id': 109, 'name': '1.1.3 Create Frontend Registration Page', 'description': 'Develop a frontend form to collect user registration details.\n‚Ä¢\tAdd a form for username, email, and password inputs.\n‚Ä¢\tUse client-side validation (e.g., email format).\n‚Ä¢\tSend a POST request to /api/register.\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 49, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-27T08:43:14.054375'}, {'id': 110, 'name': '1.1.4 Unit Tests for Registration', 'description': 'Write unit tests for:\n\n‚Ä¢\tValid registration.\n‚Ä¢\tDuplicate username/email scenarios.\n‚Ä¢\tInvalid input handling.\nff', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 50, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-27T08:43:14.054376'}, {'id': 101, 'name': '1.2 User Login', 'description': 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n‚Ä¢\tUsers can log in with a valid email and password.\n‚Ä¢\tErrors are displayed for invalid credentials.\n‚Ä¢\tSuccessful login stores a session or JWT token.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 52, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054370'}, {'id': 111, 'name': '1.2.1 Backend API for Login', 'description': 'Create POST /api/login endpoint to handle user login.\njjsjj', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 54, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054377'}, {'id': 113, 'name': '1.2.3 Session Management', 'description': 'Implement secure session handling using cookies or JWT.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 55, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054378'}, {'id': 114, 'name': '1.2.4 Unit Tests for Login', 'description': 'Write tests for successful and failed login attempts.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 56, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054379'}, {'id': 106, 'name': 'Password Reset', 'description': 'As a user, I want to reset my password securely using email.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'sort_order': 57, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054373'}, {'id': 128, 'name': 'Frontend Password Reset Page', 'description': 'Develop a page for users to enter a new password using a valid token.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 58, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054388'}, {'id': 129, 'name': 'Testing Password Reset', 'description': 'Write tests for email delivery, token validation, and password updates.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 59, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054389'}, {'id': 102, 'name': 'Logout', 'description': 'As a user, I want to log out so that I can end my session securely.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 60, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054371'}, {'id': 117, 'name': 'Tests for Logout', 'description': 'Verify session invalidation and redirection to the login page.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 61, 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-27T08:43:14.054381'}, {'id': 381, 'name': 'Delete this', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 344, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 61, 'created_at': '2025-02-28T23:48:05.992788', 'updated_at': '2025-03-04T17:17:46.383393'}, {'id': 116, 'name': 'Frontend Logout Button', 'description': 'Add a logout button to the UI and handle session clearing.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 62, 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-27T08:43:14.054380'}, {'id': 115, 'name': 'Backend API for Logout', 'description': 'Create POST /api/logout endpoint to invalidate user sessions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 63, 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-27T08:43:14.054379'}, {'id': 45, 'name': 'Display Default Value in Dropdown', 'description': 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 64, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054343'}, {'id': 50, 'name': 'Retrieve Current Parent Task', 'description': 'Retrieve the current parent task‚Äôs ID and name from the backend.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Completed', 'sort_order': 65, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054346'}, {'id': 51, 'name': 'Set Default Value', 'description': 'Set the default value in the dropdown based on the retrieved data.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 45, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 1, 'status': 'Not Started', 'sort_order': 66, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054347'}, {'id': 46, 'name': 'Search for Parent Tasks', 'description': 'Allow users to search for tasks dynamically in the dropdown by typing.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'sort_order': 67, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054344'}, {'id': 54, 'name': 'Test Partial Matching', 'description': 'Ensure the search results update in real-time as the user types.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 68, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054349'}, {'id': 47, 'name': 'Handle Large Datasets Efficiently', 'description': 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'sort_order': 69, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054344'}, {'id': 56, 'name': 'Paginate API Responses', 'description': 'Implement server-side filtering and pagination for large datasets.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 70, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054350'}, {'id': 55, 'name': 'Enable Lazy Loading', 'description': 'Enable lazy loading or virtualization in Virtual Select.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 71, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054350'}, {'id': 48, 'name': 'Select and Deselect Parent Tasks', 'description': 'Allow users to select a parent task or deselect by choosing "None."', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 72, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054345'}, {'id': 57, 'name': 'Ensure None Option Availability', 'description': 'Add ‚ÄúNone‚Äù as a selectable option and ensure it stays at the top of the list.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 73, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054351'}, {'id': 58, 'name': 'Handle Selection Events', 'description': 'Implement event listeners to update the form‚Äôs state when the selection changes.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 74, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054352'}, {'id': 49, 'name': 'Integrate Dropdown with Task Form', 'description': 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 75, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054346'}, {'id': 376, 'name': 'Subtask test', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 346, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 76, 'created_at': '2025-02-28T23:01:44.247988', 'updated_at': '2025-03-04T15:44:10.651229'}, {'id': 59, 'name': 'Bind Dropdown to Form Field', 'description': 'Bind the dropdown to the form‚Äôs parent task field.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'In Progress', 'sort_order': 76, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054352'}, {'id': 383, 'name': 'new user story', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 344, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 76, 'created_at': '2025-03-01T01:00:27.095399', 'updated_at': '2025-03-04T17:47:38.815069'}, {'id': 60, 'name': 'Test Form Submission', 'description': 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 77, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054353'}, {'id': 52, 'name': 'Add Search Box to Dropdown', 'description': 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 78, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054348'}, {'id': 53, 'name': 'Implement AJAX Search', 'description': 'Implement AJAX-based search to fetch tasks dynamically from the backend.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 79, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054348'}, {'id': 42, 'name': 'Choose Dropdown Library', 'description': 'Research and decide on the dropdown library to use.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 80, 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-27T08:43:14.054341'}, {'id': 378, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 80, 'created_at': '2025-02-28T23:17:32.404713', 'updated_at': '2025-03-01T00:17:32.410920'}, {'id': 43, 'name': 'Integrate Dropdown Library', 'description': 'Integrate the chosen dropdown library into the project.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Completed', 'sort_order': 81, 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-27T08:43:14.054342'}, {'id': 377, 'name': 'Taskade', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 342, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 82, 'created_at': '2025-02-28T23:02:24.453543', 'updated_at': '2025-03-04T17:12:31.851611'}, {'id': 90, 'name': 'Update frontend to display and manage multiple contributors', 'description': 'Allow users to view, add, or remove multiple contributors via the UI.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 82, 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-27T08:43:14.054364'}, {'id': 88, 'name': 'Update database schema for multiple contributors', 'description': 'Modify the task table to support many-to-many relationships for contributors.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 83, 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-27T08:43:14.054362'}, {'id': 89, 'name': 'Develop backend API for adding contributors to a task', 'description': 'Create endpoints to add, update, and remove contributors for a task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 84, 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-27T08:43:14.054363'}, {'id': 86, 'name': 'Allow designation of task owner', 'description': 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 85, 'created_at': '2025-01-07T19:33:29.330562', 'updated_at': '2025-02-27T08:43:14.054361'}, {'id': 375, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 85, 'created_at': '2025-02-28T22:48:35.594251', 'updated_at': '2025-02-28T23:48:35.676455'}, {'id': 93, 'name': 'Update frontend to manage task ownership', 'description': 'Allow users to assign or update the task owner via the UI.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 86, 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-27T08:43:14.054365'}, {'id': 384, 'name': 'Changed title', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 86, 'created_at': '2025-03-01T12:06:32.303897', 'updated_at': '2025-03-04T17:34:48.465098'}, {'id': 91, 'name': 'Update database schema for task ownership', 'description': 'Add a column or relationship to assign a single owner per task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 87, 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-27T08:43:14.054364'}, {'id': 92, 'name': 'Develop backend API for assigning task owner', 'description': 'Create endpoints to assign or update the owner of a task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 88, 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-27T08:43:14.054365'}, {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 89, 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-02-27T08:43:14.054362'}, {'id': 96, 'name': 'Allow admin users to create and customize contributor roles via frontend', 'description': 'Provide UI functionality for admins to manage contributor roles dynamically.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 90, 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-27T08:43:14.054367'}, {'id': 94, 'name': 'Add database support for contributor roles', 'description': 'Introduce a roles table and link contributors to specific roles for tasks.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 91, 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-27T08:43:14.054366'}, {'id': 95, 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 92, 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-27T08:43:14.054367'}, {'id': 127, 'name': 'Backend API for Password Reset', 'description': 'Create endpoints to handle password reset requests and token validation.\ndfdf\n\nasdasd', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 93, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054387'}, {'id': 126, 'name': 'Email Configuration for Password Reset', 'description': 'Configure email service to send password reset links.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 94, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054387'}, {'id': 104, 'name': 'Middleware for Role Enforcement', 'description': 'As a system, I want to enforce role-based access to specific routes.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 98, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 95, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054372'}, {'id': 122, 'name': 'Testing Role Enforcement', 'description': 'Write tests to ensure proper access control based on roles.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 96, 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-02-27T08:43:14.054384'}, {'id': 121, 'name': 'Develop Role Enforcement Middleware', 'description': 'Implement middleware to check user roles for access control.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 104, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 97, 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-02-27T08:43:14.054383'}, {'id': 105, 'name': 'Profile Management', 'description': 'As a user, I want to update my profile (username, email, password).', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 99, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 98, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054373'}, {'id': 123, 'name': 'Backend API for Profile Management', 'description': 'Create PATCH /api/profile endpoint to update user details.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 99, 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-02-27T08:43:14.054385'}, {'id': 125, 'name': 'Testing Profile Updates', 'description': 'Write tests for profile update functionality.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 100, 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-02-27T08:43:14.054386'}, {'id': 124, 'name': 'Frontend Profile Page', 'description': 'Develop a profile page for editing user details.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 101, 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-02-27T08:43:14.054385'}, {'id': 103, 'name': 'Role Assignment', 'description': 'As an administrator, I want to assign roles to users so that I can control access to certain features.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 98, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 102, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054372'}, {'id': 120, 'name': 'Testing Role Assignment', 'description': 'Write tests to validate role changes and restrictions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 103, 'created_at': '2025-01-07T20:40:58.383687', 'updated_at': '2025-02-27T08:43:14.054383'}, {'id': 119, 'name': 'Backend API for Role Assignment', 'description': 'Create POST /api/assign-role endpoint to manage user roles.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 104, 'created_at': '2025-01-07T20:40:58.383687', 'updated_at': '2025-02-27T08:43:14.054382'}, {'id': 118, 'name': 'Database Changes for Role Assignment', 'description': 'Add a role column to the users table.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 105, 'created_at': '2025-01-07T20:40:58.383687', 'updated_at': '2025-02-27T08:43:14.054381'}, {'id': 44, 'name': 'Test Performance with 500 Tasks', 'description': 'Ensure dropdown performance remains smooth with 500 tasks.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 107, 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-26T21:53:17.041813'}]
2025-03-04 17:55:53,839 DEBUG: Task types: ['all', 'Subtask', 'Epic', 'User Story']
2025-03-04 17:55:53,839 DEBUG: Projects: [<Project Project Alpha (ID: 1)>, <Project Project Beta (ID: 2)>, <Project Project Gamma (ID: 3)>, <Project Project Theta (ID: 4)>, <Project Project Delta (ID: 5)>, <Project PMS - Feature Requests (ID: 7)>, <Project PMS - Backlog (ID: 6)>, <Project Miscellaneous (ID: 19)>]
2025-03-04 17:55:53,840 DEBUG: Tasks response: [{'id': 370, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T21:27:30.386959', 'updated_at': '2025-02-28T22:27:30.395572'}, {'id': 346, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:24:40.311054', 'updated_at': '2025-02-28T15:24:40.322156'}, {'id': 342, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:11.944980', 'updated_at': '2025-02-28T15:18:11.954065'}, {'id': 344, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:16.258493', 'updated_at': '2025-02-28T15:18:16.268248'}, {'id': 339, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:10.856511', 'updated_at': '2025-02-28T15:18:10.860682'}, {'id': 265, 'name': 'Smooth transition for toggles', 'description': '<p>Added new description</p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-03-01T15:23:05.271095'}, {'id': 292, 'name': 'Issue: assigning contributor does not work', 'description': '<p>### **Summary of problem and solution** The issue was that assigning a contributor to a task via the /tasks//assign_contributor API endpoint resulted in a **400 Bad Request** error. Upon investigation, the following problems were identified: 1. **Missing CSRF Token:** - The request failed due to a missing CSRF token, as shown in the error message: *‚ÄúBad Request: The CSRF token is missing.‚Äù* - The frontend was not correctly including the CSRF token in the request headers. 1. **JavaScript Error (Undefined CSRF Token Variable):** - The error *‚ÄúReferenceError: csrfToken is not defined‚Äù* indicated that the CSRF token was not being retrieved properly in the JavaScript code. 1. **Incorrect Fetch Request Headers:** - The fetch request did not include the CSRF token under the correct key (X-CSRFToken). - The script attempted to send the request without properly extracting the CSRF token from the meta tag. ### **Solution** 1. **Include the CSRF Token in the JavaScript Code** The CSRF token was retrieved from the meta tag and used in the request headers: ```jsx // Retrieve CSRF token from meta tag const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\'); ``` This ensures that the CSRF token is correctly fetched and available in the JavaScript scope. 1. **Modify the Fetch Request to Include CSRF Token** The request to assign a contributor was updated to include the token: ```jsx const response = await fetch(`/tasks/${taskId}/assign_contributor`, { method: "POST", headers: { "Content-Type": "application/json", "X-CSRFToken": csrfToken // Include CSRF token }, body: JSON.stringify({ contributor_id: parseInt(contributorId, 10) }), }); ``` - **Ensures the CSRF token is sent in the request headers** so that Flask-WTF does not reject the request. 1. **Verify and Debug Network Requests** - The updated request headers were verified using **Chrome DevTools &gt; Network tab** to ensure the X-CSRFToken was included. - The error messages disappeared, and the contributor assignment request **succeeded with a 200 OK response**. --- ### **Final Outcome** üöÄ The issue was resolved, and contributors can now be assigned successfully to tasks without triggering a CSRF validation error. ### **Key Learnings from This Session** This debugging session covered several important aspects of **web development with Flask and JavaScript**, particularly related to **API requests, CSRF protection, debugging tools, and database interactions**. Here are the key takeaways: --- ### **1. CSRF Protection in API Requests** - **Issue:** The initial error was due to **a missing CSRF token** when making a `POST` request. - **Fix:** The solution was to **retrieve the CSRF token from a meta tag** in the HTML and include it in the request headers. - **Key Learning:** Flask-WTF requires CSRF tokens for form and API submissions to **prevent cross-site request forgery (CSRF) attacks**.‚úÖ Always ensure that API requests include a valid CSRF token. --- ### **2. Debugging JavaScript Fetch Requests** - **Issue:** The JavaScript code was making a fetch request, but the variable `csrfToken` was not properly defined, causing a `ReferenceError`. - **Fix:** Declaring `csrfToken` at the beginning of the script: ```jsx const csrfToken = document.querySelector(\'meta[name="csrf-token"]\').getAttribute(\'content\'); ``` - **Key Learning:**‚úÖ JavaScript variables must be defined before they are used.‚úÖ Use browser **developer tools (DevTools) Network tab** to inspect headers, payloads, and responses when debugging API requests. --- ### **3. Structuring Flask Routes for Task Management** - **Issue:** The `assign_contributor` route was failing due to incorrect request payload validation. - **Fix:** Improved the route‚Äôs error handling and logging: ```python @bp.route(\'//assign_contributor\', methods=[\'POST\']) def assign_contributor(task_id): try: data = request.get_json() contributor_id = int(data.get(\'contributor_id\', 0)) if not contributor_id: return jsonify({\'error\': \'Valid Contributor ID is required\'}), 400 ``` - **Key Learning:**‚úÖ Always validate incoming data in Flask routes to prevent type errors.‚úÖ Use `request.get_json()` properly and handle missing or incorrect data gracefully. --- ### **4. Utilizing Browser DevTools for Debugging** - **Issue:** The fetch request was failing with a `400 Bad Request`, and the browser console showed `ReferenceError: csrfToken is not defined`. - **Fix:** - Used **Network tab** to inspect the request payload and headers. - Used **Console tab** to catch JavaScript errors early. - **Key Learning:**‚úÖ DevTools is a **critical** tool for diagnosing network request issues.‚úÖ Always **check console errors** before assuming it\'s a backend issue. --- ### **5. Database Queries and ORM Debugging** - **Issue:** Tasks were not being updated correctly, possibly due to missing commit statements. - **Fix:** Ensured that:was executed properly. ```python task.contributor_id = contributor_id db.session.commit() ``` - **Key Learning:**‚úÖ Always call `db.session.commit()` after making changes in SQLAlchemy.‚úÖ Rollback transactions if an error occurs to avoid database inconsistency. --- ### **6. Handling Asynchronous JavaScript Logic** - **Issue:** The `assignContributor` function was executing before the page was fully loaded. - **Fix:** Wrapped it inside a function that ensures elements exist: ``` window.setupContributorAssignment = function () { const assignButton = $("#assign-contributor-btn"); if (!assignButton.length) { setTimeout(setupContributorAssignment, 500); // Retry in 500ms return; } ``` - **Key Learning:**‚úÖ Use `setTimeout` to **retry event binding** when elements are dynamically loaded.‚úÖ Always **check if elements exist before attaching event handlers**. --- ### **7. Best Practices for Flask Logging &amp; Error Handling** - **Issue:** Lack of clear logging when API calls failed. - **Fix:** Added better logging to track failures: ```python logger.info(f"Assigning contributor to task ID {task_id}") try: # Process request... except Exception as e: logger.error(f"Error assigning contributor: {e}") ``` - **Key Learning:**‚úÖ Log **every major step** in API processing to simplify debugging.‚úÖ Differentiate between `logger.info()`, `logger.warning()`, and `logger.error()` based on severity. --- ### **Final Takeaways** üöÄ **Understanding CSRF protection** and **properly structuring API requests** is crucial for secure web applications. üîç **Browser DevTools is invaluable** for diagnosing frontend issues, especially in JavaScript. üêç **Flask requires proper request validation, database transactions, and logging** to maintain stability. ‚ö° **Asynchronous JavaScript must handle dynamic elements carefully** to avoid runtime errors. This session reinforced best practices in **frontend-backend integration, debugging, and security**, making it a great learning experience! üöÄüî•</p>', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 0, 'created_at': '2025-02-10T09:11:12.273779', 'updated_at': '2025-03-04T00:41:24.838143'}, {'id': 373, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T22:10:59.863170', 'updated_at': '2025-02-28T23:10:59.893542'}, {'id': 335, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:44:45.530624', 'updated_at': '2025-02-28T14:44:45.542212'}, {'id': 357, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T15:08:15.356759', 'updated_at': '2025-02-28T16:08:15.371374'}, {'id': 343, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:12.267445', 'updated_at': '2025-02-28T15:18:12.278088'}, {'id': 337, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:07.626569', 'updated_at': '2025-02-28T15:18:07.632643'}, {'id': 361, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T17:11:52.257703', 'updated_at': '2025-02-28T18:11:52.262071'}, {'id': 355, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:55:16.105634', 'updated_at': '2025-02-28T15:55:16.131837'}, {'id': 348, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:26:17.632940', 'updated_at': '2025-02-28T15:26:17.642972'}, {'id': 332, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:35:43.663809', 'updated_at': '2025-02-28T14:35:43.673337'}, {'id': 333, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:36:20.683426', 'updated_at': '2025-02-28T14:36:20.691337'}, {'id': 365, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:30:48.877580', 'updated_at': '2025-02-28T19:30:48.887060'}, {'id': 340, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:11.061737', 'updated_at': '2025-02-28T15:18:11.075736'}, {'id': 367, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:39:25.734101', 'updated_at': '2025-02-28T19:39:25.739322'}, {'id': 366, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:38:39.027061', 'updated_at': '2025-02-28T19:38:39.048248'}, {'id': 358, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T15:46:04.956844', 'updated_at': '2025-02-28T16:46:04.966511'}, {'id': 244, 'name': 'Scroll to Updated Task', 'description': 'Automatically scroll to the updated task in the list if it‚Äôs out of view.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 0, 'created_at': '2025-02-05T12:56:52.818501', 'updated_at': '2025-02-28T00:11:57.987007'}, {'id': 353, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:52:04.500938', 'updated_at': '2025-02-28T15:52:04.512331'}, {'id': 362, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 284, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T18:14:50.969730', 'updated_at': '2025-03-04T17:30:45.507303'}, {'id': 356, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T15:08:08.061166', 'updated_at': '2025-02-28T16:08:08.066215'}, {'id': 329, 'name': 'Implement an API endpoint for submitting raw feature requests.', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-27T23:13:09.068616', 'updated_at': '2025-03-01T01:00:05.807248'}, {'id': 341, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:11.691354', 'updated_at': '2025-02-28T15:18:11.699365'}, {'id': 351, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:32:58.672570', 'updated_at': '2025-02-28T15:32:58.678298'}, {'id': 336, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:07:11.299563', 'updated_at': '2025-02-28T15:07:11.310976'}, {'id': 369, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T21:17:46.272998', 'updated_at': '2025-02-28T22:17:46.285417'}, {'id': 352, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:51:56.533768', 'updated_at': '2025-02-28T15:51:56.563880'}, {'id': 334, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:44:06.347090', 'updated_at': '2025-02-28T14:44:06.354371'}, {'id': 338, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:10.122843', 'updated_at': '2025-02-28T15:18:10.128941'}, {'id': 350, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:32:49.928206', 'updated_at': '2025-02-28T15:32:49.935531'}, {'id': 248, 'name': 'Implement Toggle Button', 'description': 'Add a toggle button to switch between hierarchical and flat views.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-05T12:58:14.518518', 'updated_at': '2025-02-28T00:11:48.483207'}, {'id': 354, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:54:59.543585', 'updated_at': '2025-02-28T15:54:59.553122'}, {'id': 347, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:24:45.846396', 'updated_at': '2025-02-28T15:24:45.860885'}, {'id': 345, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T14:18:53.170926', 'updated_at': '2025-02-28T15:18:53.179222'}, {'id': 331, 'name': 'new user story', 'description': None, 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 327, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-28T13:35:35.797059', 'updated_at': '2025-02-28T14:35:35.813440'}, {'id': 359, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-28T15:54:42.242569', 'updated_at': '2025-03-01T02:01:18.851236'}, {'id': 291, 'name': 'Add dropdowns in task list for changing: Assigned to, Estimate, Task Type and Status', 'description': '<p>Write Description task description...</p>', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 1, 'created_at': '2025-02-10T09:09:52.988609', 'updated_at': '2025-03-01T22:09:13.882787'}, {'id': 386, 'name': 'Test task', 'description': '<p>Testing tiptap editor lkjlk</p><hr><p>Write something</p><hr><p>Write something</p><hr><p></p>', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 284, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 9, 'status': 'In Progress', 'sort_order': 1, 'created_at': '2025-03-01T12:39:07.359868', 'updated_at': '2025-03-04T15:33:53.366530'}, {'id': 245, 'name': 'Apply Dynamic Sorting and Filtering', 'description': 'Ensure the task list dynamically updates its sorting and filtering after a status change.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'In Progress', 'sort_order': 1, 'created_at': '2025-02-05T12:56:52.818501', 'updated_at': '2025-02-28T00:12:01.504825'}, {'id': 327, 'name': 'üèÜ\xa0Epic: AI-Driven Feature Planning & Estimation', 'description': '<h2><strong>Description:&nbsp;</strong></h2><p>AI assists in refining raw feature requests into</p><p>structured plans, generating PRDs, Epics, User Stories, Acceptance Criteria, and Edge Cases. AI also provides intelligent estimations based on historical data and improves accuracy over time.</p><p></p><hr><h2>## Heading</h2><p></p>', 'task_type': 'Epic', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-27T23:02:31.274292', 'updated_at': '2025-03-04T15:27:42.964232'}, {'id': 64, 'name': 'Setup project credentials for Google API', 'description': 'Generate client ID and secret from Google API Console for your application.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-03-01T02:01:02.546625'}, {'id': 250, 'name': 'Preserve User Preferences', 'description': 'Persist the user‚Äôs chosen view state between sessions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 1, 'created_at': '2025-02-05T12:58:14.518518', 'updated_at': '2025-02-28T00:11:48.483213'}, {'id': 249, 'name': 'Define View States', 'description': 'Clearly label and define the view states for hierarchical and flat sorting.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 242, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-05T12:58:14.518518', 'updated_at': '2025-02-28T00:11:48.483213'}, {'id': 360, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-28T15:54:58.904932', 'updated_at': '2025-03-01T02:01:18.851237'}, {'id': 266, 'name': 'Highlight the nested tasks', 'description': '<p>lkjlkjlkjlkjlkjlkjWrite your task description...</p><p></p><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-03-03T17:32:52.809368'}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'description': '<p>Write your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p>', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-10T00:28:18.300231', 'updated_at': '2025-03-03T08:46:23.302934'}, {'id': 243, 'name': 'Highlight Updated Task', 'description': 'Highlight the updated task in the UI to provide immediate visual feedback.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 2, 'created_at': '2025-02-05T12:56:52.818501', 'updated_at': '2025-02-28T00:12:01.504819'}, {'id': 67, 'name': 'Test Google OAuth flow', 'description': 'Verify the OAuth flow using test accounts and check the token exchange.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-03-01T02:01:02.546635'}, {'id': 295, 'name': 'Issue: drag and drop errors', 'description': '1. Drag and drop without chaning parent task\n2. Drag and drop to new parent task\n', 'task_type': 'User Story', 'priority': 'Critical', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-10T09:22:54.461413', 'updated_at': '2025-02-28T00:11:55.301307'}, {'id': 290, 'name': 'issue: error when changing task type and', 'description': 'issue: error when changing task type and parent task before saving', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-10T09:00:03.417734', 'updated_at': '2025-03-01T02:01:18.851234'}, {'id': 257, 'name': 'Update Task API Integration', 'description': "- Integrate the /tasks/<task_id>/status endpoint to update the task's status dynamically. \n- Handle API response and errors.", 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 240, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-05T22:55:49.566819', 'updated_at': '2025-02-28T00:11:57.987011'}, {'id': 66, 'name': 'Setup OAuth scopes for Google API', 'description': 'Determine the required OAuth scopes for your application and add them to the configuration.\nedit', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 62, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-03-01T02:01:02.546634'}, {'id': 326, 'name': 'Add dropdown in task list for changing: Project', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 3, 'created_at': '2025-02-26T22:10:15.209008', 'updated_at': '2025-03-01T02:01:12.498734'}, {'id': 264, 'name': 'Close all / Open all childtasks', 'description': '<p>Added new description check other tab</p><p></p><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 7, 'status': 'Not Started', 'sort_order': 4, 'created_at': '2025-02-08T02:25:20.101418', 'updated_at': '2025-03-03T07:43:17.298288'}, {'id': 133, 'name': 'Step 4: Enhance Logging in models.py', 'description': 'Update the Task model to:\n\t1.\tLog parent_id changes during updates.\n\t2.\tValidate hierarchy changes with logging for circular dependencies.\n\nupdating the Task model in the following ways:\n\n1.\tLog Changes to parent_id:\n\t‚Ä¢\tLog changes to parent_id during updates, including old and new values.\n\t2.\tValidate Hierarchy with Logging:\n\t‚Ä¢\tLog detailed messages when validating hierarchy changes, especially for circular dependency checks.\n\nHere‚Äôs how the models.py can be updated:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy import func, cast, CheckConstraint\nfrom sqlalchemy.orm import validates\nfrom app.extensions.db import db\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\nclass Task(db.Model):\n    __tablename__ = "task"\n    \n    # Other columns...\n\n    parent_id = db.Column(\n        db.Integer, db.ForeignKey("task.id"), index=True, nullable=True\n    )\n\n    # Relationships\n    parent = db.relationship(\n        "Task", remote_side=[id], back_populates="children", lazy="select"\n    )\n    children = db.relationship(\n        "Task", back_populates="parent", lazy="select"\n    )\n\n    \n\n\n    @staticmethod\n    def _validate_no_circular_references(new_parent_id):\n        """\n        Validates that there are no circular references in the task hierarchy.\n\n        Args:\n            new_parent_id (int): The new parent ID to validate.\n\n        Raises:\n            ValueError: If a circular reference is detected.\n        """\n        visited = set()\n        current_parent_id = new_parent_id\n\n        logger.info(f"Validating circular references for parent ID: {new_parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error(\n                    f"Circular reference detected: Parent ID {current_parent_id} already visited."\n                )\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            # Fetch the next parent_id in the hierarchy\n            parent = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not parent:\n                break  # Exit if no parent is found\n            current_parent_id = parent.parent_id\n\n        logger.info("No circular reference detected.")\n\n    @validates(\'parent_id\', \'task_type\')\n    def validate_task_changes(self, key, value):\n        """\n        Validates changes to \'parent_id\' and \'task_type\'.\n        Ensures hierarchy validity and checks for circular references.\n        """\n        logger.debug(f"Validating {key} change for Task {self.id}: {value}")\n\n        if key == \'parent_id\':\n            # Log changes to parent_id\n            if self.id and value != self.parent_id:\n                logger.info(f"Task {self.id}: Updating \'parent_id\' from {self.parent_id} to {value}")\n\n            # Prevent a task from being its own parent\n            if value and value == self.id:\n                logger.error("A task cannot be its own parent.")\n                raise ValueError("A task cannot be its own parent.")\n\n            # Check for circular references\n            if value:\n                Task.check_circular_reference(self.id, value)\n\n        elif key == \'task_type\':\n            # Log changes to task_type\n            if self.id and value != self.task_type:\n                logger.info(f"Task {self.id}: Updating \'task_type\' from {self.task_type} to {value}")\n\n        # Check hierarchy rules without triggering further validation\n        if key in [\'parent_id\', \'task_type\']:\n            self._validate_hierarchy_change(key, value)\n\n        logger.info(f"Validation passed for {key}: {value}")\n        return value\n\n    def _validate_hierarchy_change(self, key, value):\n        """\n        Validates hierarchy rules for the task based on `task_type` and `parent_id`.\n        """\n        if key == \'parent_id\' and value:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=value).first()\n            if not parent_task:\n                raise ValueError("Parent task does not exist.")\n\n            logger.debug(f"Validating hierarchy: Task {self.id}, Parent Type: {parent_task.task_type}")\n            if self.task_type == "User Story" and parent_task.task_type != "Epic":\n                raise ValueError("User Stories must have an Epic as a parent.")\n            if self.task_type == "Subtask" and parent_task.task_type != "User Story":\n                raise ValueError("Subtasks must have a User Story as a parent.")\n\n        elif key == \'task_type\' and self.parent_id:\n            parent_task = Task.query.with_entities(Task.task_type).filter_by(id=self.parent_id).first()\n            if parent_task:\n                logger.debug(f"Validating hierarchy: Task Type: {value}, Parent Type: {parent_task.task_type}")\n                if value == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError("User Stories must have an Epic as a parent.")\n                if value == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError("Subtasks must have a User Story as a parent.")\n\n        logger.info(f"Hierarchy validation passed for Task {self.id if self.id else \'New Task\'}.")\n\n    @staticmethod\n    def check_circular_reference(task_id, parent_id):\n        """\n        Iteratively checks for circular references in the task hierarchy.\n        Prevents stack overflow on deep hierarchies.\n        """\n        visited = set()\n        current_parent_id = parent_id\n\n        logger.info(f"Checking circular reference for Task {task_id} with Parent ID: {parent_id}")\n\n        while current_parent_id:\n            if current_parent_id in visited:\n                logger.error("Circular reference detected!")\n                raise ValueError("Circular reference detected in task hierarchy.")\n            visited.add(current_parent_id)\n\n            if current_parent_id == task_id:\n                logger.error("A task cannot be its own ancestor.")\n                raise ValueError("A task cannot be its own ancestor.")\n\n            # Fetch the next parent_id in the hierarchy\n            task = Task.query.with_entities(Task.parent_id).filter_by(id=current_parent_id).first()\n            if not task:\n                break\n            current_parent_id = task.parent_id\n\n        logger.info("Circular reference check passed.")\n```\nKey Enhancements:\n\t1.\tlog_and_validate_parent_id_change:\n\t‚Ä¢\tLogs the old and new parent_id whenever it changes.\n\t‚Ä¢\tEnsures no circular references are introduced.\n\t2.\t_validate_no_circular_references:\n\t‚Ä¢\tValidates the parent_id field to prevent circular dependencies.\n\t‚Ä¢\tLogs progress and raises detailed errors if violations occur.\n\t3.\tlog_and_validate_task_type_change:\n\t‚Ä¢\tLogs changes to task_type with the old and new values.\n\t‚Ä¢\tRevalidates hierarchy rules when task_type changes.\n\t4.\tDetailed Logging for Circular Reference Validation:\n\t‚Ä¢\t_validate_no_circular_references and check_circular_reference methods log every step in detecting circular dependencies.\n\t5.\tHierarchy Validation Logging:\n\t‚Ä¢\tLogs checks for hierarchy rules in _validate_hierarchy_change.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 4, 'created_at': '2025-01-15T09:44:08.340041', 'updated_at': '2025-03-01T02:01:18.851231'}, {'id': 132, 'name': 'Step 1: Update tasks_table_interactions.js', 'description': '1. Precompute the task relationship map (taskParentMap) during initialization.\n2. Dynamically update the map when drag-and-drop occurs.\n3. Use the map for efficient parent-child relationship lookups instead of DOM traversal.\n\n```\nexport const TaskManager = {\n    init: function (csrfToken) {\n        this.csrfToken = csrfToken;\n        this.initTaskParentMap(); // Initialize the map\n        this.initDragAndDrop(); // Initialize drag-and-drop functionality\n    },\n\n    // Initialize a global map for task relationships\n    taskParentMap: new Map(),\n\n    // Build the taskParentMap from the DOM\n    initTaskParentMap: function () {\n        console.log("Initializing Task Parent Map...");\n        const rows = document.querySelectorAll("tr[data-task-id]");\n\n        rows.forEach((row) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = parseInt(row.dataset.parentId, 10) || null;\n            this.taskParentMap.set(taskId, parentId);\n        });\n\n        console.log("Task Parent Map initialized:", Array.from(this.taskParentMap.entries()));\n    },\n\n    // Update the map dynamically after drag-and-drop\n    updateTaskParentMap: function (taskId, parentId) {\n        console.log(`Updating Task Parent Map: Task ${taskId} -> Parent ${parentId}`);\n        this.taskParentMap.set(taskId, parentId);\n    },\n\n    initDragAndDrop: function () {\n        if (window.isDragAndDropInitialized) {\n            console.log("Drag-and-drop is already initialized.");\n            return;\n        }\n\n        console.log("Initializing drag-and-drop within TaskManager...");\n\n        const tableBody = document.querySelector("tbody");\n        if (!tableBody) {\n            console.warn("Task table body not found for drag-and-drop initialization");\n            return;\n        }\n\n        // Initialize Sortable.js for drag-and-drop functionality\n        Sortable.create(tableBody, {\n            handle: ".task-row", // Only draggable via `.task-row` elements\n            animation: 150, // Smooth animation\n            filter: ".task-open-link", // Prevent dragging on task links\n            preventOnFilter: true, // Prevent drag if filtered element is clicked\n            onEnd: async (event) => {\n                try {\n                    console.log("Drag-and-drop operation started...");\n                    const rows = Array.from(event.from.querySelectorAll(".task-row"));\n                    const reorderedTasks = [];\n\n                    rows.forEach((row, index) => {\n                        const taskId = parseInt(row.dataset.taskId, 10);\n                        let parentId = null;\n\n                        // Get the parent ID from the map or fallback to the dataset\n                        if (row.classList.contains("subtask-row")) {\n                            const parentRow = row.previousElementSibling;\n                            parentId = parentRow\n                                ? parseInt(parentRow.dataset.taskId, 10)\n                                : this.taskParentMap.get(taskId) || null;\n                        }\n\n                        // Update the taskParentMap dynamically\n                        this.updateTaskParentMap(taskId, parentId);\n\n                        reorderedTasks.push({\n                            id: taskId,\n                            sort_order: index + 1,\n                            parent_id: parentId,\n                        });\n                    });\n\n                    console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n                    console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n                    // Send the payload to the backend\n                    const response = await fetch("/tasks/reorder_subtasks", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                            "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n                        },\n                        body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n                    });\n\n                    if (!response.ok) {\n                        const errorData = await response.json();\n                        console.error("Error reordering tasks:", errorData);\n                        alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n                        return;\n                    }\n\n                    const data = await response.json();\n                    console.log("Task reordering successful:", data);\n\n                } catch (error) {\n                    console.error("Error during drag-and-drop operation:", error);\n                    alert("An unexpected error occurred while reordering tasks.");\n                }\n            },\n        });\n\n        window.isDragAndDropInitialized = true;\n        console.log("Drag-and-drop initialized successfully.");\n    },\n};\n```\n\nKey Updates:\n\t1.\tPrecomputed Map (taskParentMap):\n\t‚Ä¢\tThe initTaskParentMap function initializes the map by iterating over DOM elements and mapping each task‚Äôs ID to its parent ID.\n\t‚Ä¢\tThe updateTaskParentMap dynamically updates the map when tasks are reordered.\n\t2.\tEfficient Parent Lookup:\n\t‚Ä¢\tThe parentId is derived from the precomputed map rather than DOM traversal.\n\t3.\tBackend Payload:\n\t‚Ä¢\tA structured payload (reorderedTasks) is sent to the backend with id, sort_order, and parent_id.\n\t4.\tCSRF Token:\n\t‚Ä¢\tCSRF protection is ensured by passing the token to the request headers.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'sort_order': 5, 'created_at': '2025-01-15T09:44:08.338301', 'updated_at': '2025-03-01T02:01:18.851229'}, {'id': 328, 'name': 'üü¢ User Story 1: AI-Generated Feature Refinement\xa0(8 Story Points)', 'description': 'As a\xa0product manager,\xa0I want\xa0AI to refine raw feature requests into structured PRDs, Epics, and User Stories,\xa0So that\xa0I can quickly turn ideas into actionable tasks.\n\n', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 5, 'created_at': '2025-02-27T23:09:37.421629', 'updated_at': '2025-03-03T06:26:25.726905'}, {'id': 287, 'name': 'When moving a parent item to another project make sure the subtasks are moved as well', 'description': '', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 5, 'created_at': '2025-02-10T08:48:31.986870', 'updated_at': '2025-03-01T02:01:12.498732'}, {'id': 134, 'name': 'Step 2: Update the Backend in routes.py', 'description': 'Step 2 involves ensuring the updated relationships (parent-child hierarchy and sort order) are accurately submitted to the backend in the payload.\n\nPlan for step 2:\n\t1.\tVerify the payload structure:\n\t‚Ä¢\tEnsure that the payload includes all necessary fields (id, sort_order, parent_id) for each task.\n\t‚Ä¢\tValidate that the parent-child relationships in the precomputed map (taskParentMap) are reflected correctly in the payload.\n\t2.\tSubmit the payload to the backend:\n\t‚Ä¢\tEnhance the fetch request in the onEnd function of initDragAndDrop to log detailed submission data.\n\t‚Ä¢\tConfirm the payload integrity in the browser console before submission.\n\t3.\tUpdate backend logging:\n\t‚Ä¢\tAdd logging to /reorder_subtasks in routes.py to confirm receipt of the correct payload and process parent-child updates.\n\t‚Ä¢\tLog before and after database updates for better debugging.\n\n-----\nUpdated tasks_table_interactions.js\n\nReplace this section:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    let parentId = null;\n```\nWith:\n```\nrows.forEach((row, index) => {\n    const taskId = parseInt(row.dataset.taskId, 10);\n    const parentId = this.taskParentMap.get(taskId) || null;\n```\nThe this.taskParentMap provides a precomputed and dynamic mapping of taskId to parentId. By using this map, we avoid relying on DOM traversal logic (row.closest or row.previousElementSibling) during drag-and-drop operations, which can sometimes be unreliable or cumbersome.\n\nFull Revised onEnd section:\n```\nonEnd: async (event) => {\n    try {\n        console.log("Drag-and-drop operation started...");\n        const rows = Array.from(event.from.querySelectorAll(".task-row"));\n        const reorderedTasks = [];\n\n        rows.forEach((row, index) => {\n            const taskId = parseInt(row.dataset.taskId, 10);\n            const parentId = this.taskParentMap.get(taskId) || null;\n\n            // Update the taskParentMap dynamically\n            this.updateTaskParentMap(taskId, parentId);\n\n            reorderedTasks.push({\n                id: taskId,\n                sort_order: index + 1,\n                parent_id: parentId,\n            });\n        });\n\n        console.log("Updated Task Parent Map:", Array.from(this.taskParentMap.entries()));\n        console.log("Final Payload (Before Submission):", JSON.stringify(reorderedTasks));\n\n        // Send the payload to the backend\n        const response = await fetch("/tasks/reorder_subtasks", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "X-CSRFToken": this.csrfToken, // Ensure CSRF token is included\n            },\n            body: JSON.stringify({ ordered_tasks: reorderedTasks }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error("Error reordering tasks:", errorData);\n            alert(`Failed to reorder tasks: ${errorData.message || "Unknown error"}`);\n            return;\n        }\n\n        const data = await response.json();\n        console.log("Task reordering successful:", data);\n\n    } catch (error) {\n        console.error("Error during drag-and-drop operation:", error);\n        alert("An unexpected error occurred while reordering tasks.");\n    }\n}\n```\n---------------------------------\nEnsure updates include:\n\t‚Ä¢\tBetter Logging: Adding logs for key events such as database changes and validation results.\n\t‚Ä¢\tInput Validation: Ensure all required fields (id, sort_order, parent_id) exist in the payload.\n\t‚Ä¢\tPost-Commit Validation: Confirm database updates after the commit.\n\t‚Ä¢\tImproved Error Handling: Include specific error messages and consistent rollback mechanisms.\n\nBelow is the revised reorder_subtasks route with descriptive comments for each section:\n```\n@bp.route("/reorder_subtasks", methods=["POST"])\ndef reorder_subtasks():\n    """\n    Reorder subtasks globally or reassign them to a different parent.\n\n    Steps:\n    - Parse and validate input from the frontend.\n    - Update parent-child relationships and sort order in the database.\n    - Commit changes and return a success response.\n    - Handle errors gracefully and provide detailed logs for debugging.\n    """\n    logger.info("Entering reorder_subtasks route...")\n    logger.info(f"Received payload for reordering tasks: {request.json}")\n\n    try:\n        # Step 1: Parse input\n        parent_id = request.json.get("parent_id", None)  # Optional parent ID for the tasks being reordered\n        ordered_tasks = request.json.get("ordered_tasks", [])\n\n        logger.debug(f"Parsed parent_id: {parent_id}")\n        logger.debug(f"Parsed ordered_tasks: {ordered_tasks}")\n\n        # Step 2: Validate input\n        if not isinstance(ordered_tasks, list) or not all(\n            isinstance(task, dict) and "id" in task and "sort_order" in task and "parent_id" in task\n            for task in ordered_tasks\n        ):\n            logger.error(f"Invalid input received for ordered_tasks: {ordered_tasks}")\n            return jsonify({\n                "error": "Invalid input format for \'ordered_tasks\'. Each task must include \'id\', \'sort_order\', and \'parent_id\'."\n            }), 400\n\n        # Step 3: Validate parent task (if applicable)\n        if parent_id is not None:\n            parent_task = Task.query.get(parent_id)\n            if not parent_task:\n                logger.error(f"Parent task with ID {parent_id} not found.")\n                return jsonify({"error": f"Parent ID {parent_id} is invalid or does not exist."}), 400\n\n        logger.info("Input validation passed. Proceeding with task updates...")\n\n        # Step 4: Process updates for each subtask\n        updated_subtasks = []  # Keep track of updated subtasks for post-commit validation\n\n        for task_data in ordered_tasks:\n            subtask_id = task_data["id"]\n            sort_order = task_data["sort_order"]\n            new_parent_id = task_data["parent_id"]\n\n            # Fetch the subtask from the database\n            subtask = Task.query.get(subtask_id)\n            if not subtask:\n                logger.warning(f"Subtask ID {subtask_id} not found. Skipping...")\n                continue\n\n            # Log and update parent_id if it changes\n            if new_parent_id is not None and new_parent_id != subtask.parent_id:\n                logger.info(f"Reassigning subtask {subtask.id} to new parent {new_parent_id}")\n                subtask.parent_id = new_parent_id\n\n            # Update sort order\n            subtask.sort_order = sort_order\n            logger.debug(f"Updated subtask {subtask.id}: parent_id={subtask.parent_id}, sort_order={subtask.sort_order}")\n\n            # Add to the list of updated subtasks for validation\n            updated_subtasks.append(subtask)\n\n        # Step 5: Commit changes to the database\n        try:\n            db.session.commit()\n            logger.info(f"Subtasks reordered successfully: {[task[\'id\'] for task in ordered_tasks]}")\n        except Exception as e:\n            logger.error(f"Error committing changes to the database: {str(e)}")\n            db.session.rollback()\n            return jsonify({"error": "Failed to save changes to the database. Please try again."}), 500\n\n        # Step 6: Post-commit validation\n        for subtask in updated_subtasks:\n            logger.debug(f"Post-commit parent_id for task {subtask.id}: {subtask.parent_id}")\n            logger.debug(f"Post-commit sort_order for task {subtask.id}: {subtask.sort_order}")\n\n        # Step 7: Return success response\n        return jsonify({\n            "success": True,\n            "message": "Subtasks reordered successfully.",\n            "updated_subtasks": [subtask.id for subtask in updated_subtasks]\n        }), 200\n\n    except Exception as e:\n        # Step 8: Handle unexpected errors\n        logger.error(f"Error while reordering subtasks: {str(e)}", exc_info=True)\n        db.session.rollback()\n        return jsonify({"error": "An unexpected error occurred while reordering subtasks."}), 500\n```\nKey Changes and Descriptive Comments\n\t1.\tInput Parsing:\n\t‚Ä¢\tExtracts parent_id and ordered_tasks from the request payload.\n\t‚Ä¢\tLogs the parsed values for debugging.\n\t2.\tInput Validation:\n\t‚Ä¢\tEnsures ordered_tasks is a list of dictionaries with the required keys.\n\t‚Ä¢\tValidates parent_id if provided, ensuring the parent task exists in the database.\n\t3.\tUpdate Processing:\n\t‚Ä¢\tIterates through ordered_tasks, updating each task‚Äôs parent_id and sort_order.\n\t‚Ä¢\tLogs changes for each task.\n\t4.\tDatabase Commit:\n\t‚Ä¢\tCommits all updates in a single transaction.\n\t‚Ä¢\tLogs success or rolls back changes in case of an error.\n\t5.\tPost-Commit Validation:\n\t‚Ä¢\tVerifies that the parent_id and sort_order changes were successfully saved to the database.\n\t6.\tError Handling:\n\t‚Ä¢\tCaptures and logs exceptions during processing or committing.\n\t‚Ä¢\tProvides meaningful error messages to the frontend.\n\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Completed', 'sort_order': 6, 'created_at': '2025-01-15T09:46:29.348853', 'updated_at': '2025-03-01T02:01:18.851232'}, {'id': 286, 'name': 'Implement abels/tags', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 6, 'created_at': '2025-02-10T08:46:23.985620', 'updated_at': '2025-03-01T02:01:12.498730'}, {'id': 296, 'name': 'issue: contributor is lost after updating task', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 7, 'created_at': '2025-02-10T09:26:43.881947', 'updated_at': '2025-02-28T00:11:55.301308'}, {'id': 131, 'name': 'Step 5: Update utils.py', 'description': 'Ensure task filtering and querying handle parent-child relationships properly, and provide utility functions for debugging or data validation.\n\nChanges to Make:\n\t1.\tEnhance Task Filtering:\n\t‚Ä¢\tEnsure the filters handle parent-child relationships explicitly.\n\t‚Ä¢\tAdd options to include or exclude subtasks in queries.\n\t2.\tUtility Function for Debugging Parent-Child Relationships:\n\t‚Ä¢\tProvide a function to generate a map or list of parent-child relationships for debugging purposes.\n\t3.\tValidation Functions:\n\t‚Ä¢\tAdd a utility function to validate parent-child relationships and ensure no circular dependencies.\n\nUpdated utils.py Code:\n```\nimport logging\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import joinedload\nfrom app.extensions.db import db\nfrom app.tasks.models import Task\n\nlogger = logging.getLogger(__name__)  # Logger for this module\n\n\nclass TaskService:\n    @staticmethod\n    def filter_tasks(filters=None, include_subtasks=True, page=None, per_page=None):\n        """\n        Dynamically filters tasks with an option to include or exclude subtasks.\n\n        Args:\n            filters (dict): Filtering criteria.\n            include_subtasks (bool): Whether to include subtasks in the query.\n            page (int, optional): Page number for pagination.\n            per_page (int, optional): Items per page for pagination.\n\n        Returns:\n            Query or Pagination: A SQLAlchemy query object or paginated results.\n        """\n        query = Task.query.options(\n            db.joinedload(Task.project).joinedload(Project.contributors),\n            db.joinedload(Task.contributor),\n            db.joinedload(Task.children),\n        ).order_by(Task.sort_order)\n\n        if filters:\n            logger.debug(f"Applying filters: {filters}")\n\n            # Apply standard filters\n            if "is_archived" in filters:\n                query = query.filter(Task.is_archived == filters["is_archived"])\n            if "project_id" in filters:\n                query = query.filter(Task.project_id == filters["project_id"])\n            if "task_type" in filters:\n                if isinstance(filters["task_type"], list):\n                    query = query.filter(Task.task_type.in_(filters["task_type"]))\n                else:\n                    query = query.filter(Task.task_type == filters["task_type"])\n            if "completion_status" in filters:\n                completion_map = {"completed": True, "in_progress": False}\n                if filters["completion_status"] in completion_map:\n                    query = query.filter(Task.completed == completion_map[filters["completion_status"]])\n\n            # Optionally exclude subtasks\n            if not include_subtasks:\n                query = query.filter(Task.task_type != "Subtask")\n\n        logger.debug(f"Generated query: {query}")\n\n        # Pagination\n        if page and per_page:\n            return query.paginate(page=page, per_page=per_page, error_out=False)\n        return query\n\n    @staticmethod\n    def debug_parent_child_relationships(project_id=None):\n        """\n        Generates a debug map of parent-child relationships for all tasks.\n\n        Args:\n            project_id (int, optional): Restrict to tasks from a specific project.\n\n        Returns:\n            dict: A dictionary mapping parent IDs to their child task IDs.\n        """\n        query = Task.query\n        if project_id:\n            query = query.filter(Task.project_id == project_id)\n\n        tasks = query.options(\n            db.load_only(Task.id, Task.parent_id)\n        ).all()\n\n        relationship_map = {}\n        for task in tasks:\n            if task.parent_id not in relationship_map:\n                relationship_map[task.parent_id] = []\n            relationship_map[task.parent_id].append(task.id)\n\n        logger.debug(f"Parent-Child Relationship Map: {relationship_map}")\n        return relationship_map\n\n    @staticmethod\n    def validate_parent_child_relationships():\n        """\n        Validates all parent-child relationships in the database to ensure they conform to hierarchy rules.\n\n        Raises:\n            ValueError: If invalid relationships are detected.\n        """\n        tasks = Task.query.options(db.joinedload(Task.parent)).all()\n\n        for task in tasks:\n            if task.parent_id:\n                parent_task = task.parent\n                if not parent_task:\n                    raise ValueError(f"Task {task.id} has an invalid parent ID {task.parent_id}.")\n\n                # Validate hierarchy rules\n                if task.task_type == "User Story" and parent_task.task_type != "Epic":\n                    raise ValueError(f"User Story {task.id} must have an Epic as its parent.")\n                if task.task_type == "Subtask" and parent_task.task_type != "User Story":\n                    raise ValueError(f"Subtask {task.id} must have a User Story as its parent.")\n\n        logger.info("All parent-child relationships are valid.")\n\n    @staticmethod\n    def get_all_task_ids_with_parents():\n        """\n        Returns a flat list of tasks with their parent IDs for debugging.\n\n        Returns:\n            list: A list of tuples (task_id, parent_id).\n        """\n        tasks = Task.query.with_entities(Task.id, Task.parent_id).all()\n        logger.debug(f"Task IDs with Parent IDs: {tasks}")\n        return tasks\n```\n\n\nExplanation of Changes:\n\t1.\tfilter_tasks Enhancements:\n\t‚Ä¢\tAdded include_subtasks parameter to optionally exclude subtasks from the query.\n\t2.\tdebug_parent_child_relationships:\n\t‚Ä¢\tCreates a parent-child relationship map for debugging purposes.\n\t3.\tvalidate_parent_child_relationships:\n\t‚Ä¢\tIterates through all tasks to validate parent-child hierarchy and ensures no invalid relationships exist.\n\t4.\tget_all_task_ids_with_parents:\n\t‚Ä¢\tProvides a lightweight utility to fetch all tasks with their parent IDs for debugging.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 7, 'created_at': '2025-01-15T09:41:28.091824', 'updated_at': '2025-03-01T02:01:18.851223'}, {'id': 135, 'name': 'Step 3: Update list.html', 'description': 'Ensure that the task table properly renders data-task-id and data-parent-id attributes to enable JavaScript functionality.\n\nCurrent html already includes everything needed. No required changes.\n\nHere¬¥s the relevant section of list.html:\n\n```\n<tr id="task-{{ task.id }}"\n                class="task-row {% if task.task_type == \'Subtask\' %}subtask-row{% elif task.task_type == \'User Story\' %}user-story-row{% elif task.task_type == \'Epic\' %}epic-row{% endif %}"\n                style="background-color: \n                {% if task.task_type == \'Subtask\' %}\n                    rgba(200, 230, 255, 0.5); /* Light blue for Subtask */\n                {% elif task.task_type == \'User Story\' %}\n                    rgba(255, 255, 200, 0.5); /* Light yellow for User Story */\n                {% elif task.task_type == \'Epic\' %}\n                    rgba(255, 200, 200, 0.5); /* Light red for Epic */\n                {% else %}\n                    rgba(240, 240, 240, 1); /* Default light gray */\n                {% endif %};"\n                data-task-id="{{ task.id }}"\n                data-parent-id="{{ task.parent_id or \'\' }}"\n                data-level="{{ depth }}">\n                <td><input type="checkbox" name="batch_update" value="{{ task.id }}"></td>\n                <td>\n                    {% if tasks|selectattr("parent_id", "equalto", task.id)|list %}\n                    <button class="btn btn-sm toggle-details" data-task-id="{{ task.id }}" aria-label="Toggle details for task {{ task.name }}">\n                        <i class="bi bi-chevron-right"></i>\n                    </button>\n                    {% endif %}\n                </td>\n                <td class="fw-medium fs-6 \n                {% if task.task_type == \'Epic\' %}\n                    epic-cell\n                {% elif task.task_type == \'User Story\' %}\n                    user-story-cell\n                {% elif task.task_type == \'Subtask\' %}\n                    subtask-cell\n                {% endif %}" \n                style="padding-left: {{ depth|default(0) * 20 }}px; position: relative;">\n                <span class="bi fs-6\n                {% if task.task_type == \'Epic\' %}\n                    bi-circle-fill\n                {% elif task.task_type == \'User Story\' %}\n                    bi-circle-half\n                {% elif task.task_type == \'Subtask\' %}\n                    bi-circle\n                {% endif %}">\n                </span>\n                {{ task.name }}\n                <small class="text-muted fw-light">\n                    (Parent-ID: {{ task.parent_id or \'None\' }})\n                </small>\n                <!-- Open Link -->\n                <a href="#" class="task-open-link" data-task-id="{{ task.id }}">\n                    <i class="bi bi-arrows-angle-expand" style="font-size: 0.8rem; color: white;"></i>\n                    Open\n                </a>\n            </td>\n                <td class="fw-light fs-6">\n                    <small class>\n                    LAC-{{ task.id }}\n                    </small>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light text-bg-secondary">\n                        {{ task.project if task.project else "Unknown Project" }}\n                    </span>\n                </td>\n                <td class="fs-6" data-contributor-column>{{ task.assigned_to if task.assigned_to else "Unassigned" }}</td>\n                <td class="fs-6">{{ task.story_points }}</td>\n                <td class="fs-6">\n                    <span class="badge rounded-pill fw-light text-bg-light">\n                        {{ task.task_type }}\n                    </span>\n                </td>\n                <td>\n                    <span class="badge rounded-pill fw-light {% if task.completed %}text-bg-success{% else %}text-bg-warning{% endif %}">\n                        {{ "Completed" if task.completed else "In Progress" }}\n                    </span>\n                </td>\n                <td>\n                    <!-- Delete Icon -->\n                    <button class="btn btn-dark btn-sm delete-task-btn" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .2rem; --bs-btn-font-size: .75rem;" data-task-id="{{ task.id }}" aria-label="Deletes task {{ task.id }}">\n                        <i class="bi bi-trash"></i>\n                    </button>\n                </td>\n            </tr>\n            {% for child in tasks if child.parent_id == task.id %}\n                {{ render_task(child, tasks, depth + 1) }}\n            {% endfor %}\n            {% endmacro %}\n            \n            <!-- Render top-level tasks -->\n            {% for task in tasks if not task.parent_id %}\n                {{ render_task(task, tasks) }}\n            {% endfor %}\n```\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 130, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 8, 'created_at': '2025-01-15T09:46:29.349784', 'updated_at': '2025-03-01T02:01:18.851233'}, {'id': 289, 'name': 'issue: parent task is lost when updating task', 'description': '- Summary of the problem and solution\n    \n    **Problem: Parent Task Dropdown Was Not Being Set on Modal Open**\n    \n    The issue was that when opening a task modal, the **parent task dropdown** was not pre-populated with the correct parent task. However, interacting with the dropdown (e.g., clicking on it) would suddenly trigger it to be set correctly. This meant that the dropdown initialization was likely delayed or missing a step in the modal lifecycle.\n    \n    **Debugging Steps and Observations**\n    \n    1. **Task Details Were Fetched Correctly** ‚úÖ\n    - The task details, including parent_id, were being fetched from the API successfully.\n    1. **Parent Dropdown Initialization Issues** ‚ùå\n    - The initializeParentDropdown() function was being called, but the dropdown was sometimes **not fully ready** when we tried to set the selected parent task.\n    1. **Clicking the Dropdown Triggered the Parent to Be Set** ü§î\n    - This hinted that the dropdown was not fully ready when setParentDropdown(task.parent_id) was initially called.\n    \n    **Final Solution**\n    \n    1. **Ensuring Dropdown Readiness Before Setting the Parent Task**\n    - We added explicit **delays and checks** to confirm that the dropdown was fully initialized before attempting to set the parent task.\n    \n    Specifically, we:\n    \n    - **Waited for the dropdown to appear in the DOM** using observeParentDropdown().\n    - **Initialized the dropdown** with initializeParentDropdown().\n    - **Waited explicitly for the dropdown to be fully ready** using waitForParentDropdownReady().\n    - **Added a final delay of 200ms** before calling setParentDropdown() to ensure stability.\n    1. **Modifying openTaskModal to Handle Parent Dropdown Setup**\n    - We ensured that initializeParentDropdown() was called **after fetching task details** and before setting the parent task.\n    1. **Confirming the Fix** üéØ\n    - After these fixes, the parent dropdown was **immediately populated** upon opening the modal, without requiring user interaction.\n    \n    **Key Learnings**\n    \n    ‚úÖ **Dropdowns in modals need careful timing** ‚Äì They might not be ready when you expect them to be.\n    \n    ‚úÖ **Waiting for DOM updates is crucial** ‚Äì Observing the element ensures it actually exists before interacting with it.\n    \n    ‚úÖ **Explicit delays can prevent race conditions** ‚Äì A small delay can sometimes resolve timing issues in UI interactions.\n    \n    **Final Result**\n    \n    ‚úÖ The modal now **correctly loads and pre-selects the parent task** without extra clicks! üéâüöÄ', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 8, 'created_at': '2025-02-10T08:56:25.273984', 'updated_at': '2025-02-28T00:11:55.301302'}, {'id': 269, 'name': 'Fix styling for sweetalert', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'sort_order': 10, 'created_at': '2025-02-08T15:54:56.717846', 'updated_at': '2025-02-28T00:11:55.301281'}, {'id': 293, 'name': 'Click on title should copy the task title and id to clipboard', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 11, 'created_at': '2025-02-10T09:16:33.508209', 'updated_at': '2025-02-28T00:11:55.301304'}, {'id': 247, 'name': 'Add Temporary Badge', 'description': 'Add a temporary badge or visual indicator to the updated task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 241, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 11, 'created_at': '2025-02-05T12:57:37.151479', 'updated_at': '2025-02-27T08:43:14.054398'}, {'id': 294, 'name': 'Issue: task table filters not working', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 12, 'created_at': '2025-02-10T09:19:21.022598', 'updated_at': '2025-02-28T00:11:55.301306'}, {'id': 240, 'name': 'Update Task Workflow', 'description': 'As a user, I want to update the status of a task so that it reflects the changes in the UI dynamically without reloading the page.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'In Progress', 'sort_order': 14, 'created_at': '2025-02-05T12:54:55.061344', 'updated_at': '2025-02-28T00:11:55.301273'}, {'id': 242, 'name': 'User Control Over Views', 'description': 'As a user, I want to toggle between hierarchical and flat views so that I can switch sorting preferences based on my workflow.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 15, 'created_at': '2025-02-05T12:55:50.108011', 'updated_at': '2025-02-28T00:11:55.301275'}, {'id': 130, 'name': 'Implement the Map of Task Relationships solution for drag-and-drop', 'description': 'Fully implement the Map of Task Relationships (Precomputed) solution for the drag-and-drop functionality.', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 16, 'created_at': '2025-01-15T09:41:28.093022', 'updated_at': '2025-02-28T00:11:55.301271'}, {'id': 246, 'name': 'Toast Notification', 'description': 'Display a toast notification confirming the task status update.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 241, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 16, 'created_at': '2025-02-05T12:57:37.151479', 'updated_at': '2025-02-27T08:43:14.054398'}, {'id': 283, 'name': 'Fix issue with updating task title', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 18, 'created_at': '2025-02-10T08:41:58.769700', 'updated_at': '2025-02-28T00:11:55.301295'}, {'id': 278, 'name': 'Implement search feature for tasks list', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 5, 'project': 'Project Delta', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 4, 'status': 'Not Started', 'sort_order': 19, 'created_at': '2025-02-10T07:36:03.369833', 'updated_at': '2025-02-28T00:11:55.301289'}, {'id': 62, 'name': 'Add OAuth integration for Google Login', 'description': 'Implement Google Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 20, 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-02-28T00:11:55.301255'}, {'id': 279, 'name': 'github integration', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 21, 'created_at': '2025-02-10T07:36:38.238202', 'updated_at': '2025-02-28T00:11:55.301290'}, {'id': 65, 'name': 'Implement backend endpoints for Google OAuth', 'description': 'Develop endpoints to handle Google OAuth flow (auth, token exchange).', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 22, 'created_at': '2025-01-07T11:58:39.269319', 'updated_at': '2025-02-28T00:11:55.301260'}, {'id': 241, 'name': 'Provide User Feedback', 'description': 'As a user, I want to receive immediate feedback after updating a task‚Äôs status so that I know the update was successful.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 24, 'created_at': '2025-02-05T12:55:19.826398', 'updated_at': '2025-02-28T00:11:55.301274'}, {'id': 41, 'name': 'Implement Searchable Dropdown', 'description': 'As a user, I want a searchable dropdown for parent task assignment.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Completed', 'sort_order': 25, 'created_at': '2025-01-03T09:14:28.285904', 'updated_at': '2025-02-28T00:11:55.301181'}, {'id': 85, 'name': 'Assign multiple contributors to a task', 'description': 'As an admin, I want to assign multiple contributors to a task so that it can reflect all team members responsible.', 'task_type': 'User Story', 'priority': 'High', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 27, 'created_at': '2025-01-07T19:32:39.466022', 'updated_at': '2025-02-28T00:11:55.301266'}, {'id': 136, 'name': 'Page scroll should stay in position when reloading', 'description': '', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 28, 'created_at': '2025-01-16T18:21:50.187247', 'updated_at': '2025-02-28T00:11:55.301272'}, {'id': 267, 'name': 'Improvements to toggles and nested tasks', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 29, 'created_at': '2025-02-08T02:29:12.464594', 'updated_at': '2025-03-03T14:17:12.065528'}, {'id': 325, 'name': 'Improve task list responsive grid', 'description': '## üîç **How Leading Task Management Apps Handle Column Widths**\n\n### 1Ô∏è‚É£ **JIRA (Atlassian)**\n\nüîπ **Dynamic Resizing** (CSS Grid + JavaScript)\n\n- Uses `display: grid` for task tables.\n- Columns are resizable with a drag handle.\n- `grid-template-columns: auto 1fr auto;` for flexibility.\n- **Approach**: Fixed + flexible widths with an adaptive UI.\n\n---\n\n### 2Ô∏è‚É£ **Monday.com**\n\nüîπ **Flexbox-Based Table**\n\n- Uses `display: flex;` instead of `grid` for more control.\n- Columns use **`flex-grow`** to expand dynamically.\n- Drag handles allow users to resize columns.\n- **Approach**: **JavaScript-based column width management** to allow user customization.\n\n---\n\n### 3Ô∏è‚É£ **Asana**\n\nüîπ **Hybrid (Flexbox + JavaScript)**\n\n- Uses **CSS flexbox** for flexible layout.\n- Users can resize columns by dragging.\n- `min-width: 120px;` ensures usability.\n- **Approach**: A combination of `flex` and `min-width` to ensure usability on smaller screens.\n\n---\n\n### 4Ô∏è‚É£ **Linear**\n\nüîπ **CSS Grid with `fr` Units**\n\n- Uses a modern **CSS Grid** approach:\n    \n    ```css\n    grid-template-columns: auto 1fr auto;\n    ```\n    \n- Dynamically adjusts the width of columns **based on content**.\n- Uses `grid-template-columns: minmax(150px, 2fr) 3fr 1fr;` for controlled column expansion.\n- **Approach**: Minimalist UI with focus on speed and responsiveness.\n\n---\n\n### 5Ô∏è‚É£ **Shortcut**\n\nüîπ **Similar to Jira (Resizable Columns)**\n\n- Uses **CSS Grid + JavaScript-based resizing**.\n- Stores user preferences (column order, width) in **local storage**.\n- **Approach**: Persistent column sizes per user, allowing for a **customizable layout**.\n\n---\n\n## ‚úÖ **What‚Äôs the Best Approach for Our App?**\n\n### üéØ **Option 1: CSS Grid (Recommended)**\n\n```css\ngrid-template-columns: 1fr 2fr 1fr;\n```\n\nPros:\n‚úî **Modern**\n\n‚úî **Auto-resizes based on content**\n\n‚úî **Easy to manage**\n\n---\n\n### üéØ **Option 2: Flexbox (For More Control)**\n\n```css\ndisplay: flex;\nflex-grow: 1;\nmin-width: 120px;\n```\n\nPros:\n‚úî **More control over column shrinking/growing**\n\n‚úî **Easier to make resizable**\n\n‚úî **Ideal for draggable column resizing**\n\n---\n\n### üéØ **Option 3: JavaScript-Powered Resizing (Advanced)**\n\n- Uses `grid-template-columns` but **lets users drag & resize**.\n- Stores **column widths in local storage**.\n- Uses `ResizeObserver` to listen for changes.\n\nPros:\n‚úî **User-friendly (lets users resize columns)**\n\n‚úî **Persistent user preferences**\n\n‚úî **Great for complex task management apps**\n\n---\n\n## üî• **What‚Äôs the Best Choice for Us?**\n\n- If you want **simple auto-adjusting columns**, go with **CSS Grid** (`fr` units).\n- If you need **manual resizing**, use **Flexbox + JavaScript**.\n- If you want **fully customizable layouts**, use **JavaScript-powered resizing** like Jira or Monday.\n\nWould you like me to **implement resizable columns** with JavaScript? üöÄ', 'task_type': 'Epic', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'sort_order': 30, 'created_at': '2025-02-25T00:02:51.810711', 'updated_at': '2025-03-03T14:17:02.484796'}, {'id': 274, 'name': 'Add support for goals, initiatives, okr¬¥s', 'description': 'Make the naming of the goals customizable\n\nInitiatives are larger, strategic product efforts that set the direction of your company. They are comprised of all projects that align with the goals of the initiative and allow you to monitor their progress at scale.\n\n√∂lkasd√∂lkk', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P1', 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 31, 'created_at': '2025-02-10T00:46:27.204912', 'updated_at': '2025-02-28T00:11:55.301284'}, {'id': 63, 'name': 'Add OAuth integration for GitHub Login', 'description': 'Implement GitHub Login for user registration and authentication using OAuth 2.0.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 82, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'sort_order': 32, 'created_at': '2025-01-07T11:39:12.249531', 'updated_at': '2025-02-27T08:43:14.054354'}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 32, 'created_at': '2025-02-10T08:41:17.786154', 'updated_at': '2025-03-03T14:16:41.747486'}, {'id': 276, 'name': 'Add support for priority', 'description': 'ffasdlkjlkj\nljkkjlkj', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': 'P0', 'is_archived': False, 'completed': True, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Completed', 'sort_order': 33, 'created_at': '2025-02-10T00:49:26.189497', 'updated_at': '2025-02-28T00:11:55.301286'}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'description': 'Divided into three basic system statuses\n- Not started\n-- Custom status\n-- Custom status\n-- Custom status\n- Planning (new)\n-- Custom status\n-- Custom status\n-- Custom status\n- In Progress\n-- Custom status\n-- Custom status\n-- Custom status\n- Completed\n-- Custom status\n-- Custom status\n\n2. How can we track a task through different stages and save the sequence of events or stages the task has gone through?\nI¬¥m thinking it could be good for mapping out processes, identifying bottlenecks and provide valuable insights while improving and streamlining workflows.\n- Stages\n- Contacts taken\n- Respons time \n- Time to action after responses\n- Dependencies\n\nNeed to be able to record every action related to this action.\nCommunication integrations\n- Slack\n- Email\n- Text messages\n- Phonecalls\n- Calendar events, meetings\n- Zoom, Google meet, Teams etc..\n\n\n2. Set custom statuses per project (can use tags (labels) for this)\nExample:\nJob search\n- Interested\n- Applied\n- Respons\n- Interview 1\n- Interview 2\n- Interview 3\n- Declined\n\n\n\n\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 34, 'created_at': '2025-02-10T07:16:03.352588', 'updated_at': '2025-03-03T14:16:31.129766'}, {'id': 68, 'name': 'Register application in GitHub Developer Console', 'description': 'Create a new application in GitHub Developer Console and get the client ID and secret.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 35, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-02-27T08:43:14.054358'}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'description': 'When trying to move subtask to another project, make sure a warning is displayed "If you move this task the relationship to the parent task will be lost"\nOR\n\nIs it possible, and is it desireable to keep parent child relationships across projects?\nSo that a parent can be in one project but the child tasks can be in different projects?\n\nLets say \nParent epic is \n"Internationalisation"\nChild user stories are\n- Timezones\n- Language\n- Currency\n- Day, Date and time formats\n\nAnd the user stories are in different projects.\n\nCheck what best practice are for these cases. Research other systems.\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 35, 'created_at': '2025-02-10T08:54:36.297869', 'updated_at': '2025-03-03T14:16:24.364985'}, {'id': 284, 'name': 'Add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 36, 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-28T00:11:55.301296'}, {'id': 281, 'name': 'Add a page for roadmap', 'description': 'Add some sort of high level plan that aims to keep PM/PO¬¥s on track and not get lost into the details of an overwhelming large backlog', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 37, 'created_at': '2025-02-10T08:27:01.218606', 'updated_at': '2025-02-28T00:11:55.301293'}, {'id': 273, 'name': 'Disable parent task selector in epics', 'description': 'and add text, Epic can¬¥t have parent tasks', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 38, 'created_at': '2025-02-10T00:45:20.740910', 'updated_at': '2025-02-28T00:11:55.301283'}, {'id': 69, 'name': 'Handle callback from GitHub', 'description': 'Implement the callback endpoint to process the authorization code from GitHub.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 63, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 38, 'created_at': '2025-01-07T12:03:52.062783', 'updated_at': '2025-02-26T21:53:17.041822'}, {'id': 280, 'name': 'logging (task and project history)', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 39, 'created_at': '2025-02-10T07:37:44.435112', 'updated_at': '2025-02-28T00:11:55.301291'}, {'id': 275, 'name': 'Add support for sprints/cycles', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 40, 'created_at': '2025-02-10T00:48:52.680022', 'updated_at': '2025-02-28T00:11:55.301285'}, {'id': 100, 'name': '1.1 User Registration', 'description': '<blockquote><p>As a user, I want to register with a username, email, and password so that I can create an account and access the system. </p></blockquote><p>**Acceptance Criteria:** </p><ul><li><p>‚Ä¢ User can input valid username, email, and password.</p></li><li><p>‚Ä¢ Username and email must be unique. </p></li><li><p>‚Ä¢ Errors are displayed for invalid inputs or duplicate accounts. </p></li><li><p>‚Ä¢ Passwords must meet complexity requirements and be securely stored. </p></li><li><p>‚Ä¢ Successful registration redirects users to a login page.</p></li></ul><hr><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 41, 'created_at': '2025-01-07T19:59:09.044667', 'updated_at': '2025-03-03T14:20:10.801828'}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'description': 'kkkkkkkjjjjj\nlkajdl√∂kjsdf√∂lkjsdf√∂lkjdf', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 41, 'created_at': '2025-02-10T08:45:47.027805', 'updated_at': '2025-02-28T00:11:55.301297'}, {'id': 107, 'name': '1.1.1 Database Changes for User Registration', 'description': '<p>1. Add a users table with fields for username, email, password_hash, created_at, and updated_at.</p><p></p><hr><p>Adding text</p><pre><code>CREATE TABLE public.users ( id SERIAL PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL, created_at TIMESTAMP DEFAULT NOW(), updated_at TIMESTAMP DEFAULT NOW() );</code></pre><p></p>', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 42, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-03-03T20:49:45.725711'}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'description': 'Introduce Google and GitHub login functionality for user registration and authentication.\n\nImplementing user registration with Google Login or GitHub Login involves integrating OAuth 2.0, which both services support. The complexity depends on your app‚Äôs existing setup, frameworks, and experience with third-party authentication. Below is a breakdown:\n\nKey Steps for Implementing Google or GitHub Login\n\t1.\tSet Up OAuth Credentials:\n\t‚Ä¢\tRegister your application in the Google Cloud Console or GitHub Developer Settings.\n\t‚Ä¢\tObtain the client ID and client secret.\n\t2.\tInstall Required Libraries:\n\t‚Ä¢\tUse a library for OAuth (e.g., flask-oauthlib, python-social-auth, or authlib).\n\t‚Ä¢\tPopular frameworks like Flask and Django already have robust integrations for OAuth providers.\n\t3.\tBackend Configuration:\n\t‚Ä¢\tImplement an endpoint to handle the OAuth flow (/auth/login/google or /auth/login/github).\n\t‚Ä¢\tConfigure your app to send users to Google or GitHub‚Äôs authentication page.\n\t‚Ä¢\tHandle the OAuth callback to exchange the authorization code for an access token.\n\t‚Ä¢\tVerify the token and fetch user information (e.g., email, name).\n\t4.\tLink OAuth to User Registration:\n\t‚Ä¢\tOn successful login, create or retrieve a user in your database.\n\t‚Ä¢\tStore the user‚Äôs details like email, OAuth provider ID, and access token.\n\t5.\tFrontend Integration (if applicable):\n\t‚Ä¢\tAdd ‚ÄúLogin with Google‚Äù or ‚ÄúLogin with GitHub‚Äù buttons.\n\t‚Ä¢\tRedirect to your backend‚Äôs OAuth endpoint when clicked.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 42, 'created_at': '2025-01-07T12:15:54.291625', 'updated_at': '2025-02-28T00:11:55.301262'}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'description': 'PRD: Provide functionality for user registration, login, and logout. Securely handle user credentials using hashed passwords. Enable session-based or token-based authentication for logged-in users. Deliver an intuitive and secure UI/UX for authentication flows.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 18, 'status': 'Not Started', 'sort_order': 43, 'created_at': '2025-01-07T19:53:50.085064', 'updated_at': '2025-02-28T00:11:55.301267'}, {'id': 61, 'name': 'Parent task assignment', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'In Progress', 'sort_order': 44, 'created_at': '2025-01-04T22:31:45.205815', 'updated_at': '2025-02-28T00:11:55.301224'}, {'id': 108, 'name': '1.1.2 Backend API for Registration', 'description': '‚Ä¢\tCreate an endpoint POST /api/register:\n‚Ä¢\tValidate input fields.\n‚Ä¢\tHash the password using bcrypt or argon2.\n‚Ä¢\tInsert the user into the users table.\n‚Ä¢\tReturn success/failure responses.\ndddhfff\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 44, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-27T08:43:14.054375'}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'description': 'PRD: Enhance task contributor management to include a single owner and multiple roles customizable by admins. Roles can include QA, Code Reviewer, UI/UX, etc. The feature will allow assigning multiple contributors to tasks while maintaining clear ownership and responsibility assignments.\n\n\t‚Ä¢\tImplement and test each subtask sequentially, starting with the database schema updates and backend APIs.\n\t‚Ä¢\tCollaborate with UI developers to ensure seamless integration of new functionalities in the frontend.\n\t‚Ä¢\tPerform end-to-end testing to validate that the new features align with user requirements and acceptance criteria.\n', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 45, 'created_at': '2025-01-07T19:30:21.149869', 'updated_at': '2025-02-28T00:11:55.301265'}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'description': 'PRD: Define roles and permissions to restrict access. Roles include admin, developer, and viewer. Implement middleware for access control checks.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 46, 'created_at': '2025-01-07T19:54:09.204981', 'updated_at': '2025-02-28T00:11:55.301268'}, {'id': 83, 'name': 'Notifications', 'description': 'Implement sending notifications to selected people triggered by events.\nCustomizing messages:\nPossibility to adjust how detailed the information should be and what level of technical difficulty the language can contain. Integration to LMS that tailors messages to different target groups and then sends the appropriate version to the appropriate target group.\n\n\n\n- Ready for Release\n   - Send documentation of new feature to support and customer success team\n      - Add technical documentation as file in documentation library.\n      - User documentation\n      - Create and send feature description to Sales & Marketing dep.\n      - Create and send feature description and estimation of added value for company and customer to Investors.\n   - Create and publish release notes online and in inline message system.\n\nRead more: https://www.notion.so/lacunamedia/Create-and-send-messages-triggered-by-events-174979257fc08022b18bc76d3b28a4b3?pvs=4', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 47, 'created_at': '2025-01-07T16:10:54.030609', 'updated_at': '2025-02-28T00:11:55.301263'}, {'id': 112, 'name': '1.2.2 Frontend Login Page', 'description': 'Develop a frontend form for user login with email and password inputs.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 47, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054377'}, {'id': 99, 'name': 'Enhance User Account Management', 'description': 'PRD: Provide additional account management features for users and admins. Includes profile management, password reset functionality, and audit logging.', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'sort_order': 48, 'created_at': '2025-01-07T19:54:20.692949', 'updated_at': '2025-02-28T00:11:55.301269'}, {'id': 109, 'name': '1.1.3 Create Frontend Registration Page', 'description': 'Develop a frontend form to collect user registration details.\n‚Ä¢\tAdd a form for username, email, and password inputs.\n‚Ä¢\tUse client-side validation (e.g., email format).\n‚Ä¢\tSend a POST request to /api/register.\n\n', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 49, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-27T08:43:14.054375'}, {'id': 110, 'name': '1.1.4 Unit Tests for Registration', 'description': 'Write unit tests for:\n\n‚Ä¢\tValid registration.\n‚Ä¢\tDuplicate username/email scenarios.\n‚Ä¢\tInvalid input handling.\nff', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 100, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 50, 'created_at': '2025-01-07T20:40:16.086402', 'updated_at': '2025-02-27T08:43:14.054376'}, {'id': 101, 'name': '1.2 User Login', 'description': 'As a user, I want to log in with my email and password so that I can access my account.\n\n**Acceptance Criteria:**\n\n‚Ä¢\tUsers can log in with a valid email and password.\n‚Ä¢\tErrors are displayed for invalid credentials.\n‚Ä¢\tSuccessful login stores a session or JWT token.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 52, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054370'}, {'id': 111, 'name': '1.2.1 Backend API for Login', 'description': 'Create POST /api/login endpoint to handle user login.\njjsjj', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 54, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054377'}, {'id': 113, 'name': '1.2.3 Session Management', 'description': 'Implement secure session handling using cookies or JWT.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 55, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054378'}, {'id': 114, 'name': '1.2.4 Unit Tests for Login', 'description': 'Write tests for successful and failed login attempts.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 101, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 56, 'created_at': '2025-01-07T20:40:32.986548', 'updated_at': '2025-02-27T08:43:14.054379'}, {'id': 106, 'name': 'Password Reset', 'description': 'As a user, I want to reset my password securely using email.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'sort_order': 57, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054373'}, {'id': 128, 'name': 'Frontend Password Reset Page', 'description': 'Develop a page for users to enter a new password using a valid token.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 5, 'status': 'Not Started', 'sort_order': 58, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054388'}, {'id': 129, 'name': 'Testing Password Reset', 'description': 'Write tests for email delivery, token validation, and password updates.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 106, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 59, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054389'}, {'id': 102, 'name': 'Logout', 'description': 'As a user, I want to log out so that I can end my session securely.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 97, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 60, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054371'}, {'id': 117, 'name': 'Tests for Logout', 'description': 'Verify session invalidation and redirection to the login page.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 61, 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-27T08:43:14.054381'}, {'id': 381, 'name': 'Delete this', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 344, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 61, 'created_at': '2025-02-28T23:48:05.992788', 'updated_at': '2025-03-04T17:17:46.383393'}, {'id': 116, 'name': 'Frontend Logout Button', 'description': 'Add a logout button to the UI and handle session clearing.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 62, 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-27T08:43:14.054380'}, {'id': 115, 'name': 'Backend API for Logout', 'description': 'Create POST /api/logout endpoint to invalidate user sessions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 102, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 63, 'created_at': '2025-01-07T20:40:45.815252', 'updated_at': '2025-02-27T08:43:14.054379'}, {'id': 45, 'name': 'Display Default Value in Dropdown', 'description': 'Ensure the dropdown reflects the current parent task as selected or displays "None" if no parent task is assigned.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 3, 'status': 'Not Started', 'sort_order': 64, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054343'}, {'id': 50, 'name': 'Retrieve Current Parent Task', 'description': 'Retrieve the current parent task‚Äôs ID and name from the backend.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': True, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Completed', 'sort_order': 65, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054346'}, {'id': 51, 'name': 'Set Default Value', 'description': 'Set the default value in the dropdown based on the retrieved data.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 45, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 1, 'status': 'Not Started', 'sort_order': 66, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054347'}, {'id': 46, 'name': 'Search for Parent Tasks', 'description': 'Allow users to search for tasks dynamically in the dropdown by typing.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 8, 'status': 'Not Started', 'sort_order': 67, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054344'}, {'id': 54, 'name': 'Test Partial Matching', 'description': 'Ensure the search results update in real-time as the user types.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 46, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 68, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054349'}, {'id': 47, 'name': 'Handle Large Datasets Efficiently', 'description': 'Ensure the dropdown can handle large datasets (e.g., thousands of tasks) without noticeable lag.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 13, 'status': 'Not Started', 'sort_order': 69, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054344'}, {'id': 56, 'name': 'Paginate API Responses', 'description': 'Implement server-side filtering and pagination for large datasets.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 70, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054350'}, {'id': 55, 'name': 'Enable Lazy Loading', 'description': 'Enable lazy loading or virtualization in Virtual Select.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 71, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054350'}, {'id': 48, 'name': 'Select and Deselect Parent Tasks', 'description': 'Allow users to select a parent task or deselect by choosing "None."', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 72, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054345'}, {'id': 57, 'name': 'Ensure None Option Availability', 'description': 'Add ‚ÄúNone‚Äù as a selectable option and ensure it stays at the top of the list.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'Not Started', 'sort_order': 73, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054351'}, {'id': 58, 'name': 'Handle Selection Events', 'description': 'Implement event listeners to update the form‚Äôs state when the selection changes.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 48, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 74, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054352'}, {'id': 49, 'name': 'Integrate Dropdown with Task Form', 'description': 'Ensure the dropdown integrates seamlessly with the task form for data submission.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 75, 'created_at': '2025-01-04T01:47:25.942574', 'updated_at': '2025-02-27T08:43:14.054346'}, {'id': 376, 'name': 'Subtask test', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 346, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 76, 'created_at': '2025-02-28T23:01:44.247988', 'updated_at': '2025-03-04T15:44:10.651229'}, {'id': 59, 'name': 'Bind Dropdown to Form Field', 'description': 'Bind the dropdown to the form‚Äôs parent task field.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 2, 'status': 'In Progress', 'sort_order': 76, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054352'}, {'id': 383, 'name': 'new user story', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 344, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 76, 'created_at': '2025-03-01T01:00:27.095399', 'updated_at': '2025-03-04T17:47:38.815069'}, {'id': 60, 'name': 'Test Form Submission', 'description': 'Test form submission to ensure the selected parent task is passed correctly.\nddd', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 77, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054353'}, {'id': 52, 'name': 'Add Search Box to Dropdown', 'description': 'Configure the search box in Virtual Select to appear at the top of the dropdown.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 78, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054348'}, {'id': 53, 'name': 'Implement AJAX Search', 'description': 'Implement AJAX-based search to fetch tasks dynamically from the backend.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 79, 'created_at': '2025-01-04T02:02:21.237339', 'updated_at': '2025-02-27T08:43:14.054348'}, {'id': 42, 'name': 'Choose Dropdown Library', 'description': 'Research and decide on the dropdown library to use.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Completed', 'sort_order': 80, 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-27T08:43:14.054341'}, {'id': 378, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 41, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 80, 'created_at': '2025-02-28T23:17:32.404713', 'updated_at': '2025-03-01T00:17:32.410920'}, {'id': 43, 'name': 'Integrate Dropdown Library', 'description': 'Integrate the chosen dropdown library into the project.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 49, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Completed', 'sort_order': 81, 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-27T08:43:14.054342'}, {'id': 377, 'name': 'Taskade', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 342, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 82, 'created_at': '2025-02-28T23:02:24.453543', 'updated_at': '2025-03-04T17:12:31.851611'}, {'id': 90, 'name': 'Update frontend to display and manage multiple contributors', 'description': 'Allow users to view, add, or remove multiple contributors via the UI.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 82, 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-27T08:43:14.054364'}, {'id': 88, 'name': 'Update database schema for multiple contributors', 'description': 'Modify the task table to support many-to-many relationships for contributors.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 83, 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-27T08:43:14.054362'}, {'id': 89, 'name': 'Develop backend API for adding contributors to a task', 'description': 'Create endpoints to add, update, and remove contributors for a task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 84, 'created_at': '2025-01-07T19:39:02.014761', 'updated_at': '2025-02-27T08:43:14.054363'}, {'id': 86, 'name': 'Allow designation of task owner', 'description': 'As an admin, I want to designate a single owner for each task to clearly indicate responsibility.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 85, 'created_at': '2025-01-07T19:33:29.330562', 'updated_at': '2025-02-27T08:43:14.054361'}, {'id': 375, 'name': 'new subtask', 'description': None, 'task_type': 'Subtask', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 85, 'project_id': 19, 'project': 'Miscellaneous', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 85, 'created_at': '2025-02-28T22:48:35.594251', 'updated_at': '2025-02-28T23:48:35.676455'}, {'id': 93, 'name': 'Update frontend to manage task ownership', 'description': 'Allow users to assign or update the task owner via the UI.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 86, 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-27T08:43:14.054365'}, {'id': 384, 'name': 'Changed title', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 61, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 86, 'created_at': '2025-03-01T12:06:32.303897', 'updated_at': '2025-03-04T17:34:48.465098'}, {'id': 91, 'name': 'Update database schema for task ownership', 'description': 'Add a column or relationship to assign a single owner per task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 87, 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-27T08:43:14.054364'}, {'id': 92, 'name': 'Develop backend API for assigning task owner', 'description': 'Create endpoints to assign or update the owner of a task.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 86, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 88, 'created_at': '2025-01-07T19:39:17.531925', 'updated_at': '2025-02-27T08:43:14.054365'}, {'id': 87, 'name': 'Create and customize contributor roles', 'description': 'As an admin, I want to create and manage contributor roles like QA, Code Reviewer, and UI/UX to reflect team structure.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 84, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 89, 'created_at': '2025-01-07T19:33:43.600461', 'updated_at': '2025-02-27T08:43:14.054362'}, {'id': 96, 'name': 'Allow admin users to create and customize contributor roles via frontend', 'description': 'Provide UI functionality for admins to manage contributor roles dynamically.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 90, 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-27T08:43:14.054367'}, {'id': 94, 'name': 'Add database support for contributor roles', 'description': 'Introduce a roles table and link contributors to specific roles for tasks.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 91, 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-27T08:43:14.054366'}, {'id': 95, 'name': 'Develop backend API for managing contributor roles', 'description': 'Create endpoints to add, update, and delete contributor roles for tasks.  ', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 87, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 92, 'created_at': '2025-01-07T19:39:28.197613', 'updated_at': '2025-02-27T08:43:14.054367'}, {'id': 127, 'name': 'Backend API for Password Reset', 'description': 'Create endpoints to handle password reset requests and token validation.\ndfdf\n\nasdasd', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 93, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054387'}, {'id': 126, 'name': 'Email Configuration for Password Reset', 'description': 'Configure email service to send password reset links.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 94, 'created_at': '2025-01-07T20:41:36.413402', 'updated_at': '2025-02-27T08:43:14.054387'}, {'id': 104, 'name': 'Middleware for Role Enforcement', 'description': 'As a system, I want to enforce role-based access to specific routes.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 98, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 95, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054372'}, {'id': 122, 'name': 'Testing Role Enforcement', 'description': 'Write tests to ensure proper access control based on roles.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 96, 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-02-27T08:43:14.054384'}, {'id': 121, 'name': 'Develop Role Enforcement Middleware', 'description': 'Implement middleware to check user roles for access control.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 104, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 97, 'created_at': '2025-01-07T20:41:07.415346', 'updated_at': '2025-02-27T08:43:14.054383'}, {'id': 105, 'name': 'Profile Management', 'description': 'As a user, I want to update my profile (username, email, password).', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 99, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 98, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054373'}, {'id': 123, 'name': 'Backend API for Profile Management', 'description': 'Create PATCH /api/profile endpoint to update user details.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 99, 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-02-27T08:43:14.054385'}, {'id': 125, 'name': 'Testing Profile Updates', 'description': 'Write tests for profile update functionality.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 100, 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-02-27T08:43:14.054386'}, {'id': 124, 'name': 'Frontend Profile Page', 'description': 'Develop a profile page for editing user details.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 105, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 101, 'created_at': '2025-01-07T20:41:20.321287', 'updated_at': '2025-02-27T08:43:14.054385'}, {'id': 103, 'name': 'Role Assignment', 'description': 'As an administrator, I want to assign roles to users so that I can control access to certain features.', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 98, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 102, 'created_at': '2025-01-07T20:37:47.717804', 'updated_at': '2025-02-27T08:43:14.054372'}, {'id': 120, 'name': 'Testing Role Assignment', 'description': 'Write tests to validate role changes and restrictions.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 103, 'created_at': '2025-01-07T20:40:58.383687', 'updated_at': '2025-02-27T08:43:14.054383'}, {'id': 119, 'name': 'Backend API for Role Assignment', 'description': 'Create POST /api/assign-role endpoint to manage user roles.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 104, 'created_at': '2025-01-07T20:40:58.383687', 'updated_at': '2025-02-27T08:43:14.054382'}, {'id': 118, 'name': 'Database Changes for Role Assignment', 'description': 'Add a role column to the users table.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 103, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 3, 'status': 'Not Started', 'sort_order': 105, 'created_at': '2025-01-07T20:40:58.383687', 'updated_at': '2025-02-27T08:43:14.054381'}, {'id': 44, 'name': 'Test Performance with 500 Tasks', 'description': 'Ensure dropdown performance remains smooth with 500 tasks.', 'task_type': 'Subtask', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': 47, 'project_id': 6, 'project': 'PMS - Backlog', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 5, 'status': 'Not Started', 'sort_order': 107, 'created_at': '2025-01-03T09:16:02.607548', 'updated_at': '2025-02-26T21:53:17.041813'}]
2025-03-04 17:55:54,015 ERROR: Unexpected error in list_tasks: Could not build url for endpoint 'tasks.list_tasks' with values ['is_archived', 'page']. Did you mean 'tasks_bp.list_tasks' instead?
2025-03-04 17:55:54,017 INFO: ROLLBACK
2025-03-04 17:55:54,017 INFO: 127.0.0.1 - - [04/Mar/2025 17:55:54] "GET /tasks/ HTTP/1.1" 200 -
2025-03-04 17:55:54,033 INFO: 127.0.0.1 - - [04/Mar/2025 17:55:54] "[36mGET /static/custom.css HTTP/1.1[0m" 304 -
2025-03-04 17:55:54,040 INFO: 127.0.0.1 - - [04/Mar/2025 17:55:54] "[36mGET /static/js/filters.js HTTP/1.1[0m" 304 -
2025-03-04 17:55:54,044 INFO: 127.0.0.1 - - [04/Mar/2025 17:55:54] "[36mGET /static/js/tasks_table_interactions.js HTTP/1.1[0m" 304 -
2025-03-04 17:55:54,045 INFO: 127.0.0.1 - - [04/Mar/2025 17:55:54] "[36mGET /static/js/modals.js HTTP/1.1[0m" 304 -
2025-03-04 17:55:54,094 INFO: 127.0.0.1 - - [04/Mar/2025 17:55:54] "[36mGET /static/favicon.ico HTTP/1.1[0m" 304 -
2025-03-04 17:55:55,604 INFO: Flash messages: [('danger', 'An unexpected error occurred while fetching tasks.')]
2025-03-04 17:55:55,606 INFO: BEGIN (implicit)
2025-03-04 17:55:55,610 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date 
FROM project LEFT OUTER JOIN task AS task_1 ON project.id = task_1.project_id
2025-03-04 17:55:55,611 INFO: [generated in 0.00100s] {}
2025-03-04 17:55:55,621 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:55:55,621 INFO: [generated in 0.00028s] {'coalesce_2': 0, 'project_id_1': 6}
2025-03-04 17:55:55,624 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:55:55,624 INFO: [generated in 0.00020s] {'coalesce_2': 0, 'project_id_1': 6}
2025-03-04 17:55:55,626 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:55:55,626 INFO: [cached since 0.004752s ago] {'coalesce_2': 0, 'project_id_1': 6}
2025-03-04 17:55:55,627 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:55:55,627 INFO: [cached since 0.003827s ago] {'coalesce_2': 0, 'project_id_1': 6}
2025-03-04 17:55:55,628 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:55:55,628 INFO: [cached since 0.007255s ago] {'coalesce_2': 0, 'project_id_1': 19}
2025-03-04 17:55:55,629 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:55:55,629 INFO: [cached since 0.00579s ago] {'coalesce_2': 0, 'project_id_1': 19}
2025-03-04 17:55:55,630 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:55:55,631 INFO: [cached since 0.00943s ago] {'coalesce_2': 0, 'project_id_1': 19}
2025-03-04 17:55:55,632 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:55:55,632 INFO: [cached since 0.008184s ago] {'coalesce_2': 0, 'project_id_1': 19}
2025-03-04 17:55:55,633 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:55:55,633 INFO: [cached since 0.01213s ago] {'coalesce_2': 0, 'project_id_1': 7}
2025-03-04 17:55:55,635 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:55:55,635 INFO: [cached since 0.01182s ago] {'coalesce_2': 0, 'project_id_1': 7}
2025-03-04 17:55:55,637 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:55:55,637 INFO: [cached since 0.01563s ago] {'coalesce_2': 0, 'project_id_1': 7}
2025-03-04 17:55:55,638 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:55:55,638 INFO: [cached since 0.01465s ago] {'coalesce_2': 0, 'project_id_1': 7}
2025-03-04 17:55:55,639 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:55:55,639 INFO: [cached since 0.01816s ago] {'coalesce_2': 0, 'project_id_1': 5}
2025-03-04 17:55:55,640 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:55:55,640 INFO: [cached since 0.01676s ago] {'coalesce_2': 0, 'project_id_1': 5}
2025-03-04 17:55:55,642 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:55:55,643 INFO: [cached since 0.0216s ago] {'coalesce_2': 0, 'project_id_1': 5}
2025-03-04 17:55:55,645 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:55:55,645 INFO: [cached since 0.02113s ago] {'coalesce_2': 0, 'project_id_1': 5}
2025-03-04 17:55:55,647 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:55:55,647 INFO: [cached since 0.02557s ago] {'coalesce_2': 0, 'project_id_1': 2}
2025-03-04 17:55:55,648 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:55:55,649 INFO: [cached since 0.02501s ago] {'coalesce_2': 0, 'project_id_1': 2}
2025-03-04 17:55:55,650 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:55:55,650 INFO: [cached since 0.02914s ago] {'coalesce_2': 0, 'project_id_1': 2}
2025-03-04 17:55:55,651 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:55:55,651 INFO: [cached since 0.02759s ago] {'coalesce_2': 0, 'project_id_1': 2}
2025-03-04 17:55:55,652 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:55:55,652 INFO: [cached since 0.03054s ago] {'coalesce_2': 0, 'project_id_1': 4}
2025-03-04 17:55:55,652 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:55:55,652 INFO: [cached since 0.02862s ago] {'coalesce_2': 0, 'project_id_1': 4}
2025-03-04 17:55:55,653 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:55:55,653 INFO: [cached since 0.03144s ago] {'coalesce_2': 0, 'project_id_1': 4}
2025-03-04 17:55:55,653 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:55:55,653 INFO: [cached since 0.02957s ago] {'coalesce_2': 0, 'project_id_1': 4}
2025-03-04 17:55:55,654 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:55:55,654 INFO: [cached since 0.03285s ago] {'coalesce_2': 0, 'project_id_1': 1}
2025-03-04 17:55:55,655 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:55:55,655 INFO: [cached since 0.03129s ago] {'coalesce_2': 0, 'project_id_1': 1}
2025-03-04 17:55:55,655 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:55:55,656 INFO: [cached since 0.03436s ago] {'coalesce_2': 0, 'project_id_1': 1}
2025-03-04 17:55:55,656 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:55:55,656 INFO: [cached since 0.03262s ago] {'coalesce_2': 0, 'project_id_1': 1}
2025-03-04 17:55:55,657 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:55:55,657 INFO: [cached since 0.0357s ago] {'coalesce_2': 0, 'project_id_1': 3}
2025-03-04 17:55:55,658 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:55:55,658 INFO: [cached since 0.0349s ago] {'coalesce_2': 0, 'project_id_1': 3}
2025-03-04 17:55:55,660 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:55:55,660 INFO: [cached since 0.03863s ago] {'coalesce_2': 0, 'project_id_1': 3}
2025-03-04 17:55:55,660 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:55:55,660 INFO: [cached since 0.03689s ago] {'coalesce_2': 0, 'project_id_1': 3}
2025-03-04 17:55:55,662 INFO: SELECT count(*) AS count_1 
FROM (SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor) AS anon_1
2025-03-04 17:55:55,662 INFO: [generated in 0.00018s] {}
2025-03-04 17:55:55,664 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project JOIN task ON project.id = task.project_id GROUP BY project.id 
HAVING sum(task.story_points * CAST(task.completed AS INTEGER)) < sum(task.story_points)
2025-03-04 17:55:55,664 INFO: [generated in 0.00016s] {}
2025-03-04 17:55:55,666 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project JOIN task ON project.id = task.project_id GROUP BY project.id 
HAVING sum(task.story_points * CAST(task.completed AS INTEGER)) >= sum(task.story_points)
2025-03-04 17:55:55,666 INFO: [generated in 0.00020s] {}
2025-03-04 17:55:55,668 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project LEFT OUTER JOIN task ON project.id = task.project_id GROUP BY project.id 
HAVING sum(task.story_points * CAST(task.completed AS INTEGER)) IS NULL
2025-03-04 17:55:55,668 INFO: [generated in 0.00016s] {}
2025-03-04 17:55:55,669 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-04 17:55:55,669 INFO: [cached since 712.1s ago] {}
2025-03-04 17:55:55,670 INFO: SELECT count(*) AS count_1 
FROM (SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor) AS anon_1
2025-03-04 17:55:55,670 INFO: [cached since 0.008063s ago] {}
2025-03-04 17:55:55,671 INFO: SELECT count(*) AS count_1 
FROM (SELECT DISTINCT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor JOIN project_contributor ON contributor.id = project_contributor.contributor_id) AS anon_1
2025-03-04 17:55:55,671 INFO: [generated in 0.00015s] {}
2025-03-04 17:55:55,673 INFO: SELECT count(*) AS count_1 
FROM (SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor LEFT OUTER JOIN project_contributor ON contributor.id = project_contributor.contributor_id 
WHERE project_contributor.project_id IS NULL) AS anon_1
2025-03-04 17:55:55,673 INFO: [generated in 0.00017s] {}
2025-03-04 17:55:55,745 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:55:55,746 INFO: [cached since 0.1243s ago] {'coalesce_2': 0, 'project_id_1': 6}
2025-03-04 17:55:55,746 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 6, 'total_story_points': 447, 'timestamp': '2025-03-04T16:55:55.746731+00:00'}
2025-03-04 17:55:55,746 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:55:55,747 INFO: [cached since 0.1254s ago] {'coalesce_2': 0, 'project_id_1': 19}
2025-03-04 17:55:55,747 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 19, 'total_story_points': 12, 'timestamp': '2025-03-04T16:55:55.747342+00:00'}
2025-03-04 17:55:55,747 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:55:55,747 INFO: [cached since 0.1259s ago] {'coalesce_2': 0, 'project_id_1': 7}
2025-03-04 17:55:55,747 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 7, 'total_story_points': 15, 'timestamp': '2025-03-04T16:55:55.747894+00:00'}
2025-03-04 17:55:55,748 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:55:55,748 INFO: [cached since 0.1265s ago] {'coalesce_2': 0, 'project_id_1': 5}
2025-03-04 17:55:55,748 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 5, 'total_story_points': 4, 'timestamp': '2025-03-04T16:55:55.748404+00:00'}
2025-03-04 17:55:55,748 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:55:55,748 INFO: [cached since 0.127s ago] {'coalesce_2': 0, 'project_id_1': 2}
2025-03-04 17:55:55,749 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 2, 'total_story_points': 0, 'timestamp': '2025-03-04T16:55:55.749008+00:00'}
2025-03-04 17:55:55,749 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:55:55,749 INFO: [cached since 0.1276s ago] {'coalesce_2': 0, 'project_id_1': 4}
2025-03-04 17:55:55,749 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 4, 'total_story_points': 0, 'timestamp': '2025-03-04T16:55:55.749516+00:00'}
2025-03-04 17:55:55,749 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:55:55,749 INFO: [cached since 0.1281s ago] {'coalesce_2': 0, 'project_id_1': 1}
2025-03-04 17:55:55,750 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 1, 'total_story_points': 0, 'timestamp': '2025-03-04T16:55:55.750023+00:00'}
2025-03-04 17:55:55,750 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:55:55,750 INFO: [cached since 0.1286s ago] {'coalesce_2': 0, 'project_id_1': 3}
2025-03-04 17:55:55,750 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 3, 'total_story_points': 0, 'timestamp': '2025-03-04T16:55:55.750557+00:00'}
2025-03-04 17:55:55,751 INFO: ROLLBACK
2025-03-04 17:55:55,751 INFO: 127.0.0.1 - - [04/Mar/2025 17:55:55] "GET /dashboard HTTP/1.1" 200 -
2025-03-04 17:55:55,768 INFO: 127.0.0.1 - - [04/Mar/2025 17:55:55] "[36mGET /static/custom.css HTTP/1.1[0m" 304 -
2025-03-04 17:55:55,776 INFO: 127.0.0.1 - - [04/Mar/2025 17:55:55] "[36mGET /static/custom.js HTTP/1.1[0m" 304 -
2025-03-04 17:56:25,278 INFO: BEGIN (implicit)
2025-03-04 17:56:25,278 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date 
FROM project LEFT OUTER JOIN task AS task_1 ON project.id = task_1.project_id
2025-03-04 17:56:25,279 INFO: [cached since 29.67s ago] {}
2025-03-04 17:56:25,291 INFO: ROLLBACK
2025-03-04 17:56:25,300 INFO: 127.0.0.1 - - [04/Mar/2025 17:56:25] "[35m[1mGET / HTTP/1.1[0m" 500 -
2025-03-04 17:56:25,352 INFO: 127.0.0.1 - - [04/Mar/2025 17:56:25] "GET /?__debugger__=yes&cmd=resource&f=style.css HTTP/1.1" 200 -
2025-03-04 17:56:25,362 INFO: 127.0.0.1 - - [04/Mar/2025 17:56:25] "GET /?__debugger__=yes&cmd=resource&f=debugger.js HTTP/1.1" 200 -
2025-03-04 17:56:25,396 INFO: 127.0.0.1 - - [04/Mar/2025 17:56:25] "GET /?__debugger__=yes&cmd=resource&f=console.png&s=5T5tfkYWVEdIKEhYOisC HTTP/1.1" 200 -
2025-03-04 17:56:25,441 INFO: 127.0.0.1 - - [04/Mar/2025 17:56:25] "[36mGET /?__debugger__=yes&cmd=resource&f=console.png HTTP/1.1[0m" 304 -
2025-03-04 17:56:28,588 INFO: BEGIN (implicit)
2025-03-04 17:56:28,588 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-04 17:56:28,589 INFO: [cached since 745.1s ago] {'name_1': 'PMS - Backlog', 'param_1': 1}
2025-03-04 17:56:28,590 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-04 17:56:28,590 INFO: [cached since 745.1s ago] {}
2025-03-04 17:56:28,592 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-04 17:56:28,592 INFO: [cached since 745.1s ago] {'name_1': 'PMS - Backlog', 'param_1': 1}
2025-03-04 17:56:28,593 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:56:28,594 INFO: [cached since 32.97s ago] {'coalesce_2': 0, 'project_id_1': 6}
2025-03-04 17:56:28,596 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 6, 'total_story_points': 447, 'timestamp': '2025-03-04T16:56:28.596164+00:00'}
2025-03-04 17:56:28,598 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE %(param_1)s = task.project_id
2025-03-04 17:56:28,598 INFO: [generated in 0.00046s] {'param_1': 6}
2025-03-04 17:56:28,812 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:56:28,812 INFO: [cached since 33.19s ago] {'coalesce_2': 0, 'project_id_1': 6}
2025-03-04 17:56:28,813 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 6, 'total_story_points': 447, 'timestamp': '2025-03-04T16:56:28.813609+00:00'}
2025-03-04 17:56:28,813 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:56:28,813 INFO: [cached since 33.19s ago] {'coalesce_2': 0, 'project_id_1': 6}
2025-03-04 17:56:28,814 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:56:28,814 INFO: [cached since 33.19s ago] {'coalesce_2': 0, 'project_id_1': 6}
2025-03-04 17:56:28,814 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Completion Percentage, Data: {'project_id': 6, 'completion_percentage': 0.45}
2025-03-04 17:56:28,815 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-04 17:56:28,815 INFO: [cached since 745.1s ago] {'param_1': 6}
2025-03-04 17:56:28,816 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE %(param_1)s = task.contributor_id
2025-03-04 17:56:28,816 INFO: [generated in 0.00007s] {'param_1': 5}
2025-03-04 17:56:28,817 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE %(param_1)s = task.contributor_id
2025-03-04 17:56:28,817 INFO: [cached since 0.001623s ago] {'param_1': 2}
2025-03-04 17:56:28,818 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE %(param_1)s = task.contributor_id
2025-03-04 17:56:28,818 INFO: [cached since 0.002225s ago] {'param_1': 1}
2025-03-04 17:56:28,818 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE %(param_1)s = task.contributor_id
2025-03-04 17:56:28,818 INFO: [cached since 0.002697s ago] {'param_1': 4}
2025-03-04 17:56:28,819 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE %(param_1)s = task.contributor_id
2025-03-04 17:56:28,819 INFO: [cached since 0.003385s ago] {'param_1': 3}
2025-03-04 17:56:28,820 INFO: ROLLBACK
2025-03-04 17:56:28,820 INFO: 127.0.0.1 - - [04/Mar/2025 17:56:28] "GET /project/PMS%20-%20Backlog HTTP/1.1" 200 -
2025-03-04 17:56:28,842 INFO: 127.0.0.1 - - [04/Mar/2025 17:56:28] "[36mGET /static/custom.css HTTP/1.1[0m" 304 -
2025-03-04 17:56:28,843 INFO: 127.0.0.1 - - [04/Mar/2025 17:56:28] "[36mGET /static/custom.js HTTP/1.1[0m" 304 -
2025-03-04 17:58:59,278 INFO: Flash messages: []
2025-03-04 17:58:59,284 INFO: BEGIN (implicit)
2025-03-04 17:58:59,286 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date 
FROM project LEFT OUTER JOIN task AS task_1 ON project.id = task_1.project_id
2025-03-04 17:58:59,286 INFO: [cached since 183.7s ago] {}
2025-03-04 17:58:59,319 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:58:59,319 INFO: [cached since 183.7s ago] {'coalesce_2': 0, 'project_id_1': 6}
2025-03-04 17:58:59,321 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:58:59,322 INFO: [cached since 183.7s ago] {'coalesce_2': 0, 'project_id_1': 6}
2025-03-04 17:58:59,324 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:58:59,325 INFO: [cached since 183.7s ago] {'coalesce_2': 0, 'project_id_1': 6}
2025-03-04 17:58:59,326 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:58:59,326 INFO: [cached since 183.7s ago] {'coalesce_2': 0, 'project_id_1': 6}
2025-03-04 17:58:59,329 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:58:59,329 INFO: [cached since 183.7s ago] {'coalesce_2': 0, 'project_id_1': 19}
2025-03-04 17:58:59,330 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:58:59,331 INFO: [cached since 183.7s ago] {'coalesce_2': 0, 'project_id_1': 19}
2025-03-04 17:58:59,331 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:58:59,331 INFO: [cached since 183.7s ago] {'coalesce_2': 0, 'project_id_1': 19}
2025-03-04 17:58:59,332 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:58:59,332 INFO: [cached since 183.7s ago] {'coalesce_2': 0, 'project_id_1': 19}
2025-03-04 17:58:59,333 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:58:59,333 INFO: [cached since 183.7s ago] {'coalesce_2': 0, 'project_id_1': 7}
2025-03-04 17:58:59,338 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:58:59,339 INFO: [cached since 183.7s ago] {'coalesce_2': 0, 'project_id_1': 7}
2025-03-04 17:58:59,340 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:58:59,340 INFO: [cached since 183.7s ago] {'coalesce_2': 0, 'project_id_1': 7}
2025-03-04 17:58:59,342 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:58:59,342 INFO: [cached since 183.7s ago] {'coalesce_2': 0, 'project_id_1': 7}
2025-03-04 17:58:59,344 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:58:59,344 INFO: [cached since 183.7s ago] {'coalesce_2': 0, 'project_id_1': 5}
2025-03-04 17:58:59,346 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:58:59,346 INFO: [cached since 183.7s ago] {'coalesce_2': 0, 'project_id_1': 5}
2025-03-04 17:58:59,349 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:58:59,349 INFO: [cached since 183.7s ago] {'coalesce_2': 0, 'project_id_1': 5}
2025-03-04 17:58:59,350 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:58:59,351 INFO: [cached since 183.7s ago] {'coalesce_2': 0, 'project_id_1': 5}
2025-03-04 17:58:59,374 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:58:59,375 INFO: [cached since 183.8s ago] {'coalesce_2': 0, 'project_id_1': 2}
2025-03-04 17:58:59,379 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:58:59,380 INFO: [cached since 183.8s ago] {'coalesce_2': 0, 'project_id_1': 2}
2025-03-04 17:58:59,383 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:58:59,384 INFO: [cached since 183.8s ago] {'coalesce_2': 0, 'project_id_1': 2}
2025-03-04 17:58:59,386 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:58:59,387 INFO: [cached since 183.8s ago] {'coalesce_2': 0, 'project_id_1': 2}
2025-03-04 17:58:59,389 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:58:59,389 INFO: [cached since 183.8s ago] {'coalesce_2': 0, 'project_id_1': 4}
2025-03-04 17:58:59,391 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:58:59,391 INFO: [cached since 183.8s ago] {'coalesce_2': 0, 'project_id_1': 4}
2025-03-04 17:58:59,394 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:58:59,394 INFO: [cached since 183.8s ago] {'coalesce_2': 0, 'project_id_1': 4}
2025-03-04 17:58:59,397 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:58:59,397 INFO: [cached since 183.8s ago] {'coalesce_2': 0, 'project_id_1': 4}
2025-03-04 17:58:59,398 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:58:59,399 INFO: [cached since 183.8s ago] {'coalesce_2': 0, 'project_id_1': 1}
2025-03-04 17:58:59,400 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:58:59,400 INFO: [cached since 183.8s ago] {'coalesce_2': 0, 'project_id_1': 1}
2025-03-04 17:58:59,401 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:58:59,401 INFO: [cached since 183.8s ago] {'coalesce_2': 0, 'project_id_1': 1}
2025-03-04 17:58:59,403 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:58:59,404 INFO: [cached since 183.8s ago] {'coalesce_2': 0, 'project_id_1': 1}
2025-03-04 17:58:59,405 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:58:59,405 INFO: [cached since 183.8s ago] {'coalesce_2': 0, 'project_id_1': 3}
2025-03-04 17:58:59,406 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:58:59,406 INFO: [cached since 183.8s ago] {'coalesce_2': 0, 'project_id_1': 3}
2025-03-04 17:58:59,408 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:58:59,408 INFO: [cached since 183.8s ago] {'coalesce_2': 0, 'project_id_1': 3}
2025-03-04 17:58:59,413 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s AND task.completed = true
2025-03-04 17:58:59,413 INFO: [cached since 183.8s ago] {'coalesce_2': 0, 'project_id_1': 3}
2025-03-04 17:58:59,415 INFO: SELECT count(*) AS count_1 
FROM (SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor) AS anon_1
2025-03-04 17:58:59,415 INFO: [cached since 183.8s ago] {}
2025-03-04 17:58:59,417 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project JOIN task ON project.id = task.project_id GROUP BY project.id 
HAVING sum(task.story_points * CAST(task.completed AS INTEGER)) < sum(task.story_points)
2025-03-04 17:58:59,417 INFO: [cached since 183.8s ago] {}
2025-03-04 17:58:59,420 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project JOIN task ON project.id = task.project_id GROUP BY project.id 
HAVING sum(task.story_points * CAST(task.completed AS INTEGER)) >= sum(task.story_points)
2025-03-04 17:58:59,420 INFO: [cached since 183.8s ago] {}
2025-03-04 17:58:59,422 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project LEFT OUTER JOIN task ON project.id = task.project_id GROUP BY project.id 
HAVING sum(task.story_points * CAST(task.completed AS INTEGER)) IS NULL
2025-03-04 17:58:59,422 INFO: [cached since 183.8s ago] {}
2025-03-04 17:58:59,431 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-04 17:58:59,431 INFO: [cached since 895.9s ago] {}
2025-03-04 17:58:59,432 INFO: SELECT count(*) AS count_1 
FROM (SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor) AS anon_1
2025-03-04 17:58:59,432 INFO: [cached since 183.8s ago] {}
2025-03-04 17:58:59,432 INFO: SELECT count(*) AS count_1 
FROM (SELECT DISTINCT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor JOIN project_contributor ON contributor.id = project_contributor.contributor_id) AS anon_1
2025-03-04 17:58:59,432 INFO: [cached since 183.8s ago] {}
2025-03-04 17:58:59,433 INFO: SELECT count(*) AS count_1 
FROM (SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor LEFT OUTER JOIN project_contributor ON contributor.id = project_contributor.contributor_id 
WHERE project_contributor.project_id IS NULL) AS anon_1
2025-03-04 17:58:59,434 INFO: [cached since 183.8s ago] {}
2025-03-04 17:58:59,497 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:58:59,497 INFO: [cached since 183.9s ago] {'coalesce_2': 0, 'project_id_1': 6}
2025-03-04 17:58:59,498 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 6, 'total_story_points': 447, 'timestamp': '2025-03-04T16:58:59.498644+00:00'}
2025-03-04 17:58:59,498 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:58:59,499 INFO: [cached since 183.9s ago] {'coalesce_2': 0, 'project_id_1': 19}
2025-03-04 17:58:59,499 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 19, 'total_story_points': 12, 'timestamp': '2025-03-04T16:58:59.499602+00:00'}
2025-03-04 17:58:59,499 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:58:59,499 INFO: [cached since 183.9s ago] {'coalesce_2': 0, 'project_id_1': 7}
2025-03-04 17:58:59,500 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 7, 'total_story_points': 15, 'timestamp': '2025-03-04T16:58:59.500671+00:00'}
2025-03-04 17:58:59,500 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:58:59,500 INFO: [cached since 183.9s ago] {'coalesce_2': 0, 'project_id_1': 5}
2025-03-04 17:58:59,501 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 5, 'total_story_points': 4, 'timestamp': '2025-03-04T16:58:59.501580+00:00'}
2025-03-04 17:58:59,501 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:58:59,501 INFO: [cached since 183.9s ago] {'coalesce_2': 0, 'project_id_1': 2}
2025-03-04 17:58:59,502 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 2, 'total_story_points': 0, 'timestamp': '2025-03-04T16:58:59.502245+00:00'}
2025-03-04 17:58:59,502 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:58:59,502 INFO: [cached since 183.9s ago] {'coalesce_2': 0, 'project_id_1': 4}
2025-03-04 17:58:59,504 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 4, 'total_story_points': 0, 'timestamp': '2025-03-04T16:58:59.504698+00:00'}
2025-03-04 17:58:59,505 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:58:59,505 INFO: [cached since 183.9s ago] {'coalesce_2': 0, 'project_id_1': 1}
2025-03-04 17:58:59,506 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 1, 'total_story_points': 0, 'timestamp': '2025-03-04T16:58:59.506016+00:00'}
2025-03-04 17:58:59,506 INFO: SELECT coalesce(sum(task.story_points), %(coalesce_2)s) AS coalesce_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 17:58:59,506 INFO: [cached since 183.9s ago] {'coalesce_2': 0, 'project_id_1': 3}
2025-03-04 17:58:59,506 INFO: Caller: Project Model, Callee: TaskService, Action: Calculate Total Story Points, Data: {'project_id': 3, 'total_story_points': 0, 'timestamp': '2025-03-04T16:58:59.506756+00:00'}
2025-03-04 17:58:59,507 INFO: ROLLBACK
2025-03-04 17:58:59,507 INFO: 127.0.0.1 - - [04/Mar/2025 17:58:59] "GET /dashboard HTTP/1.1" 200 -
2025-03-04 17:58:59,557 INFO: 127.0.0.1 - - [04/Mar/2025 17:58:59] "[36mGET /static/custom.css HTTP/1.1[0m" 304 -
2025-03-04 17:58:59,576 INFO: 127.0.0.1 - - [04/Mar/2025 17:58:59] "[36mGET /static/custom.js HTTP/1.1[0m" 304 -
2025-03-04 18:34:44,281 INFO: 127.0.0.1 - - [04/Mar/2025 18:34:44] "GET /socket.io/?EIO=4&transport=websocket&sid=BRJ1xB__waWRcaWqAAAI HTTP/1.1" 200 -
2025-03-04 18:34:46,507 INFO: 127.0.0.1 - - [04/Mar/2025 18:34:46] "GET /socket.io/?EIO=4&transport=polling&t=rr46cwak HTTP/1.1" 200 -
2025-03-04 18:34:46,514 INFO: 127.0.0.1 - - [04/Mar/2025 18:34:46] "POST /socket.io/?EIO=4&transport=polling&t=rr46m0ys&sid=81SRCIz5JENcvCiMAAAK HTTP/1.1" 200 -
2025-03-04 18:34:46,517 INFO: 127.0.0.1 - - [04/Mar/2025 18:34:46] "GET /socket.io/?EIO=4&transport=polling&t=rr46neqq&sid=81SRCIz5JENcvCiMAAAK HTTP/1.1" 200 -
2025-03-04 18:46:56,489 INFO: 127.0.0.1 - - [04/Mar/2025 18:46:56] "GET /socket.io/?EIO=4&transport=websocket&sid=Ap5taCS_kuI3IB3SAAAB HTTP/1.1" 200 -
2025-03-04 18:46:57,160 INFO: 127.0.0.1 - - [04/Mar/2025 18:46:57] "GET /socket.io/?EIO=4&transport=polling&t=s6ry7tj0 HTTP/1.1" 200 -
2025-03-04 18:46:57,172 INFO: 127.0.0.1 - - [04/Mar/2025 18:46:57] "POST /socket.io/?EIO=4&transport=polling&t=s6rylucb&sid=fol0LDM_p_vV0rSxAAAM HTTP/1.1" 200 -
2025-03-04 18:46:57,172 INFO: 127.0.0.1 - - [04/Mar/2025 18:46:57] "GET /socket.io/?EIO=4&transport=polling&t=s6ryor3m&sid=fol0LDM_p_vV0rSxAAAM HTTP/1.1" 200 -
2025-03-04 18:46:57,176 INFO: 127.0.0.1 - - [04/Mar/2025 18:46:57] "GET /socket.io/?EIO=4&transport=polling&t=s6ryv7n2&sid=fol0LDM_p_vV0rSxAAAM HTTP/1.1" 200 -
2025-03-04 19:00:36,200 INFO: 127.0.0.1 - - [04/Mar/2025 19:00:36] "GET /socket.io/?EIO=4&transport=websocket&sid=fol0LDM_p_vV0rSxAAAM HTTP/1.1" 200 -
2025-03-04 19:00:37,186 INFO: 127.0.0.1 - - [04/Mar/2025 19:00:37] "GET /socket.io/?EIO=4&transport=polling&t=socotipl HTTP/1.1" 200 -
2025-03-04 19:00:37,195 INFO: 127.0.0.1 - - [04/Mar/2025 19:00:37] "POST /socket.io/?EIO=4&transport=polling&t=socp2js2&sid=qYjJ7Lk2GNm_Im_8AAAO HTTP/1.1" 200 -
2025-03-04 19:00:37,197 INFO: 127.0.0.1 - - [04/Mar/2025 19:00:37] "GET /socket.io/?EIO=4&transport=polling&t=socp4sct&sid=qYjJ7Lk2GNm_Im_8AAAO HTTP/1.1" 200 -
2025-03-04 19:14:06,004 INFO: 127.0.0.1 - - [04/Mar/2025 19:14:06] "GET /socket.io/?EIO=4&transport=websocket&sid=qYjJ7Lk2GNm_Im_8AAAO HTTP/1.1" 200 -
2025-03-04 19:14:07,375 INFO: 127.0.0.1 - - [04/Mar/2025 19:14:07] "GET /socket.io/?EIO=4&transport=polling&t=t5pu1mx6 HTTP/1.1" 200 -
2025-03-04 19:14:07,385 INFO: 127.0.0.1 - - [04/Mar/2025 19:14:07] "POST /socket.io/?EIO=4&transport=polling&t=t5pubcno&sid=gYZNaBqWnLmJG1kIAAAQ HTTP/1.1" 200 -
2025-03-04 19:14:07,386 INFO: 127.0.0.1 - - [04/Mar/2025 19:14:07] "GET /socket.io/?EIO=4&transport=polling&t=t5puenji&sid=gYZNaBqWnLmJG1kIAAAQ HTTP/1.1" 200 -
2025-03-04 19:14:07,389 INFO: 127.0.0.1 - - [04/Mar/2025 19:14:07] "GET /socket.io/?EIO=4&transport=polling&t=t5pukp6b&sid=gYZNaBqWnLmJG1kIAAAQ HTTP/1.1" 200 -
2025-03-04 19:24:03,344 INFO: 127.0.0.1 - - [04/Mar/2025 19:24:03] "GET /socket.io/?EIO=4&transport=websocket&sid=gYZNaBqWnLmJG1kIAAAQ HTTP/1.1" 200 -
2025-03-04 19:24:04,811 INFO: 127.0.0.1 - - [04/Mar/2025 19:24:04] "GET /socket.io/?EIO=4&transport=polling&t=tiitisq9 HTTP/1.1" 200 -
2025-03-04 19:24:04,828 INFO: 127.0.0.1 - - [04/Mar/2025 19:24:04] "POST /socket.io/?EIO=4&transport=polling&t=tiitpitr&sid=rRY3mcABDgHpFVsIAAAS HTTP/1.1" 200 -
2025-03-04 19:24:04,828 INFO: 127.0.0.1 - - [04/Mar/2025 19:24:04] "GET /socket.io/?EIO=4&transport=polling&t=tiitrss2&sid=rRY3mcABDgHpFVsIAAAS HTTP/1.1" 200 -
2025-03-04 19:29:53,511 INFO: Fetching task details for Task ID 284.
2025-03-04 19:29:53,512 INFO: Fetching task with ID 284.
2025-03-04 19:29:53,517 INFO: BEGIN (implicit)
2025-03-04 19:29:53,519 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:29:53,520 INFO: [cached since 3527s ago] {'pk_1': 284}
2025-03-04 19:29:53,535 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x10e934e30>, 'epic_priority': None, 'contributor_id': 5, 'story_points': 0, 'id': 284, 'is_archived': False, 'completed_date': None, 'name': 'Add type "issue/bug"', 'completed': False, 'sort_order': 36, 'created_at': datetime.datetime(2025, 2, 10, 8, 42, 27, 719439), 'description': '', 'status': 'Not Started', 'updated_at': datetime.datetime(2025, 2, 28, 0, 11, 55, 301296), 'parent_id': None, 'task_type': 'Epic', 'project_id': 7, 'priority': 'Medium'}
2025-03-04 19:29:53,536 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-04 19:29:53,537 INFO: [cached since 3527s ago] {'pk_1': 7}
2025-03-04 19:29:53,538 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:29:53,539 INFO: [cached since 3527s ago] {'pk_1': 5}
2025-03-04 19:29:53,539 INFO: Task ID 284 fetched with parent ID: None
2025-03-04 19:29:53,539 INFO: Task with ID 284 fetched successfully.
2025-03-04 19:29:53,540 DEBUG: Fetched Task Data: {'id': 284, 'name': 'Add type "issue/bug"', 'description': '', 'task_type': 'Epic', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 36, 'created_at': '2025-02-10T08:42:27.719439', 'updated_at': '2025-02-28T00:11:55.301296', 'contributor_name': 'Fredrik Cederborg', 'parent': None}
2025-03-04 19:29:53,540 INFO: Task details fetched successfully for Task ID 284.
2025-03-04 19:29:53,540 INFO: ROLLBACK
2025-03-04 19:29:53,541 INFO: 127.0.0.1 - - [04/Mar/2025 19:29:53] "GET /api/tasks/284 HTTP/1.1" 200 -
2025-03-04 19:29:53,703 INFO: 127.0.0.1 - - [04/Mar/2025 19:29:53] "OPTIONS /tasks/available_tasks?task_type=Epic&exclude_task_id=284&page=1&limit=30 HTTP/1.1" 200 -
2025-03-04 19:29:53,704 INFO: BEGIN (implicit)
2025-03-04 19:29:53,705 INFO: 127.0.0.1 - - [04/Mar/2025 19:29:53] "OPTIONS /tasks/available_tasks?task_type=Epic&exclude_task_id=284&page=1&limit=30 HTTP/1.1" 200 -
2025-03-04 19:29:53,706 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-04 19:29:53,707 INFO: Entering available_tasks route...
2025-03-04 19:29:53,707 INFO: [cached since 3572s ago] {'pk_1': 7}
2025-03-04 19:29:53,707 DEBUG: Query parameters: task_type=Epic, exclude_task_id=284, search_term=, project_id=None, limit=30, page=1
2025-03-04 19:29:53,708 INFO: BEGIN (implicit)
2025-03-04 19:29:53,709 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:29:53,709 INFO: [cached since 3528s ago] {'pk_1': 284}
2025-03-04 19:29:53,710 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-04 19:29:53,711 INFO: [cached since 3572s ago] {}
2025-03-04 19:29:53,714 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-04 19:29:53,714 INFO: [cached since 3572s ago] {'param_1': 7}
2025-03-04 19:29:53,714 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 284, 'task_type': ['Epic']}
2025-03-04 19:29:53,715 INFO: Validating hierarchy for Task N/A
2025-03-04 19:29:53,715 INFO: Determining valid parent types for task_type: Epic
2025-03-04 19:29:53,715 INFO: No valid parents found for task_type: Epic
2025-03-04 19:29:53,715 INFO: ROLLBACK
2025-03-04 19:29:53,715 INFO: 127.0.0.1 - - [04/Mar/2025 19:29:53] "GET /tasks/available_tasks?task_type=Epic&exclude_task_id=284&page=1&limit=30 HTTP/1.1" 200 -
2025-03-04 19:29:53,716 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:29:53,718 INFO: [cached since 3572s ago] {'param_1': 1}
2025-03-04 19:29:53,720 INFO: Entering available_tasks route...
2025-03-04 19:29:53,720 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:29:53,721 DEBUG: Query parameters: task_type=Epic, exclude_task_id=284, search_term=, project_id=None, limit=30, page=1
2025-03-04 19:29:53,721 INFO: [cached since 3572s ago] {'param_1': 2}
2025-03-04 19:29:53,721 INFO: BEGIN (implicit)
2025-03-04 19:29:53,721 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:29:53,721 INFO: [cached since 3528s ago] {'pk_1': 284}
2025-03-04 19:29:53,722 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:29:53,722 INFO: [cached since 3572s ago] {'param_1': 3}
2025-03-04 19:29:53,722 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:29:53,723 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 284, 'task_type': ['Epic']}
2025-03-04 19:29:53,723 INFO: [cached since 3572s ago] {'param_1': 4}
2025-03-04 19:29:53,723 INFO: Validating hierarchy for Task N/A
2025-03-04 19:29:53,723 INFO: Determining valid parent types for task_type: Epic
2025-03-04 19:29:53,723 INFO: No valid parents found for task_type: Epic
2025-03-04 19:29:53,723 INFO: ROLLBACK
2025-03-04 19:29:53,723 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:29:53,724 INFO: [cached since 3572s ago] {'param_1': 5}
2025-03-04 19:29:53,724 INFO: 127.0.0.1 - - [04/Mar/2025 19:29:53] "GET /tasks/available_tasks?task_type=Epic&exclude_task_id=284&page=1&limit=30 HTTP/1.1" 200 -
2025-03-04 19:29:53,725 INFO: ROLLBACK
2025-03-04 19:29:53,725 INFO: 127.0.0.1 - - [04/Mar/2025 19:29:53] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-04 19:29:53,727 INFO: BEGIN (implicit)
2025-03-04 19:29:53,727 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-04 19:29:53,727 INFO: [cached since 3572s ago] {'pk_1': 7}
2025-03-04 19:29:53,728 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-04 19:29:53,728 INFO: [cached since 3572s ago] {}
2025-03-04 19:29:53,729 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-04 19:29:53,729 INFO: [cached since 3572s ago] {'param_1': 7}
2025-03-04 19:29:53,730 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:29:53,730 INFO: [cached since 3572s ago] {'param_1': 1}
2025-03-04 19:29:53,730 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:29:53,730 INFO: [cached since 3572s ago] {'param_1': 2}
2025-03-04 19:29:53,731 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:29:53,731 INFO: [cached since 3572s ago] {'param_1': 3}
2025-03-04 19:29:53,731 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:29:53,731 INFO: [cached since 3572s ago] {'param_1': 4}
2025-03-04 19:29:53,732 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:29:53,732 INFO: [cached since 3572s ago] {'param_1': 5}
2025-03-04 19:29:53,733 INFO: ROLLBACK
2025-03-04 19:29:53,733 INFO: 127.0.0.1 - - [04/Mar/2025 19:29:53] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-04 19:30:00,097 INFO: 127.0.0.1 - - [04/Mar/2025 19:30:00] "OPTIONS /api/tasks/284 HTTP/1.1" 200 -
2025-03-04 19:30:00,102 INFO: BEGIN (implicit)
2025-03-04 19:30:00,103 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:00,103 INFO: [cached since 3534s ago] {'pk_1': 284}
2025-03-04 19:30:00,105 DEBUG: Received update payload for Task ID 284: {'description': '<p>FoobarWrite your task description...</p>'}
2025-03-04 19:30:00,109 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:30:00,109 INFO: [generated in 0.00042s] {'description': '<p>FoobarWrite your task description...</p>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 30, 0, 105990), 'task_id': 284}
2025-03-04 19:30:00,113 INFO: COMMIT
2025-03-04 19:30:00,116 INFO: Task ID 284 updated successfully. Updated fields: ['description']
2025-03-04 19:30:00,116 INFO: BEGIN (implicit)
2025-03-04 19:30:00,117 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:00,117 INFO: [cached since 3430s ago] {'pk_1': 284}
2025-03-04 19:30:00,119 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:30:00,119 INFO: [cached since 3534s ago] {'pk_1': 5}
2025-03-04 19:30:00,120 INFO: ROLLBACK
2025-03-04 19:30:00,122 INFO: 127.0.0.1 - - [04/Mar/2025 19:30:00] "PATCH /api/tasks/284 HTTP/1.1" 200 -
2025-03-04 19:30:01,320 INFO: BEGIN (implicit)
2025-03-04 19:30:01,321 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:01,322 INFO: [cached since 3535s ago] {'pk_1': 284}
2025-03-04 19:30:01,324 DEBUG: Received update payload for Task ID 284: {'description': '<p>Foobar Write your task description...</p>'}
2025-03-04 19:30:01,325 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:30:01,325 INFO: [cached since 1.216s ago] {'description': '<p>Foobar Write your task description...</p>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 30, 1, 324692), 'task_id': 284}
2025-03-04 19:30:01,327 INFO: COMMIT
2025-03-04 19:30:01,329 INFO: Task ID 284 updated successfully. Updated fields: ['description']
2025-03-04 19:30:01,329 INFO: BEGIN (implicit)
2025-03-04 19:30:01,330 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:01,331 INFO: [cached since 3431s ago] {'pk_1': 284}
2025-03-04 19:30:01,332 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:30:01,332 INFO: [cached since 3535s ago] {'pk_1': 5}
2025-03-04 19:30:01,335 INFO: ROLLBACK
2025-03-04 19:30:01,337 INFO: 127.0.0.1 - - [04/Mar/2025 19:30:01] "PATCH /api/tasks/284 HTTP/1.1" 200 -
2025-03-04 19:30:03,006 INFO: BEGIN (implicit)
2025-03-04 19:30:03,007 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:03,007 INFO: [cached since 3537s ago] {'pk_1': 284}
2025-03-04 19:30:03,009 DEBUG: Received update payload for Task ID 284: {'description': '<p>Foobar </p><p>Write your task description...</p>'}
2025-03-04 19:30:03,009 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:30:03,010 INFO: [cached since 2.901s ago] {'description': '<p>Foobar </p><p>Write your task description...</p>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 30, 3, 9427), 'task_id': 284}
2025-03-04 19:30:03,011 INFO: COMMIT
2025-03-04 19:30:03,012 INFO: Task ID 284 updated successfully. Updated fields: ['description']
2025-03-04 19:30:03,013 INFO: BEGIN (implicit)
2025-03-04 19:30:03,014 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:03,014 INFO: [cached since 3433s ago] {'pk_1': 284}
2025-03-04 19:30:03,016 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:30:03,016 INFO: [cached since 3537s ago] {'pk_1': 5}
2025-03-04 19:30:03,020 INFO: ROLLBACK
2025-03-04 19:30:03,029 INFO: 127.0.0.1 - - [04/Mar/2025 19:30:03] "PATCH /api/tasks/284 HTTP/1.1" 200 -
2025-03-04 19:30:06,261 INFO: 127.0.0.1 - - [04/Mar/2025 19:30:06] "OPTIONS /api/tasks/284 HTTP/1.1" 200 -
2025-03-04 19:30:06,265 INFO: BEGIN (implicit)
2025-03-04 19:30:06,266 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:06,269 INFO: [cached since 3540s ago] {'pk_1': 284}
2025-03-04 19:30:06,271 DEBUG: Received update payload for Task ID 284: {'description': '<p></p><p>Write your task description...</p>'}
2025-03-04 19:30:06,272 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:30:06,272 INFO: [cached since 6.163s ago] {'description': '<p></p><p>Write your task description...</p>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 30, 6, 271660), 'task_id': 284}
2025-03-04 19:30:06,273 INFO: COMMIT
2025-03-04 19:30:06,274 INFO: Task ID 284 updated successfully. Updated fields: ['description']
2025-03-04 19:30:06,274 INFO: BEGIN (implicit)
2025-03-04 19:30:06,275 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:06,275 INFO: [cached since 3436s ago] {'pk_1': 284}
2025-03-04 19:30:06,277 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:30:06,277 INFO: [cached since 3540s ago] {'pk_1': 5}
2025-03-04 19:30:06,278 INFO: ROLLBACK
2025-03-04 19:30:06,279 INFO: 127.0.0.1 - - [04/Mar/2025 19:30:06] "PATCH /api/tasks/284 HTTP/1.1" 200 -
2025-03-04 19:30:10,703 INFO: BEGIN (implicit)
2025-03-04 19:30:10,704 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:10,705 INFO: [cached since 3545s ago] {'pk_1': 284}
2025-03-04 19:30:10,706 DEBUG: Received update payload for Task ID 284: {'description': '<p>Foobar</p><p></p><p>Write your task description...</p>'}
2025-03-04 19:30:10,707 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:30:10,708 INFO: [cached since 10.6s ago] {'description': '<p>Foobar</p><p></p><p>Write your task description...</p>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 30, 10, 707175), 'task_id': 284}
2025-03-04 19:30:10,709 INFO: COMMIT
2025-03-04 19:30:10,710 INFO: Task ID 284 updated successfully. Updated fields: ['description']
2025-03-04 19:30:10,711 INFO: BEGIN (implicit)
2025-03-04 19:30:10,712 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:10,712 INFO: [cached since 3440s ago] {'pk_1': 284}
2025-03-04 19:30:10,714 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:30:10,714 INFO: [cached since 3545s ago] {'pk_1': 5}
2025-03-04 19:30:10,715 INFO: ROLLBACK
2025-03-04 19:30:10,717 INFO: 127.0.0.1 - - [04/Mar/2025 19:30:10] "PATCH /api/tasks/284 HTTP/1.1" 200 -
2025-03-04 19:30:11,909 INFO: 127.0.0.1 - - [04/Mar/2025 19:30:11] "OPTIONS /api/tasks/284 HTTP/1.1" 200 -
2025-03-04 19:30:11,912 INFO: BEGIN (implicit)
2025-03-04 19:30:11,913 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:11,913 INFO: [cached since 3546s ago] {'pk_1': 284}
2025-03-04 19:30:11,915 DEBUG: Received update payload for Task ID 284: {'description': '<p>Foobar</p><p>Write your task description...</p>'}
2025-03-04 19:30:11,917 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:30:11,918 INFO: [cached since 11.81s ago] {'description': '<p>Foobar</p><p>Write your task description...</p>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 30, 11, 915581), 'task_id': 284}
2025-03-04 19:30:11,919 INFO: COMMIT
2025-03-04 19:30:11,920 INFO: Task ID 284 updated successfully. Updated fields: ['description']
2025-03-04 19:30:11,921 INFO: BEGIN (implicit)
2025-03-04 19:30:11,922 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:11,922 INFO: [cached since 3441s ago] {'pk_1': 284}
2025-03-04 19:30:11,924 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:30:11,925 INFO: [cached since 3546s ago] {'pk_1': 5}
2025-03-04 19:30:11,926 INFO: ROLLBACK
2025-03-04 19:30:11,927 INFO: 127.0.0.1 - - [04/Mar/2025 19:30:11] "PATCH /api/tasks/284 HTTP/1.1" 200 -
2025-03-04 19:30:26,968 INFO: 127.0.0.1 - - [04/Mar/2025 19:30:26] "OPTIONS /api/tasks/284 HTTP/1.1" 200 -
2025-03-04 19:30:26,972 INFO: BEGIN (implicit)
2025-03-04 19:30:26,973 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:26,973 INFO: [cached since 3561s ago] {'pk_1': 284}
2025-03-04 19:30:26,974 DEBUG: Received update payload for Task ID 284: {'description': '<p>oobar</p><p>Write your task description...</p>'}
2025-03-04 19:30:26,975 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:30:26,976 INFO: [cached since 26.87s ago] {'description': '<p>oobar</p><p>Write your task description...</p>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 30, 26, 975055), 'task_id': 284}
2025-03-04 19:30:26,977 INFO: COMMIT
2025-03-04 19:30:26,978 INFO: Task ID 284 updated successfully. Updated fields: ['description']
2025-03-04 19:30:26,978 INFO: BEGIN (implicit)
2025-03-04 19:30:26,979 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:26,979 INFO: [cached since 3457s ago] {'pk_1': 284}
2025-03-04 19:30:26,980 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:30:26,980 INFO: [cached since 3561s ago] {'pk_1': 5}
2025-03-04 19:30:26,982 INFO: ROLLBACK
2025-03-04 19:30:26,983 INFO: 127.0.0.1 - - [04/Mar/2025 19:30:26] "PATCH /api/tasks/284 HTTP/1.1" 200 -
2025-03-04 19:30:28,946 INFO: BEGIN (implicit)
2025-03-04 19:30:28,947 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:28,947 INFO: [cached since 3563s ago] {'pk_1': 284}
2025-03-04 19:30:28,949 DEBUG: Received update payload for Task ID 284: {'description': '<p>`oobar</p><p>Write your task description...</p>'}
2025-03-04 19:30:28,950 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:30:28,950 INFO: [cached since 28.84s ago] {'description': '<p>`oobar</p><p>Write your task description...</p>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 30, 28, 949564), 'task_id': 284}
2025-03-04 19:30:28,952 INFO: COMMIT
2025-03-04 19:30:28,953 INFO: Task ID 284 updated successfully. Updated fields: ['description']
2025-03-04 19:30:28,953 INFO: BEGIN (implicit)
2025-03-04 19:30:28,954 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:28,954 INFO: [cached since 3459s ago] {'pk_1': 284}
2025-03-04 19:30:28,956 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:30:28,956 INFO: [cached since 3563s ago] {'pk_1': 5}
2025-03-04 19:30:28,958 INFO: ROLLBACK
2025-03-04 19:30:28,960 INFO: 127.0.0.1 - - [04/Mar/2025 19:30:28] "PATCH /api/tasks/284 HTTP/1.1" 200 -
2025-03-04 19:30:30,728 INFO: BEGIN (implicit)
2025-03-04 19:30:30,729 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:30,729 INFO: [cached since 3565s ago] {'pk_1': 284}
2025-03-04 19:30:30,730 DEBUG: Received update payload for Task ID 284: {'description': '<p>`foobar</p><p>Write your task description...</p>'}
2025-03-04 19:30:30,731 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:30:30,731 INFO: [cached since 30.62s ago] {'description': '<p>`foobar</p><p>Write your task description...</p>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 30, 30, 730729), 'task_id': 284}
2025-03-04 19:30:30,732 INFO: COMMIT
2025-03-04 19:30:30,733 INFO: Task ID 284 updated successfully. Updated fields: ['description']
2025-03-04 19:30:30,735 INFO: BEGIN (implicit)
2025-03-04 19:30:30,736 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:30,736 INFO: [cached since 3460s ago] {'pk_1': 284}
2025-03-04 19:30:30,737 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:30:30,738 INFO: [cached since 3565s ago] {'pk_1': 5}
2025-03-04 19:30:30,743 INFO: ROLLBACK
2025-03-04 19:30:30,746 INFO: 127.0.0.1 - - [04/Mar/2025 19:30:30] "PATCH /api/tasks/284 HTTP/1.1" 200 -
2025-03-04 19:30:34,502 INFO: 127.0.0.1 - - [04/Mar/2025 19:30:34] "OPTIONS /api/tasks/284 HTTP/1.1" 200 -
2025-03-04 19:30:34,507 INFO: BEGIN (implicit)
2025-03-04 19:30:34,509 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:34,509 INFO: [cached since 3568s ago] {'pk_1': 284}
2025-03-04 19:30:34,511 DEBUG: Received update payload for Task ID 284: {'description': '<p>`<code>oobar`</code></p><p>Write your task description...</p>'}
2025-03-04 19:30:34,511 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:30:34,511 INFO: [cached since 34.4s ago] {'description': '<p>`<code>oobar`</code></p><p>Write your task description...</p>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 30, 34, 511314), 'task_id': 284}
2025-03-04 19:30:34,512 INFO: COMMIT
2025-03-04 19:30:34,513 INFO: Task ID 284 updated successfully. Updated fields: ['description']
2025-03-04 19:30:34,514 INFO: BEGIN (implicit)
2025-03-04 19:30:34,515 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:34,515 INFO: [cached since 3464s ago] {'pk_1': 284}
2025-03-04 19:30:34,517 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:30:34,517 INFO: [cached since 3568s ago] {'pk_1': 5}
2025-03-04 19:30:34,519 INFO: ROLLBACK
2025-03-04 19:30:34,519 INFO: 127.0.0.1 - - [04/Mar/2025 19:30:34] "PATCH /api/tasks/284 HTTP/1.1" 200 -
2025-03-04 19:30:41,900 INFO: 127.0.0.1 - - [04/Mar/2025 19:30:41] "OPTIONS /api/tasks/284 HTTP/1.1" 200 -
2025-03-04 19:30:41,904 INFO: BEGIN (implicit)
2025-03-04 19:30:41,904 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:41,905 INFO: [cached since 3576s ago] {'pk_1': 284}
2025-03-04 19:30:41,906 DEBUG: Received update payload for Task ID 284: {'description': '<p>`<code>oobar`</code></p><p></p><p>Write your task description...</p>'}
2025-03-04 19:30:41,907 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:30:41,908 INFO: [cached since 41.8s ago] {'description': '<p>`<code>oobar`</code></p><p></p><p>Write your task description...</p>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 30, 41, 907151), 'task_id': 284}
2025-03-04 19:30:41,909 INFO: COMMIT
2025-03-04 19:30:41,910 INFO: Task ID 284 updated successfully. Updated fields: ['description']
2025-03-04 19:30:41,911 INFO: BEGIN (implicit)
2025-03-04 19:30:41,911 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:41,912 INFO: [cached since 3471s ago] {'pk_1': 284}
2025-03-04 19:30:41,914 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:30:41,914 INFO: [cached since 3576s ago] {'pk_1': 5}
2025-03-04 19:30:41,916 INFO: ROLLBACK
2025-03-04 19:30:41,918 INFO: 127.0.0.1 - - [04/Mar/2025 19:30:41] "PATCH /api/tasks/284 HTTP/1.1" 200 -
2025-03-04 19:30:43,246 INFO: BEGIN (implicit)
2025-03-04 19:30:43,247 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:43,247 INFO: [cached since 3577s ago] {'pk_1': 284}
2025-03-04 19:30:43,249 DEBUG: Received update payload for Task ID 284: {'description': '<p>`<code>oobar`</code></p><p></p><p></p><p></p><p>Write your task description...</p>'}
2025-03-04 19:30:43,251 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:30:43,251 INFO: [cached since 43.14s ago] {'description': '<p>`<code>oobar`</code></p><p></p><p></p><p></p><p>Write your task description...</p>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 30, 43, 249830), 'task_id': 284}
2025-03-04 19:30:43,252 INFO: COMMIT
2025-03-04 19:30:43,254 INFO: Task ID 284 updated successfully. Updated fields: ['description']
2025-03-04 19:30:43,255 INFO: BEGIN (implicit)
2025-03-04 19:30:43,255 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:43,255 INFO: [cached since 3473s ago] {'pk_1': 284}
2025-03-04 19:30:43,257 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:30:43,257 INFO: [cached since 3577s ago] {'pk_1': 5}
2025-03-04 19:30:43,258 INFO: ROLLBACK
2025-03-04 19:30:43,259 INFO: 127.0.0.1 - - [04/Mar/2025 19:30:43] "PATCH /api/tasks/284 HTTP/1.1" 200 -
2025-03-04 19:30:46,268 INFO: BEGIN (implicit)
2025-03-04 19:30:46,269 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:46,269 INFO: [cached since 3580s ago] {'pk_1': 284}
2025-03-04 19:30:46,270 DEBUG: Received update payload for Task ID 284: {'description': '<p>`<code>oob</code></p><p></p><p></p><p><code>ar`</code></p><p></p><p></p><p></p><p>Write your task description...</p>'}
2025-03-04 19:30:46,271 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:30:46,271 INFO: [cached since 46.16s ago] {'description': '<p>`<code>oob</code></p><p></p><p></p><p><code>ar`</code></p><p></p><p></p><p></p><p>Write your task description...</p>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 30, 46, 270806), 'task_id': 284}
2025-03-04 19:30:46,272 INFO: COMMIT
2025-03-04 19:30:46,274 INFO: Task ID 284 updated successfully. Updated fields: ['description']
2025-03-04 19:30:46,276 INFO: BEGIN (implicit)
2025-03-04 19:30:46,276 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:46,277 INFO: [cached since 3476s ago] {'pk_1': 284}
2025-03-04 19:30:46,280 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:30:46,280 INFO: [cached since 3580s ago] {'pk_1': 5}
2025-03-04 19:30:46,282 INFO: ROLLBACK
2025-03-04 19:30:46,283 INFO: 127.0.0.1 - - [04/Mar/2025 19:30:46] "PATCH /api/tasks/284 HTTP/1.1" 200 -
2025-03-04 19:30:49,370 INFO: 127.0.0.1 - - [04/Mar/2025 19:30:49] "OPTIONS /api/tasks/284 HTTP/1.1" 200 -
2025-03-04 19:30:49,374 INFO: BEGIN (implicit)
2025-03-04 19:30:49,375 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:49,375 INFO: [cached since 3583s ago] {'pk_1': 284}
2025-03-04 19:30:49,377 DEBUG: Received update payload for Task ID 284: {'description': '<p>`<code>oo      b</code></p><p></p><p></p><p><code>ar`</code></p><p></p><p></p><p></p><p>Write your task description...</p>'}
2025-03-04 19:30:49,379 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:30:49,379 INFO: [cached since 49.27s ago] {'description': '<p>`<code>oo      b</code></p><p></p><p></p><p><code>ar`</code></p><p></p><p></p><p></p><p>Write your task description...</p>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 30, 49, 377855), 'task_id': 284}
2025-03-04 19:30:49,380 INFO: COMMIT
2025-03-04 19:30:49,382 INFO: Task ID 284 updated successfully. Updated fields: ['description']
2025-03-04 19:30:49,383 INFO: BEGIN (implicit)
2025-03-04 19:30:49,383 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:49,383 INFO: [cached since 3479s ago] {'pk_1': 284}
2025-03-04 19:30:49,386 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:30:49,386 INFO: [cached since 3583s ago] {'pk_1': 5}
2025-03-04 19:30:49,387 INFO: ROLLBACK
2025-03-04 19:30:49,389 INFO: 127.0.0.1 - - [04/Mar/2025 19:30:49] "PATCH /api/tasks/284 HTTP/1.1" 200 -
2025-03-04 19:30:52,580 INFO: BEGIN (implicit)
2025-03-04 19:30:52,581 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:52,582 INFO: [cached since 3586s ago] {'pk_1': 284}
2025-03-04 19:30:52,583 DEBUG: Received update payload for Task ID 284: {'description': '<p></p><p></p><p></p><p></p><p>Write your task description...</p>'}
2025-03-04 19:30:52,584 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:30:52,584 INFO: [cached since 52.48s ago] {'description': '<p></p><p></p><p></p><p></p><p>Write your task description...</p>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 30, 52, 584241), 'task_id': 284}
2025-03-04 19:30:52,585 INFO: COMMIT
2025-03-04 19:30:52,586 INFO: Task ID 284 updated successfully. Updated fields: ['description']
2025-03-04 19:30:52,587 INFO: BEGIN (implicit)
2025-03-04 19:30:52,588 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:52,588 INFO: [cached since 3482s ago] {'pk_1': 284}
2025-03-04 19:30:52,590 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:30:52,590 INFO: [cached since 3586s ago] {'pk_1': 5}
2025-03-04 19:30:52,591 INFO: ROLLBACK
2025-03-04 19:30:52,593 INFO: 127.0.0.1 - - [04/Mar/2025 19:30:52] "PATCH /api/tasks/284 HTTP/1.1" 200 -
2025-03-04 19:30:55,420 INFO: 127.0.0.1 - - [04/Mar/2025 19:30:55] "OPTIONS /api/tasks/284 HTTP/1.1" 200 -
2025-03-04 19:30:55,424 INFO: BEGIN (implicit)
2025-03-04 19:30:55,424 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:55,424 INFO: [cached since 3589s ago] {'pk_1': 284}
2025-03-04 19:30:55,426 DEBUG: Received update payload for Task ID 284: {'description': '<pre><code></code></pre><p></p><p></p><p></p><p>Write your task description...</p>'}
2025-03-04 19:30:55,428 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:30:55,428 INFO: [cached since 55.32s ago] {'description': '<pre><code></code></pre><p></p><p></p><p></p><p>Write your task description...</p>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 30, 55, 427567), 'task_id': 284}
2025-03-04 19:30:55,430 INFO: COMMIT
2025-03-04 19:30:55,431 INFO: Task ID 284 updated successfully. Updated fields: ['description']
2025-03-04 19:30:55,431 INFO: BEGIN (implicit)
2025-03-04 19:30:55,432 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:30:55,432 INFO: [cached since 3485s ago] {'pk_1': 284}
2025-03-04 19:30:55,435 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:30:55,436 INFO: [cached since 3589s ago] {'pk_1': 5}
2025-03-04 19:30:55,438 INFO: ROLLBACK
2025-03-04 19:30:55,439 INFO: 127.0.0.1 - - [04/Mar/2025 19:30:55] "PATCH /api/tasks/284 HTTP/1.1" 200 -
2025-03-04 19:32:27,232 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:27] "GET /socket.io/?EIO=4&transport=polling&t=ttabu3ei HTTP/1.1" 200 -
2025-03-04 19:32:27,237 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:27] "POST /socket.io/?EIO=4&transport=polling&t=ttahvy8q&sid=ew__UW4jmMfCUf96AAAU HTTP/1.1" 200 -
2025-03-04 19:32:27,239 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:27] "GET /socket.io/?EIO=4&transport=polling&t=ttahwn16&sid=ew__UW4jmMfCUf96AAAU HTTP/1.1" 200 -
2025-03-04 19:32:27,241 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:27] "GET /socket.io/?EIO=4&transport=polling&t=ttai0tq3&sid=ew__UW4jmMfCUf96AAAU HTTP/1.1" 200 -
2025-03-04 19:32:27,252 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:27] "GET /socket.io/?EIO=4&transport=websocket&sid=81SRCIz5JENcvCiMAAAK HTTP/1.1" 200 -
2025-03-04 19:32:27,522 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:27] "GET /socket.io/?EIO=4&transport=polling&t=ttaprhov HTTP/1.1" 200 -
2025-03-04 19:32:27,534 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:27] "POST /socket.io/?EIO=4&transport=polling&t=ttaq4s0e&sid=pFgGegNsRcMKYW2IAAAW HTTP/1.1" 200 -
2025-03-04 19:32:27,543 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:27] "GET /socket.io/?EIO=4&transport=polling&t=ttaq5zo3&sid=pFgGegNsRcMKYW2IAAAW HTTP/1.1" 200 -
2025-03-04 19:32:27,556 INFO: Entering list_tasks_json route...
2025-03-04 19:32:27,568 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:27] "GET /socket.io/?EIO=4&transport=polling&t=ttaqt1q8&sid=pFgGegNsRcMKYW2IAAAW HTTP/1.1" 200 -
2025-03-04 19:32:27,588 INFO: BEGIN (implicit)
2025-03-04 19:32:27,589 INFO: BEGIN (implicit)
2025-03-04 19:32:27,589 DEBUG: Filters used in API: {'is_archived': False}
2025-03-04 19:32:27,596 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-04 19:32:27,599 INFO: [cached since 3726s ago] {}
2025-03-04 19:32:27,598 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-04 19:32:27,599 INFO: [cached since 3726s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-04 19:32:27,597 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:27] "GET /socket.io/?EIO=4&transport=polling&t=ttarqmxf&sid=pFgGegNsRcMKYW2IAAAW HTTP/1.1" 200 -
2025-03-04 19:32:27,599 DEBUG: Applying filters: {'is_archived': False}
2025-03-04 19:32:27,607 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-04 19:32:27,612 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-04 19:32:27,614 INFO: [cached since 3726s ago] {}
2025-03-04 19:32:27,613 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:32:27,614 INFO: [cached since 3726s ago] {'param_1': 1}
2025-03-04 19:32:27,614 INFO: BEGIN (implicit)
2025-03-04 19:32:27,615 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-04 19:32:27,615 INFO: [cached since 3726s ago] {'param_1': 700, 'param_2': 0}
2025-03-04 19:32:27,617 INFO: ROLLBACK
2025-03-04 19:32:27,618 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:32:27,619 INFO: [cached since 3726s ago] {'param_1': 2}
2025-03-04 19:32:27,619 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:27] "GET /api/projects HTTP/1.1" 200 -
2025-03-04 19:32:27,621 INFO: BEGIN (implicit)
2025-03-04 19:32:27,622 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-04 19:32:27,622 INFO: [cached since 3726s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-04 19:32:27,623 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:32:27,624 INFO: [cached since 3726s ago] {'param_1': 3}
2025-03-04 19:32:27,625 INFO: BEGIN (implicit)
2025-03-04 19:32:27,626 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:32:27,627 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-04 19:32:27,627 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-04 19:32:27,627 INFO: [cached since 3726s ago] {'param_1': 4}
2025-03-04 19:32:27,627 INFO: [cached since 3726s ago] {}
2025-03-04 19:32:27,627 INFO: [cached since 3726s ago] {'pk_1': 19}
2025-03-04 19:32:27,629 INFO: ROLLBACK
2025-03-04 19:32:27,630 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-04 19:32:27,631 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:32:27,632 INFO: [cached since 3726s ago] {}
2025-03-04 19:32:27,633 INFO: [cached since 3726s ago] {'param_1': 5}
2025-03-04 19:32:27,633 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:27] "GET /api/projects HTTP/1.1" 200 -
2025-03-04 19:32:27,635 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-04 19:32:27,635 INFO: [cached since 3726s ago] {'param_1': 19}
2025-03-04 19:32:27,636 INFO: ROLLBACK
2025-03-04 19:32:27,637 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:27] "GET /api/contributors HTTP/1.1" 200 -
2025-03-04 19:32:27,643 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:32:27,643 INFO: [cached since 3726s ago] {'param_1': 1}
2025-03-04 19:32:27,648 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:32:27,649 INFO: [cached since 3726s ago] {'param_1': 2}
2025-03-04 19:32:27,652 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:32:27,652 INFO: [cached since 3726s ago] {'param_1': 3}
2025-03-04 19:32:27,653 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:32:27,653 INFO: [cached since 3726s ago] {'param_1': 4}
2025-03-04 19:32:27,675 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:32:27,686 INFO: [cached since 3726s ago] {'param_1': 5}
2025-03-04 19:32:27,692 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-04 19:32:27,693 INFO: [cached since 3726s ago] {}
2025-03-04 19:32:27,693 INFO: ROLLBACK
2025-03-04 19:32:27,695 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-04 19:32:27,695 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:27] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-04 19:32:27,695 INFO: [cached since 3726s ago] {}
2025-03-04 19:32:27,698 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-04 19:32:27,698 INFO: [cached since 3726s ago] {}
2025-03-04 19:32:27,701 INFO: ROLLBACK
2025-03-04 19:32:27,701 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:27] "GET /api/tasks HTTP/1.1" 200 -
2025-03-04 19:32:30,953 INFO: Fetching task details for Task ID 266.
2025-03-04 19:32:30,954 INFO: Fetching task with ID 266.
2025-03-04 19:32:30,955 INFO: BEGIN (implicit)
2025-03-04 19:32:30,955 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:32:30,955 INFO: [cached since 3685s ago] {'pk_1': 266}
2025-03-04 19:32:30,957 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x10eaa3b30>, 'epic_priority': None, 'contributor_id': 5, 'story_points': 0, 'id': 266, 'is_archived': False, 'completed_date': None, 'name': 'Highlight the nested tasks', 'completed': False, 'sort_order': 2, 'created_at': datetime.datetime(2025, 2, 8, 2, 28, 30, 382949), 'description': '<p>lkjlkjlkjlkjlkjlkjWrite your task description...</p><p></p><p></p>', 'status': 'Not Started', 'updated_at': datetime.datetime(2025, 3, 3, 17, 32, 52, 809368), 'parent_id': None, 'task_type': 'User Story', 'project_id': 7, 'priority': 'Medium'}
2025-03-04 19:32:30,958 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-04 19:32:30,958 INFO: [cached since 3685s ago] {'pk_1': 7}
2025-03-04 19:32:30,959 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:32:30,959 INFO: [cached since 3685s ago] {'pk_1': 5}
2025-03-04 19:32:30,960 INFO: Task ID 266 fetched with parent ID: None
2025-03-04 19:32:30,960 INFO: Task with ID 266 fetched successfully.
2025-03-04 19:32:30,960 DEBUG: Fetched Task Data: {'id': 266, 'name': 'Highlight the nested tasks', 'description': '<p>lkjlkjlkjlkjlkjlkjWrite your task description...</p><p></p><p></p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 0, 'status': 'Not Started', 'sort_order': 2, 'created_at': '2025-02-08T02:28:30.382949', 'updated_at': '2025-03-03T17:32:52.809368', 'contributor_name': 'Fredrik Cederborg', 'parent': None}
2025-03-04 19:32:30,961 INFO: Task details fetched successfully for Task ID 266.
2025-03-04 19:32:30,962 INFO: ROLLBACK
2025-03-04 19:32:30,962 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:30] "GET /api/tasks/266 HTTP/1.1" 200 -
2025-03-04 19:32:31,114 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:31] "OPTIONS /tasks/available_tasks?task_type=User%20Story&exclude_task_id=266&page=1&limit=30 HTTP/1.1" 200 -
2025-03-04 19:32:31,115 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:31] "OPTIONS /tasks/available_tasks?task_type=User%20Story&exclude_task_id=266&page=1&limit=30 HTTP/1.1" 200 -
2025-03-04 19:32:31,117 INFO: BEGIN (implicit)
2025-03-04 19:32:31,118 INFO: Entering available_tasks route...
2025-03-04 19:32:31,119 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-04 19:32:31,119 DEBUG: Query parameters: task_type=User Story, exclude_task_id=266, search_term=, project_id=None, limit=30, page=1
2025-03-04 19:32:31,119 INFO: [cached since 3729s ago] {'pk_1': 7}
2025-03-04 19:32:31,120 INFO: BEGIN (implicit)
2025-03-04 19:32:31,120 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:32:31,120 INFO: [cached since 3685s ago] {'pk_1': 266}
2025-03-04 19:32:31,122 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-04 19:32:31,123 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 266, 'task_type': ['User Story']}
2025-03-04 19:32:31,124 INFO: Validating hierarchy for Task N/A
2025-03-04 19:32:31,123 INFO: [cached since 3729s ago] {}
2025-03-04 19:32:31,124 INFO: Determining valid parent types for task_type: User Story
2025-03-04 19:32:31,124 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 266, 'task_type': ['Epic']}
2025-03-04 19:32:31,128 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-04 19:32:31,128 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-04 19:32:31,129 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-04 19:32:31,129 INFO: [cached since 3729s ago] {'param_1': 7}
2025-03-04 19:32:31,129 INFO: [cached since 3685s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-04 19:32:31,130 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:32:31,130 INFO: [cached since 3729s ago] {'param_1': 1}
2025-03-04 19:32:31,131 DEBUG: Tasks returned: [{'id': 327, 'name': 'üèÜ\xa0Epic: AI-Driven Feature Planning & Estimation', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 267, 'name': 'Improvements to toggles and nested tasks', 'task_type': 'Epic', 'is_parent': False}, {'id': 325, 'name': 'Improve task list responsive grid', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okr¬¥s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 284, 'name': 'Add type "issue/bug"', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notifications', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}]
2025-03-04 19:32:31,131 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:32:31,131 INFO: ROLLBACK
2025-03-04 19:32:31,132 INFO: [cached since 3729s ago] {'param_1': 2}
2025-03-04 19:32:31,132 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:31] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=266&page=1&limit=30 HTTP/1.1" 200 -
2025-03-04 19:32:31,132 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:32:31,133 INFO: [cached since 3729s ago] {'param_1': 3}
2025-03-04 19:32:31,134 INFO: Entering available_tasks route...
2025-03-04 19:32:31,135 DEBUG: Query parameters: task_type=User Story, exclude_task_id=266, search_term=, project_id=None, limit=30, page=1
2025-03-04 19:32:31,135 INFO: BEGIN (implicit)
2025-03-04 19:32:31,135 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:32:31,136 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:32:31,136 INFO: [cached since 3729s ago] {'param_1': 4}
2025-03-04 19:32:31,136 INFO: [cached since 3685s ago] {'pk_1': 266}
2025-03-04 19:32:31,136 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:32:31,136 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 266, 'task_type': ['User Story']}
2025-03-04 19:32:31,136 INFO: [cached since 3729s ago] {'param_1': 5}
2025-03-04 19:32:31,136 INFO: Validating hierarchy for Task N/A
2025-03-04 19:32:31,137 INFO: Determining valid parent types for task_type: User Story
2025-03-04 19:32:31,137 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 266, 'task_type': ['Epic']}
2025-03-04 19:32:31,139 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-04 19:32:31,139 INFO: ROLLBACK
2025-03-04 19:32:31,140 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-04 19:32:31,140 INFO: [cached since 3685s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-04 19:32:31,140 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:31] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-04 19:32:31,141 DEBUG: Tasks returned: [{'id': 327, 'name': 'üèÜ\xa0Epic: AI-Driven Feature Planning & Estimation', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 267, 'name': 'Improvements to toggles and nested tasks', 'task_type': 'Epic', 'is_parent': False}, {'id': 325, 'name': 'Improve task list responsive grid', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okr¬¥s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 284, 'name': 'Add type "issue/bug"', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notifications', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}]
2025-03-04 19:32:31,142 INFO: ROLLBACK
2025-03-04 19:32:31,143 INFO: BEGIN (implicit)
2025-03-04 19:32:31,143 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-04 19:32:31,143 INFO: [cached since 3729s ago] {'pk_1': 7}
2025-03-04 19:32:31,144 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:31] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=266&page=1&limit=30 HTTP/1.1" 200 -
2025-03-04 19:32:31,144 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-04 19:32:31,145 INFO: [cached since 3729s ago] {}
2025-03-04 19:32:31,146 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-04 19:32:31,146 INFO: [cached since 3729s ago] {'param_1': 7}
2025-03-04 19:32:31,146 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:32:31,147 INFO: [cached since 3729s ago] {'param_1': 1}
2025-03-04 19:32:31,147 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:32:31,147 INFO: [cached since 3729s ago] {'param_1': 2}
2025-03-04 19:32:31,148 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:32:31,148 INFO: [cached since 3729s ago] {'param_1': 3}
2025-03-04 19:32:31,148 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:32:31,148 INFO: [cached since 3729s ago] {'param_1': 4}
2025-03-04 19:32:31,149 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:32:31,149 INFO: [cached since 3729s ago] {'param_1': 5}
2025-03-04 19:32:31,150 INFO: ROLLBACK
2025-03-04 19:32:31,150 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:31] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-04 19:32:35,825 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:35] "OPTIONS /api/tasks/266 HTTP/1.1" 200 -
2025-03-04 19:32:35,828 INFO: BEGIN (implicit)
2025-03-04 19:32:35,829 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:32:35,829 INFO: [cached since 3690s ago] {'pk_1': 266}
2025-03-04 19:32:35,832 DEBUG: Received update payload for Task ID 266: {'description': '<p>lkjlkjlkjlkjlkjlkjWrite your task description...</p><p></p><pre><code></code></pre>'}
2025-03-04 19:32:35,834 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:32:35,835 INFO: [cached since 155.7s ago] {'description': '<p>lkjlkjlkjlkjlkjlkjWrite your task description...</p><p></p><pre><code></code></pre>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 32, 35, 833233), 'task_id': 266}
2025-03-04 19:32:35,836 INFO: COMMIT
2025-03-04 19:32:35,839 INFO: Task ID 266 updated successfully. Updated fields: ['description']
2025-03-04 19:32:35,839 INFO: BEGIN (implicit)
2025-03-04 19:32:35,840 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:32:35,840 INFO: [cached since 3585s ago] {'pk_1': 266}
2025-03-04 19:32:35,842 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:32:35,842 INFO: [cached since 3690s ago] {'pk_1': 5}
2025-03-04 19:32:35,843 INFO: ROLLBACK
2025-03-04 19:32:35,844 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:35] "PATCH /api/tasks/266 HTTP/1.1" 200 -
2025-03-04 19:32:40,833 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:40] "OPTIONS /api/tasks/266 HTTP/1.1" 200 -
2025-03-04 19:32:40,838 INFO: BEGIN (implicit)
2025-03-04 19:32:40,839 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:32:40,839 INFO: [cached since 3695s ago] {'pk_1': 266}
2025-03-04 19:32:40,841 DEBUG: Received update payload for Task ID 266: {'description': '<p>lkjlkjlkjlkjlkjlkjWrite your task description...</p><p></p><pre><code></code></pre><p></p><p></p><p></p><p></p>'}
2025-03-04 19:32:40,842 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:32:40,843 INFO: [cached since 160.7s ago] {'description': '<p>lkjlkjlkjlkjlkjlkjWrite your task description...</p><p></p><pre><code></code></pre><p></p><p></p><p></p><p></p>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 32, 40, 842157), 'task_id': 266}
2025-03-04 19:32:40,844 INFO: COMMIT
2025-03-04 19:32:40,845 INFO: Task ID 266 updated successfully. Updated fields: ['description']
2025-03-04 19:32:40,845 INFO: BEGIN (implicit)
2025-03-04 19:32:40,846 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:32:40,846 INFO: [cached since 3590s ago] {'pk_1': 266}
2025-03-04 19:32:40,847 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:32:40,847 INFO: [cached since 3695s ago] {'pk_1': 5}
2025-03-04 19:32:40,849 INFO: ROLLBACK
2025-03-04 19:32:40,849 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:40] "PATCH /api/tasks/266 HTTP/1.1" 200 -
2025-03-04 19:32:43,216 INFO: BEGIN (implicit)
2025-03-04 19:32:43,217 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:32:43,218 INFO: [cached since 3697s ago] {'pk_1': 266}
2025-03-04 19:32:43,220 DEBUG: Received update payload for Task ID 266: {'description': '<p>lkjlkjlkjlkjlkjlkjWrite your task description...</p><p></p><pre><code></code></pre><p></p><p></p><p></p><p></p><p></p><p></p>'}
2025-03-04 19:32:43,220 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:32:43,221 INFO: [cached since 163.1s ago] {'description': '<p>lkjlkjlkjlkjlkjlkjWrite your task description...</p><p></p><pre><code></code></pre><p></p><p></p><p></p><p></p><p></p><p></p>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 32, 43, 220428), 'task_id': 266}
2025-03-04 19:32:43,222 INFO: COMMIT
2025-03-04 19:32:43,224 INFO: Task ID 266 updated successfully. Updated fields: ['description']
2025-03-04 19:32:43,224 INFO: BEGIN (implicit)
2025-03-04 19:32:43,225 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:32:43,225 INFO: [cached since 3593s ago] {'pk_1': 266}
2025-03-04 19:32:43,226 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:32:43,227 INFO: [cached since 3697s ago] {'pk_1': 5}
2025-03-04 19:32:43,228 INFO: ROLLBACK
2025-03-04 19:32:43,229 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:43] "PATCH /api/tasks/266 HTTP/1.1" 200 -
2025-03-04 19:32:45,369 INFO: BEGIN (implicit)
2025-03-04 19:32:45,370 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:32:45,370 INFO: [cached since 3699s ago] {'pk_1': 266}
2025-03-04 19:32:45,372 DEBUG: Received update payload for Task ID 266: {'description': '<p>lkjlkjlkjlkjlkjlkjWrite your task description...</p><p></p><pre><code>\n\n</code></pre><p></p><p></p><p></p><p></p><p></p><p></p>'}
2025-03-04 19:32:45,373 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:32:45,373 INFO: [cached since 165.3s ago] {'description': '<p>lkjlkjlkjlkjlkjlkjWrite your task description...</p><p></p><pre><code>\n\n</code></pre><p></p><p></p><p></p><p></p><p></p><p></p>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 32, 45, 373007), 'task_id': 266}
2025-03-04 19:32:45,376 INFO: COMMIT
2025-03-04 19:32:45,377 INFO: Task ID 266 updated successfully. Updated fields: ['description']
2025-03-04 19:32:45,378 INFO: BEGIN (implicit)
2025-03-04 19:32:45,379 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:32:45,379 INFO: [cached since 3595s ago] {'pk_1': 266}
2025-03-04 19:32:45,381 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:32:45,381 INFO: [cached since 3699s ago] {'pk_1': 5}
2025-03-04 19:32:45,383 INFO: ROLLBACK
2025-03-04 19:32:45,384 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:45] "PATCH /api/tasks/266 HTTP/1.1" 200 -
2025-03-04 19:32:46,472 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:46] "OPTIONS /api/tasks/266 HTTP/1.1" 200 -
2025-03-04 19:32:46,476 INFO: BEGIN (implicit)
2025-03-04 19:32:46,476 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:32:46,477 INFO: [cached since 3700s ago] {'pk_1': 266}
2025-03-04 19:32:46,478 DEBUG: Received update payload for Task ID 266: {'description': '<p>lkjlkjlkjlkjlkjlkjWrite your task description...</p><p></p><pre><code></code></pre><p></p><p></p><p></p><p></p><p></p><p></p><p></p>'}
2025-03-04 19:32:46,479 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:32:46,479 INFO: [cached since 166.4s ago] {'description': '<p>lkjlkjlkjlkjlkjlkjWrite your task description...</p><p></p><pre><code></code></pre><p></p><p></p><p></p><p></p><p></p><p></p><p></p>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 32, 46, 478675), 'task_id': 266}
2025-03-04 19:32:46,481 INFO: COMMIT
2025-03-04 19:32:46,482 INFO: Task ID 266 updated successfully. Updated fields: ['description']
2025-03-04 19:32:46,483 INFO: BEGIN (implicit)
2025-03-04 19:32:46,484 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:32:46,484 INFO: [cached since 3596s ago] {'pk_1': 266}
2025-03-04 19:32:46,486 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:32:46,486 INFO: [cached since 3700s ago] {'pk_1': 5}
2025-03-04 19:32:46,487 INFO: ROLLBACK
2025-03-04 19:32:46,488 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:46] "PATCH /api/tasks/266 HTTP/1.1" 200 -
2025-03-04 19:32:48,018 INFO: BEGIN (implicit)
2025-03-04 19:32:48,019 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:32:48,019 INFO: [cached since 3702s ago] {'pk_1': 266}
2025-03-04 19:32:48,021 DEBUG: Received update payload for Task ID 266: {'description': '<p>lkjlkjlkjlkjlkjlkjWrite your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p>'}
2025-03-04 19:32:48,022 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:32:48,022 INFO: [cached since 167.9s ago] {'description': '<p>lkjlkjlkjlkjlkjlkjWrite your task description...</p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 32, 48, 21608), 'task_id': 266}
2025-03-04 19:32:48,023 INFO: COMMIT
2025-03-04 19:32:48,024 INFO: Task ID 266 updated successfully. Updated fields: ['description']
2025-03-04 19:32:48,025 INFO: BEGIN (implicit)
2025-03-04 19:32:48,026 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:32:48,026 INFO: [cached since 3598s ago] {'pk_1': 266}
2025-03-04 19:32:48,028 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:32:48,029 INFO: [cached since 3702s ago] {'pk_1': 5}
2025-03-04 19:32:48,030 INFO: ROLLBACK
2025-03-04 19:32:48,031 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:48] "PATCH /api/tasks/266 HTTP/1.1" 200 -
2025-03-04 19:32:51,466 INFO: BEGIN (implicit)
2025-03-04 19:32:51,467 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:32:51,467 INFO: [cached since 3705s ago] {'pk_1': 266}
2025-03-04 19:32:51,469 DEBUG: Received update payload for Task ID 266: {'description': '<p>lkjlkjlkjlkjlkjlkjWrite your task description...</p><p></p><pre><code></code></pre><p></p><p></p><p></p><p></p><p></p><p></p>'}
2025-03-04 19:32:51,470 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:32:51,470 INFO: [cached since 171.4s ago] {'description': '<p>lkjlkjlkjlkjlkjlkjWrite your task description...</p><p></p><pre><code></code></pre><p></p><p></p><p></p><p></p><p></p><p></p>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 32, 51, 469559), 'task_id': 266}
2025-03-04 19:32:51,471 INFO: COMMIT
2025-03-04 19:32:51,472 INFO: Task ID 266 updated successfully. Updated fields: ['description']
2025-03-04 19:32:51,473 INFO: BEGIN (implicit)
2025-03-04 19:32:51,474 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:32:51,474 INFO: [cached since 3601s ago] {'pk_1': 266}
2025-03-04 19:32:51,476 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:32:51,477 INFO: [cached since 3705s ago] {'pk_1': 5}
2025-03-04 19:32:51,478 INFO: ROLLBACK
2025-03-04 19:32:51,480 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:51] "PATCH /api/tasks/266 HTTP/1.1" 200 -
2025-03-04 19:32:58,287 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:58] "OPTIONS /api/tasks/266 HTTP/1.1" 200 -
2025-03-04 19:32:58,292 INFO: BEGIN (implicit)
2025-03-04 19:32:58,293 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:32:58,294 INFO: [cached since 3712s ago] {'pk_1': 266}
2025-03-04 19:32:58,296 DEBUG: Received update payload for Task ID 266: {'description': '<p>lkjlkjlkjlkjlkjlkjWrite your task description...</p><p></p><pre><code>l√∂k√∂lksad\nasd\n\nasd\nad\na\ndff\nfr¬®fge\new\nedf</code></pre><p></p><p></p><p></p><p></p><p></p><p></p>'}
2025-03-04 19:32:58,298 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:32:58,298 INFO: [cached since 178.2s ago] {'description': '<p>lkjlkjlkjlkjlkjlkjWrite your task description...</p><p></p><pre><code>l√∂k√∂lksad\nasd\n\nasd\nad\na\ndff\nfr¬®fge\new\nedf</code></pre><p></p><p></p><p></p><p></p><p></p><p></p>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 32, 58, 296992), 'task_id': 266}
2025-03-04 19:32:58,300 INFO: COMMIT
2025-03-04 19:32:58,302 INFO: Task ID 266 updated successfully. Updated fields: ['description']
2025-03-04 19:32:58,302 INFO: BEGIN (implicit)
2025-03-04 19:32:58,303 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:32:58,303 INFO: [cached since 3608s ago] {'pk_1': 266}
2025-03-04 19:32:58,304 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:32:58,304 INFO: [cached since 3712s ago] {'pk_1': 5}
2025-03-04 19:32:58,306 INFO: ROLLBACK
2025-03-04 19:32:58,306 INFO: 127.0.0.1 - - [04/Mar/2025 19:32:58] "PATCH /api/tasks/266 HTTP/1.1" 200 -
2025-03-04 19:34:44,981 INFO: 127.0.0.1 - - [04/Mar/2025 19:34:44] "GET /socket.io/?EIO=4&transport=polling&t=tw8lt1ym HTTP/1.1" 200 -
2025-03-04 19:34:44,990 INFO: 127.0.0.1 - - [04/Mar/2025 19:34:44] "GET /socket.io/?EIO=4&transport=websocket&sid=pFgGegNsRcMKYW2IAAAW HTTP/1.1" 200 -
2025-03-04 19:34:45,018 INFO: 127.0.0.1 - - [04/Mar/2025 19:34:45] "POST /socket.io/?EIO=4&transport=polling&t=tw8scoo9&sid=N8YtCkMrRcdS4x_OAAAY HTTP/1.1" 200 -
2025-03-04 19:34:45,057 INFO: 127.0.0.1 - - [04/Mar/2025 19:34:45] "GET /socket.io/?EIO=4&transport=polling&t=tw8sji1k&sid=N8YtCkMrRcdS4x_OAAAY HTTP/1.1" 200 -
2025-03-04 19:34:45,093 INFO: 127.0.0.1 - - [04/Mar/2025 19:34:45] "GET /socket.io/?EIO=4&transport=polling&t=tw8v166z&sid=N8YtCkMrRcdS4x_OAAAY HTTP/1.1" 200 -
2025-03-04 19:34:45,105 INFO: 127.0.0.1 - - [04/Mar/2025 19:34:45] "GET /socket.io/?EIO=4&transport=polling&t=tw8vdh2u&sid=N8YtCkMrRcdS4x_OAAAY HTTP/1.1" 200 -
2025-03-04 19:34:45,572 INFO: 127.0.0.1 - - [04/Mar/2025 19:34:45] "GET /socket.io/?EIO=4&transport=polling&t=tw98g7b1 HTTP/1.1" 200 -
2025-03-04 19:34:45,614 INFO: 127.0.0.1 - - [04/Mar/2025 19:34:45] "POST /socket.io/?EIO=4&transport=polling&t=tw98z1nc&sid=8n4JPaLbakaT5aJLAAAa HTTP/1.1" 200 -
2025-03-04 19:34:45,631 INFO: 127.0.0.1 - - [04/Mar/2025 19:34:45] "GET /socket.io/?EIO=4&transport=polling&t=tw990uon&sid=8n4JPaLbakaT5aJLAAAa HTTP/1.1" 200 -
2025-03-04 19:34:45,635 INFO: BEGIN (implicit)
2025-03-04 19:34:45,641 INFO: BEGIN (implicit)
2025-03-04 19:34:45,645 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-04 19:34:45,648 INFO: BEGIN (implicit)
2025-03-04 19:34:45,649 INFO: Entering list_tasks_json route...
2025-03-04 19:34:45,649 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-04 19:34:45,652 INFO: [cached since 3864s ago] {}
2025-03-04 19:34:45,654 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.name = %(name_1)s 
 LIMIT %(param_1)s
2025-03-04 19:34:45,657 DEBUG: Filters used in API: {'is_archived': False}
2025-03-04 19:34:45,657 INFO: [cached since 3864s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-04 19:34:45,659 INFO: [cached since 3864s ago] {'name_1': 'Miscellaneous', 'param_1': 1}
2025-03-04 19:34:45,661 DEBUG: Applying filters: {'is_archived': False}
2025-03-04 19:34:45,671 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-04 19:34:45,672 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:34:45,688 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-04 19:34:45,696 INFO: [cached since 3864s ago] {}
2025-03-04 19:34:45,694 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false ORDER BY task.sort_order
2025-03-04 19:34:45,696 INFO: [cached since 3864s ago] {'param_1': 1}
2025-03-04 19:34:45,696 INFO: [cached since 3864s ago] {}
2025-03-04 19:34:45,702 INFO: BEGIN (implicit)
2025-03-04 19:34:45,704 INFO: ROLLBACK
2025-03-04 19:34:45,705 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:34:45,706 INFO: SELECT anon_1.task_id AS anon_1_task_id, anon_1.task_name AS anon_1_task_name, anon_1.task_sort_order AS anon_1_task_sort_order, anon_1.task_description AS anon_1_task_description, anon_1.task_task_type AS anon_1_task_task_type, anon_1.task_priority AS anon_1_task_priority, anon_1.task_epic_priority AS anon_1_task_epic_priority, anon_1.task_is_archived AS anon_1_task_is_archived, anon_1.task_completed AS anon_1_task_completed, anon_1.task_status AS anon_1_task_status, anon_1.task_parent_id AS anon_1_task_parent_id, anon_1.task_project_id AS anon_1_task_project_id, anon_1.task_contributor_id AS anon_1_task_contributor_id, anon_1.task_story_points AS anon_1_task_story_points, anon_1.task_created_at AS anon_1_task_created_at, anon_1.task_updated_at AS anon_1_task_updated_at, anon_1.task_completed_date AS anon_1_task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s) AS anon_1 LEFT OUTER JOIN task AS task_1 ON anon_1.task_id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = anon_1.task_project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = anon_1.task_contributor_id ORDER BY anon_1.task_sort_order
2025-03-04 19:34:45,706 INFO: ROLLBACK
2025-03-04 19:34:45,707 INFO: [cached since 3864s ago] {'param_1': 700, 'param_2': 0}
2025-03-04 19:34:45,708 INFO: [cached since 3864s ago] {'param_1': 2}
2025-03-04 19:34:45,709 INFO: 127.0.0.1 - - [04/Mar/2025 19:34:45] "GET /api/projects HTTP/1.1" 200 -
2025-03-04 19:34:45,710 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:34:45,713 INFO: [cached since 3864s ago] {'param_1': 3}
2025-03-04 19:34:45,711 INFO: 127.0.0.1 - - [04/Mar/2025 19:34:45] "GET /api/projects HTTP/1.1" 200 -
2025-03-04 19:34:45,717 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:34:45,717 INFO: [cached since 3864s ago] {'param_1': 4}
2025-03-04 19:34:45,723 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:34:45,723 INFO: [cached since 3864s ago] {'param_1': 5}
2025-03-04 19:34:45,733 INFO: BEGIN (implicit)
2025-03-04 19:34:45,736 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-04 19:34:45,736 INFO: [cached since 3864s ago] {'pk_1': 19}
2025-03-04 19:34:45,738 INFO: ROLLBACK
2025-03-04 19:34:45,742 INFO: 127.0.0.1 - - [04/Mar/2025 19:34:45] "GET /api/contributors HTTP/1.1" 200 -
2025-03-04 19:34:45,747 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-04 19:34:45,747 INFO: [cached since 3864s ago] {}
2025-03-04 19:34:45,755 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-04 19:34:45,755 INFO: [cached since 3864s ago] {'param_1': 19}
2025-03-04 19:34:45,760 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:34:45,760 INFO: [cached since 3864s ago] {'param_1': 1}
2025-03-04 19:34:45,763 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:34:45,763 INFO: [cached since 3864s ago] {'param_1': 2}
2025-03-04 19:34:45,786 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:34:45,793 INFO: [cached since 3864s ago] {'param_1': 3}
2025-03-04 19:34:45,813 INFO: SELECT count(*) AS count_1 
FROM (SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.is_archived = false) AS anon_1
2025-03-04 19:34:45,813 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:34:45,814 INFO: [cached since 3864s ago] {}
2025-03-04 19:34:45,814 INFO: [cached since 3864s ago] {'param_1': 4}
2025-03-04 19:34:45,836 INFO: SELECT DISTINCT task.task_type AS task_task_type 
FROM task
2025-03-04 19:34:45,842 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:34:45,842 INFO: [cached since 3864s ago] {}
2025-03-04 19:34:45,842 INFO: [cached since 3864s ago] {'param_1': 5}
2025-03-04 19:34:45,844 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project
2025-03-04 19:34:45,844 INFO: [cached since 3864s ago] {}
2025-03-04 19:34:45,845 INFO: ROLLBACK
2025-03-04 19:34:45,848 INFO: ROLLBACK
2025-03-04 19:34:45,849 INFO: 127.0.0.1 - - [04/Mar/2025 19:34:45] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-04 19:34:45,849 INFO: 127.0.0.1 - - [04/Mar/2025 19:34:45] "GET /api/tasks HTTP/1.1" 200 -
2025-03-04 19:35:11,586 INFO: Fetching task details for Task ID 265.
2025-03-04 19:35:11,586 INFO: Fetching task with ID 265.
2025-03-04 19:35:11,587 INFO: BEGIN (implicit)
2025-03-04 19:35:11,587 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:35:11,587 INFO: [cached since 3845s ago] {'pk_1': 265}
2025-03-04 19:35:11,589 DEBUG: Raw task object: {'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x10eaa2c90>, 'epic_priority': None, 'contributor_id': 5, 'story_points': 8, 'id': 265, 'is_archived': False, 'completed_date': None, 'name': 'Smooth transition for toggles', 'completed': False, 'sort_order': 0, 'created_at': datetime.datetime(2025, 2, 8, 2, 27, 23, 422612), 'description': '<p>Added new description</p>', 'status': 'Not Started', 'updated_at': datetime.datetime(2025, 3, 1, 15, 23, 5, 271095), 'parent_id': None, 'task_type': 'User Story', 'project_id': 7, 'priority': 'Medium'}
2025-03-04 19:35:11,589 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-04 19:35:11,589 INFO: [cached since 3845s ago] {'pk_1': 7}
2025-03-04 19:35:11,590 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:35:11,591 INFO: [cached since 3845s ago] {'pk_1': 5}
2025-03-04 19:35:11,591 INFO: Task ID 265 fetched with parent ID: None
2025-03-04 19:35:11,591 INFO: Task with ID 265 fetched successfully.
2025-03-04 19:35:11,592 DEBUG: Fetched Task Data: {'id': 265, 'name': 'Smooth transition for toggles', 'description': '<p>Added new description</p>', 'task_type': 'User Story', 'priority': 'Medium', 'epic_priority': None, 'is_archived': False, 'completed': False, 'parent_id': None, 'project_id': 7, 'project': 'PMS - Feature Requests', 'contributor_id': 5, 'assigned_to': 'Fredrik Cederborg', 'story_points': 8, 'status': 'Not Started', 'sort_order': 0, 'created_at': '2025-02-08T02:27:23.422612', 'updated_at': '2025-03-01T15:23:05.271095', 'contributor_name': 'Fredrik Cederborg', 'parent': None}
2025-03-04 19:35:11,592 INFO: Task details fetched successfully for Task ID 265.
2025-03-04 19:35:11,592 INFO: ROLLBACK
2025-03-04 19:35:11,593 INFO: 127.0.0.1 - - [04/Mar/2025 19:35:11] "GET /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:35:11,765 INFO: 127.0.0.1 - - [04/Mar/2025 19:35:11] "OPTIONS /tasks/available_tasks?task_type=User%20Story&exclude_task_id=265&page=1&limit=30 HTTP/1.1" 200 -
2025-03-04 19:35:11,769 INFO: BEGIN (implicit)
2025-03-04 19:35:11,769 INFO: 127.0.0.1 - - [04/Mar/2025 19:35:11] "OPTIONS /tasks/available_tasks?task_type=User%20Story&exclude_task_id=265&page=1&limit=30 HTTP/1.1" 200 -
2025-03-04 19:35:11,770 INFO: Entering available_tasks route...
2025-03-04 19:35:11,770 INFO: BEGIN (implicit)
2025-03-04 19:35:11,771 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-04 19:35:11,771 DEBUG: Query parameters: task_type=User Story, exclude_task_id=265, search_term=, project_id=None, limit=30, page=1
2025-03-04 19:35:11,772 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-04 19:35:11,772 INFO: [cached since 3890s ago] {'pk_1': 7}
2025-03-04 19:35:11,773 INFO: BEGIN (implicit)
2025-03-04 19:35:11,774 INFO: Entering available_tasks route...
2025-03-04 19:35:11,774 INFO: [cached since 3890s ago] {'pk_1': 7}
2025-03-04 19:35:11,775 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:35:11,775 DEBUG: Query parameters: task_type=User Story, exclude_task_id=265, search_term=, project_id=None, limit=30, page=1
2025-03-04 19:35:11,776 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-04 19:35:11,776 INFO: [cached since 3846s ago] {'pk_1': 265}
2025-03-04 19:35:11,776 INFO: BEGIN (implicit)
2025-03-04 19:35:11,776 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-04 19:35:11,776 INFO: [cached since 3890s ago] {}
2025-03-04 19:35:11,777 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:35:11,777 INFO: [cached since 3846s ago] {'pk_1': 265}
2025-03-04 19:35:11,777 INFO: [cached since 3890s ago] {}
2025-03-04 19:35:11,777 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-04 19:35:11,777 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 265, 'task_type': ['User Story']}
2025-03-04 19:35:11,778 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-04 19:35:11,778 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 265, 'task_type': ['User Story']}
2025-03-04 19:35:11,778 INFO: [cached since 3890s ago] {'param_1': 7}
2025-03-04 19:35:11,778 INFO: Validating hierarchy for Task N/A
2025-03-04 19:35:11,778 INFO: [cached since 3890s ago] {'param_1': 7}
2025-03-04 19:35:11,778 INFO: Validating hierarchy for Task N/A
2025-03-04 19:35:11,778 INFO: Determining valid parent types for task_type: User Story
2025-03-04 19:35:11,778 INFO: Determining valid parent types for task_type: User Story
2025-03-04 19:35:11,779 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 265, 'task_type': ['Epic']}
2025-03-04 19:35:11,779 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 265, 'task_type': ['Epic']}
2025-03-04 19:35:11,779 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:35:11,782 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-04 19:35:11,784 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-04 19:35:11,785 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:35:11,785 INFO: [cached since 3890s ago] {'param_1': 1}
2025-03-04 19:35:11,785 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-04 19:35:11,785 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-04 19:35:11,785 INFO: [cached since 3890s ago] {'param_1': 1}
2025-03-04 19:35:11,786 INFO: [cached since 3845s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-04 19:35:11,786 INFO: [cached since 3845s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-04 19:35:11,787 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:35:11,789 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:35:11,790 DEBUG: Tasks returned: [{'id': 327, 'name': 'üèÜ\xa0Epic: AI-Driven Feature Planning & Estimation', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 267, 'name': 'Improvements to toggles and nested tasks', 'task_type': 'Epic', 'is_parent': False}, {'id': 325, 'name': 'Improve task list responsive grid', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okr¬¥s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 284, 'name': 'Add type "issue/bug"', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notifications', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}]
2025-03-04 19:35:11,791 DEBUG: Tasks returned: [{'id': 327, 'name': 'üèÜ\xa0Epic: AI-Driven Feature Planning & Estimation', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 267, 'name': 'Improvements to toggles and nested tasks', 'task_type': 'Epic', 'is_parent': False}, {'id': 325, 'name': 'Improve task list responsive grid', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okr¬¥s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 284, 'name': 'Add type "issue/bug"', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notifications', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}]
2025-03-04 19:35:11,791 INFO: [cached since 3890s ago] {'param_1': 2}
2025-03-04 19:35:11,791 INFO: [cached since 3890s ago] {'param_1': 2}
2025-03-04 19:35:11,791 INFO: ROLLBACK
2025-03-04 19:35:11,795 INFO: ROLLBACK
2025-03-04 19:35:11,803 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:35:11,803 INFO: [cached since 3890s ago] {'param_1': 3}
2025-03-04 19:35:11,803 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:35:11,804 INFO: 127.0.0.1 - - [04/Mar/2025 19:35:11] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=265&page=1&limit=30 HTTP/1.1" 200 -
2025-03-04 19:35:11,804 INFO: 127.0.0.1 - - [04/Mar/2025 19:35:11] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=265&page=1&limit=30 HTTP/1.1" 200 -
2025-03-04 19:35:11,804 INFO: [cached since 3890s ago] {'param_1': 3}
2025-03-04 19:35:11,806 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:35:11,807 INFO: [cached since 3890s ago] {'param_1': 4}
2025-03-04 19:35:11,807 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:35:11,808 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:35:11,808 INFO: [cached since 3890s ago] {'param_1': 4}
2025-03-04 19:35:11,808 INFO: [cached since 3890s ago] {'param_1': 5}
2025-03-04 19:35:11,808 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:35:11,809 INFO: ROLLBACK
2025-03-04 19:35:11,809 INFO: [cached since 3890s ago] {'param_1': 5}
2025-03-04 19:35:11,809 INFO: 127.0.0.1 - - [04/Mar/2025 19:35:11] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-04 19:35:11,811 INFO: ROLLBACK
2025-03-04 19:35:11,812 INFO: 127.0.0.1 - - [04/Mar/2025 19:35:11] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-04 19:35:16,950 INFO: 127.0.0.1 - - [04/Mar/2025 19:35:16] "OPTIONS /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:35:16,953 INFO: BEGIN (implicit)
2025-03-04 19:35:16,954 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:35:16,954 INFO: [cached since 3851s ago] {'pk_1': 265}
2025-03-04 19:35:16,955 DEBUG: Received update payload for Task ID 265: {'description': '<pre><code>Added new description</code></pre>'}
2025-03-04 19:35:16,956 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:35:16,956 INFO: [cached since 316.9s ago] {'description': '<pre><code>Added new description</code></pre>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 35, 16, 956027), 'task_id': 265}
2025-03-04 19:35:16,958 INFO: COMMIT
2025-03-04 19:35:16,960 INFO: Task ID 265 updated successfully. Updated fields: ['description']
2025-03-04 19:35:16,961 INFO: BEGIN (implicit)
2025-03-04 19:35:16,961 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:35:16,962 INFO: [cached since 3747s ago] {'pk_1': 265}
2025-03-04 19:35:16,964 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:35:16,964 INFO: [cached since 3851s ago] {'pk_1': 5}
2025-03-04 19:35:16,969 INFO: ROLLBACK
2025-03-04 19:35:16,973 INFO: 127.0.0.1 - - [04/Mar/2025 19:35:16] "PATCH /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:35:23,500 INFO: 127.0.0.1 - - [04/Mar/2025 19:35:23] "OPTIONS /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:35:23,506 INFO: BEGIN (implicit)
2025-03-04 19:35:23,506 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:35:23,507 INFO: [cached since 3857s ago] {'pk_1': 265}
2025-03-04 19:35:23,508 DEBUG: Received update payload for Task ID 265: {'description': '<pre><code>Added new description\n\n</code></pre>'}
2025-03-04 19:35:23,509 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:35:23,509 INFO: [cached since 323.4s ago] {'description': '<pre><code>Added new description\n\n</code></pre>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 35, 23, 508817), 'task_id': 265}
2025-03-04 19:35:23,510 INFO: COMMIT
2025-03-04 19:35:23,510 INFO: Task ID 265 updated successfully. Updated fields: ['description']
2025-03-04 19:35:23,510 INFO: BEGIN (implicit)
2025-03-04 19:35:23,511 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:35:23,511 INFO: [cached since 3753s ago] {'pk_1': 265}
2025-03-04 19:35:23,512 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:35:23,512 INFO: [cached since 3857s ago] {'pk_1': 5}
2025-03-04 19:35:23,513 INFO: ROLLBACK
2025-03-04 19:35:23,514 INFO: 127.0.0.1 - - [04/Mar/2025 19:35:23] "PATCH /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:35:40,053 INFO: 127.0.0.1 - - [04/Mar/2025 19:35:40] "OPTIONS /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:35:40,059 INFO: BEGIN (implicit)
2025-03-04 19:35:40,060 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:35:40,060 INFO: [cached since 3874s ago] {'pk_1': 265}
2025-03-04 19:35:40,063 DEBUG: Received update payload for Task ID 265: {'description': '<pre><code>Added new description\n\n@csrf.exempt\n@api.route(\'/tasks/&lt;int:task_id&gt;/parent\', methods=[\'PUT\', \'OPTIONS\'])\ndef update_task_parent(task_id):\n    """ Moves a task to a new parent while enforcing hierarchy rules,\n    including handling the \'No Epic\' category. """\n    \n    if request.method == "OPTIONS":\n        response = make_response(jsonify({"message": "CORS preflight successful"}), 200)\n        response.headers["Access-Control-Allow-Origin"] = "http://localhost:3000"\n        response.headers["Access-Control-Allow-Credentials"] = "true"\n        response.headers["Access-Control-Allow-Methods"] = "GET, POST, PUT, DELETE, OPTIONS, PATCH"\n        response.headers["Access-Control-Allow-Headers"] = "Content-Type, X-CSRFToken"\n        return response\n    \n    data = request.json\n    new_parent_id = data.get("new_parent_id")\n\n    if new_parent_id is None:\n        return jsonify({"error": "new_parent_id is required"}), 400\n\n    task = Task.query.get(task_id)\n    if not task:\n        return jsonify({"error": "Task not found"}), 404\n\n    # ‚úÖ Handle "No Epic" Epic Creation\n    if task.task_type == "User Story" and new_parent_id == "no_epic":\n        logger.info(f"üîç Moving User Story {task.id} to \'No Epic\'.")\n\n        # Check if "No Epic" exists\n        no_epic = Task.query.filter_by(\n            name="No Epic", task_type="Epic", project_id=task.project_id\n        ).first()\n\n        if not no_epic:\n            no_epic = Task(\n                name="No Epic",\n                task_type="Epic",\n                project_id=task.project_id,\n                sort_order=0\n            )\n            db.session.add(no_epic)\n            db.session.commit()\n            logger.info(f"‚úÖ Created \'No Epic\' in Project {task.project_id}")\n\n        new_parent_id = no_epic.id  # Assign to "No Epic"\n\n    else:\n        new_parent = Task.query.get(new_parent_id)\n        if not new_parent:\n            return jsonify({"error": "New parent task not found"}), 404\n\n        # ‚úÖ Prevent invalid hierarchy placements\n        if task.task_type == "User Story" and new_parent.task_type != "Epic":\n            return jsonify({"error": "A User Story can only have an Epic as a parent."}), 400\n        if task.task_type == "Subtask" and new_parent.task_type != "User Story":\n            return jsonify({"error": "A Subtask can only have a User Story as a parent."}), 400\n        if task.task_type == "Epic":\n            return jsonify({"error": "Epics cannot have a parent task."}), 400\n\n    # ‚úÖ Update parent relationship\n    task.parent_id = new_parent_id\n    db.session.commit()\n\n    # ‚úÖ Emit WebSocket event for real-time frontend updates\n    emit("task_parent_updated", {"task_id": task.id, "new_parent_id": new_parent_id}, broadcast=True)\n\n    response = jsonify({"message": "Task parent updated successfully"})\n    response.headers["Access-Control-Allow-Origin"] = "http://localhost:3000"\n    response.headers["Access-Control-Allow-Credentials"] = "true"\n    return response, 200@csrf.exempt\n@api.route(\'/tasks/&lt;int:task_id&gt;/parent\', methods=[\'PUT\', \'OPTIONS\'])\ndef update_task_parent(task_id):\n    """ Moves a task to a new parent while enforcing hierarchy rules,\n    including handling the \'No Epic\' category. """\n    \n    if request.method == "OPTIONS":\n        response = make_response(jsonify({"message": "CORS preflight successful"}), 200)\n        response.headers["Access-Control-Allow-Origin"] = "http://localhost:3000"\n        response.headers["Access-Control-Allow-Credentials"] = "true"\n        response.headers["Access-Control-Allow-Methods"] = "GET, POST, PUT, DELETE, OPTIONS, PATCH"\n        response.headers["Access-Control-Allow-Headers"] = "Content-Type, X-CSRFToken"\n        return response\n    \n    data = request.json\n    new_parent_id = data.get("new_parent_id")\n\n    if new_parent_id is None:\n        return jsonify({"error": "new_parent_id is required"}), 400\n\n    task = Task.query.get(task_id)\n    if not task:\n        return jsonify({"error": "Task not found"}), 404\n\n    # ‚úÖ Handle "No Epic" Epic Creation\n    if task.task_type == "User Story" and new_parent_id == "no_epic":\n        logger.info(f"üîç Moving User Story {task.id} to \'No Epic\'.")\n\n        # Check if "No Epic" exists\n        no_epic = Task.query.filter_by(\n            name="No Epic", task_type="Epic", project_id=task.project_id\n        ).first()\n\n        if not no_epic:\n            no_epic = Task(\n                name="No Epic",\n                task_type="Epic",\n                project_id=task.project_id,\n                sort_order=0\n            )\n            db.session.add(no_epic)\n            db.session.commit()\n            logger.info(f"‚úÖ Created \'No Epic\' in Project {task.project_id}")\n\n        new_parent_id = no_epic.id  # Assign to "No Epic"\n\n    else:\n        new_parent = Task.query.get(new_parent_id)\n        if not new_parent:\n            return jsonify({"error": "New parent task not found"}), 404\n\n        # ‚úÖ Prevent invalid hierarchy placements\n        if task.task_type == "User Story" and new_parent.task_type != "Epic":\n            return jsonify({"error": "A User Story can only have an Epic as a parent."}), 400\n        if task.task_type == "Subtask" and new_parent.task_type != "User Story":\n            return jsonify({"error": "A Subtask can only have a User Story as a parent."}), 400\n        if task.task_type == "Epic":\n            return jsonify({"error": "Epics cannot have a parent task."}), 400\n\n    # ‚úÖ Update parent relationship\n    task.parent_id = new_parent_id\n    db.session.commit()\n\n    # ‚úÖ Emit WebSocket event for real-time frontend updates\n    emit("task_parent_updated", {"task_id": task.id, "new_parent_id": new_parent_id}, broadcast=True)\n\n    response = jsonify({"message": "Task parent updated successfully"})\n    response.headers["Access-Control-Allow-Origin"] = "http://localhost:3000"\n    response.headers["Access-Control-Allow-Credentials"] = "true"\n    return response, 200</code></pre>'}
2025-03-04 19:35:40,064 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:35:40,064 INFO: [cached since 340s ago] {'description': '<pre><code>Added new description\n\n@csrf.exempt\n@api.route(\'/tasks/&lt;int:task_id&gt;/parent\', methods=[\'PUT\', \'OPTIONS\'])\ndef update_task_ ... (5815 characters truncated) ... ol-Allow-Origin"] = "http://localhost:3000"\n    response.headers["Access-Control-Allow-Credentials"] = "true"\n    return response, 200</code></pre>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 35, 40, 64066), 'task_id': 265}
2025-03-04 19:35:40,067 INFO: COMMIT
2025-03-04 19:35:40,068 INFO: Task ID 265 updated successfully. Updated fields: ['description']
2025-03-04 19:35:40,069 INFO: BEGIN (implicit)
2025-03-04 19:35:40,069 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:35:40,069 INFO: [cached since 3770s ago] {'pk_1': 265}
2025-03-04 19:35:40,071 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:35:40,071 INFO: [cached since 3874s ago] {'pk_1': 5}
2025-03-04 19:35:40,072 INFO: ROLLBACK
2025-03-04 19:35:40,073 INFO: 127.0.0.1 - - [04/Mar/2025 19:35:40] "PATCH /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:48:23,232 INFO: 127.0.0.1 - - [04/Mar/2025 19:48:23] "OPTIONS /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:48:23,241 INFO: BEGIN (implicit)
2025-03-04 19:48:23,243 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:48:23,243 INFO: [cached since 4637s ago] {'pk_1': 265}
2025-03-04 19:48:23,247 DEBUG: Received update payload for Task ID 265: {'description': '<pre><code>Added new description\n</code></pre>'}
2025-03-04 19:48:23,249 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:48:23,250 INFO: [cached since 1103s ago] {'description': '<pre><code>Added new description\n</code></pre>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 48, 23, 248227), 'task_id': 265}
2025-03-04 19:48:23,251 INFO: COMMIT
2025-03-04 19:48:23,254 INFO: Task ID 265 updated successfully. Updated fields: ['description']
2025-03-04 19:48:23,254 INFO: BEGIN (implicit)
2025-03-04 19:48:23,255 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:48:23,255 INFO: [cached since 4533s ago] {'pk_1': 265}
2025-03-04 19:48:23,257 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:48:23,257 INFO: [cached since 4637s ago] {'pk_1': 5}
2025-03-04 19:48:23,260 INFO: ROLLBACK
2025-03-04 19:48:23,261 INFO: 127.0.0.1 - - [04/Mar/2025 19:48:23] "PATCH /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:48:26,497 INFO: 127.0.0.1 - - [04/Mar/2025 19:48:26] "OPTIONS /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:48:26,500 INFO: BEGIN (implicit)
2025-03-04 19:48:26,501 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:48:26,501 INFO: [cached since 4640s ago] {'pk_1': 265}
2025-03-04 19:48:26,503 DEBUG: Received update payload for Task ID 265: {'description': '<p>Added new description<br></p>'}
2025-03-04 19:48:26,504 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:48:26,504 INFO: [cached since 1106s ago] {'description': '<p>Added new description<br></p>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 48, 26, 503598), 'task_id': 265}
2025-03-04 19:48:26,505 INFO: COMMIT
2025-03-04 19:48:26,506 INFO: Task ID 265 updated successfully. Updated fields: ['description']
2025-03-04 19:48:26,506 INFO: BEGIN (implicit)
2025-03-04 19:48:26,507 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:48:26,507 INFO: [cached since 4536s ago] {'pk_1': 265}
2025-03-04 19:48:26,509 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:48:26,510 INFO: [cached since 4640s ago] {'pk_1': 5}
2025-03-04 19:48:26,512 INFO: ROLLBACK
2025-03-04 19:48:26,513 INFO: 127.0.0.1 - - [04/Mar/2025 19:48:26] "PATCH /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:48:50,171 INFO: 127.0.0.1 - - [04/Mar/2025 19:48:50] "OPTIONS /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:48:50,174 INFO: BEGIN (implicit)
2025-03-04 19:48:50,175 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:48:50,175 INFO: [cached since 4664s ago] {'pk_1': 265}
2025-03-04 19:48:50,177 DEBUG: Received update payload for Task ID 265: {'description': '<p>```Added new description<br></p>'}
2025-03-04 19:48:50,177 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:48:50,177 INFO: [cached since 1130s ago] {'description': '<p>```Added new description<br></p>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 48, 50, 177193), 'task_id': 265}
2025-03-04 19:48:50,178 INFO: COMMIT
2025-03-04 19:48:50,179 INFO: Task ID 265 updated successfully. Updated fields: ['description']
2025-03-04 19:48:50,180 INFO: BEGIN (implicit)
2025-03-04 19:48:50,180 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:48:50,180 INFO: [cached since 4560s ago] {'pk_1': 265}
2025-03-04 19:48:50,182 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:48:50,182 INFO: [cached since 4664s ago] {'pk_1': 5}
2025-03-04 19:48:50,183 INFO: ROLLBACK
2025-03-04 19:48:50,184 INFO: 127.0.0.1 - - [04/Mar/2025 19:48:50] "PATCH /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:48:51,189 INFO: 127.0.0.1 - - [04/Mar/2025 19:48:51] "OPTIONS /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:48:51,193 INFO: BEGIN (implicit)
2025-03-04 19:48:51,193 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:48:51,194 INFO: [cached since 4665s ago] {'pk_1': 265}
2025-03-04 19:48:51,195 DEBUG: Received update payload for Task ID 265: {'description': '<pre><code>Added new description\n</code></pre>'}
2025-03-04 19:48:51,196 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:48:51,196 INFO: [cached since 1131s ago] {'description': '<pre><code>Added new description\n</code></pre>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 48, 51, 195777), 'task_id': 265}
2025-03-04 19:48:51,197 INFO: COMMIT
2025-03-04 19:48:51,197 INFO: Task ID 265 updated successfully. Updated fields: ['description']
2025-03-04 19:48:51,198 INFO: BEGIN (implicit)
2025-03-04 19:48:51,198 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:48:51,198 INFO: [cached since 4561s ago] {'pk_1': 265}
2025-03-04 19:48:51,199 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:48:51,200 INFO: [cached since 4665s ago] {'pk_1': 5}
2025-03-04 19:48:51,200 INFO: ROLLBACK
2025-03-04 19:48:51,202 INFO: 127.0.0.1 - - [04/Mar/2025 19:48:51] "PATCH /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:48:57,371 INFO: 127.0.0.1 - - [04/Mar/2025 19:48:57] "OPTIONS /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:48:57,377 INFO: BEGIN (implicit)
2025-03-04 19:48:57,378 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:48:57,378 INFO: [cached since 4671s ago] {'pk_1': 265}
2025-03-04 19:48:57,380 DEBUG: Received update payload for Task ID 265: {'description': '<p>Added new description\n</p>'}
2025-03-04 19:48:57,381 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:48:57,381 INFO: [cached since 1137s ago] {'description': '<p>Added new description\n</p>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 48, 57, 380670), 'task_id': 265}
2025-03-04 19:48:57,383 INFO: COMMIT
2025-03-04 19:48:57,384 INFO: Task ID 265 updated successfully. Updated fields: ['description']
2025-03-04 19:48:57,384 INFO: BEGIN (implicit)
2025-03-04 19:48:57,385 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:48:57,385 INFO: [cached since 4567s ago] {'pk_1': 265}
2025-03-04 19:48:57,387 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:48:57,387 INFO: [cached since 4671s ago] {'pk_1': 5}
2025-03-04 19:48:57,388 INFO: ROLLBACK
2025-03-04 19:48:57,389 INFO: 127.0.0.1 - - [04/Mar/2025 19:48:57] "PATCH /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:49:04,646 INFO: 127.0.0.1 - - [04/Mar/2025 19:49:04] "OPTIONS /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:49:04,652 INFO: BEGIN (implicit)
2025-03-04 19:49:04,652 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:49:04,652 INFO: [cached since 4679s ago] {'pk_1': 265}
2025-03-04 19:49:04,654 DEBUG: Received update payload for Task ID 265: {'description': '<p>Added new description</p><p></p><p></p><p>\n</p>'}
2025-03-04 19:49:04,655 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:49:04,655 INFO: [cached since 1145s ago] {'description': '<p>Added new description</p><p></p><p></p><p>\n</p>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 49, 4, 654816), 'task_id': 265}
2025-03-04 19:49:04,656 INFO: COMMIT
2025-03-04 19:49:04,658 INFO: Task ID 265 updated successfully. Updated fields: ['description']
2025-03-04 19:49:04,658 INFO: BEGIN (implicit)
2025-03-04 19:49:04,659 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:49:04,659 INFO: [cached since 4574s ago] {'pk_1': 265}
2025-03-04 19:49:04,661 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:49:04,661 INFO: [cached since 4679s ago] {'pk_1': 5}
2025-03-04 19:49:04,663 INFO: ROLLBACK
2025-03-04 19:49:04,664 INFO: 127.0.0.1 - - [04/Mar/2025 19:49:04] "PATCH /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:49:08,025 INFO: 127.0.0.1 - - [04/Mar/2025 19:49:08] "OPTIONS /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:49:08,030 INFO: BEGIN (implicit)
2025-03-04 19:49:08,030 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:49:08,030 INFO: [cached since 4682s ago] {'pk_1': 265}
2025-03-04 19:49:08,032 DEBUG: Received update payload for Task ID 265: {'description': '<p>Added new description</p><p></p><p></p><p>&lt;3 </p>'}
2025-03-04 19:49:08,033 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:49:08,033 INFO: [cached since 1148s ago] {'description': '<p>Added new description</p><p></p><p></p><p>&lt;3 </p>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 49, 8, 32554), 'task_id': 265}
2025-03-04 19:49:08,034 INFO: COMMIT
2025-03-04 19:49:08,035 INFO: Task ID 265 updated successfully. Updated fields: ['description']
2025-03-04 19:49:08,036 INFO: BEGIN (implicit)
2025-03-04 19:49:08,036 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:49:08,036 INFO: [cached since 4578s ago] {'pk_1': 265}
2025-03-04 19:49:08,038 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:49:08,038 INFO: [cached since 4682s ago] {'pk_1': 5}
2025-03-04 19:49:08,039 INFO: ROLLBACK
2025-03-04 19:49:08,040 INFO: 127.0.0.1 - - [04/Mar/2025 19:49:08] "PATCH /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:49:09,272 INFO: 127.0.0.1 - - [04/Mar/2025 19:49:09] "OPTIONS /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:49:09,275 INFO: BEGIN (implicit)
2025-03-04 19:49:09,275 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:49:09,276 INFO: [cached since 4683s ago] {'pk_1': 265}
2025-03-04 19:49:09,277 DEBUG: Received update payload for Task ID 265: {'description': '<p>Added new description</p><p></p><p></p><p>&lt;3  </p>'}
2025-03-04 19:49:09,278 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:49:09,278 INFO: [cached since 1149s ago] {'description': '<p>Added new description</p><p></p><p></p><p>&lt;3  </p>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 49, 9, 277513), 'task_id': 265}
2025-03-04 19:49:09,279 INFO: COMMIT
2025-03-04 19:49:09,280 INFO: Task ID 265 updated successfully. Updated fields: ['description']
2025-03-04 19:49:09,281 INFO: BEGIN (implicit)
2025-03-04 19:49:09,281 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:49:09,281 INFO: [cached since 4579s ago] {'pk_1': 265}
2025-03-04 19:49:09,284 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:49:09,284 INFO: [cached since 4683s ago] {'pk_1': 5}
2025-03-04 19:49:09,286 INFO: ROLLBACK
2025-03-04 19:49:09,287 INFO: 127.0.0.1 - - [04/Mar/2025 19:49:09] "PATCH /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:49:10,915 INFO: 127.0.0.1 - - [04/Mar/2025 19:49:10] "OPTIONS /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:49:10,921 INFO: BEGIN (implicit)
2025-03-04 19:49:10,921 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:49:10,921 INFO: [cached since 4685s ago] {'pk_1': 265}
2025-03-04 19:49:10,923 DEBUG: Received update payload for Task ID 265: {'description': '<p>Added new description</p><p></p><p></p><p> </p>'}
2025-03-04 19:49:10,924 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:49:10,924 INFO: [cached since 1151s ago] {'description': '<p>Added new description</p><p></p><p></p><p> </p>', 'updated_at': datetime.datetime(2025, 3, 4, 18, 49, 10, 924224), 'task_id': 265}
2025-03-04 19:49:10,925 INFO: COMMIT
2025-03-04 19:49:10,926 INFO: Task ID 265 updated successfully. Updated fields: ['description']
2025-03-04 19:49:10,927 INFO: BEGIN (implicit)
2025-03-04 19:49:10,927 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:49:10,927 INFO: [cached since 4581s ago] {'pk_1': 265}
2025-03-04 19:49:10,930 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:49:10,930 INFO: [cached since 4685s ago] {'pk_1': 5}
2025-03-04 19:49:10,931 INFO: ROLLBACK
2025-03-04 19:49:10,932 INFO: 127.0.0.1 - - [04/Mar/2025 19:49:10] "PATCH /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:49:22,922 INFO: BEGIN (implicit)
2025-03-04 19:49:22,923 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-04 19:49:22,924 INFO: [cached since 4741s ago] {'pk_1': 7}
2025-03-04 19:49:22,926 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-04 19:49:22,926 INFO: [cached since 4741s ago] {}
2025-03-04 19:49:22,928 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-04 19:49:22,928 INFO: [cached since 4741s ago] {'param_1': 7}
2025-03-04 19:49:22,930 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:49:22,930 INFO: [cached since 4741s ago] {'param_1': 1}
2025-03-04 19:49:22,932 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:49:22,932 INFO: [cached since 4741s ago] {'param_1': 2}
2025-03-04 19:49:22,933 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:49:22,933 INFO: [cached since 4741s ago] {'param_1': 3}
2025-03-04 19:49:22,937 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:49:22,937 INFO: [cached since 4741s ago] {'param_1': 4}
2025-03-04 19:49:22,939 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:49:22,939 INFO: [cached since 4741s ago] {'param_1': 5}
2025-03-04 19:49:22,940 INFO: ROLLBACK
2025-03-04 19:49:22,940 INFO: 127.0.0.1 - - [04/Mar/2025 19:49:22] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-04 19:49:22,944 INFO: 127.0.0.1 - - [04/Mar/2025 19:49:22] "OPTIONS /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:49:22,946 INFO: BEGIN (implicit)
2025-03-04 19:49:22,946 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:49:22,946 INFO: [cached since 4697s ago] {'pk_1': 265}
2025-03-04 19:49:22,947 DEBUG: Received update payload for Task ID 265: {'contributor_id': '4'}
2025-03-04 19:49:22,949 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:49:22,949 INFO: [generated in 0.00024s] {'pk_1': 4}
2025-03-04 19:49:22,951 INFO: UPDATE task SET contributor_id=%(contributor_id)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:49:22,952 INFO: [generated in 0.00044s] {'contributor_id': 4, 'updated_at': datetime.datetime(2025, 3, 4, 18, 49, 22, 951892, tzinfo=datetime.timezone.utc), 'task_id': 265}
2025-03-04 19:49:22,956 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-04 19:49:22,956 INFO: [cached since 4697s ago] {'pk_1': 7}
2025-03-04 19:49:22,957 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-04 19:49:22,957 INFO: [cached since 4741s ago] {'param_1': 7}
2025-03-04 19:49:22,959 INFO: UPDATE task SET updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:49:22,959 INFO: [generated in 0.00022s] {'updated_at': datetime.datetime(2025, 3, 4, 18, 49, 22, 958680), 'task_id': 265}
2025-03-04 19:49:22,960 INFO: COMMIT
2025-03-04 19:49:22,961 INFO: Task ID 265 updated successfully. Updated fields: ['contributor_id']
2025-03-04 19:49:22,962 INFO: BEGIN (implicit)
2025-03-04 19:49:22,962 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:49:22,962 INFO: [cached since 4593s ago] {'pk_1': 265}
2025-03-04 19:49:22,963 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:49:22,964 INFO: [generated in 0.00016s] {'pk_1': 4}
2025-03-04 19:49:22,965 INFO: ROLLBACK
2025-03-04 19:49:22,966 INFO: 127.0.0.1 - - [04/Mar/2025 19:49:22] "PATCH /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:49:26,588 INFO: BEGIN (implicit)
2025-03-04 19:49:26,588 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-04 19:49:26,588 INFO: [cached since 4745s ago] {'pk_1': 7}
2025-03-04 19:49:26,590 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-04 19:49:26,590 INFO: [cached since 4745s ago] {}
2025-03-04 19:49:26,591 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-04 19:49:26,591 INFO: [cached since 4744s ago] {'param_1': 7}
2025-03-04 19:49:26,592 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:49:26,593 INFO: [cached since 4745s ago] {'param_1': 1}
2025-03-04 19:49:26,594 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:49:26,594 INFO: [cached since 4745s ago] {'param_1': 2}
2025-03-04 19:49:26,595 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:49:26,596 INFO: [cached since 4745s ago] {'param_1': 3}
2025-03-04 19:49:26,597 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:49:26,597 INFO: [cached since 4745s ago] {'param_1': 4}
2025-03-04 19:49:26,599 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:49:26,599 INFO: [cached since 4745s ago] {'param_1': 5}
2025-03-04 19:49:26,602 INFO: ROLLBACK
2025-03-04 19:49:26,602 INFO: 127.0.0.1 - - [04/Mar/2025 19:49:26] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-04 19:49:26,606 INFO: BEGIN (implicit)
2025-03-04 19:49:26,606 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:49:26,606 INFO: [cached since 4701s ago] {'pk_1': 265}
2025-03-04 19:49:26,607 DEBUG: Received update payload for Task ID 265: {'contributor_id': '5'}
2025-03-04 19:49:26,608 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:49:26,608 INFO: [cached since 3.659s ago] {'pk_1': 5}
2025-03-04 19:49:26,609 INFO: UPDATE task SET contributor_id=%(contributor_id)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:49:26,609 INFO: [cached since 3.658s ago] {'contributor_id': 5, 'updated_at': datetime.datetime(2025, 3, 4, 18, 49, 26, 609197, tzinfo=datetime.timezone.utc), 'task_id': 265}
2025-03-04 19:49:26,610 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-04 19:49:26,610 INFO: [cached since 4701s ago] {'pk_1': 7}
2025-03-04 19:49:26,611 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-04 19:49:26,611 INFO: [cached since 4745s ago] {'param_1': 7}
2025-03-04 19:49:26,613 INFO: UPDATE task SET updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:49:26,613 INFO: [cached since 3.654s ago] {'updated_at': datetime.datetime(2025, 3, 4, 18, 49, 26, 612622), 'task_id': 265}
2025-03-04 19:49:26,614 INFO: COMMIT
2025-03-04 19:49:26,614 INFO: Task ID 265 updated successfully. Updated fields: ['contributor_id']
2025-03-04 19:49:26,615 INFO: BEGIN (implicit)
2025-03-04 19:49:26,615 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:49:26,615 INFO: [cached since 4596s ago] {'pk_1': 265}
2025-03-04 19:49:26,616 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:49:26,616 INFO: [cached since 3.653s ago] {'pk_1': 5}
2025-03-04 19:49:26,617 INFO: ROLLBACK
2025-03-04 19:49:26,620 INFO: 127.0.0.1 - - [04/Mar/2025 19:49:26] "PATCH /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:49:30,391 INFO: 127.0.0.1 - - [04/Mar/2025 19:49:30] "OPTIONS /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:49:30,395 INFO: BEGIN (implicit)
2025-03-04 19:49:30,395 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:49:30,395 INFO: [cached since 4704s ago] {'pk_1': 265}
2025-03-04 19:49:30,397 DEBUG: Received update payload for Task ID 265: {'story_points': '9'}
2025-03-04 19:49:30,399 INFO: UPDATE task SET story_points=%(story_points)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:49:30,399 INFO: [generated in 0.00040s] {'story_points': 9, 'updated_at': datetime.datetime(2025, 3, 4, 18, 49, 30, 397807), 'task_id': 265}
2025-03-04 19:49:30,400 INFO: COMMIT
2025-03-04 19:49:30,402 INFO: Task ID 265 updated successfully. Updated fields: ['story_points']
2025-03-04 19:49:30,402 INFO: BEGIN (implicit)
2025-03-04 19:49:30,403 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:49:30,404 INFO: [cached since 4600s ago] {'pk_1': 265}
2025-03-04 19:49:30,406 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:49:30,406 INFO: [cached since 4704s ago] {'pk_1': 5}
2025-03-04 19:49:30,408 INFO: ROLLBACK
2025-03-04 19:49:30,409 INFO: 127.0.0.1 - - [04/Mar/2025 19:49:30] "PATCH /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:49:35,167 INFO: BEGIN (implicit)
2025-03-04 19:49:35,168 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:49:35,168 INFO: [cached since 4709s ago] {'pk_1': 265}
2025-03-04 19:49:35,170 DEBUG: Received update payload for Task ID 265: {'status': 'In Progress'}
2025-03-04 19:49:35,170 DEBUG: Updated status for Task ID 265 to: In Progress
2025-03-04 19:49:35,171 INFO: UPDATE task SET status=%(status)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:49:35,172 INFO: [generated in 0.00029s] {'status': 'In Progress', 'updated_at': datetime.datetime(2025, 3, 4, 18, 49, 35, 170783), 'task_id': 265}
2025-03-04 19:49:35,173 INFO: COMMIT
2025-03-04 19:49:35,174 INFO: Task ID 265 updated successfully. Updated fields: ['status']
2025-03-04 19:49:35,174 INFO: BEGIN (implicit)
2025-03-04 19:49:35,175 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:49:35,175 INFO: [cached since 4605s ago] {'pk_1': 265}
2025-03-04 19:49:35,177 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:49:35,177 INFO: [cached since 4709s ago] {'pk_1': 5}
2025-03-04 19:49:35,178 INFO: ROLLBACK
2025-03-04 19:49:35,179 INFO: 127.0.0.1 - - [04/Mar/2025 19:49:35] "PATCH /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:49:40,653 INFO: 127.0.0.1 - - [04/Mar/2025 19:49:40] "OPTIONS /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:49:40,658 INFO: BEGIN (implicit)
2025-03-04 19:49:40,659 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:49:40,659 INFO: [cached since 4715s ago] {'pk_1': 265}
2025-03-04 19:49:40,662 DEBUG: Received update payload for Task ID 265: {'priority': 'Low'}
2025-03-04 19:49:40,662 DEBUG: üîç Validating priority: key=priority, value=Low, task_type=User Story
2025-03-04 19:49:40,662 DEBUG: Updated priority for Task ID 265
2025-03-04 19:49:40,664 INFO: UPDATE task SET priority=%(priority)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:49:40,665 INFO: [generated in 0.00080s] {'priority': None, 'updated_at': datetime.datetime(2025, 3, 4, 18, 49, 40, 662915), 'task_id': 265}
2025-03-04 19:49:40,666 INFO: COMMIT
2025-03-04 19:49:40,667 INFO: Task ID 265 updated successfully. Updated fields: ['priority']
2025-03-04 19:49:40,668 INFO: BEGIN (implicit)
2025-03-04 19:49:40,668 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:49:40,668 INFO: [cached since 4610s ago] {'pk_1': 265}
2025-03-04 19:49:40,670 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:49:40,670 INFO: [cached since 4715s ago] {'pk_1': 5}
2025-03-04 19:49:40,671 INFO: ROLLBACK
2025-03-04 19:49:40,672 INFO: 127.0.0.1 - - [04/Mar/2025 19:49:40] "PATCH /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:49:45,638 INFO: BEGIN (implicit)
2025-03-04 19:49:45,639 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:49:45,639 INFO: [cached since 4720s ago] {'pk_1': 265}
2025-03-04 19:49:45,641 DEBUG: Received update payload for Task ID 265: {'task_type': 'Subtask'}
2025-03-04 19:49:45,641 INFO: Task ID 265: Changing task_type from User Story to Subtask
2025-03-04 19:49:45,641 DEBUG: Validating task_type change for Task 265: Subtask
2025-03-04 19:49:45,641 INFO: Task 265: Updating 'task_type' from User Story to Subtask
2025-03-04 19:49:45,641 INFO: Hierarchy validation passed for Task 265.
2025-03-04 19:49:45,642 INFO: Validation passed for task_type: Subtask
2025-03-04 19:49:45,642 INFO: UPDATE task SET task_type=%(task_type)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:49:45,643 INFO: [cached since 4573s ago] {'task_type': 'Subtask', 'updated_at': datetime.datetime(2025, 3, 4, 18, 49, 45, 642207), 'task_id': 265}
2025-03-04 19:49:45,644 INFO: COMMIT
2025-03-04 19:49:45,645 INFO: Task ID 265 updated successfully. Updated fields: ['task_type']
2025-03-04 19:49:45,645 INFO: BEGIN (implicit)
2025-03-04 19:49:45,646 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:49:45,647 INFO: [cached since 4615s ago] {'pk_1': 265}
2025-03-04 19:49:45,648 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:49:45,649 INFO: [cached since 4720s ago] {'pk_1': 5}
2025-03-04 19:49:45,650 INFO: ROLLBACK
2025-03-04 19:49:45,651 INFO: 127.0.0.1 - - [04/Mar/2025 19:49:45] "PATCH /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:49:45,735 INFO: 127.0.0.1 - - [04/Mar/2025 19:49:45] "OPTIONS /tasks/available_tasks?task_type=Subtask&exclude_task_id=265&page=1&limit=30 HTTP/1.1" 200 -
2025-03-04 19:49:45,736 INFO: Entering available_tasks route...
2025-03-04 19:49:45,737 DEBUG: Query parameters: task_type=Subtask, exclude_task_id=265, search_term=, project_id=None, limit=30, page=1
2025-03-04 19:49:45,737 INFO: BEGIN (implicit)
2025-03-04 19:49:45,738 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:49:45,738 INFO: [cached since 4720s ago] {'pk_1': 265}
2025-03-04 19:49:45,739 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 265, 'task_type': ['Subtask']}
2025-03-04 19:49:45,739 INFO: Validating hierarchy for Task N/A
2025-03-04 19:49:45,740 INFO: Determining valid parent types for task_type: Subtask
2025-03-04 19:49:45,740 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 265, 'task_type': ['User Story']}
2025-03-04 19:49:45,746 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-04 19:49:45,748 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-04 19:49:45,748 INFO: [cached since 4719s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'User Story'}
2025-03-04 19:49:45,750 DEBUG: Tasks returned: [{'id': 347, 'name': 'new user story', 'task_type': 'User Story', 'is_parent': False}, {'id': 344, 'name': 'new user story', 'task_type': 'User Story', 'is_parent': False}, {'id': 335, 'name': 'new user story', 'task_type': 'User Story', 'is_parent': False}, {'id': 343, 'name': 'new user story', 'task_type': 'User Story', 'is_parent': False}, {'id': 340, 'name': 'new user story', 'task_type': 'User Story', 'is_parent': False}, {'id': 337, 'name': 'new user story', 'task_type': 'User Story', 'is_parent': False}, {'id': 292, 'name': 'Issue: assigning contributor does not work', 'task_type': 'User Story', 'is_parent': False}, {'id': 354, 'name': 'new user story', 'task_type': 'User Story', 'is_parent': False}, {'id': 339, 'name': 'new user story', 'task_type': 'User Story', 'is_parent': False}, {'id': 342, 'name': 'new user story', 'task_type': 'User Story', 'is_parent': False}, {'id': 332, 'name': 'new user story', 'task_type': 'User Story', 'is_parent': False}, {'id': 333, 'name': 'new user story', 'task_type': 'User Story', 'is_parent': False}, {'id': 348, 'name': 'new user story', 'task_type': 'User Story', 'is_parent': False}, {'id': 334, 'name': 'new user story', 'task_type': 'User Story', 'is_parent': False}, {'id': 341, 'name': 'new user story', 'task_type': 'User Story', 'is_parent': False}, {'id': 336, 'name': 'new user story', 'task_type': 'User Story', 'is_parent': False}, {'id': 346, 'name': 'new user story', 'task_type': 'User Story', 'is_parent': False}, {'id': 362, 'name': 'new user story', 'task_type': 'User Story', 'is_parent': False}, {'id': 345, 'name': 'new user story', 'task_type': 'User Story', 'is_parent': False}, {'id': 331, 'name': 'new user story', 'task_type': 'User Story', 'is_parent': False}, {'id': 338, 'name': 'new user story', 'task_type': 'User Story', 'is_parent': False}, {'id': 329, 'name': 'Implement an API endpoint for submitting raw feature requests.', 'task_type': 'User Story', 'is_parent': False}, {'id': 291, 'name': 'Add dropdowns in task list for changing: Assigned to, Estimate, Task Type and Status', 'task_type': 'User Story', 'is_parent': False}, {'id': 386, 'name': 'Test task', 'task_type': 'User Story', 'is_parent': False}, {'id': 266, 'name': 'Highlight the nested tasks', 'task_type': 'User Story', 'is_parent': False}, {'id': 326, 'name': 'Add dropdown in task list for changing: Project', 'task_type': 'User Story', 'is_parent': False}, {'id': 295, 'name': 'Issue: drag and drop errors', 'task_type': 'User Story', 'is_parent': False}, {'id': 264, 'name': 'Close all / Open all childtasks', 'task_type': 'User Story', 'is_parent': False}, {'id': 287, 'name': 'When moving a parent item to another project make sure the subtasks are moved as well', 'task_type': 'User Story', 'is_parent': False}, {'id': 328, 'name': 'üü¢ User Story 1: AI-Generated Feature Refinement\xa0(8 Story Points)', 'task_type': 'User Story', 'is_parent': False}]
2025-03-04 19:49:45,751 INFO: ROLLBACK
2025-03-04 19:49:45,752 INFO: 127.0.0.1 - - [04/Mar/2025 19:49:45] "GET /tasks/available_tasks?task_type=Subtask&exclude_task_id=265&page=1&limit=30 HTTP/1.1" 200 -
2025-03-04 19:49:50,286 INFO: 127.0.0.1 - - [04/Mar/2025 19:49:50] "OPTIONS /api/tasks/265/parent HTTP/1.1" 200 -
2025-03-04 19:49:50,290 INFO: BEGIN (implicit)
2025-03-04 19:49:50,291 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:49:50,291 INFO: [cached since 4724s ago] {'pk_1': 265}
2025-03-04 19:49:50,293 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:49:50,293 INFO: [cached since 4724s ago] {'pk_1': '347'}
2025-03-04 19:49:50,294 DEBUG: Validating parent_id change for Task 265: 347
2025-03-04 19:49:50,295 INFO: Task 265: Updating 'parent_id' from None to 347
2025-03-04 19:49:50,295 INFO: Checking circular reference for Task 265 with Parent ID: 347
2025-03-04 19:49:50,296 INFO: SELECT task.parent_id AS task_parent_id 
FROM task 
WHERE task.id = %(id_1)s 
 LIMIT %(param_1)s
2025-03-04 19:49:50,296 INFO: [cached since 4620s ago] {'id_1': '347', 'param_1': 1}
2025-03-04 19:49:50,296 INFO: SELECT task.parent_id AS task_parent_id 
FROM task 
WHERE task.id = %(id_1)s 
 LIMIT %(param_1)s
2025-03-04 19:49:50,296 INFO: [cached since 4553s ago] {'id_1': 327, 'param_1': 1}
2025-03-04 19:49:50,297 INFO: Circular reference check passed.
2025-03-04 19:49:50,297 INFO: SELECT task.task_type AS task_task_type 
FROM task 
WHERE task.id = %(id_1)s 
 LIMIT %(param_1)s
2025-03-04 19:49:50,297 INFO: [cached since 4620s ago] {'id_1': '347', 'param_1': 1}
2025-03-04 19:49:50,297 DEBUG: Validating hierarchy: Task 265, Parent Type: User Story
2025-03-04 19:49:50,297 INFO: Hierarchy validation passed for Task 265.
2025-03-04 19:49:50,297 INFO: Validation passed for parent_id: 347
2025-03-04 19:49:50,297 INFO: UPDATE task SET parent_id=%(parent_id)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:49:50,298 INFO: [cached since 4620s ago] {'parent_id': '347', 'updated_at': datetime.datetime(2025, 3, 4, 18, 49, 50, 297975, tzinfo=datetime.timezone.utc), 'task_id': 265}
2025-03-04 19:49:50,298 INFO: COMMIT
2025-03-04 19:49:50,299 INFO: BEGIN (implicit)
2025-03-04 19:49:50,299 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:49:50,299 INFO: [cached since 4620s ago] {'pk_1': 265}
2025-03-04 19:49:50,300 INFO: ROLLBACK
2025-03-04 19:49:50,300 INFO: 127.0.0.1 - - [04/Mar/2025 19:49:50] "PATCH /api/tasks/265/parent HTTP/1.1" 200 -
2025-03-04 19:49:56,119 INFO: 127.0.0.1 - - [04/Mar/2025 19:49:56] "OPTIONS /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:49:56,123 INFO: BEGIN (implicit)
2025-03-04 19:49:56,124 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:49:56,124 INFO: [cached since 4730s ago] {'pk_1': 265}
2025-03-04 19:49:56,126 DEBUG: Received update payload for Task ID 265: {'project_id': '5'}
2025-03-04 19:49:56,126 DEBUG: Validating parent_id change for Task 265: None
2025-03-04 19:49:56,126 INFO: Task 265: Updating 'parent_id' from 347 to None
2025-03-04 19:49:56,126 INFO: Hierarchy validation passed for Task 265.
2025-03-04 19:49:56,127 INFO: Validation passed for parent_id: None
2025-03-04 19:49:56,127 INFO: UPDATE task SET parent_id=%(parent_id)s, project_id=%(project_id)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:49:56,128 INFO: [cached since 4593s ago] {'parent_id': None, 'project_id': 5, 'updated_at': datetime.datetime(2025, 3, 4, 18, 49, 56, 127195), 'task_id': 265}
2025-03-04 19:49:56,129 INFO: COMMIT
2025-03-04 19:49:56,131 INFO: Task ID 265 updated successfully. Updated fields: ['parent_id', 'project_id']
2025-03-04 19:49:56,131 INFO: BEGIN (implicit)
2025-03-04 19:49:56,131 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:49:56,132 INFO: [cached since 4626s ago] {'pk_1': 265}
2025-03-04 19:49:56,133 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:49:56,133 INFO: [cached since 4730s ago] {'pk_1': 5}
2025-03-04 19:49:56,134 INFO: ROLLBACK
2025-03-04 19:49:56,135 INFO: 127.0.0.1 - - [04/Mar/2025 19:49:56] "PATCH /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:49:56,229 INFO: BEGIN (implicit)
2025-03-04 19:49:56,230 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-04 19:49:56,230 INFO: [cached since 4774s ago] {'pk_1': 5}
2025-03-04 19:49:56,231 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-04 19:49:56,231 INFO: [cached since 4774s ago] {}
2025-03-04 19:49:56,232 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-04 19:49:56,232 INFO: [cached since 4774s ago] {'param_1': 5}
2025-03-04 19:49:56,233 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:49:56,233 INFO: [cached since 4774s ago] {'param_1': 1}
2025-03-04 19:49:56,234 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:49:56,235 INFO: [cached since 4774s ago] {'param_1': 2}
2025-03-04 19:49:56,236 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:49:56,236 INFO: [cached since 4774s ago] {'param_1': 3}
2025-03-04 19:49:56,241 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:49:56,241 INFO: [cached since 4774s ago] {'param_1': 4}
2025-03-04 19:49:56,243 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:49:56,244 INFO: [cached since 4774s ago] {'param_1': 5}
2025-03-04 19:49:56,245 INFO: ROLLBACK
2025-03-04 19:49:56,245 INFO: 127.0.0.1 - - [04/Mar/2025 19:49:56] "GET /api/projects/5/contributors/manage HTTP/1.1" 200 -
2025-03-04 19:50:00,901 INFO: BEGIN (implicit)
2025-03-04 19:50:00,902 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:50:00,903 INFO: [cached since 4735s ago] {'pk_1': 265}
2025-03-04 19:50:00,905 DEBUG: Received update payload for Task ID 265: {'project_id': '7'}
2025-03-04 19:50:00,906 INFO: UPDATE task SET project_id=%(project_id)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:50:00,906 INFO: [cached since 4593s ago] {'project_id': 7, 'updated_at': datetime.datetime(2025, 3, 4, 18, 50, 0, 905355), 'task_id': 265}
2025-03-04 19:50:00,907 INFO: COMMIT
2025-03-04 19:50:00,908 INFO: Task ID 265 updated successfully. Updated fields: ['project_id']
2025-03-04 19:50:00,909 INFO: BEGIN (implicit)
2025-03-04 19:50:00,909 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:50:00,910 INFO: [cached since 4631s ago] {'pk_1': 265}
2025-03-04 19:50:00,912 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:50:00,912 INFO: [cached since 4735s ago] {'pk_1': 5}
2025-03-04 19:50:00,913 INFO: ROLLBACK
2025-03-04 19:50:00,915 INFO: 127.0.0.1 - - [04/Mar/2025 19:50:00] "PATCH /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:50:00,993 INFO: BEGIN (implicit)
2025-03-04 19:50:00,994 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-04 19:50:00,995 INFO: [cached since 4779s ago] {'pk_1': 7}
2025-03-04 19:50:00,996 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-04 19:50:00,996 INFO: [cached since 4779s ago] {}
2025-03-04 19:50:00,998 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-04 19:50:00,998 INFO: [cached since 4779s ago] {'param_1': 7}
2025-03-04 19:50:00,999 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:50:00,999 INFO: [cached since 4779s ago] {'param_1': 1}
2025-03-04 19:50:01,001 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:50:01,001 INFO: [cached since 4779s ago] {'param_1': 2}
2025-03-04 19:50:01,002 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:50:01,003 INFO: [cached since 4779s ago] {'param_1': 3}
2025-03-04 19:50:01,004 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:50:01,004 INFO: [cached since 4779s ago] {'param_1': 4}
2025-03-04 19:50:01,006 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 19:50:01,006 INFO: [cached since 4779s ago] {'param_1': 5}
2025-03-04 19:50:01,008 INFO: ROLLBACK
2025-03-04 19:50:01,009 INFO: 127.0.0.1 - - [04/Mar/2025 19:50:01] "GET /api/projects/7/contributors/manage HTTP/1.1" 200 -
2025-03-04 19:50:05,837 INFO: 127.0.0.1 - - [04/Mar/2025 19:50:05] "OPTIONS /api/tasks/265/parent HTTP/1.1" 200 -
2025-03-04 19:50:05,841 INFO: 127.0.0.1 - - [04/Mar/2025 19:50:05] "[31m[1mPATCH /api/tasks/265/parent HTTP/1.1[0m" 400 -
2025-03-04 19:50:20,699 INFO: 127.0.0.1 - - [04/Mar/2025 19:50:20] "OPTIONS /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:50:20,703 INFO: BEGIN (implicit)
2025-03-04 19:50:20,703 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:50:20,704 INFO: [cached since 4755s ago] {'pk_1': 265}
2025-03-04 19:50:20,787 DEBUG: Received update payload for Task ID 265: {'task_type': 'User Story'}
2025-03-04 19:50:20,787 INFO: Task ID 265: Changing task_type from Subtask to User Story
2025-03-04 19:50:20,787 DEBUG: Validating task_type change for Task 265: User Story
2025-03-04 19:50:20,788 INFO: Task 265: Updating 'task_type' from Subtask to User Story
2025-03-04 19:50:20,788 INFO: Hierarchy validation passed for Task 265.
2025-03-04 19:50:20,788 INFO: Validation passed for task_type: User Story
2025-03-04 19:50:20,788 INFO: UPDATE task SET task_type=%(task_type)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:50:20,788 INFO: [cached since 4608s ago] {'task_type': 'User Story', 'updated_at': datetime.datetime(2025, 3, 4, 18, 50, 20, 788132), 'task_id': 265}
2025-03-04 19:50:20,789 INFO: COMMIT
2025-03-04 19:50:20,789 INFO: Task ID 265 updated successfully. Updated fields: ['task_type']
2025-03-04 19:50:20,789 INFO: BEGIN (implicit)
2025-03-04 19:50:20,789 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:50:20,790 INFO: [cached since 4650s ago] {'pk_1': 265}
2025-03-04 19:50:20,790 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:50:20,791 INFO: [cached since 4755s ago] {'pk_1': 5}
2025-03-04 19:50:20,791 INFO: ROLLBACK
2025-03-04 19:50:20,792 INFO: 127.0.0.1 - - [04/Mar/2025 19:50:20] "PATCH /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:50:20,873 INFO: 127.0.0.1 - - [04/Mar/2025 19:50:20] "OPTIONS /tasks/available_tasks?task_type=User%20Story&exclude_task_id=265&page=1&limit=30 HTTP/1.1" 200 -
2025-03-04 19:50:20,874 INFO: Entering available_tasks route...
2025-03-04 19:50:20,874 DEBUG: Query parameters: task_type=User Story, exclude_task_id=265, search_term=, project_id=None, limit=30, page=1
2025-03-04 19:50:20,875 INFO: BEGIN (implicit)
2025-03-04 19:50:20,875 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:50:20,875 INFO: [cached since 4755s ago] {'pk_1': 265}
2025-03-04 19:50:20,876 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 265, 'task_type': ['User Story']}
2025-03-04 19:50:20,876 INFO: Validating hierarchy for Task N/A
2025-03-04 19:50:20,876 INFO: Determining valid parent types for task_type: User Story
2025-03-04 19:50:20,877 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 265, 'task_type': ['Epic']}
2025-03-04 19:50:20,881 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-04 19:50:20,881 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-04 19:50:20,881 INFO: [cached since 4755s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-04 19:50:20,883 DEBUG: Tasks returned: [{'id': 327, 'name': 'üèÜ\xa0Epic: AI-Driven Feature Planning & Estimation', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 267, 'name': 'Improvements to toggles and nested tasks', 'task_type': 'Epic', 'is_parent': False}, {'id': 325, 'name': 'Improve task list responsive grid', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okr¬¥s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 284, 'name': 'Add type "issue/bug"', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notifications', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}]
2025-03-04 19:50:20,885 INFO: ROLLBACK
2025-03-04 19:50:20,885 INFO: 127.0.0.1 - - [04/Mar/2025 19:50:20] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=265&page=1&limit=30 HTTP/1.1" 200 -
2025-03-04 19:50:28,800 INFO: 127.0.0.1 - - [04/Mar/2025 19:50:28] "OPTIONS /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:50:28,805 INFO: BEGIN (implicit)
2025-03-04 19:50:28,805 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:50:28,806 INFO: [cached since 4763s ago] {'pk_1': 265}
2025-03-04 19:50:28,808 DEBUG: Received update payload for Task ID 265: {'priority': 'Medium'}
2025-03-04 19:50:28,808 DEBUG: üîç Validating priority: key=priority, value=Medium, task_type=User Story
2025-03-04 19:50:28,808 DEBUG: Updated priority for Task ID 265
2025-03-04 19:50:28,809 INFO: UPDATE task SET updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 19:50:28,809 INFO: [cached since 65.85s ago] {'updated_at': datetime.datetime(2025, 3, 4, 18, 50, 28, 809032), 'task_id': 265}
2025-03-04 19:50:28,811 INFO: COMMIT
2025-03-04 19:50:28,812 INFO: Task ID 265 updated successfully. Updated fields: ['priority']
2025-03-04 19:50:28,812 INFO: BEGIN (implicit)
2025-03-04 19:50:28,813 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 19:50:28,813 INFO: [cached since 4658s ago] {'pk_1': 265}
2025-03-04 19:50:28,814 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor 
WHERE contributor.id = %(pk_1)s
2025-03-04 19:50:28,815 INFO: [cached since 4763s ago] {'pk_1': 5}
2025-03-04 19:50:28,816 INFO: ROLLBACK
2025-03-04 19:50:28,817 INFO: 127.0.0.1 - - [04/Mar/2025 19:50:28] "PATCH /api/tasks/265 HTTP/1.1" 200 -
2025-03-04 19:51:41,266 INFO: 127.0.0.1 - - [04/Mar/2025 19:51:41] "GET /socket.io/?EIO=4&transport=websocket&sid=8n4JPaLbakaT5aJLAAAa HTTP/1.1" 200 -
2025-03-04 19:51:42,864 INFO: 127.0.0.1 - - [04/Mar/2025 19:51:42] "GET /socket.io/?EIO=4&transport=polling&t=ui26jlxg HTTP/1.1" 200 -
2025-03-04 19:51:42,869 INFO: 127.0.0.1 - - [04/Mar/2025 19:51:42] "POST /socket.io/?EIO=4&transport=polling&t=ui26r37l&sid=mBFjGoydZ4FLvo1XAAAc HTTP/1.1" 200 -
2025-03-04 19:51:42,871 INFO: 127.0.0.1 - - [04/Mar/2025 19:51:42] "GET /socket.io/?EIO=4&transport=polling&t=ui26smpv&sid=mBFjGoydZ4FLvo1XAAAc HTTP/1.1" 200 -
2025-03-04 19:51:42,874 INFO: 127.0.0.1 - - [04/Mar/2025 19:51:42] "GET /socket.io/?EIO=4&transport=polling&t=ui26xlm9&sid=mBFjGoydZ4FLvo1XAAAc HTTP/1.1" 200 -
2025-03-04 19:59:36,229 INFO: 127.0.0.1 - - [04/Mar/2025 19:59:36] "GET /socket.io/?EIO=4&transport=websocket&sid=N8YtCkMrRcdS4x_OAAAY HTTP/1.1" 200 -
2025-03-04 19:59:36,231 INFO: 127.0.0.1 - - [04/Mar/2025 19:59:36] "GET /socket.io/?EIO=4&transport=websocket&sid=rRY3mcABDgHpFVsIAAAS HTTP/1.1" 200 -
2025-03-04 19:59:36,233 INFO: 127.0.0.1 - - [04/Mar/2025 19:59:36] "GET /socket.io/?EIO=4&transport=websocket&sid=ew__UW4jmMfCUf96AAAU HTTP/1.1" 200 -
2025-03-04 19:59:37,293 INFO: 127.0.0.1 - - [04/Mar/2025 19:59:37] "GET /socket.io/?EIO=4&transport=polling&t=us896k4i HTTP/1.1" 200 -
2025-03-04 19:59:37,300 INFO: 127.0.0.1 - - [04/Mar/2025 19:59:37] "POST /socket.io/?EIO=4&transport=polling&t=us89ccwo&sid=FtBL5gOuSOE2KmI8AAAe HTTP/1.1" 200 -
2025-03-04 19:59:37,301 INFO: 127.0.0.1 - - [04/Mar/2025 19:59:37] "GET /socket.io/?EIO=4&transport=polling&t=us89f3oa&sid=FtBL5gOuSOE2KmI8AAAe HTTP/1.1" 200 -
2025-03-04 19:59:37,388 INFO: 127.0.0.1 - - [04/Mar/2025 19:59:37] "GET /socket.io/?EIO=4&transport=polling&t=us8bvab8 HTTP/1.1" 200 -
2025-03-04 19:59:37,392 INFO: 127.0.0.1 - - [04/Mar/2025 19:59:37] "POST /socket.io/?EIO=4&transport=polling&t=us8bzlx5&sid=X_CarI58AyGeufjfAAAg HTTP/1.1" 200 -
2025-03-04 19:59:37,393 INFO: 127.0.0.1 - - [04/Mar/2025 19:59:37] "GET /socket.io/?EIO=4&transport=polling&t=us8bzbis&sid=X_CarI58AyGeufjfAAAg HTTP/1.1" 200 -
2025-03-04 19:59:37,512 INFO: 127.0.0.1 - - [04/Mar/2025 19:59:37] "GET /socket.io/?EIO=4&transport=polling&t=us8fbojt HTTP/1.1" 200 -
2025-03-04 19:59:37,518 INFO: 127.0.0.1 - - [04/Mar/2025 19:59:37] "POST /socket.io/?EIO=4&transport=polling&t=us8ff90x&sid=06nFff9ABh7HYo_pAAAi HTTP/1.1" 200 -
2025-03-04 19:59:37,519 INFO: 127.0.0.1 - - [04/Mar/2025 19:59:37] "GET /socket.io/?EIO=4&transport=polling&t=us8fhc87&sid=06nFff9ABh7HYo_pAAAi HTTP/1.1" 200 -
2025-03-04 20:40:11,271 INFO: 127.0.0.1 - - [04/Mar/2025 20:40:11] "GET /socket.io/?EIO=4&transport=websocket&sid=FtBL5gOuSOE2KmI8AAAe HTTP/1.1" 200 -
2025-03-04 20:40:11,274 INFO: 127.0.0.1 - - [04/Mar/2025 20:40:11] "GET /socket.io/?EIO=4&transport=websocket&sid=06nFff9ABh7HYo_pAAAi HTTP/1.1" 200 -
2025-03-04 20:40:11,274 INFO: 127.0.0.1 - - [04/Mar/2025 20:40:11] "GET /socket.io/?EIO=4&transport=websocket&sid=X_CarI58AyGeufjfAAAg HTTP/1.1" 200 -
2025-03-04 20:40:12,063 INFO: 127.0.0.1 - - [04/Mar/2025 20:40:12] "GET /socket.io/?EIO=4&transport=polling&t=w8exmdao HTTP/1.1" 200 -
2025-03-04 20:40:12,068 INFO: 127.0.0.1 - - [04/Mar/2025 20:40:12] "POST /socket.io/?EIO=4&transport=polling&t=w8extdcx&sid=6rT5RB_UEOkf3prRAAAk HTTP/1.1" 200 -
2025-03-04 20:40:12,069 INFO: 127.0.0.1 - - [04/Mar/2025 20:40:12] "GET /socket.io/?EIO=4&transport=polling&t=w8exutkh&sid=6rT5RB_UEOkf3prRAAAk HTTP/1.1" 200 -
2025-03-04 20:40:12,444 INFO: 127.0.0.1 - - [04/Mar/2025 20:40:12] "GET /socket.io/?EIO=4&transport=polling&t=w8f8boqw HTTP/1.1" 200 -
2025-03-04 20:40:12,448 INFO: 127.0.0.1 - - [04/Mar/2025 20:40:12] "POST /socket.io/?EIO=4&transport=polling&t=w8f8ek5y&sid=m84a_H009e2J7-cRAAAm HTTP/1.1" 200 -
2025-03-04 20:40:12,449 INFO: 127.0.0.1 - - [04/Mar/2025 20:40:12] "GET /socket.io/?EIO=4&transport=polling&t=w8f8f7wy&sid=m84a_H009e2J7-cRAAAm HTTP/1.1" 200 -
2025-03-04 20:40:12,450 INFO: 127.0.0.1 - - [04/Mar/2025 20:40:12] "GET /socket.io/?EIO=4&transport=polling&t=w8f8id3a&sid=m84a_H009e2J7-cRAAAm HTTP/1.1" 200 -
2025-03-04 20:40:12,567 INFO: 127.0.0.1 - - [04/Mar/2025 20:40:12] "GET /socket.io/?EIO=4&transport=polling&t=w8fbp119 HTTP/1.1" 200 -
2025-03-04 20:40:12,581 INFO: 127.0.0.1 - - [04/Mar/2025 20:40:12] "POST /socket.io/?EIO=4&transport=polling&t=w8fbvd97&sid=Y_cJ61uUHnmYgcxxAAAo HTTP/1.1" 200 -
2025-03-04 20:40:12,582 INFO: 127.0.0.1 - - [04/Mar/2025 20:40:12] "GET /socket.io/?EIO=4&transport=polling&t=w8fbwzjh&sid=Y_cJ61uUHnmYgcxxAAAo HTTP/1.1" 200 -
2025-03-04 21:20:45,628 INFO: 127.0.0.1 - - [04/Mar/2025 21:20:45] "GET /socket.io/?EIO=4&transport=websocket&sid=6rT5RB_UEOkf3prRAAAk HTTP/1.1" 200 -
2025-03-04 21:20:45,629 INFO: 127.0.0.1 - - [04/Mar/2025 21:20:45] "GET /socket.io/?EIO=4&transport=websocket&sid=m84a_H009e2J7-cRAAAm HTTP/1.1" 200 -
2025-03-04 21:20:45,630 INFO: 127.0.0.1 - - [04/Mar/2025 21:20:45] "GET /socket.io/?EIO=4&transport=websocket&sid=Y_cJ61uUHnmYgcxxAAAo HTTP/1.1" 200 -
2025-03-04 21:20:46,432 INFO: 127.0.0.1 - - [04/Mar/2025 21:20:46] "GET /socket.io/?EIO=4&transport=polling&t=xolb1kkc HTTP/1.1" 200 -
2025-03-04 21:20:46,438 INFO: 127.0.0.1 - - [04/Mar/2025 21:20:46] "POST /socket.io/?EIO=4&transport=polling&t=xolb7klz&sid=-l5XNTEnox6yZ8EkAAAq HTTP/1.1" 200 -
2025-03-04 21:20:46,440 INFO: 127.0.0.1 - - [04/Mar/2025 21:20:46] "GET /socket.io/?EIO=4&transport=polling&t=xolb9dt8&sid=-l5XNTEnox6yZ8EkAAAq HTTP/1.1" 200 -
2025-03-04 21:20:47,030 INFO: 127.0.0.1 - - [04/Mar/2025 21:20:47] "GET /socket.io/?EIO=4&transport=polling&t=xolro4nf HTTP/1.1" 200 -
2025-03-04 21:20:47,035 INFO: 127.0.0.1 - - [04/Mar/2025 21:20:47] "POST /socket.io/?EIO=4&transport=polling&t=xolrtllq&sid=EhdtX5YyKeHZIOGiAAAs HTTP/1.1" 200 -
2025-03-04 21:20:47,038 INFO: 127.0.0.1 - - [04/Mar/2025 21:20:47] "GET /socket.io/?EIO=4&transport=polling&t=xolrue73&sid=EhdtX5YyKeHZIOGiAAAs HTTP/1.1" 200 -
2025-03-04 21:20:47,134 INFO: 127.0.0.1 - - [04/Mar/2025 21:20:47] "GET /socket.io/?EIO=4&transport=polling&t=xolueg81 HTTP/1.1" 200 -
2025-03-04 21:20:47,154 INFO: 127.0.0.1 - - [04/Mar/2025 21:20:47] "POST /socket.io/?EIO=4&transport=polling&t=xoluo6t0&sid=KJN0TCLtXuCVEUEnAAAu HTTP/1.1" 200 -
2025-03-04 21:20:47,156 INFO: 127.0.0.1 - - [04/Mar/2025 21:20:47] "GET /socket.io/?EIO=4&transport=polling&t=xolv4tlj&sid=KJN0TCLtXuCVEUEnAAAu HTTP/1.1" 200 -
2025-03-04 21:20:47,158 INFO: 127.0.0.1 - - [04/Mar/2025 21:20:47] "GET /socket.io/?EIO=4&transport=polling&t=xolv99mu&sid=KJN0TCLtXuCVEUEnAAAu HTTP/1.1" 200 -
2025-03-04 21:34:35,518 INFO: 127.0.0.1 - - [04/Mar/2025 21:34:35] "GET /socket.io/?EIO=4&transport=websocket&sid=-l5XNTEnox6yZ8EkAAAq HTTP/1.1" 200 -
2025-03-04 21:34:35,519 INFO: 127.0.0.1 - - [04/Mar/2025 21:34:35] "GET /socket.io/?EIO=4&transport=websocket&sid=KJN0TCLtXuCVEUEnAAAu HTTP/1.1" 200 -
2025-03-04 21:34:35,519 INFO: 127.0.0.1 - - [04/Mar/2025 21:34:35] "GET /socket.io/?EIO=4&transport=websocket&sid=EhdtX5YyKeHZIOGiAAAs HTTP/1.1" 200 -
2025-03-04 21:34:36,321 INFO: 127.0.0.1 - - [04/Mar/2025 21:34:36] "GET /socket.io/?EIO=4&transport=polling&t=y6dnhuou HTTP/1.1" 200 -
2025-03-04 21:34:36,342 INFO: 127.0.0.1 - - [04/Mar/2025 21:34:36] "POST /socket.io/?EIO=4&transport=polling&t=y6dnvrp9&sid=tVRIt28O4z11US0UAAAw HTTP/1.1" 200 -
2025-03-04 21:34:36,344 INFO: 127.0.0.1 - - [04/Mar/2025 21:34:36] "GET /socket.io/?EIO=4&transport=polling&t=y6do4jzw&sid=tVRIt28O4z11US0UAAAw HTTP/1.1" 200 -
2025-03-04 21:34:36,600 INFO: 127.0.0.1 - - [04/Mar/2025 21:34:36] "GET /socket.io/?EIO=4&transport=polling&t=y6dv4ndq HTTP/1.1" 200 -
2025-03-04 21:34:36,603 INFO: 127.0.0.1 - - [04/Mar/2025 21:34:36] "POST /socket.io/?EIO=4&transport=polling&t=y6dvd5vq&sid=Pwqhr-rWeXom-dCsAAAy HTTP/1.1" 200 -
2025-03-04 21:34:36,605 INFO: 127.0.0.1 - - [04/Mar/2025 21:34:36] "GET /socket.io/?EIO=4&transport=polling&t=y6dvdy1q&sid=Pwqhr-rWeXom-dCsAAAy HTTP/1.1" 200 -
2025-03-04 21:34:36,611 INFO: 127.0.0.1 - - [04/Mar/2025 21:34:36] "GET /socket.io/?EIO=4&transport=polling&t=y6dvjje7&sid=Pwqhr-rWeXom-dCsAAAy HTTP/1.1" 200 -
2025-03-04 21:34:36,694 INFO: 127.0.0.1 - - [04/Mar/2025 21:34:36] "GET /socket.io/?EIO=4&transport=polling&t=y6dxv5in HTTP/1.1" 200 -
2025-03-04 21:34:36,725 INFO: 127.0.0.1 - - [04/Mar/2025 21:34:36] "POST /socket.io/?EIO=4&transport=polling&t=y6dxz2qs&sid=CeVzxR0dMBd0c0riAAA0 HTTP/1.1" 200 -
2025-03-04 21:34:36,726 INFO: 127.0.0.1 - - [04/Mar/2025 21:34:36] "GET /socket.io/?EIO=4&transport=polling&t=y6dy2v4m&sid=CeVzxR0dMBd0c0riAAA0 HTTP/1.1" 200 -
2025-03-04 21:42:14,386 INFO: 127.0.0.1 - - [04/Mar/2025 21:42:14] "GET /socket.io/?EIO=4&transport=websocket&sid=tVRIt28O4z11US0UAAAw HTTP/1.1" 200 -
2025-03-04 21:42:14,388 INFO: 127.0.0.1 - - [04/Mar/2025 21:42:14] "GET /socket.io/?EIO=4&transport=websocket&sid=Pwqhr-rWeXom-dCsAAAy HTTP/1.1" 200 -
2025-03-04 21:42:14,388 INFO: 127.0.0.1 - - [04/Mar/2025 21:42:14] "GET /socket.io/?EIO=4&transport=websocket&sid=CeVzxR0dMBd0c0riAAA0 HTTP/1.1" 200 -
2025-03-04 21:42:15,659 INFO: 127.0.0.1 - - [04/Mar/2025 21:42:15] "GET /socket.io/?EIO=4&transport=polling&t=yg82ulzo HTTP/1.1" 200 -
2025-03-04 21:42:15,665 INFO: 127.0.0.1 - - [04/Mar/2025 21:42:15] "POST /socket.io/?EIO=4&transport=polling&t=yg832e2q&sid=gJcktw2FbQe9UR5LAAA2 HTTP/1.1" 200 -
2025-03-04 21:42:15,666 INFO: 127.0.0.1 - - [04/Mar/2025 21:42:15] "GET /socket.io/?EIO=4&transport=polling&t=yg83457o&sid=gJcktw2FbQe9UR5LAAA2 HTTP/1.1" 200 -
2025-03-04 21:42:15,778 INFO: 127.0.0.1 - - [04/Mar/2025 21:42:15] "GET /socket.io/?EIO=4&transport=polling&t=yg8685c6 HTTP/1.1" 200 -
2025-03-04 21:42:15,784 INFO: 127.0.0.1 - - [04/Mar/2025 21:42:15] "POST /socket.io/?EIO=4&transport=polling&t=yg86do9x&sid=HgNP96A5M4i-JF3AAAA4 HTTP/1.1" 200 -
2025-03-04 21:42:15,785 INFO: 127.0.0.1 - - [04/Mar/2025 21:42:15] "GET /socket.io/?EIO=4&transport=polling&t=yg86ef4e&sid=HgNP96A5M4i-JF3AAAA4 HTTP/1.1" 200 -
2025-03-04 21:42:15,789 INFO: 127.0.0.1 - - [04/Mar/2025 21:42:15] "GET /socket.io/?EIO=4&transport=polling&t=yg86kpgh&sid=HgNP96A5M4i-JF3AAAA4 HTTP/1.1" 200 -
2025-03-04 21:42:15,877 INFO: 127.0.0.1 - - [04/Mar/2025 21:42:15] "GET /socket.io/?EIO=4&transport=polling&t=yg88zh7i HTTP/1.1" 200 -
2025-03-04 21:42:15,883 INFO: 127.0.0.1 - - [04/Mar/2025 21:42:15] "POST /socket.io/?EIO=4&transport=polling&t=yg894h5f&sid=kQrSBfZB3fbOMHnoAAA6 HTTP/1.1" 200 -
2025-03-04 21:42:15,886 INFO: 127.0.0.1 - - [04/Mar/2025 21:42:15] "GET /socket.io/?EIO=4&transport=polling&t=yg895dfj&sid=kQrSBfZB3fbOMHnoAAA6 HTTP/1.1" 200 -
2025-03-04 21:43:48,321 INFO: 127.0.0.1 - - [04/Mar/2025 21:43:48] "OPTIONS /api/tasks HTTP/1.1" 200 -
2025-03-04 21:43:48,324 INFO: save_task triggered
2025-03-04 21:43:48,325 INFO: Payload received: {'title': 'Untitled Task', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'status': 'Not Started', 'project_id': 19}
2025-03-04 21:43:48,325 INFO: üî• Incoming Payload: {'title': 'Untitled Task', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'status': 'Not Started', 'project_id': 19, 'name': 'untitled task'}
2025-03-04 21:43:48,325 INFO: üîç create_task() received data: {'title': 'Untitled Task', 'description': '', 'task_type': 'User Story', 'priority': 'Unset', 'status': 'Not Started', 'project_id': 19, 'name': 'untitled task', 'story_points': 0, 'parent_id': None}
2025-03-04 21:43:48,329 INFO: BEGIN (implicit)
2025-03-04 21:43:48,337 INFO: SELECT max(task.sort_order) AS max_1 
FROM task 
WHERE task.project_id = %(project_id_1)s
2025-03-04 21:43:48,337 INFO: [generated in 0.00063s] {'project_id_1': 19}
2025-03-04 21:43:48,347 DEBUG: Validating parent_id change for Task None: None
2025-03-04 21:43:48,347 INFO: Hierarchy validation passed for Task New Task.
2025-03-04 21:43:48,347 INFO: Validation passed for parent_id: None
2025-03-04 21:43:48,347 DEBUG: Validating task_type change for Task None: User Story
2025-03-04 21:43:48,347 INFO: Hierarchy validation passed for Task New Task.
2025-03-04 21:43:48,347 INFO: Validation passed for task_type: User Story
2025-03-04 21:43:48,348 DEBUG: üîç Validating priority: key=priority, value=Unset, task_type=User Story
2025-03-04 21:43:48,348 DEBUG: üîç Validating priority: key=epic_priority, value=None, task_type=User Story
2025-03-04 21:43:48,348 WARNING: üö® Unexpected epic_priority for non-Epic task: {'id': None, 'name': 'untitled task', 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': None, 'completed': False, 'parent_id': None, 'project_id': 19, 'project': 'No Project Assigned', 'contributor_id': None, 'assigned_to': 'Unassigned', 'story_points': 0, 'status': 'Not Started', 'sort_order': 86, 'created_at': '2025-03-04T20:43:48.346963', 'updated_at': None}
2025-03-04 21:43:48,348 DEBUG: Task initialized: name=untitled task, task_type=User Story, parent_id=None
2025-03-04 21:43:48,351 INFO: INSERT INTO task (name, sort_order, description, task_type, priority, epic_priority, is_archived, completed, status, parent_id, project_id, contributor_id, story_points, created_at, updated_at, completed_date) VALUES (%(name)s, %(sort_order)s, %(description)s, %(task_type)s, %(priority)s, %(epic_priority)s, %(is_archived)s, %(completed)s, %(status)s, %(parent_id)s, %(project_id)s, %(contributor_id)s, %(story_points)s, %(created_at)s, %(updated_at)s, %(completed_date)s) RETURNING task.id
2025-03-04 21:43:48,351 INFO: [generated in 0.00044s] {'name': 'untitled task', 'sort_order': 86, 'description': '', 'task_type': 'User Story', 'priority': None, 'epic_priority': None, 'is_archived': False, 'completed': False, 'status': 'Not Started', 'parent_id': None, 'project_id': 19, 'contributor_id': None, 'story_points': 0, 'created_at': datetime.datetime(2025, 3, 4, 20, 43, 48, 346963), 'updated_at': datetime.datetime(2025, 3, 4, 20, 43, 48, 351436, tzinfo=datetime.timezone.utc), 'completed_date': None}
2025-03-04 21:43:48,360 INFO: COMMIT
2025-03-04 21:43:48,362 INFO: BEGIN (implicit)
2025-03-04 21:43:48,362 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:43:48,362 INFO: [cached since 4937s ago] {'pk_1': 387}
2025-03-04 21:43:48,366 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-04 21:43:48,366 INFO: [cached since 5042s ago] {'pk_1': 19}
2025-03-04 21:43:48,368 INFO: New task created successfully: 387 (Priority: None, Status: Not Started)
2025-03-04 21:43:48,368 DEBUG: Attempting to fetch task after save...
2025-03-04 21:43:48,369 DEBUG: Fetched task: <Task untitled task (ID: 387, Type: User Story)>
2025-03-04 21:43:48,369 INFO: ROLLBACK
2025-03-04 21:43:48,370 INFO: 127.0.0.1 - - [04/Mar/2025 21:43:48] "[35m[1mPOST /api/tasks HTTP/1.1[0m" 201 -
2025-03-04 21:43:48,492 INFO: 127.0.0.1 - - [04/Mar/2025 21:43:48] "OPTIONS /tasks/available_tasks?task_type=User%20Story&exclude_task_id=387&page=1&limit=30 HTTP/1.1" 200 -
2025-03-04 21:43:48,494 INFO: BEGIN (implicit)
2025-03-04 21:43:48,494 INFO: 127.0.0.1 - - [04/Mar/2025 21:43:48] "OPTIONS /tasks/available_tasks?task_type=User%20Story&exclude_task_id=387&page=1&limit=30 HTTP/1.1" 200 -
2025-03-04 21:43:48,495 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-04 21:43:48,496 INFO: [cached since 5086s ago] {'pk_1': 19}
2025-03-04 21:43:48,497 INFO: Entering available_tasks route...
2025-03-04 21:43:48,497 DEBUG: Query parameters: task_type=User Story, exclude_task_id=387, search_term=, project_id=None, limit=30, page=1
2025-03-04 21:43:48,497 INFO: BEGIN (implicit)
2025-03-04 21:43:48,498 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:43:48,498 INFO: [cached since 5042s ago] {'pk_1': 387}
2025-03-04 21:43:48,498 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-04 21:43:48,498 INFO: [cached since 5086s ago] {}
2025-03-04 21:43:48,499 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-04 21:43:48,499 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 387, 'task_type': ['User Story']}
2025-03-04 21:43:48,499 INFO: [cached since 5086s ago] {'param_1': 19}
2025-03-04 21:43:48,499 INFO: Validating hierarchy for Task N/A
2025-03-04 21:43:48,499 INFO: Determining valid parent types for task_type: User Story
2025-03-04 21:43:48,500 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 387, 'task_type': ['Epic']}
2025-03-04 21:43:48,501 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 21:43:48,505 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-04 21:43:48,505 INFO: [cached since 5086s ago] {'param_1': 1}
2025-03-04 21:43:48,505 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-04 21:43:48,507 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 21:43:48,507 INFO: [cached since 5042s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-04 21:43:48,507 INFO: [cached since 5086s ago] {'param_1': 2}
2025-03-04 21:43:48,508 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 21:43:48,510 DEBUG: Tasks returned: [{'id': 327, 'name': 'üèÜ\xa0Epic: AI-Driven Feature Planning & Estimation', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 267, 'name': 'Improvements to toggles and nested tasks', 'task_type': 'Epic', 'is_parent': False}, {'id': 325, 'name': 'Improve task list responsive grid', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okr¬¥s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 284, 'name': 'Add type "issue/bug"', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notifications', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}]
2025-03-04 21:43:48,510 INFO: [cached since 5086s ago] {'param_1': 3}
2025-03-04 21:43:48,511 INFO: ROLLBACK
2025-03-04 21:43:48,511 INFO: 127.0.0.1 - - [04/Mar/2025 21:43:48] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=387&page=1&limit=30 HTTP/1.1" 200 -
2025-03-04 21:43:48,512 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 21:43:48,512 INFO: [cached since 5086s ago] {'param_1': 4}
2025-03-04 21:43:48,513 INFO: Entering available_tasks route...
2025-03-04 21:43:48,513 DEBUG: Query parameters: task_type=User Story, exclude_task_id=387, search_term=, project_id=None, limit=30, page=1
2025-03-04 21:43:48,513 INFO: BEGIN (implicit)
2025-03-04 21:43:48,513 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:43:48,513 INFO: [cached since 5042s ago] {'pk_1': 387}
2025-03-04 21:43:48,526 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 21:43:48,528 INFO: [cached since 5086s ago] {'param_1': 5}
2025-03-04 21:43:48,529 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 387, 'task_type': ['User Story']}
2025-03-04 21:43:48,529 INFO: Validating hierarchy for Task N/A
2025-03-04 21:43:48,529 INFO: Determining valid parent types for task_type: User Story
2025-03-04 21:43:48,530 DEBUG: Applying filters: {'is_archived': False, 'id__ne': 387, 'task_type': ['Epic']}
2025-03-04 21:43:48,531 INFO: ROLLBACK
2025-03-04 21:43:48,537 DEBUG: Generated query: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date, task_1.id AS task_1_id, task_1.name AS task_1_name, task_1.sort_order AS task_1_sort_order, task_1.description AS task_1_description, task_1.task_type AS task_1_task_type, task_1.priority AS task_1_priority, task_1.epic_priority AS task_1_epic_priority, task_1.is_archived AS task_1_is_archived, task_1.completed AS task_1_completed, task_1.status AS task_1_status, task_1.parent_id AS task_1_parent_id, task_1.project_id AS task_1_project_id, task_1.contributor_id AS task_1_contributor_id, task_1.story_points AS task_1_story_points, task_1.created_at AS task_1_created_at, task_1.updated_at AS task_1_updated_at, task_1.completed_date AS task_1_completed_date, contributor_1.id AS contributor_1_id, contributor_1.name AS contributor_1_name, project_1.id AS project_1_id, project_1.name AS project_1_name, project_1.description AS project_1_description, project_1.start_date AS project_1_start_date, project_1.end_date AS project_1_end_date, project_1.scope AS project_1_scope, project_1.completed_story_points AS project_1_completed_story_points, project_1.created_at AS project_1_created_at, project_1.updated_at AS project_1_updated_at, contributor_2.id AS contributor_2_id, contributor_2.name AS contributor_2_name 
FROM task LEFT OUTER JOIN task AS task_1 ON task.id = task_1.parent_id LEFT OUTER JOIN project AS project_1 ON project_1.id = task.project_id LEFT OUTER JOIN (project_contributor AS project_contributor_1 JOIN contributor AS contributor_1 ON contributor_1.id = project_contributor_1.contributor_id) ON project_1.id = project_contributor_1.project_id LEFT OUTER JOIN contributor AS contributor_2 ON contributor_2.id = task.contributor_id 
WHERE task.is_archived = false AND task.task_type IN (__[POSTCOMPILE_task_type_1]) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order
2025-03-04 21:43:48,537 INFO: SELECT task.id AS task_id, task.name AS task_name, task.task_type AS task_task_type 
FROM task 
WHERE task.is_archived = false AND task.task_type IN (%(task_type_1_1)s) AND task.task_type != %(task_type_2)s ORDER BY task.sort_order 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-03-04 21:43:48,537 INFO: 127.0.0.1 - - [04/Mar/2025 21:43:48] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-04 21:43:48,538 INFO: [cached since 5042s ago] {'task_type_2': 'Subtask', 'param_1': 31, 'param_2': 0, 'task_type_1_1': 'Epic'}
2025-03-04 21:43:48,540 DEBUG: Tasks returned: [{'id': 327, 'name': 'üèÜ\xa0Epic: AI-Driven Feature Planning & Estimation', 'task_type': 'Epic', 'is_parent': False}, {'id': 272, 'name': 'Implement a markdown text editor like notion', 'task_type': 'Epic', 'is_parent': False}, {'id': 279, 'name': 'github integration', 'task_type': 'Epic', 'is_parent': False}, {'id': 267, 'name': 'Improvements to toggles and nested tasks', 'task_type': 'Epic', 'is_parent': False}, {'id': 325, 'name': 'Improve task list responsive grid', 'task_type': 'Epic', 'is_parent': False}, {'id': 274, 'name': 'Add support for goals, initiatives, okr¬¥s', 'task_type': 'Epic', 'is_parent': False}, {'id': 282, 'name': 'implement same task list in projects but filtered on project', 'task_type': 'Epic', 'is_parent': False}, {'id': 276, 'name': 'Add support for priority', 'task_type': 'Epic', 'is_parent': False}, {'id': 277, 'name': 'Implement custom task workflow statuses', 'task_type': 'Epic', 'is_parent': False}, {'id': 288, 'name': 'When trying to move subtask to another project, make sure a warning is displayed', 'task_type': 'Epic', 'is_parent': False}, {'id': 284, 'name': 'Add type "issue/bug"', 'task_type': 'Epic', 'is_parent': False}, {'id': 281, 'name': 'Add a page for roadmap', 'task_type': 'Epic', 'is_parent': False}, {'id': 273, 'name': 'Disable parent task selector in epics', 'task_type': 'Epic', 'is_parent': False}, {'id': 280, 'name': 'logging (task and project history)', 'task_type': 'Epic', 'is_parent': False}, {'id': 275, 'name': 'Add support for sprints/cycles', 'task_type': 'Epic', 'is_parent': False}, {'id': 285, 'name': 'Add text truncation to project names in task list', 'task_type': 'Epic', 'is_parent': False}, {'id': 82, 'name': 'Implement Third-Party Authentication', 'task_type': 'Epic', 'is_parent': False}, {'id': 97, 'name': '1. Build Basic User Authentication System', 'task_type': 'Epic', 'is_parent': False}, {'id': 61, 'name': 'Parent task assignment', 'task_type': 'Epic', 'is_parent': False}, {'id': 84, 'name': 'Enhance Task Contributor Management', 'task_type': 'Epic', 'is_parent': False}, {'id': 98, 'name': 'Introduce Role-Based Access Control', 'task_type': 'Epic', 'is_parent': False}, {'id': 83, 'name': 'Notifications', 'task_type': 'Epic', 'is_parent': False}, {'id': 99, 'name': 'Enhance User Account Management', 'task_type': 'Epic', 'is_parent': False}]
2025-03-04 21:43:48,541 INFO: BEGIN (implicit)
2025-03-04 21:43:48,542 INFO: ROLLBACK
2025-03-04 21:43:48,543 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-04 21:43:48,543 INFO: [cached since 5086s ago] {'pk_1': 19}
2025-03-04 21:43:48,544 INFO: 127.0.0.1 - - [04/Mar/2025 21:43:48] "GET /tasks/available_tasks?task_type=User%20Story&exclude_task_id=387&page=1&limit=30 HTTP/1.1" 200 -
2025-03-04 21:43:48,546 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-04 21:43:48,546 INFO: [cached since 5086s ago] {}
2025-03-04 21:43:48,549 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-04 21:43:48,549 INFO: [cached since 5086s ago] {'param_1': 19}
2025-03-04 21:43:48,549 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 21:43:48,550 INFO: [cached since 5086s ago] {'param_1': 1}
2025-03-04 21:43:48,551 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 21:43:48,551 INFO: [cached since 5086s ago] {'param_1': 2}
2025-03-04 21:43:48,552 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 21:43:48,552 INFO: [cached since 5086s ago] {'param_1': 3}
2025-03-04 21:43:48,552 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 21:43:48,552 INFO: [cached since 5086s ago] {'param_1': 4}
2025-03-04 21:43:48,553 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 21:43:48,553 INFO: [cached since 5086s ago] {'param_1': 5}
2025-03-04 21:43:48,553 INFO: ROLLBACK
2025-03-04 21:43:48,554 INFO: 127.0.0.1 - - [04/Mar/2025 21:43:48] "GET /api/projects/19/contributors/manage HTTP/1.1" 200 -
2025-03-04 21:43:57,383 INFO: 127.0.0.1 - - [04/Mar/2025 21:43:57] "OPTIONS /api/tasks/387 HTTP/1.1" 200 -
2025-03-04 21:43:57,389 INFO: BEGIN (implicit)
2025-03-04 21:43:57,389 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:43:57,390 INFO: [cached since 5051s ago] {'pk_1': 387}
2025-03-04 21:43:57,392 DEBUG: Received update payload for Task ID 387: {'project_id': '6'}
2025-03-04 21:43:57,393 INFO: UPDATE task SET project_id=%(project_id)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 21:43:57,393 INFO: [cached since 4909s ago] {'project_id': 6, 'updated_at': datetime.datetime(2025, 3, 4, 20, 43, 57, 392820), 'task_id': 387}
2025-03-04 21:43:57,398 INFO: COMMIT
2025-03-04 21:43:57,399 INFO: Task ID 387 updated successfully. Updated fields: ['project_id']
2025-03-04 21:43:57,400 INFO: BEGIN (implicit)
2025-03-04 21:43:57,400 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:43:57,400 INFO: [cached since 4946s ago] {'pk_1': 387}
2025-03-04 21:43:57,402 INFO: ROLLBACK
2025-03-04 21:43:57,403 INFO: 127.0.0.1 - - [04/Mar/2025 21:43:57] "PATCH /api/tasks/387 HTTP/1.1" 200 -
2025-03-04 21:43:57,490 INFO: BEGIN (implicit)
2025-03-04 21:43:57,490 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project 
WHERE project.id = %(pk_1)s
2025-03-04 21:43:57,491 INFO: [cached since 5095s ago] {'pk_1': 6}
2025-03-04 21:43:57,492 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor
2025-03-04 21:43:57,492 INFO: [cached since 5095s ago] {}
2025-03-04 21:43:57,493 INFO: SELECT contributor.id AS contributor_id, contributor.name AS contributor_name 
FROM contributor, project_contributor 
WHERE %(param_1)s = project_contributor.project_id AND contributor.id = project_contributor.contributor_id
2025-03-04 21:43:57,493 INFO: [cached since 5095s ago] {'param_1': 6}
2025-03-04 21:43:57,494 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 21:43:57,494 INFO: [cached since 5095s ago] {'param_1': 1}
2025-03-04 21:43:57,496 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 21:43:57,497 INFO: [cached since 5095s ago] {'param_1': 2}
2025-03-04 21:43:57,498 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 21:43:57,498 INFO: [cached since 5095s ago] {'param_1': 3}
2025-03-04 21:43:57,499 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 21:43:57,500 INFO: [cached since 5095s ago] {'param_1': 4}
2025-03-04 21:43:57,501 INFO: SELECT project.id AS project_id, project.name AS project_name, project.description AS project_description, project.start_date AS project_start_date, project.end_date AS project_end_date, project.scope AS project_scope, project.completed_story_points AS project_completed_story_points, project.created_at AS project_created_at, project.updated_at AS project_updated_at 
FROM project, project_contributor 
WHERE %(param_1)s = project_contributor.contributor_id AND project.id = project_contributor.project_id
2025-03-04 21:43:57,501 INFO: [cached since 5095s ago] {'param_1': 5}
2025-03-04 21:43:57,502 INFO: ROLLBACK
2025-03-04 21:43:57,503 INFO: 127.0.0.1 - - [04/Mar/2025 21:43:57] "GET /api/projects/6/contributors/manage HTTP/1.1" 200 -
2025-03-04 21:44:06,569 INFO: 127.0.0.1 - - [04/Mar/2025 21:44:06] "OPTIONS /api/tasks/387 HTTP/1.1" 200 -
2025-03-04 21:44:06,573 INFO: BEGIN (implicit)
2025-03-04 21:44:06,574 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:44:06,574 INFO: [cached since 5060s ago] {'pk_1': 387}
2025-03-04 21:44:06,577 DEBUG: Received update payload for Task ID 387: {'name': 'Extending and Optimizing task updates:'}
2025-03-04 21:44:06,579 INFO: UPDATE task SET name=%(name)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 21:44:06,579 INFO: [generated in 0.00045s] {'name': 'Extending and Optimizing task updates:', 'updated_at': datetime.datetime(2025, 3, 4, 20, 44, 6, 578105), 'task_id': 387}
2025-03-04 21:44:06,581 INFO: COMMIT
2025-03-04 21:44:06,582 INFO: Task ID 387 updated successfully. Updated fields: ['name']
2025-03-04 21:44:06,583 INFO: BEGIN (implicit)
2025-03-04 21:44:06,583 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:44:06,583 INFO: [cached since 4956s ago] {'pk_1': 387}
2025-03-04 21:44:06,585 INFO: ROLLBACK
2025-03-04 21:44:06,586 INFO: 127.0.0.1 - - [04/Mar/2025 21:44:06] "PATCH /api/tasks/387 HTTP/1.1" 200 -
2025-03-04 21:44:10,084 INFO: BEGIN (implicit)
2025-03-04 21:44:10,085 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:44:10,085 INFO: [cached since 5063s ago] {'pk_1': 387}
2025-03-04 21:44:10,087 DEBUG: Received update payload for Task ID 387: {'task_type': 'Epic'}
2025-03-04 21:44:10,087 INFO: Task ID 387: Changing task_type from User Story to Epic
2025-03-04 21:44:10,087 INFO: Task ID 387: Removing priority (was: None)
2025-03-04 21:44:10,087 DEBUG: üîç Validating priority: key=priority, value=None, task_type=User Story
2025-03-04 21:44:10,088 DEBUG: Validating task_type change for Task 387: Epic
2025-03-04 21:44:10,088 INFO: Task 387: Updating 'task_type' from User Story to Epic
2025-03-04 21:44:10,088 INFO: Hierarchy validation passed for Task 387.
2025-03-04 21:44:10,088 INFO: Validation passed for task_type: Epic
2025-03-04 21:44:10,089 INFO: UPDATE task SET task_type=%(task_type)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 21:44:10,089 INFO: [cached since 4917s ago] {'task_type': 'Epic', 'updated_at': datetime.datetime(2025, 3, 4, 20, 44, 10, 88512), 'task_id': 387}
2025-03-04 21:44:10,090 INFO: COMMIT
2025-03-04 21:44:10,091 INFO: Task ID 387 updated successfully. Updated fields: ['priority', 'task_type']
2025-03-04 21:44:10,092 INFO: BEGIN (implicit)
2025-03-04 21:44:10,093 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:44:10,094 INFO: [cached since 4959s ago] {'pk_1': 387}
2025-03-04 21:44:10,095 INFO: ROLLBACK
2025-03-04 21:44:10,096 INFO: 127.0.0.1 - - [04/Mar/2025 21:44:10] "PATCH /api/tasks/387 HTTP/1.1" 200 -
2025-03-04 21:44:10,181 INFO: 127.0.0.1 - - [04/Mar/2025 21:44:10] "OPTIONS /tasks/available_tasks?task_type=Epic&exclude_task_id=387&page=1&limit=30 HTTP/1.1" 200 -
2025-03-04 21:44:10,182 INFO: Entering available_tasks route...
2025-03-04 21:44:10,183 DEBUG: Query parameters: task_type=Epic, exclude_task_id=387, search_term=, project_id=None, limit=30, page=1
2025-03-04 21:44:10,183 INFO: BEGIN (implicit)
2025-03-04 21:44:10,184 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:44:10,184 INFO: [cached since 5063s ago] {'pk_1': 387}
2025-03-04 21:44:10,185 DEBUG: Filters applied: {'is_archived': False, 'id__ne': 387, 'task_type': ['Epic']}
2025-03-04 21:44:10,186 INFO: Validating hierarchy for Task N/A
2025-03-04 21:44:10,186 INFO: Determining valid parent types for task_type: Epic
2025-03-04 21:44:10,186 INFO: No valid parents found for task_type: Epic
2025-03-04 21:44:10,186 INFO: ROLLBACK
2025-03-04 21:44:10,187 INFO: 127.0.0.1 - - [04/Mar/2025 21:44:10] "GET /tasks/available_tasks?task_type=Epic&exclude_task_id=387&page=1&limit=30 HTTP/1.1" 200 -
2025-03-04 21:45:16,756 INFO: 127.0.0.1 - - [04/Mar/2025 21:45:16] "OPTIONS /api/tasks/387 HTTP/1.1" 200 -
2025-03-04 21:45:16,759 INFO: BEGIN (implicit)
2025-03-04 21:45:16,759 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:45:16,760 INFO: [cached since 5130s ago] {'pk_1': 387}
2025-03-04 21:45:16,761 DEBUG: Received update payload for Task ID 387: {'description': '<p>To improve <strong>maintainability and readability</strong>, we will <strong>split update_task_route()</strong> into the following <strong>three separate functions</strong>:</p>'}
2025-03-04 21:45:16,761 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 21:45:16,761 INFO: [cached since 1596s ago] {'description': '<p>To improve <strong>maintainability and readability</strong>, we will <strong>split update_task_route()</strong> into the following <strong>three separate functions</strong>:</p>', 'updated_at': datetime.datetime(2025, 3, 4, 20, 45, 16, 761395), 'task_id': 387}
2025-03-04 21:45:16,762 INFO: COMMIT
2025-03-04 21:45:16,763 INFO: Task ID 387 updated successfully. Updated fields: ['description']
2025-03-04 21:45:16,764 INFO: BEGIN (implicit)
2025-03-04 21:45:16,764 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:45:16,764 INFO: [cached since 5026s ago] {'pk_1': 387}
2025-03-04 21:45:16,765 INFO: ROLLBACK
2025-03-04 21:45:16,766 INFO: 127.0.0.1 - - [04/Mar/2025 21:45:16] "PATCH /api/tasks/387 HTTP/1.1" 200 -
2025-03-04 21:45:20,118 INFO: BEGIN (implicit)
2025-03-04 21:45:20,119 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:45:20,119 INFO: [cached since 5133s ago] {'pk_1': 387}
2025-03-04 21:45:20,122 DEBUG: Received update payload for Task ID 387: {'description': '<p>To improve <strong>maintainability and readability</strong>, we will <strong>split update_task_route()</strong> into the following <strong>three separate functions</strong>:</p><p></p>'}
2025-03-04 21:45:20,123 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 21:45:20,123 INFO: [cached since 1599s ago] {'description': '<p>To improve <strong>maintainability and readability</strong>, we will <strong>split update_task_route()</strong> into the following <strong>three separate functions</strong>:</p><p></p>', 'updated_at': datetime.datetime(2025, 3, 4, 20, 45, 20, 122719), 'task_id': 387}
2025-03-04 21:45:20,128 INFO: COMMIT
2025-03-04 21:45:20,129 INFO: Task ID 387 updated successfully. Updated fields: ['description']
2025-03-04 21:45:20,130 INFO: BEGIN (implicit)
2025-03-04 21:45:20,130 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:45:20,131 INFO: [cached since 5029s ago] {'pk_1': 387}
2025-03-04 21:45:20,132 INFO: ROLLBACK
2025-03-04 21:45:20,134 INFO: 127.0.0.1 - - [04/Mar/2025 21:45:20] "PATCH /api/tasks/387 HTTP/1.1" 200 -
2025-03-04 21:45:41,698 INFO: 127.0.0.1 - - [04/Mar/2025 21:45:41] "OPTIONS /api/tasks/387 HTTP/1.1" 200 -
2025-03-04 21:45:41,703 INFO: BEGIN (implicit)
2025-03-04 21:45:41,704 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:45:41,704 INFO: [cached since 5155s ago] {'pk_1': 387}
2025-03-04 21:45:41,709 DEBUG: Received update payload for Task ID 387: {'description': '<p>To improve <strong>maintainability and readability</strong>, we will <strong>split update_task_route()</strong> into the following <strong>three separate functions</strong>:</p><p><strong>Function</strong> <strong>Responsibility</strong></p><p>‚úÖ update_task_field(task_id, field, value) Handles <strong>generic</strong> field updates.</p><p>‚úÖ update_task_status(task_id, status) Manages <strong>task completion &amp; status changes</strong>.</p><p>‚úÖ update_task_contributor(task_id, contributor_id) Ensures <strong>contributor validity</strong> before assignment.</p>'}
2025-03-04 21:45:41,710 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 21:45:41,711 INFO: [cached since 1621s ago] {'description': '<p>To improve <strong>maintainability and readability</strong>, we will <strong>split update_task_route()</strong> into the following <strong>three s ... (272 characters truncated) ... tatus changes</strong>.</p><p>‚úÖ update_task_contributor(task_id, contributor_id) Ensures <strong>contributor validity</strong> before assignment.</p>', 'updated_at': datetime.datetime(2025, 3, 4, 20, 45, 41, 710139), 'task_id': 387}
2025-03-04 21:45:41,712 INFO: COMMIT
2025-03-04 21:45:41,713 INFO: Task ID 387 updated successfully. Updated fields: ['description']
2025-03-04 21:45:41,714 INFO: BEGIN (implicit)
2025-03-04 21:45:41,714 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:45:41,714 INFO: [cached since 5051s ago] {'pk_1': 387}
2025-03-04 21:45:41,715 INFO: ROLLBACK
2025-03-04 21:45:41,717 INFO: 127.0.0.1 - - [04/Mar/2025 21:45:41] "PATCH /api/tasks/387 HTTP/1.1" 200 -
2025-03-04 21:46:20,363 INFO: 127.0.0.1 - - [04/Mar/2025 21:46:20] "OPTIONS /api/tasks/387 HTTP/1.1" 200 -
2025-03-04 21:46:20,369 INFO: BEGIN (implicit)
2025-03-04 21:46:20,370 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:46:20,371 INFO: [cached since 5194s ago] {'pk_1': 387}
2025-03-04 21:46:20,372 DEBUG: Received update payload for Task ID 387: {'description': '<p>To improve <strong>maintainability and readability</strong>, we will <strong>split update_task_route()</strong> into the following <strong>three separate functions</strong>:</p><p><strong>Function</strong> <strong>Responsibility</strong></p><p>‚úÖ update_task_field(task_id, field, value) Handles <strong>generic</strong> field updates.</p><p>‚úÖ update_task_status(task_id, status) Manages <strong>task completion &amp; status changes</strong>.</p><p>‚úÖ update_task_contributor(task_id, contributor_id) Ensures <strong>contributor validity</strong> before assignment.</p><p></p><p>‚Ä¢ Refactor existing task updates into these modular functions.</p><p>‚Ä¢ Implement better error handling for invalid updates.</p><p>‚Ä¢ Optimize WebSocket event emissions for efficiency.</p>'}
2025-03-04 21:46:20,374 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 21:46:20,374 INFO: [cached since 1660s ago] {'description': '<p>To improve <strong>maintainability and readability</strong>, we will <strong>split update_task_route()</strong> into the following <strong>three s ... (468 characters truncated) ...  these modular functions.</p><p>‚Ä¢ Implement better error handling for invalid updates.</p><p>‚Ä¢ Optimize WebSocket event emissions for efficiency.</p>', 'updated_at': datetime.datetime(2025, 3, 4, 20, 46, 20, 373137), 'task_id': 387}
2025-03-04 21:46:20,375 INFO: COMMIT
2025-03-04 21:46:20,376 INFO: Task ID 387 updated successfully. Updated fields: ['description']
2025-03-04 21:46:20,377 INFO: BEGIN (implicit)
2025-03-04 21:46:20,377 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:46:20,378 INFO: [cached since 5089s ago] {'pk_1': 387}
2025-03-04 21:46:20,379 INFO: ROLLBACK
2025-03-04 21:46:20,380 INFO: 127.0.0.1 - - [04/Mar/2025 21:46:20] "PATCH /api/tasks/387 HTTP/1.1" 200 -
2025-03-04 21:46:30,867 INFO: 127.0.0.1 - - [04/Mar/2025 21:46:30] "OPTIONS /api/tasks/387 HTTP/1.1" 200 -
2025-03-04 21:46:30,869 INFO: BEGIN (implicit)
2025-03-04 21:46:30,870 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:46:30,870 INFO: [cached since 5204s ago] {'pk_1': 387}
2025-03-04 21:46:30,872 DEBUG: Received update payload for Task ID 387: {'description': '<p>To improve <strong>maintainability and readability</strong>, we will <strong>split update_task_route()</strong> into the following <strong>three separate functions</strong>:</p><p></p><p></p><p>‚Ä¢ Refactor existing task updates into these modular functions.</p><p>‚Ä¢ Implement better error handling for invalid updates.</p><p>‚Ä¢ Optimize WebSocket event emissions for efficiency.</p>'}
2025-03-04 21:46:30,873 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 21:46:30,873 INFO: [cached since 1670s ago] {'description': '<p>To improve <strong>maintainability and readability</strong>, we will <strong>split update_task_route()</strong> into the following <strong>three s ... (85 characters truncated) ...  these modular functions.</p><p>‚Ä¢ Implement better error handling for invalid updates.</p><p>‚Ä¢ Optimize WebSocket event emissions for efficiency.</p>', 'updated_at': datetime.datetime(2025, 3, 4, 20, 46, 30, 872893), 'task_id': 387}
2025-03-04 21:46:30,876 INFO: COMMIT
2025-03-04 21:46:30,877 INFO: Task ID 387 updated successfully. Updated fields: ['description']
2025-03-04 21:46:30,878 INFO: BEGIN (implicit)
2025-03-04 21:46:30,878 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:46:30,879 INFO: [cached since 5100s ago] {'pk_1': 387}
2025-03-04 21:46:30,882 INFO: ROLLBACK
2025-03-04 21:46:30,883 INFO: 127.0.0.1 - - [04/Mar/2025 21:46:30] "PATCH /api/tasks/387 HTTP/1.1" 200 -
2025-03-04 21:46:31,926 INFO: BEGIN (implicit)
2025-03-04 21:46:31,928 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:46:31,928 INFO: [cached since 5205s ago] {'pk_1': 387}
2025-03-04 21:46:31,929 DEBUG: Received update payload for Task ID 387: {'description': '<p>To improve <strong>maintainability and readability</strong>, we will <strong>split update_task_route()</strong> into the following <strong>three separate functions</strong>:</p><p></p><p>‚Ä¢ Refactor existing task updates into these modular functions.</p><p>‚Ä¢ Implement better error handling for invalid updates.</p><p>‚Ä¢ Optimize WebSocket event emissions for efficiency.</p>'}
2025-03-04 21:46:31,930 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 21:46:31,930 INFO: [cached since 1671s ago] {'description': '<p>To improve <strong>maintainability and readability</strong>, we will <strong>split update_task_route()</strong> into the following <strong>three s ... (78 characters truncated) ...  these modular functions.</p><p>‚Ä¢ Implement better error handling for invalid updates.</p><p>‚Ä¢ Optimize WebSocket event emissions for efficiency.</p>', 'updated_at': datetime.datetime(2025, 3, 4, 20, 46, 31, 930078), 'task_id': 387}
2025-03-04 21:46:31,931 INFO: COMMIT
2025-03-04 21:46:31,931 INFO: Task ID 387 updated successfully. Updated fields: ['description']
2025-03-04 21:46:31,931 INFO: BEGIN (implicit)
2025-03-04 21:46:31,932 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:46:31,932 INFO: [cached since 5101s ago] {'pk_1': 387}
2025-03-04 21:46:31,933 INFO: ROLLBACK
2025-03-04 21:46:31,933 INFO: 127.0.0.1 - - [04/Mar/2025 21:46:31] "PATCH /api/tasks/387 HTTP/1.1" 200 -
2025-03-04 21:46:40,310 INFO: 127.0.0.1 - - [04/Mar/2025 21:46:40] "OPTIONS /api/tasks/387 HTTP/1.1" 200 -
2025-03-04 21:46:40,316 INFO: BEGIN (implicit)
2025-03-04 21:46:40,316 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:46:40,317 INFO: [cached since 5214s ago] {'pk_1': 387}
2025-03-04 21:46:40,318 DEBUG: Received update payload for Task ID 387: {'description': '<p><br><br>To improve <strong>maintainability and readability</strong>, we will <strong>split update_task_route()</strong> into the following <strong>three separate functions</strong>:</p><p></p><p>‚Ä¢ Refactor existing task updates into these modular functions.</p><p>‚Ä¢ Implement better error handling for invalid updates.</p><p>‚Ä¢ Optimize WebSocket event emissions for efficiency.</p>'}
2025-03-04 21:46:40,319 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 21:46:40,320 INFO: [cached since 1680s ago] {'description': '<p><br><br>To improve <strong>maintainability and readability</strong>, we will <strong>split update_task_route()</strong> into the following <strong ... (86 characters truncated) ...  these modular functions.</p><p>‚Ä¢ Implement better error handling for invalid updates.</p><p>‚Ä¢ Optimize WebSocket event emissions for efficiency.</p>', 'updated_at': datetime.datetime(2025, 3, 4, 20, 46, 40, 319364), 'task_id': 387}
2025-03-04 21:46:40,321 INFO: COMMIT
2025-03-04 21:46:40,322 INFO: Task ID 387 updated successfully. Updated fields: ['description']
2025-03-04 21:46:40,322 INFO: BEGIN (implicit)
2025-03-04 21:46:40,323 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:46:40,323 INFO: [cached since 5109s ago] {'pk_1': 387}
2025-03-04 21:46:40,325 INFO: ROLLBACK
2025-03-04 21:46:40,325 INFO: 127.0.0.1 - - [04/Mar/2025 21:46:40] "PATCH /api/tasks/387 HTTP/1.1" 200 -
2025-03-04 21:46:43,773 INFO: BEGIN (implicit)
2025-03-04 21:46:43,774 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:46:43,774 INFO: [cached since 5217s ago] {'pk_1': 387}
2025-03-04 21:46:43,776 DEBUG: Received update payload for Task ID 387: {'description': '<p>Extend<br><br>To improve <strong>maintainability and readability</strong>, we will <strong>split update_task_route()</strong> into the following <strong>three separate functions</strong>:</p><p></p><p>‚Ä¢ Refactor existing task updates into these modular functions.</p><p>‚Ä¢ Implement better error handling for invalid updates.</p><p>‚Ä¢ Optimize WebSocket event emissions for efficiency.</p>'}
2025-03-04 21:46:43,777 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 21:46:43,777 INFO: [cached since 1683s ago] {'description': '<p>Extend<br><br>To improve <strong>maintainability and readability</strong>, we will <strong>split update_task_route()</strong> into the following < ... (92 characters truncated) ...  these modular functions.</p><p>‚Ä¢ Implement better error handling for invalid updates.</p><p>‚Ä¢ Optimize WebSocket event emissions for efficiency.</p>', 'updated_at': datetime.datetime(2025, 3, 4, 20, 46, 43, 776477), 'task_id': 387}
2025-03-04 21:46:43,778 INFO: COMMIT
2025-03-04 21:46:43,781 INFO: Task ID 387 updated successfully. Updated fields: ['description']
2025-03-04 21:46:43,783 INFO: BEGIN (implicit)
2025-03-04 21:46:43,784 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:46:43,784 INFO: [cached since 5113s ago] {'pk_1': 387}
2025-03-04 21:46:43,786 INFO: ROLLBACK
2025-03-04 21:46:43,787 INFO: 127.0.0.1 - - [04/Mar/2025 21:46:43] "PATCH /api/tasks/387 HTTP/1.1" 200 -
2025-03-04 21:46:47,743 INFO: 127.0.0.1 - - [04/Mar/2025 21:46:47] "OPTIONS /api/tasks/387 HTTP/1.1" 200 -
2025-03-04 21:46:47,748 INFO: BEGIN (implicit)
2025-03-04 21:46:47,749 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:46:47,749 INFO: [cached since 5221s ago] {'pk_1': 387}
2025-03-04 21:46:47,751 DEBUG: Received update payload for Task ID 387: {'description': '<p>Extend:<br><br>To improve <strong>maintainability and readability</strong>, we will <strong>split update_task_route()</strong> into the following <strong>three separate functions</strong>:</p><p></p><p>‚Ä¢ Refactor existing task updates into these modular functions.</p><p>‚Ä¢ Implement better error handling for invalid updates.</p><p>‚Ä¢ Optimize WebSocket event emissions for efficiency.</p>'}
2025-03-04 21:46:47,753 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 21:46:47,753 INFO: [cached since 1687s ago] {'description': '<p>Extend:<br><br>To improve <strong>maintainability and readability</strong>, we will <strong>split update_task_route()</strong> into the following  ... (93 characters truncated) ...  these modular functions.</p><p>‚Ä¢ Implement better error handling for invalid updates.</p><p>‚Ä¢ Optimize WebSocket event emissions for efficiency.</p>', 'updated_at': datetime.datetime(2025, 3, 4, 20, 46, 47, 752580), 'task_id': 387}
2025-03-04 21:46:47,754 INFO: COMMIT
2025-03-04 21:46:47,755 INFO: Task ID 387 updated successfully. Updated fields: ['description']
2025-03-04 21:46:47,755 INFO: BEGIN (implicit)
2025-03-04 21:46:47,756 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:46:47,756 INFO: [cached since 5117s ago] {'pk_1': 387}
2025-03-04 21:46:47,757 INFO: ROLLBACK
2025-03-04 21:46:47,759 INFO: 127.0.0.1 - - [04/Mar/2025 21:46:47] "PATCH /api/tasks/387 HTTP/1.1" 200 -
2025-03-04 21:46:49,632 INFO: BEGIN (implicit)
2025-03-04 21:46:49,632 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:46:49,633 INFO: [cached since 5223s ago] {'pk_1': 387}
2025-03-04 21:46:49,634 DEBUG: Received update payload for Task ID 387: {'description': '<p>Extend:<br><br><br><br><br>To improve <strong>maintainability and readability</strong>, we will <strong>split update_task_route()</strong> into the following <strong>three separate functions</strong>:</p><p></p><p>‚Ä¢ Refactor existing task updates into these modular functions.</p><p>‚Ä¢ Implement better error handling for invalid updates.</p><p>‚Ä¢ Optimize WebSocket event emissions for efficiency.</p>'}
2025-03-04 21:46:49,635 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 21:46:49,635 INFO: [cached since 1689s ago] {'description': '<p>Extend:<br><br><br><br><br>To improve <strong>maintainability and readability</strong>, we will <strong>split update_task_route()</strong> into th ... (105 characters truncated) ...  these modular functions.</p><p>‚Ä¢ Implement better error handling for invalid updates.</p><p>‚Ä¢ Optimize WebSocket event emissions for efficiency.</p>', 'updated_at': datetime.datetime(2025, 3, 4, 20, 46, 49, 634674), 'task_id': 387}
2025-03-04 21:46:49,636 INFO: COMMIT
2025-03-04 21:46:49,637 INFO: Task ID 387 updated successfully. Updated fields: ['description']
2025-03-04 21:46:49,637 INFO: BEGIN (implicit)
2025-03-04 21:46:49,637 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:46:49,638 INFO: [cached since 5119s ago] {'pk_1': 387}
2025-03-04 21:46:49,640 INFO: ROLLBACK
2025-03-04 21:46:49,641 INFO: 127.0.0.1 - - [04/Mar/2025 21:46:49] "PATCH /api/tasks/387 HTTP/1.1" 200 -
2025-03-04 21:46:53,432 INFO: 127.0.0.1 - - [04/Mar/2025 21:46:53] "OPTIONS /api/tasks/387 HTTP/1.1" 200 -
2025-03-04 21:46:53,435 INFO: BEGIN (implicit)
2025-03-04 21:46:53,436 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:46:53,436 INFO: [cached since 5227s ago] {'pk_1': 387}
2025-03-04 21:46:53,437 DEBUG: Received update payload for Task ID 387: {'description': '<p>Extend:<br><br><br>Optimize<br><br>To improve <strong>maintainability and readability</strong>, we will <strong>split update_task_route()</strong> into the following <strong>three separate functions</strong>:</p><p></p><p>‚Ä¢ Refactor existing task updates into these modular functions.</p><p>‚Ä¢ Implement better error handling for invalid updates.</p><p>‚Ä¢ Optimize WebSocket event emissions for efficiency.</p>'}
2025-03-04 21:46:53,438 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 21:46:53,438 INFO: [cached since 1693s ago] {'description': '<p>Extend:<br><br><br>Optimize<br><br>To improve <strong>maintainability and readability</strong>, we will <strong>split update_task_route()</strong> ... (113 characters truncated) ...  these modular functions.</p><p>‚Ä¢ Implement better error handling for invalid updates.</p><p>‚Ä¢ Optimize WebSocket event emissions for efficiency.</p>', 'updated_at': datetime.datetime(2025, 3, 4, 20, 46, 53, 437565), 'task_id': 387}
2025-03-04 21:46:53,439 INFO: COMMIT
2025-03-04 21:46:53,440 INFO: Task ID 387 updated successfully. Updated fields: ['description']
2025-03-04 21:46:53,440 INFO: BEGIN (implicit)
2025-03-04 21:46:53,441 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:46:53,441 INFO: [cached since 5122s ago] {'pk_1': 387}
2025-03-04 21:46:53,442 INFO: ROLLBACK
2025-03-04 21:46:53,443 INFO: 127.0.0.1 - - [04/Mar/2025 21:46:53] "PATCH /api/tasks/387 HTTP/1.1" 200 -
2025-03-04 21:47:00,420 INFO: 127.0.0.1 - - [04/Mar/2025 21:47:00] "OPTIONS /api/tasks/387 HTTP/1.1" 200 -
2025-03-04 21:47:00,424 INFO: BEGIN (implicit)
2025-03-04 21:47:00,425 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:47:00,425 INFO: [cached since 5234s ago] {'pk_1': 387}
2025-03-04 21:47:00,427 DEBUG: Received update payload for Task ID 387: {'description': '<p>Extend:<br><br><br>Optimizing:<br><br>To improve <strong>maintainability and readability</strong>, we will <strong>split update_task_route()</strong> into the following <strong>three separate functions</strong>:</p><p></p><p>‚Ä¢ Refactor existing task updates into these modular functions.</p><p>‚Ä¢ Implement better error handling for invalid updates.</p><p>‚Ä¢ Optimize WebSocket event emissions for efficiency.</p>'}
2025-03-04 21:47:00,428 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 21:47:00,429 INFO: [cached since 1700s ago] {'description': '<p>Extend:<br><br><br>Optimizing:<br><br>To improve <strong>maintainability and readability</strong>, we will <strong>split update_task_route()</stro ... (116 characters truncated) ...  these modular functions.</p><p>‚Ä¢ Implement better error handling for invalid updates.</p><p>‚Ä¢ Optimize WebSocket event emissions for efficiency.</p>', 'updated_at': datetime.datetime(2025, 3, 4, 20, 47, 0, 428030), 'task_id': 387}
2025-03-04 21:47:00,431 INFO: COMMIT
2025-03-04 21:47:00,432 INFO: Task ID 387 updated successfully. Updated fields: ['description']
2025-03-04 21:47:00,433 INFO: BEGIN (implicit)
2025-03-04 21:47:00,433 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:47:00,433 INFO: [cached since 5129s ago] {'pk_1': 387}
2025-03-04 21:47:00,435 INFO: ROLLBACK
2025-03-04 21:47:00,436 INFO: 127.0.0.1 - - [04/Mar/2025 21:47:00] "PATCH /api/tasks/387 HTTP/1.1" 200 -
2025-03-04 21:47:03,508 INFO: BEGIN (implicit)
2025-03-04 21:47:03,509 INFO: SELECT task.id AS task_id, task.name AS task_name, task.sort_order AS task_sort_order, task.description AS task_description, task.task_type AS task_task_type, task.priority AS task_priority, task.epic_priority AS task_epic_priority, task.is_archived AS task_is_archived, task.completed AS task_completed, task.status AS task_status, task.parent_id AS task_parent_id, task.project_id AS task_project_id, task.contributor_id AS task_contributor_id, task.story_points AS task_story_points, task.created_at AS task_created_at, task.updated_at AS task_updated_at, task.completed_date AS task_completed_date 
FROM task 
WHERE task.id = %(pk_1)s
2025-03-04 21:47:03,509 INFO: [cached since 5237s ago] {'pk_1': 387}
2025-03-04 21:47:03,510 DEBUG: Received update payload for Task ID 387: {'description': '<p>Extend:<br><br><br>Optimizing:<br>To improve <strong>maintainability and readability</strong>, we will <strong>split update_task_route()</strong> into the following <strong>three separate functions</strong>:</p><p></p><p>‚Ä¢ Refactor existing task updates into these modular functions.</p><p>‚Ä¢ Implement better error handling for invalid updates.</p><p>‚Ä¢ Optimize WebSocket event emissions for efficiency.</p>'}
2025-03-04 21:47:03,511 INFO: UPDATE task SET description=%(description)s, updated_at=%(updated_at)s WHERE task.id = %(task_id)s
2025-03-04 21:47:03,511 INFO: [cached since 1703s ago] {'description': '<p>Extend:<br><br><br>Optimizing:<br>To improve <strong>maintainability and readability</strong>, we will <strong>split update_task_route()</strong>  ... (112 characters truncated) ...  these modular functions.</p><p>‚Ä¢ Implement better error handling for invalid updates.</p><p>‚Ä¢ Optimize WebSocket event emissions for efficiency.</p>', 'updated_at': datetime.datetime(2025, 3, 4, 20, 47, 3, 510913), 'task_id': 387}
2025-03-04 21:47:03,513 INFO: COMMIT
